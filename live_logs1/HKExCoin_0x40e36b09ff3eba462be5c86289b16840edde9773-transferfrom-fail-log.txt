This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 17:44:19,566 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 17:44:19,567 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 17:44:19,578 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 17:44:19,578 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 17:44:19,579 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 17:44:19,580 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 17:44:19,581 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 17:44:19,582 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 17:44:19,583 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 17:44:19,584 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 17:44:19,584 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 17:44:19,585 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 17:44:19,586 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 17:44:19,587 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 17:44:19,587 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 17:44:19,588 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 17:44:19,589 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 17:44:19,590 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 17:44:19,591 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 17:44:19,592 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 17:44:19,593 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 17:44:19,594 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 17:44:19,595 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 17:44:19,595 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 17:44:19,595 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 17:44:19,596 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 17:44:19,596 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 17:44:19,597 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 17:44:19,597 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 17:44:19,597 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 17:44:19,598 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 17:44:19,598 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 17:44:19,599 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 17:44:19,599 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 17:44:19,600 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 17:44:19,600 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 17:44:19,600 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 17:44:19,601 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 17:44:19,601 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 17:44:19,602 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 17:44:19,602 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 17:44:19,610 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 17:44:19,610 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 17:44:19,611 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 17:44:19,611 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 17:44:19,611 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 17:44:19,611 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 17:44:19,612 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 17:44:19,612 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 17:44:19,612 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 17:44:19,612 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 17:44:19,612 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 17:44:19,612 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 17:44:19,612 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 17:44:19,612 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 17:44:19,613 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 17:44:19,613 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 17:44:19,613 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 17:44:19,613 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 17:44:19,613 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 17:44:19,613 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 17:44:19,613 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 17:44:19,613 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 17:44:19,614 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 17:44:19,614 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 17:44:19,614 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 17:44:19,614 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 17:44:19,638 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 17:44:19,651 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 17:44:19,654 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 17:44:19,655 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 17:44:19,655 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 17:44:19,656 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/HKExCoin_0x40e36b09ff3eba462be5c86289b16840edde9773_transferfrom-fail.bpl
[2020-11-25 17:44:19,656 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/HKExCoin_0x40e36b09ff3eba462be5c86289b16840edde9773_transferfrom-fail.bpl'
[2020-11-25 17:44:19,767 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 17:44:19,768 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 17:44:19,768 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 17:44:19,768 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 17:44:19,768 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 17:44:19,785 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "HKExCoin_0x40e36b09ff3eba462be5c86289b16840edde9773_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:44:19" (1/1) ...
[2020-11-25 17:44:19,787 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "HKExCoin_0x40e36b09ff3eba462be5c86289b16840edde9773_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:44:19" (1/1) ...
[2020-11-25 17:44:19,830 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "HKExCoin_0x40e36b09ff3eba462be5c86289b16840edde9773_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:44:19" (1/1) ...
[2020-11-25 17:44:19,831 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "HKExCoin_0x40e36b09ff3eba462be5c86289b16840edde9773_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:44:19" (1/1) ...
[2020-11-25 17:44:19,862 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "HKExCoin_0x40e36b09ff3eba462be5c86289b16840edde9773_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:44:19" (1/1) ...
[2020-11-25 17:44:19,878 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "HKExCoin_0x40e36b09ff3eba462be5c86289b16840edde9773_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:44:19" (1/1) ...
[2020-11-25 17:44:19,892 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "HKExCoin_0x40e36b09ff3eba462be5c86289b16840edde9773_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:44:19" (1/1) ...
[2020-11-25 17:44:19,909 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 17:44:19,910 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 17:44:19,910 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 17:44:19,912 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 17:44:19,916 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "HKExCoin_0x40e36b09ff3eba462be5c86289b16840edde9773_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:44:19" (1/1) ...
[2020-11-25 17:44:19,938 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(HKExCoin.transferFrom(from, to, value), from != to && (value > balances_BasicToken[this][from] || value > allowed_StandardToken[this][from][msg.sender] || balances_BasicToken[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][from] >= 0 &&  balances_BasicToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_StandardToken[this][from][msg.sender] >= 0 && allowed_StandardToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(HKExCoin.transferFrom)))
[2020-11-25 17:44:19,944 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(HKExCoin.transferFrom(from, to, value), from != to && (value > balances_BasicToken[this][from] || value > allowed_StandardToken[this][from][msg.sender] || balances_BasicToken[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][from] >= 0 &&  balances_BasicToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_StandardToken[this][from][msg.sender] >= 0 && allowed_StandardToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(HKExCoin.transferFrom)))
[2020-11-25 17:44:19,952 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(HKExCoin.transferFrom(from, to, value), from != to && (value > balances_BasicToken[this][from] || value > allowed_StandardToken[this][from][msg.sender] || balances_BasicToken[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][from] >= 0 &&  balances_BasicToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_StandardToken[this][from][msg.sender] >= 0 && allowed_StandardToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(HKExCoin.transferFrom)))
[2020-11-25 17:44:19,963 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( _from_s858!=_to_s858 && ( ( _value_s858>balances_BasicToken[this][_from_s858] || _value_s858>allowed_StandardToken[this][_from_s858][msg.sender] ) || ( balances_BasicToken[this][_to_s858] + _value_s858 )>=115792089237316195423570985008687907853269984665640564039457584007913129639936 ) ) && _value_s858>=0 ) && _value_s858<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_BasicToken[this][_to_s858]>=0 ) && balances_BasicToken[this][_to_s858]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_BasicToken[this][_from_s858]>=0 ) && balances_BasicToken[this][_from_s858]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && allowed_StandardToken[this][_from_s858][msg.sender]>=0 ) && allowed_StandardToken[this][_from_s858][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[_from_s858,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HKExCoin>],IdentifierExpression[_to_s858,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HKExCoin>]],BinaryExpression[LOGICOR,BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[_value_s858,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HKExCoin>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HKExCoin>]]],[IdentifierExpression[_from_s858,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HKExCoin>]]]],BinaryExpression[COMPGT,IdentifierExpression[_value_s858,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HKExCoin>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HKExCoin>]]],[IdentifierExpression[_from_s858,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HKExCoin>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HKExCoin>]]]]],BinaryExpression[COMPGEQ,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HKExCoin>]]],[IdentifierExpression[_to_s858,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HKExCoin>]]],IdentifierExpression[_value_s858,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HKExCoin>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]],BinaryExpression[COMPGEQ,IdentifierExpression[_value_s858,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HKExCoin>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[_value_s858,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HKExCoin>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HKExCoin>]]],[IdentifierExpression[_to_s858,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HKExCoin>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HKExCoin>]]],[IdentifierExpression[_to_s858,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HKExCoin>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HKExCoin>]]],[IdentifierExpression[_from_s858,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HKExCoin>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HKExCoin>]]],[IdentifierExpression[_from_s858,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HKExCoin>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HKExCoin>]]],[IdentifierExpression[_from_s858,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HKExCoin>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HKExCoin>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HKExCoin>]]],[IdentifierExpression[_from_s858,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HKExCoin>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HKExCoin>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 17:44:19,970 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(HKExCoin.transferFrom(from, to, value), from != to && (value > balances_BasicToken[this][from] || value > allowed_StandardToken[this][from][msg.sender] || balances_BasicToken[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][from] >= 0 &&  balances_BasicToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_StandardToken[this][from][msg.sender] >= 0 && allowed_StandardToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(HKExCoin.transferFrom)))
[2020-11-25 17:44:19,970 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_HKExCoin0) ==> ( <>AP(fail_transferFrom_HKExCoin0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 17:44:19,986 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:44:19 PropertyContainer
[2020-11-25 17:44:19,986 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 17:44:19,987 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 17:44:19,987 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 17:44:19,987 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 17:44:19,988 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "HKExCoin_0x40e36b09ff3eba462be5c86289b16840edde9773_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:44:19" (1/2) ...
[2020-11-25 17:44:19,988 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 17:44:19,988 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 17:44:20,011 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:44:19" (2/2) ...
[2020-11-25 17:44:20,011 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 17:44:20,011 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 17:44:20,012 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 17:44:20,012 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 17:44:20,012 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "HKExCoin_0x40e36b09ff3eba462be5c86289b16840edde9773_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:44:19" (1/2) ...
[2020-11-25 17:44:20,068 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 17:44:20,068 INFO  L130     BoogieDeclarations]: Found specification of procedure HKExCoin.TimeLock_ctor__success
[2020-11-25 17:44:20,068 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 17:44:20,068 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 17:44:20,068 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 17:44:20,068 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 17:44:20,068 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 17:44:20,069 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 17:44:20,069 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 17:44:20,069 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 17:44:20,069 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-25 17:44:20,069 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-25 17:44:20,069 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-25 17:44:20,069 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-25 17:44:20,069 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__success
[2020-11-25 17:44:20,069 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-25 17:44:20,070 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-25 17:44:20,070 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-25 17:44:20,070 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic
[2020-11-25 17:44:20,070 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic
[2020-11-25 17:44:20,070 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Basic
[2020-11-25 17:44:20,070 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Basic
[2020-11-25 17:44:20,070 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Basic
[2020-11-25 17:44:20,070 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-25 17:44:20,070 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken
[2020-11-25 17:44:20,070 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken
[2020-11-25 17:44:20,071 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken
[2020-11-25 17:44:20,071 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken
[2020-11-25 17:44:20,071 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken
[2020-11-25 17:44:20,071 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken
[2020-11-25 17:44:20,071 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken
[2020-11-25 17:44:20,071 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken
[2020-11-25 17:44:20,071 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 17:44:20,071 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 17:44:20,071 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 17:44:20,071 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 17:44:20,072 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 17:44:20,072 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 17:44:20,072 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-25 17:44:20,072 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken
[2020-11-25 17:44:20,072 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken
[2020-11-25 17:44:20,072 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-25 17:44:20,072 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-25 17:44:20,072 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken
[2020-11-25 17:44:20,072 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken
[2020-11-25 17:44:20,072 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken
[2020-11-25 17:44:20,072 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken
[2020-11-25 17:44:20,073 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken
[2020-11-25 17:44:20,073 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken
[2020-11-25 17:44:20,073 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-25 17:44:20,073 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-25 17:44:20,073 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 17:44:20,073 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable
[2020-11-25 17:44:20,073 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable
[2020-11-25 17:44:20,073 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable
[2020-11-25 17:44:20,073 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable
[2020-11-25 17:44:20,073 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable
[2020-11-25 17:44:20,074 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable
[2020-11-25 17:44:20,074 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable
[2020-11-25 17:44:20,074 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable
[2020-11-25 17:44:20,074 INFO  L130     BoogieDeclarations]: Found specification of procedure PausableToken_PausableToken_NoBaseCtor__success
[2020-11-25 17:44:20,074 INFO  L130     BoogieDeclarations]: Found specification of procedure PausableToken_PausableToken
[2020-11-25 17:44:20,074 INFO  L138     BoogieDeclarations]: Found implementation of procedure PausableToken_PausableToken
[2020-11-25 17:44:20,074 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_PausableToken
[2020-11-25 17:44:20,074 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_PausableToken
[2020-11-25 17:44:20,074 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_PausableToken
[2020-11-25 17:44:20,074 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_PausableToken
[2020-11-25 17:44:20,075 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_PausableToken
[2020-11-25 17:44:20,075 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_PausableToken
[2020-11-25 17:44:20,075 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_PausableToken
[2020-11-25 17:44:20,075 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_PausableToken
[2020-11-25 17:44:20,075 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_PausableToken
[2020-11-25 17:44:20,075 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_PausableToken
[2020-11-25 17:44:20,075 INFO  L130     BoogieDeclarations]: Found specification of procedure HKExCoin_HKExCoin_NoBaseCtor__success
[2020-11-25 17:44:20,075 INFO  L130     BoogieDeclarations]: Found specification of procedure HKExCoin_HKExCoin
[2020-11-25 17:44:20,075 INFO  L138     BoogieDeclarations]: Found implementation of procedure HKExCoin_HKExCoin
[2020-11-25 17:44:20,075 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_HKExCoin
[2020-11-25 17:44:20,076 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_HKExCoin
[2020-11-25 17:44:20,076 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_HKExCoin
[2020-11-25 17:44:20,076 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_HKExCoin
[2020-11-25 17:44:20,076 INFO  L130     BoogieDeclarations]: Found specification of procedure canSubAllocation~address~uint256_HKExCoin__success
[2020-11-25 17:44:20,076 INFO  L130     BoogieDeclarations]: Found specification of procedure subAllocation~address_HKExCoin__success
[2020-11-25 17:44:20,076 INFO  L130     BoogieDeclarations]: Found specification of procedure setAllocation~address~uint256~arr~arr_HKExCoin
[2020-11-25 17:44:20,076 INFO  L138     BoogieDeclarations]: Found implementation of procedure setAllocation~address~uint256~arr~arr_HKExCoin
[2020-11-25 17:44:20,076 INFO  L130     BoogieDeclarations]: Found specification of procedure name_HKExCoin
[2020-11-25 17:44:20,076 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_HKExCoin
[2020-11-25 17:44:20,076 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_HKExCoin
[2020-11-25 17:44:20,077 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_HKExCoin
[2020-11-25 17:44:20,077 INFO  L130     BoogieDeclarations]: Found specification of procedure standard_HKExCoin
[2020-11-25 17:44:20,077 INFO  L138     BoogieDeclarations]: Found implementation of procedure standard_HKExCoin
[2020-11-25 17:44:20,077 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_HKExCoin
[2020-11-25 17:44:20,077 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_HKExCoin
[2020-11-25 17:44:20,077 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_HKExCoin
[2020-11-25 17:44:20,077 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_HKExCoin
[2020-11-25 17:44:20,077 INFO  L130     BoogieDeclarations]: Found specification of procedure allocations~address~uint256_HKExCoin
[2020-11-25 17:44:20,077 INFO  L138     BoogieDeclarations]: Found implementation of procedure allocations~address~uint256_HKExCoin
[2020-11-25 17:44:20,077 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 17:44:20,078 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 17:44:20,078 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 17:44:20,078 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 17:44:20,078 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__success
[2020-11-25 17:44:20,078 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__success
[2020-11-25 17:44:20,078 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 17:44:20,078 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 17:44:20,078 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-25 17:44:20,078 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-25 17:44:20,078 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Basic
[2020-11-25 17:44:20,078 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Basic
[2020-11-25 17:44:20,079 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BasicToken
[2020-11-25 17:44:20,079 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BasicToken
[2020-11-25 17:44:20,079 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 17:44:20,079 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 17:44:20,079 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_StandardToken
[2020-11-25 17:44:20,079 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_StandardToken
[2020-11-25 17:44:20,079 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Pausable
[2020-11-25 17:44:20,079 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Pausable
[2020-11-25 17:44:20,079 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_PausableToken
[2020-11-25 17:44:20,079 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_PausableToken
[2020-11-25 17:44:20,080 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_HKExCoin
[2020-11-25 17:44:20,080 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 17:44:20,080 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 17:44:20,080 INFO  L130     BoogieDeclarations]: Found specification of procedure HKExCoin.TimeLock_ctor__fail
[2020-11-25 17:44:20,080 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 17:44:20,080 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 17:44:20,080 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 17:44:20,080 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 17:44:20,080 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 17:44:20,080 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 17:44:20,081 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 17:44:20,081 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 17:44:20,081 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-25 17:44:20,081 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-25 17:44:20,081 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-25 17:44:20,081 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-25 17:44:20,081 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__fail
[2020-11-25 17:44:20,081 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-25 17:44:20,081 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-25 17:44:20,081 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-25 17:44:20,082 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__success
[2020-11-25 17:44:20,082 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__fail
[2020-11-25 17:44:20,082 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-25 17:44:20,082 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__success
[2020-11-25 17:44:20,082 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__fail
[2020-11-25 17:44:20,082 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__success
[2020-11-25 17:44:20,082 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__fail
[2020-11-25 17:44:20,082 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__success
[2020-11-25 17:44:20,082 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__fail
[2020-11-25 17:44:20,083 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__success
[2020-11-25 17:44:20,083 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__fail
[2020-11-25 17:44:20,083 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 17:44:20,083 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 17:44:20,083 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 17:44:20,083 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-25 17:44:20,083 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__success
[2020-11-25 17:44:20,083 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__fail
[2020-11-25 17:44:20,083 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-25 17:44:20,083 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-25 17:44:20,084 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__success
[2020-11-25 17:44:20,084 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__fail
[2020-11-25 17:44:20,084 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__success
[2020-11-25 17:44:20,084 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__fail
[2020-11-25 17:44:20,084 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-25 17:44:20,084 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-25 17:44:20,084 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-25 17:44:20,084 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-25 17:44:20,084 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 17:44:20,084 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__success
[2020-11-25 17:44:20,085 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__fail
[2020-11-25 17:44:20,085 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__success
[2020-11-25 17:44:20,085 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__fail
[2020-11-25 17:44:20,085 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__success
[2020-11-25 17:44:20,085 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__fail
[2020-11-25 17:44:20,085 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__success
[2020-11-25 17:44:20,085 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__fail
[2020-11-25 17:44:20,085 INFO  L130     BoogieDeclarations]: Found specification of procedure PausableToken_PausableToken_NoBaseCtor__fail
[2020-11-25 17:44:20,085 INFO  L130     BoogieDeclarations]: Found specification of procedure PausableToken_PausableToken__success
[2020-11-25 17:44:20,085 INFO  L130     BoogieDeclarations]: Found specification of procedure PausableToken_PausableToken__fail
[2020-11-25 17:44:20,086 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_PausableToken__success
[2020-11-25 17:44:20,086 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_PausableToken__fail
[2020-11-25 17:44:20,086 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_PausableToken__success
[2020-11-25 17:44:20,086 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_PausableToken__fail
[2020-11-25 17:44:20,086 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_PausableToken__success
[2020-11-25 17:44:20,086 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_PausableToken__fail
[2020-11-25 17:44:20,086 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_PausableToken__success
[2020-11-25 17:44:20,086 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_PausableToken__fail
[2020-11-25 17:44:20,086 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_PausableToken__success
[2020-11-25 17:44:20,087 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_PausableToken__fail
[2020-11-25 17:44:20,087 INFO  L130     BoogieDeclarations]: Found specification of procedure HKExCoin_HKExCoin_NoBaseCtor__fail
[2020-11-25 17:44:20,087 INFO  L130     BoogieDeclarations]: Found specification of procedure HKExCoin_HKExCoin__success
[2020-11-25 17:44:20,087 INFO  L130     BoogieDeclarations]: Found specification of procedure HKExCoin_HKExCoin__fail
[2020-11-25 17:44:20,087 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_HKExCoin__success
[2020-11-25 17:44:20,087 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_HKExCoin__fail
[2020-11-25 17:44:20,087 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_HKExCoin__success
[2020-11-25 17:44:20,087 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_HKExCoin__fail
[2020-11-25 17:44:20,087 INFO  L130     BoogieDeclarations]: Found specification of procedure canSubAllocation~address~uint256_HKExCoin__fail
[2020-11-25 17:44:20,087 INFO  L130     BoogieDeclarations]: Found specification of procedure subAllocation~address_HKExCoin__fail
[2020-11-25 17:44:20,087 INFO  L130     BoogieDeclarations]: Found specification of procedure setAllocation~address~uint256~arr~arr_HKExCoin__success
[2020-11-25 17:44:20,088 INFO  L130     BoogieDeclarations]: Found specification of procedure setAllocation~address~uint256~arr~arr_HKExCoin__fail
[2020-11-25 17:44:20,088 INFO  L130     BoogieDeclarations]: Found specification of procedure name_HKExCoin__success
[2020-11-25 17:44:20,088 INFO  L130     BoogieDeclarations]: Found specification of procedure name_HKExCoin__fail
[2020-11-25 17:44:20,088 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_HKExCoin__success
[2020-11-25 17:44:20,088 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_HKExCoin__fail
[2020-11-25 17:44:20,088 INFO  L130     BoogieDeclarations]: Found specification of procedure standard_HKExCoin__success
[2020-11-25 17:44:20,089 INFO  L130     BoogieDeclarations]: Found specification of procedure standard_HKExCoin__fail
[2020-11-25 17:44:20,089 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_HKExCoin__success
[2020-11-25 17:44:20,089 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_HKExCoin__fail
[2020-11-25 17:44:20,089 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_HKExCoin__success
[2020-11-25 17:44:20,090 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_HKExCoin__fail
[2020-11-25 17:44:20,090 INFO  L130     BoogieDeclarations]: Found specification of procedure allocations~address~uint256_HKExCoin__success
[2020-11-25 17:44:20,090 INFO  L130     BoogieDeclarations]: Found specification of procedure allocations~address~uint256_HKExCoin__fail
[2020-11-25 17:44:20,090 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 17:44:20,090 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 17:44:20,091 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 17:44:20,091 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 17:44:20,091 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__fail
[2020-11-25 17:44:20,091 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__fail
[2020-11-25 17:44:20,091 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 17:44:20,092 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 17:44:20,092 INFO  L138     BoogieDeclarations]: Found implementation of procedure HKExCoin.TimeLock_ctor__fail
[2020-11-25 17:44:20,092 INFO  L138     BoogieDeclarations]: Found implementation of procedure HKExCoin.TimeLock_ctor__success
[2020-11-25 17:44:20,092 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 17:44:20,093 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 17:44:20,093 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 17:44:20,093 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 17:44:20,093 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 17:44:20,093 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 17:44:20,094 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 17:44:20,094 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 17:44:20,094 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 17:44:20,094 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 17:44:20,094 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 17:44:20,095 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 17:44:20,095 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 17:44:20,095 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 17:44:20,095 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-25 17:44:20,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-25 17:44:20,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-25 17:44:20,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-25 17:44:20,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__fail
[2020-11-25 17:44:20,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__success
[2020-11-25 17:44:20,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-25 17:44:20,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-25 17:44:20,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-25 17:44:20,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-25 17:44:20,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__fail
[2020-11-25 17:44:20,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__success
[2020-11-25 17:44:20,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-25 17:44:20,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-25 17:44:20,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__fail
[2020-11-25 17:44:20,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__success
[2020-11-25 17:44:20,099 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__fail
[2020-11-25 17:44:20,099 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__success
[2020-11-25 17:44:20,099 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__fail
[2020-11-25 17:44:20,099 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__success
[2020-11-25 17:44:20,099 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__fail
[2020-11-25 17:44:20,100 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__success
[2020-11-25 17:44:20,100 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 17:44:20,100 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 17:44:20,100 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 17:44:20,100 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 17:44:20,100 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-25 17:44:20,100 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-25 17:44:20,100 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__fail
[2020-11-25 17:44:20,100 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__success
[2020-11-25 17:44:20,101 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-25 17:44:20,101 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-25 17:44:20,101 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__fail
[2020-11-25 17:44:20,101 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__success
[2020-11-25 17:44:20,101 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__fail
[2020-11-25 17:44:20,101 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__success
[2020-11-25 17:44:20,101 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-25 17:44:20,101 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-25 17:44:20,101 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-25 17:44:20,101 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-25 17:44:20,101 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 17:44:20,102 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 17:44:20,102 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__fail
[2020-11-25 17:44:20,102 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__success
[2020-11-25 17:44:20,102 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__fail
[2020-11-25 17:44:20,102 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__success
[2020-11-25 17:44:20,102 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__fail
[2020-11-25 17:44:20,102 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__success
[2020-11-25 17:44:20,102 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__fail
[2020-11-25 17:44:20,102 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__success
[2020-11-25 17:44:20,102 INFO  L138     BoogieDeclarations]: Found implementation of procedure PausableToken_PausableToken_NoBaseCtor__fail
[2020-11-25 17:44:20,102 INFO  L138     BoogieDeclarations]: Found implementation of procedure PausableToken_PausableToken_NoBaseCtor__success
[2020-11-25 17:44:20,103 INFO  L138     BoogieDeclarations]: Found implementation of procedure PausableToken_PausableToken__fail
[2020-11-25 17:44:20,103 INFO  L138     BoogieDeclarations]: Found implementation of procedure PausableToken_PausableToken__success
[2020-11-25 17:44:20,103 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_PausableToken__fail
[2020-11-25 17:44:20,103 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_PausableToken__success
[2020-11-25 17:44:20,103 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_PausableToken__fail
[2020-11-25 17:44:20,103 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_PausableToken__success
[2020-11-25 17:44:20,103 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_PausableToken__fail
[2020-11-25 17:44:20,103 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_PausableToken__success
[2020-11-25 17:44:20,103 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_PausableToken__fail
[2020-11-25 17:44:20,103 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_PausableToken__success
[2020-11-25 17:44:20,104 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_PausableToken__fail
[2020-11-25 17:44:20,104 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_PausableToken__success
[2020-11-25 17:44:20,104 INFO  L138     BoogieDeclarations]: Found implementation of procedure HKExCoin_HKExCoin_NoBaseCtor__fail
[2020-11-25 17:44:20,104 INFO  L138     BoogieDeclarations]: Found implementation of procedure HKExCoin_HKExCoin_NoBaseCtor__success
[2020-11-25 17:44:20,104 INFO  L138     BoogieDeclarations]: Found implementation of procedure HKExCoin_HKExCoin__fail
[2020-11-25 17:44:20,104 INFO  L138     BoogieDeclarations]: Found implementation of procedure HKExCoin_HKExCoin__success
[2020-11-25 17:44:20,104 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_HKExCoin__fail
[2020-11-25 17:44:20,104 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_HKExCoin__success
[2020-11-25 17:44:20,104 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_HKExCoin__fail
[2020-11-25 17:44:20,104 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_HKExCoin__success
[2020-11-25 17:44:20,104 INFO  L138     BoogieDeclarations]: Found implementation of procedure canSubAllocation~address~uint256_HKExCoin__fail
[2020-11-25 17:44:20,104 INFO  L138     BoogieDeclarations]: Found implementation of procedure canSubAllocation~address~uint256_HKExCoin__success
[2020-11-25 17:44:20,104 INFO  L138     BoogieDeclarations]: Found implementation of procedure subAllocation~address_HKExCoin__fail
[2020-11-25 17:44:20,105 INFO  L138     BoogieDeclarations]: Found implementation of procedure subAllocation~address_HKExCoin__success
[2020-11-25 17:44:20,105 INFO  L138     BoogieDeclarations]: Found implementation of procedure setAllocation~address~uint256~arr~arr_HKExCoin__fail
[2020-11-25 17:44:20,105 INFO  L138     BoogieDeclarations]: Found implementation of procedure setAllocation~address~uint256~arr~arr_HKExCoin__success
[2020-11-25 17:44:20,105 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_HKExCoin__fail
[2020-11-25 17:44:20,105 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_HKExCoin__success
[2020-11-25 17:44:20,105 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_HKExCoin__fail
[2020-11-25 17:44:20,105 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_HKExCoin__success
[2020-11-25 17:44:20,105 INFO  L138     BoogieDeclarations]: Found implementation of procedure standard_HKExCoin__fail
[2020-11-25 17:44:20,105 INFO  L138     BoogieDeclarations]: Found implementation of procedure standard_HKExCoin__success
[2020-11-25 17:44:20,105 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_HKExCoin__fail
[2020-11-25 17:44:20,105 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_HKExCoin__success
[2020-11-25 17:44:20,105 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_HKExCoin__fail
[2020-11-25 17:44:20,105 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_HKExCoin__success
[2020-11-25 17:44:20,105 INFO  L138     BoogieDeclarations]: Found implementation of procedure allocations~address~uint256_HKExCoin__fail
[2020-11-25 17:44:20,106 INFO  L138     BoogieDeclarations]: Found implementation of procedure allocations~address~uint256_HKExCoin__success
[2020-11-25 17:44:20,106 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 17:44:20,106 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 17:44:20,106 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 17:44:20,106 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 17:44:20,106 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 17:44:20,106 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 17:44:20,106 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 17:44:20,106 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 17:44:20,106 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__fail
[2020-11-25 17:44:20,106 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__success
[2020-11-25 17:44:20,106 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__fail
[2020-11-25 17:44:20,106 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__success
[2020-11-25 17:44:20,106 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 17:44:20,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 17:44:20,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-25 17:44:20,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-25 17:44:20,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Basic
[2020-11-25 17:44:20,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Basic
[2020-11-25 17:44:20,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BasicToken
[2020-11-25 17:44:20,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BasicToken
[2020-11-25 17:44:20,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 17:44:20,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 17:44:20,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_StandardToken
[2020-11-25 17:44:20,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_StandardToken
[2020-11-25 17:44:20,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Pausable
[2020-11-25 17:44:20,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Pausable
[2020-11-25 17:44:20,108 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_PausableToken
[2020-11-25 17:44:20,108 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_PausableToken
[2020-11-25 17:44:20,108 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_HKExCoin
[2020-11-25 17:44:20,108 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 17:44:20,108 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 17:44:20,108 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 17:44:20,836 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 17:44:20,836 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 17:44:21,268 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 17:44:21,268 INFO  L286             CfgBuilder]: Removed 9 assue(true) statements.
[2020-11-25 17:44:21,270 INFO  L202        PluginConnector]: Adding new model HKExCoin_0x40e36b09ff3eba462be5c86289b16840edde9773_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 05:44:21 BoogieIcfgContainer
[2020-11-25 17:44:21,270 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:44:19" (2/2) ...
[2020-11-25 17:44:21,270 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 17:44:21,271 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@3e8f36f0 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 05:44:21, skipping insertion in model container
[2020-11-25 17:44:21,271 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 17:44:21,271 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 17:44:21,271 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 17:44:21,272 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 17:44:21,272 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "HKExCoin_0x40e36b09ff3eba462be5c86289b16840edde9773_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:44:19" (1/3) ...
[2020-11-25 17:44:21,273 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@55c66afc and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 05:44:21, skipping insertion in model container
[2020-11-25 17:44:21,273 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:44:19" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 17:44:21,307 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 05:44:21 NWAContainer
[2020-11-25 17:44:21,307 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 17:44:21,308 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 17:44:21,308 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 17:44:21,308 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 17:44:21,309 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "HKExCoin_0x40e36b09ff3eba462be5c86289b16840edde9773_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 05:44:21" (3/4) ...
[2020-11-25 17:44:21,310 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@75caf3c5 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 05:44:21, skipping insertion in model container
[2020-11-25 17:44:21,310 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 05:44:21" (4/4) ...
[2020-11-25 17:44:21,312 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 17:44:21,318 INFO  L110   BuchiProductObserver]: Initial RCFG 3261 locations, 4459 edges
[2020-11-25 17:44:21,318 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 17:44:21,330 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 17:44:23,824 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 17:44:23,834 INFO  L110   BuchiProductObserver]: BuchiProgram size 8058 locations, 14484 edges
[2020-11-25 17:44:23,834 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 05:44:23 BoogieIcfgContainer
[2020-11-25 17:44:23,834 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 17:44:23,835 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 17:44:23,835 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 17:44:23,836 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 17:44:23,836 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 05:44:23" (1/1) ...
[2020-11-25 17:44:24,020 INFO  L313           BlockEncoder]: Initial Icfg 8058 locations, 14484 edges
[2020-11-25 17:44:24,021 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 17:44:24,021 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 17:44:24,022 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 17:44:24,022 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 17:44:24,043 INFO  L70    emoveInfeasibleEdges]: Removed 147 edges and 21 locations because of local infeasibility
[2020-11-25 17:44:24,060 INFO  L70        RemoveSinkStates]: Removed 116 edges and 67 locations by removing sink states
[2020-11-25 17:44:24,081 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 17:44:24,087 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 17:44:24,094 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 17:44:24,094 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 17:44:24,100 INFO  L313           BlockEncoder]: Encoded RCFG 7930 locations, 14162 edges
[2020-11-25 17:44:24,100 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 05:44:24 BasicIcfg
[2020-11-25 17:44:24,100 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 17:44:24,101 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 17:44:24,101 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 17:44:24,103 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 17:44:24,103 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 17:44:24,103 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "HKExCoin_0x40e36b09ff3eba462be5c86289b16840edde9773_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:44:19" (1/6) ...
[2020-11-25 17:44:24,105 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@32436be3 and model type HKExCoin_0x40e36b09ff3eba462be5c86289b16840edde9773_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 05:44:24, skipping insertion in model container
[2020-11-25 17:44:24,105 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 17:44:24,105 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:44:19" (2/6) ...
[2020-11-25 17:44:24,105 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@32436be3 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 05:44:24, skipping insertion in model container
[2020-11-25 17:44:24,105 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 17:44:24,106 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "HKExCoin_0x40e36b09ff3eba462be5c86289b16840edde9773_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 05:44:21" (3/6) ...
[2020-11-25 17:44:24,106 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@32436be3 and model type HKExCoin_0x40e36b09ff3eba462be5c86289b16840edde9773_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 05:44:24, skipping insertion in model container
[2020-11-25 17:44:24,106 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 17:44:24,106 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 05:44:21" (4/6) ...
[2020-11-25 17:44:24,106 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@32436be3 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 05:44:24, skipping insertion in model container
[2020-11-25 17:44:24,106 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 17:44:24,106 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 05:44:23" (5/6) ...
[2020-11-25 17:44:24,107 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@32436be3 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 05:44:24, skipping insertion in model container
[2020-11-25 17:44:24,107 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 17:44:24,107 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 05:44:24" (6/6) ...
[2020-11-25 17:44:24,108 INFO  L404   chiAutomizerObserver]: Analyzing ICFG HKExCoin_0x40e36b09ff3eba462be5c86289b16840edde9773_transferfrom-fail.bpl_BEv2
[2020-11-25 17:44:24,146 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 17:44:24,146 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 17:44:24,146 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 17:44:24,146 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 17:44:24,146 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 17:44:24,146 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 17:44:24,146 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 17:44:24,147 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 17:44:24,147 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 17:44:24,207 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7930 states.
[2020-11-25 17:44:24,286 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:44:24,286 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:44:24,286 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:44:24,295 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:44:24,295 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:44:24,296 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 17:44:24,296 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7930 states.
[2020-11-25 17:44:24,335 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:44:24,336 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:44:24,336 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:44:24,338 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:44:24,338 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_HKExCoin0 := false;
[L2]                 call_transferFrom_HKExCoin0 := false;
[L2]     CALL        call main();
[L8678]              assume null == 0;
[L8679]  CALL        call this := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L8679]  RET         call this := FreshRefGenerator__success();
[L8680]              assume now >= 0;
[L8681]              assume DType[this] == HKExCoin;
[L8682]              assume msgvalue_MSG == 0;
[L8683]              gas := gas - 53000;
[L8684]  CALL        call HKExCoin_HKExCoin(this, msgsender_MSG, msgvalue_MSG);
[L2092]              havoc __exception;
[L2093]              revert := false;
[L2094]  COND FALSE  !(__exception)
[L2126]  CALL        call HKExCoin_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L5079]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5080]  COND TRUE   revert
[L2126]  RET         call HKExCoin_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG);
[L2127]              assume !revert && gas >= 0;
[L8684]  RET         call HKExCoin_HKExCoin(this, msgsender_MSG, msgvalue_MSG);
[L8685]              assume !revert && gas >= 0;

Loop:
[L8688]  CALL        call CorralChoice_HKExCoin(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != HKExCoin;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND TRUE   choice == 20
[L8542]              gas := gas - 21000;
[L8543]  COND FALSE  !(gas >= 0)
[L8688]  RET         call CorralChoice_HKExCoin(this);

[2020-11-25 17:44:24,351 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:44:24,351 INFO  L82        PathProgramCache]: Analyzing trace with hash 629806400, now seen corresponding path program 1 times
[2020-11-25 17:44:24,355 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:44:24,374 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:44:24,405 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 17:44:24,406 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:44:24,406 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 17:44:24,842 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:44:24,851 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 17:44:24,852 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 17:44:24,853 INFO  L87              Difference]: Start difference. First operand 7930 states. Second operand 3 states.
[2020-11-25 17:44:25,242 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:44:25,242 INFO  L93              Difference]: Finished difference Result 4872 states and 5763 transitions.
[2020-11-25 17:44:25,242 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 17:44:25,243 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4872 states and 5763 transitions.
[2020-11-25 17:44:25,267 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:44:25,300 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4872 states to 4868 states and 5755 transitions.
[2020-11-25 17:44:25,301 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-25 17:44:25,304 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 934
[2020-11-25 17:44:25,304 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4868 states and 5755 transitions.
[2020-11-25 17:44:25,317 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:44:25,317 INFO  L728         BuchiCegarLoop]: Abstraction has 4868 states and 5755 transitions.
[2020-11-25 17:44:25,334 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4868 states and 5755 transitions.
[2020-11-25 17:44:25,416 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4868 to 4868.
[2020-11-25 17:44:25,416 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4868 states.
[2020-11-25 17:44:25,426 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4868 states to 4868 states and 5755 transitions.
[2020-11-25 17:44:25,427 INFO  L751         BuchiCegarLoop]: Abstraction has 4868 states and 5755 transitions.
[2020-11-25 17:44:25,427 INFO  L631         BuchiCegarLoop]: Abstraction has 4868 states and 5755 transitions.
[2020-11-25 17:44:25,427 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 17:44:25,427 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4868 states and 5755 transitions.
[2020-11-25 17:44:25,442 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:44:25,442 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:44:25,442 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:44:25,445 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:44:25,445 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_HKExCoin0 := false;
[L2]                 call_transferFrom_HKExCoin0 := false;
[L2]     CALL        call main();
[L8678]              assume null == 0;
[L8679]  CALL        call this := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L8679]  RET         call this := FreshRefGenerator__success();
[L8680]              assume now >= 0;
[L8681]              assume DType[this] == HKExCoin;
[L8682]              assume msgvalue_MSG == 0;
[L8683]              gas := gas - 53000;
[L8684]  CALL        call HKExCoin_HKExCoin(this, msgsender_MSG, msgvalue_MSG);
[L2092]              havoc __exception;
[L2093]              revert := false;
[L2094]  COND FALSE  !(__exception)
[L2126]  CALL        call HKExCoin_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L5079]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5080]  COND TRUE   revert
[L2126]  RET         call HKExCoin_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG);
[L2127]              assume !revert && gas >= 0;
[L8684]  RET         call HKExCoin_HKExCoin(this, msgsender_MSG, msgvalue_MSG);
[L8685]              assume !revert && gas >= 0;
[L8688]  CALL        call CorralChoice_HKExCoin(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != HKExCoin;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND FALSE  !(choice == 16)
[L8572]  COND FALSE  !(choice == 15)
[L8578]  COND TRUE   choice == 14
[L8579]              gas := gas - 21000;
[L8580]  COND TRUE   gas >= 0
[L8581]              assume _value_s858 >= 0 && _value_s858 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8582]              assume msgvalue_MSG == 0;
[L8583]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s858 != _to_s858 && ((_value_s858 > balances_BasicToken[this][_from_s858] || _value_s858 > allowed_StandardToken[this][_from_s858][msgsender_MSG]) || balances_BasicToken[this][_to_s858] + _value_s858 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s858 >= 0) && _value_s858 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s858] >= 0) && balances_BasicToken[this][_to_s858] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s858] >= 0) && balances_BasicToken[this][_from_s858] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s858][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s858][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_HKExCoin0 := true;
[L2]                 call_transferFrom_HKExCoin0 := false;
[L2]                 revert := revert_hold;
[L2250]              havoc __exception;
[L2251]              revert := false;
[L2252]  COND FALSE  !(__exception)
[L2284]  CALL        call __ret_0_ := transferFrom~address~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5205]  CALL        call __var_27 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5328]  COND TRUE   sub_value_s949 == 0
[L5329]              __ret_0_ := false;
[L5205]  RET         call __var_27 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5206]  COND TRUE   revert
[L2284]  RET         call __ret_0_ := transferFrom~address~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2285]              assume !revert && gas >= 0;
[L8583]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L8688]  RET         call CorralChoice_HKExCoin(this);

Loop:
[L8688]  CALL        call CorralChoice_HKExCoin(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != HKExCoin;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND FALSE  !(choice == 16)
[L8572]  COND FALSE  !(choice == 15)
[L8578]  COND TRUE   choice == 14
[L8579]              gas := gas - 21000;
[L8580]  COND TRUE   gas >= 0
[L8581]              assume _value_s858 >= 0 && _value_s858 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8582]              assume msgvalue_MSG == 0;
[L8583]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s858 != _to_s858 && ((_value_s858 > balances_BasicToken[this][_from_s858] || _value_s858 > allowed_StandardToken[this][_from_s858][msgsender_MSG]) || balances_BasicToken[this][_to_s858] + _value_s858 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s858 >= 0) && _value_s858 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s858] >= 0) && balances_BasicToken[this][_to_s858] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s858] >= 0) && balances_BasicToken[this][_from_s858] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s858][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s858][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_HKExCoin0 := true;
[L2]                 call_transferFrom_HKExCoin0 := false;
[L2]                 revert := revert_hold;
[L2250]              havoc __exception;
[L2251]              revert := false;
[L2252]  COND FALSE  !(__exception)
[L2284]  CALL        call __ret_0_ := transferFrom~address~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5205]  CALL        call __var_27 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5328]  COND TRUE   sub_value_s949 == 0
[L5329]              __ret_0_ := false;
[L5205]  RET         call __var_27 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5206]  COND TRUE   revert
[L2284]  RET         call __ret_0_ := transferFrom~address~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2285]              assume !revert && gas >= 0;
[L8583]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L8688]  RET         call CorralChoice_HKExCoin(this);

[2020-11-25 17:44:25,451 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:44:25,451 INFO  L82        PathProgramCache]: Analyzing trace with hash 457687768, now seen corresponding path program 1 times
[2020-11-25 17:44:25,452 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:44:25,467 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:44:25,495 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 17:44:25,496 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:44:25,496 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 17:44:25,497 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:44:25,497 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 17:44:25,498 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 17:44:25,498 INFO  L87              Difference]: Start difference. First operand 4868 states and 5755 transitions. cyclomatic complexity: 905 Second operand 4 states.
[2020-11-25 17:44:26,347 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:44:26,348 INFO  L93              Difference]: Finished difference Result 5838 states and 6618 transitions.
[2020-11-25 17:44:26,348 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 17:44:26,348 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5838 states and 6618 transitions.
[2020-11-25 17:44:26,362 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 17:44:26,381 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5838 states to 5616 states and 6356 transitions.
[2020-11-25 17:44:26,381 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1093
[2020-11-25 17:44:26,382 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1109
[2020-11-25 17:44:26,382 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5616 states and 6356 transitions.
[2020-11-25 17:44:26,389 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:44:26,389 INFO  L728         BuchiCegarLoop]: Abstraction has 5616 states and 6356 transitions.
[2020-11-25 17:44:26,394 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5616 states and 6356 transitions.
[2020-11-25 17:44:26,440 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5616 to 5402.
[2020-11-25 17:44:26,440 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5402 states.
[2020-11-25 17:44:26,446 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5402 states to 5402 states and 6084 transitions.
[2020-11-25 17:44:26,447 INFO  L751         BuchiCegarLoop]: Abstraction has 5402 states and 6084 transitions.
[2020-11-25 17:44:26,447 INFO  L631         BuchiCegarLoop]: Abstraction has 5402 states and 6084 transitions.
[2020-11-25 17:44:26,447 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 17:44:26,447 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5402 states and 6084 transitions.
[2020-11-25 17:44:26,453 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 17:44:26,453 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:44:26,453 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:44:26,457 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:44:26,457 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_HKExCoin0 := false;
[L2]                 call_transferFrom_HKExCoin0 := false;
[L2]     CALL        call main();
[L8678]              assume null == 0;
[L8679]  CALL        call this := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L8679]  RET         call this := FreshRefGenerator__success();
[L8680]              assume now >= 0;
[L8681]              assume DType[this] == HKExCoin;
[L8682]              assume msgvalue_MSG == 0;
[L8683]              gas := gas - 53000;
[L8684]  CALL        call HKExCoin_HKExCoin(this, msgsender_MSG, msgvalue_MSG);
[L2092]              havoc __exception;
[L2093]              revert := false;
[L2094]  COND FALSE  !(__exception)
[L2126]  CALL        call HKExCoin_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L5079]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5080]  COND FALSE  !(revert)
[L5083]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L5083]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5084]  COND FALSE  !(revert)
[L5087]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L5087]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5088]  COND FALSE  !(revert)
[L5091]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4330]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4330]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4334]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4338]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4339]  COND FALSE  !(revert)
[L4342]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4301]              assume msgsender_MSG != null;
[L4302]              Balance[this] := 0;
[L4303]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4304]              sum_allowed1[this] := 0;
[L4342]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4343]  COND FALSE  !(revert)
[L5091]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5092]  COND FALSE  !(revert)
[L5095]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L5095]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5096]  COND FALSE  !(revert)
[L5099]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4574]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  COND FALSE  !(revert)
[L4578]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]              assume msgsender_MSG != null;
[L4555]              Balance[this] := 0;
[L4556]              paused_Pausable[this] := false;
[L4578]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4579]  COND FALSE  !(revert)
[L5099]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5100]  COND FALSE  !(revert)
[L5103]  CALL        call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4700]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4701]  COND FALSE  !(revert)
[L4704]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4704]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4705]  COND FALSE  !(revert)
[L4708]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4708]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4709]  COND FALSE  !(revert)
[L4712]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4330]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4330]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4334]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4338]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4339]  COND FALSE  !(revert)
[L4342]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4301]              assume msgsender_MSG != null;
[L4302]              Balance[this] := 0;
[L4303]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4304]              sum_allowed1[this] := 0;
[L4342]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4343]  COND FALSE  !(revert)
[L4712]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4713]  COND FALSE  !(revert)
[L4716]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4716]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]  COND FALSE  !(revert)
[L4720]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4574]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  COND FALSE  !(revert)
[L4578]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]              assume msgsender_MSG != null;
[L4555]              Balance[this] := 0;
[L4556]              paused_Pausable[this] := false;
[L4578]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4579]  COND FALSE  !(revert)
[L4720]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4721]  COND FALSE  !(revert)
[L4724]  CALL        call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4661]              assume msgsender_MSG != null;
[L4662]              Balance[this] := 0;
[L4724]  RET         call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4725]  COND FALSE  !(revert)
[L5103]  RET         call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5104]  COND FALSE  !(revert)
[L5107]  CALL        call HKExCoin_HKExCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5013]              assume msgsender_MSG != null;
[L5014]              Balance[this] := 0;
[L5015]              name_HKExCoin[this] := 1400933812;
[L5016]              symbol_HKExCoin[this] := -256252482;
[L5017]              standard_HKExCoin[this] := -941536354;
[L5018]              decimals_HKExCoin[this] := 18;
[L5019]              __var_22 := decimals_HKExCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5020]              INITIAL_SUPPLY_HKExCoin[this] := nonlinearMul(10 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_HKExCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5022]  CALL        call __var_23 := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L5022]  RET         call __var_23 := FreshRefGenerator__success();
[L5023]  COND FALSE  !(revert)
[L5026]              allocations_HKExCoin[this] := __var_23;
[L5028]              alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]] := zeroRefboolArr();
[L5030]              totalSupply__BasicToken[this] := INITIAL_SUPPLY_HKExCoin[this];
[L5031]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L5032]              balances_BasicToken[this][msgsender_MSG] := INITIAL_SUPPLY_HKExCoin[this];
[L5033]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L5034]              assert { :EventEmitted "Transfer_HKExCoin" } true;
[L5107]  RET         call HKExCoin_HKExCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5108]  COND FALSE  !(revert)
[L2126]  RET         call HKExCoin_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG);
[L2127]              assume !revert && gas >= 0;
[L8684]  RET         call HKExCoin_HKExCoin(this, msgsender_MSG, msgvalue_MSG);
[L8685]              assume !revert && gas >= 0;
[L8688]  CALL        call CorralChoice_HKExCoin(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != HKExCoin;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND FALSE  !(choice == 16)
[L8572]  COND FALSE  !(choice == 15)
[L8578]  COND TRUE   choice == 14
[L8579]              gas := gas - 21000;
[L8580]  COND TRUE   gas >= 0
[L8581]              assume _value_s858 >= 0 && _value_s858 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8582]              assume msgvalue_MSG == 0;
[L8583]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s858 != _to_s858 && ((_value_s858 > balances_BasicToken[this][_from_s858] || _value_s858 > allowed_StandardToken[this][_from_s858][msgsender_MSG]) || balances_BasicToken[this][_to_s858] + _value_s858 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s858 >= 0) && _value_s858 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s858] >= 0) && balances_BasicToken[this][_to_s858] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s858] >= 0) && balances_BasicToken[this][_from_s858] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s858][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s858][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_HKExCoin0 := true;
[L2]                 call_transferFrom_HKExCoin0 := false;
[L2]                 revert := revert_hold;
[L2250]              havoc __exception;
[L2251]              revert := false;
[L2252]  COND FALSE  !(__exception)
[L2284]  CALL        call __ret_0_ := transferFrom~address~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5205]  CALL        call __var_27 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5328]  COND TRUE   sub_value_s949 == 0
[L5329]              __ret_0_ := false;
[L5205]  RET         call __var_27 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5206]  COND FALSE  !(revert)
[L5209]  COND FALSE  !(!__var_27)
[L5213]  CALL        call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858);
[L5554]              total_lockamount_s1052 := 0;
[L5555]              total_unlockamount_s1052 := 0;
[L5556]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5567]              j_s1052 := 0;
[L5568]  COND FALSE  !(j_s1052 < Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]])
[L5633]  COND FALSE  !(total_unlockamount_s1052 > 0)
[L5636]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5647]  COND FALSE  !(total_lockamount_s1052 == 0 && Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]] > 0)
[L5213]  RET         call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858);
[L5214]  COND FALSE  !(revert)
[L5217]  COND TRUE   DType[this] == HKExCoin
[L5218]  CALL        call __var_28 := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L4809]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4809]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]  COND FALSE  !(revert)
[L4813]  COND FALSE  !(DType[this] == HKExCoin)
[L4818]  COND TRUE   DType[this] == PausableToken
[L4819]  CALL        call __var_13 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s662, _to_s662, _value_s662);
[L4398]              __var_5 := null;
[L4399]  COND FALSE  !(!(_to_s415 != null))
[L4403]  COND FALSE  !(!(_value_s415 <= balances_BasicToken[this][_from_s415]))
[L4407]  COND FALSE  !(!(_value_s415 <= allowed_StandardToken[this][_from_s415][msgsender_MSG]))
[L4411]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s415], _value_s415);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4411]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s415], _value_s415);
[L4412]  COND FALSE  !(revert)
[L4415]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s415];
[L4416]              balances_BasicToken[this][_from_s415] := __var_6;
[L4417]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s415];
[L4418]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s415], _value_s415);
[L3942]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              assert c_s92 >= a_s92;
[L3944]              c_s92 := c_s92;
[L4418]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s415], _value_s415);
[L4419]  COND FALSE  !(revert)
[L4422]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s415];
[L4423]              balances_BasicToken[this][_to_s415] := __var_7;
[L4424]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s415];
[L4425]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s415][msgsender_MSG], _value_s415);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4425]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s415][msgsender_MSG], _value_s415);
[L4426]  COND FALSE  !(revert)
[L4429]              sum_allowed1[_from_s415] := sum_allowed1[_from_s415] - allowed_StandardToken[this][_from_s415][msgsender_MSG];
[L4430]              allowed_StandardToken[this][_from_s415][msgsender_MSG] := __var_8;
[L4431]              sum_allowed1[_from_s415] := sum_allowed1[_from_s415] + allowed_StandardToken[this][_from_s415][msgsender_MSG];
[L4432]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L4433]              __ret_0_ := true;
[L4819]  RET         call __var_13 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s662, _to_s662, _value_s662);
[L4820]  COND FALSE  !(revert)
[L4826]              __ret_0_ := __var_13;
[L5218]  RET         call __var_28 := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5219]  COND FALSE  !(revert)
[L5225]              __ret_0_ := __var_28;
[L2284]  RET         call __ret_0_ := transferFrom~address~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2285]              assume !revert && gas >= 0;
[L8583]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L8688]  RET         call CorralChoice_HKExCoin(this);

Loop:
[L8688]  CALL        call CorralChoice_HKExCoin(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != HKExCoin;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND FALSE  !(choice == 16)
[L8572]  COND FALSE  !(choice == 15)
[L8578]  COND TRUE   choice == 14
[L8579]              gas := gas - 21000;
[L8580]  COND TRUE   gas >= 0
[L8581]              assume _value_s858 >= 0 && _value_s858 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8582]              assume msgvalue_MSG == 0;
[L8583]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s858 != _to_s858 && ((_value_s858 > balances_BasicToken[this][_from_s858] || _value_s858 > allowed_StandardToken[this][_from_s858][msgsender_MSG]) || balances_BasicToken[this][_to_s858] + _value_s858 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s858 >= 0) && _value_s858 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s858] >= 0) && balances_BasicToken[this][_to_s858] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s858] >= 0) && balances_BasicToken[this][_from_s858] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s858][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s858][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_HKExCoin0 := true;
[L2]                 call_transferFrom_HKExCoin0 := false;
[L2]                 revert := revert_hold;
[L2250]              havoc __exception;
[L2251]              revert := false;
[L2252]  COND FALSE  !(__exception)
[L2284]  CALL        call __ret_0_ := transferFrom~address~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5205]  CALL        call __var_27 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5328]  COND TRUE   sub_value_s949 == 0
[L5329]              __ret_0_ := false;
[L5205]  RET         call __var_27 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5206]  COND FALSE  !(revert)
[L5209]  COND FALSE  !(!__var_27)
[L5213]  CALL        call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858);
[L5554]              total_lockamount_s1052 := 0;
[L5555]              total_unlockamount_s1052 := 0;
[L5556]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5567]              j_s1052 := 0;
[L5568]  COND FALSE  !(j_s1052 < Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]])
[L5633]  COND FALSE  !(total_unlockamount_s1052 > 0)
[L5636]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5647]  COND FALSE  !(total_lockamount_s1052 == 0 && Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]] > 0)
[L5213]  RET         call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858);
[L5214]  COND FALSE  !(revert)
[L5217]  COND TRUE   DType[this] == HKExCoin
[L5218]  CALL        call __var_28 := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L4809]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4809]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]  COND FALSE  !(revert)
[L4813]  COND FALSE  !(DType[this] == HKExCoin)
[L4818]  COND TRUE   DType[this] == PausableToken
[L4819]  CALL        call __var_13 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s662, _to_s662, _value_s662);
[L4398]              __var_5 := null;
[L4399]  COND FALSE  !(!(_to_s415 != null))
[L4403]  COND FALSE  !(!(_value_s415 <= balances_BasicToken[this][_from_s415]))
[L4407]  COND FALSE  !(!(_value_s415 <= allowed_StandardToken[this][_from_s415][msgsender_MSG]))
[L4411]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s415], _value_s415);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4411]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s415], _value_s415);
[L4412]  COND FALSE  !(revert)
[L4415]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s415];
[L4416]              balances_BasicToken[this][_from_s415] := __var_6;
[L4417]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s415];
[L4418]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s415], _value_s415);
[L3942]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              assert c_s92 >= a_s92;
[L3944]              c_s92 := c_s92;
[L4418]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s415], _value_s415);
[L4419]  COND FALSE  !(revert)
[L4422]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s415];
[L4423]              balances_BasicToken[this][_to_s415] := __var_7;
[L4424]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s415];
[L4425]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s415][msgsender_MSG], _value_s415);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4425]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s415][msgsender_MSG], _value_s415);
[L4426]  COND FALSE  !(revert)
[L4429]              sum_allowed1[_from_s415] := sum_allowed1[_from_s415] - allowed_StandardToken[this][_from_s415][msgsender_MSG];
[L4430]              allowed_StandardToken[this][_from_s415][msgsender_MSG] := __var_8;
[L4431]              sum_allowed1[_from_s415] := sum_allowed1[_from_s415] + allowed_StandardToken[this][_from_s415][msgsender_MSG];
[L4432]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L4433]              __ret_0_ := true;
[L4819]  RET         call __var_13 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s662, _to_s662, _value_s662);
[L4820]  COND FALSE  !(revert)
[L4826]              __ret_0_ := __var_13;
[L5218]  RET         call __var_28 := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5219]  COND FALSE  !(revert)
[L5225]              __ret_0_ := __var_28;
[L2284]  RET         call __ret_0_ := transferFrom~address~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2285]              assume !revert && gas >= 0;
[L8583]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L8688]  RET         call CorralChoice_HKExCoin(this);

[2020-11-25 17:44:26,465 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:44:26,465 INFO  L82        PathProgramCache]: Analyzing trace with hash 934071710, now seen corresponding path program 1 times
[2020-11-25 17:44:26,466 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:44:26,494 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:44:26,712 INFO  L134       CoverageAnalysis]: Checked inductivity of 967 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 967 trivial. 0 not checked.
[2020-11-25 17:44:26,712 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:44:26,712 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 17:44:26,713 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:44:26,713 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 17:44:26,713 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 17:44:26,713 INFO  L87              Difference]: Start difference. First operand 5402 states and 6084 transitions. cyclomatic complexity: 701 Second operand 4 states.
[2020-11-25 17:44:26,760 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:44:26,760 INFO  L93              Difference]: Finished difference Result 5412 states and 6094 transitions.
[2020-11-25 17:44:26,760 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 17:44:26,761 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5412 states and 6094 transitions.
[2020-11-25 17:44:26,772 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 17:44:26,788 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5412 states to 5406 states and 6088 transitions.
[2020-11-25 17:44:26,788 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1053
[2020-11-25 17:44:26,789 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1053
[2020-11-25 17:44:26,789 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5406 states and 6088 transitions.
[2020-11-25 17:44:26,794 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:44:26,794 INFO  L728         BuchiCegarLoop]: Abstraction has 5406 states and 6088 transitions.
[2020-11-25 17:44:26,798 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5406 states and 6088 transitions.
[2020-11-25 17:44:26,834 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5406 to 5406.
[2020-11-25 17:44:26,834 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5406 states.
[2020-11-25 17:44:26,840 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5406 states to 5406 states and 6088 transitions.
[2020-11-25 17:44:26,840 INFO  L751         BuchiCegarLoop]: Abstraction has 5406 states and 6088 transitions.
[2020-11-25 17:44:26,840 INFO  L631         BuchiCegarLoop]: Abstraction has 5406 states and 6088 transitions.
[2020-11-25 17:44:26,840 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 17:44:26,840 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5406 states and 6088 transitions.
[2020-11-25 17:44:26,846 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 17:44:26,846 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:44:26,846 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:44:26,849 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:44:26,849 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_HKExCoin0 := false;
[L2]                 call_transferFrom_HKExCoin0 := false;
[L2]     CALL        call main();
[L8678]              assume null == 0;
[L8679]  CALL        call this := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L8679]  RET         call this := FreshRefGenerator__success();
[L8680]              assume now >= 0;
[L8681]              assume DType[this] == HKExCoin;
[L8682]              assume msgvalue_MSG == 0;
[L8683]              gas := gas - 53000;
[L8684]  CALL        call HKExCoin_HKExCoin(this, msgsender_MSG, msgvalue_MSG);
[L2092]              havoc __exception;
[L2093]              revert := false;
[L2094]  COND FALSE  !(__exception)
[L2126]  CALL        call HKExCoin_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L5079]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5080]  COND FALSE  !(revert)
[L5083]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L5083]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5084]  COND FALSE  !(revert)
[L5087]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L5087]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5088]  COND FALSE  !(revert)
[L5091]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4330]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4330]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4334]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4338]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4339]  COND FALSE  !(revert)
[L4342]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4301]              assume msgsender_MSG != null;
[L4302]              Balance[this] := 0;
[L4303]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4304]              sum_allowed1[this] := 0;
[L4342]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4343]  COND FALSE  !(revert)
[L5091]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5092]  COND FALSE  !(revert)
[L5095]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L5095]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5096]  COND FALSE  !(revert)
[L5099]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4574]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  COND FALSE  !(revert)
[L4578]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]              assume msgsender_MSG != null;
[L4555]              Balance[this] := 0;
[L4556]              paused_Pausable[this] := false;
[L4578]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4579]  COND FALSE  !(revert)
[L5099]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5100]  COND FALSE  !(revert)
[L5103]  CALL        call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4700]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4701]  COND FALSE  !(revert)
[L4704]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4704]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4705]  COND FALSE  !(revert)
[L4708]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4708]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4709]  COND FALSE  !(revert)
[L4712]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4330]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4330]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4334]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4338]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4339]  COND FALSE  !(revert)
[L4342]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4301]              assume msgsender_MSG != null;
[L4302]              Balance[this] := 0;
[L4303]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4304]              sum_allowed1[this] := 0;
[L4342]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4343]  COND FALSE  !(revert)
[L4712]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4713]  COND FALSE  !(revert)
[L4716]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4716]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]  COND FALSE  !(revert)
[L4720]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4574]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  COND FALSE  !(revert)
[L4578]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]              assume msgsender_MSG != null;
[L4555]              Balance[this] := 0;
[L4556]              paused_Pausable[this] := false;
[L4578]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4579]  COND FALSE  !(revert)
[L4720]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4721]  COND FALSE  !(revert)
[L4724]  CALL        call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4661]              assume msgsender_MSG != null;
[L4662]              Balance[this] := 0;
[L4724]  RET         call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4725]  COND FALSE  !(revert)
[L5103]  RET         call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5104]  COND FALSE  !(revert)
[L5107]  CALL        call HKExCoin_HKExCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5013]              assume msgsender_MSG != null;
[L5014]              Balance[this] := 0;
[L5015]              name_HKExCoin[this] := 1400933812;
[L5016]              symbol_HKExCoin[this] := -256252482;
[L5017]              standard_HKExCoin[this] := -941536354;
[L5018]              decimals_HKExCoin[this] := 18;
[L5019]              __var_22 := decimals_HKExCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5020]              INITIAL_SUPPLY_HKExCoin[this] := nonlinearMul(10 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_HKExCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5022]  CALL        call __var_23 := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L5022]  RET         call __var_23 := FreshRefGenerator__success();
[L5023]  COND FALSE  !(revert)
[L5026]              allocations_HKExCoin[this] := __var_23;
[L5028]              alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]] := zeroRefboolArr();
[L5030]              totalSupply__BasicToken[this] := INITIAL_SUPPLY_HKExCoin[this];
[L5031]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L5032]              balances_BasicToken[this][msgsender_MSG] := INITIAL_SUPPLY_HKExCoin[this];
[L5033]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L5034]              assert { :EventEmitted "Transfer_HKExCoin" } true;
[L5107]  RET         call HKExCoin_HKExCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5108]  COND FALSE  !(revert)
[L2126]  RET         call HKExCoin_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG);
[L2127]              assume !revert && gas >= 0;
[L8684]  RET         call HKExCoin_HKExCoin(this, msgsender_MSG, msgvalue_MSG);
[L8685]              assume !revert && gas >= 0;
[L8688]  CALL        call CorralChoice_HKExCoin(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != HKExCoin;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND FALSE  !(choice == 16)
[L8572]  COND FALSE  !(choice == 15)
[L8578]  COND TRUE   choice == 14
[L8579]              gas := gas - 21000;
[L8580]  COND TRUE   gas >= 0
[L8581]              assume _value_s858 >= 0 && _value_s858 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8582]              assume msgvalue_MSG == 0;
[L8583]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s858 != _to_s858 && ((_value_s858 > balances_BasicToken[this][_from_s858] || _value_s858 > allowed_StandardToken[this][_from_s858][msgsender_MSG]) || balances_BasicToken[this][_to_s858] + _value_s858 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s858 >= 0) && _value_s858 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s858] >= 0) && balances_BasicToken[this][_to_s858] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s858] >= 0) && balances_BasicToken[this][_from_s858] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s858][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s858][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_HKExCoin0 := true;
[L2]                 call_transferFrom_HKExCoin0 := false;
[L2]                 revert := revert_hold;
[L2250]              havoc __exception;
[L2251]              revert := false;
[L2252]  COND FALSE  !(__exception)
[L2284]  CALL        call __ret_0_ := transferFrom~address~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5205]  CALL        call __var_27 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5328]  COND FALSE  !(sub_value_s949 == 0)
[L5332]  COND FALSE  !(balances_BasicToken[this][sender_s949] < sub_value_s949)
[L5336]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s949] == false)
[L5347]  COND TRUE   Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == 0
[L5348]              __ret_0_ := true;
[L5205]  RET         call __var_27 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5206]  COND FALSE  !(revert)
[L5209]  COND FALSE  !(!__var_27)
[L5213]  CALL        call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858);
[L5554]              total_lockamount_s1052 := 0;
[L5555]              total_unlockamount_s1052 := 0;
[L5556]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5567]              j_s1052 := 0;
[L5568]  COND FALSE  !(j_s1052 < Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]])
[L5633]  COND FALSE  !(total_unlockamount_s1052 > 0)
[L5636]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5647]  COND FALSE  !(total_lockamount_s1052 == 0 && Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]] > 0)
[L5213]  RET         call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858);
[L5214]  COND FALSE  !(revert)
[L5217]  COND TRUE   DType[this] == HKExCoin
[L5218]  CALL        call __var_28 := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L4809]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4809]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]  COND FALSE  !(revert)
[L4813]  COND TRUE   DType[this] == HKExCoin
[L4814]  CALL        call __var_13 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s662, _to_s662, _value_s662);
[L4398]              __var_5 := null;
[L4399]  COND FALSE  !(!(_to_s415 != null))
[L4403]  COND FALSE  !(!(_value_s415 <= balances_BasicToken[this][_from_s415]))
[L4407]  COND FALSE  !(!(_value_s415 <= allowed_StandardToken[this][_from_s415][msgsender_MSG]))
[L4411]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s415], _value_s415);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4411]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s415], _value_s415);
[L4412]  COND FALSE  !(revert)
[L4415]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s415];
[L4416]              balances_BasicToken[this][_from_s415] := __var_6;
[L4417]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s415];
[L4418]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s415], _value_s415);
[L3942]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              assert c_s92 >= a_s92;
[L3944]              c_s92 := c_s92;
[L4418]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s415], _value_s415);
[L4419]  COND FALSE  !(revert)
[L4422]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s415];
[L4423]              balances_BasicToken[this][_to_s415] := __var_7;
[L4424]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s415];
[L4425]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s415][msgsender_MSG], _value_s415);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4425]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s415][msgsender_MSG], _value_s415);
[L4426]  COND FALSE  !(revert)
[L4429]              sum_allowed1[_from_s415] := sum_allowed1[_from_s415] - allowed_StandardToken[this][_from_s415][msgsender_MSG];
[L4430]              allowed_StandardToken[this][_from_s415][msgsender_MSG] := __var_8;
[L4431]              sum_allowed1[_from_s415] := sum_allowed1[_from_s415] + allowed_StandardToken[this][_from_s415][msgsender_MSG];
[L4432]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L4433]              __ret_0_ := true;
[L4814]  RET         call __var_13 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s662, _to_s662, _value_s662);
[L4815]  COND FALSE  !(revert)
[L4826]              __ret_0_ := __var_13;
[L5218]  RET         call __var_28 := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5219]  COND FALSE  !(revert)
[L5225]              __ret_0_ := __var_28;
[L2284]  RET         call __ret_0_ := transferFrom~address~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2285]              assume !revert && gas >= 0;
[L8583]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L8688]  RET         call CorralChoice_HKExCoin(this);

Loop:
[L8688]  CALL        call CorralChoice_HKExCoin(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != HKExCoin;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND FALSE  !(choice == 16)
[L8572]  COND FALSE  !(choice == 15)
[L8578]  COND TRUE   choice == 14
[L8579]              gas := gas - 21000;
[L8580]  COND TRUE   gas >= 0
[L8581]              assume _value_s858 >= 0 && _value_s858 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8582]              assume msgvalue_MSG == 0;
[L8583]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s858 != _to_s858 && ((_value_s858 > balances_BasicToken[this][_from_s858] || _value_s858 > allowed_StandardToken[this][_from_s858][msgsender_MSG]) || balances_BasicToken[this][_to_s858] + _value_s858 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s858 >= 0) && _value_s858 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s858] >= 0) && balances_BasicToken[this][_to_s858] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s858] >= 0) && balances_BasicToken[this][_from_s858] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s858][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s858][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_HKExCoin0 := true;
[L2]                 call_transferFrom_HKExCoin0 := false;
[L2]                 revert := revert_hold;
[L2250]              havoc __exception;
[L2251]              revert := false;
[L2252]  COND FALSE  !(__exception)
[L2284]  CALL        call __ret_0_ := transferFrom~address~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5205]  CALL        call __var_27 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5328]  COND FALSE  !(sub_value_s949 == 0)
[L5332]  COND FALSE  !(balances_BasicToken[this][sender_s949] < sub_value_s949)
[L5336]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s949] == false)
[L5347]  COND TRUE   Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == 0
[L5348]              __ret_0_ := true;
[L5205]  RET         call __var_27 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5206]  COND FALSE  !(revert)
[L5209]  COND FALSE  !(!__var_27)
[L5213]  CALL        call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858);
[L5554]              total_lockamount_s1052 := 0;
[L5555]              total_unlockamount_s1052 := 0;
[L5556]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5567]              j_s1052 := 0;
[L5568]  COND FALSE  !(j_s1052 < Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]])
[L5633]  COND FALSE  !(total_unlockamount_s1052 > 0)
[L5636]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5647]  COND FALSE  !(total_lockamount_s1052 == 0 && Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]] > 0)
[L5213]  RET         call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858);
[L5214]  COND FALSE  !(revert)
[L5217]  COND TRUE   DType[this] == HKExCoin
[L5218]  CALL        call __var_28 := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L4809]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4809]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]  COND FALSE  !(revert)
[L4813]  COND TRUE   DType[this] == HKExCoin
[L4814]  CALL        call __var_13 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s662, _to_s662, _value_s662);
[L4398]              __var_5 := null;
[L4399]  COND FALSE  !(!(_to_s415 != null))
[L4403]  COND FALSE  !(!(_value_s415 <= balances_BasicToken[this][_from_s415]))
[L4407]  COND FALSE  !(!(_value_s415 <= allowed_StandardToken[this][_from_s415][msgsender_MSG]))
[L4411]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s415], _value_s415);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4411]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s415], _value_s415);
[L4412]  COND FALSE  !(revert)
[L4415]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s415];
[L4416]              balances_BasicToken[this][_from_s415] := __var_6;
[L4417]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s415];
[L4418]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s415], _value_s415);
[L3942]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              assert c_s92 >= a_s92;
[L3944]              c_s92 := c_s92;
[L4418]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s415], _value_s415);
[L4419]  COND FALSE  !(revert)
[L4422]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s415];
[L4423]              balances_BasicToken[this][_to_s415] := __var_7;
[L4424]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s415];
[L4425]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s415][msgsender_MSG], _value_s415);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4425]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s415][msgsender_MSG], _value_s415);
[L4426]  COND FALSE  !(revert)
[L4429]              sum_allowed1[_from_s415] := sum_allowed1[_from_s415] - allowed_StandardToken[this][_from_s415][msgsender_MSG];
[L4430]              allowed_StandardToken[this][_from_s415][msgsender_MSG] := __var_8;
[L4431]              sum_allowed1[_from_s415] := sum_allowed1[_from_s415] + allowed_StandardToken[this][_from_s415][msgsender_MSG];
[L4432]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L4433]              __ret_0_ := true;
[L4814]  RET         call __var_13 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s662, _to_s662, _value_s662);
[L4815]  COND FALSE  !(revert)
[L4826]              __ret_0_ := __var_13;
[L5218]  RET         call __var_28 := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5219]  COND FALSE  !(revert)
[L5225]              __ret_0_ := __var_28;
[L2284]  RET         call __ret_0_ := transferFrom~address~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2285]              assume !revert && gas >= 0;
[L8583]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L8688]  RET         call CorralChoice_HKExCoin(this);

[2020-11-25 17:44:26,855 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:44:26,855 INFO  L82        PathProgramCache]: Analyzing trace with hash -2003406226, now seen corresponding path program 1 times
[2020-11-25 17:44:26,855 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:44:26,875 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:44:27,075 INFO  L134       CoverageAnalysis]: Checked inductivity of 967 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 967 trivial. 0 not checked.
[2020-11-25 17:44:27,075 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:44:27,075 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [11] imperfect sequences [] total 11
[2020-11-25 17:44:27,076 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:44:27,076 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-25 17:44:27,076 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=24, Invalid=108, Unknown=0, NotChecked=0, Total=132
[2020-11-25 17:44:27,076 INFO  L87              Difference]: Start difference. First operand 5406 states and 6088 transitions. cyclomatic complexity: 701 Second operand 12 states.
[2020-11-25 17:44:29,887 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:44:29,887 INFO  L93              Difference]: Finished difference Result 5859 states and 6699 transitions.
[2020-11-25 17:44:29,888 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-11-25 17:44:29,889 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5859 states and 6699 transitions.
[2020-11-25 17:44:29,906 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 17:44:29,924 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5859 states to 5859 states and 6699 transitions.
[2020-11-25 17:44:29,924 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1111
[2020-11-25 17:44:29,925 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1111
[2020-11-25 17:44:29,925 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5859 states and 6699 transitions.
[2020-11-25 17:44:29,930 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:44:29,930 INFO  L728         BuchiCegarLoop]: Abstraction has 5859 states and 6699 transitions.
[2020-11-25 17:44:29,934 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5859 states and 6699 transitions.
[2020-11-25 17:44:29,980 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5859 to 5699.
[2020-11-25 17:44:29,980 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5699 states.
[2020-11-25 17:44:29,988 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5699 states to 5699 states and 6482 transitions.
[2020-11-25 17:44:29,988 INFO  L751         BuchiCegarLoop]: Abstraction has 5699 states and 6482 transitions.
[2020-11-25 17:44:29,988 INFO  L631         BuchiCegarLoop]: Abstraction has 5699 states and 6482 transitions.
[2020-11-25 17:44:29,988 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 17:44:29,988 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5699 states and 6482 transitions.
[2020-11-25 17:44:29,994 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 17:44:29,994 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:44:29,994 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:44:29,997 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:44:29,998 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_HKExCoin0 := false;
[L2]                 call_transferFrom_HKExCoin0 := false;
[L2]     CALL        call main();
[L8678]              assume null == 0;
[L8679]  CALL        call this := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L8679]  RET         call this := FreshRefGenerator__success();
[L8680]              assume now >= 0;
[L8681]              assume DType[this] == HKExCoin;
[L8682]              assume msgvalue_MSG == 0;
[L8683]              gas := gas - 53000;
[L8684]  CALL        call HKExCoin_HKExCoin(this, msgsender_MSG, msgvalue_MSG);
[L2092]              havoc __exception;
[L2093]              revert := false;
[L2094]  COND FALSE  !(__exception)
[L2126]  CALL        call HKExCoin_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L5079]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5080]  COND FALSE  !(revert)
[L5083]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L5083]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5084]  COND FALSE  !(revert)
[L5087]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L5087]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5088]  COND FALSE  !(revert)
[L5091]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4330]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4330]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4334]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4338]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4339]  COND FALSE  !(revert)
[L4342]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4301]              assume msgsender_MSG != null;
[L4302]              Balance[this] := 0;
[L4303]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4304]              sum_allowed1[this] := 0;
[L4342]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4343]  COND FALSE  !(revert)
[L5091]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5092]  COND FALSE  !(revert)
[L5095]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L5095]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5096]  COND FALSE  !(revert)
[L5099]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4574]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  COND FALSE  !(revert)
[L4578]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]              assume msgsender_MSG != null;
[L4555]              Balance[this] := 0;
[L4556]              paused_Pausable[this] := false;
[L4578]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4579]  COND FALSE  !(revert)
[L5099]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5100]  COND FALSE  !(revert)
[L5103]  CALL        call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4700]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4701]  COND FALSE  !(revert)
[L4704]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4704]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4705]  COND FALSE  !(revert)
[L4708]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4708]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4709]  COND FALSE  !(revert)
[L4712]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4330]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4330]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4334]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4338]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4339]  COND FALSE  !(revert)
[L4342]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4301]              assume msgsender_MSG != null;
[L4302]              Balance[this] := 0;
[L4303]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4304]              sum_allowed1[this] := 0;
[L4342]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4343]  COND FALSE  !(revert)
[L4712]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4713]  COND FALSE  !(revert)
[L4716]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4716]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]  COND FALSE  !(revert)
[L4720]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4574]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  COND FALSE  !(revert)
[L4578]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]              assume msgsender_MSG != null;
[L4555]              Balance[this] := 0;
[L4556]              paused_Pausable[this] := false;
[L4578]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4579]  COND FALSE  !(revert)
[L4720]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4721]  COND FALSE  !(revert)
[L4724]  CALL        call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4661]              assume msgsender_MSG != null;
[L4662]              Balance[this] := 0;
[L4724]  RET         call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4725]  COND FALSE  !(revert)
[L5103]  RET         call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5104]  COND FALSE  !(revert)
[L5107]  CALL        call HKExCoin_HKExCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5013]              assume msgsender_MSG != null;
[L5014]              Balance[this] := 0;
[L5015]              name_HKExCoin[this] := 1400933812;
[L5016]              symbol_HKExCoin[this] := -256252482;
[L5017]              standard_HKExCoin[this] := -941536354;
[L5018]              decimals_HKExCoin[this] := 18;
[L5019]              __var_22 := decimals_HKExCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5020]              INITIAL_SUPPLY_HKExCoin[this] := nonlinearMul(10 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_HKExCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5022]  CALL        call __var_23 := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L5022]  RET         call __var_23 := FreshRefGenerator__success();
[L5023]  COND FALSE  !(revert)
[L5026]              allocations_HKExCoin[this] := __var_23;
[L5028]              alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]] := zeroRefboolArr();
[L5030]              totalSupply__BasicToken[this] := INITIAL_SUPPLY_HKExCoin[this];
[L5031]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L5032]              balances_BasicToken[this][msgsender_MSG] := INITIAL_SUPPLY_HKExCoin[this];
[L5033]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L5034]              assert { :EventEmitted "Transfer_HKExCoin" } true;
[L5107]  RET         call HKExCoin_HKExCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5108]  COND FALSE  !(revert)
[L2126]  RET         call HKExCoin_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG);
[L2127]              assume !revert && gas >= 0;
[L8684]  RET         call HKExCoin_HKExCoin(this, msgsender_MSG, msgvalue_MSG);
[L8685]              assume !revert && gas >= 0;
[L8688]  CALL        call CorralChoice_HKExCoin(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != HKExCoin;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND FALSE  !(choice == 16)
[L8572]  COND FALSE  !(choice == 15)
[L8578]  COND TRUE   choice == 14
[L8579]              gas := gas - 21000;
[L8580]  COND TRUE   gas >= 0
[L8581]              assume _value_s858 >= 0 && _value_s858 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8582]              assume msgvalue_MSG == 0;
[L8583]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s858 != _to_s858 && ((_value_s858 > balances_BasicToken[this][_from_s858] || _value_s858 > allowed_StandardToken[this][_from_s858][msgsender_MSG]) || balances_BasicToken[this][_to_s858] + _value_s858 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s858 >= 0) && _value_s858 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s858] >= 0) && balances_BasicToken[this][_to_s858] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s858] >= 0) && balances_BasicToken[this][_from_s858] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s858][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s858][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_HKExCoin0 := true;
[L2]                 call_transferFrom_HKExCoin0 := false;
[L2]                 revert := revert_hold;
[L2250]              havoc __exception;
[L2251]              revert := false;
[L2252]  COND FALSE  !(__exception)
[L2284]  CALL        call __ret_0_ := transferFrom~address~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5205]  CALL        call __var_27 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5328]  COND FALSE  !(sub_value_s949 == 0)
[L5332]  COND FALSE  !(balances_BasicToken[this][sender_s949] < sub_value_s949)
[L5336]  COND TRUE   alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s949] == false
[L5337]  CALL        call __var_30 := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L5337]  RET         call __var_30 := FreshRefGenerator__success();
[L5338]  COND FALSE  !(revert)
[L5341]              assume Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == 0;
[L5342]              alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s949] := true;
[L5343]              assume M_int_Ref[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == zerointRefArr();
[L5344]              assume M_Ref_Ref[allocations_HKExCoin[this]][sender_s949] == __var_30;
[L5345]              assume sum[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == 0;
[L5347]  COND TRUE   Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == 0
[L5348]              __ret_0_ := true;
[L5205]  RET         call __var_27 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5206]  COND FALSE  !(revert)
[L5209]  COND FALSE  !(!__var_27)
[L5213]  CALL        call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858);
[L5554]              total_lockamount_s1052 := 0;
[L5555]              total_unlockamount_s1052 := 0;
[L5556]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5567]              j_s1052 := 0;
[L5568]  COND FALSE  !(j_s1052 < Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]])
[L5633]  COND FALSE  !(total_unlockamount_s1052 > 0)
[L5636]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5647]  COND FALSE  !(total_lockamount_s1052 == 0 && Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]] > 0)
[L5213]  RET         call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858);
[L5214]  COND FALSE  !(revert)
[L5217]  COND TRUE   DType[this] == HKExCoin
[L5218]  CALL        call __var_28 := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L4809]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4809]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]  COND FALSE  !(revert)
[L4813]  COND FALSE  !(DType[this] == HKExCoin)
[L4818]  COND TRUE   DType[this] == PausableToken
[L4819]  CALL        call __var_13 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s662, _to_s662, _value_s662);
[L4398]              __var_5 := null;
[L4399]  COND FALSE  !(!(_to_s415 != null))
[L4403]  COND FALSE  !(!(_value_s415 <= balances_BasicToken[this][_from_s415]))
[L4407]  COND FALSE  !(!(_value_s415 <= allowed_StandardToken[this][_from_s415][msgsender_MSG]))
[L4411]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s415], _value_s415);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4411]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s415], _value_s415);
[L4412]  COND FALSE  !(revert)
[L4415]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s415];
[L4416]              balances_BasicToken[this][_from_s415] := __var_6;
[L4417]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s415];
[L4418]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s415], _value_s415);
[L3942]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              assert c_s92 >= a_s92;
[L3944]              c_s92 := c_s92;
[L4418]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s415], _value_s415);
[L4419]  COND FALSE  !(revert)
[L4422]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s415];
[L4423]              balances_BasicToken[this][_to_s415] := __var_7;
[L4424]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s415];
[L4425]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s415][msgsender_MSG], _value_s415);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4425]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s415][msgsender_MSG], _value_s415);
[L4426]  COND FALSE  !(revert)
[L4429]              sum_allowed1[_from_s415] := sum_allowed1[_from_s415] - allowed_StandardToken[this][_from_s415][msgsender_MSG];
[L4430]              allowed_StandardToken[this][_from_s415][msgsender_MSG] := __var_8;
[L4431]              sum_allowed1[_from_s415] := sum_allowed1[_from_s415] + allowed_StandardToken[this][_from_s415][msgsender_MSG];
[L4432]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L4433]              __ret_0_ := true;
[L4819]  RET         call __var_13 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s662, _to_s662, _value_s662);
[L4820]  COND FALSE  !(revert)
[L4826]              __ret_0_ := __var_13;
[L5218]  RET         call __var_28 := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5219]  COND FALSE  !(revert)
[L5225]              __ret_0_ := __var_28;
[L2284]  RET         call __ret_0_ := transferFrom~address~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2285]              assume !revert && gas >= 0;
[L8583]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L8688]  RET         call CorralChoice_HKExCoin(this);

Loop:
[L8688]  CALL        call CorralChoice_HKExCoin(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != HKExCoin;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND FALSE  !(choice == 16)
[L8572]  COND FALSE  !(choice == 15)
[L8578]  COND TRUE   choice == 14
[L8579]              gas := gas - 21000;
[L8580]  COND TRUE   gas >= 0
[L8581]              assume _value_s858 >= 0 && _value_s858 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8582]              assume msgvalue_MSG == 0;
[L8583]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s858 != _to_s858 && ((_value_s858 > balances_BasicToken[this][_from_s858] || _value_s858 > allowed_StandardToken[this][_from_s858][msgsender_MSG]) || balances_BasicToken[this][_to_s858] + _value_s858 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s858 >= 0) && _value_s858 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s858] >= 0) && balances_BasicToken[this][_to_s858] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s858] >= 0) && balances_BasicToken[this][_from_s858] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s858][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s858][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_HKExCoin0 := true;
[L2]                 call_transferFrom_HKExCoin0 := false;
[L2]                 revert := revert_hold;
[L2250]              havoc __exception;
[L2251]              revert := false;
[L2252]  COND FALSE  !(__exception)
[L2284]  CALL        call __ret_0_ := transferFrom~address~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5205]  CALL        call __var_27 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5328]  COND FALSE  !(sub_value_s949 == 0)
[L5332]  COND FALSE  !(balances_BasicToken[this][sender_s949] < sub_value_s949)
[L5336]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s949] == false)
[L5347]  COND TRUE   Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == 0
[L5348]              __ret_0_ := true;
[L5205]  RET         call __var_27 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5206]  COND FALSE  !(revert)
[L5209]  COND FALSE  !(!__var_27)
[L5213]  CALL        call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858);
[L5554]              total_lockamount_s1052 := 0;
[L5555]              total_unlockamount_s1052 := 0;
[L5556]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5567]              j_s1052 := 0;
[L5568]  COND FALSE  !(j_s1052 < Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]])
[L5633]  COND FALSE  !(total_unlockamount_s1052 > 0)
[L5636]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5647]  COND FALSE  !(total_lockamount_s1052 == 0 && Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]] > 0)
[L5213]  RET         call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858);
[L5214]  COND FALSE  !(revert)
[L5217]  COND TRUE   DType[this] == HKExCoin
[L5218]  CALL        call __var_28 := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L4809]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4809]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]  COND FALSE  !(revert)
[L4813]  COND FALSE  !(DType[this] == HKExCoin)
[L4818]  COND TRUE   DType[this] == PausableToken
[L4819]  CALL        call __var_13 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s662, _to_s662, _value_s662);
[L4398]              __var_5 := null;
[L4399]  COND FALSE  !(!(_to_s415 != null))
[L4403]  COND FALSE  !(!(_value_s415 <= balances_BasicToken[this][_from_s415]))
[L4407]  COND FALSE  !(!(_value_s415 <= allowed_StandardToken[this][_from_s415][msgsender_MSG]))
[L4411]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s415], _value_s415);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4411]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s415], _value_s415);
[L4412]  COND FALSE  !(revert)
[L4415]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s415];
[L4416]              balances_BasicToken[this][_from_s415] := __var_6;
[L4417]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s415];
[L4418]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s415], _value_s415);
[L3942]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              assert c_s92 >= a_s92;
[L3944]              c_s92 := c_s92;
[L4418]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s415], _value_s415);
[L4419]  COND FALSE  !(revert)
[L4422]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s415];
[L4423]              balances_BasicToken[this][_to_s415] := __var_7;
[L4424]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s415];
[L4425]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s415][msgsender_MSG], _value_s415);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4425]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s415][msgsender_MSG], _value_s415);
[L4426]  COND FALSE  !(revert)
[L4429]              sum_allowed1[_from_s415] := sum_allowed1[_from_s415] - allowed_StandardToken[this][_from_s415][msgsender_MSG];
[L4430]              allowed_StandardToken[this][_from_s415][msgsender_MSG] := __var_8;
[L4431]              sum_allowed1[_from_s415] := sum_allowed1[_from_s415] + allowed_StandardToken[this][_from_s415][msgsender_MSG];
[L4432]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L4433]              __ret_0_ := true;
[L4819]  RET         call __var_13 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s662, _to_s662, _value_s662);
[L4820]  COND FALSE  !(revert)
[L4826]              __ret_0_ := __var_13;
[L5218]  RET         call __var_28 := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5219]  COND FALSE  !(revert)
[L5225]              __ret_0_ := __var_28;
[L2284]  RET         call __ret_0_ := transferFrom~address~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2285]              assume !revert && gas >= 0;
[L8583]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L8688]  RET         call CorralChoice_HKExCoin(this);

[2020-11-25 17:44:30,004 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:44:30,004 INFO  L82        PathProgramCache]: Analyzing trace with hash -1515271512, now seen corresponding path program 1 times
[2020-11-25 17:44:30,005 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:44:30,022 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:44:30,151 INFO  L134       CoverageAnalysis]: Checked inductivity of 967 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 967 trivial. 0 not checked.
[2020-11-25 17:44:30,151 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:44:30,151 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 17:44:30,152 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:44:30,152 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 17:44:30,152 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 17:44:30,152 INFO  L87              Difference]: Start difference. First operand 5699 states and 6482 transitions. cyclomatic complexity: 809 Second operand 7 states.
[2020-11-25 17:44:30,232 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:44:30,232 INFO  L93              Difference]: Finished difference Result 5753 states and 6536 transitions.
[2020-11-25 17:44:30,232 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 17:44:30,233 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5753 states and 6536 transitions.
[2020-11-25 17:44:30,243 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 17:44:30,258 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5753 states to 5689 states and 6468 transitions.
[2020-11-25 17:44:30,258 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1093
[2020-11-25 17:44:30,258 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1093
[2020-11-25 17:44:30,258 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5689 states and 6468 transitions.
[2020-11-25 17:44:30,263 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:44:30,263 INFO  L728         BuchiCegarLoop]: Abstraction has 5689 states and 6468 transitions.
[2020-11-25 17:44:30,267 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5689 states and 6468 transitions.
[2020-11-25 17:44:30,309 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5689 to 5689.
[2020-11-25 17:44:30,309 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5689 states.
[2020-11-25 17:44:30,316 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5689 states to 5689 states and 6468 transitions.
[2020-11-25 17:44:30,317 INFO  L751         BuchiCegarLoop]: Abstraction has 5689 states and 6468 transitions.
[2020-11-25 17:44:30,317 INFO  L631         BuchiCegarLoop]: Abstraction has 5689 states and 6468 transitions.
[2020-11-25 17:44:30,317 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 17:44:30,317 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5689 states and 6468 transitions.
[2020-11-25 17:44:30,323 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 17:44:30,323 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:44:30,323 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:44:30,325 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:44:30,325 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_HKExCoin0 := false;
[L2]                 call_transferFrom_HKExCoin0 := false;
[L2]     CALL        call main();
[L8678]              assume null == 0;
[L8679]  CALL        call this := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L8679]  RET         call this := FreshRefGenerator__success();
[L8680]              assume now >= 0;
[L8681]              assume DType[this] == HKExCoin;
[L8682]              assume msgvalue_MSG == 0;
[L8683]              gas := gas - 53000;
[L8684]  CALL        call HKExCoin_HKExCoin(this, msgsender_MSG, msgvalue_MSG);
[L2092]              havoc __exception;
[L2093]              revert := false;
[L2094]  COND FALSE  !(__exception)
[L2126]  CALL        call HKExCoin_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L5079]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5080]  COND FALSE  !(revert)
[L5083]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L5083]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5084]  COND FALSE  !(revert)
[L5087]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L5087]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5088]  COND FALSE  !(revert)
[L5091]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4330]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4330]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4334]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4338]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4339]  COND FALSE  !(revert)
[L4342]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4301]              assume msgsender_MSG != null;
[L4302]              Balance[this] := 0;
[L4303]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4304]              sum_allowed1[this] := 0;
[L4342]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4343]  COND FALSE  !(revert)
[L5091]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5092]  COND FALSE  !(revert)
[L5095]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L5095]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5096]  COND FALSE  !(revert)
[L5099]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4574]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  COND FALSE  !(revert)
[L4578]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]              assume msgsender_MSG != null;
[L4555]              Balance[this] := 0;
[L4556]              paused_Pausable[this] := false;
[L4578]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4579]  COND FALSE  !(revert)
[L5099]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5100]  COND FALSE  !(revert)
[L5103]  CALL        call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4700]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4701]  COND FALSE  !(revert)
[L4704]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4704]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4705]  COND FALSE  !(revert)
[L4708]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4708]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4709]  COND FALSE  !(revert)
[L4712]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4330]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4330]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4334]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4338]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4339]  COND FALSE  !(revert)
[L4342]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4301]              assume msgsender_MSG != null;
[L4302]              Balance[this] := 0;
[L4303]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4304]              sum_allowed1[this] := 0;
[L4342]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4343]  COND FALSE  !(revert)
[L4712]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4713]  COND FALSE  !(revert)
[L4716]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4716]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]  COND FALSE  !(revert)
[L4720]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4574]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  COND FALSE  !(revert)
[L4578]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]              assume msgsender_MSG != null;
[L4555]              Balance[this] := 0;
[L4556]              paused_Pausable[this] := false;
[L4578]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4579]  COND FALSE  !(revert)
[L4720]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4721]  COND FALSE  !(revert)
[L4724]  CALL        call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4661]              assume msgsender_MSG != null;
[L4662]              Balance[this] := 0;
[L4724]  RET         call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4725]  COND FALSE  !(revert)
[L5103]  RET         call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5104]  COND FALSE  !(revert)
[L5107]  CALL        call HKExCoin_HKExCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5013]              assume msgsender_MSG != null;
[L5014]              Balance[this] := 0;
[L5015]              name_HKExCoin[this] := 1400933812;
[L5016]              symbol_HKExCoin[this] := -256252482;
[L5017]              standard_HKExCoin[this] := -941536354;
[L5018]              decimals_HKExCoin[this] := 18;
[L5019]              __var_22 := decimals_HKExCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5020]              INITIAL_SUPPLY_HKExCoin[this] := nonlinearMul(10 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_HKExCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5022]  CALL        call __var_23 := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L5022]  RET         call __var_23 := FreshRefGenerator__success();
[L5023]  COND FALSE  !(revert)
[L5026]              allocations_HKExCoin[this] := __var_23;
[L5028]              alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]] := zeroRefboolArr();
[L5030]              totalSupply__BasicToken[this] := INITIAL_SUPPLY_HKExCoin[this];
[L5031]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L5032]              balances_BasicToken[this][msgsender_MSG] := INITIAL_SUPPLY_HKExCoin[this];
[L5033]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L5034]              assert { :EventEmitted "Transfer_HKExCoin" } true;
[L5107]  RET         call HKExCoin_HKExCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5108]  COND FALSE  !(revert)
[L2126]  RET         call HKExCoin_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG);
[L2127]              assume !revert && gas >= 0;
[L8684]  RET         call HKExCoin_HKExCoin(this, msgsender_MSG, msgvalue_MSG);
[L8685]              assume !revert && gas >= 0;
[L8688]  CALL        call CorralChoice_HKExCoin(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != HKExCoin;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND FALSE  !(choice == 16)
[L8572]  COND FALSE  !(choice == 15)
[L8578]  COND TRUE   choice == 14
[L8579]              gas := gas - 21000;
[L8580]  COND TRUE   gas >= 0
[L8581]              assume _value_s858 >= 0 && _value_s858 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8582]              assume msgvalue_MSG == 0;
[L8583]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s858 != _to_s858 && ((_value_s858 > balances_BasicToken[this][_from_s858] || _value_s858 > allowed_StandardToken[this][_from_s858][msgsender_MSG]) || balances_BasicToken[this][_to_s858] + _value_s858 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s858 >= 0) && _value_s858 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s858] >= 0) && balances_BasicToken[this][_to_s858] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s858] >= 0) && balances_BasicToken[this][_from_s858] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s858][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s858][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_HKExCoin0 := true;
[L2]                 call_transferFrom_HKExCoin0 := false;
[L2]                 revert := revert_hold;
[L2250]              havoc __exception;
[L2251]              revert := false;
[L2252]  COND FALSE  !(__exception)
[L2284]  CALL        call __ret_0_ := transferFrom~address~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5205]  CALL        call __var_27 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5328]  COND FALSE  !(sub_value_s949 == 0)
[L5332]  COND FALSE  !(balances_BasicToken[this][sender_s949] < sub_value_s949)
[L5336]  COND TRUE   alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s949] == false
[L5337]  CALL        call __var_30 := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L5337]  RET         call __var_30 := FreshRefGenerator__success();
[L5338]  COND FALSE  !(revert)
[L5341]              assume Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == 0;
[L5342]              alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s949] := true;
[L5343]              assume M_int_Ref[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == zerointRefArr();
[L5344]              assume M_Ref_Ref[allocations_HKExCoin[this]][sender_s949] == __var_30;
[L5345]              assume sum[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == 0;
[L5347]  COND TRUE   Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == 0
[L5348]              __ret_0_ := true;
[L5205]  RET         call __var_27 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5206]  COND FALSE  !(revert)
[L5209]  COND FALSE  !(!__var_27)
[L5213]  CALL        call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858);
[L5554]              total_lockamount_s1052 := 0;
[L5555]              total_unlockamount_s1052 := 0;
[L5556]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5567]              j_s1052 := 0;
[L5568]  COND FALSE  !(j_s1052 < Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]])
[L5633]  COND FALSE  !(total_unlockamount_s1052 > 0)
[L5636]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5647]  COND FALSE  !(total_lockamount_s1052 == 0 && Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]] > 0)
[L5213]  RET         call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858);
[L5214]  COND FALSE  !(revert)
[L5217]  COND TRUE   DType[this] == HKExCoin
[L5218]  CALL        call __var_28 := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L4809]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4809]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]  COND FALSE  !(revert)
[L4813]  COND TRUE   DType[this] == HKExCoin
[L4814]  CALL        call __var_13 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s662, _to_s662, _value_s662);
[L4398]              __var_5 := null;
[L4399]  COND FALSE  !(!(_to_s415 != null))
[L4403]  COND FALSE  !(!(_value_s415 <= balances_BasicToken[this][_from_s415]))
[L4407]  COND FALSE  !(!(_value_s415 <= allowed_StandardToken[this][_from_s415][msgsender_MSG]))
[L4411]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s415], _value_s415);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4411]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s415], _value_s415);
[L4412]  COND FALSE  !(revert)
[L4415]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s415];
[L4416]              balances_BasicToken[this][_from_s415] := __var_6;
[L4417]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s415];
[L4418]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s415], _value_s415);
[L3942]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              assert c_s92 >= a_s92;
[L3944]              c_s92 := c_s92;
[L4418]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s415], _value_s415);
[L4419]  COND FALSE  !(revert)
[L4422]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s415];
[L4423]              balances_BasicToken[this][_to_s415] := __var_7;
[L4424]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s415];
[L4425]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s415][msgsender_MSG], _value_s415);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4425]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s415][msgsender_MSG], _value_s415);
[L4426]  COND FALSE  !(revert)
[L4429]              sum_allowed1[_from_s415] := sum_allowed1[_from_s415] - allowed_StandardToken[this][_from_s415][msgsender_MSG];
[L4430]              allowed_StandardToken[this][_from_s415][msgsender_MSG] := __var_8;
[L4431]              sum_allowed1[_from_s415] := sum_allowed1[_from_s415] + allowed_StandardToken[this][_from_s415][msgsender_MSG];
[L4432]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L4433]              __ret_0_ := true;
[L4814]  RET         call __var_13 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s662, _to_s662, _value_s662);
[L4815]  COND FALSE  !(revert)
[L4826]              __ret_0_ := __var_13;
[L5218]  RET         call __var_28 := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5219]  COND FALSE  !(revert)
[L5225]              __ret_0_ := __var_28;
[L2284]  RET         call __ret_0_ := transferFrom~address~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2285]              assume !revert && gas >= 0;
[L8583]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L8688]  RET         call CorralChoice_HKExCoin(this);

Loop:
[L8688]  CALL        call CorralChoice_HKExCoin(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != HKExCoin;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND TRUE   choice == 20
[L8542]              gas := gas - 21000;
[L8543]  COND FALSE  !(gas >= 0)
[L8688]  RET         call CorralChoice_HKExCoin(this);

[2020-11-25 17:44:30,330 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:44:30,330 INFO  L82        PathProgramCache]: Analyzing trace with hash -120798468, now seen corresponding path program 1 times
[2020-11-25 17:44:30,331 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:44:30,354 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:44:30,728 INFO  L134       CoverageAnalysis]: Checked inductivity of 967 backedges. 10 proven. 0 refuted. 0 times theorem prover too weak. 957 trivial. 0 not checked.
[2020-11-25 17:44:30,728 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:44:30,728 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [18] imperfect sequences [] total 18
[2020-11-25 17:44:30,729 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:44:30,729 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 19 interpolants.
[2020-11-25 17:44:30,729 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=37, Invalid=305, Unknown=0, NotChecked=0, Total=342
[2020-11-25 17:44:30,729 INFO  L87              Difference]: Start difference. First operand 5689 states and 6468 transitions. cyclomatic complexity: 805 Second operand 19 states.
[2020-11-25 17:44:35,424 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:44:35,424 INFO  L93              Difference]: Finished difference Result 5834 states and 6678 transitions.
[2020-11-25 17:44:35,425 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 21 states. 
[2020-11-25 17:44:35,425 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5834 states and 6678 transitions.
[2020-11-25 17:44:35,435 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 17:44:35,448 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5834 states to 5834 states and 6678 transitions.
[2020-11-25 17:44:35,448 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1121
[2020-11-25 17:44:35,449 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1121
[2020-11-25 17:44:35,449 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5834 states and 6678 transitions.
[2020-11-25 17:44:35,452 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:44:35,453 INFO  L728         BuchiCegarLoop]: Abstraction has 5834 states and 6678 transitions.
[2020-11-25 17:44:35,457 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5834 states and 6678 transitions.
[2020-11-25 17:44:35,487 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5834 to 5663.
[2020-11-25 17:44:35,487 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5663 states.
[2020-11-25 17:44:35,493 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5663 states to 5663 states and 6447 transitions.
[2020-11-25 17:44:35,493 INFO  L751         BuchiCegarLoop]: Abstraction has 5663 states and 6447 transitions.
[2020-11-25 17:44:35,493 INFO  L631         BuchiCegarLoop]: Abstraction has 5663 states and 6447 transitions.
[2020-11-25 17:44:35,493 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 17:44:35,493 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5663 states and 6447 transitions.
[2020-11-25 17:44:35,498 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 17:44:35,498 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:44:35,498 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:44:35,500 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:44:35,500 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_HKExCoin0 := false;
[L2]                 call_transferFrom_HKExCoin0 := false;
[L2]     CALL        call main();
[L8678]              assume null == 0;
[L8679]  CALL        call this := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L8679]  RET         call this := FreshRefGenerator__success();
[L8680]              assume now >= 0;
[L8681]              assume DType[this] == HKExCoin;
[L8682]              assume msgvalue_MSG == 0;
[L8683]              gas := gas - 53000;
[L8684]  CALL        call HKExCoin_HKExCoin(this, msgsender_MSG, msgvalue_MSG);
[L2092]              havoc __exception;
[L2093]              revert := false;
[L2094]  COND TRUE   __exception
[L2095]              __tmp__Balance := Balance;
[L2096]              __tmp__DType := DType;
[L2097]              __tmp__Alloc := Alloc;
[L2098]              __tmp__balance_ADDR := balance_ADDR;
[L2099]              __tmp__M_Ref_int := M_Ref_int;
[L2100]              __tmp__sum_balances0 := sum_balances0;
[L2101]              __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L2102]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2103]              __tmp__sum_allowed1 := sum_allowed1;
[L2104]              __tmp__M_int_Ref := M_int_Ref;
[L2105]              __tmp__alloc_allocations_HKExCoin_lvl0 := alloc_allocations_HKExCoin_lvl0;
[L2106]              __tmp__sum := sum;
[L2107]              __tmp__M_int_int := M_int_int;
[L2108]              __tmp__Length := Length;
[L2109]              __tmp__now := now;
[L2110]              __tmp__owner_Ownable := owner_Ownable;
[L2111]              __tmp__balances_BasicToken := balances_BasicToken;
[L2112]              __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L2113]              __tmp__allowed_StandardToken := allowed_StandardToken;
[L2114]              __tmp__paused_Pausable := paused_Pausable;
[L2115]              __tmp__name_HKExCoin := name_HKExCoin;
[L2116]              __tmp__symbol_HKExCoin := symbol_HKExCoin;
[L2117]              __tmp__standard_HKExCoin := standard_HKExCoin;
[L2118]              __tmp__decimals_HKExCoin := decimals_HKExCoin;
[L2119]              __tmp__INITIAL_SUPPLY_HKExCoin := INITIAL_SUPPLY_HKExCoin;
[L2120]              __tmp__allocations_HKExCoin := allocations_HKExCoin;
[L2121]              __tmp__releaseTime_HKExCoin.TimeLock := releaseTime_HKExCoin.TimeLock;
[L2122]              __tmp__balance_HKExCoin.TimeLock := balance_HKExCoin.TimeLock;
[L2123]  CALL        call HKExCoin_HKExCoin__fail(this, msgsender_MSG, msgvalue_MSG);
[L5041]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4099]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4084]              assume msgsender_MSG != null;
[L4085]              __tmp__Balance[this] := 0;
[L4099]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4100]  COND FALSE  !(revert)
[L5041]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5042]  COND FALSE  !(revert)
[L5045]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4266]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4099]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4084]              assume msgsender_MSG != null;
[L4085]              __tmp__Balance[this] := 0;
[L4099]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4100]  COND FALSE  !(revert)
[L4266]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4267]  COND FALSE  !(revert)
[L4270]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4251]              assume msgsender_MSG != null;
[L4252]              __tmp__Balance[this] := 0;
[L4270]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4271]  COND FALSE  !(revert)
[L5045]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5046]  COND FALSE  !(revert)
[L5049]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4137]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4099]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4084]              assume msgsender_MSG != null;
[L4085]              __tmp__Balance[this] := 0;
[L4099]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4100]  COND FALSE  !(revert)
[L4137]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4138]  COND FALSE  !(revert)
[L4141]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4116]              assume msgsender_MSG != null;
[L4117]              __tmp__Balance[this] := 0;
[L4118]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L4119]              __tmp__sum_balances0[this] := 0;
[L4120]              __tmp__totalSupply__BasicToken[this] := 0;
[L4141]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4142]  COND FALSE  !(revert)
[L5049]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5050]  COND FALSE  !(revert)
[L5053]  CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4310]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4099]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4084]              assume msgsender_MSG != null;
[L4085]              __tmp__Balance[this] := 0;
[L4099]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4100]  COND FALSE  !(revert)
[L4310]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4311]  COND FALSE  !(revert)
[L4314]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4266]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4099]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4084]              assume msgsender_MSG != null;
[L4085]              __tmp__Balance[this] := 0;
[L4099]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4100]  COND FALSE  !(revert)
[L4266]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4267]  COND FALSE  !(revert)
[L4270]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4251]              assume msgsender_MSG != null;
[L4252]              __tmp__Balance[this] := 0;
[L4270]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4271]  COND FALSE  !(revert)
[L4314]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4315]  COND FALSE  !(revert)
[L4318]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4137]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4099]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4084]              assume msgsender_MSG != null;
[L4085]              __tmp__Balance[this] := 0;
[L4099]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4100]  COND FALSE  !(revert)
[L4137]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4138]  COND FALSE  !(revert)
[L4141]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4116]              assume msgsender_MSG != null;
[L4117]              __tmp__Balance[this] := 0;
[L4118]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L4119]              __tmp__sum_balances0[this] := 0;
[L4120]              __tmp__totalSupply__BasicToken[this] := 0;
[L4141]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4142]  COND FALSE  !(revert)
[L4318]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4319]  COND FALSE  !(revert)
[L4322]  CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4291]              assume msgsender_MSG != null;
[L4292]              __tmp__Balance[this] := 0;
[L4293]              __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L4294]              __tmp__sum_allowed1[this] := 0;
[L4322]  RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4323]  COND FALSE  !(revert)
[L5053]  RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5054]  COND FALSE  !(revert)
[L5057]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3970]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3951]              assume msgsender_MSG != null;
[L3952]              __tmp__Balance[this] := 0;
[L3953]              __tmp__owner_Ownable[this] := null;
[L3955]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L3970]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3971]  COND FALSE  !(revert)
[L5057]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5058]  COND FALSE  !(revert)
[L5061]  CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4562]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3970]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3951]              assume msgsender_MSG != null;
[L3952]              __tmp__Balance[this] := 0;
[L3953]              __tmp__owner_Ownable[this] := null;
[L3955]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L3970]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3971]  COND FALSE  !(revert)
[L4562]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4563]  COND FALSE  !(revert)
[L4566]  CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4545]              assume msgsender_MSG != null;
[L4546]              __tmp__Balance[this] := 0;
[L4547]              __tmp__paused_Pausable[this] := false;
[L4566]  RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]  COND FALSE  !(revert)
[L5061]  RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5062]  COND FALSE  !(revert)
[L5065]  CALL        call PausableToken_PausableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4668]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4099]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4084]              assume msgsender_MSG != null;
[L4085]              __tmp__Balance[this] := 0;
[L4099]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4100]  COND FALSE  !(revert)
[L4668]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4669]  COND FALSE  !(revert)
[L4672]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4266]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4099]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4084]              assume msgsender_MSG != null;
[L4085]              __tmp__Balance[this] := 0;
[L4099]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4100]  COND FALSE  !(revert)
[L4266]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4267]  COND FALSE  !(revert)
[L4270]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4251]              assume msgsender_MSG != null;
[L4252]              __tmp__Balance[this] := 0;
[L4270]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4271]  COND FALSE  !(revert)
[L4672]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4673]  COND FALSE  !(revert)
[L4676]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4137]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4099]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4084]              assume msgsender_MSG != null;
[L4085]              __tmp__Balance[this] := 0;
[L4099]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4100]  COND FALSE  !(revert)
[L4137]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4138]  COND FALSE  !(revert)
[L4141]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4116]              assume msgsender_MSG != null;
[L4117]              __tmp__Balance[this] := 0;
[L4118]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L4119]              __tmp__sum_balances0[this] := 0;
[L4120]              __tmp__totalSupply__BasicToken[this] := 0;
[L4141]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4142]  COND FALSE  !(revert)
[L4676]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4677]  COND FALSE  !(revert)
[L4680]  CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4310]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4099]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4084]              assume msgsender_MSG != null;
[L4085]              __tmp__Balance[this] := 0;
[L4099]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4100]  COND FALSE  !(revert)
[L4310]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4311]  COND FALSE  !(revert)
[L4314]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4266]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4099]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4084]              assume msgsender_MSG != null;
[L4085]              __tmp__Balance[this] := 0;
[L4099]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4100]  COND FALSE  !(revert)
[L4266]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4267]  COND FALSE  !(revert)
[L4270]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4251]              assume msgsender_MSG != null;
[L4252]              __tmp__Balance[this] := 0;
[L4270]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4271]  COND FALSE  !(revert)
[L4314]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4315]  COND FALSE  !(revert)
[L4318]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4137]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4099]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4084]              assume msgsender_MSG != null;
[L4085]              __tmp__Balance[this] := 0;
[L4099]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4100]  COND FALSE  !(revert)
[L4137]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4138]  COND FALSE  !(revert)
[L4141]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4116]              assume msgsender_MSG != null;
[L4117]              __tmp__Balance[this] := 0;
[L4118]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L4119]              __tmp__sum_balances0[this] := 0;
[L4120]              __tmp__totalSupply__BasicToken[this] := 0;
[L4141]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4142]  COND FALSE  !(revert)
[L4318]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4319]  COND FALSE  !(revert)
[L4322]  CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4291]              assume msgsender_MSG != null;
[L4292]              __tmp__Balance[this] := 0;
[L4293]              __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L4294]              __tmp__sum_allowed1[this] := 0;
[L4322]  RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4323]  COND FALSE  !(revert)
[L4680]  RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4681]  COND FALSE  !(revert)
[L4684]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3970]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3951]              assume msgsender_MSG != null;
[L3952]              __tmp__Balance[this] := 0;
[L3953]              __tmp__owner_Ownable[this] := null;
[L3955]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L3970]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3971]  COND FALSE  !(revert)
[L4684]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4685]  COND FALSE  !(revert)
[L4688]  CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4562]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3970]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3951]              assume msgsender_MSG != null;
[L3952]              __tmp__Balance[this] := 0;
[L3953]              __tmp__owner_Ownable[this] := null;
[L3955]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L3970]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3971]  COND FALSE  !(revert)
[L4562]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4563]  COND FALSE  !(revert)
[L4566]  CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4545]              assume msgsender_MSG != null;
[L4546]              __tmp__Balance[this] := 0;
[L4547]              __tmp__paused_Pausable[this] := false;
[L4566]  RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]  COND FALSE  !(revert)
[L4688]  RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4689]  COND FALSE  !(revert)
[L4692]  CALL        call PausableToken_PausableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4653]              assume msgsender_MSG != null;
[L4654]              __tmp__Balance[this] := 0;
[L4692]  RET         call PausableToken_PausableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4693]  COND FALSE  !(revert)
[L5065]  RET         call PausableToken_PausableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5066]  COND FALSE  !(revert)
[L5069]  CALL        call HKExCoin_HKExCoin_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4985]              assume msgsender_MSG != null;
[L4986]              __tmp__Balance[this] := 0;
[L4987]              __tmp__name_HKExCoin[this] := 1400933812;
[L4988]              __tmp__symbol_HKExCoin[this] := -256252482;
[L4989]              __tmp__standard_HKExCoin[this] := -941536354;
[L4990]              __tmp__decimals_HKExCoin[this] := 18;
[L4991]              __var_22 := __tmp__decimals_HKExCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4992]              __tmp__INITIAL_SUPPLY_HKExCoin[this] := nonlinearMul(10 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, __tmp__decimals_HKExCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4994]  CALL        call __var_23 := FreshRefGenerator__fail();
[L3827]              havoc newRef;
[L3828]              assume __tmp__Alloc[newRef] == false;
[L3829]              __tmp__Alloc[newRef] := true;
[L3830]              assume newRef != null;
[L4994]  RET         call __var_23 := FreshRefGenerator__fail();
[L4995]  COND FALSE  !(revert)
[L4998]              __tmp__allocations_HKExCoin[this] := __var_23;
[L5000]              __tmp__alloc_allocations_HKExCoin_lvl0[__tmp__allocations_HKExCoin[this]] := zeroRefboolArr();
[L5002]              __tmp__totalSupply__BasicToken[this] := __tmp__INITIAL_SUPPLY_HKExCoin[this];
[L5003]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_BasicToken[this][msgsender_MSG];
[L5004]              __tmp__balances_BasicToken[this][msgsender_MSG] := __tmp__INITIAL_SUPPLY_HKExCoin[this];
[L5005]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_BasicToken[this][msgsender_MSG];
[L5069]  RET         call HKExCoin_HKExCoin_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5070]  COND FALSE  !(revert)
[L2123]  RET         call HKExCoin_HKExCoin__fail(this, msgsender_MSG, msgvalue_MSG);
[L2124]              assume revert || gas < 0;
[L8684]  RET         call HKExCoin_HKExCoin(this, msgsender_MSG, msgvalue_MSG);
[L8685]              assume !revert && gas >= 0;
[L8688]  CALL        call CorralChoice_HKExCoin(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != HKExCoin;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND FALSE  !(choice == 16)
[L8572]  COND FALSE  !(choice == 15)
[L8578]  COND TRUE   choice == 14
[L8579]              gas := gas - 21000;
[L8580]  COND TRUE   gas >= 0
[L8581]              assume _value_s858 >= 0 && _value_s858 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8582]              assume msgvalue_MSG == 0;
[L8583]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s858 != _to_s858 && ((_value_s858 > balances_BasicToken[this][_from_s858] || _value_s858 > allowed_StandardToken[this][_from_s858][msgsender_MSG]) || balances_BasicToken[this][_to_s858] + _value_s858 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s858 >= 0) && _value_s858 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s858] >= 0) && balances_BasicToken[this][_to_s858] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s858] >= 0) && balances_BasicToken[this][_from_s858] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s858][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s858][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_HKExCoin0 := true;
[L2]                 call_transferFrom_HKExCoin0 := false;
[L2]                 revert := revert_hold;
[L2250]              havoc __exception;
[L2251]              revert := false;
[L2252]  COND FALSE  !(__exception)
[L2284]  CALL        call __ret_0_ := transferFrom~address~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5205]  CALL        call __var_27 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5328]  COND FALSE  !(sub_value_s949 == 0)
[L5332]  COND FALSE  !(balances_BasicToken[this][sender_s949] < sub_value_s949)
[L5336]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s949] == false)
[L5347]  COND TRUE   Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == 0
[L5348]              __ret_0_ := true;
[L5205]  RET         call __var_27 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5206]  COND FALSE  !(revert)
[L5209]  COND FALSE  !(!__var_27)
[L5213]  CALL        call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858);
[L5554]              total_lockamount_s1052 := 0;
[L5555]              total_unlockamount_s1052 := 0;
[L5556]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5567]              j_s1052 := 0;
[L5568]  COND FALSE  !(j_s1052 < Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]])
[L5633]  COND FALSE  !(total_unlockamount_s1052 > 0)
[L5636]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5647]  COND FALSE  !(total_lockamount_s1052 == 0 && Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]] > 0)
[L5213]  RET         call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858);
[L5214]  COND FALSE  !(revert)
[L5217]  COND TRUE   DType[this] == HKExCoin
[L5218]  CALL        call __var_28 := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L4809]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4809]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]  COND FALSE  !(revert)
[L4813]  COND TRUE   DType[this] == HKExCoin
[L4814]  CALL        call __var_13 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s662, _to_s662, _value_s662);
[L4398]              __var_5 := null;
[L4399]  COND FALSE  !(!(_to_s415 != null))
[L4403]  COND FALSE  !(!(_value_s415 <= balances_BasicToken[this][_from_s415]))
[L4407]  COND FALSE  !(!(_value_s415 <= allowed_StandardToken[this][_from_s415][msgsender_MSG]))
[L4411]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s415], _value_s415);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4411]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s415], _value_s415);
[L4412]  COND FALSE  !(revert)
[L4415]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s415];
[L4416]              balances_BasicToken[this][_from_s415] := __var_6;
[L4417]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s415];
[L4418]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s415], _value_s415);
[L3942]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              assert c_s92 >= a_s92;
[L3944]              c_s92 := c_s92;
[L4418]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s415], _value_s415);
[L4419]  COND FALSE  !(revert)
[L4422]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s415];
[L4423]              balances_BasicToken[this][_to_s415] := __var_7;
[L4424]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s415];
[L4425]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s415][msgsender_MSG], _value_s415);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4425]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s415][msgsender_MSG], _value_s415);
[L4426]  COND FALSE  !(revert)
[L4429]              sum_allowed1[_from_s415] := sum_allowed1[_from_s415] - allowed_StandardToken[this][_from_s415][msgsender_MSG];
[L4430]              allowed_StandardToken[this][_from_s415][msgsender_MSG] := __var_8;
[L4431]              sum_allowed1[_from_s415] := sum_allowed1[_from_s415] + allowed_StandardToken[this][_from_s415][msgsender_MSG];
[L4432]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L4433]              __ret_0_ := true;
[L4814]  RET         call __var_13 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s662, _to_s662, _value_s662);
[L4815]  COND FALSE  !(revert)
[L4826]              __ret_0_ := __var_13;
[L5218]  RET         call __var_28 := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5219]  COND FALSE  !(revert)
[L5225]              __ret_0_ := __var_28;
[L2284]  RET         call __ret_0_ := transferFrom~address~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2285]              assume !revert && gas >= 0;
[L8583]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L8688]  RET         call CorralChoice_HKExCoin(this);

Loop:
[L8688]  CALL        call CorralChoice_HKExCoin(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != HKExCoin;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND FALSE  !(choice == 16)
[L8572]  COND FALSE  !(choice == 15)
[L8578]  COND TRUE   choice == 14
[L8579]              gas := gas - 21000;
[L8580]  COND TRUE   gas >= 0
[L8581]              assume _value_s858 >= 0 && _value_s858 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8582]              assume msgvalue_MSG == 0;
[L8583]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s858 != _to_s858 && ((_value_s858 > balances_BasicToken[this][_from_s858] || _value_s858 > allowed_StandardToken[this][_from_s858][msgsender_MSG]) || balances_BasicToken[this][_to_s858] + _value_s858 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s858 >= 0) && _value_s858 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s858] >= 0) && balances_BasicToken[this][_to_s858] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s858] >= 0) && balances_BasicToken[this][_from_s858] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s858][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s858][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_HKExCoin0 := true;
[L2]                 call_transferFrom_HKExCoin0 := false;
[L2]                 revert := revert_hold;
[L2250]              havoc __exception;
[L2251]              revert := false;
[L2252]  COND FALSE  !(__exception)
[L2284]  CALL        call __ret_0_ := transferFrom~address~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5205]  CALL        call __var_27 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5328]  COND FALSE  !(sub_value_s949 == 0)
[L5332]  COND FALSE  !(balances_BasicToken[this][sender_s949] < sub_value_s949)
[L5336]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s949] == false)
[L5347]  COND TRUE   Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == 0
[L5348]              __ret_0_ := true;
[L5205]  RET         call __var_27 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5206]  COND FALSE  !(revert)
[L5209]  COND FALSE  !(!__var_27)
[L5213]  CALL        call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858);
[L5554]              total_lockamount_s1052 := 0;
[L5555]              total_unlockamount_s1052 := 0;
[L5556]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5567]              j_s1052 := 0;
[L5568]  COND FALSE  !(j_s1052 < Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]])
[L5633]  COND FALSE  !(total_unlockamount_s1052 > 0)
[L5636]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5647]  COND FALSE  !(total_lockamount_s1052 == 0 && Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]] > 0)
[L5213]  RET         call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858);
[L5214]  COND FALSE  !(revert)
[L5217]  COND TRUE   DType[this] == HKExCoin
[L5218]  CALL        call __var_28 := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L4809]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4809]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]  COND FALSE  !(revert)
[L4813]  COND TRUE   DType[this] == HKExCoin
[L4814]  CALL        call __var_13 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s662, _to_s662, _value_s662);
[L4398]              __var_5 := null;
[L4399]  COND FALSE  !(!(_to_s415 != null))
[L4403]  COND FALSE  !(!(_value_s415 <= balances_BasicToken[this][_from_s415]))
[L4407]  COND FALSE  !(!(_value_s415 <= allowed_StandardToken[this][_from_s415][msgsender_MSG]))
[L4411]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s415], _value_s415);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4411]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s415], _value_s415);
[L4412]  COND FALSE  !(revert)
[L4415]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s415];
[L4416]              balances_BasicToken[this][_from_s415] := __var_6;
[L4417]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s415];
[L4418]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s415], _value_s415);
[L3942]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              assert c_s92 >= a_s92;
[L3944]              c_s92 := c_s92;
[L4418]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s415], _value_s415);
[L4419]  COND FALSE  !(revert)
[L4422]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s415];
[L4423]              balances_BasicToken[this][_to_s415] := __var_7;
[L4424]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s415];
[L4425]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s415][msgsender_MSG], _value_s415);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4425]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s415][msgsender_MSG], _value_s415);
[L4426]  COND FALSE  !(revert)
[L4429]              sum_allowed1[_from_s415] := sum_allowed1[_from_s415] - allowed_StandardToken[this][_from_s415][msgsender_MSG];
[L4430]              allowed_StandardToken[this][_from_s415][msgsender_MSG] := __var_8;
[L4431]              sum_allowed1[_from_s415] := sum_allowed1[_from_s415] + allowed_StandardToken[this][_from_s415][msgsender_MSG];
[L4432]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L4433]              __ret_0_ := true;
[L4814]  RET         call __var_13 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s662, _to_s662, _value_s662);
[L4815]  COND FALSE  !(revert)
[L4826]              __ret_0_ := __var_13;
[L5218]  RET         call __var_28 := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5219]  COND FALSE  !(revert)
[L5225]              __ret_0_ := __var_28;
[L2284]  RET         call __ret_0_ := transferFrom~address~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2285]              assume !revert && gas >= 0;
[L8583]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L8688]  RET         call CorralChoice_HKExCoin(this);

[2020-11-25 17:44:35,505 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:44:35,505 INFO  L82        PathProgramCache]: Analyzing trace with hash 1101920637, now seen corresponding path program 1 times
[2020-11-25 17:44:35,506 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:44:35,524 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:44:35,671 INFO  L134       CoverageAnalysis]: Checked inductivity of 961 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 961 trivial. 0 not checked.
[2020-11-25 17:44:35,671 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:44:35,671 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 17:44:35,672 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:44:35,672 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 17:44:35,672 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 17:44:35,672 INFO  L87              Difference]: Start difference. First operand 5663 states and 6447 transitions. cyclomatic complexity: 810 Second operand 4 states.
[2020-11-25 17:44:36,116 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:44:36,116 INFO  L93              Difference]: Finished difference Result 7084 states and 8183 transitions.
[2020-11-25 17:44:36,117 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 17:44:36,117 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7084 states and 8183 transitions.
[2020-11-25 17:44:36,132 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 17:44:36,147 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7084 states to 6300 states and 7287 transitions.
[2020-11-25 17:44:36,147 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1218
[2020-11-25 17:44:36,147 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1218
[2020-11-25 17:44:36,147 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6300 states and 7287 transitions.
[2020-11-25 17:44:36,151 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:44:36,151 INFO  L728         BuchiCegarLoop]: Abstraction has 6300 states and 7287 transitions.
[2020-11-25 17:44:36,156 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6300 states and 7287 transitions.
[2020-11-25 17:44:36,191 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6300 to 5838.
[2020-11-25 17:44:36,192 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5838 states.
[2020-11-25 17:44:36,198 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5838 states to 5838 states and 6674 transitions.
[2020-11-25 17:44:36,199 INFO  L751         BuchiCegarLoop]: Abstraction has 5838 states and 6674 transitions.
[2020-11-25 17:44:36,199 INFO  L631         BuchiCegarLoop]: Abstraction has 5838 states and 6674 transitions.
[2020-11-25 17:44:36,199 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 17:44:36,199 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5838 states and 6674 transitions.
[2020-11-25 17:44:36,205 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 17:44:36,205 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:44:36,205 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:44:36,206 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:44:36,207 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_HKExCoin0 := false;
[L2]                 call_transferFrom_HKExCoin0 := false;
[L2]     CALL        call main();
[L8678]              assume null == 0;
[L8679]  CALL        call this := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L8679]  RET         call this := FreshRefGenerator__success();
[L8680]              assume now >= 0;
[L8681]              assume DType[this] == HKExCoin;
[L8682]              assume msgvalue_MSG == 0;
[L8683]              gas := gas - 53000;
[L8684]  CALL        call HKExCoin_HKExCoin(this, msgsender_MSG, msgvalue_MSG);
[L2092]              havoc __exception;
[L2093]              revert := false;
[L2094]  COND FALSE  !(__exception)
[L2126]  CALL        call HKExCoin_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L5079]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5080]  COND FALSE  !(revert)
[L5083]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L5083]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5084]  COND FALSE  !(revert)
[L5087]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L5087]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5088]  COND FALSE  !(revert)
[L5091]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4330]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4330]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4334]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4338]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4339]  COND FALSE  !(revert)
[L4342]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4301]              assume msgsender_MSG != null;
[L4302]              Balance[this] := 0;
[L4303]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4304]              sum_allowed1[this] := 0;
[L4342]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4343]  COND FALSE  !(revert)
[L5091]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5092]  COND FALSE  !(revert)
[L5095]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L5095]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5096]  COND FALSE  !(revert)
[L5099]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4574]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  COND FALSE  !(revert)
[L4578]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]              assume msgsender_MSG != null;
[L4555]              Balance[this] := 0;
[L4556]              paused_Pausable[this] := false;
[L4578]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4579]  COND FALSE  !(revert)
[L5099]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5100]  COND FALSE  !(revert)
[L5103]  CALL        call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4700]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4701]  COND FALSE  !(revert)
[L4704]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4704]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4705]  COND FALSE  !(revert)
[L4708]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4708]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4709]  COND FALSE  !(revert)
[L4712]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4330]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4330]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4334]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4338]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4339]  COND FALSE  !(revert)
[L4342]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4301]              assume msgsender_MSG != null;
[L4302]              Balance[this] := 0;
[L4303]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4304]              sum_allowed1[this] := 0;
[L4342]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4343]  COND FALSE  !(revert)
[L4712]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4713]  COND FALSE  !(revert)
[L4716]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4716]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]  COND FALSE  !(revert)
[L4720]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4574]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  COND FALSE  !(revert)
[L4578]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]              assume msgsender_MSG != null;
[L4555]              Balance[this] := 0;
[L4556]              paused_Pausable[this] := false;
[L4578]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4579]  COND FALSE  !(revert)
[L4720]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4721]  COND FALSE  !(revert)
[L4724]  CALL        call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4661]              assume msgsender_MSG != null;
[L4662]              Balance[this] := 0;
[L4724]  RET         call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4725]  COND FALSE  !(revert)
[L5103]  RET         call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5104]  COND FALSE  !(revert)
[L5107]  CALL        call HKExCoin_HKExCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5013]              assume msgsender_MSG != null;
[L5014]              Balance[this] := 0;
[L5015]              name_HKExCoin[this] := 1400933812;
[L5016]              symbol_HKExCoin[this] := -256252482;
[L5017]              standard_HKExCoin[this] := -941536354;
[L5018]              decimals_HKExCoin[this] := 18;
[L5019]              __var_22 := decimals_HKExCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5020]              INITIAL_SUPPLY_HKExCoin[this] := nonlinearMul(10 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_HKExCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5022]  CALL        call __var_23 := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L5022]  RET         call __var_23 := FreshRefGenerator__success();
[L5023]  COND FALSE  !(revert)
[L5026]              allocations_HKExCoin[this] := __var_23;
[L5028]              alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]] := zeroRefboolArr();
[L5030]              totalSupply__BasicToken[this] := INITIAL_SUPPLY_HKExCoin[this];
[L5031]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L5032]              balances_BasicToken[this][msgsender_MSG] := INITIAL_SUPPLY_HKExCoin[this];
[L5033]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L5034]              assert { :EventEmitted "Transfer_HKExCoin" } true;
[L5107]  RET         call HKExCoin_HKExCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5108]  COND FALSE  !(revert)
[L2126]  RET         call HKExCoin_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG);
[L2127]              assume !revert && gas >= 0;
[L8684]  RET         call HKExCoin_HKExCoin(this, msgsender_MSG, msgvalue_MSG);
[L8685]              assume !revert && gas >= 0;
[L8688]  CALL        call CorralChoice_HKExCoin(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != HKExCoin;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND FALSE  !(choice == 16)
[L8572]  COND FALSE  !(choice == 15)
[L8578]  COND FALSE  !(choice == 14)
[L8585]  COND TRUE   choice == 13
[L8586]              gas := gas - 21000;
[L8587]  COND TRUE   gas >= 0
[L8588]              assume _value_s680 >= 0 && _value_s680 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8589]              assume msgvalue_MSG == 0;
[L8590]  CALL        call __ret_0_approve := approve~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L1834]              havoc __exception;
[L1835]              revert := false;
[L1836]  COND FALSE  !(__exception)
[L1868]  CALL        call __ret_0_ := approve~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L4859]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4859]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4860]  COND FALSE  !(revert)
[L4863]  COND TRUE   DType[this] == HKExCoin
[L4864]  CALL        call __var_15 := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L4448]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s443];
[L4449]              allowed_StandardToken[this][msgsender_MSG][_spender_s443] := _value_s443;
[L4450]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s443];
[L4451]              assert { :EventEmitted "Approval_StandardToken" } true;
[L4452]              __ret_0_ := true;
[L4864]  RET         call __var_15 := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L4865]  COND FALSE  !(revert)
[L4876]              __ret_0_ := __var_15;
[L1868]  RET         call __ret_0_ := approve~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L1869]              assume !revert && gas >= 0;
[L8590]  RET         call __ret_0_approve := approve~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L8688]  RET         call CorralChoice_HKExCoin(this);
[L8688]  CALL        call CorralChoice_HKExCoin(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != HKExCoin;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND FALSE  !(choice == 16)
[L8572]  COND FALSE  !(choice == 15)
[L8578]  COND TRUE   choice == 14
[L8579]              gas := gas - 21000;
[L8580]  COND TRUE   gas >= 0
[L8581]              assume _value_s858 >= 0 && _value_s858 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8582]              assume msgvalue_MSG == 0;
[L8583]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s858 != _to_s858 && ((_value_s858 > balances_BasicToken[this][_from_s858] || _value_s858 > allowed_StandardToken[this][_from_s858][msgsender_MSG]) || balances_BasicToken[this][_to_s858] + _value_s858 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s858 >= 0) && _value_s858 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s858] >= 0) && balances_BasicToken[this][_to_s858] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s858] >= 0) && balances_BasicToken[this][_from_s858] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s858][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s858][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_HKExCoin0 := true;
[L2]                 call_transferFrom_HKExCoin0 := false;
[L2]                 revert := revert_hold;
[L2250]              havoc __exception;
[L2251]              revert := false;
[L2252]  COND FALSE  !(__exception)
[L2284]  CALL        call __ret_0_ := transferFrom~address~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5205]  CALL        call __var_27 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5328]  COND FALSE  !(sub_value_s949 == 0)
[L5332]  COND FALSE  !(balances_BasicToken[this][sender_s949] < sub_value_s949)
[L5336]  COND TRUE   alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s949] == false
[L5337]  CALL        call __var_30 := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L5337]  RET         call __var_30 := FreshRefGenerator__success();
[L5338]  COND FALSE  !(revert)
[L5341]              assume Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == 0;
[L5342]              alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s949] := true;
[L5343]              assume M_int_Ref[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == zerointRefArr();
[L5344]              assume M_Ref_Ref[allocations_HKExCoin[this]][sender_s949] == __var_30;
[L5345]              assume sum[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == 0;
[L5347]  COND TRUE   Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == 0
[L5348]              __ret_0_ := true;
[L5205]  RET         call __var_27 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5206]  COND FALSE  !(revert)
[L5209]  COND FALSE  !(!__var_27)
[L5213]  CALL        call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858);
[L5554]              total_lockamount_s1052 := 0;
[L5555]              total_unlockamount_s1052 := 0;
[L5556]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5567]              j_s1052 := 0;
[L5568]  COND FALSE  !(j_s1052 < Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]])
[L5633]  COND FALSE  !(total_unlockamount_s1052 > 0)
[L5636]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5647]  COND FALSE  !(total_lockamount_s1052 == 0 && Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]] > 0)
[L5213]  RET         call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858);
[L5214]  COND FALSE  !(revert)
[L5217]  COND TRUE   DType[this] == HKExCoin
[L5218]  CALL        call __var_28 := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L4809]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4809]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]  COND FALSE  !(revert)
[L4813]  COND TRUE   DType[this] == HKExCoin
[L4814]  CALL        call __var_13 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s662, _to_s662, _value_s662);
[L4398]              __var_5 := null;
[L4399]  COND FALSE  !(!(_to_s415 != null))
[L4403]  COND FALSE  !(!(_value_s415 <= balances_BasicToken[this][_from_s415]))
[L4407]  COND FALSE  !(!(_value_s415 <= allowed_StandardToken[this][_from_s415][msgsender_MSG]))
[L4411]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s415], _value_s415);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4411]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s415], _value_s415);
[L4412]  COND FALSE  !(revert)
[L4415]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s415];
[L4416]              balances_BasicToken[this][_from_s415] := __var_6;
[L4417]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s415];
[L4418]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s415], _value_s415);
[L3942]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              assert c_s92 >= a_s92;
[L3944]              c_s92 := c_s92;
[L4418]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s415], _value_s415);
[L4419]  COND FALSE  !(revert)
[L4422]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s415];
[L4423]              balances_BasicToken[this][_to_s415] := __var_7;
[L4424]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s415];
[L4425]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s415][msgsender_MSG], _value_s415);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4425]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s415][msgsender_MSG], _value_s415);
[L4426]  COND FALSE  !(revert)
[L4429]              sum_allowed1[_from_s415] := sum_allowed1[_from_s415] - allowed_StandardToken[this][_from_s415][msgsender_MSG];
[L4430]              allowed_StandardToken[this][_from_s415][msgsender_MSG] := __var_8;
[L4431]              sum_allowed1[_from_s415] := sum_allowed1[_from_s415] + allowed_StandardToken[this][_from_s415][msgsender_MSG];
[L4432]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L4433]              __ret_0_ := true;
[L4814]  RET         call __var_13 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s662, _to_s662, _value_s662);
[L4815]  COND FALSE  !(revert)
[L4826]              __ret_0_ := __var_13;
[L5218]  RET         call __var_28 := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5219]  COND FALSE  !(revert)
[L5225]              __ret_0_ := __var_28;
[L2284]  RET         call __ret_0_ := transferFrom~address~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2285]              assume !revert && gas >= 0;
[L8583]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L8688]  RET         call CorralChoice_HKExCoin(this);

Loop:
[L8688]  CALL        call CorralChoice_HKExCoin(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != HKExCoin;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND TRUE   choice == 20
[L8542]              gas := gas - 21000;
[L8543]  COND FALSE  !(gas >= 0)
[L8688]  RET         call CorralChoice_HKExCoin(this);

[2020-11-25 17:44:36,211 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:44:36,211 INFO  L82        PathProgramCache]: Analyzing trace with hash -213961436, now seen corresponding path program 1 times
[2020-11-25 17:44:36,212 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:44:36,236 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:44:36,793 INFO  L134       CoverageAnalysis]: Checked inductivity of 1034 backedges. 34 proven. 0 refuted. 0 times theorem prover too weak. 1000 trivial. 0 not checked.
[2020-11-25 17:44:36,794 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:44:36,794 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [27] imperfect sequences [] total 27
[2020-11-25 17:44:36,794 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:44:36,794 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 28 interpolants.
[2020-11-25 17:44:36,794 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=72, Invalid=684, Unknown=0, NotChecked=0, Total=756
[2020-11-25 17:44:36,794 INFO  L87              Difference]: Start difference. First operand 5838 states and 6674 transitions. cyclomatic complexity: 862 Second operand 28 states.
[2020-11-25 17:44:45,104 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:44:45,104 INFO  L93              Difference]: Finished difference Result 6040 states and 7006 transitions.
[2020-11-25 17:44:45,105 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 31 states. 
[2020-11-25 17:44:45,105 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6040 states and 7006 transitions.
[2020-11-25 17:44:45,115 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 17:44:45,127 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6040 states to 6040 states and 7006 transitions.
[2020-11-25 17:44:45,127 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1129
[2020-11-25 17:44:45,128 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1129
[2020-11-25 17:44:45,128 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6040 states and 7006 transitions.
[2020-11-25 17:44:45,131 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:44:45,131 INFO  L728         BuchiCegarLoop]: Abstraction has 6040 states and 7006 transitions.
[2020-11-25 17:44:45,135 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6040 states and 7006 transitions.
[2020-11-25 17:44:45,163 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6040 to 5946.
[2020-11-25 17:44:45,163 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5946 states.
[2020-11-25 17:44:45,170 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5946 states to 5946 states and 6892 transitions.
[2020-11-25 17:44:45,170 INFO  L751         BuchiCegarLoop]: Abstraction has 5946 states and 6892 transitions.
[2020-11-25 17:44:45,170 INFO  L631         BuchiCegarLoop]: Abstraction has 5946 states and 6892 transitions.
[2020-11-25 17:44:45,170 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 17:44:45,170 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5946 states and 6892 transitions.
[2020-11-25 17:44:45,176 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 17:44:45,176 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:44:45,176 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:44:45,178 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:44:45,178 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_HKExCoin0 := false;
[L2]                 call_transferFrom_HKExCoin0 := false;
[L2]     CALL        call main();
[L8678]              assume null == 0;
[L8679]  CALL        call this := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L8679]  RET         call this := FreshRefGenerator__success();
[L8680]              assume now >= 0;
[L8681]              assume DType[this] == HKExCoin;
[L8682]              assume msgvalue_MSG == 0;
[L8683]              gas := gas - 53000;
[L8684]  CALL        call HKExCoin_HKExCoin(this, msgsender_MSG, msgvalue_MSG);
[L2092]              havoc __exception;
[L2093]              revert := false;
[L2094]  COND FALSE  !(__exception)
[L2126]  CALL        call HKExCoin_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L5079]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5080]  COND FALSE  !(revert)
[L5083]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L5083]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5084]  COND FALSE  !(revert)
[L5087]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L5087]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5088]  COND FALSE  !(revert)
[L5091]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4330]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4330]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4334]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4338]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4339]  COND FALSE  !(revert)
[L4342]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4301]              assume msgsender_MSG != null;
[L4302]              Balance[this] := 0;
[L4303]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4304]              sum_allowed1[this] := 0;
[L4342]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4343]  COND FALSE  !(revert)
[L5091]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5092]  COND FALSE  !(revert)
[L5095]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L5095]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5096]  COND FALSE  !(revert)
[L5099]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4574]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  COND FALSE  !(revert)
[L4578]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]              assume msgsender_MSG != null;
[L4555]              Balance[this] := 0;
[L4556]              paused_Pausable[this] := false;
[L4578]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4579]  COND FALSE  !(revert)
[L5099]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5100]  COND FALSE  !(revert)
[L5103]  CALL        call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4700]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4701]  COND FALSE  !(revert)
[L4704]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4704]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4705]  COND FALSE  !(revert)
[L4708]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4708]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4709]  COND FALSE  !(revert)
[L4712]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4330]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4330]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4334]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4338]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4339]  COND FALSE  !(revert)
[L4342]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4301]              assume msgsender_MSG != null;
[L4302]              Balance[this] := 0;
[L4303]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4304]              sum_allowed1[this] := 0;
[L4342]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4343]  COND FALSE  !(revert)
[L4712]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4713]  COND FALSE  !(revert)
[L4716]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4716]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]  COND FALSE  !(revert)
[L4720]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4574]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  COND FALSE  !(revert)
[L4578]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]              assume msgsender_MSG != null;
[L4555]              Balance[this] := 0;
[L4556]              paused_Pausable[this] := false;
[L4578]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4579]  COND FALSE  !(revert)
[L4720]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4721]  COND FALSE  !(revert)
[L4724]  CALL        call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4661]              assume msgsender_MSG != null;
[L4662]              Balance[this] := 0;
[L4724]  RET         call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4725]  COND FALSE  !(revert)
[L5103]  RET         call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5104]  COND FALSE  !(revert)
[L5107]  CALL        call HKExCoin_HKExCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5013]              assume msgsender_MSG != null;
[L5014]              Balance[this] := 0;
[L5015]              name_HKExCoin[this] := 1400933812;
[L5016]              symbol_HKExCoin[this] := -256252482;
[L5017]              standard_HKExCoin[this] := -941536354;
[L5018]              decimals_HKExCoin[this] := 18;
[L5019]              __var_22 := decimals_HKExCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5020]              INITIAL_SUPPLY_HKExCoin[this] := nonlinearMul(10 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_HKExCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5022]  CALL        call __var_23 := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L5022]  RET         call __var_23 := FreshRefGenerator__success();
[L5023]  COND FALSE  !(revert)
[L5026]              allocations_HKExCoin[this] := __var_23;
[L5028]              alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]] := zeroRefboolArr();
[L5030]              totalSupply__BasicToken[this] := INITIAL_SUPPLY_HKExCoin[this];
[L5031]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L5032]              balances_BasicToken[this][msgsender_MSG] := INITIAL_SUPPLY_HKExCoin[this];
[L5033]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L5034]              assert { :EventEmitted "Transfer_HKExCoin" } true;
[L5107]  RET         call HKExCoin_HKExCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5108]  COND FALSE  !(revert)
[L2126]  RET         call HKExCoin_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG);
[L2127]              assume !revert && gas >= 0;
[L8684]  RET         call HKExCoin_HKExCoin(this, msgsender_MSG, msgvalue_MSG);
[L8685]              assume !revert && gas >= 0;
[L8688]  CALL        call CorralChoice_HKExCoin(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != HKExCoin;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND FALSE  !(choice == 16)
[L8572]  COND FALSE  !(choice == 15)
[L8578]  COND FALSE  !(choice == 14)
[L8585]  COND TRUE   choice == 13
[L8586]              gas := gas - 21000;
[L8587]  COND TRUE   gas >= 0
[L8588]              assume _value_s680 >= 0 && _value_s680 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8589]              assume msgvalue_MSG == 0;
[L8590]  CALL        call __ret_0_approve := approve~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L1834]              havoc __exception;
[L1835]              revert := false;
[L1836]  COND FALSE  !(__exception)
[L1868]  CALL        call __ret_0_ := approve~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L4859]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4859]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4860]  COND FALSE  !(revert)
[L4863]  COND TRUE   DType[this] == HKExCoin
[L4864]  CALL        call __var_15 := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L4448]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s443];
[L4449]              allowed_StandardToken[this][msgsender_MSG][_spender_s443] := _value_s443;
[L4450]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s443];
[L4451]              assert { :EventEmitted "Approval_StandardToken" } true;
[L4452]              __ret_0_ := true;
[L4864]  RET         call __var_15 := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L4865]  COND FALSE  !(revert)
[L4876]              __ret_0_ := __var_15;
[L1868]  RET         call __ret_0_ := approve~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L1869]              assume !revert && gas >= 0;
[L8590]  RET         call __ret_0_approve := approve~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L8688]  RET         call CorralChoice_HKExCoin(this);
[L8688]  CALL        call CorralChoice_HKExCoin(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != HKExCoin;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND FALSE  !(choice == 16)
[L8572]  COND FALSE  !(choice == 15)
[L8578]  COND TRUE   choice == 14
[L8579]              gas := gas - 21000;
[L8580]  COND TRUE   gas >= 0
[L8581]              assume _value_s858 >= 0 && _value_s858 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8582]              assume msgvalue_MSG == 0;
[L8583]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s858 != _to_s858 && ((_value_s858 > balances_BasicToken[this][_from_s858] || _value_s858 > allowed_StandardToken[this][_from_s858][msgsender_MSG]) || balances_BasicToken[this][_to_s858] + _value_s858 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s858 >= 0) && _value_s858 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s858] >= 0) && balances_BasicToken[this][_to_s858] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s858] >= 0) && balances_BasicToken[this][_from_s858] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s858][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s858][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_HKExCoin0 := true;
[L2]                 call_transferFrom_HKExCoin0 := false;
[L2]                 revert := revert_hold;
[L2250]              havoc __exception;
[L2251]              revert := false;
[L2252]  COND FALSE  !(__exception)
[L2284]  CALL        call __ret_0_ := transferFrom~address~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5205]  CALL        call __var_27 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5328]  COND FALSE  !(sub_value_s949 == 0)
[L5332]  COND FALSE  !(balances_BasicToken[this][sender_s949] < sub_value_s949)
[L5336]  COND TRUE   alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s949] == false
[L5337]  CALL        call __var_30 := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L5337]  RET         call __var_30 := FreshRefGenerator__success();
[L5338]  COND FALSE  !(revert)
[L5341]              assume Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == 0;
[L5342]              alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s949] := true;
[L5343]              assume M_int_Ref[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == zerointRefArr();
[L5344]              assume M_Ref_Ref[allocations_HKExCoin[this]][sender_s949] == __var_30;
[L5345]              assume sum[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == 0;
[L5347]  COND FALSE  !(Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == 0)
[L5351]              alllock_sum_s949 := 0;
[L5352]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s949] == false)
[L5363]              j_s949 := 0;
[L5364]  COND FALSE  !(j_s949 < Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]])
[L5400]  CALL        call can_unlock_s949 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][sender_s949], alllock_sum_s949);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5400]  RET         call can_unlock_s949 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][sender_s949], alllock_sum_s949);
[L5401]  COND FALSE  !(revert)
[L5404]              can_unlock_s949 := can_unlock_s949;
[L5405]              __ret_0_ := can_unlock_s949 >= sub_value_s949;
[L5205]  RET         call __var_27 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5206]  COND FALSE  !(revert)
[L5209]  COND FALSE  !(!__var_27)
[L5213]  CALL        call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858);
[L5554]              total_lockamount_s1052 := 0;
[L5555]              total_unlockamount_s1052 := 0;
[L5556]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5567]              j_s1052 := 0;
[L5568]  COND FALSE  !(j_s1052 < Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]])
[L5633]  COND FALSE  !(total_unlockamount_s1052 > 0)
[L5636]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5647]  COND FALSE  !(total_lockamount_s1052 == 0 && Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]] > 0)
[L5213]  RET         call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858);
[L5214]  COND FALSE  !(revert)
[L5217]  COND TRUE   DType[this] == HKExCoin
[L5218]  CALL        call __var_28 := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L4809]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4809]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]  COND FALSE  !(revert)
[L4813]  COND TRUE   DType[this] == HKExCoin
[L4814]  CALL        call __var_13 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s662, _to_s662, _value_s662);
[L4398]              __var_5 := null;
[L4399]  COND FALSE  !(!(_to_s415 != null))
[L4403]  COND FALSE  !(!(_value_s415 <= balances_BasicToken[this][_from_s415]))
[L4407]  COND FALSE  !(!(_value_s415 <= allowed_StandardToken[this][_from_s415][msgsender_MSG]))
[L4411]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s415], _value_s415);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4411]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s415], _value_s415);
[L4412]  COND FALSE  !(revert)
[L4415]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s415];
[L4416]              balances_BasicToken[this][_from_s415] := __var_6;
[L4417]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s415];
[L4418]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s415], _value_s415);
[L3942]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              assert c_s92 >= a_s92;
[L3944]              c_s92 := c_s92;
[L4418]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s415], _value_s415);
[L4419]  COND FALSE  !(revert)
[L4422]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s415];
[L4423]              balances_BasicToken[this][_to_s415] := __var_7;
[L4424]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s415];
[L4425]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s415][msgsender_MSG], _value_s415);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4425]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s415][msgsender_MSG], _value_s415);
[L4426]  COND FALSE  !(revert)
[L4429]              sum_allowed1[_from_s415] := sum_allowed1[_from_s415] - allowed_StandardToken[this][_from_s415][msgsender_MSG];
[L4430]              allowed_StandardToken[this][_from_s415][msgsender_MSG] := __var_8;
[L4431]              sum_allowed1[_from_s415] := sum_allowed1[_from_s415] + allowed_StandardToken[this][_from_s415][msgsender_MSG];
[L4432]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L4433]              __ret_0_ := true;
[L4814]  RET         call __var_13 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s662, _to_s662, _value_s662);
[L4815]  COND FALSE  !(revert)
[L4826]              __ret_0_ := __var_13;
[L5218]  RET         call __var_28 := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5219]  COND FALSE  !(revert)
[L5225]              __ret_0_ := __var_28;
[L2284]  RET         call __ret_0_ := transferFrom~address~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2285]              assume !revert && gas >= 0;
[L8583]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L8688]  RET         call CorralChoice_HKExCoin(this);

Loop:
[L8688]  CALL        call CorralChoice_HKExCoin(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != HKExCoin;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND FALSE  !(choice == 16)
[L8572]  COND FALSE  !(choice == 15)
[L8578]  COND TRUE   choice == 14
[L8579]              gas := gas - 21000;
[L8580]  COND TRUE   gas >= 0
[L8581]              assume _value_s858 >= 0 && _value_s858 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8582]              assume msgvalue_MSG == 0;
[L8583]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s858 != _to_s858 && ((_value_s858 > balances_BasicToken[this][_from_s858] || _value_s858 > allowed_StandardToken[this][_from_s858][msgsender_MSG]) || balances_BasicToken[this][_to_s858] + _value_s858 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s858 >= 0) && _value_s858 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s858] >= 0) && balances_BasicToken[this][_to_s858] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s858] >= 0) && balances_BasicToken[this][_from_s858] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s858][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s858][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_HKExCoin0 := true;
[L2]                 call_transferFrom_HKExCoin0 := false;
[L2]                 revert := revert_hold;
[L2250]              havoc __exception;
[L2251]              revert := false;
[L2252]  COND FALSE  !(__exception)
[L2284]  CALL        call __ret_0_ := transferFrom~address~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5205]  CALL        call __var_27 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5328]  COND FALSE  !(sub_value_s949 == 0)
[L5332]  COND FALSE  !(balances_BasicToken[this][sender_s949] < sub_value_s949)
[L5336]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s949] == false)
[L5347]  COND TRUE   Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == 0
[L5348]              __ret_0_ := true;
[L5205]  RET         call __var_27 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5206]  COND FALSE  !(revert)
[L5209]  COND FALSE  !(!__var_27)
[L5213]  CALL        call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858);
[L5554]              total_lockamount_s1052 := 0;
[L5555]              total_unlockamount_s1052 := 0;
[L5556]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5567]              j_s1052 := 0;
[L5568]  COND FALSE  !(j_s1052 < Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]])
[L5633]  COND FALSE  !(total_unlockamount_s1052 > 0)
[L5636]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5647]  COND FALSE  !(total_lockamount_s1052 == 0 && Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]] > 0)
[L5213]  RET         call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858);
[L5214]  COND FALSE  !(revert)
[L5217]  COND TRUE   DType[this] == HKExCoin
[L5218]  CALL        call __var_28 := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L4809]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4809]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]  COND FALSE  !(revert)
[L4813]  COND TRUE   DType[this] == HKExCoin
[L4814]  CALL        call __var_13 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s662, _to_s662, _value_s662);
[L4398]              __var_5 := null;
[L4399]  COND FALSE  !(!(_to_s415 != null))
[L4403]  COND FALSE  !(!(_value_s415 <= balances_BasicToken[this][_from_s415]))
[L4407]  COND FALSE  !(!(_value_s415 <= allowed_StandardToken[this][_from_s415][msgsender_MSG]))
[L4411]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s415], _value_s415);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4411]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s415], _value_s415);
[L4412]  COND FALSE  !(revert)
[L4415]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s415];
[L4416]              balances_BasicToken[this][_from_s415] := __var_6;
[L4417]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s415];
[L4418]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s415], _value_s415);
[L3942]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              assert c_s92 >= a_s92;
[L3944]              c_s92 := c_s92;
[L4418]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s415], _value_s415);
[L4419]  COND FALSE  !(revert)
[L4422]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s415];
[L4423]              balances_BasicToken[this][_to_s415] := __var_7;
[L4424]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s415];
[L4425]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s415][msgsender_MSG], _value_s415);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4425]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s415][msgsender_MSG], _value_s415);
[L4426]  COND FALSE  !(revert)
[L4429]              sum_allowed1[_from_s415] := sum_allowed1[_from_s415] - allowed_StandardToken[this][_from_s415][msgsender_MSG];
[L4430]              allowed_StandardToken[this][_from_s415][msgsender_MSG] := __var_8;
[L4431]              sum_allowed1[_from_s415] := sum_allowed1[_from_s415] + allowed_StandardToken[this][_from_s415][msgsender_MSG];
[L4432]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L4433]              __ret_0_ := true;
[L4814]  RET         call __var_13 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s662, _to_s662, _value_s662);
[L4815]  COND FALSE  !(revert)
[L4826]              __ret_0_ := __var_13;
[L5218]  RET         call __var_28 := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5219]  COND FALSE  !(revert)
[L5225]              __ret_0_ := __var_28;
[L2284]  RET         call __ret_0_ := transferFrom~address~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2285]              assume !revert && gas >= 0;
[L8583]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L8688]  RET         call CorralChoice_HKExCoin(this);

[2020-11-25 17:44:45,183 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:44:45,183 INFO  L82        PathProgramCache]: Analyzing trace with hash -1958404670, now seen corresponding path program 1 times
[2020-11-25 17:44:45,184 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:44:45,202 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:44:45,350 INFO  L134       CoverageAnalysis]: Checked inductivity of 1042 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1042 trivial. 0 not checked.
[2020-11-25 17:44:45,351 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:44:45,351 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 17:44:45,351 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:44:45,351 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 17:44:45,351 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 17:44:45,351 INFO  L87              Difference]: Start difference. First operand 5946 states and 6892 transitions. cyclomatic complexity: 976 Second operand 3 states.
[2020-11-25 17:44:45,403 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:44:45,403 INFO  L93              Difference]: Finished difference Result 5834 states and 6744 transitions.
[2020-11-25 17:44:45,403 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 17:44:45,403 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5834 states and 6744 transitions.
[2020-11-25 17:44:45,412 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 17:44:45,425 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5834 states to 5834 states and 6744 transitions.
[2020-11-25 17:44:45,425 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1098
[2020-11-25 17:44:45,425 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1098
[2020-11-25 17:44:45,425 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5834 states and 6744 transitions.
[2020-11-25 17:44:45,429 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:44:45,429 INFO  L728         BuchiCegarLoop]: Abstraction has 5834 states and 6744 transitions.
[2020-11-25 17:44:45,433 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5834 states and 6744 transitions.
[2020-11-25 17:44:45,460 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5834 to 5834.
[2020-11-25 17:44:45,460 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5834 states.
[2020-11-25 17:44:45,467 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5834 states to 5834 states and 6744 transitions.
[2020-11-25 17:44:45,467 INFO  L751         BuchiCegarLoop]: Abstraction has 5834 states and 6744 transitions.
[2020-11-25 17:44:45,467 INFO  L631         BuchiCegarLoop]: Abstraction has 5834 states and 6744 transitions.
[2020-11-25 17:44:45,467 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 17:44:45,467 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5834 states and 6744 transitions.
[2020-11-25 17:44:45,473 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 17:44:45,473 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:44:45,473 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:44:45,475 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:44:45,475 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_HKExCoin0 := false;
[L2]                 call_transferFrom_HKExCoin0 := false;
[L2]     CALL        call main();
[L8678]              assume null == 0;
[L8679]  CALL        call this := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L8679]  RET         call this := FreshRefGenerator__success();
[L8680]              assume now >= 0;
[L8681]              assume DType[this] == HKExCoin;
[L8682]              assume msgvalue_MSG == 0;
[L8683]              gas := gas - 53000;
[L8684]  CALL        call HKExCoin_HKExCoin(this, msgsender_MSG, msgvalue_MSG);
[L2092]              havoc __exception;
[L2093]              revert := false;
[L2094]  COND FALSE  !(__exception)
[L2126]  CALL        call HKExCoin_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L5079]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5080]  COND FALSE  !(revert)
[L5083]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L5083]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5084]  COND FALSE  !(revert)
[L5087]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L5087]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5088]  COND FALSE  !(revert)
[L5091]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4330]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4330]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4334]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4338]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4339]  COND FALSE  !(revert)
[L4342]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4301]              assume msgsender_MSG != null;
[L4302]              Balance[this] := 0;
[L4303]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4304]              sum_allowed1[this] := 0;
[L4342]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4343]  COND FALSE  !(revert)
[L5091]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5092]  COND FALSE  !(revert)
[L5095]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L5095]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5096]  COND FALSE  !(revert)
[L5099]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4574]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  COND FALSE  !(revert)
[L4578]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]              assume msgsender_MSG != null;
[L4555]              Balance[this] := 0;
[L4556]              paused_Pausable[this] := false;
[L4578]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4579]  COND FALSE  !(revert)
[L5099]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5100]  COND FALSE  !(revert)
[L5103]  CALL        call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4700]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4701]  COND FALSE  !(revert)
[L4704]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4704]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4705]  COND FALSE  !(revert)
[L4708]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4708]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4709]  COND FALSE  !(revert)
[L4712]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4330]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4330]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4334]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4338]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4339]  COND FALSE  !(revert)
[L4342]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4301]              assume msgsender_MSG != null;
[L4302]              Balance[this] := 0;
[L4303]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4304]              sum_allowed1[this] := 0;
[L4342]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4343]  COND FALSE  !(revert)
[L4712]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4713]  COND FALSE  !(revert)
[L4716]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4716]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]  COND FALSE  !(revert)
[L4720]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4574]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  COND FALSE  !(revert)
[L4578]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]              assume msgsender_MSG != null;
[L4555]              Balance[this] := 0;
[L4556]              paused_Pausable[this] := false;
[L4578]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4579]  COND FALSE  !(revert)
[L4720]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4721]  COND FALSE  !(revert)
[L4724]  CALL        call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4661]              assume msgsender_MSG != null;
[L4662]              Balance[this] := 0;
[L4724]  RET         call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4725]  COND FALSE  !(revert)
[L5103]  RET         call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5104]  COND FALSE  !(revert)
[L5107]  CALL        call HKExCoin_HKExCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5013]              assume msgsender_MSG != null;
[L5014]              Balance[this] := 0;
[L5015]              name_HKExCoin[this] := 1400933812;
[L5016]              symbol_HKExCoin[this] := -256252482;
[L5017]              standard_HKExCoin[this] := -941536354;
[L5018]              decimals_HKExCoin[this] := 18;
[L5019]              __var_22 := decimals_HKExCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5020]              INITIAL_SUPPLY_HKExCoin[this] := nonlinearMul(10 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_HKExCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5022]  CALL        call __var_23 := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L5022]  RET         call __var_23 := FreshRefGenerator__success();
[L5023]  COND FALSE  !(revert)
[L5026]              allocations_HKExCoin[this] := __var_23;
[L5028]              alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]] := zeroRefboolArr();
[L5030]              totalSupply__BasicToken[this] := INITIAL_SUPPLY_HKExCoin[this];
[L5031]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L5032]              balances_BasicToken[this][msgsender_MSG] := INITIAL_SUPPLY_HKExCoin[this];
[L5033]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L5034]              assert { :EventEmitted "Transfer_HKExCoin" } true;
[L5107]  RET         call HKExCoin_HKExCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5108]  COND FALSE  !(revert)
[L2126]  RET         call HKExCoin_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG);
[L2127]              assume !revert && gas >= 0;
[L8684]  RET         call HKExCoin_HKExCoin(this, msgsender_MSG, msgvalue_MSG);
[L8685]              assume !revert && gas >= 0;
[L8688]  CALL        call CorralChoice_HKExCoin(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != HKExCoin;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND FALSE  !(choice == 16)
[L8572]  COND FALSE  !(choice == 15)
[L8578]  COND TRUE   choice == 14
[L8579]              gas := gas - 21000;
[L8580]  COND TRUE   gas >= 0
[L8581]              assume _value_s858 >= 0 && _value_s858 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8582]              assume msgvalue_MSG == 0;
[L8583]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((_from_s858 != _to_s858 && ((_value_s858 > balances_BasicToken[this][_from_s858] || _value_s858 > allowed_StandardToken[this][_from_s858][msgsender_MSG]) || balances_BasicToken[this][_to_s858] + _value_s858 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s858 >= 0) && _value_s858 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s858] >= 0) && balances_BasicToken[this][_to_s858] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s858] >= 0) && balances_BasicToken[this][_from_s858] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s858][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s858][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L2250]              havoc __exception;
[L2251]              revert := false;
[L2252]  COND FALSE  !(__exception)
[L2284]  CALL        call __ret_0_ := transferFrom~address~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5205]  CALL        call __var_27 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5328]  COND FALSE  !(sub_value_s949 == 0)
[L5332]  COND FALSE  !(balances_BasicToken[this][sender_s949] < sub_value_s949)
[L5336]  COND TRUE   alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s949] == false
[L5337]  CALL        call __var_30 := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L5337]  RET         call __var_30 := FreshRefGenerator__success();
[L5338]  COND FALSE  !(revert)
[L5341]              assume Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == 0;
[L5342]              alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s949] := true;
[L5343]              assume M_int_Ref[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == zerointRefArr();
[L5344]              assume M_Ref_Ref[allocations_HKExCoin[this]][sender_s949] == __var_30;
[L5345]              assume sum[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == 0;
[L5347]  COND TRUE   Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == 0
[L5348]              __ret_0_ := true;
[L5205]  RET         call __var_27 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5206]  COND FALSE  !(revert)
[L5209]  COND FALSE  !(!__var_27)
[L5213]  CALL        call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858);
[L5554]              total_lockamount_s1052 := 0;
[L5555]              total_unlockamount_s1052 := 0;
[L5556]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5567]              j_s1052 := 0;
[L5568]  COND FALSE  !(j_s1052 < Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]])
[L5633]  COND FALSE  !(total_unlockamount_s1052 > 0)
[L5636]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5647]  COND FALSE  !(total_lockamount_s1052 == 0 && Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]] > 0)
[L5213]  RET         call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858);
[L5214]  COND FALSE  !(revert)
[L5217]  COND TRUE   DType[this] == HKExCoin
[L5218]  CALL        call __var_28 := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L4809]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4809]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]  COND FALSE  !(revert)
[L4813]  COND TRUE   DType[this] == HKExCoin
[L4814]  CALL        call __var_13 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s662, _to_s662, _value_s662);
[L4398]              __var_5 := null;
[L4399]  COND FALSE  !(!(_to_s415 != null))
[L4403]  COND FALSE  !(!(_value_s415 <= balances_BasicToken[this][_from_s415]))
[L4407]  COND FALSE  !(!(_value_s415 <= allowed_StandardToken[this][_from_s415][msgsender_MSG]))
[L4411]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s415], _value_s415);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4411]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s415], _value_s415);
[L4412]  COND FALSE  !(revert)
[L4415]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s415];
[L4416]              balances_BasicToken[this][_from_s415] := __var_6;
[L4417]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s415];
[L4418]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s415], _value_s415);
[L3942]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              assert c_s92 >= a_s92;
[L3944]              c_s92 := c_s92;
[L4418]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s415], _value_s415);
[L4419]  COND FALSE  !(revert)
[L4422]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s415];
[L4423]              balances_BasicToken[this][_to_s415] := __var_7;
[L4424]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s415];
[L4425]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s415][msgsender_MSG], _value_s415);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4425]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s415][msgsender_MSG], _value_s415);
[L4426]  COND FALSE  !(revert)
[L4429]              sum_allowed1[_from_s415] := sum_allowed1[_from_s415] - allowed_StandardToken[this][_from_s415][msgsender_MSG];
[L4430]              allowed_StandardToken[this][_from_s415][msgsender_MSG] := __var_8;
[L4431]              sum_allowed1[_from_s415] := sum_allowed1[_from_s415] + allowed_StandardToken[this][_from_s415][msgsender_MSG];
[L4432]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L4433]              __ret_0_ := true;
[L4814]  RET         call __var_13 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s662, _to_s662, _value_s662);
[L4815]  COND FALSE  !(revert)
[L4826]              __ret_0_ := __var_13;
[L5218]  RET         call __var_28 := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5219]  COND FALSE  !(revert)
[L5225]              __ret_0_ := __var_28;
[L2284]  RET         call __ret_0_ := transferFrom~address~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2285]              assume !revert && gas >= 0;
[L8583]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L8688]  RET         call CorralChoice_HKExCoin(this);
[L8688]  CALL        call CorralChoice_HKExCoin(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != HKExCoin;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND FALSE  !(choice == 16)
[L8572]  COND FALSE  !(choice == 15)
[L8578]  COND TRUE   choice == 14
[L8579]              gas := gas - 21000;
[L8580]  COND TRUE   gas >= 0
[L8581]              assume _value_s858 >= 0 && _value_s858 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8582]              assume msgvalue_MSG == 0;
[L8583]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s858 != _to_s858 && ((_value_s858 > balances_BasicToken[this][_from_s858] || _value_s858 > allowed_StandardToken[this][_from_s858][msgsender_MSG]) || balances_BasicToken[this][_to_s858] + _value_s858 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s858 >= 0) && _value_s858 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s858] >= 0) && balances_BasicToken[this][_to_s858] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s858] >= 0) && balances_BasicToken[this][_from_s858] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s858][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s858][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_HKExCoin0 := true;
[L2]                 call_transferFrom_HKExCoin0 := false;
[L2]                 revert := revert_hold;
[L2250]              havoc __exception;
[L2251]              revert := false;
[L2252]  COND FALSE  !(__exception)
[L2284]  CALL        call __ret_0_ := transferFrom~address~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5205]  CALL        call __var_27 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5328]  COND FALSE  !(sub_value_s949 == 0)
[L5332]  COND FALSE  !(balances_BasicToken[this][sender_s949] < sub_value_s949)
[L5336]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s949] == false)
[L5347]  COND TRUE   Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == 0
[L5348]              __ret_0_ := true;
[L5205]  RET         call __var_27 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5206]  COND FALSE  !(revert)
[L5209]  COND FALSE  !(!__var_27)
[L5213]  CALL        call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858);
[L5554]              total_lockamount_s1052 := 0;
[L5555]              total_unlockamount_s1052 := 0;
[L5556]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5567]              j_s1052 := 0;
[L5568]  COND FALSE  !(j_s1052 < Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]])
[L5633]  COND FALSE  !(total_unlockamount_s1052 > 0)
[L5636]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5647]  COND FALSE  !(total_lockamount_s1052 == 0 && Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]] > 0)
[L5213]  RET         call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858);
[L5214]  COND FALSE  !(revert)
[L5217]  COND TRUE   DType[this] == HKExCoin
[L5218]  CALL        call __var_28 := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L4809]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4809]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]  COND FALSE  !(revert)
[L4813]  COND TRUE   DType[this] == HKExCoin
[L4814]  CALL        call __var_13 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s662, _to_s662, _value_s662);
[L4398]              __var_5 := null;
[L4399]  COND FALSE  !(!(_to_s415 != null))
[L4403]  COND FALSE  !(!(_value_s415 <= balances_BasicToken[this][_from_s415]))
[L4407]  COND FALSE  !(!(_value_s415 <= allowed_StandardToken[this][_from_s415][msgsender_MSG]))
[L4411]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s415], _value_s415);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4411]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s415], _value_s415);
[L4412]  COND FALSE  !(revert)
[L4415]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s415];
[L4416]              balances_BasicToken[this][_from_s415] := __var_6;
[L4417]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s415];
[L4418]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s415], _value_s415);
[L3942]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              assert c_s92 >= a_s92;
[L3944]              c_s92 := c_s92;
[L4418]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s415], _value_s415);
[L4419]  COND FALSE  !(revert)
[L4422]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s415];
[L4423]              balances_BasicToken[this][_to_s415] := __var_7;
[L4424]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s415];
[L4425]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s415][msgsender_MSG], _value_s415);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4425]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s415][msgsender_MSG], _value_s415);
[L4426]  COND FALSE  !(revert)
[L4429]              sum_allowed1[_from_s415] := sum_allowed1[_from_s415] - allowed_StandardToken[this][_from_s415][msgsender_MSG];
[L4430]              allowed_StandardToken[this][_from_s415][msgsender_MSG] := __var_8;
[L4431]              sum_allowed1[_from_s415] := sum_allowed1[_from_s415] + allowed_StandardToken[this][_from_s415][msgsender_MSG];
[L4432]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L4433]              __ret_0_ := true;
[L4814]  RET         call __var_13 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s662, _to_s662, _value_s662);
[L4815]  COND FALSE  !(revert)
[L4826]              __ret_0_ := __var_13;
[L5218]  RET         call __var_28 := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5219]  COND FALSE  !(revert)
[L5225]              __ret_0_ := __var_28;
[L2284]  RET         call __ret_0_ := transferFrom~address~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2285]              assume !revert && gas >= 0;
[L8583]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L8688]  RET         call CorralChoice_HKExCoin(this);

Loop:
[L8688]  CALL        call CorralChoice_HKExCoin(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != HKExCoin;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND FALSE  !(choice == 16)
[L8572]  COND FALSE  !(choice == 15)
[L8578]  COND TRUE   choice == 14
[L8579]              gas := gas - 21000;
[L8580]  COND TRUE   gas >= 0
[L8581]              assume _value_s858 >= 0 && _value_s858 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8582]              assume msgvalue_MSG == 0;
[L8583]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s858 != _to_s858 && ((_value_s858 > balances_BasicToken[this][_from_s858] || _value_s858 > allowed_StandardToken[this][_from_s858][msgsender_MSG]) || balances_BasicToken[this][_to_s858] + _value_s858 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s858 >= 0) && _value_s858 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s858] >= 0) && balances_BasicToken[this][_to_s858] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s858] >= 0) && balances_BasicToken[this][_from_s858] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s858][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s858][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_HKExCoin0 := true;
[L2]                 call_transferFrom_HKExCoin0 := false;
[L2]                 revert := revert_hold;
[L2250]              havoc __exception;
[L2251]              revert := false;
[L2252]  COND FALSE  !(__exception)
[L2284]  CALL        call __ret_0_ := transferFrom~address~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5205]  CALL        call __var_27 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5328]  COND FALSE  !(sub_value_s949 == 0)
[L5332]  COND FALSE  !(balances_BasicToken[this][sender_s949] < sub_value_s949)
[L5336]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s949] == false)
[L5347]  COND TRUE   Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == 0
[L5348]              __ret_0_ := true;
[L5205]  RET         call __var_27 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5206]  COND FALSE  !(revert)
[L5209]  COND FALSE  !(!__var_27)
[L5213]  CALL        call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858);
[L5554]              total_lockamount_s1052 := 0;
[L5555]              total_unlockamount_s1052 := 0;
[L5556]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5567]              j_s1052 := 0;
[L5568]  COND FALSE  !(j_s1052 < Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]])
[L5633]  COND FALSE  !(total_unlockamount_s1052 > 0)
[L5636]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5647]  COND FALSE  !(total_lockamount_s1052 == 0 && Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]] > 0)
[L5213]  RET         call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858);
[L5214]  COND FALSE  !(revert)
[L5217]  COND TRUE   DType[this] == HKExCoin
[L5218]  CALL        call __var_28 := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L4809]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4809]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]  COND FALSE  !(revert)
[L4813]  COND TRUE   DType[this] == HKExCoin
[L4814]  CALL        call __var_13 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s662, _to_s662, _value_s662);
[L4398]              __var_5 := null;
[L4399]  COND FALSE  !(!(_to_s415 != null))
[L4403]  COND FALSE  !(!(_value_s415 <= balances_BasicToken[this][_from_s415]))
[L4407]  COND FALSE  !(!(_value_s415 <= allowed_StandardToken[this][_from_s415][msgsender_MSG]))
[L4411]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s415], _value_s415);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4411]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s415], _value_s415);
[L4412]  COND FALSE  !(revert)
[L4415]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s415];
[L4416]              balances_BasicToken[this][_from_s415] := __var_6;
[L4417]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s415];
[L4418]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s415], _value_s415);
[L3942]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              assert c_s92 >= a_s92;
[L3944]              c_s92 := c_s92;
[L4418]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s415], _value_s415);
[L4419]  COND FALSE  !(revert)
[L4422]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s415];
[L4423]              balances_BasicToken[this][_to_s415] := __var_7;
[L4424]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s415];
[L4425]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s415][msgsender_MSG], _value_s415);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4425]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s415][msgsender_MSG], _value_s415);
[L4426]  COND FALSE  !(revert)
[L4429]              sum_allowed1[_from_s415] := sum_allowed1[_from_s415] - allowed_StandardToken[this][_from_s415][msgsender_MSG];
[L4430]              allowed_StandardToken[this][_from_s415][msgsender_MSG] := __var_8;
[L4431]              sum_allowed1[_from_s415] := sum_allowed1[_from_s415] + allowed_StandardToken[this][_from_s415][msgsender_MSG];
[L4432]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L4433]              __ret_0_ := true;
[L4814]  RET         call __var_13 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s662, _to_s662, _value_s662);
[L4815]  COND FALSE  !(revert)
[L4826]              __ret_0_ := __var_13;
[L5218]  RET         call __var_28 := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5219]  COND FALSE  !(revert)
[L5225]              __ret_0_ := __var_28;
[L2284]  RET         call __ret_0_ := transferFrom~address~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2285]              assume !revert && gas >= 0;
[L8583]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L8688]  RET         call CorralChoice_HKExCoin(this);

[2020-11-25 17:44:45,480 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:44:45,480 INFO  L82        PathProgramCache]: Analyzing trace with hash 244531358, now seen corresponding path program 1 times
[2020-11-25 17:44:45,481 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:44:45,505 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:44:45,810 INFO  L134       CoverageAnalysis]: Checked inductivity of 1059 backedges. 11 proven. 75 refuted. 0 times theorem prover too weak. 973 trivial. 0 not checked.
[2020-11-25 17:44:45,810 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 17:44:45,810 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [20] total 20
[2020-11-25 17:44:45,810 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:44:45,811 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 20 interpolants.
[2020-11-25 17:44:45,811 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=41, Invalid=339, Unknown=0, NotChecked=0, Total=380
[2020-11-25 17:44:45,811 INFO  L87              Difference]: Start difference. First operand 5834 states and 6744 transitions. cyclomatic complexity: 938 Second operand 20 states.
[2020-11-25 17:44:49,821 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:44:49,821 INFO  L93              Difference]: Finished difference Result 5857 states and 6787 transitions.
[2020-11-25 17:44:49,821 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 21 states. 
[2020-11-25 17:44:49,821 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5857 states and 6787 transitions.
[2020-11-25 17:44:49,832 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 17:44:49,844 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5857 states to 5857 states and 6787 transitions.
[2020-11-25 17:44:49,844 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1111
[2020-11-25 17:44:49,845 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1111
[2020-11-25 17:44:49,845 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5857 states and 6787 transitions.
[2020-11-25 17:44:49,848 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:44:49,848 INFO  L728         BuchiCegarLoop]: Abstraction has 5857 states and 6787 transitions.
[2020-11-25 17:44:49,852 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5857 states and 6787 transitions.
[2020-11-25 17:44:49,875 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5857 to 5820.
[2020-11-25 17:44:49,876 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5820 states.
[2020-11-25 17:44:49,907 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5820 states to 5820 states and 6708 transitions.
[2020-11-25 17:44:49,907 INFO  L751         BuchiCegarLoop]: Abstraction has 5820 states and 6708 transitions.
[2020-11-25 17:44:49,907 INFO  L631         BuchiCegarLoop]: Abstraction has 5820 states and 6708 transitions.
[2020-11-25 17:44:49,907 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 17:44:49,908 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5820 states and 6708 transitions.
[2020-11-25 17:44:49,913 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 17:44:49,913 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:44:49,913 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:44:49,914 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:44:49,914 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_HKExCoin0 := false;
[L2]                 call_transferFrom_HKExCoin0 := false;
[L2]     CALL        call main();
[L8678]              assume null == 0;
[L8679]  CALL        call this := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L8679]  RET         call this := FreshRefGenerator__success();
[L8680]              assume now >= 0;
[L8681]              assume DType[this] == HKExCoin;
[L8682]              assume msgvalue_MSG == 0;
[L8683]              gas := gas - 53000;
[L8684]  CALL        call HKExCoin_HKExCoin(this, msgsender_MSG, msgvalue_MSG);
[L2092]              havoc __exception;
[L2093]              revert := false;
[L2094]  COND FALSE  !(__exception)
[L2126]  CALL        call HKExCoin_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L5079]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5080]  COND FALSE  !(revert)
[L5083]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L5083]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5084]  COND FALSE  !(revert)
[L5087]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L5087]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5088]  COND FALSE  !(revert)
[L5091]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4330]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4330]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4334]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4338]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4339]  COND FALSE  !(revert)
[L4342]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4301]              assume msgsender_MSG != null;
[L4302]              Balance[this] := 0;
[L4303]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4304]              sum_allowed1[this] := 0;
[L4342]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4343]  COND FALSE  !(revert)
[L5091]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5092]  COND FALSE  !(revert)
[L5095]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L5095]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5096]  COND FALSE  !(revert)
[L5099]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4574]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  COND FALSE  !(revert)
[L4578]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]              assume msgsender_MSG != null;
[L4555]              Balance[this] := 0;
[L4556]              paused_Pausable[this] := false;
[L4578]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4579]  COND FALSE  !(revert)
[L5099]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5100]  COND FALSE  !(revert)
[L5103]  CALL        call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4700]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4701]  COND FALSE  !(revert)
[L4704]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4704]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4705]  COND FALSE  !(revert)
[L4708]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4708]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4709]  COND FALSE  !(revert)
[L4712]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4330]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4330]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4334]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4338]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4339]  COND FALSE  !(revert)
[L4342]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4301]              assume msgsender_MSG != null;
[L4302]              Balance[this] := 0;
[L4303]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4304]              sum_allowed1[this] := 0;
[L4342]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4343]  COND FALSE  !(revert)
[L4712]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4713]  COND FALSE  !(revert)
[L4716]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4716]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]  COND FALSE  !(revert)
[L4720]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4574]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  COND FALSE  !(revert)
[L4578]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]              assume msgsender_MSG != null;
[L4555]              Balance[this] := 0;
[L4556]              paused_Pausable[this] := false;
[L4578]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4579]  COND FALSE  !(revert)
[L4720]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4721]  COND FALSE  !(revert)
[L4724]  CALL        call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4661]              assume msgsender_MSG != null;
[L4662]              Balance[this] := 0;
[L4724]  RET         call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4725]  COND FALSE  !(revert)
[L5103]  RET         call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5104]  COND FALSE  !(revert)
[L5107]  CALL        call HKExCoin_HKExCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5013]              assume msgsender_MSG != null;
[L5014]              Balance[this] := 0;
[L5015]              name_HKExCoin[this] := 1400933812;
[L5016]              symbol_HKExCoin[this] := -256252482;
[L5017]              standard_HKExCoin[this] := -941536354;
[L5018]              decimals_HKExCoin[this] := 18;
[L5019]              __var_22 := decimals_HKExCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5020]              INITIAL_SUPPLY_HKExCoin[this] := nonlinearMul(10 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_HKExCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5022]  CALL        call __var_23 := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L5022]  RET         call __var_23 := FreshRefGenerator__success();
[L5023]  COND FALSE  !(revert)
[L5026]              allocations_HKExCoin[this] := __var_23;
[L5028]              alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]] := zeroRefboolArr();
[L5030]              totalSupply__BasicToken[this] := INITIAL_SUPPLY_HKExCoin[this];
[L5031]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L5032]              balances_BasicToken[this][msgsender_MSG] := INITIAL_SUPPLY_HKExCoin[this];
[L5033]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L5034]              assert { :EventEmitted "Transfer_HKExCoin" } true;
[L5107]  RET         call HKExCoin_HKExCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5108]  COND FALSE  !(revert)
[L2126]  RET         call HKExCoin_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG);
[L2127]              assume !revert && gas >= 0;
[L8684]  RET         call HKExCoin_HKExCoin(this, msgsender_MSG, msgvalue_MSG);
[L8685]              assume !revert && gas >= 0;
[L8688]  CALL        call CorralChoice_HKExCoin(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != HKExCoin;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND FALSE  !(choice == 16)
[L8572]  COND FALSE  !(choice == 15)
[L8578]  COND FALSE  !(choice == 14)
[L8585]  COND TRUE   choice == 13
[L8586]              gas := gas - 21000;
[L8587]  COND TRUE   gas >= 0
[L8588]              assume _value_s680 >= 0 && _value_s680 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8589]              assume msgvalue_MSG == 0;
[L8590]  CALL        call __ret_0_approve := approve~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L1834]              havoc __exception;
[L1835]              revert := false;
[L1836]  COND FALSE  !(__exception)
[L1868]  CALL        call __ret_0_ := approve~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L4859]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4859]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4860]  COND FALSE  !(revert)
[L4863]  COND TRUE   DType[this] == HKExCoin
[L4864]  CALL        call __var_15 := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L4448]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s443];
[L4449]              allowed_StandardToken[this][msgsender_MSG][_spender_s443] := _value_s443;
[L4450]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s443];
[L4451]              assert { :EventEmitted "Approval_StandardToken" } true;
[L4452]              __ret_0_ := true;
[L4864]  RET         call __var_15 := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L4865]  COND FALSE  !(revert)
[L4876]              __ret_0_ := __var_15;
[L1868]  RET         call __ret_0_ := approve~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L1869]              assume !revert && gas >= 0;
[L8590]  RET         call __ret_0_approve := approve~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L8688]  RET         call CorralChoice_HKExCoin(this);
[L8688]  CALL        call CorralChoice_HKExCoin(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != HKExCoin;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND TRUE   choice == 16
[L8566]              gas := gas - 21000;
[L8567]  COND TRUE   gas >= 0
[L8568]              assume _value_s828 >= 0 && _value_s828 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8569]              assume msgvalue_MSG == 0;
[L8570]  CALL        call __ret_0_transfer := transfer~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L2170]              havoc __exception;
[L2171]              revert := false;
[L2172]  COND FALSE  !(__exception)
[L2204]  CALL        call __ret_0_ := transfer~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L5147]  CALL        call __var_24 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s828);
[L5328]  COND TRUE   sub_value_s949 == 0
[L5329]              __ret_0_ := false;
[L5147]  RET         call __var_24 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s828);
[L5148]  COND FALSE  !(revert)
[L5151]  COND FALSE  !(!__var_24)
[L5155]  CALL        call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5554]              total_lockamount_s1052 := 0;
[L5555]              total_unlockamount_s1052 := 0;
[L5556]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5567]              j_s1052 := 0;
[L5568]  COND FALSE  !(j_s1052 < Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]])
[L5633]  COND FALSE  !(total_unlockamount_s1052 > 0)
[L5636]  COND TRUE   alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false
[L5637]  CALL        call __var_39 := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L5637]  RET         call __var_39 := FreshRefGenerator__success();
[L5638]  COND FALSE  !(revert)
[L5641]              assume Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]] == 0;
[L5642]              alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] := true;
[L5643]              assume M_int_Ref[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]] == zerointRefArr();
[L5644]              assume M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052] == __var_39;
[L5645]              assume sum[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]] == 0;
[L5647]  COND FALSE  !(total_lockamount_s1052 == 0 && Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]] > 0)
[L5155]  RET         call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5156]  COND FALSE  !(revert)
[L5159]  COND TRUE   DType[this] == HKExCoin
[L5160]  CALL        call __var_25 := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L4759]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4759]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  COND TRUE   DType[this] == HKExCoin
[L4764]  CALL        call __var_11 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s641, _value_s641);
[L4208]              __var_2 := null;
[L4209]  COND FALSE  !(!(_to_s266 != null))
[L4213]  COND FALSE  !(!(_value_s266 <= balances_BasicToken[this][msgsender_MSG]))
[L4217]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s266);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4217]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s266);
[L4218]  COND FALSE  !(revert)
[L4221]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L4222]              balances_BasicToken[this][msgsender_MSG] := __var_3;
[L4223]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L4224]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s266], _value_s266);
[L3942]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              assert c_s92 >= a_s92;
[L3944]              c_s92 := c_s92;
[L4224]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s266], _value_s266);
[L4225]  COND FALSE  !(revert)
[L4228]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s266];
[L4229]              balances_BasicToken[this][_to_s266] := __var_4;
[L4230]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s266];
[L4231]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L4232]              __ret_0_ := true;
[L4764]  RET         call __var_11 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s641, _value_s641);
[L4765]  COND FALSE  !(revert)
[L4776]              __ret_0_ := __var_11;
[L5160]  RET         call __var_25 := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L5161]  COND FALSE  !(revert)
[L5167]              __ret_0_ := __var_25;
[L2204]  RET         call __ret_0_ := transfer~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L2205]              assume !revert && gas >= 0;
[L8570]  RET         call __ret_0_transfer := transfer~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L8688]  RET         call CorralChoice_HKExCoin(this);
[L8688]  CALL        call CorralChoice_HKExCoin(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != HKExCoin;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND FALSE  !(choice == 16)
[L8572]  COND FALSE  !(choice == 15)
[L8578]  COND TRUE   choice == 14
[L8579]              gas := gas - 21000;
[L8580]  COND TRUE   gas >= 0
[L8581]              assume _value_s858 >= 0 && _value_s858 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8582]              assume msgvalue_MSG == 0;
[L8583]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s858 != _to_s858 && ((_value_s858 > balances_BasicToken[this][_from_s858] || _value_s858 > allowed_StandardToken[this][_from_s858][msgsender_MSG]) || balances_BasicToken[this][_to_s858] + _value_s858 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s858 >= 0) && _value_s858 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s858] >= 0) && balances_BasicToken[this][_to_s858] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s858] >= 0) && balances_BasicToken[this][_from_s858] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s858][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s858][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_HKExCoin0 := true;
[L2]                 call_transferFrom_HKExCoin0 := false;
[L2]                 revert := revert_hold;
[L2250]              havoc __exception;
[L2251]              revert := false;
[L2252]  COND FALSE  !(__exception)
[L2284]  CALL        call __ret_0_ := transferFrom~address~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5205]  CALL        call __var_27 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5328]  COND FALSE  !(sub_value_s949 == 0)
[L5332]  COND FALSE  !(balances_BasicToken[this][sender_s949] < sub_value_s949)
[L5336]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s949] == false)
[L5347]  COND TRUE   Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == 0
[L5348]              __ret_0_ := true;
[L5205]  RET         call __var_27 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5206]  COND FALSE  !(revert)
[L5209]  COND FALSE  !(!__var_27)
[L5213]  CALL        call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858);
[L5554]              total_lockamount_s1052 := 0;
[L5555]              total_unlockamount_s1052 := 0;
[L5556]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5567]              j_s1052 := 0;
[L5568]  COND FALSE  !(j_s1052 < Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]])
[L5633]  COND FALSE  !(total_unlockamount_s1052 > 0)
[L5636]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5647]  COND FALSE  !(total_lockamount_s1052 == 0 && Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]] > 0)
[L5213]  RET         call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858);
[L5214]  COND FALSE  !(revert)
[L5217]  COND TRUE   DType[this] == HKExCoin
[L5218]  CALL        call __var_28 := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L4809]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4809]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]  COND FALSE  !(revert)
[L4813]  COND TRUE   DType[this] == HKExCoin
[L4814]  CALL        call __var_13 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s662, _to_s662, _value_s662);
[L4398]              __var_5 := null;
[L4399]  COND FALSE  !(!(_to_s415 != null))
[L4403]  COND FALSE  !(!(_value_s415 <= balances_BasicToken[this][_from_s415]))
[L4407]  COND FALSE  !(!(_value_s415 <= allowed_StandardToken[this][_from_s415][msgsender_MSG]))
[L4411]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s415], _value_s415);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4411]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s415], _value_s415);
[L4412]  COND FALSE  !(revert)
[L4415]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s415];
[L4416]              balances_BasicToken[this][_from_s415] := __var_6;
[L4417]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s415];
[L4418]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s415], _value_s415);
[L3942]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              assert c_s92 >= a_s92;
[L3944]              c_s92 := c_s92;
[L4418]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s415], _value_s415);
[L4419]  COND FALSE  !(revert)
[L4422]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s415];
[L4423]              balances_BasicToken[this][_to_s415] := __var_7;
[L4424]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s415];
[L4425]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s415][msgsender_MSG], _value_s415);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4425]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s415][msgsender_MSG], _value_s415);
[L4426]  COND FALSE  !(revert)
[L4429]              sum_allowed1[_from_s415] := sum_allowed1[_from_s415] - allowed_StandardToken[this][_from_s415][msgsender_MSG];
[L4430]              allowed_StandardToken[this][_from_s415][msgsender_MSG] := __var_8;
[L4431]              sum_allowed1[_from_s415] := sum_allowed1[_from_s415] + allowed_StandardToken[this][_from_s415][msgsender_MSG];
[L4432]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L4433]              __ret_0_ := true;
[L4814]  RET         call __var_13 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s662, _to_s662, _value_s662);
[L4815]  COND FALSE  !(revert)
[L4826]              __ret_0_ := __var_13;
[L5218]  RET         call __var_28 := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5219]  COND FALSE  !(revert)
[L5225]              __ret_0_ := __var_28;
[L2284]  RET         call __ret_0_ := transferFrom~address~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2285]              assume !revert && gas >= 0;
[L8583]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L8688]  RET         call CorralChoice_HKExCoin(this);

Loop:
[L8688]  CALL        call CorralChoice_HKExCoin(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != HKExCoin;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND FALSE  !(choice == 16)
[L8572]  COND FALSE  !(choice == 15)
[L8578]  COND TRUE   choice == 14
[L8579]              gas := gas - 21000;
[L8580]  COND TRUE   gas >= 0
[L8581]              assume _value_s858 >= 0 && _value_s858 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8582]              assume msgvalue_MSG == 0;
[L8583]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s858 != _to_s858 && ((_value_s858 > balances_BasicToken[this][_from_s858] || _value_s858 > allowed_StandardToken[this][_from_s858][msgsender_MSG]) || balances_BasicToken[this][_to_s858] + _value_s858 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s858 >= 0) && _value_s858 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s858] >= 0) && balances_BasicToken[this][_to_s858] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s858] >= 0) && balances_BasicToken[this][_from_s858] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s858][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s858][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_HKExCoin0 := true;
[L2]                 call_transferFrom_HKExCoin0 := false;
[L2]                 revert := revert_hold;
[L2250]              havoc __exception;
[L2251]              revert := false;
[L2252]  COND FALSE  !(__exception)
[L2284]  CALL        call __ret_0_ := transferFrom~address~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5205]  CALL        call __var_27 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5328]  COND FALSE  !(sub_value_s949 == 0)
[L5332]  COND FALSE  !(balances_BasicToken[this][sender_s949] < sub_value_s949)
[L5336]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s949] == false)
[L5347]  COND FALSE  !(Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == 0)
[L5351]              alllock_sum_s949 := 0;
[L5352]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s949] == false)
[L5363]              j_s949 := 0;
[L5364]  COND FALSE  !(j_s949 < Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]])
[L5400]  CALL        call can_unlock_s949 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][sender_s949], alllock_sum_s949);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5400]  RET         call can_unlock_s949 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][sender_s949], alllock_sum_s949);
[L5401]  COND FALSE  !(revert)
[L5404]              can_unlock_s949 := can_unlock_s949;
[L5405]              __ret_0_ := can_unlock_s949 >= sub_value_s949;
[L5205]  RET         call __var_27 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5206]  COND FALSE  !(revert)
[L5209]  COND FALSE  !(!__var_27)
[L5213]  CALL        call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858);
[L5554]              total_lockamount_s1052 := 0;
[L5555]              total_unlockamount_s1052 := 0;
[L5556]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5567]              j_s1052 := 0;
[L5568]  COND FALSE  !(j_s1052 < Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]])
[L5633]  COND FALSE  !(total_unlockamount_s1052 > 0)
[L5636]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5647]  COND FALSE  !(total_lockamount_s1052 == 0 && Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]] > 0)
[L5213]  RET         call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858);
[L5214]  COND FALSE  !(revert)
[L5217]  COND TRUE   DType[this] == HKExCoin
[L5218]  CALL        call __var_28 := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L4809]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4809]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]  COND FALSE  !(revert)
[L4813]  COND TRUE   DType[this] == HKExCoin
[L4814]  CALL        call __var_13 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s662, _to_s662, _value_s662);
[L4398]              __var_5 := null;
[L4399]  COND FALSE  !(!(_to_s415 != null))
[L4403]  COND FALSE  !(!(_value_s415 <= balances_BasicToken[this][_from_s415]))
[L4407]  COND FALSE  !(!(_value_s415 <= allowed_StandardToken[this][_from_s415][msgsender_MSG]))
[L4411]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s415], _value_s415);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4411]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s415], _value_s415);
[L4412]  COND FALSE  !(revert)
[L4415]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s415];
[L4416]              balances_BasicToken[this][_from_s415] := __var_6;
[L4417]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s415];
[L4418]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s415], _value_s415);
[L3942]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              assert c_s92 >= a_s92;
[L3944]              c_s92 := c_s92;
[L4418]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s415], _value_s415);
[L4419]  COND FALSE  !(revert)
[L4422]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s415];
[L4423]              balances_BasicToken[this][_to_s415] := __var_7;
[L4424]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s415];
[L4425]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s415][msgsender_MSG], _value_s415);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4425]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s415][msgsender_MSG], _value_s415);
[L4426]  COND FALSE  !(revert)
[L4429]              sum_allowed1[_from_s415] := sum_allowed1[_from_s415] - allowed_StandardToken[this][_from_s415][msgsender_MSG];
[L4430]              allowed_StandardToken[this][_from_s415][msgsender_MSG] := __var_8;
[L4431]              sum_allowed1[_from_s415] := sum_allowed1[_from_s415] + allowed_StandardToken[this][_from_s415][msgsender_MSG];
[L4432]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L4433]              __ret_0_ := true;
[L4814]  RET         call __var_13 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s662, _to_s662, _value_s662);
[L4815]  COND FALSE  !(revert)
[L4826]              __ret_0_ := __var_13;
[L5218]  RET         call __var_28 := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5219]  COND FALSE  !(revert)
[L5225]              __ret_0_ := __var_28;
[L2284]  RET         call __ret_0_ := transferFrom~address~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2285]              assume !revert && gas >= 0;
[L8583]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L8688]  RET         call CorralChoice_HKExCoin(this);

[2020-11-25 17:44:49,927 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:44:49,927 INFO  L82        PathProgramCache]: Analyzing trace with hash -1803094821, now seen corresponding path program 1 times
[2020-11-25 17:44:49,928 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:44:49,947 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:44:50,136 INFO  L134       CoverageAnalysis]: Checked inductivity of 1182 backedges. 5 proven. 0 refuted. 0 times theorem prover too weak. 1177 trivial. 0 not checked.
[2020-11-25 17:44:50,136 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:44:50,137 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 17:44:50,138 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:44:50,138 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 17:44:50,138 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 17:44:50,138 INFO  L87              Difference]: Start difference. First operand 5820 states and 6708 transitions. cyclomatic complexity: 916 Second operand 3 states.
[2020-11-25 17:44:50,200 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:44:50,200 INFO  L93              Difference]: Finished difference Result 5694 states and 6547 transitions.
[2020-11-25 17:44:50,200 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 17:44:50,200 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5694 states and 6547 transitions.
[2020-11-25 17:44:50,209 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 17:44:50,221 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5694 states to 5694 states and 6547 transitions.
[2020-11-25 17:44:50,221 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1098
[2020-11-25 17:44:50,221 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1098
[2020-11-25 17:44:50,221 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5694 states and 6547 transitions.
[2020-11-25 17:44:50,224 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:44:50,224 INFO  L728         BuchiCegarLoop]: Abstraction has 5694 states and 6547 transitions.
[2020-11-25 17:44:50,228 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5694 states and 6547 transitions.
[2020-11-25 17:44:50,251 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5694 to 5694.
[2020-11-25 17:44:50,251 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5694 states.
[2020-11-25 17:44:50,258 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5694 states to 5694 states and 6547 transitions.
[2020-11-25 17:44:50,258 INFO  L751         BuchiCegarLoop]: Abstraction has 5694 states and 6547 transitions.
[2020-11-25 17:44:50,258 INFO  L631         BuchiCegarLoop]: Abstraction has 5694 states and 6547 transitions.
[2020-11-25 17:44:50,258 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 17:44:50,258 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5694 states and 6547 transitions.
[2020-11-25 17:44:50,263 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 17:44:50,263 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:44:50,264 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:44:50,265 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:44:50,265 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_HKExCoin0 := false;
[L2]                 call_transferFrom_HKExCoin0 := false;
[L2]     CALL        call main();
[L8678]              assume null == 0;
[L8679]  CALL        call this := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L8679]  RET         call this := FreshRefGenerator__success();
[L8680]              assume now >= 0;
[L8681]              assume DType[this] == HKExCoin;
[L8682]              assume msgvalue_MSG == 0;
[L8683]              gas := gas - 53000;
[L8684]  CALL        call HKExCoin_HKExCoin(this, msgsender_MSG, msgvalue_MSG);
[L2092]              havoc __exception;
[L2093]              revert := false;
[L2094]  COND FALSE  !(__exception)
[L2126]  CALL        call HKExCoin_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L5079]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5080]  COND FALSE  !(revert)
[L5083]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L5083]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5084]  COND FALSE  !(revert)
[L5087]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L5087]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5088]  COND FALSE  !(revert)
[L5091]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4330]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4330]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4334]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4338]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4339]  COND FALSE  !(revert)
[L4342]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4301]              assume msgsender_MSG != null;
[L4302]              Balance[this] := 0;
[L4303]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4304]              sum_allowed1[this] := 0;
[L4342]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4343]  COND FALSE  !(revert)
[L5091]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5092]  COND FALSE  !(revert)
[L5095]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L5095]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5096]  COND FALSE  !(revert)
[L5099]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4574]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  COND FALSE  !(revert)
[L4578]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]              assume msgsender_MSG != null;
[L4555]              Balance[this] := 0;
[L4556]              paused_Pausable[this] := false;
[L4578]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4579]  COND FALSE  !(revert)
[L5099]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5100]  COND FALSE  !(revert)
[L5103]  CALL        call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4700]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4701]  COND FALSE  !(revert)
[L4704]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4704]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4705]  COND FALSE  !(revert)
[L4708]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4708]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4709]  COND FALSE  !(revert)
[L4712]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4330]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4330]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4334]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4338]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4339]  COND FALSE  !(revert)
[L4342]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4301]              assume msgsender_MSG != null;
[L4302]              Balance[this] := 0;
[L4303]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4304]              sum_allowed1[this] := 0;
[L4342]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4343]  COND FALSE  !(revert)
[L4712]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4713]  COND FALSE  !(revert)
[L4716]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4716]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]  COND FALSE  !(revert)
[L4720]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4574]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  COND FALSE  !(revert)
[L4578]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]              assume msgsender_MSG != null;
[L4555]              Balance[this] := 0;
[L4556]              paused_Pausable[this] := false;
[L4578]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4579]  COND FALSE  !(revert)
[L4720]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4721]  COND FALSE  !(revert)
[L4724]  CALL        call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4661]              assume msgsender_MSG != null;
[L4662]              Balance[this] := 0;
[L4724]  RET         call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4725]  COND FALSE  !(revert)
[L5103]  RET         call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5104]  COND FALSE  !(revert)
[L5107]  CALL        call HKExCoin_HKExCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5013]              assume msgsender_MSG != null;
[L5014]              Balance[this] := 0;
[L5015]              name_HKExCoin[this] := 1400933812;
[L5016]              symbol_HKExCoin[this] := -256252482;
[L5017]              standard_HKExCoin[this] := -941536354;
[L5018]              decimals_HKExCoin[this] := 18;
[L5019]              __var_22 := decimals_HKExCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5020]              INITIAL_SUPPLY_HKExCoin[this] := nonlinearMul(10 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_HKExCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5022]  CALL        call __var_23 := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L5022]  RET         call __var_23 := FreshRefGenerator__success();
[L5023]  COND FALSE  !(revert)
[L5026]              allocations_HKExCoin[this] := __var_23;
[L5028]              alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]] := zeroRefboolArr();
[L5030]              totalSupply__BasicToken[this] := INITIAL_SUPPLY_HKExCoin[this];
[L5031]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L5032]              balances_BasicToken[this][msgsender_MSG] := INITIAL_SUPPLY_HKExCoin[this];
[L5033]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L5034]              assert { :EventEmitted "Transfer_HKExCoin" } true;
[L5107]  RET         call HKExCoin_HKExCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5108]  COND FALSE  !(revert)
[L2126]  RET         call HKExCoin_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG);
[L2127]              assume !revert && gas >= 0;
[L8684]  RET         call HKExCoin_HKExCoin(this, msgsender_MSG, msgvalue_MSG);
[L8685]              assume !revert && gas >= 0;
[L8688]  CALL        call CorralChoice_HKExCoin(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != HKExCoin;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND FALSE  !(choice == 16)
[L8572]  COND FALSE  !(choice == 15)
[L8578]  COND FALSE  !(choice == 14)
[L8585]  COND TRUE   choice == 13
[L8586]              gas := gas - 21000;
[L8587]  COND TRUE   gas >= 0
[L8588]              assume _value_s680 >= 0 && _value_s680 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8589]              assume msgvalue_MSG == 0;
[L8590]  CALL        call __ret_0_approve := approve~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L1834]              havoc __exception;
[L1835]              revert := false;
[L1836]  COND FALSE  !(__exception)
[L1868]  CALL        call __ret_0_ := approve~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L4859]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4859]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4860]  COND FALSE  !(revert)
[L4863]  COND TRUE   DType[this] == HKExCoin
[L4864]  CALL        call __var_15 := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L4448]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s443];
[L4449]              allowed_StandardToken[this][msgsender_MSG][_spender_s443] := _value_s443;
[L4450]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s443];
[L4451]              assert { :EventEmitted "Approval_StandardToken" } true;
[L4452]              __ret_0_ := true;
[L4864]  RET         call __var_15 := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L4865]  COND FALSE  !(revert)
[L4876]              __ret_0_ := __var_15;
[L1868]  RET         call __ret_0_ := approve~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L1869]              assume !revert && gas >= 0;
[L8590]  RET         call __ret_0_approve := approve~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L8688]  RET         call CorralChoice_HKExCoin(this);
[L8688]  CALL        call CorralChoice_HKExCoin(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != HKExCoin;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND TRUE   choice == 16
[L8566]              gas := gas - 21000;
[L8567]  COND TRUE   gas >= 0
[L8568]              assume _value_s828 >= 0 && _value_s828 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8569]              assume msgvalue_MSG == 0;
[L8570]  CALL        call __ret_0_transfer := transfer~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L2170]              havoc __exception;
[L2171]              revert := false;
[L2172]  COND FALSE  !(__exception)
[L2204]  CALL        call __ret_0_ := transfer~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L5147]  CALL        call __var_24 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s828);
[L5328]  COND TRUE   sub_value_s949 == 0
[L5329]              __ret_0_ := false;
[L5147]  RET         call __var_24 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s828);
[L5148]  COND FALSE  !(revert)
[L5151]  COND FALSE  !(!__var_24)
[L5155]  CALL        call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5554]              total_lockamount_s1052 := 0;
[L5555]              total_unlockamount_s1052 := 0;
[L5556]  COND TRUE   alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false
[L5557]  CALL        call __var_34 := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L5557]  RET         call __var_34 := FreshRefGenerator__success();
[L5558]  COND FALSE  !(revert)
[L5561]              assume Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]] == 0;
[L5562]              alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] := true;
[L5563]              assume M_int_Ref[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]] == zerointRefArr();
[L5564]              assume M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052] == __var_34;
[L5565]              assume sum[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]] == 0;
[L5567]              j_s1052 := 0;
[L5568]  COND FALSE  !(j_s1052 < Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]])
[L5633]  COND FALSE  !(total_unlockamount_s1052 > 0)
[L5636]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5647]  COND FALSE  !(total_lockamount_s1052 == 0 && Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]] > 0)
[L5155]  RET         call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5156]  COND FALSE  !(revert)
[L5159]  COND TRUE   DType[this] == HKExCoin
[L5160]  CALL        call __var_25 := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L4759]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4759]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  COND FALSE  !(DType[this] == HKExCoin)
[L4768]  COND TRUE   DType[this] == PausableToken
[L4769]  CALL        call __var_11 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s641, _value_s641);
[L4208]              __var_2 := null;
[L4209]  COND FALSE  !(!(_to_s266 != null))
[L4213]  COND FALSE  !(!(_value_s266 <= balances_BasicToken[this][msgsender_MSG]))
[L4217]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s266);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4217]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s266);
[L4218]  COND FALSE  !(revert)
[L4221]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L4222]              balances_BasicToken[this][msgsender_MSG] := __var_3;
[L4223]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L4224]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s266], _value_s266);
[L3942]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              assert c_s92 >= a_s92;
[L3944]              c_s92 := c_s92;
[L4224]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s266], _value_s266);
[L4225]  COND FALSE  !(revert)
[L4228]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s266];
[L4229]              balances_BasicToken[this][_to_s266] := __var_4;
[L4230]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s266];
[L4231]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L4232]              __ret_0_ := true;
[L4769]  RET         call __var_11 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s641, _value_s641);
[L4770]  COND FALSE  !(revert)
[L4776]              __ret_0_ := __var_11;
[L5160]  RET         call __var_25 := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L5161]  COND FALSE  !(revert)
[L5167]              __ret_0_ := __var_25;
[L2204]  RET         call __ret_0_ := transfer~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L2205]              assume !revert && gas >= 0;
[L8570]  RET         call __ret_0_transfer := transfer~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L8688]  RET         call CorralChoice_HKExCoin(this);
[L8688]  CALL        call CorralChoice_HKExCoin(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != HKExCoin;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND FALSE  !(choice == 16)
[L8572]  COND FALSE  !(choice == 15)
[L8578]  COND TRUE   choice == 14
[L8579]              gas := gas - 21000;
[L8580]  COND TRUE   gas >= 0
[L8581]              assume _value_s858 >= 0 && _value_s858 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8582]              assume msgvalue_MSG == 0;
[L8583]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s858 != _to_s858 && ((_value_s858 > balances_BasicToken[this][_from_s858] || _value_s858 > allowed_StandardToken[this][_from_s858][msgsender_MSG]) || balances_BasicToken[this][_to_s858] + _value_s858 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s858 >= 0) && _value_s858 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s858] >= 0) && balances_BasicToken[this][_to_s858] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s858] >= 0) && balances_BasicToken[this][_from_s858] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s858][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s858][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_HKExCoin0 := true;
[L2]                 call_transferFrom_HKExCoin0 := false;
[L2]                 revert := revert_hold;
[L2250]              havoc __exception;
[L2251]              revert := false;
[L2252]  COND FALSE  !(__exception)
[L2284]  CALL        call __ret_0_ := transferFrom~address~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5205]  CALL        call __var_27 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5328]  COND FALSE  !(sub_value_s949 == 0)
[L5332]  COND FALSE  !(balances_BasicToken[this][sender_s949] < sub_value_s949)
[L5336]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s949] == false)
[L5347]  COND TRUE   Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == 0
[L5348]              __ret_0_ := true;
[L5205]  RET         call __var_27 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5206]  COND FALSE  !(revert)
[L5209]  COND FALSE  !(!__var_27)
[L5213]  CALL        call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858);
[L5554]              total_lockamount_s1052 := 0;
[L5555]              total_unlockamount_s1052 := 0;
[L5556]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5567]              j_s1052 := 0;
[L5568]  COND FALSE  !(j_s1052 < Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]])
[L5633]  COND FALSE  !(total_unlockamount_s1052 > 0)
[L5636]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5647]  COND FALSE  !(total_lockamount_s1052 == 0 && Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]] > 0)
[L5213]  RET         call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858);
[L5214]  COND FALSE  !(revert)
[L5217]  COND TRUE   DType[this] == HKExCoin
[L5218]  CALL        call __var_28 := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L4809]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4809]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]  COND FALSE  !(revert)
[L4813]  COND TRUE   DType[this] == HKExCoin
[L4814]  CALL        call __var_13 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s662, _to_s662, _value_s662);
[L4398]              __var_5 := null;
[L4399]  COND FALSE  !(!(_to_s415 != null))
[L4403]  COND FALSE  !(!(_value_s415 <= balances_BasicToken[this][_from_s415]))
[L4407]  COND FALSE  !(!(_value_s415 <= allowed_StandardToken[this][_from_s415][msgsender_MSG]))
[L4411]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s415], _value_s415);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4411]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s415], _value_s415);
[L4412]  COND FALSE  !(revert)
[L4415]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s415];
[L4416]              balances_BasicToken[this][_from_s415] := __var_6;
[L4417]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s415];
[L4418]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s415], _value_s415);
[L3942]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              assert c_s92 >= a_s92;
[L3944]              c_s92 := c_s92;
[L4418]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s415], _value_s415);
[L4419]  COND FALSE  !(revert)
[L4422]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s415];
[L4423]              balances_BasicToken[this][_to_s415] := __var_7;
[L4424]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s415];
[L4425]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s415][msgsender_MSG], _value_s415);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4425]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s415][msgsender_MSG], _value_s415);
[L4426]  COND FALSE  !(revert)
[L4429]              sum_allowed1[_from_s415] := sum_allowed1[_from_s415] - allowed_StandardToken[this][_from_s415][msgsender_MSG];
[L4430]              allowed_StandardToken[this][_from_s415][msgsender_MSG] := __var_8;
[L4431]              sum_allowed1[_from_s415] := sum_allowed1[_from_s415] + allowed_StandardToken[this][_from_s415][msgsender_MSG];
[L4432]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L4433]              __ret_0_ := true;
[L4814]  RET         call __var_13 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s662, _to_s662, _value_s662);
[L4815]  COND FALSE  !(revert)
[L4826]              __ret_0_ := __var_13;
[L5218]  RET         call __var_28 := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5219]  COND FALSE  !(revert)
[L5225]              __ret_0_ := __var_28;
[L2284]  RET         call __ret_0_ := transferFrom~address~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2285]              assume !revert && gas >= 0;
[L8583]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L8688]  RET         call CorralChoice_HKExCoin(this);

Loop:
[L8688]  CALL        call CorralChoice_HKExCoin(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != HKExCoin;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND FALSE  !(choice == 16)
[L8572]  COND FALSE  !(choice == 15)
[L8578]  COND TRUE   choice == 14
[L8579]              gas := gas - 21000;
[L8580]  COND TRUE   gas >= 0
[L8581]              assume _value_s858 >= 0 && _value_s858 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8582]              assume msgvalue_MSG == 0;
[L8583]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s858 != _to_s858 && ((_value_s858 > balances_BasicToken[this][_from_s858] || _value_s858 > allowed_StandardToken[this][_from_s858][msgsender_MSG]) || balances_BasicToken[this][_to_s858] + _value_s858 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s858 >= 0) && _value_s858 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s858] >= 0) && balances_BasicToken[this][_to_s858] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s858] >= 0) && balances_BasicToken[this][_from_s858] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s858][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s858][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_HKExCoin0 := true;
[L2]                 call_transferFrom_HKExCoin0 := false;
[L2]                 revert := revert_hold;
[L2250]              havoc __exception;
[L2251]              revert := false;
[L2252]  COND FALSE  !(__exception)
[L2284]  CALL        call __ret_0_ := transferFrom~address~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5205]  CALL        call __var_27 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5328]  COND FALSE  !(sub_value_s949 == 0)
[L5332]  COND FALSE  !(balances_BasicToken[this][sender_s949] < sub_value_s949)
[L5336]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s949] == false)
[L5347]  COND FALSE  !(Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == 0)
[L5351]              alllock_sum_s949 := 0;
[L5352]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s949] == false)
[L5363]              j_s949 := 0;
[L5364]  COND FALSE  !(j_s949 < Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]])
[L5400]  CALL        call can_unlock_s949 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][sender_s949], alllock_sum_s949);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5400]  RET         call can_unlock_s949 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][sender_s949], alllock_sum_s949);
[L5401]  COND FALSE  !(revert)
[L5404]              can_unlock_s949 := can_unlock_s949;
[L5405]              __ret_0_ := can_unlock_s949 >= sub_value_s949;
[L5205]  RET         call __var_27 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5206]  COND FALSE  !(revert)
[L5209]  COND FALSE  !(!__var_27)
[L5213]  CALL        call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858);
[L5554]              total_lockamount_s1052 := 0;
[L5555]              total_unlockamount_s1052 := 0;
[L5556]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5567]              j_s1052 := 0;
[L5568]  COND FALSE  !(j_s1052 < Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]])
[L5633]  COND FALSE  !(total_unlockamount_s1052 > 0)
[L5636]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5647]  COND FALSE  !(total_lockamount_s1052 == 0 && Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]] > 0)
[L5213]  RET         call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858);
[L5214]  COND FALSE  !(revert)
[L5217]  COND TRUE   DType[this] == HKExCoin
[L5218]  CALL        call __var_28 := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L4809]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4809]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]  COND FALSE  !(revert)
[L4813]  COND TRUE   DType[this] == HKExCoin
[L4814]  CALL        call __var_13 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s662, _to_s662, _value_s662);
[L4398]              __var_5 := null;
[L4399]  COND FALSE  !(!(_to_s415 != null))
[L4403]  COND FALSE  !(!(_value_s415 <= balances_BasicToken[this][_from_s415]))
[L4407]  COND FALSE  !(!(_value_s415 <= allowed_StandardToken[this][_from_s415][msgsender_MSG]))
[L4411]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s415], _value_s415);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4411]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s415], _value_s415);
[L4412]  COND FALSE  !(revert)
[L4415]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s415];
[L4416]              balances_BasicToken[this][_from_s415] := __var_6;
[L4417]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s415];
[L4418]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s415], _value_s415);
[L3942]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              assert c_s92 >= a_s92;
[L3944]              c_s92 := c_s92;
[L4418]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s415], _value_s415);
[L4419]  COND FALSE  !(revert)
[L4422]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s415];
[L4423]              balances_BasicToken[this][_to_s415] := __var_7;
[L4424]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s415];
[L4425]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s415][msgsender_MSG], _value_s415);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4425]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s415][msgsender_MSG], _value_s415);
[L4426]  COND FALSE  !(revert)
[L4429]              sum_allowed1[_from_s415] := sum_allowed1[_from_s415] - allowed_StandardToken[this][_from_s415][msgsender_MSG];
[L4430]              allowed_StandardToken[this][_from_s415][msgsender_MSG] := __var_8;
[L4431]              sum_allowed1[_from_s415] := sum_allowed1[_from_s415] + allowed_StandardToken[this][_from_s415][msgsender_MSG];
[L4432]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L4433]              __ret_0_ := true;
[L4814]  RET         call __var_13 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s662, _to_s662, _value_s662);
[L4815]  COND FALSE  !(revert)
[L4826]              __ret_0_ := __var_13;
[L5218]  RET         call __var_28 := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5219]  COND FALSE  !(revert)
[L5225]              __ret_0_ := __var_28;
[L2284]  RET         call __ret_0_ := transferFrom~address~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2285]              assume !revert && gas >= 0;
[L8583]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L8688]  RET         call CorralChoice_HKExCoin(this);

[2020-11-25 17:44:50,271 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:44:50,271 INFO  L82        PathProgramCache]: Analyzing trace with hash -1869745963, now seen corresponding path program 1 times
[2020-11-25 17:44:50,272 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:44:50,291 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:44:50,512 INFO  L134       CoverageAnalysis]: Checked inductivity of 1182 backedges. 5 proven. 0 refuted. 0 times theorem prover too weak. 1177 trivial. 0 not checked.
[2020-11-25 17:44:50,512 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:44:50,512 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 17:44:50,512 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:44:50,513 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 17:44:50,513 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 17:44:50,513 INFO  L87              Difference]: Start difference. First operand 5694 states and 6547 transitions. cyclomatic complexity: 881 Second operand 4 states.
[2020-11-25 17:44:50,535 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:44:50,535 INFO  L93              Difference]: Finished difference Result 5700 states and 6551 transitions.
[2020-11-25 17:44:50,535 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 17:44:50,535 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5700 states and 6551 transitions.
[2020-11-25 17:44:50,543 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 17:44:50,553 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5700 states to 5686 states and 6535 transitions.
[2020-11-25 17:44:50,553 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1098
[2020-11-25 17:44:50,554 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1098
[2020-11-25 17:44:50,554 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5686 states and 6535 transitions.
[2020-11-25 17:44:50,556 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:44:50,556 INFO  L728         BuchiCegarLoop]: Abstraction has 5686 states and 6535 transitions.
[2020-11-25 17:44:50,560 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5686 states and 6535 transitions.
[2020-11-25 17:44:50,581 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5686 to 5686.
[2020-11-25 17:44:50,581 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5686 states.
[2020-11-25 17:44:50,587 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5686 states to 5686 states and 6535 transitions.
[2020-11-25 17:44:50,587 INFO  L751         BuchiCegarLoop]: Abstraction has 5686 states and 6535 transitions.
[2020-11-25 17:44:50,587 INFO  L631         BuchiCegarLoop]: Abstraction has 5686 states and 6535 transitions.
[2020-11-25 17:44:50,587 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 17:44:50,587 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5686 states and 6535 transitions.
[2020-11-25 17:44:50,592 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 17:44:50,592 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:44:50,592 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:44:50,594 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:44:50,594 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_HKExCoin0 := false;
[L2]                 call_transferFrom_HKExCoin0 := false;
[L2]     CALL        call main();
[L8678]              assume null == 0;
[L8679]  CALL        call this := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L8679]  RET         call this := FreshRefGenerator__success();
[L8680]              assume now >= 0;
[L8681]              assume DType[this] == HKExCoin;
[L8682]              assume msgvalue_MSG == 0;
[L8683]              gas := gas - 53000;
[L8684]  CALL        call HKExCoin_HKExCoin(this, msgsender_MSG, msgvalue_MSG);
[L2092]              havoc __exception;
[L2093]              revert := false;
[L2094]  COND FALSE  !(__exception)
[L2126]  CALL        call HKExCoin_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L5079]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5080]  COND FALSE  !(revert)
[L5083]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L5083]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5084]  COND FALSE  !(revert)
[L5087]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L5087]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5088]  COND FALSE  !(revert)
[L5091]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4330]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4330]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4334]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4338]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4339]  COND FALSE  !(revert)
[L4342]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4301]              assume msgsender_MSG != null;
[L4302]              Balance[this] := 0;
[L4303]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4304]              sum_allowed1[this] := 0;
[L4342]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4343]  COND FALSE  !(revert)
[L5091]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5092]  COND FALSE  !(revert)
[L5095]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L5095]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5096]  COND FALSE  !(revert)
[L5099]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4574]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  COND FALSE  !(revert)
[L4578]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]              assume msgsender_MSG != null;
[L4555]              Balance[this] := 0;
[L4556]              paused_Pausable[this] := false;
[L4578]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4579]  COND FALSE  !(revert)
[L5099]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5100]  COND FALSE  !(revert)
[L5103]  CALL        call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4700]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4701]  COND FALSE  !(revert)
[L4704]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4704]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4705]  COND FALSE  !(revert)
[L4708]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4708]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4709]  COND FALSE  !(revert)
[L4712]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4330]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4330]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4334]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4338]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4339]  COND FALSE  !(revert)
[L4342]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4301]              assume msgsender_MSG != null;
[L4302]              Balance[this] := 0;
[L4303]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4304]              sum_allowed1[this] := 0;
[L4342]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4343]  COND FALSE  !(revert)
[L4712]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4713]  COND FALSE  !(revert)
[L4716]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4716]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]  COND FALSE  !(revert)
[L4720]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4574]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  COND FALSE  !(revert)
[L4578]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]              assume msgsender_MSG != null;
[L4555]              Balance[this] := 0;
[L4556]              paused_Pausable[this] := false;
[L4578]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4579]  COND FALSE  !(revert)
[L4720]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4721]  COND FALSE  !(revert)
[L4724]  CALL        call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4661]              assume msgsender_MSG != null;
[L4662]              Balance[this] := 0;
[L4724]  RET         call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4725]  COND FALSE  !(revert)
[L5103]  RET         call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5104]  COND FALSE  !(revert)
[L5107]  CALL        call HKExCoin_HKExCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5013]              assume msgsender_MSG != null;
[L5014]              Balance[this] := 0;
[L5015]              name_HKExCoin[this] := 1400933812;
[L5016]              symbol_HKExCoin[this] := -256252482;
[L5017]              standard_HKExCoin[this] := -941536354;
[L5018]              decimals_HKExCoin[this] := 18;
[L5019]              __var_22 := decimals_HKExCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5020]              INITIAL_SUPPLY_HKExCoin[this] := nonlinearMul(10 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_HKExCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5022]  CALL        call __var_23 := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L5022]  RET         call __var_23 := FreshRefGenerator__success();
[L5023]  COND FALSE  !(revert)
[L5026]              allocations_HKExCoin[this] := __var_23;
[L5028]              alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]] := zeroRefboolArr();
[L5030]              totalSupply__BasicToken[this] := INITIAL_SUPPLY_HKExCoin[this];
[L5031]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L5032]              balances_BasicToken[this][msgsender_MSG] := INITIAL_SUPPLY_HKExCoin[this];
[L5033]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L5034]              assert { :EventEmitted "Transfer_HKExCoin" } true;
[L5107]  RET         call HKExCoin_HKExCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5108]  COND FALSE  !(revert)
[L2126]  RET         call HKExCoin_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG);
[L2127]              assume !revert && gas >= 0;
[L8684]  RET         call HKExCoin_HKExCoin(this, msgsender_MSG, msgvalue_MSG);
[L8685]              assume !revert && gas >= 0;
[L8688]  CALL        call CorralChoice_HKExCoin(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != HKExCoin;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND FALSE  !(choice == 16)
[L8572]  COND FALSE  !(choice == 15)
[L8578]  COND FALSE  !(choice == 14)
[L8585]  COND TRUE   choice == 13
[L8586]              gas := gas - 21000;
[L8587]  COND TRUE   gas >= 0
[L8588]              assume _value_s680 >= 0 && _value_s680 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8589]              assume msgvalue_MSG == 0;
[L8590]  CALL        call __ret_0_approve := approve~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L1834]              havoc __exception;
[L1835]              revert := false;
[L1836]  COND FALSE  !(__exception)
[L1868]  CALL        call __ret_0_ := approve~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L4859]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4859]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4860]  COND FALSE  !(revert)
[L4863]  COND TRUE   DType[this] == HKExCoin
[L4864]  CALL        call __var_15 := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L4448]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s443];
[L4449]              allowed_StandardToken[this][msgsender_MSG][_spender_s443] := _value_s443;
[L4450]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s443];
[L4451]              assert { :EventEmitted "Approval_StandardToken" } true;
[L4452]              __ret_0_ := true;
[L4864]  RET         call __var_15 := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L4865]  COND FALSE  !(revert)
[L4876]              __ret_0_ := __var_15;
[L1868]  RET         call __ret_0_ := approve~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L1869]              assume !revert && gas >= 0;
[L8590]  RET         call __ret_0_approve := approve~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L8688]  RET         call CorralChoice_HKExCoin(this);
[L8688]  CALL        call CorralChoice_HKExCoin(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != HKExCoin;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND TRUE   choice == 16
[L8566]              gas := gas - 21000;
[L8567]  COND TRUE   gas >= 0
[L8568]              assume _value_s828 >= 0 && _value_s828 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8569]              assume msgvalue_MSG == 0;
[L8570]  CALL        call __ret_0_transfer := transfer~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L2170]              havoc __exception;
[L2171]              revert := false;
[L2172]  COND FALSE  !(__exception)
[L2204]  CALL        call __ret_0_ := transfer~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L5147]  CALL        call __var_24 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s828);
[L5328]  COND FALSE  !(sub_value_s949 == 0)
[L5332]  COND FALSE  !(balances_BasicToken[this][sender_s949] < sub_value_s949)
[L5336]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s949] == false)
[L5347]  COND TRUE   Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == 0
[L5348]              __ret_0_ := true;
[L5147]  RET         call __var_24 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s828);
[L5148]  COND FALSE  !(revert)
[L5151]  COND FALSE  !(!__var_24)
[L5155]  CALL        call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5554]              total_lockamount_s1052 := 0;
[L5555]              total_unlockamount_s1052 := 0;
[L5556]  COND TRUE   alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false
[L5557]  CALL        call __var_34 := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L5557]  RET         call __var_34 := FreshRefGenerator__success();
[L5558]  COND FALSE  !(revert)
[L5561]              assume Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]] == 0;
[L5562]              alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] := true;
[L5563]              assume M_int_Ref[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]] == zerointRefArr();
[L5564]              assume M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052] == __var_34;
[L5565]              assume sum[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]] == 0;
[L5567]              j_s1052 := 0;
[L5568]  COND FALSE  !(j_s1052 < Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]])
[L5633]  COND FALSE  !(total_unlockamount_s1052 > 0)
[L5636]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5647]  COND FALSE  !(total_lockamount_s1052 == 0 && Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]] > 0)
[L5155]  RET         call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5156]  COND FALSE  !(revert)
[L5159]  COND TRUE   DType[this] == HKExCoin
[L5160]  CALL        call __var_25 := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L4759]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4759]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  COND TRUE   DType[this] == HKExCoin
[L4764]  CALL        call __var_11 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s641, _value_s641);
[L4208]              __var_2 := null;
[L4209]  COND FALSE  !(!(_to_s266 != null))
[L4213]  COND FALSE  !(!(_value_s266 <= balances_BasicToken[this][msgsender_MSG]))
[L4217]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s266);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4217]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s266);
[L4218]  COND FALSE  !(revert)
[L4221]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L4222]              balances_BasicToken[this][msgsender_MSG] := __var_3;
[L4223]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L4224]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s266], _value_s266);
[L3942]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              assert c_s92 >= a_s92;
[L3944]              c_s92 := c_s92;
[L4224]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s266], _value_s266);
[L4225]  COND FALSE  !(revert)
[L4228]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s266];
[L4229]              balances_BasicToken[this][_to_s266] := __var_4;
[L4230]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s266];
[L4231]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L4232]              __ret_0_ := true;
[L4764]  RET         call __var_11 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s641, _value_s641);
[L4765]  COND FALSE  !(revert)
[L4776]              __ret_0_ := __var_11;
[L5160]  RET         call __var_25 := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L5161]  COND FALSE  !(revert)
[L5167]              __ret_0_ := __var_25;
[L2204]  RET         call __ret_0_ := transfer~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L2205]              assume !revert && gas >= 0;
[L8570]  RET         call __ret_0_transfer := transfer~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L8688]  RET         call CorralChoice_HKExCoin(this);
[L8688]  CALL        call CorralChoice_HKExCoin(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != HKExCoin;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND FALSE  !(choice == 16)
[L8572]  COND FALSE  !(choice == 15)
[L8578]  COND TRUE   choice == 14
[L8579]              gas := gas - 21000;
[L8580]  COND TRUE   gas >= 0
[L8581]              assume _value_s858 >= 0 && _value_s858 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8582]              assume msgvalue_MSG == 0;
[L8583]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s858 != _to_s858 && ((_value_s858 > balances_BasicToken[this][_from_s858] || _value_s858 > allowed_StandardToken[this][_from_s858][msgsender_MSG]) || balances_BasicToken[this][_to_s858] + _value_s858 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s858 >= 0) && _value_s858 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s858] >= 0) && balances_BasicToken[this][_to_s858] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s858] >= 0) && balances_BasicToken[this][_from_s858] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s858][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s858][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_HKExCoin0 := true;
[L2]                 call_transferFrom_HKExCoin0 := false;
[L2]                 revert := revert_hold;
[L2250]              havoc __exception;
[L2251]              revert := false;
[L2252]  COND FALSE  !(__exception)
[L2284]  CALL        call __ret_0_ := transferFrom~address~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5205]  CALL        call __var_27 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5328]  COND FALSE  !(sub_value_s949 == 0)
[L5332]  COND FALSE  !(balances_BasicToken[this][sender_s949] < sub_value_s949)
[L5336]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s949] == false)
[L5347]  COND TRUE   Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == 0
[L5348]              __ret_0_ := true;
[L5205]  RET         call __var_27 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5206]  COND FALSE  !(revert)
[L5209]  COND FALSE  !(!__var_27)
[L5213]  CALL        call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858);
[L5554]              total_lockamount_s1052 := 0;
[L5555]              total_unlockamount_s1052 := 0;
[L5556]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5567]              j_s1052 := 0;
[L5568]  COND FALSE  !(j_s1052 < Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]])
[L5633]  COND FALSE  !(total_unlockamount_s1052 > 0)
[L5636]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5647]  COND FALSE  !(total_lockamount_s1052 == 0 && Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]] > 0)
[L5213]  RET         call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858);
[L5214]  COND FALSE  !(revert)
[L5217]  COND TRUE   DType[this] == HKExCoin
[L5218]  CALL        call __var_28 := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L4809]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4809]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]  COND FALSE  !(revert)
[L4813]  COND TRUE   DType[this] == HKExCoin
[L4814]  CALL        call __var_13 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s662, _to_s662, _value_s662);
[L4398]              __var_5 := null;
[L4399]  COND FALSE  !(!(_to_s415 != null))
[L4403]  COND FALSE  !(!(_value_s415 <= balances_BasicToken[this][_from_s415]))
[L4407]  COND FALSE  !(!(_value_s415 <= allowed_StandardToken[this][_from_s415][msgsender_MSG]))
[L4411]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s415], _value_s415);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4411]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s415], _value_s415);
[L4412]  COND FALSE  !(revert)
[L4415]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s415];
[L4416]              balances_BasicToken[this][_from_s415] := __var_6;
[L4417]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s415];
[L4418]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s415], _value_s415);
[L3942]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              assert c_s92 >= a_s92;
[L3944]              c_s92 := c_s92;
[L4418]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s415], _value_s415);
[L4419]  COND FALSE  !(revert)
[L4422]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s415];
[L4423]              balances_BasicToken[this][_to_s415] := __var_7;
[L4424]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s415];
[L4425]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s415][msgsender_MSG], _value_s415);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4425]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s415][msgsender_MSG], _value_s415);
[L4426]  COND FALSE  !(revert)
[L4429]              sum_allowed1[_from_s415] := sum_allowed1[_from_s415] - allowed_StandardToken[this][_from_s415][msgsender_MSG];
[L4430]              allowed_StandardToken[this][_from_s415][msgsender_MSG] := __var_8;
[L4431]              sum_allowed1[_from_s415] := sum_allowed1[_from_s415] + allowed_StandardToken[this][_from_s415][msgsender_MSG];
[L4432]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L4433]              __ret_0_ := true;
[L4814]  RET         call __var_13 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s662, _to_s662, _value_s662);
[L4815]  COND FALSE  !(revert)
[L4826]              __ret_0_ := __var_13;
[L5218]  RET         call __var_28 := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5219]  COND FALSE  !(revert)
[L5225]              __ret_0_ := __var_28;
[L2284]  RET         call __ret_0_ := transferFrom~address~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2285]              assume !revert && gas >= 0;
[L8583]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L8688]  RET         call CorralChoice_HKExCoin(this);

Loop:
[L8688]  CALL        call CorralChoice_HKExCoin(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != HKExCoin;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND FALSE  !(choice == 16)
[L8572]  COND FALSE  !(choice == 15)
[L8578]  COND TRUE   choice == 14
[L8579]              gas := gas - 21000;
[L8580]  COND TRUE   gas >= 0
[L8581]              assume _value_s858 >= 0 && _value_s858 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8582]              assume msgvalue_MSG == 0;
[L8583]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s858 != _to_s858 && ((_value_s858 > balances_BasicToken[this][_from_s858] || _value_s858 > allowed_StandardToken[this][_from_s858][msgsender_MSG]) || balances_BasicToken[this][_to_s858] + _value_s858 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s858 >= 0) && _value_s858 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s858] >= 0) && balances_BasicToken[this][_to_s858] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s858] >= 0) && balances_BasicToken[this][_from_s858] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s858][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s858][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_HKExCoin0 := true;
[L2]                 call_transferFrom_HKExCoin0 := false;
[L2]                 revert := revert_hold;
[L2250]              havoc __exception;
[L2251]              revert := false;
[L2252]  COND FALSE  !(__exception)
[L2284]  CALL        call __ret_0_ := transferFrom~address~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5205]  CALL        call __var_27 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5328]  COND FALSE  !(sub_value_s949 == 0)
[L5332]  COND FALSE  !(balances_BasicToken[this][sender_s949] < sub_value_s949)
[L5336]  COND TRUE   alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s949] == false
[L5337]  CALL        call __var_30 := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L5337]  RET         call __var_30 := FreshRefGenerator__success();
[L5338]  COND FALSE  !(revert)
[L5341]              assume Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == 0;
[L5342]              alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s949] := true;
[L5343]              assume M_int_Ref[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == zerointRefArr();
[L5344]              assume M_Ref_Ref[allocations_HKExCoin[this]][sender_s949] == __var_30;
[L5345]              assume sum[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == 0;
[L5347]  COND TRUE   Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == 0
[L5348]              __ret_0_ := true;
[L5205]  RET         call __var_27 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5206]  COND FALSE  !(revert)
[L5209]  COND FALSE  !(!__var_27)
[L5213]  CALL        call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858);
[L5554]              total_lockamount_s1052 := 0;
[L5555]              total_unlockamount_s1052 := 0;
[L5556]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5567]              j_s1052 := 0;
[L5568]  COND FALSE  !(j_s1052 < Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]])
[L5633]  COND FALSE  !(total_unlockamount_s1052 > 0)
[L5636]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5647]  COND FALSE  !(total_lockamount_s1052 == 0 && Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]] > 0)
[L5213]  RET         call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858);
[L5214]  COND FALSE  !(revert)
[L5217]  COND TRUE   DType[this] == HKExCoin
[L5218]  CALL        call __var_28 := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L4809]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4809]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]  COND FALSE  !(revert)
[L4813]  COND TRUE   DType[this] == HKExCoin
[L4814]  CALL        call __var_13 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s662, _to_s662, _value_s662);
[L4398]              __var_5 := null;
[L4399]  COND FALSE  !(!(_to_s415 != null))
[L4403]  COND FALSE  !(!(_value_s415 <= balances_BasicToken[this][_from_s415]))
[L4407]  COND FALSE  !(!(_value_s415 <= allowed_StandardToken[this][_from_s415][msgsender_MSG]))
[L4411]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s415], _value_s415);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4411]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s415], _value_s415);
[L4412]  COND FALSE  !(revert)
[L4415]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s415];
[L4416]              balances_BasicToken[this][_from_s415] := __var_6;
[L4417]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s415];
[L4418]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s415], _value_s415);
[L3942]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              assert c_s92 >= a_s92;
[L3944]              c_s92 := c_s92;
[L4418]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s415], _value_s415);
[L4419]  COND FALSE  !(revert)
[L4422]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s415];
[L4423]              balances_BasicToken[this][_to_s415] := __var_7;
[L4424]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s415];
[L4425]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s415][msgsender_MSG], _value_s415);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4425]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s415][msgsender_MSG], _value_s415);
[L4426]  COND FALSE  !(revert)
[L4429]              sum_allowed1[_from_s415] := sum_allowed1[_from_s415] - allowed_StandardToken[this][_from_s415][msgsender_MSG];
[L4430]              allowed_StandardToken[this][_from_s415][msgsender_MSG] := __var_8;
[L4431]              sum_allowed1[_from_s415] := sum_allowed1[_from_s415] + allowed_StandardToken[this][_from_s415][msgsender_MSG];
[L4432]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L4433]              __ret_0_ := true;
[L4814]  RET         call __var_13 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s662, _to_s662, _value_s662);
[L4815]  COND FALSE  !(revert)
[L4826]              __ret_0_ := __var_13;
[L5218]  RET         call __var_28 := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5219]  COND FALSE  !(revert)
[L5225]              __ret_0_ := __var_28;
[L2284]  RET         call __ret_0_ := transferFrom~address~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2285]              assume !revert && gas >= 0;
[L8583]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L8688]  RET         call CorralChoice_HKExCoin(this);

[2020-11-25 17:44:50,599 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:44:50,599 INFO  L82        PathProgramCache]: Analyzing trace with hash 1368729394, now seen corresponding path program 1 times
[2020-11-25 17:44:50,600 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:44:50,620 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:44:50,826 INFO  L134       CoverageAnalysis]: Checked inductivity of 1182 backedges. 5 proven. 0 refuted. 0 times theorem prover too weak. 1177 trivial. 0 not checked.
[2020-11-25 17:44:50,826 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:44:50,826 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 17:44:50,827 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:44:50,827 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 17:44:50,827 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=29, Unknown=0, NotChecked=0, Total=42
[2020-11-25 17:44:50,827 INFO  L87              Difference]: Start difference. First operand 5686 states and 6535 transitions. cyclomatic complexity: 877 Second operand 7 states.
[2020-11-25 17:44:52,126 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:44:52,126 INFO  L93              Difference]: Finished difference Result 5904 states and 6807 transitions.
[2020-11-25 17:44:52,126 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 17:44:52,126 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5904 states and 6807 transitions.
[2020-11-25 17:44:52,137 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 17:44:52,148 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5904 states to 5904 states and 6807 transitions.
[2020-11-25 17:44:52,148 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1157
[2020-11-25 17:44:52,149 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1157
[2020-11-25 17:44:52,149 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5904 states and 6807 transitions.
[2020-11-25 17:44:52,152 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:44:52,152 INFO  L728         BuchiCegarLoop]: Abstraction has 5904 states and 6807 transitions.
[2020-11-25 17:44:52,156 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5904 states and 6807 transitions.
[2020-11-25 17:44:52,176 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5904 to 5713.
[2020-11-25 17:44:52,176 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5713 states.
[2020-11-25 17:44:52,182 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5713 states to 5713 states and 6568 transitions.
[2020-11-25 17:44:52,182 INFO  L751         BuchiCegarLoop]: Abstraction has 5713 states and 6568 transitions.
[2020-11-25 17:44:52,182 INFO  L631         BuchiCegarLoop]: Abstraction has 5713 states and 6568 transitions.
[2020-11-25 17:44:52,182 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-25 17:44:52,182 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5713 states and 6568 transitions.
[2020-11-25 17:44:52,187 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 17:44:52,187 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:44:52,187 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:44:52,189 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:44:52,189 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_HKExCoin0 := false;
[L2]                 call_transferFrom_HKExCoin0 := false;
[L2]     CALL        call main();
[L8678]              assume null == 0;
[L8679]  CALL        call this := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L8679]  RET         call this := FreshRefGenerator__success();
[L8680]              assume now >= 0;
[L8681]              assume DType[this] == HKExCoin;
[L8682]              assume msgvalue_MSG == 0;
[L8683]              gas := gas - 53000;
[L8684]  CALL        call HKExCoin_HKExCoin(this, msgsender_MSG, msgvalue_MSG);
[L2092]              havoc __exception;
[L2093]              revert := false;
[L2094]  COND FALSE  !(__exception)
[L2126]  CALL        call HKExCoin_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L5079]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5080]  COND FALSE  !(revert)
[L5083]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L5083]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5084]  COND FALSE  !(revert)
[L5087]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L5087]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5088]  COND FALSE  !(revert)
[L5091]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4330]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4330]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4334]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4338]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4339]  COND FALSE  !(revert)
[L4342]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4301]              assume msgsender_MSG != null;
[L4302]              Balance[this] := 0;
[L4303]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4304]              sum_allowed1[this] := 0;
[L4342]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4343]  COND FALSE  !(revert)
[L5091]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5092]  COND FALSE  !(revert)
[L5095]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L5095]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5096]  COND FALSE  !(revert)
[L5099]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4574]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  COND FALSE  !(revert)
[L4578]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]              assume msgsender_MSG != null;
[L4555]              Balance[this] := 0;
[L4556]              paused_Pausable[this] := false;
[L4578]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4579]  COND FALSE  !(revert)
[L5099]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5100]  COND FALSE  !(revert)
[L5103]  CALL        call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4700]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4701]  COND FALSE  !(revert)
[L4704]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4704]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4705]  COND FALSE  !(revert)
[L4708]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4708]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4709]  COND FALSE  !(revert)
[L4712]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4330]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4330]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4334]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4338]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4339]  COND FALSE  !(revert)
[L4342]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4301]              assume msgsender_MSG != null;
[L4302]              Balance[this] := 0;
[L4303]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4304]              sum_allowed1[this] := 0;
[L4342]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4343]  COND FALSE  !(revert)
[L4712]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4713]  COND FALSE  !(revert)
[L4716]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4716]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]  COND FALSE  !(revert)
[L4720]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4574]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  COND FALSE  !(revert)
[L4578]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]              assume msgsender_MSG != null;
[L4555]              Balance[this] := 0;
[L4556]              paused_Pausable[this] := false;
[L4578]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4579]  COND FALSE  !(revert)
[L4720]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4721]  COND FALSE  !(revert)
[L4724]  CALL        call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4661]              assume msgsender_MSG != null;
[L4662]              Balance[this] := 0;
[L4724]  RET         call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4725]  COND FALSE  !(revert)
[L5103]  RET         call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5104]  COND FALSE  !(revert)
[L5107]  CALL        call HKExCoin_HKExCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5013]              assume msgsender_MSG != null;
[L5014]              Balance[this] := 0;
[L5015]              name_HKExCoin[this] := 1400933812;
[L5016]              symbol_HKExCoin[this] := -256252482;
[L5017]              standard_HKExCoin[this] := -941536354;
[L5018]              decimals_HKExCoin[this] := 18;
[L5019]              __var_22 := decimals_HKExCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5020]              INITIAL_SUPPLY_HKExCoin[this] := nonlinearMul(10 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_HKExCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5022]  CALL        call __var_23 := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L5022]  RET         call __var_23 := FreshRefGenerator__success();
[L5023]  COND FALSE  !(revert)
[L5026]              allocations_HKExCoin[this] := __var_23;
[L5028]              alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]] := zeroRefboolArr();
[L5030]              totalSupply__BasicToken[this] := INITIAL_SUPPLY_HKExCoin[this];
[L5031]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L5032]              balances_BasicToken[this][msgsender_MSG] := INITIAL_SUPPLY_HKExCoin[this];
[L5033]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L5034]              assert { :EventEmitted "Transfer_HKExCoin" } true;
[L5107]  RET         call HKExCoin_HKExCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5108]  COND FALSE  !(revert)
[L2126]  RET         call HKExCoin_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG);
[L2127]              assume !revert && gas >= 0;
[L8684]  RET         call HKExCoin_HKExCoin(this, msgsender_MSG, msgvalue_MSG);
[L8685]              assume !revert && gas >= 0;
[L8688]  CALL        call CorralChoice_HKExCoin(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != HKExCoin;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND FALSE  !(choice == 16)
[L8572]  COND FALSE  !(choice == 15)
[L8578]  COND FALSE  !(choice == 14)
[L8585]  COND TRUE   choice == 13
[L8586]              gas := gas - 21000;
[L8587]  COND TRUE   gas >= 0
[L8588]              assume _value_s680 >= 0 && _value_s680 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8589]              assume msgvalue_MSG == 0;
[L8590]  CALL        call __ret_0_approve := approve~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L1834]              havoc __exception;
[L1835]              revert := false;
[L1836]  COND FALSE  !(__exception)
[L1868]  CALL        call __ret_0_ := approve~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L4859]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4859]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4860]  COND FALSE  !(revert)
[L4863]  COND TRUE   DType[this] == HKExCoin
[L4864]  CALL        call __var_15 := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L4448]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s443];
[L4449]              allowed_StandardToken[this][msgsender_MSG][_spender_s443] := _value_s443;
[L4450]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s443];
[L4451]              assert { :EventEmitted "Approval_StandardToken" } true;
[L4452]              __ret_0_ := true;
[L4864]  RET         call __var_15 := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L4865]  COND FALSE  !(revert)
[L4876]              __ret_0_ := __var_15;
[L1868]  RET         call __ret_0_ := approve~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L1869]              assume !revert && gas >= 0;
[L8590]  RET         call __ret_0_approve := approve~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L8688]  RET         call CorralChoice_HKExCoin(this);
[L8688]  CALL        call CorralChoice_HKExCoin(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != HKExCoin;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND TRUE   choice == 16
[L8566]              gas := gas - 21000;
[L8567]  COND TRUE   gas >= 0
[L8568]              assume _value_s828 >= 0 && _value_s828 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8569]              assume msgvalue_MSG == 0;
[L8570]  CALL        call __ret_0_transfer := transfer~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L2170]              havoc __exception;
[L2171]              revert := false;
[L2172]  COND FALSE  !(__exception)
[L2204]  CALL        call __ret_0_ := transfer~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L5147]  CALL        call __var_24 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s828);
[L5328]  COND FALSE  !(sub_value_s949 == 0)
[L5332]  COND FALSE  !(balances_BasicToken[this][sender_s949] < sub_value_s949)
[L5336]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s949] == false)
[L5347]  COND TRUE   Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == 0
[L5348]              __ret_0_ := true;
[L5147]  RET         call __var_24 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s828);
[L5148]  COND FALSE  !(revert)
[L5151]  COND FALSE  !(!__var_24)
[L5155]  CALL        call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5554]              total_lockamount_s1052 := 0;
[L5555]              total_unlockamount_s1052 := 0;
[L5556]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5567]              j_s1052 := 0;
[L5568]  COND FALSE  !(j_s1052 < Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]])
[L5633]  COND FALSE  !(total_unlockamount_s1052 > 0)
[L5636]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5647]  COND FALSE  !(total_lockamount_s1052 == 0 && Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]] > 0)
[L5155]  RET         call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5156]  COND FALSE  !(revert)
[L5159]  COND TRUE   DType[this] == HKExCoin
[L5160]  CALL        call __var_25 := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L4759]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4759]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  COND TRUE   DType[this] == HKExCoin
[L4764]  CALL        call __var_11 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s641, _value_s641);
[L4208]              __var_2 := null;
[L4209]  COND FALSE  !(!(_to_s266 != null))
[L4213]  COND FALSE  !(!(_value_s266 <= balances_BasicToken[this][msgsender_MSG]))
[L4217]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s266);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4217]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s266);
[L4218]  COND FALSE  !(revert)
[L4221]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L4222]              balances_BasicToken[this][msgsender_MSG] := __var_3;
[L4223]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L4224]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s266], _value_s266);
[L3942]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              assert c_s92 >= a_s92;
[L3944]              c_s92 := c_s92;
[L4224]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s266], _value_s266);
[L4225]  COND FALSE  !(revert)
[L4228]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s266];
[L4229]              balances_BasicToken[this][_to_s266] := __var_4;
[L4230]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s266];
[L4231]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L4232]              __ret_0_ := true;
[L4764]  RET         call __var_11 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s641, _value_s641);
[L4765]  COND FALSE  !(revert)
[L4776]              __ret_0_ := __var_11;
[L5160]  RET         call __var_25 := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L5161]  COND FALSE  !(revert)
[L5167]              __ret_0_ := __var_25;
[L2204]  RET         call __ret_0_ := transfer~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L2205]              assume !revert && gas >= 0;
[L8570]  RET         call __ret_0_transfer := transfer~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L8688]  RET         call CorralChoice_HKExCoin(this);
[L8688]  CALL        call CorralChoice_HKExCoin(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != HKExCoin;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND FALSE  !(choice == 16)
[L8572]  COND FALSE  !(choice == 15)
[L8578]  COND TRUE   choice == 14
[L8579]              gas := gas - 21000;
[L8580]  COND TRUE   gas >= 0
[L8581]              assume _value_s858 >= 0 && _value_s858 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8582]              assume msgvalue_MSG == 0;
[L8583]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s858 != _to_s858 && ((_value_s858 > balances_BasicToken[this][_from_s858] || _value_s858 > allowed_StandardToken[this][_from_s858][msgsender_MSG]) || balances_BasicToken[this][_to_s858] + _value_s858 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s858 >= 0) && _value_s858 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s858] >= 0) && balances_BasicToken[this][_to_s858] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s858] >= 0) && balances_BasicToken[this][_from_s858] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s858][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s858][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_HKExCoin0 := true;
[L2]                 call_transferFrom_HKExCoin0 := false;
[L2]                 revert := revert_hold;
[L2250]              havoc __exception;
[L2251]              revert := false;
[L2252]  COND FALSE  !(__exception)
[L2284]  CALL        call __ret_0_ := transferFrom~address~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5205]  CALL        call __var_27 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5328]  COND FALSE  !(sub_value_s949 == 0)
[L5332]  COND FALSE  !(balances_BasicToken[this][sender_s949] < sub_value_s949)
[L5336]  COND TRUE   alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s949] == false
[L5337]  CALL        call __var_30 := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L5337]  RET         call __var_30 := FreshRefGenerator__success();
[L5338]  COND FALSE  !(revert)
[L5341]              assume Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == 0;
[L5342]              alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s949] := true;
[L5343]              assume M_int_Ref[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == zerointRefArr();
[L5344]              assume M_Ref_Ref[allocations_HKExCoin[this]][sender_s949] == __var_30;
[L5345]              assume sum[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == 0;
[L5347]  COND TRUE   Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == 0
[L5348]              __ret_0_ := true;
[L5205]  RET         call __var_27 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5206]  COND FALSE  !(revert)
[L5209]  COND FALSE  !(!__var_27)
[L5213]  CALL        call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858);
[L5554]              total_lockamount_s1052 := 0;
[L5555]              total_unlockamount_s1052 := 0;
[L5556]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5567]              j_s1052 := 0;
[L5568]  COND FALSE  !(j_s1052 < Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]])
[L5633]  COND FALSE  !(total_unlockamount_s1052 > 0)
[L5636]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5647]  COND FALSE  !(total_lockamount_s1052 == 0 && Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]] > 0)
[L5213]  RET         call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858);
[L5214]  COND FALSE  !(revert)
[L5217]  COND TRUE   DType[this] == HKExCoin
[L5218]  CALL        call __var_28 := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L4809]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4809]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]  COND FALSE  !(revert)
[L4813]  COND TRUE   DType[this] == HKExCoin
[L4814]  CALL        call __var_13 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s662, _to_s662, _value_s662);
[L4398]              __var_5 := null;
[L4399]  COND FALSE  !(!(_to_s415 != null))
[L4403]  COND FALSE  !(!(_value_s415 <= balances_BasicToken[this][_from_s415]))
[L4407]  COND FALSE  !(!(_value_s415 <= allowed_StandardToken[this][_from_s415][msgsender_MSG]))
[L4411]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s415], _value_s415);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4411]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s415], _value_s415);
[L4412]  COND FALSE  !(revert)
[L4415]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s415];
[L4416]              balances_BasicToken[this][_from_s415] := __var_6;
[L4417]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s415];
[L4418]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s415], _value_s415);
[L3942]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              assert c_s92 >= a_s92;
[L3944]              c_s92 := c_s92;
[L4418]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s415], _value_s415);
[L4419]  COND FALSE  !(revert)
[L4422]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s415];
[L4423]              balances_BasicToken[this][_to_s415] := __var_7;
[L4424]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s415];
[L4425]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s415][msgsender_MSG], _value_s415);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4425]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s415][msgsender_MSG], _value_s415);
[L4426]  COND FALSE  !(revert)
[L4429]              sum_allowed1[_from_s415] := sum_allowed1[_from_s415] - allowed_StandardToken[this][_from_s415][msgsender_MSG];
[L4430]              allowed_StandardToken[this][_from_s415][msgsender_MSG] := __var_8;
[L4431]              sum_allowed1[_from_s415] := sum_allowed1[_from_s415] + allowed_StandardToken[this][_from_s415][msgsender_MSG];
[L4432]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L4433]              __ret_0_ := true;
[L4814]  RET         call __var_13 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s662, _to_s662, _value_s662);
[L4815]  COND FALSE  !(revert)
[L4826]              __ret_0_ := __var_13;
[L5218]  RET         call __var_28 := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5219]  COND FALSE  !(revert)
[L5225]              __ret_0_ := __var_28;
[L2284]  RET         call __ret_0_ := transferFrom~address~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2285]              assume !revert && gas >= 0;
[L8583]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L8688]  RET         call CorralChoice_HKExCoin(this);

Loop:
[L8688]  CALL        call CorralChoice_HKExCoin(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != HKExCoin;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND FALSE  !(choice == 16)
[L8572]  COND FALSE  !(choice == 15)
[L8578]  COND TRUE   choice == 14
[L8579]              gas := gas - 21000;
[L8580]  COND TRUE   gas >= 0
[L8581]              assume _value_s858 >= 0 && _value_s858 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8582]              assume msgvalue_MSG == 0;
[L8583]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s858 != _to_s858 && ((_value_s858 > balances_BasicToken[this][_from_s858] || _value_s858 > allowed_StandardToken[this][_from_s858][msgsender_MSG]) || balances_BasicToken[this][_to_s858] + _value_s858 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s858 >= 0) && _value_s858 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s858] >= 0) && balances_BasicToken[this][_to_s858] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s858] >= 0) && balances_BasicToken[this][_from_s858] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s858][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s858][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_HKExCoin0 := true;
[L2]                 call_transferFrom_HKExCoin0 := false;
[L2]                 revert := revert_hold;
[L2250]              havoc __exception;
[L2251]              revert := false;
[L2252]  COND FALSE  !(__exception)
[L2284]  CALL        call __ret_0_ := transferFrom~address~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5205]  CALL        call __var_27 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5328]  COND FALSE  !(sub_value_s949 == 0)
[L5332]  COND FALSE  !(balances_BasicToken[this][sender_s949] < sub_value_s949)
[L5336]  COND TRUE   alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s949] == false
[L5337]  CALL        call __var_30 := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L5337]  RET         call __var_30 := FreshRefGenerator__success();
[L5338]  COND FALSE  !(revert)
[L5341]              assume Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == 0;
[L5342]              alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s949] := true;
[L5343]              assume M_int_Ref[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == zerointRefArr();
[L5344]              assume M_Ref_Ref[allocations_HKExCoin[this]][sender_s949] == __var_30;
[L5345]              assume sum[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == 0;
[L5347]  COND TRUE   Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == 0
[L5348]              __ret_0_ := true;
[L5205]  RET         call __var_27 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5206]  COND FALSE  !(revert)
[L5209]  COND FALSE  !(!__var_27)
[L5213]  CALL        call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858);
[L5554]              total_lockamount_s1052 := 0;
[L5555]              total_unlockamount_s1052 := 0;
[L5556]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5567]              j_s1052 := 0;
[L5568]  COND FALSE  !(j_s1052 < Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]])
[L5633]  COND FALSE  !(total_unlockamount_s1052 > 0)
[L5636]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5647]  COND FALSE  !(total_lockamount_s1052 == 0 && Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]] > 0)
[L5213]  RET         call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858);
[L5214]  COND FALSE  !(revert)
[L5217]  COND TRUE   DType[this] == HKExCoin
[L5218]  CALL        call __var_28 := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L4809]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4809]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]  COND FALSE  !(revert)
[L4813]  COND TRUE   DType[this] == HKExCoin
[L4814]  CALL        call __var_13 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s662, _to_s662, _value_s662);
[L4398]              __var_5 := null;
[L4399]  COND FALSE  !(!(_to_s415 != null))
[L4403]  COND FALSE  !(!(_value_s415 <= balances_BasicToken[this][_from_s415]))
[L4407]  COND FALSE  !(!(_value_s415 <= allowed_StandardToken[this][_from_s415][msgsender_MSG]))
[L4411]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s415], _value_s415);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4411]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s415], _value_s415);
[L4412]  COND FALSE  !(revert)
[L4415]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s415];
[L4416]              balances_BasicToken[this][_from_s415] := __var_6;
[L4417]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s415];
[L4418]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s415], _value_s415);
[L3942]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              assert c_s92 >= a_s92;
[L3944]              c_s92 := c_s92;
[L4418]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s415], _value_s415);
[L4419]  COND FALSE  !(revert)
[L4422]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s415];
[L4423]              balances_BasicToken[this][_to_s415] := __var_7;
[L4424]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s415];
[L4425]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s415][msgsender_MSG], _value_s415);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4425]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s415][msgsender_MSG], _value_s415);
[L4426]  COND FALSE  !(revert)
[L4429]              sum_allowed1[_from_s415] := sum_allowed1[_from_s415] - allowed_StandardToken[this][_from_s415][msgsender_MSG];
[L4430]              allowed_StandardToken[this][_from_s415][msgsender_MSG] := __var_8;
[L4431]              sum_allowed1[_from_s415] := sum_allowed1[_from_s415] + allowed_StandardToken[this][_from_s415][msgsender_MSG];
[L4432]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L4433]              __ret_0_ := true;
[L4814]  RET         call __var_13 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s662, _to_s662, _value_s662);
[L4815]  COND FALSE  !(revert)
[L4826]              __ret_0_ := __var_13;
[L5218]  RET         call __var_28 := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5219]  COND FALSE  !(revert)
[L5225]              __ret_0_ := __var_28;
[L2284]  RET         call __ret_0_ := transferFrom~address~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2285]              assume !revert && gas >= 0;
[L8583]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L8688]  RET         call CorralChoice_HKExCoin(this);

[2020-11-25 17:44:52,194 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:44:52,194 INFO  L82        PathProgramCache]: Analyzing trace with hash 1683172509, now seen corresponding path program 1 times
[2020-11-25 17:44:52,195 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:44:52,214 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:44:52,468 INFO  L134       CoverageAnalysis]: Checked inductivity of 1170 backedges. 3 proven. 132 refuted. 0 times theorem prover too weak. 1035 trivial. 0 not checked.
[2020-11-25 17:44:52,469 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 17:44:52,469 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-11-25 17:44:52,469 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:44:52,469 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-25 17:44:52,470 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=24, Invalid=108, Unknown=0, NotChecked=0, Total=132
[2020-11-25 17:44:52,470 INFO  L87              Difference]: Start difference. First operand 5713 states and 6568 transitions. cyclomatic complexity: 884 Second operand 12 states.
[2020-11-25 17:44:54,866 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:44:54,867 INFO  L93              Difference]: Finished difference Result 5911 states and 6822 transitions.
[2020-11-25 17:44:54,867 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-11-25 17:44:54,867 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5911 states and 6822 transitions.
[2020-11-25 17:44:54,878 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 17:44:54,889 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5911 states to 5911 states and 6822 transitions.
[2020-11-25 17:44:54,889 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1162
[2020-11-25 17:44:54,890 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1162
[2020-11-25 17:44:54,890 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5911 states and 6822 transitions.
[2020-11-25 17:44:54,893 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:44:54,893 INFO  L728         BuchiCegarLoop]: Abstraction has 5911 states and 6822 transitions.
[2020-11-25 17:44:54,896 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5911 states and 6822 transitions.
[2020-11-25 17:44:54,917 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5911 to 5715.
[2020-11-25 17:44:54,917 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5715 states.
[2020-11-25 17:44:54,923 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5715 states to 5715 states and 6577 transitions.
[2020-11-25 17:44:54,923 INFO  L751         BuchiCegarLoop]: Abstraction has 5715 states and 6577 transitions.
[2020-11-25 17:44:54,923 INFO  L631         BuchiCegarLoop]: Abstraction has 5715 states and 6577 transitions.
[2020-11-25 17:44:54,923 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-25 17:44:54,923 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5715 states and 6577 transitions.
[2020-11-25 17:44:54,928 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 17:44:54,928 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:44:54,928 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:44:54,930 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:44:54,930 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_HKExCoin0 := false;
[L2]                 call_transferFrom_HKExCoin0 := false;
[L2]     CALL        call main();
[L8678]              assume null == 0;
[L8679]  CALL        call this := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L8679]  RET         call this := FreshRefGenerator__success();
[L8680]              assume now >= 0;
[L8681]              assume DType[this] == HKExCoin;
[L8682]              assume msgvalue_MSG == 0;
[L8683]              gas := gas - 53000;
[L8684]  CALL        call HKExCoin_HKExCoin(this, msgsender_MSG, msgvalue_MSG);
[L2092]              havoc __exception;
[L2093]              revert := false;
[L2094]  COND FALSE  !(__exception)
[L2126]  CALL        call HKExCoin_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L5079]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5080]  COND FALSE  !(revert)
[L5083]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L5083]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5084]  COND FALSE  !(revert)
[L5087]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L5087]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5088]  COND FALSE  !(revert)
[L5091]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4330]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4330]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4334]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4338]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4339]  COND FALSE  !(revert)
[L4342]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4301]              assume msgsender_MSG != null;
[L4302]              Balance[this] := 0;
[L4303]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4304]              sum_allowed1[this] := 0;
[L4342]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4343]  COND FALSE  !(revert)
[L5091]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5092]  COND FALSE  !(revert)
[L5095]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L5095]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5096]  COND FALSE  !(revert)
[L5099]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4574]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  COND FALSE  !(revert)
[L4578]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]              assume msgsender_MSG != null;
[L4555]              Balance[this] := 0;
[L4556]              paused_Pausable[this] := false;
[L4578]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4579]  COND FALSE  !(revert)
[L5099]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5100]  COND FALSE  !(revert)
[L5103]  CALL        call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4700]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4701]  COND FALSE  !(revert)
[L4704]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4704]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4705]  COND FALSE  !(revert)
[L4708]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4708]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4709]  COND FALSE  !(revert)
[L4712]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4330]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4330]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4334]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4338]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4339]  COND FALSE  !(revert)
[L4342]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4301]              assume msgsender_MSG != null;
[L4302]              Balance[this] := 0;
[L4303]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4304]              sum_allowed1[this] := 0;
[L4342]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4343]  COND FALSE  !(revert)
[L4712]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4713]  COND FALSE  !(revert)
[L4716]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4716]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]  COND FALSE  !(revert)
[L4720]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4574]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  COND FALSE  !(revert)
[L4578]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]              assume msgsender_MSG != null;
[L4555]              Balance[this] := 0;
[L4556]              paused_Pausable[this] := false;
[L4578]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4579]  COND FALSE  !(revert)
[L4720]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4721]  COND FALSE  !(revert)
[L4724]  CALL        call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4661]              assume msgsender_MSG != null;
[L4662]              Balance[this] := 0;
[L4724]  RET         call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4725]  COND FALSE  !(revert)
[L5103]  RET         call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5104]  COND FALSE  !(revert)
[L5107]  CALL        call HKExCoin_HKExCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5013]              assume msgsender_MSG != null;
[L5014]              Balance[this] := 0;
[L5015]              name_HKExCoin[this] := 1400933812;
[L5016]              symbol_HKExCoin[this] := -256252482;
[L5017]              standard_HKExCoin[this] := -941536354;
[L5018]              decimals_HKExCoin[this] := 18;
[L5019]              __var_22 := decimals_HKExCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5020]              INITIAL_SUPPLY_HKExCoin[this] := nonlinearMul(10 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_HKExCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5022]  CALL        call __var_23 := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L5022]  RET         call __var_23 := FreshRefGenerator__success();
[L5023]  COND FALSE  !(revert)
[L5026]              allocations_HKExCoin[this] := __var_23;
[L5028]              alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]] := zeroRefboolArr();
[L5030]              totalSupply__BasicToken[this] := INITIAL_SUPPLY_HKExCoin[this];
[L5031]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L5032]              balances_BasicToken[this][msgsender_MSG] := INITIAL_SUPPLY_HKExCoin[this];
[L5033]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L5034]              assert { :EventEmitted "Transfer_HKExCoin" } true;
[L5107]  RET         call HKExCoin_HKExCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5108]  COND FALSE  !(revert)
[L2126]  RET         call HKExCoin_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG);
[L2127]              assume !revert && gas >= 0;
[L8684]  RET         call HKExCoin_HKExCoin(this, msgsender_MSG, msgvalue_MSG);
[L8685]              assume !revert && gas >= 0;
[L8688]  CALL        call CorralChoice_HKExCoin(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != HKExCoin;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND FALSE  !(choice == 16)
[L8572]  COND FALSE  !(choice == 15)
[L8578]  COND FALSE  !(choice == 14)
[L8585]  COND TRUE   choice == 13
[L8586]              gas := gas - 21000;
[L8587]  COND TRUE   gas >= 0
[L8588]              assume _value_s680 >= 0 && _value_s680 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8589]              assume msgvalue_MSG == 0;
[L8590]  CALL        call __ret_0_approve := approve~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L1834]              havoc __exception;
[L1835]              revert := false;
[L1836]  COND FALSE  !(__exception)
[L1868]  CALL        call __ret_0_ := approve~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L4859]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4859]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4860]  COND FALSE  !(revert)
[L4863]  COND TRUE   DType[this] == HKExCoin
[L4864]  CALL        call __var_15 := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L4448]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s443];
[L4449]              allowed_StandardToken[this][msgsender_MSG][_spender_s443] := _value_s443;
[L4450]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s443];
[L4451]              assert { :EventEmitted "Approval_StandardToken" } true;
[L4452]              __ret_0_ := true;
[L4864]  RET         call __var_15 := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L4865]  COND FALSE  !(revert)
[L4876]              __ret_0_ := __var_15;
[L1868]  RET         call __ret_0_ := approve~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L1869]              assume !revert && gas >= 0;
[L8590]  RET         call __ret_0_approve := approve~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L8688]  RET         call CorralChoice_HKExCoin(this);
[L8688]  CALL        call CorralChoice_HKExCoin(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != HKExCoin;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND FALSE  !(choice == 16)
[L8572]  COND FALSE  !(choice == 15)
[L8578]  COND FALSE  !(choice == 14)
[L8585]  COND FALSE  !(choice == 13)
[L8592]  COND FALSE  !(choice == 12)
[L8599]  COND FALSE  !(choice == 11)
[L8606]  COND FALSE  !(choice == 10)
[L8612]  COND FALSE  !(choice == 9)
[L8618]  COND FALSE  !(choice == 8)
[L8624]  COND FALSE  !(choice == 7)
[L8630]  COND FALSE  !(choice == 6)
[L8636]  COND FALSE  !(choice == 5)
[L8642]  COND FALSE  !(choice == 4)
[L8648]  COND FALSE  !(choice == 3)
[L8654]  COND FALSE  !(choice == 2)
[L8661]  COND TRUE   choice == 1
[L8662]              gas := gas - 21000;
[L8663]  COND TRUE   gas >= 0
[L8664]              assume total_value_s1226 >= 0 && total_value_s1226 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8665]  CALL        call times_s1226 := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L8665]  RET         call times_s1226 := FreshRefGenerator__success();
[L8666]  CALL        call balanceRequires_s1226 := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L8666]  RET         call balanceRequires_s1226 := FreshRefGenerator__success();
[L8667]              assume msgvalue_MSG == 0;
[L8668]  CALL        call __ret_0_setAllocation := setAllocation~address~uint256~arr~arr_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _address_s1226, total_value_s1226, times_s1226, balanceRequires_s1226);
[L2339]              havoc __exception;
[L2340]              revert := false;
[L2341]  COND FALSE  !(__exception)
[L2373]  CALL        call __ret_0_ := setAllocation~address~uint256~arr~arr_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _address_s1226, total_value_s1226, times_s1226, balanceRequires_s1226);
[L5854]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7603]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L5854]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5855]  COND FALSE  !(revert)
[L5858]  COND FALSE  !(!(Length[times_s1226] == Length[balanceRequires_s1226]))
[L5862]  COND FALSE  !(!(balances_BasicToken[this][msgsender_MSG] >= total_value_s1226))
[L5866]              sum_s1226 := 0;
[L5867]              x_s1226 := 0;
[L5868]  COND FALSE  !(x_s1226 < Length[balanceRequires_s1226])
[L5884]  COND FALSE  !(!(total_value_s1226 >= sum_s1226))
[L5888]              i_s1226 := 0;
[L5889]  COND TRUE   i_s1226 < Length[times_s1226]
[L5891]              find_s1226 := false;
[L5892]  COND TRUE   alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][_address_s1226] == false
[L5893]  CALL        call __var_42 := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L5893]  RET         call __var_42 := FreshRefGenerator__success();
[L5894]  COND FALSE  !(revert)
[L5897]              assume Length[M_Ref_Ref[allocations_HKExCoin[this]][_address_s1226]] == 0;
[L5898]              alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][_address_s1226] := true;
[L5899]              assume M_int_Ref[M_Ref_Ref[allocations_HKExCoin[this]][_address_s1226]] == zerointRefArr();
[L5900]              assume M_Ref_Ref[allocations_HKExCoin[this]][_address_s1226] == __var_42;
[L5901]              assume sum[M_Ref_Ref[allocations_HKExCoin[this]][_address_s1226]] == 0;
[L5903]              j_s1226 := 0;
[L5904]  COND FALSE  !(j_s1226 < Length[M_Ref_Ref[allocations_HKExCoin[this]][_address_s1226]])
[L5953]  COND FALSE  !(!find_s1226)
[L5979]              i_s1226 := (i_s1226 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5980]  COND FALSE  !(gas < 0)
[L5889]  COND FALSE  !(i_s1226 < Length[times_s1226])
[L5984]              assert { :EventEmitted "NewLock_HKExCoin" } true;
[L5985]  COND TRUE   DType[this] == HKExCoin
[L5986]  CALL        call __var_52 := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _address_s1226, total_value_s1226);
[L4759]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4759]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  COND FALSE  !(DType[this] == HKExCoin)
[L4768]  COND TRUE   DType[this] == PausableToken
[L4769]  CALL        call __var_11 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s641, _value_s641);
[L4208]              __var_2 := null;
[L4209]  COND FALSE  !(!(_to_s266 != null))
[L4213]  COND FALSE  !(!(_value_s266 <= balances_BasicToken[this][msgsender_MSG]))
[L4217]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s266);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4217]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s266);
[L4218]  COND FALSE  !(revert)
[L4221]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L4222]              balances_BasicToken[this][msgsender_MSG] := __var_3;
[L4223]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L4224]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s266], _value_s266);
[L3942]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              assert c_s92 >= a_s92;
[L3944]              c_s92 := c_s92;
[L4224]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s266], _value_s266);
[L4225]  COND FALSE  !(revert)
[L4228]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s266];
[L4229]              balances_BasicToken[this][_to_s266] := __var_4;
[L4230]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s266];
[L4231]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L4232]              __ret_0_ := true;
[L4769]  RET         call __var_11 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s641, _value_s641);
[L4770]  COND FALSE  !(revert)
[L4776]              __ret_0_ := __var_11;
[L5986]  RET         call __var_52 := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _address_s1226, total_value_s1226);
[L5987]  COND FALSE  !(revert)
[L5993]              __ret_0_ := __var_52;
[L2373]  RET         call __ret_0_ := setAllocation~address~uint256~arr~arr_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _address_s1226, total_value_s1226, times_s1226, balanceRequires_s1226);
[L2374]              assume !revert && gas >= 0;
[L8668]  RET         call __ret_0_setAllocation := setAllocation~address~uint256~arr~arr_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _address_s1226, total_value_s1226, times_s1226, balanceRequires_s1226);
[L8688]  RET         call CorralChoice_HKExCoin(this);
[L8688]  CALL        call CorralChoice_HKExCoin(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != HKExCoin;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND FALSE  !(choice == 16)
[L8572]  COND FALSE  !(choice == 15)
[L8578]  COND TRUE   choice == 14
[L8579]              gas := gas - 21000;
[L8580]  COND TRUE   gas >= 0
[L8581]              assume _value_s858 >= 0 && _value_s858 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8582]              assume msgvalue_MSG == 0;
[L8583]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s858 != _to_s858 && ((_value_s858 > balances_BasicToken[this][_from_s858] || _value_s858 > allowed_StandardToken[this][_from_s858][msgsender_MSG]) || balances_BasicToken[this][_to_s858] + _value_s858 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s858 >= 0) && _value_s858 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s858] >= 0) && balances_BasicToken[this][_to_s858] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s858] >= 0) && balances_BasicToken[this][_from_s858] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s858][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s858][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_HKExCoin0 := true;
[L2]                 call_transferFrom_HKExCoin0 := false;
[L2]                 revert := revert_hold;
[L2250]              havoc __exception;
[L2251]              revert := false;
[L2252]  COND FALSE  !(__exception)
[L2284]  CALL        call __ret_0_ := transferFrom~address~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5205]  CALL        call __var_27 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5328]  COND FALSE  !(sub_value_s949 == 0)
[L5332]  COND FALSE  !(balances_BasicToken[this][sender_s949] < sub_value_s949)
[L5336]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s949] == false)
[L5347]  COND TRUE   Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == 0
[L5348]              __ret_0_ := true;
[L5205]  RET         call __var_27 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5206]  COND FALSE  !(revert)
[L5209]  COND FALSE  !(!__var_27)
[L5213]  CALL        call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858);
[L5554]              total_lockamount_s1052 := 0;
[L5555]              total_unlockamount_s1052 := 0;
[L5556]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5567]              j_s1052 := 0;
[L5568]  COND FALSE  !(j_s1052 < Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]])
[L5633]  COND FALSE  !(total_unlockamount_s1052 > 0)
[L5636]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5647]  COND FALSE  !(total_lockamount_s1052 == 0 && Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]] > 0)
[L5213]  RET         call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858);
[L5214]  COND FALSE  !(revert)
[L5217]  COND TRUE   DType[this] == HKExCoin
[L5218]  CALL        call __var_28 := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L4809]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4809]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]  COND FALSE  !(revert)
[L4813]  COND TRUE   DType[this] == HKExCoin
[L4814]  CALL        call __var_13 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s662, _to_s662, _value_s662);
[L4398]              __var_5 := null;
[L4399]  COND FALSE  !(!(_to_s415 != null))
[L4403]  COND FALSE  !(!(_value_s415 <= balances_BasicToken[this][_from_s415]))
[L4407]  COND FALSE  !(!(_value_s415 <= allowed_StandardToken[this][_from_s415][msgsender_MSG]))
[L4411]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s415], _value_s415);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4411]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s415], _value_s415);
[L4412]  COND FALSE  !(revert)
[L4415]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s415];
[L4416]              balances_BasicToken[this][_from_s415] := __var_6;
[L4417]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s415];
[L4418]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s415], _value_s415);
[L3942]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              assert c_s92 >= a_s92;
[L3944]              c_s92 := c_s92;
[L4418]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s415], _value_s415);
[L4419]  COND FALSE  !(revert)
[L4422]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s415];
[L4423]              balances_BasicToken[this][_to_s415] := __var_7;
[L4424]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s415];
[L4425]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s415][msgsender_MSG], _value_s415);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4425]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s415][msgsender_MSG], _value_s415);
[L4426]  COND FALSE  !(revert)
[L4429]              sum_allowed1[_from_s415] := sum_allowed1[_from_s415] - allowed_StandardToken[this][_from_s415][msgsender_MSG];
[L4430]              allowed_StandardToken[this][_from_s415][msgsender_MSG] := __var_8;
[L4431]              sum_allowed1[_from_s415] := sum_allowed1[_from_s415] + allowed_StandardToken[this][_from_s415][msgsender_MSG];
[L4432]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L4433]              __ret_0_ := true;
[L4814]  RET         call __var_13 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s662, _to_s662, _value_s662);
[L4815]  COND FALSE  !(revert)
[L4826]              __ret_0_ := __var_13;
[L5218]  RET         call __var_28 := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5219]  COND FALSE  !(revert)
[L5225]              __ret_0_ := __var_28;
[L2284]  RET         call __ret_0_ := transferFrom~address~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2285]              assume !revert && gas >= 0;
[L8583]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L8688]  RET         call CorralChoice_HKExCoin(this);

Loop:
[L8688]  CALL        call CorralChoice_HKExCoin(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != HKExCoin;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND FALSE  !(choice == 16)
[L8572]  COND FALSE  !(choice == 15)
[L8578]  COND TRUE   choice == 14
[L8579]              gas := gas - 21000;
[L8580]  COND TRUE   gas >= 0
[L8581]              assume _value_s858 >= 0 && _value_s858 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8582]              assume msgvalue_MSG == 0;
[L8583]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s858 != _to_s858 && ((_value_s858 > balances_BasicToken[this][_from_s858] || _value_s858 > allowed_StandardToken[this][_from_s858][msgsender_MSG]) || balances_BasicToken[this][_to_s858] + _value_s858 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s858 >= 0) && _value_s858 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s858] >= 0) && balances_BasicToken[this][_to_s858] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s858] >= 0) && balances_BasicToken[this][_from_s858] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s858][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s858][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_HKExCoin0 := true;
[L2]                 call_transferFrom_HKExCoin0 := false;
[L2]                 revert := revert_hold;
[L2250]              havoc __exception;
[L2251]              revert := false;
[L2252]  COND FALSE  !(__exception)
[L2284]  CALL        call __ret_0_ := transferFrom~address~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5205]  CALL        call __var_27 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5328]  COND FALSE  !(sub_value_s949 == 0)
[L5332]  COND FALSE  !(balances_BasicToken[this][sender_s949] < sub_value_s949)
[L5336]  COND TRUE   alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s949] == false
[L5337]  CALL        call __var_30 := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L5337]  RET         call __var_30 := FreshRefGenerator__success();
[L5338]  COND FALSE  !(revert)
[L5341]              assume Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == 0;
[L5342]              alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s949] := true;
[L5343]              assume M_int_Ref[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == zerointRefArr();
[L5344]              assume M_Ref_Ref[allocations_HKExCoin[this]][sender_s949] == __var_30;
[L5345]              assume sum[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == 0;
[L5347]  COND TRUE   Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == 0
[L5348]              __ret_0_ := true;
[L5205]  RET         call __var_27 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5206]  COND FALSE  !(revert)
[L5209]  COND FALSE  !(!__var_27)
[L5213]  CALL        call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858);
[L5554]              total_lockamount_s1052 := 0;
[L5555]              total_unlockamount_s1052 := 0;
[L5556]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5567]              j_s1052 := 0;
[L5568]  COND FALSE  !(j_s1052 < Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]])
[L5633]  COND FALSE  !(total_unlockamount_s1052 > 0)
[L5636]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5647]  COND FALSE  !(total_lockamount_s1052 == 0 && Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]] > 0)
[L5213]  RET         call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858);
[L5214]  COND FALSE  !(revert)
[L5217]  COND TRUE   DType[this] == HKExCoin
[L5218]  CALL        call __var_28 := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L4809]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4809]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]  COND FALSE  !(revert)
[L4813]  COND TRUE   DType[this] == HKExCoin
[L4814]  CALL        call __var_13 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s662, _to_s662, _value_s662);
[L4398]              __var_5 := null;
[L4399]  COND FALSE  !(!(_to_s415 != null))
[L4403]  COND FALSE  !(!(_value_s415 <= balances_BasicToken[this][_from_s415]))
[L4407]  COND FALSE  !(!(_value_s415 <= allowed_StandardToken[this][_from_s415][msgsender_MSG]))
[L4411]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s415], _value_s415);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4411]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s415], _value_s415);
[L4412]  COND FALSE  !(revert)
[L4415]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s415];
[L4416]              balances_BasicToken[this][_from_s415] := __var_6;
[L4417]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s415];
[L4418]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s415], _value_s415);
[L3942]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              assert c_s92 >= a_s92;
[L3944]              c_s92 := c_s92;
[L4418]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s415], _value_s415);
[L4419]  COND FALSE  !(revert)
[L4422]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s415];
[L4423]              balances_BasicToken[this][_to_s415] := __var_7;
[L4424]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s415];
[L4425]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s415][msgsender_MSG], _value_s415);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4425]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s415][msgsender_MSG], _value_s415);
[L4426]  COND FALSE  !(revert)
[L4429]              sum_allowed1[_from_s415] := sum_allowed1[_from_s415] - allowed_StandardToken[this][_from_s415][msgsender_MSG];
[L4430]              allowed_StandardToken[this][_from_s415][msgsender_MSG] := __var_8;
[L4431]              sum_allowed1[_from_s415] := sum_allowed1[_from_s415] + allowed_StandardToken[this][_from_s415][msgsender_MSG];
[L4432]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L4433]              __ret_0_ := true;
[L4814]  RET         call __var_13 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s662, _to_s662, _value_s662);
[L4815]  COND FALSE  !(revert)
[L4826]              __ret_0_ := __var_13;
[L5218]  RET         call __var_28 := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5219]  COND FALSE  !(revert)
[L5225]              __ret_0_ := __var_28;
[L2284]  RET         call __ret_0_ := transferFrom~address~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2285]              assume !revert && gas >= 0;
[L8583]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L8688]  RET         call CorralChoice_HKExCoin(this);

[2020-11-25 17:44:54,935 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:44:54,935 INFO  L82        PathProgramCache]: Analyzing trace with hash 127485309, now seen corresponding path program 1 times
[2020-11-25 17:44:54,936 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:44:54,954 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:44:55,181 INFO  L134       CoverageAnalysis]: Checked inductivity of 1230 backedges. 6 proven. 0 refuted. 0 times theorem prover too weak. 1224 trivial. 0 not checked.
[2020-11-25 17:44:55,181 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:44:55,182 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 17:44:55,182 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:44:55,182 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 17:44:55,182 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 17:44:55,183 INFO  L87              Difference]: Start difference. First operand 5715 states and 6577 transitions. cyclomatic complexity: 891 Second operand 3 states.
[2020-11-25 17:44:55,218 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:44:55,218 INFO  L93              Difference]: Finished difference Result 5754 states and 6622 transitions.
[2020-11-25 17:44:55,218 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 17:44:55,218 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5754 states and 6622 transitions.
[2020-11-25 17:44:55,227 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 17:44:55,238 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5754 states to 5754 states and 6622 transitions.
[2020-11-25 17:44:55,238 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1103
[2020-11-25 17:44:55,238 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1103
[2020-11-25 17:44:55,238 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5754 states and 6622 transitions.
[2020-11-25 17:44:55,241 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:44:55,241 INFO  L728         BuchiCegarLoop]: Abstraction has 5754 states and 6622 transitions.
[2020-11-25 17:44:55,244 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5754 states and 6622 transitions.
[2020-11-25 17:44:55,264 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5754 to 5718.
[2020-11-25 17:44:55,264 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5718 states.
[2020-11-25 17:44:55,270 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5718 states to 5718 states and 6580 transitions.
[2020-11-25 17:44:55,270 INFO  L751         BuchiCegarLoop]: Abstraction has 5718 states and 6580 transitions.
[2020-11-25 17:44:55,271 INFO  L631         BuchiCegarLoop]: Abstraction has 5718 states and 6580 transitions.
[2020-11-25 17:44:55,271 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-11-25 17:44:55,271 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5718 states and 6580 transitions.
[2020-11-25 17:44:55,276 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 17:44:55,276 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:44:55,276 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:44:55,277 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:44:55,277 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_HKExCoin0 := false;
[L2]                 call_transferFrom_HKExCoin0 := false;
[L2]     CALL        call main();
[L8678]              assume null == 0;
[L8679]  CALL        call this := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L8679]  RET         call this := FreshRefGenerator__success();
[L8680]              assume now >= 0;
[L8681]              assume DType[this] == HKExCoin;
[L8682]              assume msgvalue_MSG == 0;
[L8683]              gas := gas - 53000;
[L8684]  CALL        call HKExCoin_HKExCoin(this, msgsender_MSG, msgvalue_MSG);
[L2092]              havoc __exception;
[L2093]              revert := false;
[L2094]  COND FALSE  !(__exception)
[L2126]  CALL        call HKExCoin_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L5079]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5080]  COND FALSE  !(revert)
[L5083]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L5083]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5084]  COND FALSE  !(revert)
[L5087]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L5087]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5088]  COND FALSE  !(revert)
[L5091]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4330]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4330]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4334]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4338]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4339]  COND FALSE  !(revert)
[L4342]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4301]              assume msgsender_MSG != null;
[L4302]              Balance[this] := 0;
[L4303]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4304]              sum_allowed1[this] := 0;
[L4342]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4343]  COND FALSE  !(revert)
[L5091]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5092]  COND FALSE  !(revert)
[L5095]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L5095]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5096]  COND FALSE  !(revert)
[L5099]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4574]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  COND FALSE  !(revert)
[L4578]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]              assume msgsender_MSG != null;
[L4555]              Balance[this] := 0;
[L4556]              paused_Pausable[this] := false;
[L4578]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4579]  COND FALSE  !(revert)
[L5099]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5100]  COND FALSE  !(revert)
[L5103]  CALL        call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4700]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4701]  COND FALSE  !(revert)
[L4704]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4704]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4705]  COND FALSE  !(revert)
[L4708]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4708]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4709]  COND FALSE  !(revert)
[L4712]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4330]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4330]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4334]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4338]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4339]  COND FALSE  !(revert)
[L4342]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4301]              assume msgsender_MSG != null;
[L4302]              Balance[this] := 0;
[L4303]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4304]              sum_allowed1[this] := 0;
[L4342]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4343]  COND FALSE  !(revert)
[L4712]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4713]  COND FALSE  !(revert)
[L4716]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4716]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]  COND FALSE  !(revert)
[L4720]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4574]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  COND FALSE  !(revert)
[L4578]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]              assume msgsender_MSG != null;
[L4555]              Balance[this] := 0;
[L4556]              paused_Pausable[this] := false;
[L4578]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4579]  COND FALSE  !(revert)
[L4720]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4721]  COND FALSE  !(revert)
[L4724]  CALL        call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4661]              assume msgsender_MSG != null;
[L4662]              Balance[this] := 0;
[L4724]  RET         call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4725]  COND FALSE  !(revert)
[L5103]  RET         call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5104]  COND FALSE  !(revert)
[L5107]  CALL        call HKExCoin_HKExCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5013]              assume msgsender_MSG != null;
[L5014]              Balance[this] := 0;
[L5015]              name_HKExCoin[this] := 1400933812;
[L5016]              symbol_HKExCoin[this] := -256252482;
[L5017]              standard_HKExCoin[this] := -941536354;
[L5018]              decimals_HKExCoin[this] := 18;
[L5019]              __var_22 := decimals_HKExCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5020]              INITIAL_SUPPLY_HKExCoin[this] := nonlinearMul(10 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_HKExCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5022]  CALL        call __var_23 := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L5022]  RET         call __var_23 := FreshRefGenerator__success();
[L5023]  COND FALSE  !(revert)
[L5026]              allocations_HKExCoin[this] := __var_23;
[L5028]              alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]] := zeroRefboolArr();
[L5030]              totalSupply__BasicToken[this] := INITIAL_SUPPLY_HKExCoin[this];
[L5031]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L5032]              balances_BasicToken[this][msgsender_MSG] := INITIAL_SUPPLY_HKExCoin[this];
[L5033]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L5034]              assert { :EventEmitted "Transfer_HKExCoin" } true;
[L5107]  RET         call HKExCoin_HKExCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5108]  COND FALSE  !(revert)
[L2126]  RET         call HKExCoin_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG);
[L2127]              assume !revert && gas >= 0;
[L8684]  RET         call HKExCoin_HKExCoin(this, msgsender_MSG, msgvalue_MSG);
[L8685]              assume !revert && gas >= 0;
[L8688]  CALL        call CorralChoice_HKExCoin(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != HKExCoin;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND FALSE  !(choice == 16)
[L8572]  COND FALSE  !(choice == 15)
[L8578]  COND FALSE  !(choice == 14)
[L8585]  COND TRUE   choice == 13
[L8586]              gas := gas - 21000;
[L8587]  COND TRUE   gas >= 0
[L8588]              assume _value_s680 >= 0 && _value_s680 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8589]              assume msgvalue_MSG == 0;
[L8590]  CALL        call __ret_0_approve := approve~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L1834]              havoc __exception;
[L1835]              revert := false;
[L1836]  COND FALSE  !(__exception)
[L1868]  CALL        call __ret_0_ := approve~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L4859]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4859]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4860]  COND FALSE  !(revert)
[L4863]  COND TRUE   DType[this] == HKExCoin
[L4864]  CALL        call __var_15 := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L4448]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s443];
[L4449]              allowed_StandardToken[this][msgsender_MSG][_spender_s443] := _value_s443;
[L4450]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s443];
[L4451]              assert { :EventEmitted "Approval_StandardToken" } true;
[L4452]              __ret_0_ := true;
[L4864]  RET         call __var_15 := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L4865]  COND FALSE  !(revert)
[L4876]              __ret_0_ := __var_15;
[L1868]  RET         call __ret_0_ := approve~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L1869]              assume !revert && gas >= 0;
[L8590]  RET         call __ret_0_approve := approve~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L8688]  RET         call CorralChoice_HKExCoin(this);
[L8688]  CALL        call CorralChoice_HKExCoin(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != HKExCoin;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND TRUE   choice == 16
[L8566]              gas := gas - 21000;
[L8567]  COND TRUE   gas >= 0
[L8568]              assume _value_s828 >= 0 && _value_s828 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8569]              assume msgvalue_MSG == 0;
[L8570]  CALL        call __ret_0_transfer := transfer~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L2170]              havoc __exception;
[L2171]              revert := false;
[L2172]  COND FALSE  !(__exception)
[L2204]  CALL        call __ret_0_ := transfer~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L5147]  CALL        call __var_24 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s828);
[L5328]  COND FALSE  !(sub_value_s949 == 0)
[L5332]  COND FALSE  !(balances_BasicToken[this][sender_s949] < sub_value_s949)
[L5336]  COND TRUE   alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s949] == false
[L5337]  CALL        call __var_30 := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L5337]  RET         call __var_30 := FreshRefGenerator__success();
[L5338]  COND FALSE  !(revert)
[L5341]              assume Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == 0;
[L5342]              alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s949] := true;
[L5343]              assume M_int_Ref[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == zerointRefArr();
[L5344]              assume M_Ref_Ref[allocations_HKExCoin[this]][sender_s949] == __var_30;
[L5345]              assume sum[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == 0;
[L5347]  COND TRUE   Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == 0
[L5348]              __ret_0_ := true;
[L5147]  RET         call __var_24 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s828);
[L5148]  COND FALSE  !(revert)
[L5151]  COND FALSE  !(!__var_24)
[L5155]  CALL        call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5554]              total_lockamount_s1052 := 0;
[L5555]              total_unlockamount_s1052 := 0;
[L5556]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5567]              j_s1052 := 0;
[L5568]  COND FALSE  !(j_s1052 < Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]])
[L5633]  COND FALSE  !(total_unlockamount_s1052 > 0)
[L5636]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5647]  COND FALSE  !(total_lockamount_s1052 == 0 && Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]] > 0)
[L5155]  RET         call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5156]  COND FALSE  !(revert)
[L5159]  COND TRUE   DType[this] == HKExCoin
[L5160]  CALL        call __var_25 := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L4759]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4759]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  COND FALSE  !(DType[this] == HKExCoin)
[L4768]  COND TRUE   DType[this] == PausableToken
[L4769]  CALL        call __var_11 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s641, _value_s641);
[L4208]              __var_2 := null;
[L4209]  COND FALSE  !(!(_to_s266 != null))
[L4213]  COND FALSE  !(!(_value_s266 <= balances_BasicToken[this][msgsender_MSG]))
[L4217]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s266);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4217]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s266);
[L4218]  COND FALSE  !(revert)
[L4221]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L4222]              balances_BasicToken[this][msgsender_MSG] := __var_3;
[L4223]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L4224]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s266], _value_s266);
[L3942]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              assert c_s92 >= a_s92;
[L3944]              c_s92 := c_s92;
[L4224]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s266], _value_s266);
[L4225]  COND FALSE  !(revert)
[L4228]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s266];
[L4229]              balances_BasicToken[this][_to_s266] := __var_4;
[L4230]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s266];
[L4231]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L4232]              __ret_0_ := true;
[L4769]  RET         call __var_11 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s641, _value_s641);
[L4770]  COND FALSE  !(revert)
[L4776]              __ret_0_ := __var_11;
[L5160]  RET         call __var_25 := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L5161]  COND FALSE  !(revert)
[L5167]              __ret_0_ := __var_25;
[L2204]  RET         call __ret_0_ := transfer~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L2205]              assume !revert && gas >= 0;
[L8570]  RET         call __ret_0_transfer := transfer~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L8688]  RET         call CorralChoice_HKExCoin(this);
[L8688]  CALL        call CorralChoice_HKExCoin(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != HKExCoin;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND FALSE  !(choice == 16)
[L8572]  COND FALSE  !(choice == 15)
[L8578]  COND TRUE   choice == 14
[L8579]              gas := gas - 21000;
[L8580]  COND TRUE   gas >= 0
[L8581]              assume _value_s858 >= 0 && _value_s858 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8582]              assume msgvalue_MSG == 0;
[L8583]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s858 != _to_s858 && ((_value_s858 > balances_BasicToken[this][_from_s858] || _value_s858 > allowed_StandardToken[this][_from_s858][msgsender_MSG]) || balances_BasicToken[this][_to_s858] + _value_s858 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s858 >= 0) && _value_s858 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s858] >= 0) && balances_BasicToken[this][_to_s858] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s858] >= 0) && balances_BasicToken[this][_from_s858] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s858][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s858][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_HKExCoin0 := true;
[L2]                 call_transferFrom_HKExCoin0 := false;
[L2]                 revert := revert_hold;
[L2250]              havoc __exception;
[L2251]              revert := false;
[L2252]  COND FALSE  !(__exception)
[L2284]  CALL        call __ret_0_ := transferFrom~address~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5205]  CALL        call __var_27 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5328]  COND FALSE  !(sub_value_s949 == 0)
[L5332]  COND FALSE  !(balances_BasicToken[this][sender_s949] < sub_value_s949)
[L5336]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s949] == false)
[L5347]  COND TRUE   Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == 0
[L5348]              __ret_0_ := true;
[L5205]  RET         call __var_27 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5206]  COND FALSE  !(revert)
[L5209]  COND FALSE  !(!__var_27)
[L5213]  CALL        call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858);
[L5554]              total_lockamount_s1052 := 0;
[L5555]              total_unlockamount_s1052 := 0;
[L5556]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5567]              j_s1052 := 0;
[L5568]  COND FALSE  !(j_s1052 < Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]])
[L5633]  COND FALSE  !(total_unlockamount_s1052 > 0)
[L5636]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5647]  COND FALSE  !(total_lockamount_s1052 == 0 && Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]] > 0)
[L5213]  RET         call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858);
[L5214]  COND FALSE  !(revert)
[L5217]  COND TRUE   DType[this] == HKExCoin
[L5218]  CALL        call __var_28 := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L4809]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4809]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]  COND FALSE  !(revert)
[L4813]  COND TRUE   DType[this] == HKExCoin
[L4814]  CALL        call __var_13 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s662, _to_s662, _value_s662);
[L4398]              __var_5 := null;
[L4399]  COND FALSE  !(!(_to_s415 != null))
[L4403]  COND FALSE  !(!(_value_s415 <= balances_BasicToken[this][_from_s415]))
[L4407]  COND FALSE  !(!(_value_s415 <= allowed_StandardToken[this][_from_s415][msgsender_MSG]))
[L4411]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s415], _value_s415);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4411]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s415], _value_s415);
[L4412]  COND FALSE  !(revert)
[L4415]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s415];
[L4416]              balances_BasicToken[this][_from_s415] := __var_6;
[L4417]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s415];
[L4418]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s415], _value_s415);
[L3942]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              assert c_s92 >= a_s92;
[L3944]              c_s92 := c_s92;
[L4418]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s415], _value_s415);
[L4419]  COND FALSE  !(revert)
[L4422]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s415];
[L4423]              balances_BasicToken[this][_to_s415] := __var_7;
[L4424]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s415];
[L4425]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s415][msgsender_MSG], _value_s415);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4425]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s415][msgsender_MSG], _value_s415);
[L4426]  COND FALSE  !(revert)
[L4429]              sum_allowed1[_from_s415] := sum_allowed1[_from_s415] - allowed_StandardToken[this][_from_s415][msgsender_MSG];
[L4430]              allowed_StandardToken[this][_from_s415][msgsender_MSG] := __var_8;
[L4431]              sum_allowed1[_from_s415] := sum_allowed1[_from_s415] + allowed_StandardToken[this][_from_s415][msgsender_MSG];
[L4432]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L4433]              __ret_0_ := true;
[L4814]  RET         call __var_13 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s662, _to_s662, _value_s662);
[L4815]  COND FALSE  !(revert)
[L4826]              __ret_0_ := __var_13;
[L5218]  RET         call __var_28 := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5219]  COND FALSE  !(revert)
[L5225]              __ret_0_ := __var_28;
[L2284]  RET         call __ret_0_ := transferFrom~address~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2285]              assume !revert && gas >= 0;
[L8583]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L8688]  RET         call CorralChoice_HKExCoin(this);

Loop:
[L8688]  CALL        call CorralChoice_HKExCoin(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != HKExCoin;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND FALSE  !(choice == 16)
[L8572]  COND FALSE  !(choice == 15)
[L8578]  COND TRUE   choice == 14
[L8579]              gas := gas - 21000;
[L8580]  COND TRUE   gas >= 0
[L8581]              assume _value_s858 >= 0 && _value_s858 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8582]              assume msgvalue_MSG == 0;
[L8583]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s858 != _to_s858 && ((_value_s858 > balances_BasicToken[this][_from_s858] || _value_s858 > allowed_StandardToken[this][_from_s858][msgsender_MSG]) || balances_BasicToken[this][_to_s858] + _value_s858 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s858 >= 0) && _value_s858 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s858] >= 0) && balances_BasicToken[this][_to_s858] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s858] >= 0) && balances_BasicToken[this][_from_s858] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s858][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s858][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_HKExCoin0 := true;
[L2]                 call_transferFrom_HKExCoin0 := false;
[L2]                 revert := revert_hold;
[L2250]              havoc __exception;
[L2251]              revert := false;
[L2252]  COND FALSE  !(__exception)
[L2284]  CALL        call __ret_0_ := transferFrom~address~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5205]  CALL        call __var_27 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5328]  COND FALSE  !(sub_value_s949 == 0)
[L5332]  COND FALSE  !(balances_BasicToken[this][sender_s949] < sub_value_s949)
[L5336]  COND TRUE   alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s949] == false
[L5337]  CALL        call __var_30 := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L5337]  RET         call __var_30 := FreshRefGenerator__success();
[L5338]  COND FALSE  !(revert)
[L5341]              assume Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == 0;
[L5342]              alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s949] := true;
[L5343]              assume M_int_Ref[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == zerointRefArr();
[L5344]              assume M_Ref_Ref[allocations_HKExCoin[this]][sender_s949] == __var_30;
[L5345]              assume sum[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == 0;
[L5347]  COND TRUE   Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == 0
[L5348]              __ret_0_ := true;
[L5205]  RET         call __var_27 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5206]  COND FALSE  !(revert)
[L5209]  COND FALSE  !(!__var_27)
[L5213]  CALL        call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858);
[L5554]              total_lockamount_s1052 := 0;
[L5555]              total_unlockamount_s1052 := 0;
[L5556]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5567]              j_s1052 := 0;
[L5568]  COND FALSE  !(j_s1052 < Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]])
[L5633]  COND FALSE  !(total_unlockamount_s1052 > 0)
[L5636]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5647]  COND FALSE  !(total_lockamount_s1052 == 0 && Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]] > 0)
[L5213]  RET         call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858);
[L5214]  COND FALSE  !(revert)
[L5217]  COND TRUE   DType[this] == HKExCoin
[L5218]  CALL        call __var_28 := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L4809]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4809]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]  COND FALSE  !(revert)
[L4813]  COND TRUE   DType[this] == HKExCoin
[L4814]  CALL        call __var_13 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s662, _to_s662, _value_s662);
[L4398]              __var_5 := null;
[L4399]  COND FALSE  !(!(_to_s415 != null))
[L4403]  COND FALSE  !(!(_value_s415 <= balances_BasicToken[this][_from_s415]))
[L4407]  COND FALSE  !(!(_value_s415 <= allowed_StandardToken[this][_from_s415][msgsender_MSG]))
[L4411]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s415], _value_s415);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4411]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s415], _value_s415);
[L4412]  COND FALSE  !(revert)
[L4415]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s415];
[L4416]              balances_BasicToken[this][_from_s415] := __var_6;
[L4417]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s415];
[L4418]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s415], _value_s415);
[L3942]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              assert c_s92 >= a_s92;
[L3944]              c_s92 := c_s92;
[L4418]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s415], _value_s415);
[L4419]  COND FALSE  !(revert)
[L4422]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s415];
[L4423]              balances_BasicToken[this][_to_s415] := __var_7;
[L4424]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s415];
[L4425]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s415][msgsender_MSG], _value_s415);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4425]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s415][msgsender_MSG], _value_s415);
[L4426]  COND FALSE  !(revert)
[L4429]              sum_allowed1[_from_s415] := sum_allowed1[_from_s415] - allowed_StandardToken[this][_from_s415][msgsender_MSG];
[L4430]              allowed_StandardToken[this][_from_s415][msgsender_MSG] := __var_8;
[L4431]              sum_allowed1[_from_s415] := sum_allowed1[_from_s415] + allowed_StandardToken[this][_from_s415][msgsender_MSG];
[L4432]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L4433]              __ret_0_ := true;
[L4814]  RET         call __var_13 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s662, _to_s662, _value_s662);
[L4815]  COND FALSE  !(revert)
[L4826]              __ret_0_ := __var_13;
[L5218]  RET         call __var_28 := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5219]  COND FALSE  !(revert)
[L5225]              __ret_0_ := __var_28;
[L2284]  RET         call __ret_0_ := transferFrom~address~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2285]              assume !revert && gas >= 0;
[L8583]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L8688]  RET         call CorralChoice_HKExCoin(this);

[2020-11-25 17:44:55,283 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:44:55,283 INFO  L82        PathProgramCache]: Analyzing trace with hash 342011744, now seen corresponding path program 1 times
[2020-11-25 17:44:55,283 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:44:55,303 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:44:55,501 INFO  L134       CoverageAnalysis]: Checked inductivity of 1182 backedges. 5 proven. 0 refuted. 0 times theorem prover too weak. 1177 trivial. 0 not checked.
[2020-11-25 17:44:55,502 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:44:55,502 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 17:44:55,503 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:44:55,503 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 17:44:55,503 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 17:44:55,503 INFO  L87              Difference]: Start difference. First operand 5718 states and 6580 transitions. cyclomatic complexity: 891 Second operand 7 states.
[2020-11-25 17:44:55,572 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:44:55,572 INFO  L93              Difference]: Finished difference Result 5760 states and 6623 transitions.
[2020-11-25 17:44:55,572 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 17:44:55,572 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5760 states and 6623 transitions.
[2020-11-25 17:44:55,581 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 17:44:55,593 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5760 states to 5724 states and 6587 transitions.
[2020-11-25 17:44:55,593 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1101
[2020-11-25 17:44:55,593 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1101
[2020-11-25 17:44:55,593 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5724 states and 6587 transitions.
[2020-11-25 17:44:55,596 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:44:55,596 INFO  L728         BuchiCegarLoop]: Abstraction has 5724 states and 6587 transitions.
[2020-11-25 17:44:55,600 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5724 states and 6587 transitions.
[2020-11-25 17:44:55,619 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5724 to 5724.
[2020-11-25 17:44:55,619 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5724 states.
[2020-11-25 17:44:55,625 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5724 states to 5724 states and 6587 transitions.
[2020-11-25 17:44:55,625 INFO  L751         BuchiCegarLoop]: Abstraction has 5724 states and 6587 transitions.
[2020-11-25 17:44:55,626 INFO  L631         BuchiCegarLoop]: Abstraction has 5724 states and 6587 transitions.
[2020-11-25 17:44:55,626 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-11-25 17:44:55,626 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5724 states and 6587 transitions.
[2020-11-25 17:44:55,630 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 17:44:55,630 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:44:55,630 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:44:55,632 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:44:55,632 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_HKExCoin0 := false;
[L2]                 call_transferFrom_HKExCoin0 := false;
[L2]     CALL        call main();
[L8678]              assume null == 0;
[L8679]  CALL        call this := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L8679]  RET         call this := FreshRefGenerator__success();
[L8680]              assume now >= 0;
[L8681]              assume DType[this] == HKExCoin;
[L8682]              assume msgvalue_MSG == 0;
[L8683]              gas := gas - 53000;
[L8684]  CALL        call HKExCoin_HKExCoin(this, msgsender_MSG, msgvalue_MSG);
[L2092]              havoc __exception;
[L2093]              revert := false;
[L2094]  COND FALSE  !(__exception)
[L2126]  CALL        call HKExCoin_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L5079]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5080]  COND FALSE  !(revert)
[L5083]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L5083]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5084]  COND FALSE  !(revert)
[L5087]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L5087]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5088]  COND FALSE  !(revert)
[L5091]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4330]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4330]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4334]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4338]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4339]  COND FALSE  !(revert)
[L4342]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4301]              assume msgsender_MSG != null;
[L4302]              Balance[this] := 0;
[L4303]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4304]              sum_allowed1[this] := 0;
[L4342]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4343]  COND FALSE  !(revert)
[L5091]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5092]  COND FALSE  !(revert)
[L5095]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L5095]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5096]  COND FALSE  !(revert)
[L5099]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4574]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  COND FALSE  !(revert)
[L4578]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]              assume msgsender_MSG != null;
[L4555]              Balance[this] := 0;
[L4556]              paused_Pausable[this] := false;
[L4578]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4579]  COND FALSE  !(revert)
[L5099]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5100]  COND FALSE  !(revert)
[L5103]  CALL        call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4700]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4701]  COND FALSE  !(revert)
[L4704]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4704]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4705]  COND FALSE  !(revert)
[L4708]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4708]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4709]  COND FALSE  !(revert)
[L4712]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4330]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4330]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4334]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4338]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4339]  COND FALSE  !(revert)
[L4342]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4301]              assume msgsender_MSG != null;
[L4302]              Balance[this] := 0;
[L4303]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4304]              sum_allowed1[this] := 0;
[L4342]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4343]  COND FALSE  !(revert)
[L4712]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4713]  COND FALSE  !(revert)
[L4716]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4716]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]  COND FALSE  !(revert)
[L4720]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4574]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  COND FALSE  !(revert)
[L4578]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]              assume msgsender_MSG != null;
[L4555]              Balance[this] := 0;
[L4556]              paused_Pausable[this] := false;
[L4578]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4579]  COND FALSE  !(revert)
[L4720]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4721]  COND FALSE  !(revert)
[L4724]  CALL        call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4661]              assume msgsender_MSG != null;
[L4662]              Balance[this] := 0;
[L4724]  RET         call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4725]  COND FALSE  !(revert)
[L5103]  RET         call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5104]  COND FALSE  !(revert)
[L5107]  CALL        call HKExCoin_HKExCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5013]              assume msgsender_MSG != null;
[L5014]              Balance[this] := 0;
[L5015]              name_HKExCoin[this] := 1400933812;
[L5016]              symbol_HKExCoin[this] := -256252482;
[L5017]              standard_HKExCoin[this] := -941536354;
[L5018]              decimals_HKExCoin[this] := 18;
[L5019]              __var_22 := decimals_HKExCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5020]              INITIAL_SUPPLY_HKExCoin[this] := nonlinearMul(10 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_HKExCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5022]  CALL        call __var_23 := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L5022]  RET         call __var_23 := FreshRefGenerator__success();
[L5023]  COND FALSE  !(revert)
[L5026]              allocations_HKExCoin[this] := __var_23;
[L5028]              alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]] := zeroRefboolArr();
[L5030]              totalSupply__BasicToken[this] := INITIAL_SUPPLY_HKExCoin[this];
[L5031]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L5032]              balances_BasicToken[this][msgsender_MSG] := INITIAL_SUPPLY_HKExCoin[this];
[L5033]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L5034]              assert { :EventEmitted "Transfer_HKExCoin" } true;
[L5107]  RET         call HKExCoin_HKExCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5108]  COND FALSE  !(revert)
[L2126]  RET         call HKExCoin_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG);
[L2127]              assume !revert && gas >= 0;
[L8684]  RET         call HKExCoin_HKExCoin(this, msgsender_MSG, msgvalue_MSG);
[L8685]              assume !revert && gas >= 0;
[L8688]  CALL        call CorralChoice_HKExCoin(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != HKExCoin;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND FALSE  !(choice == 16)
[L8572]  COND FALSE  !(choice == 15)
[L8578]  COND FALSE  !(choice == 14)
[L8585]  COND TRUE   choice == 13
[L8586]              gas := gas - 21000;
[L8587]  COND TRUE   gas >= 0
[L8588]              assume _value_s680 >= 0 && _value_s680 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8589]              assume msgvalue_MSG == 0;
[L8590]  CALL        call __ret_0_approve := approve~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L1834]              havoc __exception;
[L1835]              revert := false;
[L1836]  COND FALSE  !(__exception)
[L1868]  CALL        call __ret_0_ := approve~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L4859]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4859]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4860]  COND FALSE  !(revert)
[L4863]  COND TRUE   DType[this] == HKExCoin
[L4864]  CALL        call __var_15 := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L4448]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s443];
[L4449]              allowed_StandardToken[this][msgsender_MSG][_spender_s443] := _value_s443;
[L4450]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s443];
[L4451]              assert { :EventEmitted "Approval_StandardToken" } true;
[L4452]              __ret_0_ := true;
[L4864]  RET         call __var_15 := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L4865]  COND FALSE  !(revert)
[L4876]              __ret_0_ := __var_15;
[L1868]  RET         call __ret_0_ := approve~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L1869]              assume !revert && gas >= 0;
[L8590]  RET         call __ret_0_approve := approve~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L8688]  RET         call CorralChoice_HKExCoin(this);
[L8688]  CALL        call CorralChoice_HKExCoin(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != HKExCoin;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND TRUE   choice == 16
[L8566]              gas := gas - 21000;
[L8567]  COND TRUE   gas >= 0
[L8568]              assume _value_s828 >= 0 && _value_s828 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8569]              assume msgvalue_MSG == 0;
[L8570]  CALL        call __ret_0_transfer := transfer~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L2170]              havoc __exception;
[L2171]              revert := false;
[L2172]  COND FALSE  !(__exception)
[L2204]  CALL        call __ret_0_ := transfer~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L5147]  CALL        call __var_24 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s828);
[L5328]  COND FALSE  !(sub_value_s949 == 0)
[L5332]  COND FALSE  !(balances_BasicToken[this][sender_s949] < sub_value_s949)
[L5336]  COND TRUE   alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s949] == false
[L5337]  CALL        call __var_30 := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L5337]  RET         call __var_30 := FreshRefGenerator__success();
[L5338]  COND FALSE  !(revert)
[L5341]              assume Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == 0;
[L5342]              alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s949] := true;
[L5343]              assume M_int_Ref[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == zerointRefArr();
[L5344]              assume M_Ref_Ref[allocations_HKExCoin[this]][sender_s949] == __var_30;
[L5345]              assume sum[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == 0;
[L5347]  COND TRUE   Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == 0
[L5348]              __ret_0_ := true;
[L5147]  RET         call __var_24 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s828);
[L5148]  COND FALSE  !(revert)
[L5151]  COND FALSE  !(!__var_24)
[L5155]  CALL        call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5554]              total_lockamount_s1052 := 0;
[L5555]              total_unlockamount_s1052 := 0;
[L5556]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5567]              j_s1052 := 0;
[L5568]  COND FALSE  !(j_s1052 < Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]])
[L5633]  COND FALSE  !(total_unlockamount_s1052 > 0)
[L5636]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5647]  COND FALSE  !(total_lockamount_s1052 == 0 && Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]] > 0)
[L5155]  RET         call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5156]  COND FALSE  !(revert)
[L5159]  COND TRUE   DType[this] == HKExCoin
[L5160]  CALL        call __var_25 := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L4759]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4759]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  COND TRUE   DType[this] == HKExCoin
[L4764]  CALL        call __var_11 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s641, _value_s641);
[L4208]              __var_2 := null;
[L4209]  COND FALSE  !(!(_to_s266 != null))
[L4213]  COND FALSE  !(!(_value_s266 <= balances_BasicToken[this][msgsender_MSG]))
[L4217]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s266);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4217]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s266);
[L4218]  COND FALSE  !(revert)
[L4221]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L4222]              balances_BasicToken[this][msgsender_MSG] := __var_3;
[L4223]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L4224]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s266], _value_s266);
[L3942]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              assert c_s92 >= a_s92;
[L3944]              c_s92 := c_s92;
[L4224]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s266], _value_s266);
[L4225]  COND FALSE  !(revert)
[L4228]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s266];
[L4229]              balances_BasicToken[this][_to_s266] := __var_4;
[L4230]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s266];
[L4231]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L4232]              __ret_0_ := true;
[L4764]  RET         call __var_11 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s641, _value_s641);
[L4765]  COND FALSE  !(revert)
[L4776]              __ret_0_ := __var_11;
[L5160]  RET         call __var_25 := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L5161]  COND FALSE  !(revert)
[L5167]              __ret_0_ := __var_25;
[L2204]  RET         call __ret_0_ := transfer~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L2205]              assume !revert && gas >= 0;
[L8570]  RET         call __ret_0_transfer := transfer~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L8688]  RET         call CorralChoice_HKExCoin(this);
[L8688]  CALL        call CorralChoice_HKExCoin(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != HKExCoin;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND FALSE  !(choice == 16)
[L8572]  COND FALSE  !(choice == 15)
[L8578]  COND TRUE   choice == 14
[L8579]              gas := gas - 21000;
[L8580]  COND TRUE   gas >= 0
[L8581]              assume _value_s858 >= 0 && _value_s858 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8582]              assume msgvalue_MSG == 0;
[L8583]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s858 != _to_s858 && ((_value_s858 > balances_BasicToken[this][_from_s858] || _value_s858 > allowed_StandardToken[this][_from_s858][msgsender_MSG]) || balances_BasicToken[this][_to_s858] + _value_s858 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s858 >= 0) && _value_s858 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s858] >= 0) && balances_BasicToken[this][_to_s858] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s858] >= 0) && balances_BasicToken[this][_from_s858] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s858][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s858][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_HKExCoin0 := true;
[L2]                 call_transferFrom_HKExCoin0 := false;
[L2]                 revert := revert_hold;
[L2250]              havoc __exception;
[L2251]              revert := false;
[L2252]  COND FALSE  !(__exception)
[L2284]  CALL        call __ret_0_ := transferFrom~address~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5205]  CALL        call __var_27 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5328]  COND FALSE  !(sub_value_s949 == 0)
[L5332]  COND FALSE  !(balances_BasicToken[this][sender_s949] < sub_value_s949)
[L5336]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s949] == false)
[L5347]  COND TRUE   Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == 0
[L5348]              __ret_0_ := true;
[L5205]  RET         call __var_27 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5206]  COND FALSE  !(revert)
[L5209]  COND FALSE  !(!__var_27)
[L5213]  CALL        call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858);
[L5554]              total_lockamount_s1052 := 0;
[L5555]              total_unlockamount_s1052 := 0;
[L5556]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5567]              j_s1052 := 0;
[L5568]  COND FALSE  !(j_s1052 < Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]])
[L5633]  COND FALSE  !(total_unlockamount_s1052 > 0)
[L5636]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5647]  COND FALSE  !(total_lockamount_s1052 == 0 && Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]] > 0)
[L5213]  RET         call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858);
[L5214]  COND FALSE  !(revert)
[L5217]  COND TRUE   DType[this] == HKExCoin
[L5218]  CALL        call __var_28 := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L4809]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4809]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]  COND FALSE  !(revert)
[L4813]  COND TRUE   DType[this] == HKExCoin
[L4814]  CALL        call __var_13 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s662, _to_s662, _value_s662);
[L4398]              __var_5 := null;
[L4399]  COND FALSE  !(!(_to_s415 != null))
[L4403]  COND FALSE  !(!(_value_s415 <= balances_BasicToken[this][_from_s415]))
[L4407]  COND FALSE  !(!(_value_s415 <= allowed_StandardToken[this][_from_s415][msgsender_MSG]))
[L4411]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s415], _value_s415);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4411]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s415], _value_s415);
[L4412]  COND FALSE  !(revert)
[L4415]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s415];
[L4416]              balances_BasicToken[this][_from_s415] := __var_6;
[L4417]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s415];
[L4418]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s415], _value_s415);
[L3942]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              assert c_s92 >= a_s92;
[L3944]              c_s92 := c_s92;
[L4418]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s415], _value_s415);
[L4419]  COND FALSE  !(revert)
[L4422]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s415];
[L4423]              balances_BasicToken[this][_to_s415] := __var_7;
[L4424]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s415];
[L4425]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s415][msgsender_MSG], _value_s415);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4425]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s415][msgsender_MSG], _value_s415);
[L4426]  COND FALSE  !(revert)
[L4429]              sum_allowed1[_from_s415] := sum_allowed1[_from_s415] - allowed_StandardToken[this][_from_s415][msgsender_MSG];
[L4430]              allowed_StandardToken[this][_from_s415][msgsender_MSG] := __var_8;
[L4431]              sum_allowed1[_from_s415] := sum_allowed1[_from_s415] + allowed_StandardToken[this][_from_s415][msgsender_MSG];
[L4432]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L4433]              __ret_0_ := true;
[L4814]  RET         call __var_13 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s662, _to_s662, _value_s662);
[L4815]  COND FALSE  !(revert)
[L4826]              __ret_0_ := __var_13;
[L5218]  RET         call __var_28 := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5219]  COND FALSE  !(revert)
[L5225]              __ret_0_ := __var_28;
[L2284]  RET         call __ret_0_ := transferFrom~address~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2285]              assume !revert && gas >= 0;
[L8583]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L8688]  RET         call CorralChoice_HKExCoin(this);

Loop:
[L8688]  CALL        call CorralChoice_HKExCoin(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != HKExCoin;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND FALSE  !(choice == 16)
[L8572]  COND FALSE  !(choice == 15)
[L8578]  COND TRUE   choice == 14
[L8579]              gas := gas - 21000;
[L8580]  COND TRUE   gas >= 0
[L8581]              assume _value_s858 >= 0 && _value_s858 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8582]              assume msgvalue_MSG == 0;
[L8583]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s858 != _to_s858 && ((_value_s858 > balances_BasicToken[this][_from_s858] || _value_s858 > allowed_StandardToken[this][_from_s858][msgsender_MSG]) || balances_BasicToken[this][_to_s858] + _value_s858 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s858 >= 0) && _value_s858 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s858] >= 0) && balances_BasicToken[this][_to_s858] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s858] >= 0) && balances_BasicToken[this][_from_s858] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s858][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s858][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_HKExCoin0 := true;
[L2]                 call_transferFrom_HKExCoin0 := false;
[L2]                 revert := revert_hold;
[L2250]              havoc __exception;
[L2251]              revert := false;
[L2252]  COND FALSE  !(__exception)
[L2284]  CALL        call __ret_0_ := transferFrom~address~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5205]  CALL        call __var_27 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5328]  COND FALSE  !(sub_value_s949 == 0)
[L5332]  COND FALSE  !(balances_BasicToken[this][sender_s949] < sub_value_s949)
[L5336]  COND TRUE   alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s949] == false
[L5337]  CALL        call __var_30 := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L5337]  RET         call __var_30 := FreshRefGenerator__success();
[L5338]  COND FALSE  !(revert)
[L5341]              assume Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == 0;
[L5342]              alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s949] := true;
[L5343]              assume M_int_Ref[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == zerointRefArr();
[L5344]              assume M_Ref_Ref[allocations_HKExCoin[this]][sender_s949] == __var_30;
[L5345]              assume sum[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == 0;
[L5347]  COND TRUE   Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == 0
[L5348]              __ret_0_ := true;
[L5205]  RET         call __var_27 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5206]  COND FALSE  !(revert)
[L5209]  COND FALSE  !(!__var_27)
[L5213]  CALL        call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858);
[L5554]              total_lockamount_s1052 := 0;
[L5555]              total_unlockamount_s1052 := 0;
[L5556]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5567]              j_s1052 := 0;
[L5568]  COND FALSE  !(j_s1052 < Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]])
[L5633]  COND FALSE  !(total_unlockamount_s1052 > 0)
[L5636]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5647]  COND FALSE  !(total_lockamount_s1052 == 0 && Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]] > 0)
[L5213]  RET         call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858);
[L5214]  COND FALSE  !(revert)
[L5217]  COND TRUE   DType[this] == HKExCoin
[L5218]  CALL        call __var_28 := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L4809]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4809]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]  COND FALSE  !(revert)
[L4813]  COND TRUE   DType[this] == HKExCoin
[L4814]  CALL        call __var_13 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s662, _to_s662, _value_s662);
[L4398]              __var_5 := null;
[L4399]  COND FALSE  !(!(_to_s415 != null))
[L4403]  COND FALSE  !(!(_value_s415 <= balances_BasicToken[this][_from_s415]))
[L4407]  COND FALSE  !(!(_value_s415 <= allowed_StandardToken[this][_from_s415][msgsender_MSG]))
[L4411]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s415], _value_s415);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4411]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s415], _value_s415);
[L4412]  COND FALSE  !(revert)
[L4415]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s415];
[L4416]              balances_BasicToken[this][_from_s415] := __var_6;
[L4417]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s415];
[L4418]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s415], _value_s415);
[L3942]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              assert c_s92 >= a_s92;
[L3944]              c_s92 := c_s92;
[L4418]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s415], _value_s415);
[L4419]  COND FALSE  !(revert)
[L4422]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s415];
[L4423]              balances_BasicToken[this][_to_s415] := __var_7;
[L4424]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s415];
[L4425]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s415][msgsender_MSG], _value_s415);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4425]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s415][msgsender_MSG], _value_s415);
[L4426]  COND FALSE  !(revert)
[L4429]              sum_allowed1[_from_s415] := sum_allowed1[_from_s415] - allowed_StandardToken[this][_from_s415][msgsender_MSG];
[L4430]              allowed_StandardToken[this][_from_s415][msgsender_MSG] := __var_8;
[L4431]              sum_allowed1[_from_s415] := sum_allowed1[_from_s415] + allowed_StandardToken[this][_from_s415][msgsender_MSG];
[L4432]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L4433]              __ret_0_ := true;
[L4814]  RET         call __var_13 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s662, _to_s662, _value_s662);
[L4815]  COND FALSE  !(revert)
[L4826]              __ret_0_ := __var_13;
[L5218]  RET         call __var_28 := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5219]  COND FALSE  !(revert)
[L5225]              __ret_0_ := __var_28;
[L2284]  RET         call __ret_0_ := transferFrom~address~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2285]              assume !revert && gas >= 0;
[L8583]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L8688]  RET         call CorralChoice_HKExCoin(this);

[2020-11-25 17:44:55,637 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:44:55,637 INFO  L82        PathProgramCache]: Analyzing trace with hash 446559717, now seen corresponding path program 1 times
[2020-11-25 17:44:55,638 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:44:55,677 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:44:56,057 INFO  L134       CoverageAnalysis]: Checked inductivity of 1182 backedges. 3 proven. 0 refuted. 0 times theorem prover too weak. 1179 trivial. 0 not checked.
[2020-11-25 17:44:56,057 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:44:56,057 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [16] imperfect sequences [] total 16
[2020-11-25 17:44:56,057 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:44:56,057 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-11-25 17:44:56,058 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=36, Invalid=204, Unknown=0, NotChecked=0, Total=240
[2020-11-25 17:44:56,058 INFO  L87              Difference]: Start difference. First operand 5724 states and 6587 transitions. cyclomatic complexity: 892 Second operand 16 states.
[2020-11-25 17:44:58,848 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:44:58,848 INFO  L93              Difference]: Finished difference Result 3420 states and 3961 transitions.
[2020-11-25 17:44:58,848 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-11-25 17:44:58,848 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3420 states and 3961 transitions.
[2020-11-25 17:44:58,855 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 17:44:58,855 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3420 states to 0 states and 0 transitions.
[2020-11-25 17:44:58,855 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 17:44:58,855 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 17:44:58,855 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 17:44:58,855 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:44:58,855 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 17:44:58,855 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 17:44:58,855 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 17:44:58,855 INFO  L445         BuchiCegarLoop]: ======== Iteration 18============
[2020-11-25 17:44:58,855 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 17:44:58,855 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 17:44:58,855 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 17:44:58,858 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 05:44:58 BasicIcfg
[2020-11-25 17:44:58,858 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 17:44:58,858 INFO  L168              Benchmark]: Toolchain (without parser) took 39091.51 ms. Allocated memory was 1.0 GB in the beginning and 3.3 GB in the end (delta: 2.2 GB). Free memory was 924.5 MB in the beginning and 2.1 GB in the end (delta: -1.2 GB). Peak memory consumption was 1.1 GB. Max. memory is 15.3 GB.
[2020-11-25 17:44:58,859 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 17:44:58,860 INFO  L168              Benchmark]: Boogie Preprocessor took 141.34 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 908.4 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-25 17:44:58,860 INFO  L168              Benchmark]: UtopiaSpecLang took 76.53 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 897.6 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 17:44:58,860 INFO  L168              Benchmark]: Boogie Printer took 24.59 ms. Allocated memory is still 1.0 GB. Free memory was 897.6 MB in the beginning and 892.2 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 17:44:58,860 INFO  L168              Benchmark]: RCFGBuilder took 1259.32 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 74.4 MB). Free memory was 892.2 MB in the beginning and 928.0 MB in the end (delta: -35.8 MB). Peak memory consumption was 181.8 MB. Max. memory is 15.3 GB.
[2020-11-25 17:44:58,861 INFO  L168              Benchmark]: UtopiaLTL2Aut took 36.50 ms. Allocated memory is still 1.1 GB. Free memory was 928.0 MB in the beginning and 924.5 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-25 17:44:58,861 INFO  L168              Benchmark]: BÃ¼chi Program Product took 2526.68 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 181.4 MB). Free memory was 924.5 MB in the beginning and 1.0 GB in the end (delta: -84.0 MB). Peak memory consumption was 501.5 MB. Max. memory is 15.3 GB.
[2020-11-25 17:44:58,862 INFO  L168              Benchmark]: BlockEncodingV2 took 265.74 ms. Allocated memory is still 1.3 GB. Free memory was 1.0 GB in the beginning and 897.1 MB in the end (delta: 111.4 MB). Peak memory consumption was 111.4 MB. Max. memory is 15.3 GB.
[2020-11-25 17:44:58,862 INFO  L168              Benchmark]: BuchiAutomizer took 34757.65 ms. Allocated memory was 1.3 GB in the beginning and 3.3 GB in the end (delta: 2.0 GB). Free memory was 897.1 MB in the beginning and 2.1 GB in the end (delta: -1.2 GB). Peak memory consumption was 801.2 MB. Max. memory is 15.3 GB.
[2020-11-25 17:44:58,865 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    8058 locations, 14484 edges
  - StatisticsResult: Encoded RCFG
    7930 locations, 14162 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 141.34 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 908.4 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 76.53 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 897.6 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 24.59 ms. Allocated memory is still 1.0 GB. Free memory was 897.6 MB in the beginning and 892.2 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1259.32 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 74.4 MB). Free memory was 892.2 MB in the beginning and 928.0 MB in the end (delta: -35.8 MB). Peak memory consumption was 181.8 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 36.50 ms. Allocated memory is still 1.1 GB. Free memory was 928.0 MB in the beginning and 924.5 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 2526.68 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 181.4 MB). Free memory was 924.5 MB in the beginning and 1.0 GB in the end (delta: -84.0 MB). Peak memory consumption was 501.5 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 265.74 ms. Allocated memory is still 1.3 GB. Free memory was 1.0 GB in the beginning and 897.1 MB in the end (delta: 111.4 MB). Peak memory consumption was 111.4 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 34757.65 ms. Allocated memory was 1.3 GB in the beginning and 3.3 GB in the end (delta: 2.0 GB). Free memory was 897.1 MB in the beginning and 2.1 GB in the end (delta: -1.2 GB). Peak memory consumption was 801.2 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    3261 locations, 4459 edges
  - StatisticsResult: BuchiProgram size
    8058 locations, 14484 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 17 terminating modules (17 trivial, 0 deterministic, 0 nondeterministic). 17 modules have a trivial ranking function, the largest among these consists of 28 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 34.7s and 18 iterations.  TraceHistogramMax:12. Analysis of lassos took 4.7s. Construction of modules took 21.4s. BÃ¼chi inclusion checks took 6.9s. Highest rank in rank-based complementation 0. Minimization of det autom 17. Minimization of nondet autom 0. Automata minimization 0.7s AutomataMinimizationTime, 16 MinimizatonAttempts, 1561 StatesRemovedByMinimization, 9 NontrivialMinimizations. Non-live state removal took 0.4s Buchi closure took 0.0s. Biggest automaton had 5946 states and ocurred in iteration 8.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 84692 SDtfs, 55700 SDslu, 173205 SDs, 0 SdLazy, 347531 SolverSat, 8062 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 21.4s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU17 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transferFrom_HKExCoin0) ==> ( <>(fail_transferFrom_HKExCoin0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
