This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 15:05:34,967 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 15:05:34,969 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 15:05:34,979 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 15:05:34,979 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 15:05:34,980 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 15:05:34,982 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 15:05:34,985 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 15:05:34,987 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 15:05:34,988 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 15:05:34,989 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 15:05:34,989 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 15:05:34,990 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 15:05:34,991 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 15:05:34,992 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 15:05:34,993 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 15:05:34,993 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 15:05:34,995 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 15:05:34,996 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 15:05:34,997 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 15:05:34,997 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 15:05:34,998 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 15:05:34,999 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 15:05:34,999 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 15:05:34,999 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 15:05:34,999 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 15:05:34,999 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 15:05:35,000 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 15:05:35,000 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 15:05:35,000 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 15:05:35,000 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 15:05:35,001 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 15:05:35,001 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 15:05:35,001 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 15:05:35,002 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 15:05:35,002 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 15:05:35,002 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 15:05:35,002 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 15:05:35,002 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 15:05:35,003 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 15:05:35,003 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 15:05:35,003 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 15:05:35,009 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 15:05:35,009 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 15:05:35,010 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 15:05:35,010 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 15:05:35,010 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 15:05:35,010 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 15:05:35,010 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 15:05:35,010 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 15:05:35,011 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 15:05:35,011 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 15:05:35,011 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 15:05:35,011 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 15:05:35,011 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 15:05:35,011 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 15:05:35,011 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 15:05:35,011 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 15:05:35,011 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 15:05:35,011 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 15:05:35,011 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 15:05:35,012 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 15:05:35,012 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 15:05:35,012 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 15:05:35,012 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 15:05:35,012 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 15:05:35,012 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 15:05:35,012 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 15:05:35,028 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 15:05:35,038 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 15:05:35,040 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 15:05:35,042 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 15:05:35,042 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 15:05:35,042 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/Erc20Base_0x6251e725cd45fb1af99354035a414a2c0890b929_transferfrom-fail.bpl
[2020-11-25 15:05:35,043 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/Erc20Base_0x6251e725cd45fb1af99354035a414a2c0890b929_transferfrom-fail.bpl'
[2020-11-25 15:05:35,130 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 15:05:35,131 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 15:05:35,131 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 15:05:35,131 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 15:05:35,131 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 15:05:35,147 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "Erc20Base_0x6251e725cd45fb1af99354035a414a2c0890b929_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:05:35" (1/1) ...
[2020-11-25 15:05:35,149 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "Erc20Base_0x6251e725cd45fb1af99354035a414a2c0890b929_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:05:35" (1/1) ...
[2020-11-25 15:05:35,176 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "Erc20Base_0x6251e725cd45fb1af99354035a414a2c0890b929_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:05:35" (1/1) ...
[2020-11-25 15:05:35,177 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "Erc20Base_0x6251e725cd45fb1af99354035a414a2c0890b929_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:05:35" (1/1) ...
[2020-11-25 15:05:35,194 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "Erc20Base_0x6251e725cd45fb1af99354035a414a2c0890b929_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:05:35" (1/1) ...
[2020-11-25 15:05:35,204 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "Erc20Base_0x6251e725cd45fb1af99354035a414a2c0890b929_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:05:35" (1/1) ...
[2020-11-25 15:05:35,211 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "Erc20Base_0x6251e725cd45fb1af99354035a414a2c0890b929_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:05:35" (1/1) ...
[2020-11-25 15:05:35,220 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 15:05:35,220 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 15:05:35,220 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 15:05:35,222 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 15:05:35,227 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "Erc20Base_0x6251e725cd45fb1af99354035a414a2c0890b929_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:05:35" (1/1) ...
[2020-11-25 15:05:35,249 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20Token.transferFrom(from, to, value), from != to && (value > balances_ERC20Token[this][from] || value > allowed_ERC20Token[this][from][msg.sender] || balances_ERC20Token[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_ERC20Token[this][to] >= 0 && balances_ERC20Token[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_ERC20Token[this][from] >= 0 &&  balances_ERC20Token[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_ERC20Token[this][from][msg.sender] >= 0 && allowed_ERC20Token[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20Token.transferFrom)))
[2020-11-25 15:05:35,255 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20Token.transferFrom(from, to, value), from != to && (value > balances_ERC20Token[this][from] || value > allowed_ERC20Token[this][from][msg.sender] || balances_ERC20Token[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_ERC20Token[this][to] >= 0 && balances_ERC20Token[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_ERC20Token[this][from] >= 0 &&  balances_ERC20Token[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_ERC20Token[this][from][msg.sender] >= 0 && allowed_ERC20Token[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20Token.transferFrom)))
[2020-11-25 15:05:35,261 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20Token.transferFrom(from, to, value), from != to && (value > balances_ERC20Token[this][from] || value > allowed_ERC20Token[this][from][msg.sender] || balances_ERC20Token[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_ERC20Token[this][to] >= 0 && balances_ERC20Token[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_ERC20Token[this][from] >= 0 &&  balances_ERC20Token[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_ERC20Token[this][from][msg.sender] >= 0 && allowed_ERC20Token[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20Token.transferFrom)))
[2020-11-25 15:05:35,268 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( _from_s426!=_to_s426 && ( ( _value_s426>balances_ERC20Token[this][_from_s426] || _value_s426>allowed_ERC20Token[this][_from_s426][msg.sender] ) || ( balances_ERC20Token[this][_to_s426] + _value_s426 )>=115792089237316195423570985008687907853269984665640564039457584007913129639936 ) ) && _value_s426>=0 ) && _value_s426<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_ERC20Token[this][_to_s426]>=0 ) && balances_ERC20Token[this][_to_s426]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_ERC20Token[this][_from_s426]>=0 ) && balances_ERC20Token[this][_from_s426]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && allowed_ERC20Token[this][_from_s426][msg.sender]>=0 ) && allowed_ERC20Token[this][_from_s426][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[_from_s426,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Token>],IdentifierExpression[_to_s426,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Token>]],BinaryExpression[LOGICOR,BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[_value_s426,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Token>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_ERC20Token,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Token>]]],[IdentifierExpression[_from_s426,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Token>]]]],BinaryExpression[COMPGT,IdentifierExpression[_value_s426,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Token>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_ERC20Token,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Token>]]],[IdentifierExpression[_from_s426,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Token>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Token>]]]]],BinaryExpression[COMPGEQ,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_ERC20Token,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Token>]]],[IdentifierExpression[_to_s426,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Token>]]],IdentifierExpression[_value_s426,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Token>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]],BinaryExpression[COMPGEQ,IdentifierExpression[_value_s426,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Token>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[_value_s426,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Token>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_ERC20Token,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Token>]]],[IdentifierExpression[_to_s426,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Token>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_ERC20Token,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Token>]]],[IdentifierExpression[_to_s426,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Token>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_ERC20Token,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Token>]]],[IdentifierExpression[_from_s426,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Token>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_ERC20Token,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Token>]]],[IdentifierExpression[_from_s426,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Token>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_ERC20Token,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Token>]]],[IdentifierExpression[_from_s426,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Token>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Token>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_ERC20Token,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Token>]]],[IdentifierExpression[_from_s426,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Token>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Token>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 15:05:35,273 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20Token.transferFrom(from, to, value), from != to && (value > balances_ERC20Token[this][from] || value > allowed_ERC20Token[this][from][msg.sender] || balances_ERC20Token[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_ERC20Token[this][to] >= 0 && balances_ERC20Token[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_ERC20Token[this][from] >= 0 &&  balances_ERC20Token[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_ERC20Token[this][from][msg.sender] >= 0 && allowed_ERC20Token[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20Token.transferFrom)))
[2020-11-25 15:05:35,273 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_ERC20Token0) ==> ( <>AP(fail_transferFrom_ERC20Token0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 15:05:35,280 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:05:35 PropertyContainer
[2020-11-25 15:05:35,281 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 15:05:35,281 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 15:05:35,281 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 15:05:35,281 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 15:05:35,282 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Erc20Base_0x6251e725cd45fb1af99354035a414a2c0890b929_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:05:35" (1/2) ...
[2020-11-25 15:05:35,282 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 15:05:35,282 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 15:05:35,295 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:05:35" (2/2) ...
[2020-11-25 15:05:35,295 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 15:05:35,295 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 15:05:35,295 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 15:05:35,295 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 15:05:35,296 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Erc20Base_0x6251e725cd45fb1af99354035a414a2c0890b929_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:05:35" (1/2) ...
[2020-11-25 15:05:35,347 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 15:05:35,348 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 15:05:35,348 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 15:05:35,348 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 15:05:35,348 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 15:05:35,348 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 15:05:35,348 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 15:05:35,348 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 15:05:35,348 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 15:05:35,348 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 15:05:35,348 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 15:05:35,349 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 15:05:35,349 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 15:05:35,349 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 15:05:35,349 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 15:05:35,349 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 15:05:35,349 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 15:05:35,349 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 15:05:35,349 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 15:05:35,350 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned
[2020-11-25 15:05:35,350 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned
[2020-11-25 15:05:35,350 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned
[2020-11-25 15:05:35,350 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned
[2020-11-25 15:05:35,350 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned
[2020-11-25 15:05:35,350 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned
[2020-11-25 15:05:35,350 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Token_ERC20Token_NoBaseCtor__success
[2020-11-25 15:05:35,350 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Token_ERC20Token
[2020-11-25 15:05:35,350 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Token_ERC20Token
[2020-11-25 15:05:35,350 INFO  L130     BoogieDeclarations]: Found specification of procedure setTransferable~bool_ERC20Token
[2020-11-25 15:05:35,350 INFO  L138     BoogieDeclarations]: Found implementation of procedure setTransferable~bool_ERC20Token
[2020-11-25 15:05:35,350 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Token
[2020-11-25 15:05:35,350 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Token
[2020-11-25 15:05:35,351 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Token
[2020-11-25 15:05:35,351 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20Token
[2020-11-25 15:05:35,351 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Token
[2020-11-25 15:05:35,351 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Token
[2020-11-25 15:05:35,351 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Token
[2020-11-25 15:05:35,351 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Token
[2020-11-25 15:05:35,351 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20Token
[2020-11-25 15:05:35,351 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20Token
[2020-11-25 15:05:35,351 INFO  L130     BoogieDeclarations]: Found specification of procedure signature_ERC20Token
[2020-11-25 15:05:35,351 INFO  L138     BoogieDeclarations]: Found implementation of procedure signature_ERC20Token
[2020-11-25 15:05:35,351 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_ERC20Token__success
[2020-11-25 15:05:35,351 INFO  L130     BoogieDeclarations]: Found specification of procedure transferable_ERC20Token
[2020-11-25 15:05:35,351 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferable_ERC20Token
[2020-11-25 15:05:35,351 INFO  L130     BoogieDeclarations]: Found specification of procedure Erc20Base_Erc20Base_NoBaseCtor__success
[2020-11-25 15:05:35,352 INFO  L130     BoogieDeclarations]: Found specification of procedure Erc20Base_Erc20Base
[2020-11-25 15:05:35,352 INFO  L138     BoogieDeclarations]: Found implementation of procedure Erc20Base_Erc20Base
[2020-11-25 15:05:35,352 INFO  L130     BoogieDeclarations]: Found specification of procedure name_Erc20Base
[2020-11-25 15:05:35,352 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_Erc20Base
[2020-11-25 15:05:35,352 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_Erc20Base
[2020-11-25 15:05:35,352 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_Erc20Base
[2020-11-25 15:05:35,352 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_Erc20Base
[2020-11-25 15:05:35,352 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_Erc20Base
[2020-11-25 15:05:35,352 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 15:05:35,352 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 15:05:35,352 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 15:05:35,352 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 15:05:35,352 INFO  L130     BoogieDeclarations]: Found specification of procedure canTransfer_pre__success
[2020-11-25 15:05:35,352 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 15:05:35,353 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 15:05:35,353 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 15:05:35,353 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 15:05:35,353 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Owned
[2020-11-25 15:05:35,353 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Owned
[2020-11-25 15:05:35,353 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Token
[2020-11-25 15:05:35,353 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Token
[2020-11-25 15:05:35,353 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Erc20Base
[2020-11-25 15:05:35,353 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 15:05:35,353 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 15:05:35,353 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 15:05:35,353 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 15:05:35,353 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 15:05:35,354 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 15:05:35,354 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 15:05:35,354 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 15:05:35,354 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 15:05:35,354 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 15:05:35,354 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 15:05:35,354 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 15:05:35,354 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 15:05:35,354 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 15:05:35,354 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 15:05:35,354 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__success
[2020-11-25 15:05:35,354 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__fail
[2020-11-25 15:05:35,355 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__success
[2020-11-25 15:05:35,355 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__fail
[2020-11-25 15:05:35,355 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__success
[2020-11-25 15:05:35,355 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__fail
[2020-11-25 15:05:35,355 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Token_ERC20Token_NoBaseCtor__fail
[2020-11-25 15:05:35,355 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Token_ERC20Token__success
[2020-11-25 15:05:35,355 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Token_ERC20Token__fail
[2020-11-25 15:05:35,355 INFO  L130     BoogieDeclarations]: Found specification of procedure setTransferable~bool_ERC20Token__success
[2020-11-25 15:05:35,355 INFO  L130     BoogieDeclarations]: Found specification of procedure setTransferable~bool_ERC20Token__fail
[2020-11-25 15:05:35,355 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Token__success
[2020-11-25 15:05:35,355 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Token__fail
[2020-11-25 15:05:35,355 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Token__success
[2020-11-25 15:05:35,355 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Token__fail
[2020-11-25 15:05:35,356 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Token__success
[2020-11-25 15:05:35,356 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Token__fail
[2020-11-25 15:05:35,356 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Token__success
[2020-11-25 15:05:35,356 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Token__fail
[2020-11-25 15:05:35,356 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20Token__success
[2020-11-25 15:05:35,356 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20Token__fail
[2020-11-25 15:05:35,356 INFO  L130     BoogieDeclarations]: Found specification of procedure signature_ERC20Token__success
[2020-11-25 15:05:35,356 INFO  L130     BoogieDeclarations]: Found specification of procedure signature_ERC20Token__fail
[2020-11-25 15:05:35,356 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_ERC20Token__fail
[2020-11-25 15:05:35,356 INFO  L130     BoogieDeclarations]: Found specification of procedure transferable_ERC20Token__success
[2020-11-25 15:05:35,356 INFO  L130     BoogieDeclarations]: Found specification of procedure transferable_ERC20Token__fail
[2020-11-25 15:05:35,356 INFO  L130     BoogieDeclarations]: Found specification of procedure Erc20Base_Erc20Base_NoBaseCtor__fail
[2020-11-25 15:05:35,357 INFO  L130     BoogieDeclarations]: Found specification of procedure Erc20Base_Erc20Base__success
[2020-11-25 15:05:35,357 INFO  L130     BoogieDeclarations]: Found specification of procedure Erc20Base_Erc20Base__fail
[2020-11-25 15:05:35,357 INFO  L130     BoogieDeclarations]: Found specification of procedure name_Erc20Base__success
[2020-11-25 15:05:35,357 INFO  L130     BoogieDeclarations]: Found specification of procedure name_Erc20Base__fail
[2020-11-25 15:05:35,357 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_Erc20Base__success
[2020-11-25 15:05:35,357 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_Erc20Base__fail
[2020-11-25 15:05:35,357 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_Erc20Base__success
[2020-11-25 15:05:35,357 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_Erc20Base__fail
[2020-11-25 15:05:35,357 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 15:05:35,357 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 15:05:35,358 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 15:05:35,358 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 15:05:35,358 INFO  L130     BoogieDeclarations]: Found specification of procedure canTransfer_pre__fail
[2020-11-25 15:05:35,358 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 15:05:35,358 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 15:05:35,358 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 15:05:35,358 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 15:05:35,358 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 15:05:35,358 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 15:05:35,358 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 15:05:35,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 15:05:35,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 15:05:35,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 15:05:35,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 15:05:35,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 15:05:35,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 15:05:35,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 15:05:35,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 15:05:35,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 15:05:35,360 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 15:05:35,360 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 15:05:35,360 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 15:05:35,360 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 15:05:35,360 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 15:05:35,360 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 15:05:35,360 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__fail
[2020-11-25 15:05:35,360 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__success
[2020-11-25 15:05:35,360 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__fail
[2020-11-25 15:05:35,360 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__success
[2020-11-25 15:05:35,361 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__fail
[2020-11-25 15:05:35,361 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__success
[2020-11-25 15:05:35,361 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Token_ERC20Token_NoBaseCtor__fail
[2020-11-25 15:05:35,361 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Token_ERC20Token_NoBaseCtor__success
[2020-11-25 15:05:35,361 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Token_ERC20Token__fail
[2020-11-25 15:05:35,361 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Token_ERC20Token__success
[2020-11-25 15:05:35,361 INFO  L138     BoogieDeclarations]: Found implementation of procedure setTransferable~bool_ERC20Token__fail
[2020-11-25 15:05:35,361 INFO  L138     BoogieDeclarations]: Found implementation of procedure setTransferable~bool_ERC20Token__success
[2020-11-25 15:05:35,361 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Token__fail
[2020-11-25 15:05:35,362 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Token__success
[2020-11-25 15:05:35,362 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20Token__fail
[2020-11-25 15:05:35,362 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20Token__success
[2020-11-25 15:05:35,362 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Token__fail
[2020-11-25 15:05:35,362 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Token__success
[2020-11-25 15:05:35,362 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Token__fail
[2020-11-25 15:05:35,362 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Token__success
[2020-11-25 15:05:35,362 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20Token__fail
[2020-11-25 15:05:35,362 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20Token__success
[2020-11-25 15:05:35,362 INFO  L138     BoogieDeclarations]: Found implementation of procedure signature_ERC20Token__fail
[2020-11-25 15:05:35,363 INFO  L138     BoogieDeclarations]: Found implementation of procedure signature_ERC20Token__success
[2020-11-25 15:05:35,363 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_ERC20Token__fail
[2020-11-25 15:05:35,363 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_ERC20Token__success
[2020-11-25 15:05:35,363 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferable_ERC20Token__fail
[2020-11-25 15:05:35,363 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferable_ERC20Token__success
[2020-11-25 15:05:35,363 INFO  L138     BoogieDeclarations]: Found implementation of procedure Erc20Base_Erc20Base_NoBaseCtor__fail
[2020-11-25 15:05:35,363 INFO  L138     BoogieDeclarations]: Found implementation of procedure Erc20Base_Erc20Base_NoBaseCtor__success
[2020-11-25 15:05:35,363 INFO  L138     BoogieDeclarations]: Found implementation of procedure Erc20Base_Erc20Base__fail
[2020-11-25 15:05:35,363 INFO  L138     BoogieDeclarations]: Found implementation of procedure Erc20Base_Erc20Base__success
[2020-11-25 15:05:35,363 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_Erc20Base__fail
[2020-11-25 15:05:35,363 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_Erc20Base__success
[2020-11-25 15:05:35,364 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_Erc20Base__fail
[2020-11-25 15:05:35,364 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_Erc20Base__success
[2020-11-25 15:05:35,364 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_Erc20Base__fail
[2020-11-25 15:05:35,364 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_Erc20Base__success
[2020-11-25 15:05:35,364 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 15:05:35,364 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 15:05:35,364 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 15:05:35,364 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 15:05:35,364 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 15:05:35,364 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 15:05:35,364 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 15:05:35,364 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 15:05:35,365 INFO  L138     BoogieDeclarations]: Found implementation of procedure canTransfer_pre__fail
[2020-11-25 15:05:35,365 INFO  L138     BoogieDeclarations]: Found implementation of procedure canTransfer_pre__success
[2020-11-25 15:05:35,365 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 15:05:35,365 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 15:05:35,365 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 15:05:35,365 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 15:05:35,365 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Owned
[2020-11-25 15:05:35,365 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Owned
[2020-11-25 15:05:35,365 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Token
[2020-11-25 15:05:35,365 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Token
[2020-11-25 15:05:35,365 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Erc20Base
[2020-11-25 15:05:35,366 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 15:05:35,366 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 15:05:35,366 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 15:05:35,735 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 15:05:35,736 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 15:05:35,947 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 15:05:35,947 INFO  L286             CfgBuilder]: Removed 5 assue(true) statements.
[2020-11-25 15:05:35,950 INFO  L202        PluginConnector]: Adding new model Erc20Base_0x6251e725cd45fb1af99354035a414a2c0890b929_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:05:35 BoogieIcfgContainer
[2020-11-25 15:05:35,950 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:05:35" (2/2) ...
[2020-11-25 15:05:35,950 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 15:05:35,950 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@a8cbeb5 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:05:35, skipping insertion in model container
[2020-11-25 15:05:35,950 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 15:05:35,951 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 15:05:35,951 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 15:05:35,952 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 15:05:35,952 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Erc20Base_0x6251e725cd45fb1af99354035a414a2c0890b929_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:05:35" (1/3) ...
[2020-11-25 15:05:35,953 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@59c6fca6 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:05:35, skipping insertion in model container
[2020-11-25 15:05:35,953 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:05:35" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 15:05:35,994 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:05:35 NWAContainer
[2020-11-25 15:05:35,994 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 15:05:35,994 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 15:05:35,995 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 15:05:35,995 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 15:05:35,996 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Erc20Base_0x6251e725cd45fb1af99354035a414a2c0890b929_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:05:35" (3/4) ...
[2020-11-25 15:05:35,997 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@4b3da933 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:05:35, skipping insertion in model container
[2020-11-25 15:05:35,997 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:05:35" (4/4) ...
[2020-11-25 15:05:36,000 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 15:05:36,003 INFO  L110   BuchiProductObserver]: Initial RCFG 1320 locations, 1713 edges
[2020-11-25 15:05:36,003 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 15:05:36,013 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 15:05:37,127 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 15:05:37,131 INFO  L110   BuchiProductObserver]: BuchiProgram size 3200 locations, 5600 edges
[2020-11-25 15:05:37,132 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:05:37 BoogieIcfgContainer
[2020-11-25 15:05:37,132 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 15:05:37,132 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 15:05:37,132 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 15:05:37,133 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 15:05:37,134 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:05:37" (1/1) ...
[2020-11-25 15:05:37,203 INFO  L313           BlockEncoder]: Initial Icfg 3200 locations, 5600 edges
[2020-11-25 15:05:37,203 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 15:05:37,203 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 15:05:37,204 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 15:05:37,204 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 15:05:37,214 INFO  L70    emoveInfeasibleEdges]: Removed 51 edges and 13 locations because of local infeasibility
[2020-11-25 15:05:37,220 INFO  L70        RemoveSinkStates]: Removed 44 edges and 22 locations by removing sink states
[2020-11-25 15:05:37,229 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 15:05:37,233 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 15:05:37,235 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 15:05:37,236 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 15:05:37,239 INFO  L313           BlockEncoder]: Encoded RCFG 3145 locations, 5476 edges
[2020-11-25 15:05:37,240 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 03:05:37 BasicIcfg
[2020-11-25 15:05:37,240 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 15:05:37,240 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 15:05:37,240 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 15:05:37,242 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 15:05:37,242 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 15:05:37,242 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Erc20Base_0x6251e725cd45fb1af99354035a414a2c0890b929_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:05:35" (1/6) ...
[2020-11-25 15:05:37,244 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@485f996e and model type Erc20Base_0x6251e725cd45fb1af99354035a414a2c0890b929_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 03:05:37, skipping insertion in model container
[2020-11-25 15:05:37,244 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 15:05:37,244 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:05:35" (2/6) ...
[2020-11-25 15:05:37,244 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@485f996e and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 03:05:37, skipping insertion in model container
[2020-11-25 15:05:37,244 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 15:05:37,244 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Erc20Base_0x6251e725cd45fb1af99354035a414a2c0890b929_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:05:35" (3/6) ...
[2020-11-25 15:05:37,244 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@485f996e and model type Erc20Base_0x6251e725cd45fb1af99354035a414a2c0890b929_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 03:05:37, skipping insertion in model container
[2020-11-25 15:05:37,244 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 15:05:37,244 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:05:35" (4/6) ...
[2020-11-25 15:05:37,245 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@485f996e and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 03:05:37, skipping insertion in model container
[2020-11-25 15:05:37,245 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 15:05:37,245 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:05:37" (5/6) ...
[2020-11-25 15:05:37,245 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@485f996e and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 03:05:37, skipping insertion in model container
[2020-11-25 15:05:37,245 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 15:05:37,245 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 03:05:37" (6/6) ...
[2020-11-25 15:05:37,246 INFO  L404   chiAutomizerObserver]: Analyzing ICFG Erc20Base_0x6251e725cd45fb1af99354035a414a2c0890b929_transferfrom-fail.bpl_BEv2
[2020-11-25 15:05:37,282 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 15:05:37,282 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 15:05:37,282 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 15:05:37,282 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 15:05:37,282 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 15:05:37,282 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 15:05:37,282 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 15:05:37,282 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 15:05:37,282 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 15:05:37,315 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3145 states.
[2020-11-25 15:05:37,375 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:05:37,375 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:05:37,375 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:05:37,390 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:05:37,390 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:05:37,390 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 15:05:37,390 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3145 states.
[2020-11-25 15:05:37,408 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:05:37,408 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:05:37,408 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:05:37,410 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:05:37,411 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC20Token0 := false;
[L2]                 call_transferFrom_ERC20Token0 := false;
[L2]     CALL        call main();
[L3815]              assume null == 0;
[L3816]  CALL        call this := FreshRefGenerator__success();
[L1654]              havoc newRef;
[L1655]              assume Alloc[newRef] == false;
[L1656]              Alloc[newRef] := true;
[L1657]              assume newRef != null;
[L3816]  RET         call this := FreshRefGenerator__success();
[L3817]              assume now >= 0;
[L3818]              assume DType[this] == Erc20Base;
[L3819]              assume msgvalue_MSG == 0;
[L3820]              gas := gas - 53000;
[L3821]  CALL        call Erc20Base_Erc20Base(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L951]               havoc __exception;
[L952]               revert := false;
[L953]   COND FALSE  !(__exception)
[L976]   CALL        call Erc20Base_Erc20Base__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L2283]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1792]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1776]              assume msgsender_MSG != null;
[L1777]              Balance[this] := 0;
[L1778]              totalSupply_ERC20[this] := 0;
[L1792]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1793]  COND TRUE   revert
[L2283]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2284]  COND TRUE   revert
[L976]   RET         call Erc20Base_Erc20Base__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L977]               assume !revert && gas >= 0;
[L3821]  RET         call Erc20Base_Erc20Base(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L3822]              assume !revert && gas >= 0;

Loop:
[L3825]  CALL        call CorralChoice_Erc20Base(this);
[L3669]              havoc msgsender_MSG;
[L3670]              havoc msgvalue_MSG;
[L3671]              havoc choice;
[L3672]              havoc __ret_0_totalSupply;
[L3673]              havoc _owner_s338;
[L3674]              havoc balance_s338;
[L3675]              havoc _to_s326;
[L3676]              havoc _value_s326;
[L3677]              havoc __ret_0_transfer;
[L3678]              havoc _owner_s489;
[L3679]              havoc _spender_s489;
[L3680]              havoc __ret_0_allowance;
[L3681]              havoc _from_s426;
[L3682]              havoc _to_s426;
[L3683]              havoc _value_s426;
[L3684]              havoc __ret_0_transferFrom;
[L3685]              havoc _spender_s473;
[L3686]              havoc _value_s473;
[L3687]              havoc success_s473;
[L3688]              havoc __ret_0_owner;
[L3689]              havoc _owner_s185;
[L3690]              havoc _owner_s221;
[L3691]              havoc __ret_0_transferable;
[L3692]              havoc _transferable_s264;
[L3693]              havoc __ret_0_signature;
[L3694]              havoc __ret_0_name;
[L3695]              havoc __ret_0_symbol;
[L3696]              havoc __ret_0_decimals;
[L3697]              havoc _issuer_s560;
[L3698]              havoc _name_s560;
[L3699]              havoc _symbol_s560;
[L3700]              havoc _totalSupplyCap_s560;
[L3701]              havoc _decimals_s560;
[L3702]              havoc tmpNow;
[L3703]              havoc gas;
[L3704]              assume gas > 4000000 && gas <= 8000000;
[L3705]              tmpNow := now;
[L3706]              havoc now;
[L3707]              assume now > tmpNow;
[L3708]              assume msgsender_MSG != null;
[L3709]              assume DType[msgsender_MSG] != SafeMath;
[L3710]              assume DType[msgsender_MSG] != ERC20;
[L3711]              assume DType[msgsender_MSG] != Owned;
[L3712]              assume DType[msgsender_MSG] != ERC20Token;
[L3713]              assume DType[msgsender_MSG] != Erc20Base;
[L3714]              Alloc[msgsender_MSG] := true;
[L3715]  COND TRUE   choice == 14
[L3716]              gas := gas - 21000;
[L3717]  COND FALSE  !(gas >= 0)
[L3825]  RET         call CorralChoice_Erc20Base(this);

[2020-11-25 15:05:37,428 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:05:37,429 INFO  L82        PathProgramCache]: Analyzing trace with hash 1552046213, now seen corresponding path program 1 times
[2020-11-25 15:05:37,434 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:05:37,457 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:05:37,505 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 15:05:37,507 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:05:37,507 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 15:05:37,644 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:05:37,653 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 15:05:37,653 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 15:05:37,654 INFO  L87              Difference]: Start difference. First operand 3145 states. Second operand 4 states.
[2020-11-25 15:05:37,892 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:05:37,892 INFO  L93              Difference]: Finished difference Result 1889 states and 2081 transitions.
[2020-11-25 15:05:37,892 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 15:05:37,893 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1889 states and 2081 transitions.
[2020-11-25 15:05:37,903 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:05:37,916 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1889 states to 1885 states and 2073 transitions.
[2020-11-25 15:05:37,917 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-25 15:05:37,919 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 691
[2020-11-25 15:05:37,919 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1885 states and 2073 transitions.
[2020-11-25 15:05:37,924 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:05:37,924 INFO  L728         BuchiCegarLoop]: Abstraction has 1885 states and 2073 transitions.
[2020-11-25 15:05:37,938 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1885 states and 2073 transitions.
[2020-11-25 15:05:37,976 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1885 to 1885.
[2020-11-25 15:05:37,976 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1885 states.
[2020-11-25 15:05:37,979 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1885 states to 1885 states and 2073 transitions.
[2020-11-25 15:05:37,980 INFO  L751         BuchiCegarLoop]: Abstraction has 1885 states and 2073 transitions.
[2020-11-25 15:05:37,980 INFO  L631         BuchiCegarLoop]: Abstraction has 1885 states and 2073 transitions.
[2020-11-25 15:05:37,980 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 15:05:37,980 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1885 states and 2073 transitions.
[2020-11-25 15:05:37,985 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:05:37,986 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:05:37,986 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:05:37,987 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:05:37,987 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC20Token0 := false;
[L2]                 call_transferFrom_ERC20Token0 := false;
[L2]     CALL        call main();
[L3815]              assume null == 0;
[L3816]  CALL        call this := FreshRefGenerator__success();
[L1654]              havoc newRef;
[L1655]              assume Alloc[newRef] == false;
[L1656]              Alloc[newRef] := true;
[L1657]              assume newRef != null;
[L3816]  RET         call this := FreshRefGenerator__success();
[L3817]              assume now >= 0;
[L3818]              assume DType[this] == Erc20Base;
[L3819]              assume msgvalue_MSG == 0;
[L3820]              gas := gas - 53000;
[L3821]  CALL        call Erc20Base_Erc20Base(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L951]               havoc __exception;
[L952]               revert := false;
[L953]   COND FALSE  !(__exception)
[L976]   CALL        call Erc20Base_Erc20Base__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L2283]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1792]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1776]              assume msgsender_MSG != null;
[L1777]              Balance[this] := 0;
[L1778]              totalSupply_ERC20[this] := 0;
[L1792]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1793]  COND FALSE  !(revert)
[L2283]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2284]  COND TRUE   revert
[L976]   RET         call Erc20Base_Erc20Base__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L977]               assume !revert && gas >= 0;
[L3821]  RET         call Erc20Base_Erc20Base(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L3822]              assume !revert && gas >= 0;
[L3825]  CALL        call CorralChoice_Erc20Base(this);
[L3669]              havoc msgsender_MSG;
[L3670]              havoc msgvalue_MSG;
[L3671]              havoc choice;
[L3672]              havoc __ret_0_totalSupply;
[L3673]              havoc _owner_s338;
[L3674]              havoc balance_s338;
[L3675]              havoc _to_s326;
[L3676]              havoc _value_s326;
[L3677]              havoc __ret_0_transfer;
[L3678]              havoc _owner_s489;
[L3679]              havoc _spender_s489;
[L3680]              havoc __ret_0_allowance;
[L3681]              havoc _from_s426;
[L3682]              havoc _to_s426;
[L3683]              havoc _value_s426;
[L3684]              havoc __ret_0_transferFrom;
[L3685]              havoc _spender_s473;
[L3686]              havoc _value_s473;
[L3687]              havoc success_s473;
[L3688]              havoc __ret_0_owner;
[L3689]              havoc _owner_s185;
[L3690]              havoc _owner_s221;
[L3691]              havoc __ret_0_transferable;
[L3692]              havoc _transferable_s264;
[L3693]              havoc __ret_0_signature;
[L3694]              havoc __ret_0_name;
[L3695]              havoc __ret_0_symbol;
[L3696]              havoc __ret_0_decimals;
[L3697]              havoc _issuer_s560;
[L3698]              havoc _name_s560;
[L3699]              havoc _symbol_s560;
[L3700]              havoc _totalSupplyCap_s560;
[L3701]              havoc _decimals_s560;
[L3702]              havoc tmpNow;
[L3703]              havoc gas;
[L3704]              assume gas > 4000000 && gas <= 8000000;
[L3705]              tmpNow := now;
[L3706]              havoc now;
[L3707]              assume now > tmpNow;
[L3708]              assume msgsender_MSG != null;
[L3709]              assume DType[msgsender_MSG] != SafeMath;
[L3710]              assume DType[msgsender_MSG] != ERC20;
[L3711]              assume DType[msgsender_MSG] != Owned;
[L3712]              assume DType[msgsender_MSG] != ERC20Token;
[L3713]              assume DType[msgsender_MSG] != Erc20Base;
[L3714]              Alloc[msgsender_MSG] := true;
[L3715]  COND FALSE  !(choice == 14)
[L3721]  COND FALSE  !(choice == 13)
[L3727]  COND FALSE  !(choice == 12)
[L3734]  COND FALSE  !(choice == 11)
[L3740]  COND TRUE   choice == 10
[L3741]              gas := gas - 21000;
[L3742]  COND TRUE   gas >= 0
[L3743]              assume _value_s426 >= 0 && _value_s426 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3744]              assume msgvalue_MSG == 0;
[L3745]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _from_s426, _to_s426, _value_s426);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s426 != _to_s426 && ((_value_s426 > balances_ERC20Token[this][_from_s426] || _value_s426 > allowed_ERC20Token[this][_from_s426][msgsender_MSG]) || balances_ERC20Token[this][_to_s426] + _value_s426 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s426 >= 0) && _value_s426 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_ERC20Token[this][_to_s426] >= 0) && balances_ERC20Token[this][_to_s426] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_ERC20Token[this][_from_s426] >= 0) && balances_ERC20Token[this][_from_s426] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_ERC20Token[this][_from_s426][msgsender_MSG] >= 0) && allowed_ERC20Token[this][_from_s426][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Token0 := true;
[L2]                 call_transferFrom_ERC20Token0 := false;
[L2]                 revert := revert_hold;
[L654]               havoc __exception;
[L655]               revert := false;
[L656]   COND FALSE  !(__exception)
[L679]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG, _from_s426, _to_s426, _value_s426);
[L2096]  CALL        call canTransfer_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3249]  COND FALSE  !(!(transferable_ERC20Token[this] == true))
[L2096]  RET         call canTransfer_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2097]  COND TRUE   revert
[L679]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG, _from_s426, _to_s426, _value_s426);
[L680]               assume !revert && gas >= 0;
[L3745]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _from_s426, _to_s426, _value_s426);
[L3825]  RET         call CorralChoice_Erc20Base(this);

Loop:
[L3825]  CALL        call CorralChoice_Erc20Base(this);
[L3669]              havoc msgsender_MSG;
[L3670]              havoc msgvalue_MSG;
[L3671]              havoc choice;
[L3672]              havoc __ret_0_totalSupply;
[L3673]              havoc _owner_s338;
[L3674]              havoc balance_s338;
[L3675]              havoc _to_s326;
[L3676]              havoc _value_s326;
[L3677]              havoc __ret_0_transfer;
[L3678]              havoc _owner_s489;
[L3679]              havoc _spender_s489;
[L3680]              havoc __ret_0_allowance;
[L3681]              havoc _from_s426;
[L3682]              havoc _to_s426;
[L3683]              havoc _value_s426;
[L3684]              havoc __ret_0_transferFrom;
[L3685]              havoc _spender_s473;
[L3686]              havoc _value_s473;
[L3687]              havoc success_s473;
[L3688]              havoc __ret_0_owner;
[L3689]              havoc _owner_s185;
[L3690]              havoc _owner_s221;
[L3691]              havoc __ret_0_transferable;
[L3692]              havoc _transferable_s264;
[L3693]              havoc __ret_0_signature;
[L3694]              havoc __ret_0_name;
[L3695]              havoc __ret_0_symbol;
[L3696]              havoc __ret_0_decimals;
[L3697]              havoc _issuer_s560;
[L3698]              havoc _name_s560;
[L3699]              havoc _symbol_s560;
[L3700]              havoc _totalSupplyCap_s560;
[L3701]              havoc _decimals_s560;
[L3702]              havoc tmpNow;
[L3703]              havoc gas;
[L3704]              assume gas > 4000000 && gas <= 8000000;
[L3705]              tmpNow := now;
[L3706]              havoc now;
[L3707]              assume now > tmpNow;
[L3708]              assume msgsender_MSG != null;
[L3709]              assume DType[msgsender_MSG] != SafeMath;
[L3710]              assume DType[msgsender_MSG] != ERC20;
[L3711]              assume DType[msgsender_MSG] != Owned;
[L3712]              assume DType[msgsender_MSG] != ERC20Token;
[L3713]              assume DType[msgsender_MSG] != Erc20Base;
[L3714]              Alloc[msgsender_MSG] := true;
[L3715]  COND FALSE  !(choice == 14)
[L3721]  COND FALSE  !(choice == 13)
[L3727]  COND FALSE  !(choice == 12)
[L3734]  COND FALSE  !(choice == 11)
[L3740]  COND TRUE   choice == 10
[L3741]              gas := gas - 21000;
[L3742]  COND TRUE   gas >= 0
[L3743]              assume _value_s426 >= 0 && _value_s426 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3744]              assume msgvalue_MSG == 0;
[L3745]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _from_s426, _to_s426, _value_s426);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s426 != _to_s426 && ((_value_s426 > balances_ERC20Token[this][_from_s426] || _value_s426 > allowed_ERC20Token[this][_from_s426][msgsender_MSG]) || balances_ERC20Token[this][_to_s426] + _value_s426 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s426 >= 0) && _value_s426 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_ERC20Token[this][_to_s426] >= 0) && balances_ERC20Token[this][_to_s426] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_ERC20Token[this][_from_s426] >= 0) && balances_ERC20Token[this][_from_s426] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_ERC20Token[this][_from_s426][msgsender_MSG] >= 0) && allowed_ERC20Token[this][_from_s426][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Token0 := true;
[L2]                 call_transferFrom_ERC20Token0 := false;
[L2]                 revert := revert_hold;
[L654]               havoc __exception;
[L655]               revert := false;
[L656]   COND FALSE  !(__exception)
[L679]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG, _from_s426, _to_s426, _value_s426);
[L2096]  CALL        call canTransfer_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3249]  COND FALSE  !(!(transferable_ERC20Token[this] == true))
[L2096]  RET         call canTransfer_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2097]  COND TRUE   revert
[L679]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG, _from_s426, _to_s426, _value_s426);
[L680]               assume !revert && gas >= 0;
[L3745]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _from_s426, _to_s426, _value_s426);
[L3825]  RET         call CorralChoice_Erc20Base(this);

[2020-11-25 15:05:37,991 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:05:37,991 INFO  L82        PathProgramCache]: Analyzing trace with hash 1544833787, now seen corresponding path program 1 times
[2020-11-25 15:05:37,992 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:05:38,003 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:05:38,021 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 15:05:38,021 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:05:38,021 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 15:05:38,023 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:05:38,023 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 15:05:38,023 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 15:05:38,023 INFO  L87              Difference]: Start difference. First operand 1885 states and 2073 transitions. cyclomatic complexity: 190 Second operand 4 states.
[2020-11-25 15:05:38,264 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:05:38,264 INFO  L93              Difference]: Finished difference Result 2370 states and 2607 transitions.
[2020-11-25 15:05:38,264 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 15:05:38,265 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2370 states and 2607 transitions.
[2020-11-25 15:05:38,274 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 15:05:38,283 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2370 states to 2288 states and 2513 transitions.
[2020-11-25 15:05:38,283 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 829
[2020-11-25 15:05:38,284 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 829
[2020-11-25 15:05:38,284 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2288 states and 2513 transitions.
[2020-11-25 15:05:38,287 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:05:38,287 INFO  L728         BuchiCegarLoop]: Abstraction has 2288 states and 2513 transitions.
[2020-11-25 15:05:38,289 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2288 states and 2513 transitions.
[2020-11-25 15:05:38,309 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2288 to 2013.
[2020-11-25 15:05:38,309 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2013 states.
[2020-11-25 15:05:38,312 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2013 states to 2013 states and 2169 transitions.
[2020-11-25 15:05:38,312 INFO  L751         BuchiCegarLoop]: Abstraction has 2013 states and 2169 transitions.
[2020-11-25 15:05:38,312 INFO  L631         BuchiCegarLoop]: Abstraction has 2013 states and 2169 transitions.
[2020-11-25 15:05:38,312 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 15:05:38,312 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2013 states and 2169 transitions.
[2020-11-25 15:05:38,316 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 15:05:38,316 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:05:38,316 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:05:38,318 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:05:38,318 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC20Token0 := false;
[L2]                 call_transferFrom_ERC20Token0 := false;
[L2]     CALL        call main();
[L3815]              assume null == 0;
[L3816]  CALL        call this := FreshRefGenerator__success();
[L1654]              havoc newRef;
[L1655]              assume Alloc[newRef] == false;
[L1656]              Alloc[newRef] := true;
[L1657]              assume newRef != null;
[L3816]  RET         call this := FreshRefGenerator__success();
[L3817]              assume now >= 0;
[L3818]              assume DType[this] == Erc20Base;
[L3819]              assume msgvalue_MSG == 0;
[L3820]              gas := gas - 53000;
[L3821]  CALL        call Erc20Base_Erc20Base(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L951]               havoc __exception;
[L952]               revert := false;
[L953]   COND FALSE  !(__exception)
[L976]   CALL        call Erc20Base_Erc20Base__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L2283]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1792]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1776]              assume msgsender_MSG != null;
[L1777]              Balance[this] := 0;
[L1778]              totalSupply_ERC20[this] := 0;
[L1792]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1793]  COND FALSE  !(revert)
[L2283]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2284]  COND FALSE  !(revert)
[L2287]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560);
[L1840]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _owner_s185);
[L1823]              assume msgsender_MSG != null;
[L1824]              Balance[this] := 0;
[L1825]              owner_Owned[this] := null;
[L1827]              owner_Owned[this] := _owner_s185;
[L1840]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _owner_s185);
[L1841]  COND FALSE  !(revert)
[L2287]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560);
[L2288]  COND FALSE  !(revert)
[L2291]  CALL        call ERC20Token_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG);
[L1929]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1792]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1776]              assume msgsender_MSG != null;
[L1777]              Balance[this] := 0;
[L1778]              totalSupply_ERC20[this] := 0;
[L1792]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1793]  COND FALSE  !(revert)
[L1929]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1930]  COND FALSE  !(revert)
[L1933]  CALL        call ERC20Token_ERC20Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]              assume msgsender_MSG != null;
[L1906]              Balance[this] := 0;
[L1907]              balances_ERC20Token[this] := zeroRefintArr();
[L1908]              sum_balances0[this] := 0;
[L1909]              allowed_ERC20Token[this] := zeroRefRefintArr();
[L1910]              sum_allowed1[this] := 0;
[L1911]              transferable_ERC20Token[this] := true;
[L1933]  RET         call ERC20Token_ERC20Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1934]  COND FALSE  !(revert)
[L2291]  RET         call ERC20Token_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG);
[L2292]  COND FALSE  !(revert)
[L2295]  CALL        call Erc20Base_Erc20Base_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L2245]              assume msgsender_MSG != null;
[L2246]              Balance[this] := 0;
[L2247]              name_Erc20Base[this] := -1000343086;
[L2248]              symbol_Erc20Base[this] := -1000343086;
[L2249]              decimals_Erc20Base[this] := 0;
[L2251]              name_Erc20Base[this] := _name_s560;
[L2252]              symbol_Erc20Base[this] := _symbol_s560;
[L2253]              decimals_Erc20Base[this] := _decimals_s560;
[L2254]              totalSupply_ERC20[this] := _totalSupplyCap_s560;
[L2255]              sum_balances0[this] := sum_balances0[this] - balances_ERC20Token[this][_issuer_s560];
[L2256]              balances_ERC20Token[this][_issuer_s560] := _totalSupplyCap_s560;
[L2257]              sum_balances0[this] := sum_balances0[this] + balances_ERC20Token[this][_issuer_s560];
[L2258]              assert { :EventEmitted "Transfer_Erc20Base" } true;
[L2295]  RET         call Erc20Base_Erc20Base_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L2296]  COND FALSE  !(revert)
[L976]   RET         call Erc20Base_Erc20Base__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L977]               assume !revert && gas >= 0;
[L3821]  RET         call Erc20Base_Erc20Base(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L3822]              assume !revert && gas >= 0;
[L3825]  CALL        call CorralChoice_Erc20Base(this);
[L3669]              havoc msgsender_MSG;
[L3670]              havoc msgvalue_MSG;
[L3671]              havoc choice;
[L3672]              havoc __ret_0_totalSupply;
[L3673]              havoc _owner_s338;
[L3674]              havoc balance_s338;
[L3675]              havoc _to_s326;
[L3676]              havoc _value_s326;
[L3677]              havoc __ret_0_transfer;
[L3678]              havoc _owner_s489;
[L3679]              havoc _spender_s489;
[L3680]              havoc __ret_0_allowance;
[L3681]              havoc _from_s426;
[L3682]              havoc _to_s426;
[L3683]              havoc _value_s426;
[L3684]              havoc __ret_0_transferFrom;
[L3685]              havoc _spender_s473;
[L3686]              havoc _value_s473;
[L3687]              havoc success_s473;
[L3688]              havoc __ret_0_owner;
[L3689]              havoc _owner_s185;
[L3690]              havoc _owner_s221;
[L3691]              havoc __ret_0_transferable;
[L3692]              havoc _transferable_s264;
[L3693]              havoc __ret_0_signature;
[L3694]              havoc __ret_0_name;
[L3695]              havoc __ret_0_symbol;
[L3696]              havoc __ret_0_decimals;
[L3697]              havoc _issuer_s560;
[L3698]              havoc _name_s560;
[L3699]              havoc _symbol_s560;
[L3700]              havoc _totalSupplyCap_s560;
[L3701]              havoc _decimals_s560;
[L3702]              havoc tmpNow;
[L3703]              havoc gas;
[L3704]              assume gas > 4000000 && gas <= 8000000;
[L3705]              tmpNow := now;
[L3706]              havoc now;
[L3707]              assume now > tmpNow;
[L3708]              assume msgsender_MSG != null;
[L3709]              assume DType[msgsender_MSG] != SafeMath;
[L3710]              assume DType[msgsender_MSG] != ERC20;
[L3711]              assume DType[msgsender_MSG] != Owned;
[L3712]              assume DType[msgsender_MSG] != ERC20Token;
[L3713]              assume DType[msgsender_MSG] != Erc20Base;
[L3714]              Alloc[msgsender_MSG] := true;
[L3715]  COND FALSE  !(choice == 14)
[L3721]  COND FALSE  !(choice == 13)
[L3727]  COND FALSE  !(choice == 12)
[L3734]  COND FALSE  !(choice == 11)
[L3740]  COND TRUE   choice == 10
[L3741]              gas := gas - 21000;
[L3742]  COND TRUE   gas >= 0
[L3743]              assume _value_s426 >= 0 && _value_s426 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3744]              assume msgvalue_MSG == 0;
[L3745]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _from_s426, _to_s426, _value_s426);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s426 != _to_s426 && ((_value_s426 > balances_ERC20Token[this][_from_s426] || _value_s426 > allowed_ERC20Token[this][_from_s426][msgsender_MSG]) || balances_ERC20Token[this][_to_s426] + _value_s426 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s426 >= 0) && _value_s426 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_ERC20Token[this][_to_s426] >= 0) && balances_ERC20Token[this][_to_s426] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_ERC20Token[this][_from_s426] >= 0) && balances_ERC20Token[this][_from_s426] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_ERC20Token[this][_from_s426][msgsender_MSG] >= 0) && allowed_ERC20Token[this][_from_s426][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Token0 := true;
[L2]                 call_transferFrom_ERC20Token0 := false;
[L2]                 revert := revert_hold;
[L654]               havoc __exception;
[L655]               revert := false;
[L656]   COND FALSE  !(__exception)
[L679]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG, _from_s426, _to_s426, _value_s426);
[L2096]  CALL        call canTransfer_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3249]  COND FALSE  !(!(transferable_ERC20Token[this] == true))
[L2096]  RET         call canTransfer_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2097]  COND FALSE  !(revert)
[L2100]              __var_5 := null;
[L2101]  COND FALSE  !(!(_to_s426 != null))
[L2105]  COND FALSE  !(!(_value_s426 <= balances_ERC20Token[this][_from_s426]))
[L2109]  COND FALSE  !(!(_value_s426 <= allowed_ERC20Token[this][_from_s426][msgsender_MSG]))
[L2113]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_ERC20Token[this][_from_s426], _value_s426);
[L1742]              assert b_s78 <= a_s78;
[L1743]              __ret_0_ := (a_s78 - b_s78) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2113]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_ERC20Token[this][_from_s426], _value_s426);
[L2114]  COND FALSE  !(revert)
[L2117]              sum_balances0[this] := sum_balances0[this] - balances_ERC20Token[this][_from_s426];
[L2118]              balances_ERC20Token[this][_from_s426] := __var_6;
[L2119]              sum_balances0[this] := sum_balances0[this] + balances_ERC20Token[this][_from_s426];
[L2120]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_ERC20Token[this][_to_s426], _value_s426);
[L1758]              c_s102 := (a_s102 + b_s102) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1759]              assert c_s102 >= a_s102;
[L1760]              __ret_0_ := c_s102;
[L2120]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_ERC20Token[this][_to_s426], _value_s426);
[L2121]  COND FALSE  !(revert)
[L2124]              sum_balances0[this] := sum_balances0[this] - balances_ERC20Token[this][_to_s426];
[L2125]              balances_ERC20Token[this][_to_s426] := __var_7;
[L2126]              sum_balances0[this] := sum_balances0[this] + balances_ERC20Token[this][_to_s426];
[L2127]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_ERC20Token[this][_from_s426][msgsender_MSG], _value_s426);
[L1742]              assert b_s78 <= a_s78;
[L1743]              __ret_0_ := (a_s78 - b_s78) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2127]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_ERC20Token[this][_from_s426][msgsender_MSG], _value_s426);
[L2128]  COND FALSE  !(revert)
[L2131]              sum_allowed1[_from_s426] := sum_allowed1[_from_s426] - allowed_ERC20Token[this][_from_s426][msgsender_MSG];
[L2132]              allowed_ERC20Token[this][_from_s426][msgsender_MSG] := __var_8;
[L2133]              sum_allowed1[_from_s426] := sum_allowed1[_from_s426] + allowed_ERC20Token[this][_from_s426][msgsender_MSG];
[L2134]              assert { :EventEmitted "Transfer_ERC20Token" } true;
[L2135]              __ret_0_ := true;
[L679]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG, _from_s426, _to_s426, _value_s426);
[L680]               assume !revert && gas >= 0;
[L3745]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _from_s426, _to_s426, _value_s426);
[L3825]  RET         call CorralChoice_Erc20Base(this);

Loop:
[L3825]  CALL        call CorralChoice_Erc20Base(this);
[L3669]              havoc msgsender_MSG;
[L3670]              havoc msgvalue_MSG;
[L3671]              havoc choice;
[L3672]              havoc __ret_0_totalSupply;
[L3673]              havoc _owner_s338;
[L3674]              havoc balance_s338;
[L3675]              havoc _to_s326;
[L3676]              havoc _value_s326;
[L3677]              havoc __ret_0_transfer;
[L3678]              havoc _owner_s489;
[L3679]              havoc _spender_s489;
[L3680]              havoc __ret_0_allowance;
[L3681]              havoc _from_s426;
[L3682]              havoc _to_s426;
[L3683]              havoc _value_s426;
[L3684]              havoc __ret_0_transferFrom;
[L3685]              havoc _spender_s473;
[L3686]              havoc _value_s473;
[L3687]              havoc success_s473;
[L3688]              havoc __ret_0_owner;
[L3689]              havoc _owner_s185;
[L3690]              havoc _owner_s221;
[L3691]              havoc __ret_0_transferable;
[L3692]              havoc _transferable_s264;
[L3693]              havoc __ret_0_signature;
[L3694]              havoc __ret_0_name;
[L3695]              havoc __ret_0_symbol;
[L3696]              havoc __ret_0_decimals;
[L3697]              havoc _issuer_s560;
[L3698]              havoc _name_s560;
[L3699]              havoc _symbol_s560;
[L3700]              havoc _totalSupplyCap_s560;
[L3701]              havoc _decimals_s560;
[L3702]              havoc tmpNow;
[L3703]              havoc gas;
[L3704]              assume gas > 4000000 && gas <= 8000000;
[L3705]              tmpNow := now;
[L3706]              havoc now;
[L3707]              assume now > tmpNow;
[L3708]              assume msgsender_MSG != null;
[L3709]              assume DType[msgsender_MSG] != SafeMath;
[L3710]              assume DType[msgsender_MSG] != ERC20;
[L3711]              assume DType[msgsender_MSG] != Owned;
[L3712]              assume DType[msgsender_MSG] != ERC20Token;
[L3713]              assume DType[msgsender_MSG] != Erc20Base;
[L3714]              Alloc[msgsender_MSG] := true;
[L3715]  COND FALSE  !(choice == 14)
[L3721]  COND FALSE  !(choice == 13)
[L3727]  COND FALSE  !(choice == 12)
[L3734]  COND FALSE  !(choice == 11)
[L3740]  COND TRUE   choice == 10
[L3741]              gas := gas - 21000;
[L3742]  COND TRUE   gas >= 0
[L3743]              assume _value_s426 >= 0 && _value_s426 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3744]              assume msgvalue_MSG == 0;
[L3745]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _from_s426, _to_s426, _value_s426);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s426 != _to_s426 && ((_value_s426 > balances_ERC20Token[this][_from_s426] || _value_s426 > allowed_ERC20Token[this][_from_s426][msgsender_MSG]) || balances_ERC20Token[this][_to_s426] + _value_s426 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s426 >= 0) && _value_s426 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_ERC20Token[this][_to_s426] >= 0) && balances_ERC20Token[this][_to_s426] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_ERC20Token[this][_from_s426] >= 0) && balances_ERC20Token[this][_from_s426] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_ERC20Token[this][_from_s426][msgsender_MSG] >= 0) && allowed_ERC20Token[this][_from_s426][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Token0 := true;
[L2]                 call_transferFrom_ERC20Token0 := false;
[L2]                 revert := revert_hold;
[L654]               havoc __exception;
[L655]               revert := false;
[L656]   COND FALSE  !(__exception)
[L679]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG, _from_s426, _to_s426, _value_s426);
[L2096]  CALL        call canTransfer_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3249]  COND FALSE  !(!(transferable_ERC20Token[this] == true))
[L2096]  RET         call canTransfer_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2097]  COND FALSE  !(revert)
[L2100]              __var_5 := null;
[L2101]  COND FALSE  !(!(_to_s426 != null))
[L2105]  COND FALSE  !(!(_value_s426 <= balances_ERC20Token[this][_from_s426]))
[L2109]  COND FALSE  !(!(_value_s426 <= allowed_ERC20Token[this][_from_s426][msgsender_MSG]))
[L2113]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_ERC20Token[this][_from_s426], _value_s426);
[L1742]              assert b_s78 <= a_s78;
[L1743]              __ret_0_ := (a_s78 - b_s78) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2113]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_ERC20Token[this][_from_s426], _value_s426);
[L2114]  COND FALSE  !(revert)
[L2117]              sum_balances0[this] := sum_balances0[this] - balances_ERC20Token[this][_from_s426];
[L2118]              balances_ERC20Token[this][_from_s426] := __var_6;
[L2119]              sum_balances0[this] := sum_balances0[this] + balances_ERC20Token[this][_from_s426];
[L2120]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_ERC20Token[this][_to_s426], _value_s426);
[L1758]              c_s102 := (a_s102 + b_s102) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1759]              assert c_s102 >= a_s102;
[L1760]              __ret_0_ := c_s102;
[L2120]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_ERC20Token[this][_to_s426], _value_s426);
[L2121]  COND FALSE  !(revert)
[L2124]              sum_balances0[this] := sum_balances0[this] - balances_ERC20Token[this][_to_s426];
[L2125]              balances_ERC20Token[this][_to_s426] := __var_7;
[L2126]              sum_balances0[this] := sum_balances0[this] + balances_ERC20Token[this][_to_s426];
[L2127]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_ERC20Token[this][_from_s426][msgsender_MSG], _value_s426);
[L1742]              assert b_s78 <= a_s78;
[L1743]              __ret_0_ := (a_s78 - b_s78) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2127]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_ERC20Token[this][_from_s426][msgsender_MSG], _value_s426);
[L2128]  COND FALSE  !(revert)
[L2131]              sum_allowed1[_from_s426] := sum_allowed1[_from_s426] - allowed_ERC20Token[this][_from_s426][msgsender_MSG];
[L2132]              allowed_ERC20Token[this][_from_s426][msgsender_MSG] := __var_8;
[L2133]              sum_allowed1[_from_s426] := sum_allowed1[_from_s426] + allowed_ERC20Token[this][_from_s426][msgsender_MSG];
[L2134]              assert { :EventEmitted "Transfer_ERC20Token" } true;
[L2135]              __ret_0_ := true;
[L679]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG, _from_s426, _to_s426, _value_s426);
[L680]               assume !revert && gas >= 0;
[L3745]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _from_s426, _to_s426, _value_s426);
[L3825]  RET         call CorralChoice_Erc20Base(this);

[2020-11-25 15:05:38,322 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:05:38,322 INFO  L82        PathProgramCache]: Analyzing trace with hash -1219034529, now seen corresponding path program 1 times
[2020-11-25 15:05:38,322 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:05:38,343 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:05:38,471 INFO  L134       CoverageAnalysis]: Checked inductivity of 15 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 15 trivial. 0 not checked.
[2020-11-25 15:05:38,471 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:05:38,471 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [12] imperfect sequences [] total 12
[2020-11-25 15:05:38,472 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:05:38,472 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-11-25 15:05:38,472 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=131, Unknown=0, NotChecked=0, Total=156
[2020-11-25 15:05:38,472 INFO  L87              Difference]: Start difference. First operand 2013 states and 2169 transitions. cyclomatic complexity: 158 Second operand 13 states.
[2020-11-25 15:05:39,555 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:05:39,555 INFO  L93              Difference]: Finished difference Result 2087 states and 2255 transitions.
[2020-11-25 15:05:39,555 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-11-25 15:05:39,556 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2087 states and 2255 transitions.
[2020-11-25 15:05:39,562 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 15:05:39,569 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2087 states to 2087 states and 2255 transitions.
[2020-11-25 15:05:39,569 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 775
[2020-11-25 15:05:39,569 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 775
[2020-11-25 15:05:39,570 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2087 states and 2255 transitions.
[2020-11-25 15:05:39,571 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:05:39,571 INFO  L728         BuchiCegarLoop]: Abstraction has 2087 states and 2255 transitions.
[2020-11-25 15:05:39,573 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2087 states and 2255 transitions.
[2020-11-25 15:05:39,588 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2087 to 1930.
[2020-11-25 15:05:39,588 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1930 states.
[2020-11-25 15:05:39,591 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1930 states to 1930 states and 2061 transitions.
[2020-11-25 15:05:39,591 INFO  L751         BuchiCegarLoop]: Abstraction has 1930 states and 2061 transitions.
[2020-11-25 15:05:39,591 INFO  L631         BuchiCegarLoop]: Abstraction has 1930 states and 2061 transitions.
[2020-11-25 15:05:39,591 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 15:05:39,591 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1930 states and 2061 transitions.
[2020-11-25 15:05:39,596 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:05:39,597 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:05:39,597 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:05:39,601 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:05:39,601 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC20Token0 := false;
[L2]                 call_transferFrom_ERC20Token0 := false;
[L2]     CALL        call main();
[L3815]              assume null == 0;
[L3816]  CALL        call this := FreshRefGenerator__success();
[L1654]              havoc newRef;
[L1655]              assume Alloc[newRef] == false;
[L1656]              Alloc[newRef] := true;
[L1657]              assume newRef != null;
[L3816]  RET         call this := FreshRefGenerator__success();
[L3817]              assume now >= 0;
[L3818]              assume DType[this] == Erc20Base;
[L3819]              assume msgvalue_MSG == 0;
[L3820]              gas := gas - 53000;
[L3821]  CALL        call Erc20Base_Erc20Base(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L951]               havoc __exception;
[L952]               revert := false;
[L953]   COND FALSE  !(__exception)
[L976]   CALL        call Erc20Base_Erc20Base__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L2283]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1792]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1776]              assume msgsender_MSG != null;
[L1777]              Balance[this] := 0;
[L1778]              totalSupply_ERC20[this] := 0;
[L1792]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1793]  COND FALSE  !(revert)
[L2283]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2284]  COND FALSE  !(revert)
[L2287]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560);
[L1840]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _owner_s185);
[L1823]              assume msgsender_MSG != null;
[L1824]              Balance[this] := 0;
[L1825]              owner_Owned[this] := null;
[L1827]              owner_Owned[this] := _owner_s185;
[L1840]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _owner_s185);
[L1841]  COND FALSE  !(revert)
[L2287]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560);
[L2288]  COND FALSE  !(revert)
[L2291]  CALL        call ERC20Token_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG);
[L1929]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1792]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1776]              assume msgsender_MSG != null;
[L1777]              Balance[this] := 0;
[L1778]              totalSupply_ERC20[this] := 0;
[L1792]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1793]  COND FALSE  !(revert)
[L1929]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1930]  COND FALSE  !(revert)
[L1933]  CALL        call ERC20Token_ERC20Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]              assume msgsender_MSG != null;
[L1906]              Balance[this] := 0;
[L1907]              balances_ERC20Token[this] := zeroRefintArr();
[L1908]              sum_balances0[this] := 0;
[L1909]              allowed_ERC20Token[this] := zeroRefRefintArr();
[L1910]              sum_allowed1[this] := 0;
[L1911]              transferable_ERC20Token[this] := true;
[L1933]  RET         call ERC20Token_ERC20Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1934]  COND FALSE  !(revert)
[L2291]  RET         call ERC20Token_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG);
[L2292]  COND FALSE  !(revert)
[L2295]  CALL        call Erc20Base_Erc20Base_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L2245]              assume msgsender_MSG != null;
[L2246]              Balance[this] := 0;
[L2247]              name_Erc20Base[this] := -1000343086;
[L2248]              symbol_Erc20Base[this] := -1000343086;
[L2249]              decimals_Erc20Base[this] := 0;
[L2251]              name_Erc20Base[this] := _name_s560;
[L2252]              symbol_Erc20Base[this] := _symbol_s560;
[L2253]              decimals_Erc20Base[this] := _decimals_s560;
[L2254]              totalSupply_ERC20[this] := _totalSupplyCap_s560;
[L2255]              sum_balances0[this] := sum_balances0[this] - balances_ERC20Token[this][_issuer_s560];
[L2256]              balances_ERC20Token[this][_issuer_s560] := _totalSupplyCap_s560;
[L2257]              sum_balances0[this] := sum_balances0[this] + balances_ERC20Token[this][_issuer_s560];
[L2258]              assert { :EventEmitted "Transfer_Erc20Base" } true;
[L2295]  RET         call Erc20Base_Erc20Base_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L2296]  COND FALSE  !(revert)
[L976]   RET         call Erc20Base_Erc20Base__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L977]               assume !revert && gas >= 0;
[L3821]  RET         call Erc20Base_Erc20Base(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L3822]              assume !revert && gas >= 0;
[L3825]  CALL        call CorralChoice_Erc20Base(this);
[L3669]              havoc msgsender_MSG;
[L3670]              havoc msgvalue_MSG;
[L3671]              havoc choice;
[L3672]              havoc __ret_0_totalSupply;
[L3673]              havoc _owner_s338;
[L3674]              havoc balance_s338;
[L3675]              havoc _to_s326;
[L3676]              havoc _value_s326;
[L3677]              havoc __ret_0_transfer;
[L3678]              havoc _owner_s489;
[L3679]              havoc _spender_s489;
[L3680]              havoc __ret_0_allowance;
[L3681]              havoc _from_s426;
[L3682]              havoc _to_s426;
[L3683]              havoc _value_s426;
[L3684]              havoc __ret_0_transferFrom;
[L3685]              havoc _spender_s473;
[L3686]              havoc _value_s473;
[L3687]              havoc success_s473;
[L3688]              havoc __ret_0_owner;
[L3689]              havoc _owner_s185;
[L3690]              havoc _owner_s221;
[L3691]              havoc __ret_0_transferable;
[L3692]              havoc _transferable_s264;
[L3693]              havoc __ret_0_signature;
[L3694]              havoc __ret_0_name;
[L3695]              havoc __ret_0_symbol;
[L3696]              havoc __ret_0_decimals;
[L3697]              havoc _issuer_s560;
[L3698]              havoc _name_s560;
[L3699]              havoc _symbol_s560;
[L3700]              havoc _totalSupplyCap_s560;
[L3701]              havoc _decimals_s560;
[L3702]              havoc tmpNow;
[L3703]              havoc gas;
[L3704]              assume gas > 4000000 && gas <= 8000000;
[L3705]              tmpNow := now;
[L3706]              havoc now;
[L3707]              assume now > tmpNow;
[L3708]              assume msgsender_MSG != null;
[L3709]              assume DType[msgsender_MSG] != SafeMath;
[L3710]              assume DType[msgsender_MSG] != ERC20;
[L3711]              assume DType[msgsender_MSG] != Owned;
[L3712]              assume DType[msgsender_MSG] != ERC20Token;
[L3713]              assume DType[msgsender_MSG] != Erc20Base;
[L3714]              Alloc[msgsender_MSG] := true;
[L3715]  COND FALSE  !(choice == 14)
[L3721]  COND FALSE  !(choice == 13)
[L3727]  COND FALSE  !(choice == 12)
[L3734]  COND FALSE  !(choice == 11)
[L3740]  COND FALSE  !(choice == 10)
[L3747]  COND TRUE   choice == 9
[L3748]              gas := gas - 21000;
[L3749]  COND TRUE   gas >= 0
[L3750]              assume _value_s473 >= 0 && _value_s473 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3751]              assume msgvalue_MSG == 0;
[L3752]  CALL        call success_s473 := approve~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L710]               havoc __exception;
[L711]               revert := false;
[L712]   COND FALSE  !(__exception)
[L735]   CALL        call success_s473 := approve~address~uint256_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L2154]  COND FALSE  !(_value_s473 != 0 && allowed_ERC20Token[this][msgsender_MSG][_spender_s473] != 0)
[L2158]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_ERC20Token[this][msgsender_MSG][_spender_s473];
[L2159]              allowed_ERC20Token[this][msgsender_MSG][_spender_s473] := _value_s473;
[L2160]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_ERC20Token[this][msgsender_MSG][_spender_s473];
[L2161]              assert { :EventEmitted "Approval_ERC20Token" } true;
[L2162]              success_s473 := true;
[L735]   RET         call success_s473 := approve~address~uint256_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L736]               assume !revert && gas >= 0;
[L3752]  RET         call success_s473 := approve~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L3825]  RET         call CorralChoice_Erc20Base(this);
[L3825]  CALL        call CorralChoice_Erc20Base(this);
[L3669]              havoc msgsender_MSG;
[L3670]              havoc msgvalue_MSG;
[L3671]              havoc choice;
[L3672]              havoc __ret_0_totalSupply;
[L3673]              havoc _owner_s338;
[L3674]              havoc balance_s338;
[L3675]              havoc _to_s326;
[L3676]              havoc _value_s326;
[L3677]              havoc __ret_0_transfer;
[L3678]              havoc _owner_s489;
[L3679]              havoc _spender_s489;
[L3680]              havoc __ret_0_allowance;
[L3681]              havoc _from_s426;
[L3682]              havoc _to_s426;
[L3683]              havoc _value_s426;
[L3684]              havoc __ret_0_transferFrom;
[L3685]              havoc _spender_s473;
[L3686]              havoc _value_s473;
[L3687]              havoc success_s473;
[L3688]              havoc __ret_0_owner;
[L3689]              havoc _owner_s185;
[L3690]              havoc _owner_s221;
[L3691]              havoc __ret_0_transferable;
[L3692]              havoc _transferable_s264;
[L3693]              havoc __ret_0_signature;
[L3694]              havoc __ret_0_name;
[L3695]              havoc __ret_0_symbol;
[L3696]              havoc __ret_0_decimals;
[L3697]              havoc _issuer_s560;
[L3698]              havoc _name_s560;
[L3699]              havoc _symbol_s560;
[L3700]              havoc _totalSupplyCap_s560;
[L3701]              havoc _decimals_s560;
[L3702]              havoc tmpNow;
[L3703]              havoc gas;
[L3704]              assume gas > 4000000 && gas <= 8000000;
[L3705]              tmpNow := now;
[L3706]              havoc now;
[L3707]              assume now > tmpNow;
[L3708]              assume msgsender_MSG != null;
[L3709]              assume DType[msgsender_MSG] != SafeMath;
[L3710]              assume DType[msgsender_MSG] != ERC20;
[L3711]              assume DType[msgsender_MSG] != Owned;
[L3712]              assume DType[msgsender_MSG] != ERC20Token;
[L3713]              assume DType[msgsender_MSG] != Erc20Base;
[L3714]              Alloc[msgsender_MSG] := true;
[L3715]  COND FALSE  !(choice == 14)
[L3721]  COND FALSE  !(choice == 13)
[L3727]  COND FALSE  !(choice == 12)
[L3734]  COND FALSE  !(choice == 11)
[L3740]  COND TRUE   choice == 10
[L3741]              gas := gas - 21000;
[L3742]  COND TRUE   gas >= 0
[L3743]              assume _value_s426 >= 0 && _value_s426 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3744]              assume msgvalue_MSG == 0;
[L3745]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _from_s426, _to_s426, _value_s426);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s426 != _to_s426 && ((_value_s426 > balances_ERC20Token[this][_from_s426] || _value_s426 > allowed_ERC20Token[this][_from_s426][msgsender_MSG]) || balances_ERC20Token[this][_to_s426] + _value_s426 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s426 >= 0) && _value_s426 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_ERC20Token[this][_to_s426] >= 0) && balances_ERC20Token[this][_to_s426] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_ERC20Token[this][_from_s426] >= 0) && balances_ERC20Token[this][_from_s426] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_ERC20Token[this][_from_s426][msgsender_MSG] >= 0) && allowed_ERC20Token[this][_from_s426][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Token0 := true;
[L2]                 call_transferFrom_ERC20Token0 := false;
[L2]                 revert := revert_hold;
[L654]               havoc __exception;
[L655]               revert := false;
[L656]   COND FALSE  !(__exception)
[L679]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG, _from_s426, _to_s426, _value_s426);
[L2096]  CALL        call canTransfer_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3249]  COND FALSE  !(!(transferable_ERC20Token[this] == true))
[L2096]  RET         call canTransfer_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2097]  COND FALSE  !(revert)
[L2100]              __var_5 := null;
[L2101]  COND FALSE  !(!(_to_s426 != null))
[L2105]  COND FALSE  !(!(_value_s426 <= balances_ERC20Token[this][_from_s426]))
[L2109]  COND FALSE  !(!(_value_s426 <= allowed_ERC20Token[this][_from_s426][msgsender_MSG]))
[L2113]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_ERC20Token[this][_from_s426], _value_s426);
[L1742]              assert b_s78 <= a_s78;
[L1743]              __ret_0_ := (a_s78 - b_s78) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2113]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_ERC20Token[this][_from_s426], _value_s426);
[L2114]  COND FALSE  !(revert)
[L2117]              sum_balances0[this] := sum_balances0[this] - balances_ERC20Token[this][_from_s426];
[L2118]              balances_ERC20Token[this][_from_s426] := __var_6;
[L2119]              sum_balances0[this] := sum_balances0[this] + balances_ERC20Token[this][_from_s426];
[L2120]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_ERC20Token[this][_to_s426], _value_s426);
[L1758]              c_s102 := (a_s102 + b_s102) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1759]              assert c_s102 >= a_s102;
[L1760]              __ret_0_ := c_s102;
[L2120]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_ERC20Token[this][_to_s426], _value_s426);
[L2121]  COND FALSE  !(revert)
[L2124]              sum_balances0[this] := sum_balances0[this] - balances_ERC20Token[this][_to_s426];
[L2125]              balances_ERC20Token[this][_to_s426] := __var_7;
[L2126]              sum_balances0[this] := sum_balances0[this] + balances_ERC20Token[this][_to_s426];
[L2127]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_ERC20Token[this][_from_s426][msgsender_MSG], _value_s426);
[L1742]              assert b_s78 <= a_s78;
[L1743]              __ret_0_ := (a_s78 - b_s78) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2127]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_ERC20Token[this][_from_s426][msgsender_MSG], _value_s426);
[L2128]  COND FALSE  !(revert)
[L2131]              sum_allowed1[_from_s426] := sum_allowed1[_from_s426] - allowed_ERC20Token[this][_from_s426][msgsender_MSG];
[L2132]              allowed_ERC20Token[this][_from_s426][msgsender_MSG] := __var_8;
[L2133]              sum_allowed1[_from_s426] := sum_allowed1[_from_s426] + allowed_ERC20Token[this][_from_s426][msgsender_MSG];
[L2134]              assert { :EventEmitted "Transfer_ERC20Token" } true;
[L2135]              __ret_0_ := true;
[L679]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG, _from_s426, _to_s426, _value_s426);
[L680]               assume !revert && gas >= 0;
[L3745]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _from_s426, _to_s426, _value_s426);
[L3825]  RET         call CorralChoice_Erc20Base(this);

Loop:
[L3825]  CALL        call CorralChoice_Erc20Base(this);
[L3669]              havoc msgsender_MSG;
[L3670]              havoc msgvalue_MSG;
[L3671]              havoc choice;
[L3672]              havoc __ret_0_totalSupply;
[L3673]              havoc _owner_s338;
[L3674]              havoc balance_s338;
[L3675]              havoc _to_s326;
[L3676]              havoc _value_s326;
[L3677]              havoc __ret_0_transfer;
[L3678]              havoc _owner_s489;
[L3679]              havoc _spender_s489;
[L3680]              havoc __ret_0_allowance;
[L3681]              havoc _from_s426;
[L3682]              havoc _to_s426;
[L3683]              havoc _value_s426;
[L3684]              havoc __ret_0_transferFrom;
[L3685]              havoc _spender_s473;
[L3686]              havoc _value_s473;
[L3687]              havoc success_s473;
[L3688]              havoc __ret_0_owner;
[L3689]              havoc _owner_s185;
[L3690]              havoc _owner_s221;
[L3691]              havoc __ret_0_transferable;
[L3692]              havoc _transferable_s264;
[L3693]              havoc __ret_0_signature;
[L3694]              havoc __ret_0_name;
[L3695]              havoc __ret_0_symbol;
[L3696]              havoc __ret_0_decimals;
[L3697]              havoc _issuer_s560;
[L3698]              havoc _name_s560;
[L3699]              havoc _symbol_s560;
[L3700]              havoc _totalSupplyCap_s560;
[L3701]              havoc _decimals_s560;
[L3702]              havoc tmpNow;
[L3703]              havoc gas;
[L3704]              assume gas > 4000000 && gas <= 8000000;
[L3705]              tmpNow := now;
[L3706]              havoc now;
[L3707]              assume now > tmpNow;
[L3708]              assume msgsender_MSG != null;
[L3709]              assume DType[msgsender_MSG] != SafeMath;
[L3710]              assume DType[msgsender_MSG] != ERC20;
[L3711]              assume DType[msgsender_MSG] != Owned;
[L3712]              assume DType[msgsender_MSG] != ERC20Token;
[L3713]              assume DType[msgsender_MSG] != Erc20Base;
[L3714]              Alloc[msgsender_MSG] := true;
[L3715]  COND FALSE  !(choice == 14)
[L3721]  COND FALSE  !(choice == 13)
[L3727]  COND FALSE  !(choice == 12)
[L3734]  COND FALSE  !(choice == 11)
[L3740]  COND TRUE   choice == 10
[L3741]              gas := gas - 21000;
[L3742]  COND TRUE   gas >= 0
[L3743]              assume _value_s426 >= 0 && _value_s426 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3744]              assume msgvalue_MSG == 0;
[L3745]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _from_s426, _to_s426, _value_s426);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s426 != _to_s426 && ((_value_s426 > balances_ERC20Token[this][_from_s426] || _value_s426 > allowed_ERC20Token[this][_from_s426][msgsender_MSG]) || balances_ERC20Token[this][_to_s426] + _value_s426 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s426 >= 0) && _value_s426 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_ERC20Token[this][_to_s426] >= 0) && balances_ERC20Token[this][_to_s426] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_ERC20Token[this][_from_s426] >= 0) && balances_ERC20Token[this][_from_s426] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_ERC20Token[this][_from_s426][msgsender_MSG] >= 0) && allowed_ERC20Token[this][_from_s426][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Token0 := true;
[L2]                 call_transferFrom_ERC20Token0 := false;
[L2]                 revert := revert_hold;
[L654]               havoc __exception;
[L655]               revert := false;
[L656]   COND FALSE  !(__exception)
[L679]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG, _from_s426, _to_s426, _value_s426);
[L2096]  CALL        call canTransfer_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3249]  COND FALSE  !(!(transferable_ERC20Token[this] == true))
[L2096]  RET         call canTransfer_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2097]  COND FALSE  !(revert)
[L2100]              __var_5 := null;
[L2101]  COND FALSE  !(!(_to_s426 != null))
[L2105]  COND FALSE  !(!(_value_s426 <= balances_ERC20Token[this][_from_s426]))
[L2109]  COND FALSE  !(!(_value_s426 <= allowed_ERC20Token[this][_from_s426][msgsender_MSG]))
[L2113]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_ERC20Token[this][_from_s426], _value_s426);
[L1742]              assert b_s78 <= a_s78;
[L1743]              __ret_0_ := (a_s78 - b_s78) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2113]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_ERC20Token[this][_from_s426], _value_s426);
[L2114]  COND FALSE  !(revert)
[L2117]              sum_balances0[this] := sum_balances0[this] - balances_ERC20Token[this][_from_s426];
[L2118]              balances_ERC20Token[this][_from_s426] := __var_6;
[L2119]              sum_balances0[this] := sum_balances0[this] + balances_ERC20Token[this][_from_s426];
[L2120]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_ERC20Token[this][_to_s426], _value_s426);
[L1758]              c_s102 := (a_s102 + b_s102) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1759]              assert c_s102 >= a_s102;
[L1760]              __ret_0_ := c_s102;
[L2120]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_ERC20Token[this][_to_s426], _value_s426);
[L2121]  COND FALSE  !(revert)
[L2124]              sum_balances0[this] := sum_balances0[this] - balances_ERC20Token[this][_to_s426];
[L2125]              balances_ERC20Token[this][_to_s426] := __var_7;
[L2126]              sum_balances0[this] := sum_balances0[this] + balances_ERC20Token[this][_to_s426];
[L2127]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_ERC20Token[this][_from_s426][msgsender_MSG], _value_s426);
[L1742]              assert b_s78 <= a_s78;
[L1743]              __ret_0_ := (a_s78 - b_s78) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2127]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_ERC20Token[this][_from_s426][msgsender_MSG], _value_s426);
[L2128]  COND FALSE  !(revert)
[L2131]              sum_allowed1[_from_s426] := sum_allowed1[_from_s426] - allowed_ERC20Token[this][_from_s426][msgsender_MSG];
[L2132]              allowed_ERC20Token[this][_from_s426][msgsender_MSG] := __var_8;
[L2133]              sum_allowed1[_from_s426] := sum_allowed1[_from_s426] + allowed_ERC20Token[this][_from_s426][msgsender_MSG];
[L2134]              assert { :EventEmitted "Transfer_ERC20Token" } true;
[L2135]              __ret_0_ := true;
[L679]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG, _from_s426, _to_s426, _value_s426);
[L680]               assume !revert && gas >= 0;
[L3745]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _from_s426, _to_s426, _value_s426);
[L3825]  RET         call CorralChoice_Erc20Base(this);

[2020-11-25 15:05:39,606 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:05:39,606 INFO  L82        PathProgramCache]: Analyzing trace with hash 520625065, now seen corresponding path program 1 times
[2020-11-25 15:05:39,607 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:05:39,625 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:05:39,850 INFO  L134       CoverageAnalysis]: Checked inductivity of 68 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 68 trivial. 0 not checked.
[2020-11-25 15:05:39,850 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:05:39,850 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [20] imperfect sequences [] total 20
[2020-11-25 15:05:39,851 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:05:39,851 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 21 interpolants.
[2020-11-25 15:05:39,851 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=55, Invalid=365, Unknown=0, NotChecked=0, Total=420
[2020-11-25 15:05:39,851 INFO  L87              Difference]: Start difference. First operand 1930 states and 2061 transitions. cyclomatic complexity: 134 Second operand 21 states.
[2020-11-25 15:05:41,635 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:05:41,635 INFO  L93              Difference]: Finished difference Result 1986 states and 2140 transitions.
[2020-11-25 15:05:41,635 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 20 states. 
[2020-11-25 15:05:41,635 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1986 states and 2140 transitions.
[2020-11-25 15:05:41,640 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:05:41,645 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1986 states to 1986 states and 2140 transitions.
[2020-11-25 15:05:41,645 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 711
[2020-11-25 15:05:41,645 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 711
[2020-11-25 15:05:41,645 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1986 states and 2140 transitions.
[2020-11-25 15:05:41,647 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:05:41,647 INFO  L728         BuchiCegarLoop]: Abstraction has 1986 states and 2140 transitions.
[2020-11-25 15:05:41,649 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1986 states and 2140 transitions.
[2020-11-25 15:05:41,665 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1986 to 1941.
[2020-11-25 15:05:41,665 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1941 states.
[2020-11-25 15:05:41,667 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1941 states to 1941 states and 2082 transitions.
[2020-11-25 15:05:41,668 INFO  L751         BuchiCegarLoop]: Abstraction has 1941 states and 2082 transitions.
[2020-11-25 15:05:41,668 INFO  L631         BuchiCegarLoop]: Abstraction has 1941 states and 2082 transitions.
[2020-11-25 15:05:41,668 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 15:05:41,668 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1941 states and 2082 transitions.
[2020-11-25 15:05:41,671 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:05:41,671 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:05:41,671 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:05:41,672 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:05:41,672 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC20Token0 := false;
[L2]                 call_transferFrom_ERC20Token0 := false;
[L2]     CALL        call main();
[L3815]              assume null == 0;
[L3816]  CALL        call this := FreshRefGenerator__success();
[L1654]              havoc newRef;
[L1655]              assume Alloc[newRef] == false;
[L1656]              Alloc[newRef] := true;
[L1657]              assume newRef != null;
[L3816]  RET         call this := FreshRefGenerator__success();
[L3817]              assume now >= 0;
[L3818]              assume DType[this] == Erc20Base;
[L3819]              assume msgvalue_MSG == 0;
[L3820]              gas := gas - 53000;
[L3821]  CALL        call Erc20Base_Erc20Base(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L951]               havoc __exception;
[L952]               revert := false;
[L953]   COND TRUE   __exception
[L954]               __tmp__Balance := Balance;
[L955]               __tmp__DType := DType;
[L956]               __tmp__Alloc := Alloc;
[L957]               __tmp__balance_ADDR := balance_ADDR;
[L958]               __tmp__M_Ref_int := M_Ref_int;
[L959]               __tmp__sum_balances0 := sum_balances0;
[L960]               __tmp__alloc_allowed_ERC20Token_lvl0 := alloc_allowed_ERC20Token_lvl0;
[L961]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L962]               __tmp__sum_allowed1 := sum_allowed1;
[L963]               __tmp__Length := Length;
[L964]               __tmp__now := now;
[L965]               __tmp__totalSupply_ERC20 := totalSupply_ERC20;
[L966]               __tmp__owner_Owned := owner_Owned;
[L967]               __tmp__balances_ERC20Token := balances_ERC20Token;
[L968]               __tmp__allowed_ERC20Token := allowed_ERC20Token;
[L969]               __tmp__transferable_ERC20Token := transferable_ERC20Token;
[L970]               __tmp__name_Erc20Base := name_Erc20Base;
[L971]               __tmp__symbol_Erc20Base := symbol_Erc20Base;
[L972]               __tmp__decimals_Erc20Base := decimals_Erc20Base;
[L973]   CALL        call Erc20Base_Erc20Base__fail(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L2263]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L1784]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1767]              assume msgsender_MSG != null;
[L1768]              __tmp__Balance[this] := 0;
[L1769]              __tmp__totalSupply_ERC20[this] := 0;
[L1784]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1785]  COND FALSE  !(revert)
[L2263]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2264]  COND FALSE  !(revert)
[L2267]  CALL        call Owned_Owned__fail(this, msgsender_MSG, msgvalue_MSG, _issuer_s560);
[L1832]  CALL        call Owned_Owned_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _owner_s185);
[L1813]              assume msgsender_MSG != null;
[L1814]              __tmp__Balance[this] := 0;
[L1815]              __tmp__owner_Owned[this] := null;
[L1817]              __tmp__owner_Owned[this] := _owner_s185;
[L1832]  RET         call Owned_Owned_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _owner_s185);
[L1833]  COND FALSE  !(revert)
[L2267]  RET         call Owned_Owned__fail(this, msgsender_MSG, msgvalue_MSG, _issuer_s560);
[L2268]  COND FALSE  !(revert)
[L2271]  CALL        call ERC20Token_ERC20Token__fail(this, msgsender_MSG, msgvalue_MSG);
[L1917]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L1784]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1767]              assume msgsender_MSG != null;
[L1768]              __tmp__Balance[this] := 0;
[L1769]              __tmp__totalSupply_ERC20[this] := 0;
[L1784]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1785]  COND FALSE  !(revert)
[L1917]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L1918]  COND FALSE  !(revert)
[L1921]  CALL        call ERC20Token_ERC20Token_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1892]              assume msgsender_MSG != null;
[L1893]              __tmp__Balance[this] := 0;
[L1894]              __tmp__balances_ERC20Token[this] := zeroRefintArr();
[L1895]              __tmp__sum_balances0[this] := 0;
[L1896]              __tmp__allowed_ERC20Token[this] := zeroRefRefintArr();
[L1897]              __tmp__sum_allowed1[this] := 0;
[L1898]              __tmp__transferable_ERC20Token[this] := true;
[L1921]  RET         call ERC20Token_ERC20Token_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1922]  COND FALSE  !(revert)
[L2271]  RET         call ERC20Token_ERC20Token__fail(this, msgsender_MSG, msgvalue_MSG);
[L2272]  COND FALSE  !(revert)
[L2275]  CALL        call Erc20Base_Erc20Base_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L2227]              assume msgsender_MSG != null;
[L2228]              __tmp__Balance[this] := 0;
[L2229]              __tmp__name_Erc20Base[this] := -1000343086;
[L2230]              __tmp__symbol_Erc20Base[this] := -1000343086;
[L2231]              __tmp__decimals_Erc20Base[this] := 0;
[L2233]              __tmp__name_Erc20Base[this] := _name_s560;
[L2234]              __tmp__symbol_Erc20Base[this] := _symbol_s560;
[L2235]              __tmp__decimals_Erc20Base[this] := _decimals_s560;
[L2236]              __tmp__totalSupply_ERC20[this] := _totalSupplyCap_s560;
[L2237]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_ERC20Token[this][_issuer_s560];
[L2238]              __tmp__balances_ERC20Token[this][_issuer_s560] := _totalSupplyCap_s560;
[L2239]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_ERC20Token[this][_issuer_s560];
[L2275]  RET         call Erc20Base_Erc20Base_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L2276]  COND FALSE  !(revert)
[L973]   RET         call Erc20Base_Erc20Base__fail(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L974]               assume revert || gas < 0;
[L3821]  RET         call Erc20Base_Erc20Base(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L3822]              assume !revert && gas >= 0;
[L3825]  CALL        call CorralChoice_Erc20Base(this);
[L3669]              havoc msgsender_MSG;
[L3670]              havoc msgvalue_MSG;
[L3671]              havoc choice;
[L3672]              havoc __ret_0_totalSupply;
[L3673]              havoc _owner_s338;
[L3674]              havoc balance_s338;
[L3675]              havoc _to_s326;
[L3676]              havoc _value_s326;
[L3677]              havoc __ret_0_transfer;
[L3678]              havoc _owner_s489;
[L3679]              havoc _spender_s489;
[L3680]              havoc __ret_0_allowance;
[L3681]              havoc _from_s426;
[L3682]              havoc _to_s426;
[L3683]              havoc _value_s426;
[L3684]              havoc __ret_0_transferFrom;
[L3685]              havoc _spender_s473;
[L3686]              havoc _value_s473;
[L3687]              havoc success_s473;
[L3688]              havoc __ret_0_owner;
[L3689]              havoc _owner_s185;
[L3690]              havoc _owner_s221;
[L3691]              havoc __ret_0_transferable;
[L3692]              havoc _transferable_s264;
[L3693]              havoc __ret_0_signature;
[L3694]              havoc __ret_0_name;
[L3695]              havoc __ret_0_symbol;
[L3696]              havoc __ret_0_decimals;
[L3697]              havoc _issuer_s560;
[L3698]              havoc _name_s560;
[L3699]              havoc _symbol_s560;
[L3700]              havoc _totalSupplyCap_s560;
[L3701]              havoc _decimals_s560;
[L3702]              havoc tmpNow;
[L3703]              havoc gas;
[L3704]              assume gas > 4000000 && gas <= 8000000;
[L3705]              tmpNow := now;
[L3706]              havoc now;
[L3707]              assume now > tmpNow;
[L3708]              assume msgsender_MSG != null;
[L3709]              assume DType[msgsender_MSG] != SafeMath;
[L3710]              assume DType[msgsender_MSG] != ERC20;
[L3711]              assume DType[msgsender_MSG] != Owned;
[L3712]              assume DType[msgsender_MSG] != ERC20Token;
[L3713]              assume DType[msgsender_MSG] != Erc20Base;
[L3714]              Alloc[msgsender_MSG] := true;
[L3715]  COND FALSE  !(choice == 14)
[L3721]  COND FALSE  !(choice == 13)
[L3727]  COND FALSE  !(choice == 12)
[L3734]  COND FALSE  !(choice == 11)
[L3740]  COND TRUE   choice == 10
[L3741]              gas := gas - 21000;
[L3742]  COND TRUE   gas >= 0
[L3743]              assume _value_s426 >= 0 && _value_s426 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3744]              assume msgvalue_MSG == 0;
[L3745]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _from_s426, _to_s426, _value_s426);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s426 != _to_s426 && ((_value_s426 > balances_ERC20Token[this][_from_s426] || _value_s426 > allowed_ERC20Token[this][_from_s426][msgsender_MSG]) || balances_ERC20Token[this][_to_s426] + _value_s426 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s426 >= 0) && _value_s426 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_ERC20Token[this][_to_s426] >= 0) && balances_ERC20Token[this][_to_s426] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_ERC20Token[this][_from_s426] >= 0) && balances_ERC20Token[this][_from_s426] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_ERC20Token[this][_from_s426][msgsender_MSG] >= 0) && allowed_ERC20Token[this][_from_s426][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Token0 := true;
[L2]                 call_transferFrom_ERC20Token0 := false;
[L2]                 revert := revert_hold;
[L654]               havoc __exception;
[L655]               revert := false;
[L656]   COND FALSE  !(__exception)
[L679]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG, _from_s426, _to_s426, _value_s426);
[L2096]  CALL        call canTransfer_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3249]  COND FALSE  !(!(transferable_ERC20Token[this] == true))
[L2096]  RET         call canTransfer_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2097]  COND FALSE  !(revert)
[L2100]              __var_5 := null;
[L2101]  COND FALSE  !(!(_to_s426 != null))
[L2105]  COND FALSE  !(!(_value_s426 <= balances_ERC20Token[this][_from_s426]))
[L2109]  COND FALSE  !(!(_value_s426 <= allowed_ERC20Token[this][_from_s426][msgsender_MSG]))
[L2113]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_ERC20Token[this][_from_s426], _value_s426);
[L1742]              assert b_s78 <= a_s78;
[L1743]              __ret_0_ := (a_s78 - b_s78) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2113]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_ERC20Token[this][_from_s426], _value_s426);
[L2114]  COND FALSE  !(revert)
[L2117]              sum_balances0[this] := sum_balances0[this] - balances_ERC20Token[this][_from_s426];
[L2118]              balances_ERC20Token[this][_from_s426] := __var_6;
[L2119]              sum_balances0[this] := sum_balances0[this] + balances_ERC20Token[this][_from_s426];
[L2120]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_ERC20Token[this][_to_s426], _value_s426);
[L1758]              c_s102 := (a_s102 + b_s102) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1759]              assert c_s102 >= a_s102;
[L1760]              __ret_0_ := c_s102;
[L2120]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_ERC20Token[this][_to_s426], _value_s426);
[L2121]  COND FALSE  !(revert)
[L2124]              sum_balances0[this] := sum_balances0[this] - balances_ERC20Token[this][_to_s426];
[L2125]              balances_ERC20Token[this][_to_s426] := __var_7;
[L2126]              sum_balances0[this] := sum_balances0[this] + balances_ERC20Token[this][_to_s426];
[L2127]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_ERC20Token[this][_from_s426][msgsender_MSG], _value_s426);
[L1742]              assert b_s78 <= a_s78;
[L1743]              __ret_0_ := (a_s78 - b_s78) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2127]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_ERC20Token[this][_from_s426][msgsender_MSG], _value_s426);
[L2128]  COND FALSE  !(revert)
[L2131]              sum_allowed1[_from_s426] := sum_allowed1[_from_s426] - allowed_ERC20Token[this][_from_s426][msgsender_MSG];
[L2132]              allowed_ERC20Token[this][_from_s426][msgsender_MSG] := __var_8;
[L2133]              sum_allowed1[_from_s426] := sum_allowed1[_from_s426] + allowed_ERC20Token[this][_from_s426][msgsender_MSG];
[L2134]              assert { :EventEmitted "Transfer_ERC20Token" } true;
[L2135]              __ret_0_ := true;
[L679]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG, _from_s426, _to_s426, _value_s426);
[L680]               assume !revert && gas >= 0;
[L3745]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _from_s426, _to_s426, _value_s426);
[L3825]  RET         call CorralChoice_Erc20Base(this);

Loop:
[L3825]  CALL        call CorralChoice_Erc20Base(this);
[L3669]              havoc msgsender_MSG;
[L3670]              havoc msgvalue_MSG;
[L3671]              havoc choice;
[L3672]              havoc __ret_0_totalSupply;
[L3673]              havoc _owner_s338;
[L3674]              havoc balance_s338;
[L3675]              havoc _to_s326;
[L3676]              havoc _value_s326;
[L3677]              havoc __ret_0_transfer;
[L3678]              havoc _owner_s489;
[L3679]              havoc _spender_s489;
[L3680]              havoc __ret_0_allowance;
[L3681]              havoc _from_s426;
[L3682]              havoc _to_s426;
[L3683]              havoc _value_s426;
[L3684]              havoc __ret_0_transferFrom;
[L3685]              havoc _spender_s473;
[L3686]              havoc _value_s473;
[L3687]              havoc success_s473;
[L3688]              havoc __ret_0_owner;
[L3689]              havoc _owner_s185;
[L3690]              havoc _owner_s221;
[L3691]              havoc __ret_0_transferable;
[L3692]              havoc _transferable_s264;
[L3693]              havoc __ret_0_signature;
[L3694]              havoc __ret_0_name;
[L3695]              havoc __ret_0_symbol;
[L3696]              havoc __ret_0_decimals;
[L3697]              havoc _issuer_s560;
[L3698]              havoc _name_s560;
[L3699]              havoc _symbol_s560;
[L3700]              havoc _totalSupplyCap_s560;
[L3701]              havoc _decimals_s560;
[L3702]              havoc tmpNow;
[L3703]              havoc gas;
[L3704]              assume gas > 4000000 && gas <= 8000000;
[L3705]              tmpNow := now;
[L3706]              havoc now;
[L3707]              assume now > tmpNow;
[L3708]              assume msgsender_MSG != null;
[L3709]              assume DType[msgsender_MSG] != SafeMath;
[L3710]              assume DType[msgsender_MSG] != ERC20;
[L3711]              assume DType[msgsender_MSG] != Owned;
[L3712]              assume DType[msgsender_MSG] != ERC20Token;
[L3713]              assume DType[msgsender_MSG] != Erc20Base;
[L3714]              Alloc[msgsender_MSG] := true;
[L3715]  COND FALSE  !(choice == 14)
[L3721]  COND FALSE  !(choice == 13)
[L3727]  COND FALSE  !(choice == 12)
[L3734]  COND FALSE  !(choice == 11)
[L3740]  COND TRUE   choice == 10
[L3741]              gas := gas - 21000;
[L3742]  COND TRUE   gas >= 0
[L3743]              assume _value_s426 >= 0 && _value_s426 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3744]              assume msgvalue_MSG == 0;
[L3745]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _from_s426, _to_s426, _value_s426);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s426 != _to_s426 && ((_value_s426 > balances_ERC20Token[this][_from_s426] || _value_s426 > allowed_ERC20Token[this][_from_s426][msgsender_MSG]) || balances_ERC20Token[this][_to_s426] + _value_s426 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s426 >= 0) && _value_s426 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_ERC20Token[this][_to_s426] >= 0) && balances_ERC20Token[this][_to_s426] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_ERC20Token[this][_from_s426] >= 0) && balances_ERC20Token[this][_from_s426] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_ERC20Token[this][_from_s426][msgsender_MSG] >= 0) && allowed_ERC20Token[this][_from_s426][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Token0 := true;
[L2]                 call_transferFrom_ERC20Token0 := false;
[L2]                 revert := revert_hold;
[L654]               havoc __exception;
[L655]               revert := false;
[L656]   COND FALSE  !(__exception)
[L679]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG, _from_s426, _to_s426, _value_s426);
[L2096]  CALL        call canTransfer_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3249]  COND FALSE  !(!(transferable_ERC20Token[this] == true))
[L2096]  RET         call canTransfer_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2097]  COND FALSE  !(revert)
[L2100]              __var_5 := null;
[L2101]  COND FALSE  !(!(_to_s426 != null))
[L2105]  COND FALSE  !(!(_value_s426 <= balances_ERC20Token[this][_from_s426]))
[L2109]  COND FALSE  !(!(_value_s426 <= allowed_ERC20Token[this][_from_s426][msgsender_MSG]))
[L2113]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_ERC20Token[this][_from_s426], _value_s426);
[L1742]              assert b_s78 <= a_s78;
[L1743]              __ret_0_ := (a_s78 - b_s78) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2113]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_ERC20Token[this][_from_s426], _value_s426);
[L2114]  COND FALSE  !(revert)
[L2117]              sum_balances0[this] := sum_balances0[this] - balances_ERC20Token[this][_from_s426];
[L2118]              balances_ERC20Token[this][_from_s426] := __var_6;
[L2119]              sum_balances0[this] := sum_balances0[this] + balances_ERC20Token[this][_from_s426];
[L2120]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_ERC20Token[this][_to_s426], _value_s426);
[L1758]              c_s102 := (a_s102 + b_s102) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1759]              assert c_s102 >= a_s102;
[L1760]              __ret_0_ := c_s102;
[L2120]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_ERC20Token[this][_to_s426], _value_s426);
[L2121]  COND FALSE  !(revert)
[L2124]              sum_balances0[this] := sum_balances0[this] - balances_ERC20Token[this][_to_s426];
[L2125]              balances_ERC20Token[this][_to_s426] := __var_7;
[L2126]              sum_balances0[this] := sum_balances0[this] + balances_ERC20Token[this][_to_s426];
[L2127]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_ERC20Token[this][_from_s426][msgsender_MSG], _value_s426);
[L1742]              assert b_s78 <= a_s78;
[L1743]              __ret_0_ := (a_s78 - b_s78) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2127]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_ERC20Token[this][_from_s426][msgsender_MSG], _value_s426);
[L2128]  COND FALSE  !(revert)
[L2131]              sum_allowed1[_from_s426] := sum_allowed1[_from_s426] - allowed_ERC20Token[this][_from_s426][msgsender_MSG];
[L2132]              allowed_ERC20Token[this][_from_s426][msgsender_MSG] := __var_8;
[L2133]              sum_allowed1[_from_s426] := sum_allowed1[_from_s426] + allowed_ERC20Token[this][_from_s426][msgsender_MSG];
[L2134]              assert { :EventEmitted "Transfer_ERC20Token" } true;
[L2135]              __ret_0_ := true;
[L679]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG, _from_s426, _to_s426, _value_s426);
[L680]               assume !revert && gas >= 0;
[L3745]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _from_s426, _to_s426, _value_s426);
[L3825]  RET         call CorralChoice_Erc20Base(this);

[2020-11-25 15:05:41,675 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:05:41,675 INFO  L82        PathProgramCache]: Analyzing trace with hash 768062887, now seen corresponding path program 1 times
[2020-11-25 15:05:41,676 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:05:41,684 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:05:41,732 INFO  L134       CoverageAnalysis]: Checked inductivity of 15 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 15 trivial. 0 not checked.
[2020-11-25 15:05:41,732 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:05:41,732 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 15:05:41,733 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:05:41,733 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 15:05:41,733 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 15:05:41,733 INFO  L87              Difference]: Start difference. First operand 1941 states and 2082 transitions. cyclomatic complexity: 146 Second operand 4 states.
[2020-11-25 15:05:41,855 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:05:41,855 INFO  L93              Difference]: Finished difference Result 2501 states and 2830 transitions.
[2020-11-25 15:05:41,855 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 15:05:41,856 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2501 states and 2830 transitions.
[2020-11-25 15:05:41,862 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 15:05:41,868 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2501 states to 2400 states and 2728 transitions.
[2020-11-25 15:05:41,869 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 880
[2020-11-25 15:05:41,869 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 880
[2020-11-25 15:05:41,869 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2400 states and 2728 transitions.
[2020-11-25 15:05:41,871 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:05:41,871 INFO  L728         BuchiCegarLoop]: Abstraction has 2400 states and 2728 transitions.
[2020-11-25 15:05:41,873 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2400 states and 2728 transitions.
[2020-11-25 15:05:41,888 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2400 to 1840.
[2020-11-25 15:05:41,888 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1840 states.
[2020-11-25 15:05:41,890 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1840 states to 1840 states and 1979 transitions.
[2020-11-25 15:05:41,890 INFO  L751         BuchiCegarLoop]: Abstraction has 1840 states and 1979 transitions.
[2020-11-25 15:05:41,890 INFO  L631         BuchiCegarLoop]: Abstraction has 1840 states and 1979 transitions.
[2020-11-25 15:05:41,890 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 15:05:41,890 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1840 states and 1979 transitions.
[2020-11-25 15:05:41,892 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:05:41,892 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:05:41,892 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:05:41,894 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:05:41,894 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC20Token0 := false;
[L2]                 call_transferFrom_ERC20Token0 := false;
[L2]     CALL        call main();
[L3815]              assume null == 0;
[L3816]  CALL        call this := FreshRefGenerator__success();
[L1654]              havoc newRef;
[L1655]              assume Alloc[newRef] == false;
[L1656]              Alloc[newRef] := true;
[L1657]              assume newRef != null;
[L3816]  RET         call this := FreshRefGenerator__success();
[L3817]              assume now >= 0;
[L3818]              assume DType[this] == Erc20Base;
[L3819]              assume msgvalue_MSG == 0;
[L3820]              gas := gas - 53000;
[L3821]  CALL        call Erc20Base_Erc20Base(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L951]               havoc __exception;
[L952]               revert := false;
[L953]   COND FALSE  !(__exception)
[L976]   CALL        call Erc20Base_Erc20Base__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L2283]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1792]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1776]              assume msgsender_MSG != null;
[L1777]              Balance[this] := 0;
[L1778]              totalSupply_ERC20[this] := 0;
[L1792]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1793]  COND FALSE  !(revert)
[L2283]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2284]  COND FALSE  !(revert)
[L2287]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560);
[L1840]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _owner_s185);
[L1823]              assume msgsender_MSG != null;
[L1824]              Balance[this] := 0;
[L1825]              owner_Owned[this] := null;
[L1827]              owner_Owned[this] := _owner_s185;
[L1840]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _owner_s185);
[L1841]  COND FALSE  !(revert)
[L2287]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560);
[L2288]  COND FALSE  !(revert)
[L2291]  CALL        call ERC20Token_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG);
[L1929]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1792]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1776]              assume msgsender_MSG != null;
[L1777]              Balance[this] := 0;
[L1778]              totalSupply_ERC20[this] := 0;
[L1792]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1793]  COND FALSE  !(revert)
[L1929]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1930]  COND FALSE  !(revert)
[L1933]  CALL        call ERC20Token_ERC20Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]              assume msgsender_MSG != null;
[L1906]              Balance[this] := 0;
[L1907]              balances_ERC20Token[this] := zeroRefintArr();
[L1908]              sum_balances0[this] := 0;
[L1909]              allowed_ERC20Token[this] := zeroRefRefintArr();
[L1910]              sum_allowed1[this] := 0;
[L1911]              transferable_ERC20Token[this] := true;
[L1933]  RET         call ERC20Token_ERC20Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1934]  COND FALSE  !(revert)
[L2291]  RET         call ERC20Token_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG);
[L2292]  COND FALSE  !(revert)
[L2295]  CALL        call Erc20Base_Erc20Base_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L2245]              assume msgsender_MSG != null;
[L2246]              Balance[this] := 0;
[L2247]              name_Erc20Base[this] := -1000343086;
[L2248]              symbol_Erc20Base[this] := -1000343086;
[L2249]              decimals_Erc20Base[this] := 0;
[L2251]              name_Erc20Base[this] := _name_s560;
[L2252]              symbol_Erc20Base[this] := _symbol_s560;
[L2253]              decimals_Erc20Base[this] := _decimals_s560;
[L2254]              totalSupply_ERC20[this] := _totalSupplyCap_s560;
[L2255]              sum_balances0[this] := sum_balances0[this] - balances_ERC20Token[this][_issuer_s560];
[L2256]              balances_ERC20Token[this][_issuer_s560] := _totalSupplyCap_s560;
[L2257]              sum_balances0[this] := sum_balances0[this] + balances_ERC20Token[this][_issuer_s560];
[L2258]              assert { :EventEmitted "Transfer_Erc20Base" } true;
[L2295]  RET         call Erc20Base_Erc20Base_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L2296]  COND FALSE  !(revert)
[L976]   RET         call Erc20Base_Erc20Base__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L977]               assume !revert && gas >= 0;
[L3821]  RET         call Erc20Base_Erc20Base(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L3822]              assume !revert && gas >= 0;
[L3825]  CALL        call CorralChoice_Erc20Base(this);
[L3669]              havoc msgsender_MSG;
[L3670]              havoc msgvalue_MSG;
[L3671]              havoc choice;
[L3672]              havoc __ret_0_totalSupply;
[L3673]              havoc _owner_s338;
[L3674]              havoc balance_s338;
[L3675]              havoc _to_s326;
[L3676]              havoc _value_s326;
[L3677]              havoc __ret_0_transfer;
[L3678]              havoc _owner_s489;
[L3679]              havoc _spender_s489;
[L3680]              havoc __ret_0_allowance;
[L3681]              havoc _from_s426;
[L3682]              havoc _to_s426;
[L3683]              havoc _value_s426;
[L3684]              havoc __ret_0_transferFrom;
[L3685]              havoc _spender_s473;
[L3686]              havoc _value_s473;
[L3687]              havoc success_s473;
[L3688]              havoc __ret_0_owner;
[L3689]              havoc _owner_s185;
[L3690]              havoc _owner_s221;
[L3691]              havoc __ret_0_transferable;
[L3692]              havoc _transferable_s264;
[L3693]              havoc __ret_0_signature;
[L3694]              havoc __ret_0_name;
[L3695]              havoc __ret_0_symbol;
[L3696]              havoc __ret_0_decimals;
[L3697]              havoc _issuer_s560;
[L3698]              havoc _name_s560;
[L3699]              havoc _symbol_s560;
[L3700]              havoc _totalSupplyCap_s560;
[L3701]              havoc _decimals_s560;
[L3702]              havoc tmpNow;
[L3703]              havoc gas;
[L3704]              assume gas > 4000000 && gas <= 8000000;
[L3705]              tmpNow := now;
[L3706]              havoc now;
[L3707]              assume now > tmpNow;
[L3708]              assume msgsender_MSG != null;
[L3709]              assume DType[msgsender_MSG] != SafeMath;
[L3710]              assume DType[msgsender_MSG] != ERC20;
[L3711]              assume DType[msgsender_MSG] != Owned;
[L3712]              assume DType[msgsender_MSG] != ERC20Token;
[L3713]              assume DType[msgsender_MSG] != Erc20Base;
[L3714]              Alloc[msgsender_MSG] := true;
[L3715]  COND FALSE  !(choice == 14)
[L3721]  COND FALSE  !(choice == 13)
[L3727]  COND FALSE  !(choice == 12)
[L3734]  COND FALSE  !(choice == 11)
[L3740]  COND TRUE   choice == 10
[L3741]              gas := gas - 21000;
[L3742]  COND TRUE   gas >= 0
[L3743]              assume _value_s426 >= 0 && _value_s426 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3744]              assume msgvalue_MSG == 0;
[L3745]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _from_s426, _to_s426, _value_s426);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((_from_s426 != _to_s426 && ((_value_s426 > balances_ERC20Token[this][_from_s426] || _value_s426 > allowed_ERC20Token[this][_from_s426][msgsender_MSG]) || balances_ERC20Token[this][_to_s426] + _value_s426 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s426 >= 0) && _value_s426 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_ERC20Token[this][_to_s426] >= 0) && balances_ERC20Token[this][_to_s426] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_ERC20Token[this][_from_s426] >= 0) && balances_ERC20Token[this][_from_s426] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_ERC20Token[this][_from_s426][msgsender_MSG] >= 0) && allowed_ERC20Token[this][_from_s426][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L654]               havoc __exception;
[L655]               revert := false;
[L656]   COND FALSE  !(__exception)
[L679]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG, _from_s426, _to_s426, _value_s426);
[L2096]  CALL        call canTransfer_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3249]  COND FALSE  !(!(transferable_ERC20Token[this] == true))
[L2096]  RET         call canTransfer_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2097]  COND FALSE  !(revert)
[L2100]              __var_5 := null;
[L2101]  COND FALSE  !(!(_to_s426 != null))
[L2105]  COND FALSE  !(!(_value_s426 <= balances_ERC20Token[this][_from_s426]))
[L2109]  COND FALSE  !(!(_value_s426 <= allowed_ERC20Token[this][_from_s426][msgsender_MSG]))
[L2113]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_ERC20Token[this][_from_s426], _value_s426);
[L1742]              assert b_s78 <= a_s78;
[L1743]              __ret_0_ := (a_s78 - b_s78) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2113]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_ERC20Token[this][_from_s426], _value_s426);
[L2114]  COND FALSE  !(revert)
[L2117]              sum_balances0[this] := sum_balances0[this] - balances_ERC20Token[this][_from_s426];
[L2118]              balances_ERC20Token[this][_from_s426] := __var_6;
[L2119]              sum_balances0[this] := sum_balances0[this] + balances_ERC20Token[this][_from_s426];
[L2120]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_ERC20Token[this][_to_s426], _value_s426);
[L1758]              c_s102 := (a_s102 + b_s102) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1759]              assert c_s102 >= a_s102;
[L1760]              __ret_0_ := c_s102;
[L2120]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_ERC20Token[this][_to_s426], _value_s426);
[L2121]  COND FALSE  !(revert)
[L2124]              sum_balances0[this] := sum_balances0[this] - balances_ERC20Token[this][_to_s426];
[L2125]              balances_ERC20Token[this][_to_s426] := __var_7;
[L2126]              sum_balances0[this] := sum_balances0[this] + balances_ERC20Token[this][_to_s426];
[L2127]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_ERC20Token[this][_from_s426][msgsender_MSG], _value_s426);
[L1742]              assert b_s78 <= a_s78;
[L1743]              __ret_0_ := (a_s78 - b_s78) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2127]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_ERC20Token[this][_from_s426][msgsender_MSG], _value_s426);
[L2128]  COND FALSE  !(revert)
[L2131]              sum_allowed1[_from_s426] := sum_allowed1[_from_s426] - allowed_ERC20Token[this][_from_s426][msgsender_MSG];
[L2132]              allowed_ERC20Token[this][_from_s426][msgsender_MSG] := __var_8;
[L2133]              sum_allowed1[_from_s426] := sum_allowed1[_from_s426] + allowed_ERC20Token[this][_from_s426][msgsender_MSG];
[L2134]              assert { :EventEmitted "Transfer_ERC20Token" } true;
[L2135]              __ret_0_ := true;
[L679]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG, _from_s426, _to_s426, _value_s426);
[L680]               assume !revert && gas >= 0;
[L3745]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _from_s426, _to_s426, _value_s426);
[L3825]  RET         call CorralChoice_Erc20Base(this);
[L3825]  CALL        call CorralChoice_Erc20Base(this);
[L3669]              havoc msgsender_MSG;
[L3670]              havoc msgvalue_MSG;
[L3671]              havoc choice;
[L3672]              havoc __ret_0_totalSupply;
[L3673]              havoc _owner_s338;
[L3674]              havoc balance_s338;
[L3675]              havoc _to_s326;
[L3676]              havoc _value_s326;
[L3677]              havoc __ret_0_transfer;
[L3678]              havoc _owner_s489;
[L3679]              havoc _spender_s489;
[L3680]              havoc __ret_0_allowance;
[L3681]              havoc _from_s426;
[L3682]              havoc _to_s426;
[L3683]              havoc _value_s426;
[L3684]              havoc __ret_0_transferFrom;
[L3685]              havoc _spender_s473;
[L3686]              havoc _value_s473;
[L3687]              havoc success_s473;
[L3688]              havoc __ret_0_owner;
[L3689]              havoc _owner_s185;
[L3690]              havoc _owner_s221;
[L3691]              havoc __ret_0_transferable;
[L3692]              havoc _transferable_s264;
[L3693]              havoc __ret_0_signature;
[L3694]              havoc __ret_0_name;
[L3695]              havoc __ret_0_symbol;
[L3696]              havoc __ret_0_decimals;
[L3697]              havoc _issuer_s560;
[L3698]              havoc _name_s560;
[L3699]              havoc _symbol_s560;
[L3700]              havoc _totalSupplyCap_s560;
[L3701]              havoc _decimals_s560;
[L3702]              havoc tmpNow;
[L3703]              havoc gas;
[L3704]              assume gas > 4000000 && gas <= 8000000;
[L3705]              tmpNow := now;
[L3706]              havoc now;
[L3707]              assume now > tmpNow;
[L3708]              assume msgsender_MSG != null;
[L3709]              assume DType[msgsender_MSG] != SafeMath;
[L3710]              assume DType[msgsender_MSG] != ERC20;
[L3711]              assume DType[msgsender_MSG] != Owned;
[L3712]              assume DType[msgsender_MSG] != ERC20Token;
[L3713]              assume DType[msgsender_MSG] != Erc20Base;
[L3714]              Alloc[msgsender_MSG] := true;
[L3715]  COND FALSE  !(choice == 14)
[L3721]  COND FALSE  !(choice == 13)
[L3727]  COND FALSE  !(choice == 12)
[L3734]  COND FALSE  !(choice == 11)
[L3740]  COND TRUE   choice == 10
[L3741]              gas := gas - 21000;
[L3742]  COND TRUE   gas >= 0
[L3743]              assume _value_s426 >= 0 && _value_s426 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3744]              assume msgvalue_MSG == 0;
[L3745]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _from_s426, _to_s426, _value_s426);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s426 != _to_s426 && ((_value_s426 > balances_ERC20Token[this][_from_s426] || _value_s426 > allowed_ERC20Token[this][_from_s426][msgsender_MSG]) || balances_ERC20Token[this][_to_s426] + _value_s426 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s426 >= 0) && _value_s426 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_ERC20Token[this][_to_s426] >= 0) && balances_ERC20Token[this][_to_s426] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_ERC20Token[this][_from_s426] >= 0) && balances_ERC20Token[this][_from_s426] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_ERC20Token[this][_from_s426][msgsender_MSG] >= 0) && allowed_ERC20Token[this][_from_s426][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Token0 := true;
[L2]                 call_transferFrom_ERC20Token0 := false;
[L2]                 revert := revert_hold;
[L654]               havoc __exception;
[L655]               revert := false;
[L656]   COND FALSE  !(__exception)
[L679]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG, _from_s426, _to_s426, _value_s426);
[L2096]  CALL        call canTransfer_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3249]  COND FALSE  !(!(transferable_ERC20Token[this] == true))
[L2096]  RET         call canTransfer_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2097]  COND FALSE  !(revert)
[L2100]              __var_5 := null;
[L2101]  COND FALSE  !(!(_to_s426 != null))
[L2105]  COND FALSE  !(!(_value_s426 <= balances_ERC20Token[this][_from_s426]))
[L2109]  COND FALSE  !(!(_value_s426 <= allowed_ERC20Token[this][_from_s426][msgsender_MSG]))
[L2113]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_ERC20Token[this][_from_s426], _value_s426);
[L1742]              assert b_s78 <= a_s78;
[L1743]              __ret_0_ := (a_s78 - b_s78) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2113]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_ERC20Token[this][_from_s426], _value_s426);
[L2114]  COND FALSE  !(revert)
[L2117]              sum_balances0[this] := sum_balances0[this] - balances_ERC20Token[this][_from_s426];
[L2118]              balances_ERC20Token[this][_from_s426] := __var_6;
[L2119]              sum_balances0[this] := sum_balances0[this] + balances_ERC20Token[this][_from_s426];
[L2120]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_ERC20Token[this][_to_s426], _value_s426);
[L1758]              c_s102 := (a_s102 + b_s102) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1759]              assert c_s102 >= a_s102;
[L1760]              __ret_0_ := c_s102;
[L2120]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_ERC20Token[this][_to_s426], _value_s426);
[L2121]  COND FALSE  !(revert)
[L2124]              sum_balances0[this] := sum_balances0[this] - balances_ERC20Token[this][_to_s426];
[L2125]              balances_ERC20Token[this][_to_s426] := __var_7;
[L2126]              sum_balances0[this] := sum_balances0[this] + balances_ERC20Token[this][_to_s426];
[L2127]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_ERC20Token[this][_from_s426][msgsender_MSG], _value_s426);
[L1742]              assert b_s78 <= a_s78;
[L1743]              __ret_0_ := (a_s78 - b_s78) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2127]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_ERC20Token[this][_from_s426][msgsender_MSG], _value_s426);
[L2128]  COND FALSE  !(revert)
[L2131]              sum_allowed1[_from_s426] := sum_allowed1[_from_s426] - allowed_ERC20Token[this][_from_s426][msgsender_MSG];
[L2132]              allowed_ERC20Token[this][_from_s426][msgsender_MSG] := __var_8;
[L2133]              sum_allowed1[_from_s426] := sum_allowed1[_from_s426] + allowed_ERC20Token[this][_from_s426][msgsender_MSG];
[L2134]              assert { :EventEmitted "Transfer_ERC20Token" } true;
[L2135]              __ret_0_ := true;
[L679]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG, _from_s426, _to_s426, _value_s426);
[L680]               assume !revert && gas >= 0;
[L3745]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _from_s426, _to_s426, _value_s426);
[L3825]  RET         call CorralChoice_Erc20Base(this);

Loop:
[L3825]  CALL        call CorralChoice_Erc20Base(this);
[L3669]              havoc msgsender_MSG;
[L3670]              havoc msgvalue_MSG;
[L3671]              havoc choice;
[L3672]              havoc __ret_0_totalSupply;
[L3673]              havoc _owner_s338;
[L3674]              havoc balance_s338;
[L3675]              havoc _to_s326;
[L3676]              havoc _value_s326;
[L3677]              havoc __ret_0_transfer;
[L3678]              havoc _owner_s489;
[L3679]              havoc _spender_s489;
[L3680]              havoc __ret_0_allowance;
[L3681]              havoc _from_s426;
[L3682]              havoc _to_s426;
[L3683]              havoc _value_s426;
[L3684]              havoc __ret_0_transferFrom;
[L3685]              havoc _spender_s473;
[L3686]              havoc _value_s473;
[L3687]              havoc success_s473;
[L3688]              havoc __ret_0_owner;
[L3689]              havoc _owner_s185;
[L3690]              havoc _owner_s221;
[L3691]              havoc __ret_0_transferable;
[L3692]              havoc _transferable_s264;
[L3693]              havoc __ret_0_signature;
[L3694]              havoc __ret_0_name;
[L3695]              havoc __ret_0_symbol;
[L3696]              havoc __ret_0_decimals;
[L3697]              havoc _issuer_s560;
[L3698]              havoc _name_s560;
[L3699]              havoc _symbol_s560;
[L3700]              havoc _totalSupplyCap_s560;
[L3701]              havoc _decimals_s560;
[L3702]              havoc tmpNow;
[L3703]              havoc gas;
[L3704]              assume gas > 4000000 && gas <= 8000000;
[L3705]              tmpNow := now;
[L3706]              havoc now;
[L3707]              assume now > tmpNow;
[L3708]              assume msgsender_MSG != null;
[L3709]              assume DType[msgsender_MSG] != SafeMath;
[L3710]              assume DType[msgsender_MSG] != ERC20;
[L3711]              assume DType[msgsender_MSG] != Owned;
[L3712]              assume DType[msgsender_MSG] != ERC20Token;
[L3713]              assume DType[msgsender_MSG] != Erc20Base;
[L3714]              Alloc[msgsender_MSG] := true;
[L3715]  COND TRUE   choice == 14
[L3716]              gas := gas - 21000;
[L3717]  COND FALSE  !(gas >= 0)
[L3825]  RET         call CorralChoice_Erc20Base(this);

[2020-11-25 15:05:41,897 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:05:41,897 INFO  L82        PathProgramCache]: Analyzing trace with hash -716495508, now seen corresponding path program 1 times
[2020-11-25 15:05:41,898 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:05:41,929 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:05:42,060 INFO  L134       CoverageAnalysis]: Checked inductivity of 81 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 81 trivial. 0 not checked.
[2020-11-25 15:05:42,060 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:05:42,060 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-11-25 15:05:42,061 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:05:42,061 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-11-25 15:05:42,061 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=29, Invalid=127, Unknown=0, NotChecked=0, Total=156
[2020-11-25 15:05:42,061 INFO  L87              Difference]: Start difference. First operand 1840 states and 1979 transitions. cyclomatic complexity: 144 Second operand 13 states.
[2020-11-25 15:05:43,115 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:05:43,115 INFO  L93              Difference]: Finished difference Result 1093 states and 1174 transitions.
[2020-11-25 15:05:43,115 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-11-25 15:05:43,115 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1093 states and 1174 transitions.
[2020-11-25 15:05:43,117 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 15:05:43,117 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1093 states to 0 states and 0 transitions.
[2020-11-25 15:05:43,117 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 15:05:43,117 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 15:05:43,117 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 15:05:43,117 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:05:43,117 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 15:05:43,117 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 15:05:43,117 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 15:05:43,117 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 15:05:43,117 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 15:05:43,117 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 15:05:43,117 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 15:05:43,120 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 03:05:43 BasicIcfg
[2020-11-25 15:05:43,120 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 15:05:43,120 INFO  L168              Benchmark]: Toolchain (without parser) took 7990.43 ms. Allocated memory was 1.0 GB in the beginning and 1.8 GB in the end (delta: 742.9 MB). Free memory was 935.2 MB in the beginning and 1.6 GB in the end (delta: -620.9 MB). Peak memory consumption was 122.0 MB. Max. memory is 15.3 GB.
[2020-11-25 15:05:43,121 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 15:05:43,122 INFO  L168              Benchmark]: Boogie Preprocessor took 88.81 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 929.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 15:05:43,122 INFO  L168              Benchmark]: UtopiaSpecLang took 60.46 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.5 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 15:05:43,122 INFO  L168              Benchmark]: Boogie Printer took 14.10 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 15:05:43,123 INFO  L168              Benchmark]: RCFGBuilder took 655.24 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 817.1 MB in the end (delta: 102.0 MB). Peak memory consumption was 102.0 MB. Max. memory is 15.3 GB.
[2020-11-25 15:05:43,123 INFO  L168              Benchmark]: UtopiaLTL2Aut took 43.71 ms. Allocated memory is still 1.0 GB. Free memory was 817.1 MB in the beginning and 808.1 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
[2020-11-25 15:05:43,123 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1137.24 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 209.2 MB). Free memory was 808.1 MB in the beginning and 1.1 GB in the end (delta: -291.6 MB). Peak memory consumption was 183.9 MB. Max. memory is 15.3 GB.
[2020-11-25 15:05:43,124 INFO  L168              Benchmark]: BlockEncodingV2 took 107.92 ms. Allocated memory is still 1.2 GB. Free memory was 1.1 GB in the beginning and 1.0 GB in the end (delta: 59.3 MB). Peak memory consumption was 59.3 MB. Max. memory is 15.3 GB.
[2020-11-25 15:05:43,125 INFO  L168              Benchmark]: BuchiAutomizer took 5880.09 ms. Allocated memory was 1.2 GB in the beginning and 1.8 GB in the end (delta: 533.7 MB). Free memory was 1.0 GB in the beginning and 1.6 GB in the end (delta: -515.7 MB). Peak memory consumption was 18.0 MB. Max. memory is 15.3 GB.
[2020-11-25 15:05:43,127 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    3200 locations, 5600 edges
  - StatisticsResult: Encoded RCFG
    3145 locations, 5476 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 88.81 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 929.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 60.46 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.5 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 14.10 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 655.24 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 817.1 MB in the end (delta: 102.0 MB). Peak memory consumption was 102.0 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 43.71 ms. Allocated memory is still 1.0 GB. Free memory was 817.1 MB in the beginning and 808.1 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1137.24 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 209.2 MB). Free memory was 808.1 MB in the beginning and 1.1 GB in the end (delta: -291.6 MB). Peak memory consumption was 183.9 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 107.92 ms. Allocated memory is still 1.2 GB. Free memory was 1.1 GB in the beginning and 1.0 GB in the end (delta: 59.3 MB). Peak memory consumption was 59.3 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 5880.09 ms. Allocated memory was 1.2 GB in the beginning and 1.8 GB in the end (delta: 533.7 MB). Free memory was 1.0 GB in the beginning and 1.6 GB in the end (delta: -515.7 MB). Peak memory consumption was 18.0 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1320 locations, 1713 edges
  - StatisticsResult: BuchiProgram size
    3200 locations, 5600 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 6 terminating modules (6 trivial, 0 deterministic, 0 nondeterministic). 6 modules have a trivial ranking function, the largest among these consists of 21 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 5.8s and 7 iterations.  TraceHistogramMax:2. Analysis of lassos took 0.9s. Construction of modules took 3.4s. BÃ¼chi inclusion checks took 1.0s. Highest rank in rank-based complementation 0. Minimization of det autom 6. Minimization of nondet autom 0. Automata minimization 0.1s AutomataMinimizationTime, 5 MinimizatonAttempts, 1037 StatesRemovedByMinimization, 4 NontrivialMinimizations. Non-live state removal took 0.0s Buchi closure took 0.0s. Biggest automaton had 2013 states and ocurred in iteration 2.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 11330 SDtfs, 11025 SDslu, 21186 SDs, 0 SdLazy, 46257 SolverSat, 1668 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 3.4s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU6 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transferFrom_ERC20Token0) ==> ( <>(fail_transferFrom_ERC20Token0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
