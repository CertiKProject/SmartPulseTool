This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 14:27:49,286 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 14:27:49,287 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 14:27:49,298 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 14:27:49,298 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 14:27:49,299 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 14:27:49,300 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 14:27:49,301 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 14:27:49,302 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 14:27:49,303 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 14:27:49,304 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 14:27:49,304 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 14:27:49,304 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 14:27:49,305 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 14:27:49,306 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 14:27:49,307 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 14:27:49,307 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 14:27:49,308 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 14:27:49,310 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 14:27:49,311 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 14:27:49,312 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 14:27:49,312 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 14:27:49,314 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 14:27:49,314 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 14:27:49,314 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 14:27:49,315 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 14:27:49,315 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 14:27:49,316 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 14:27:49,316 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 14:27:49,316 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 14:27:49,317 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 14:27:49,317 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 14:27:49,317 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 14:27:49,318 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 14:27:49,319 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 14:27:49,319 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 14:27:49,319 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 14:27:49,319 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 14:27:49,320 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 14:27:49,320 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 14:27:49,321 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 14:27:49,321 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 14:27:49,328 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 14:27:49,329 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 14:27:49,329 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 14:27:49,330 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 14:27:49,330 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 14:27:49,330 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 14:27:49,330 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 14:27:49,330 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 14:27:49,330 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 14:27:49,330 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 14:27:49,330 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 14:27:49,330 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 14:27:49,331 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 14:27:49,331 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 14:27:49,331 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 14:27:49,331 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 14:27:49,331 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 14:27:49,331 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 14:27:49,331 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 14:27:49,331 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 14:27:49,331 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 14:27:49,331 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 14:27:49,332 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 14:27:49,332 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 14:27:49,332 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 14:27:49,332 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 14:27:49,354 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 14:27:49,367 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 14:27:49,370 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 14:27:49,371 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 14:27:49,371 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 14:27:49,372 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transfer-self.bpl
[2020-11-25 14:27:49,372 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transfer-self.bpl'
[2020-11-25 14:27:49,439 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 14:27:49,440 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 14:27:49,440 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 14:27:49,441 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 14:27:49,441 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 14:27:49,457 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:27:49" (1/1) ...
[2020-11-25 14:27:49,459 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:27:49" (1/1) ...
[2020-11-25 14:27:49,484 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:27:49" (1/1) ...
[2020-11-25 14:27:49,484 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:27:49" (1/1) ...
[2020-11-25 14:27:49,500 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:27:49" (1/1) ...
[2020-11-25 14:27:49,507 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:27:49" (1/1) ...
[2020-11-25 14:27:49,513 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:27:49" (1/1) ...
[2020-11-25 14:27:49,520 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 14:27:49,520 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 14:27:49,520 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 14:27:49,523 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 14:27:49,532 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:27:49" (1/1) ...
[2020-11-25 14:27:49,549 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(Ducks.transfer(to, value), msg.sender == to && value <= balances_Ducks[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Ducks[this][to] >= 0 && balances_Ducks[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Ducks[this][msg.sender] >= 0 &&  balances_Ducks[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(Ducks.transfer(to, value), return == true && _totalSupply_Ducks[this] == old(_totalSupply_Ducks[this]) && balances_Ducks[this] == old(balances_Ducks[this]) && allowed_Ducks[this] == old(allowed_Ducks[this]) && name_Ducks[this] == old(name_Ducks[this]) && symbol_Ducks[this] == old(symbol_Ducks[this]) && decimals_Ducks[this] == old(decimals_Ducks[this]))))
[2020-11-25 14:27:49,555 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(Ducks.transfer(to, value), msg.sender == to && value <= balances_Ducks[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Ducks[this][to] >= 0 && balances_Ducks[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Ducks[this][msg.sender] >= 0 &&  balances_Ducks[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(Ducks.transfer(to, value), return == true && _totalSupply_Ducks[this] == old(_totalSupply_Ducks[this]) && balances_Ducks[this] == old(balances_Ducks[this]) && allowed_Ducks[this] == old(allowed_Ducks[this]) && name_Ducks[this] == old(name_Ducks[this]) && symbol_Ducks[this] == old(symbol_Ducks[this]) && decimals_Ducks[this] == old(decimals_Ducks[this]))))
[2020-11-25 14:27:49,562 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(Ducks.transfer(to, value), msg.sender == to && value <= balances_Ducks[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Ducks[this][to] >= 0 && balances_Ducks[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Ducks[this][msg.sender] >= 0 &&  balances_Ducks[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(Ducks.transfer(to, value), return == true && _totalSupply_Ducks[this] == old(_totalSupply_Ducks[this]) && balances_Ducks[this] == old(balances_Ducks[this]) && allowed_Ducks[this] == old(allowed_Ducks[this]) && name_Ducks[this] == old(name_Ducks[this]) && symbol_Ducks[this] == old(symbol_Ducks[this]) && decimals_Ducks[this] == old(decimals_Ducks[this]))))
[2020-11-25 14:27:49,569 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==to_s334 && tokens_s334<=balances_Ducks[this][msg.sender] ) && tokens_s334>=0 ) && tokens_s334<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_Ducks[this][to_s334]>=0 ) && balances_Ducks[this][to_s334]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_Ducks[this][msg.sender]>=0 ) && balances_Ducks[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Ducks>],IdentifierExpression[to_s334,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Ducks>]],BinaryExpression[COMPLEQ,IdentifierExpression[tokens_s334,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Ducks>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Ducks>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Ducks>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[tokens_s334,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Ducks>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[tokens_s334,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Ducks>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Ducks>]]],[IdentifierExpression[to_s334,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Ducks>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Ducks>]]],[IdentifierExpression[to_s334,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Ducks>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Ducks>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Ducks>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Ducks>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Ducks>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 14:27:49,571 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( success_s334==true && _totalSupply_Ducks[this]==( old(_totalSupply_Ducks[this]) ) ) && balances_Ducks[this]==( old(balances_Ducks[this]) ) ) && allowed_Ducks[this]==( old(allowed_Ducks[this]) ) ) && name_Ducks[this]==( old(name_Ducks[this]) ) ) && symbol_Ducks[this]==( old(symbol_Ducks[this]) ) ) && decimals_Ducks[this]==( old(decimals_Ducks[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[success_s334,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_Ducks>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Ducks>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Ducks>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[balances_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Ducks>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[balances_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Ducks>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[allowed_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Ducks>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[allowed_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Ducks>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Ducks>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Ducks>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Ducks>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Ducks>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Ducks>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Ducks>]]]]]]
[2020-11-25 14:27:49,575 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(Ducks.transfer(to, value), msg.sender == to && value <= balances_Ducks[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Ducks[this][to] >= 0 && balances_Ducks[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Ducks[this][msg.sender] >= 0 &&  balances_Ducks[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(Ducks.transfer(to, value), return == true && _totalSupply_Ducks[this] == old(_totalSupply_Ducks[this]) && balances_Ducks[this] == old(balances_Ducks[this]) && allowed_Ducks[this] == old(allowed_Ducks[this]) && name_Ducks[this] == old(name_Ducks[this]) && symbol_Ducks[this] == old(symbol_Ducks[this]) && decimals_Ducks[this] == old(decimals_Ducks[this]))))
[2020-11-25 14:27:49,575 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_Ducks0) ==> ( <>AP(success_transfer_Ducks0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 14:27:49,582 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:27:49 PropertyContainer
[2020-11-25 14:27:49,582 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 14:27:49,582 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 14:27:49,582 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 14:27:49,582 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 14:27:49,583 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:27:49" (1/2) ...
[2020-11-25 14:27:49,583 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 14:27:49,583 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 14:27:49,594 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:27:49" (2/2) ...
[2020-11-25 14:27:49,594 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 14:27:49,595 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 14:27:49,595 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 14:27:49,595 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 14:27:49,595 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:27:49" (1/2) ...
[2020-11-25 14:27:49,647 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 14:27:49,647 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 14:27:49,647 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface
[2020-11-25 14:27:49,647 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface
[2020-11-25 14:27:49,647 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Interface
[2020-11-25 14:27:49,647 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Interface
[2020-11-25 14:27:49,647 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20Interface
[2020-11-25 14:27:49,648 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Interface
[2020-11-25 14:27:49,648 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Interface
[2020-11-25 14:27:49,648 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Interface
[2020-11-25 14:27:49,648 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 14:27:49,648 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 14:27:49,648 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 14:27:49,648 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath
[2020-11-25 14:27:49,648 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath
[2020-11-25 14:27:49,648 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath
[2020-11-25 14:27:49,649 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath
[2020-11-25 14:27:49,649 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath
[2020-11-25 14:27:49,649 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath
[2020-11-25 14:27:49,649 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath
[2020-11-25 14:27:49,649 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath
[2020-11-25 14:27:49,649 INFO  L130     BoogieDeclarations]: Found specification of procedure Ducks_Ducks_NoBaseCtor__success
[2020-11-25 14:27:49,649 INFO  L130     BoogieDeclarations]: Found specification of procedure Ducks_Ducks
[2020-11-25 14:27:49,649 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ducks_Ducks
[2020-11-25 14:27:49,649 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_Ducks
[2020-11-25 14:27:49,649 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_Ducks
[2020-11-25 14:27:49,649 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_Ducks
[2020-11-25 14:27:49,650 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_Ducks
[2020-11-25 14:27:49,650 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_Ducks
[2020-11-25 14:27:49,650 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_Ducks
[2020-11-25 14:27:49,650 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_Ducks
[2020-11-25 14:27:49,650 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_Ducks
[2020-11-25 14:27:49,650 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_Ducks
[2020-11-25 14:27:49,650 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_Ducks
[2020-11-25 14:27:49,650 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_Ducks
[2020-11-25 14:27:49,650 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_Ducks
[2020-11-25 14:27:49,650 INFO  L130     BoogieDeclarations]: Found specification of procedure name_Ducks
[2020-11-25 14:27:49,650 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_Ducks
[2020-11-25 14:27:49,650 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_Ducks
[2020-11-25 14:27:49,650 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_Ducks
[2020-11-25 14:27:49,650 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_Ducks
[2020-11-25 14:27:49,651 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_Ducks
[2020-11-25 14:27:49,651 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_Ducks
[2020-11-25 14:27:49,651 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_Ducks
[2020-11-25 14:27:49,651 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 14:27:49,651 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 14:27:49,651 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 14:27:49,651 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Interface
[2020-11-25 14:27:49,651 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Interface
[2020-11-25 14:27:49,651 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 14:27:49,651 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 14:27:49,651 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ducks
[2020-11-25 14:27:49,651 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 14:27:49,651 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 14:27:49,652 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 14:27:49,652 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 14:27:49,652 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 14:27:49,652 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 14:27:49,652 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 14:27:49,652 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 14:27:49,652 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath__success
[2020-11-25 14:27:49,652 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath__fail
[2020-11-25 14:27:49,652 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath__success
[2020-11-25 14:27:49,652 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath__fail
[2020-11-25 14:27:49,652 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath__success
[2020-11-25 14:27:49,652 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath__fail
[2020-11-25 14:27:49,652 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath__success
[2020-11-25 14:27:49,653 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath__fail
[2020-11-25 14:27:49,653 INFO  L130     BoogieDeclarations]: Found specification of procedure Ducks_Ducks_NoBaseCtor__fail
[2020-11-25 14:27:49,653 INFO  L130     BoogieDeclarations]: Found specification of procedure Ducks_Ducks__success
[2020-11-25 14:27:49,653 INFO  L130     BoogieDeclarations]: Found specification of procedure Ducks_Ducks__fail
[2020-11-25 14:27:49,653 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_Ducks__success
[2020-11-25 14:27:49,653 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_Ducks__fail
[2020-11-25 14:27:49,653 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_Ducks__success
[2020-11-25 14:27:49,653 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_Ducks__fail
[2020-11-25 14:27:49,653 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_Ducks__success
[2020-11-25 14:27:49,653 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_Ducks__fail
[2020-11-25 14:27:49,653 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_Ducks__success
[2020-11-25 14:27:49,653 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_Ducks__fail
[2020-11-25 14:27:49,653 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_Ducks__success
[2020-11-25 14:27:49,654 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_Ducks__fail
[2020-11-25 14:27:49,654 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_Ducks__success
[2020-11-25 14:27:49,654 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_Ducks__fail
[2020-11-25 14:27:49,654 INFO  L130     BoogieDeclarations]: Found specification of procedure name_Ducks__success
[2020-11-25 14:27:49,654 INFO  L130     BoogieDeclarations]: Found specification of procedure name_Ducks__fail
[2020-11-25 14:27:49,654 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_Ducks__success
[2020-11-25 14:27:49,654 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_Ducks__fail
[2020-11-25 14:27:49,654 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_Ducks__success
[2020-11-25 14:27:49,654 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_Ducks__fail
[2020-11-25 14:27:49,654 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_Ducks__success
[2020-11-25 14:27:49,654 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_Ducks__fail
[2020-11-25 14:27:49,654 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 14:27:49,655 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 14:27:49,655 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 14:27:49,655 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 14:27:49,655 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 14:27:49,655 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 14:27:49,655 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 14:27:49,655 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 14:27:49,655 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 14:27:49,655 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 14:27:49,655 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 14:27:49,655 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 14:27:49,655 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 14:27:49,655 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath__fail
[2020-11-25 14:27:49,656 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath__success
[2020-11-25 14:27:49,656 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath__fail
[2020-11-25 14:27:49,656 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath__success
[2020-11-25 14:27:49,656 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath__fail
[2020-11-25 14:27:49,656 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath__success
[2020-11-25 14:27:49,656 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath__fail
[2020-11-25 14:27:49,656 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath__success
[2020-11-25 14:27:49,656 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ducks_Ducks_NoBaseCtor__fail
[2020-11-25 14:27:49,656 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ducks_Ducks_NoBaseCtor__success
[2020-11-25 14:27:49,656 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ducks_Ducks__fail
[2020-11-25 14:27:49,656 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ducks_Ducks__success
[2020-11-25 14:27:49,656 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_Ducks__fail
[2020-11-25 14:27:49,656 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_Ducks__success
[2020-11-25 14:27:49,657 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_Ducks__fail
[2020-11-25 14:27:49,657 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_Ducks__success
[2020-11-25 14:27:49,657 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_Ducks__fail
[2020-11-25 14:27:49,657 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_Ducks__success
[2020-11-25 14:27:49,657 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_Ducks__fail
[2020-11-25 14:27:49,657 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_Ducks__success
[2020-11-25 14:27:49,657 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_Ducks__fail
[2020-11-25 14:27:49,657 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_Ducks__success
[2020-11-25 14:27:49,657 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_Ducks__fail
[2020-11-25 14:27:49,657 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_Ducks__success
[2020-11-25 14:27:49,657 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_Ducks__fail
[2020-11-25 14:27:49,657 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_Ducks__success
[2020-11-25 14:27:49,658 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_Ducks__fail
[2020-11-25 14:27:49,658 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_Ducks__success
[2020-11-25 14:27:49,658 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_Ducks__fail
[2020-11-25 14:27:49,658 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_Ducks__success
[2020-11-25 14:27:49,658 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_Ducks__fail
[2020-11-25 14:27:49,658 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_Ducks__success
[2020-11-25 14:27:49,658 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 14:27:49,658 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 14:27:49,658 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 14:27:49,658 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 14:27:49,658 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 14:27:49,658 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 14:27:49,659 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Interface
[2020-11-25 14:27:49,659 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Interface
[2020-11-25 14:27:49,659 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 14:27:49,659 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 14:27:49,659 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ducks
[2020-11-25 14:27:49,659 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 14:27:49,659 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 14:27:49,659 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 14:27:50,029 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 14:27:50,029 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 14:27:50,029 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 14:27:50,195 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 14:27:50,195 INFO  L286             CfgBuilder]: Removed 3 assue(true) statements.
[2020-11-25 14:27:50,197 INFO  L202        PluginConnector]: Adding new model Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:27:50 BoogieIcfgContainer
[2020-11-25 14:27:50,197 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:27:49" (2/2) ...
[2020-11-25 14:27:50,197 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 14:27:50,197 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@4f8f7a1d and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:27:50, skipping insertion in model container
[2020-11-25 14:27:50,197 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 14:27:50,198 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 14:27:50,198 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 14:27:50,199 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 14:27:50,199 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:27:49" (1/3) ...
[2020-11-25 14:27:50,199 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@433a5ccc and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:27:50, skipping insertion in model container
[2020-11-25 14:27:50,200 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:27:49" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 14:27:50,233 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:27:50 NWAContainer
[2020-11-25 14:27:50,233 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 14:27:50,234 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 14:27:50,234 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 14:27:50,235 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 14:27:50,236 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:27:50" (3/4) ...
[2020-11-25 14:27:50,236 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@259150f1 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:27:50, skipping insertion in model container
[2020-11-25 14:27:50,236 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:27:50" (4/4) ...
[2020-11-25 14:27:50,239 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 14:27:50,242 INFO  L110   BuchiProductObserver]: Initial RCFG 1049 locations, 1322 edges
[2020-11-25 14:27:50,242 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 14:27:50,252 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 14:27:51,227 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 14:27:51,231 INFO  L110   BuchiProductObserver]: BuchiProgram size 2488 locations, 4278 edges
[2020-11-25 14:27:51,231 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:27:51 BoogieIcfgContainer
[2020-11-25 14:27:51,231 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 14:27:51,232 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 14:27:51,232 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 14:27:51,233 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 14:27:51,234 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:27:51" (1/1) ...
[2020-11-25 14:27:51,295 INFO  L313           BlockEncoder]: Initial Icfg 2488 locations, 4278 edges
[2020-11-25 14:27:51,295 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 14:27:51,296 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 14:27:51,296 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 14:27:51,297 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 14:27:51,305 INFO  L70    emoveInfeasibleEdges]: Removed 66 edges and 9 locations because of local infeasibility
[2020-11-25 14:27:51,312 INFO  L70        RemoveSinkStates]: Removed 32 edges and 21 locations by removing sink states
[2020-11-25 14:27:51,321 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 14:27:51,325 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 14:27:51,327 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 14:27:51,327 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 14:27:51,330 INFO  L313           BlockEncoder]: Encoded RCFG 2444 locations, 4160 edges
[2020-11-25 14:27:51,331 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 02:27:51 BasicIcfg
[2020-11-25 14:27:51,331 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 14:27:51,331 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 14:27:51,331 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 14:27:51,334 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 14:27:51,334 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:27:51,334 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:27:49" (1/6) ...
[2020-11-25 14:27:51,336 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6b4b435c and model type Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:27:51, skipping insertion in model container
[2020-11-25 14:27:51,336 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:27:51,336 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:27:49" (2/6) ...
[2020-11-25 14:27:51,336 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6b4b435c and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:27:51, skipping insertion in model container
[2020-11-25 14:27:51,336 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:27:51,336 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:27:50" (3/6) ...
[2020-11-25 14:27:51,336 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6b4b435c and model type Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 02:27:51, skipping insertion in model container
[2020-11-25 14:27:51,337 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:27:51,337 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:27:50" (4/6) ...
[2020-11-25 14:27:51,337 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6b4b435c and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:27:51, skipping insertion in model container
[2020-11-25 14:27:51,337 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:27:51,337 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:27:51" (5/6) ...
[2020-11-25 14:27:51,337 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6b4b435c and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 02:27:51, skipping insertion in model container
[2020-11-25 14:27:51,337 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:27:51,337 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 02:27:51" (6/6) ...
[2020-11-25 14:27:51,338 INFO  L404   chiAutomizerObserver]: Analyzing ICFG Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transfer-self.bpl_BEv2
[2020-11-25 14:27:51,375 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 14:27:51,375 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 14:27:51,376 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 14:27:51,376 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 14:27:51,376 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 14:27:51,376 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 14:27:51,376 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 14:27:51,376 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 14:27:51,376 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 14:27:51,399 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2444 states.
[2020-11-25 14:27:51,451 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:27:51,452 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:27:51,452 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:27:51,459 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:27:51,459 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:27:51,459 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 14:27:51,459 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2444 states.
[2020-11-25 14:27:51,472 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:27:51,473 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:27:51,473 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:27:51,474 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:27:51,474 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_Ducks0 := false;
[L2]                 call_transfer_Ducks0 := false;
[L2]     CALL        call main();
[L2853]              assume null == 0;
[L2854]  CALL        call this := FreshRefGenerator__success();
[L1249]              havoc newRef;
[L1250]              assume Alloc[newRef] == false;
[L1251]              Alloc[newRef] := true;
[L1252]              assume newRef != null;
[L2854]  RET         call this := FreshRefGenerator__success();
[L2855]              assume now >= 0;
[L2856]              assume DType[this] == Ducks;
[L2857]              assume msgvalue_MSG == 0;
[L2858]              gas := gas - 53000;
[L2859]  CALL        call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L398]               havoc __exception;
[L399]               revert := false;
[L400]   COND FALSE  !(__exception)
[L421]   CALL        call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L1456]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1281]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1266]              assume msgsender_MSG != null;
[L1267]              Balance[this] := 0;
[L1281]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  COND FALSE  !(revert)
[L1456]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  COND TRUE   revert
[L421]   RET         call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L422]               assume !revert && gas >= 0;
[L2859]  RET         call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L2860]              assume !revert && gas >= 0;

Loop:
[L2863]  CALL        call CorralChoice_Ducks(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != Ducks;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND TRUE   choice == 14
[L2751]              gas := gas - 21000;
[L2752]  COND FALSE  !(gas >= 0)
[L2863]  RET         call CorralChoice_Ducks(this);

[2020-11-25 14:27:51,498 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:27:51,498 INFO  L82        PathProgramCache]: Analyzing trace with hash -1387891377, now seen corresponding path program 1 times
[2020-11-25 14:27:51,503 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:27:51,528 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:27:51,601 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 14:27:51,603 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:27:51,603 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 14:27:51,607 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:27:51,754 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 14:27:51,754 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 14:27:51,756 INFO  L87              Difference]: Start difference. First operand 2444 states. Second operand 4 states.
[2020-11-25 14:27:52,383 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:27:52,383 INFO  L93              Difference]: Finished difference Result 2750 states and 4439 transitions.
[2020-11-25 14:27:52,383 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 14:27:52,384 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2750 states and 4439 transitions.
[2020-11-25 14:27:52,402 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 14:27:52,426 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2750 states to 2674 states and 4327 transitions.
[2020-11-25 14:27:52,427 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 13
[2020-11-25 14:27:52,431 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1014
[2020-11-25 14:27:52,432 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2674 states and 4327 transitions.
[2020-11-25 14:27:52,443 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:27:52,443 INFO  L728         BuchiCegarLoop]: Abstraction has 2674 states and 4327 transitions.
[2020-11-25 14:27:52,457 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2674 states and 4327 transitions.
[2020-11-25 14:27:52,501 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2674 to 1896.
[2020-11-25 14:27:52,502 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1896 states.
[2020-11-25 14:27:52,506 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1896 states to 1896 states and 2893 transitions.
[2020-11-25 14:27:52,507 INFO  L751         BuchiCegarLoop]: Abstraction has 1896 states and 2893 transitions.
[2020-11-25 14:27:52,507 INFO  L631         BuchiCegarLoop]: Abstraction has 1896 states and 2893 transitions.
[2020-11-25 14:27:52,507 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 14:27:52,507 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1896 states and 2893 transitions.
[2020-11-25 14:27:52,513 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:27:52,514 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:27:52,514 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:27:52,515 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:27:52,515 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_Ducks0 := false;
[L2]                 call_transfer_Ducks0 := false;
[L2]     CALL        call main();
[L2853]              assume null == 0;
[L2854]  CALL        call this := FreshRefGenerator__success();
[L1249]              havoc newRef;
[L1250]              assume Alloc[newRef] == false;
[L1251]              Alloc[newRef] := true;
[L1252]              assume newRef != null;
[L2854]  RET         call this := FreshRefGenerator__success();
[L2855]              assume now >= 0;
[L2856]              assume DType[this] == Ducks;
[L2857]              assume msgvalue_MSG == 0;
[L2858]              gas := gas - 53000;
[L2859]  CALL        call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L398]               havoc __exception;
[L399]               revert := false;
[L400]   COND FALSE  !(__exception)
[L421]   CALL        call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L1456]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1281]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1266]              assume msgsender_MSG != null;
[L1267]              Balance[this] := 0;
[L1281]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  COND FALSE  !(revert)
[L1456]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  COND FALSE  !(revert)
[L1460]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1313]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1298]              assume msgsender_MSG != null;
[L1299]              Balance[this] := 0;
[L1313]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  COND FALSE  !(revert)
[L1460]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1461]  COND FALSE  !(revert)
[L1464]  CALL        call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1417]              assume msgsender_MSG != null;
[L1418]              Balance[this] := 0;
[L1419]              name_Ducks[this] := 560717954;
[L1420]              symbol_Ducks[this] := 560717954;
[L1421]              decimals_Ducks[this] := 0;
[L1422]              _totalSupply_Ducks[this] := 0;
[L1423]              balances_Ducks[this] := zeroRefintArr();
[L1424]              sum_balances0[this] := 0;
[L1425]              allowed_Ducks[this] := zeroRefRefintArr();
[L1426]              sum_allowed1[this] := 0;
[L1428]              name_Ducks[this] := 1576131613;
[L1429]              symbol_Ducks[this] := -1943651461;
[L1430]              decimals_Ducks[this] := 18;
[L1431]              _totalSupply_Ducks[this] := 1500000000000000000000000;
[L1432]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][msgsender_MSG];
[L1433]              balances_Ducks[this][msgsender_MSG] := _totalSupply_Ducks[this];
[L1434]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][msgsender_MSG];
[L1435]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1464]  RET         call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1465]  COND FALSE  !(revert)
[L421]   RET         call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L422]               assume !revert && gas >= 0;
[L2859]  RET         call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L2860]              assume !revert && gas >= 0;

Loop:
[L2863]  CALL        call CorralChoice_Ducks(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != Ducks;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND TRUE   choice == 14
[L2751]              gas := gas - 21000;
[L2752]  COND FALSE  !(gas >= 0)
[L2863]  RET         call CorralChoice_Ducks(this);

[2020-11-25 14:27:52,519 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:27:52,519 INFO  L82        PathProgramCache]: Analyzing trace with hash 10374549, now seen corresponding path program 1 times
[2020-11-25 14:27:52,520 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:27:52,528 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:27:52,541 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 14:27:52,542 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:27:52,542 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [2] imperfect sequences [] total 2
[2020-11-25 14:27:52,543 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:27:52,543 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 14:27:52,543 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 14:27:52,543 INFO  L87              Difference]: Start difference. First operand 1896 states and 2893 transitions. cyclomatic complexity: 999 Second operand 3 states.
[2020-11-25 14:27:52,602 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:27:52,602 INFO  L93              Difference]: Finished difference Result 1742 states and 1871 transitions.
[2020-11-25 14:27:52,602 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 14:27:52,603 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1742 states and 1871 transitions.
[2020-11-25 14:27:52,608 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:27:52,614 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1742 states to 1742 states and 1871 transitions.
[2020-11-25 14:27:52,614 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 615
[2020-11-25 14:27:52,615 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 615
[2020-11-25 14:27:52,615 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1742 states and 1871 transitions.
[2020-11-25 14:27:52,616 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:27:52,616 INFO  L728         BuchiCegarLoop]: Abstraction has 1742 states and 1871 transitions.
[2020-11-25 14:27:52,618 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1742 states and 1871 transitions.
[2020-11-25 14:27:52,630 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1742 to 1742.
[2020-11-25 14:27:52,630 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1742 states.
[2020-11-25 14:27:52,632 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1742 states to 1742 states and 1871 transitions.
[2020-11-25 14:27:52,632 INFO  L751         BuchiCegarLoop]: Abstraction has 1742 states and 1871 transitions.
[2020-11-25 14:27:52,632 INFO  L631         BuchiCegarLoop]: Abstraction has 1742 states and 1871 transitions.
[2020-11-25 14:27:52,632 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 14:27:52,633 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1742 states and 1871 transitions.
[2020-11-25 14:27:52,636 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:27:52,636 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:27:52,636 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:27:52,637 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:27:52,637 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_Ducks0 := false;
[L2]                 call_transfer_Ducks0 := false;
[L2]     CALL        call main();
[L2853]              assume null == 0;
[L2854]  CALL        call this := FreshRefGenerator__success();
[L1249]              havoc newRef;
[L1250]              assume Alloc[newRef] == false;
[L1251]              Alloc[newRef] := true;
[L1252]              assume newRef != null;
[L2854]  RET         call this := FreshRefGenerator__success();
[L2855]              assume now >= 0;
[L2856]              assume DType[this] == Ducks;
[L2857]              assume msgvalue_MSG == 0;
[L2858]              gas := gas - 53000;
[L2859]  CALL        call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L398]               havoc __exception;
[L399]               revert := false;
[L400]   COND FALSE  !(__exception)
[L421]   CALL        call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L1456]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1281]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1266]              assume msgsender_MSG != null;
[L1267]              Balance[this] := 0;
[L1281]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  COND FALSE  !(revert)
[L1456]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  COND FALSE  !(revert)
[L1460]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1313]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1298]              assume msgsender_MSG != null;
[L1299]              Balance[this] := 0;
[L1313]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  COND FALSE  !(revert)
[L1460]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1461]  COND FALSE  !(revert)
[L1464]  CALL        call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1417]              assume msgsender_MSG != null;
[L1418]              Balance[this] := 0;
[L1419]              name_Ducks[this] := 560717954;
[L1420]              symbol_Ducks[this] := 560717954;
[L1421]              decimals_Ducks[this] := 0;
[L1422]              _totalSupply_Ducks[this] := 0;
[L1423]              balances_Ducks[this] := zeroRefintArr();
[L1424]              sum_balances0[this] := 0;
[L1425]              allowed_Ducks[this] := zeroRefRefintArr();
[L1426]              sum_allowed1[this] := 0;
[L1428]              name_Ducks[this] := 1576131613;
[L1429]              symbol_Ducks[this] := -1943651461;
[L1430]              decimals_Ducks[this] := 18;
[L1431]              _totalSupply_Ducks[this] := 1500000000000000000000000;
[L1432]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][msgsender_MSG];
[L1433]              balances_Ducks[this][msgsender_MSG] := _totalSupply_Ducks[this];
[L1434]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][msgsender_MSG];
[L1435]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1464]  RET         call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1465]  COND FALSE  !(revert)
[L421]   RET         call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L422]               assume !revert && gas >= 0;
[L2859]  RET         call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L2860]              assume !revert && gas >= 0;
[L2863]  CALL        call CorralChoice_Ducks(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != Ducks;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND FALSE  !(choice == 14)
[L2756]  COND FALSE  !(choice == 13)
[L2762]  COND FALSE  !(choice == 12)
[L2768]  COND TRUE   choice == 11
[L2769]              gas := gas - 21000;
[L2770]  COND TRUE   gas >= 0
[L2771]              assume tokens_s334 >= 0 && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2772]              assume msgvalue_MSG == 0;
[L2773]  CALL        call success_s334 := transfer~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s334 && tokens_s334 <= balances_Ducks[this][msgsender_MSG]) && tokens_s334 >= 0) && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s334] >= 0) && balances_Ducks[this][to_s334] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][msgsender_MSG] >= 0) && balances_Ducks[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_Ducks0 := true;
[L2]                 call_transfer_Ducks0 := false;
[L2]                 revert := revert_hold;
[L652]               havoc __exception;
[L653]               revert := false;
[L654]   COND TRUE   __exception
[L655]               __tmp__Balance := Balance;
[L656]               __tmp__DType := DType;
[L657]               __tmp__Alloc := Alloc;
[L658]               __tmp__balance_ADDR := balance_ADDR;
[L659]               __tmp__M_Ref_int := M_Ref_int;
[L660]               __tmp__sum_balances0 := sum_balances0;
[L661]               __tmp__alloc_allowed_Ducks_lvl0 := alloc_allowed_Ducks_lvl0;
[L662]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L663]               __tmp__sum_allowed1 := sum_allowed1;
[L664]               __tmp__Length := Length;
[L665]               __tmp__now := now;
[L666]               __tmp__name_Ducks := name_Ducks;
[L667]               __tmp__symbol_Ducks := symbol_Ducks;
[L668]               __tmp__decimals_Ducks := decimals_Ducks;
[L669]               __tmp___totalSupply_Ducks := _totalSupply_Ducks;
[L670]               __tmp__balances_Ducks := balances_Ducks;
[L671]               __tmp__allowed_Ducks := allowed_Ducks;
[L672]   CALL        call success_s334 := transfer~address~uint256_Ducks__fail(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L1533]  COND TRUE   __tmp__DType[this] == Ducks
[L1534]  CALL        call __var_2 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][msgsender_MSG], tokens_s334);
[L1339]  COND TRUE   !(b_s112 <= a_s112)
[L1340]              revert := true;
[L1534]  RET         call __var_2 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][msgsender_MSG], tokens_s334);
[L1535]  COND TRUE   revert
[L672]   RET         call success_s334 := transfer~address~uint256_Ducks__fail(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L673]               assume revert || gas < 0;
[L2773]  RET         call success_s334 := transfer~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2863]  RET         call CorralChoice_Ducks(this);

Loop:
[L2863]  CALL        call CorralChoice_Ducks(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != Ducks;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND FALSE  !(choice == 14)
[L2756]  COND FALSE  !(choice == 13)
[L2762]  COND FALSE  !(choice == 12)
[L2768]  COND TRUE   choice == 11
[L2769]              gas := gas - 21000;
[L2770]  COND TRUE   gas >= 0
[L2771]              assume tokens_s334 >= 0 && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2772]              assume msgvalue_MSG == 0;
[L2773]  CALL        call success_s334 := transfer~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s334 && tokens_s334 <= balances_Ducks[this][msgsender_MSG]) && tokens_s334 >= 0) && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s334] >= 0) && balances_Ducks[this][to_s334] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][msgsender_MSG] >= 0) && balances_Ducks[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_Ducks0 := true;
[L2]                 call_transfer_Ducks0 := false;
[L2]                 revert := revert_hold;
[L652]               havoc __exception;
[L653]               revert := false;
[L654]   COND TRUE   __exception
[L655]               __tmp__Balance := Balance;
[L656]               __tmp__DType := DType;
[L657]               __tmp__Alloc := Alloc;
[L658]               __tmp__balance_ADDR := balance_ADDR;
[L659]               __tmp__M_Ref_int := M_Ref_int;
[L660]               __tmp__sum_balances0 := sum_balances0;
[L661]               __tmp__alloc_allowed_Ducks_lvl0 := alloc_allowed_Ducks_lvl0;
[L662]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L663]               __tmp__sum_allowed1 := sum_allowed1;
[L664]               __tmp__Length := Length;
[L665]               __tmp__now := now;
[L666]               __tmp__name_Ducks := name_Ducks;
[L667]               __tmp__symbol_Ducks := symbol_Ducks;
[L668]               __tmp__decimals_Ducks := decimals_Ducks;
[L669]               __tmp___totalSupply_Ducks := _totalSupply_Ducks;
[L670]               __tmp__balances_Ducks := balances_Ducks;
[L671]               __tmp__allowed_Ducks := allowed_Ducks;
[L672]   CALL        call success_s334 := transfer~address~uint256_Ducks__fail(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L1533]  COND TRUE   __tmp__DType[this] == Ducks
[L1534]  CALL        call __var_2 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][msgsender_MSG], tokens_s334);
[L1339]  COND TRUE   !(b_s112 <= a_s112)
[L1340]              revert := true;
[L1534]  RET         call __var_2 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][msgsender_MSG], tokens_s334);
[L1535]  COND TRUE   revert
[L672]   RET         call success_s334 := transfer~address~uint256_Ducks__fail(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L673]               assume revert || gas < 0;
[L2773]  RET         call success_s334 := transfer~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2863]  RET         call CorralChoice_Ducks(this);

[2020-11-25 14:27:52,641 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:27:52,641 INFO  L82        PathProgramCache]: Analyzing trace with hash -646314841, now seen corresponding path program 1 times
[2020-11-25 14:27:52,642 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:27:52,654 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:27:52,702 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 14:27:52,702 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:27:52,702 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 14:27:52,703 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:27:52,703 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 14:27:52,703 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 14:27:52,703 INFO  L87              Difference]: Start difference. First operand 1742 states and 1871 transitions. cyclomatic complexity: 131 Second operand 7 states.
[2020-11-25 14:27:53,499 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:27:53,499 INFO  L93              Difference]: Finished difference Result 1900 states and 2043 transitions.
[2020-11-25 14:27:53,499 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 14:27:53,500 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1900 states and 2043 transitions.
[2020-11-25 14:27:53,508 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 14:27:53,515 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1900 states to 1900 states and 2043 transitions.
[2020-11-25 14:27:53,515 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 670
[2020-11-25 14:27:53,515 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 670
[2020-11-25 14:27:53,515 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1900 states and 2043 transitions.
[2020-11-25 14:27:53,517 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:27:53,517 INFO  L728         BuchiCegarLoop]: Abstraction has 1900 states and 2043 transitions.
[2020-11-25 14:27:53,519 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1900 states and 2043 transitions.
[2020-11-25 14:27:53,541 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1900 to 1794.
[2020-11-25 14:27:53,542 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1794 states.
[2020-11-25 14:27:53,546 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1794 states to 1794 states and 1927 transitions.
[2020-11-25 14:27:53,546 INFO  L751         BuchiCegarLoop]: Abstraction has 1794 states and 1927 transitions.
[2020-11-25 14:27:53,546 INFO  L631         BuchiCegarLoop]: Abstraction has 1794 states and 1927 transitions.
[2020-11-25 14:27:53,546 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 14:27:53,546 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1794 states and 1927 transitions.
[2020-11-25 14:27:53,552 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:27:53,552 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:27:53,552 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:27:53,554 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:27:53,554 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_Ducks0 := false;
[L2]                 call_transfer_Ducks0 := false;
[L2]     CALL        call main();
[L2853]              assume null == 0;
[L2854]  CALL        call this := FreshRefGenerator__success();
[L1249]              havoc newRef;
[L1250]              assume Alloc[newRef] == false;
[L1251]              Alloc[newRef] := true;
[L1252]              assume newRef != null;
[L2854]  RET         call this := FreshRefGenerator__success();
[L2855]              assume now >= 0;
[L2856]              assume DType[this] == Ducks;
[L2857]              assume msgvalue_MSG == 0;
[L2858]              gas := gas - 53000;
[L2859]  CALL        call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L398]               havoc __exception;
[L399]               revert := false;
[L400]   COND FALSE  !(__exception)
[L421]   CALL        call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L1456]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1281]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1266]              assume msgsender_MSG != null;
[L1267]              Balance[this] := 0;
[L1281]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  COND FALSE  !(revert)
[L1456]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  COND FALSE  !(revert)
[L1460]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1313]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1298]              assume msgsender_MSG != null;
[L1299]              Balance[this] := 0;
[L1313]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  COND FALSE  !(revert)
[L1460]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1461]  COND FALSE  !(revert)
[L1464]  CALL        call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1417]              assume msgsender_MSG != null;
[L1418]              Balance[this] := 0;
[L1419]              name_Ducks[this] := 560717954;
[L1420]              symbol_Ducks[this] := 560717954;
[L1421]              decimals_Ducks[this] := 0;
[L1422]              _totalSupply_Ducks[this] := 0;
[L1423]              balances_Ducks[this] := zeroRefintArr();
[L1424]              sum_balances0[this] := 0;
[L1425]              allowed_Ducks[this] := zeroRefRefintArr();
[L1426]              sum_allowed1[this] := 0;
[L1428]              name_Ducks[this] := 1576131613;
[L1429]              symbol_Ducks[this] := -1943651461;
[L1430]              decimals_Ducks[this] := 18;
[L1431]              _totalSupply_Ducks[this] := 1500000000000000000000000;
[L1432]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][msgsender_MSG];
[L1433]              balances_Ducks[this][msgsender_MSG] := _totalSupply_Ducks[this];
[L1434]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][msgsender_MSG];
[L1435]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1464]  RET         call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1465]  COND FALSE  !(revert)
[L421]   RET         call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L422]               assume !revert && gas >= 0;
[L2859]  RET         call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L2860]              assume !revert && gas >= 0;
[L2863]  CALL        call CorralChoice_Ducks(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != Ducks;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND FALSE  !(choice == 14)
[L2756]  COND FALSE  !(choice == 13)
[L2762]  COND FALSE  !(choice == 12)
[L2768]  COND TRUE   choice == 11
[L2769]              gas := gas - 21000;
[L2770]  COND TRUE   gas >= 0
[L2771]              assume tokens_s334 >= 0 && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2772]              assume msgvalue_MSG == 0;
[L2773]  CALL        call success_s334 := transfer~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s334 && tokens_s334 <= balances_Ducks[this][msgsender_MSG]) && tokens_s334 >= 0) && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s334] >= 0) && balances_Ducks[this][to_s334] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][msgsender_MSG] >= 0) && balances_Ducks[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_Ducks0 := true;
[L2]                 call_transfer_Ducks0 := false;
[L2]                 revert := revert_hold;
[L652]               havoc __exception;
[L653]               revert := false;
[L654]   COND FALSE  !(__exception)
[L675]   CALL        call success_s334 := transfer~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L1563]  COND TRUE   DType[this] == Ducks
[L1564]  CALL        call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][msgsender_MSG], tokens_s334);
[L1348]  COND FALSE  !(!(b_s112 <= a_s112))
[L1352]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1564]  RET         call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][msgsender_MSG], tokens_s334);
[L1565]  COND FALSE  !(revert)
[L1571]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][msgsender_MSG];
[L1572]              balances_Ducks[this][msgsender_MSG] := __var_2;
[L1573]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][msgsender_MSG];
[L1574]  COND TRUE   DType[this] == Ducks
[L1575]  CALL        call __var_3 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s334], tokens_s334);
[L1330]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1331]  COND FALSE  !(!(c_s90 >= a_s90))
[L1575]  RET         call __var_3 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s334], tokens_s334);
[L1576]  COND FALSE  !(revert)
[L1582]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][to_s334];
[L1583]              balances_Ducks[this][to_s334] := __var_3;
[L1584]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][to_s334];
[L1585]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1586]              success_s334 := true;
[L675]   RET         call success_s334 := transfer~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L676]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((success_s334 == true && _totalSupply_Ducks[this] == old(_totalSupply_Ducks[this])) && balances_Ducks[this] == old(balances_Ducks[this])) && allowed_Ducks[this] == old(allowed_Ducks[this])) && name_Ducks[this] == old(name_Ducks[this])) && symbol_Ducks[this] == old(symbol_Ducks[this])) && decimals_Ducks[this] == old(decimals_Ducks[this]));
[L2]                 revert := revert_hold;
[L2773]  RET         call success_s334 := transfer~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2863]  RET         call CorralChoice_Ducks(this);

Loop:
[L2863]  CALL        call CorralChoice_Ducks(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != Ducks;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND FALSE  !(choice == 14)
[L2756]  COND FALSE  !(choice == 13)
[L2762]  COND FALSE  !(choice == 12)
[L2768]  COND TRUE   choice == 11
[L2769]              gas := gas - 21000;
[L2770]  COND TRUE   gas >= 0
[L2771]              assume tokens_s334 >= 0 && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2772]              assume msgvalue_MSG == 0;
[L2773]  CALL        call success_s334 := transfer~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s334 && tokens_s334 <= balances_Ducks[this][msgsender_MSG]) && tokens_s334 >= 0) && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s334] >= 0) && balances_Ducks[this][to_s334] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][msgsender_MSG] >= 0) && balances_Ducks[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_Ducks0 := true;
[L2]                 call_transfer_Ducks0 := false;
[L2]                 revert := revert_hold;
[L652]               havoc __exception;
[L653]               revert := false;
[L654]   COND FALSE  !(__exception)
[L675]   CALL        call success_s334 := transfer~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L1563]  COND TRUE   DType[this] == Ducks
[L1564]  CALL        call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][msgsender_MSG], tokens_s334);
[L1348]  COND FALSE  !(!(b_s112 <= a_s112))
[L1352]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1564]  RET         call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][msgsender_MSG], tokens_s334);
[L1565]  COND FALSE  !(revert)
[L1571]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][msgsender_MSG];
[L1572]              balances_Ducks[this][msgsender_MSG] := __var_2;
[L1573]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][msgsender_MSG];
[L1574]  COND TRUE   DType[this] == Ducks
[L1575]  CALL        call __var_3 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s334], tokens_s334);
[L1330]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1331]  COND FALSE  !(!(c_s90 >= a_s90))
[L1575]  RET         call __var_3 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s334], tokens_s334);
[L1576]  COND FALSE  !(revert)
[L1582]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][to_s334];
[L1583]              balances_Ducks[this][to_s334] := __var_3;
[L1584]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][to_s334];
[L1585]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1586]              success_s334 := true;
[L675]   RET         call success_s334 := transfer~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L676]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((success_s334 == true && _totalSupply_Ducks[this] == old(_totalSupply_Ducks[this])) && balances_Ducks[this] == old(balances_Ducks[this])) && allowed_Ducks[this] == old(allowed_Ducks[this])) && name_Ducks[this] == old(name_Ducks[this])) && symbol_Ducks[this] == old(symbol_Ducks[this])) && decimals_Ducks[this] == old(decimals_Ducks[this]));
[L2]                 revert := revert_hold;
[L2773]  RET         call success_s334 := transfer~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2863]  RET         call CorralChoice_Ducks(this);

[2020-11-25 14:27:53,558 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:27:53,559 INFO  L82        PathProgramCache]: Analyzing trace with hash 1036011441, now seen corresponding path program 1 times
[2020-11-25 14:27:53,559 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:27:53,619 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:27:54,350 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 14:27:54,350 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:27:54,351 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [21] imperfect sequences [] total 21
[2020-11-25 14:27:54,352 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:27:54,352 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 22 interpolants.
[2020-11-25 14:27:54,353 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=48, Invalid=414, Unknown=0, NotChecked=0, Total=462
[2020-11-25 14:27:54,353 INFO  L87              Difference]: Start difference. First operand 1794 states and 1927 transitions. cyclomatic complexity: 135 Second operand 22 states.
[2020-11-25 14:27:57,739 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:27:57,739 INFO  L93              Difference]: Finished difference Result 1857 states and 2016 transitions.
[2020-11-25 14:27:57,739 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 23 states. 
[2020-11-25 14:27:57,739 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1857 states and 2016 transitions.
[2020-11-25 14:27:57,744 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 14:27:57,749 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1857 states to 1857 states and 2016 transitions.
[2020-11-25 14:27:57,749 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 647
[2020-11-25 14:27:57,749 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 647
[2020-11-25 14:27:57,749 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1857 states and 2016 transitions.
[2020-11-25 14:27:57,751 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:27:57,751 INFO  L728         BuchiCegarLoop]: Abstraction has 1857 states and 2016 transitions.
[2020-11-25 14:27:57,752 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1857 states and 2016 transitions.
[2020-11-25 14:27:57,764 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1857 to 1842.
[2020-11-25 14:27:57,764 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1842 states.
[2020-11-25 14:27:57,766 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1842 states to 1842 states and 1985 transitions.
[2020-11-25 14:27:57,766 INFO  L751         BuchiCegarLoop]: Abstraction has 1842 states and 1985 transitions.
[2020-11-25 14:27:57,766 INFO  L631         BuchiCegarLoop]: Abstraction has 1842 states and 1985 transitions.
[2020-11-25 14:27:57,766 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 14:27:57,766 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1842 states and 1985 transitions.
[2020-11-25 14:27:57,770 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 14:27:57,770 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:27:57,770 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:27:57,771 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:27:57,772 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_Ducks0 := false;
[L2]                 call_transfer_Ducks0 := false;
[L2]     CALL        call main();
[L2853]              assume null == 0;
[L2854]  CALL        call this := FreshRefGenerator__success();
[L1249]              havoc newRef;
[L1250]              assume Alloc[newRef] == false;
[L1251]              Alloc[newRef] := true;
[L1252]              assume newRef != null;
[L2854]  RET         call this := FreshRefGenerator__success();
[L2855]              assume now >= 0;
[L2856]              assume DType[this] == Ducks;
[L2857]              assume msgvalue_MSG == 0;
[L2858]              gas := gas - 53000;
[L2859]  CALL        call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L398]               havoc __exception;
[L399]               revert := false;
[L400]   COND FALSE  !(__exception)
[L421]   CALL        call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L1456]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1281]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1266]              assume msgsender_MSG != null;
[L1267]              Balance[this] := 0;
[L1281]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  COND FALSE  !(revert)
[L1456]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  COND FALSE  !(revert)
[L1460]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1313]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1298]              assume msgsender_MSG != null;
[L1299]              Balance[this] := 0;
[L1313]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  COND FALSE  !(revert)
[L1460]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1461]  COND FALSE  !(revert)
[L1464]  CALL        call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1417]              assume msgsender_MSG != null;
[L1418]              Balance[this] := 0;
[L1419]              name_Ducks[this] := 560717954;
[L1420]              symbol_Ducks[this] := 560717954;
[L1421]              decimals_Ducks[this] := 0;
[L1422]              _totalSupply_Ducks[this] := 0;
[L1423]              balances_Ducks[this] := zeroRefintArr();
[L1424]              sum_balances0[this] := 0;
[L1425]              allowed_Ducks[this] := zeroRefRefintArr();
[L1426]              sum_allowed1[this] := 0;
[L1428]              name_Ducks[this] := 1576131613;
[L1429]              symbol_Ducks[this] := -1943651461;
[L1430]              decimals_Ducks[this] := 18;
[L1431]              _totalSupply_Ducks[this] := 1500000000000000000000000;
[L1432]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][msgsender_MSG];
[L1433]              balances_Ducks[this][msgsender_MSG] := _totalSupply_Ducks[this];
[L1434]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][msgsender_MSG];
[L1435]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1464]  RET         call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1465]  COND FALSE  !(revert)
[L421]   RET         call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L422]               assume !revert && gas >= 0;
[L2859]  RET         call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L2860]              assume !revert && gas >= 0;
[L2863]  CALL        call CorralChoice_Ducks(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != Ducks;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND FALSE  !(choice == 14)
[L2756]  COND FALSE  !(choice == 13)
[L2762]  COND FALSE  !(choice == 12)
[L2768]  COND TRUE   choice == 11
[L2769]              gas := gas - 21000;
[L2770]  COND TRUE   gas >= 0
[L2771]              assume tokens_s334 >= 0 && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2772]              assume msgvalue_MSG == 0;
[L2773]  CALL        call success_s334 := transfer~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s334 && tokens_s334 <= balances_Ducks[this][msgsender_MSG]) && tokens_s334 >= 0) && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s334] >= 0) && balances_Ducks[this][to_s334] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][msgsender_MSG] >= 0) && balances_Ducks[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_Ducks0 := true;
[L2]                 call_transfer_Ducks0 := false;
[L2]                 revert := revert_hold;
[L652]               havoc __exception;
[L653]               revert := false;
[L654]   COND TRUE   __exception
[L655]               __tmp__Balance := Balance;
[L656]               __tmp__DType := DType;
[L657]               __tmp__Alloc := Alloc;
[L658]               __tmp__balance_ADDR := balance_ADDR;
[L659]               __tmp__M_Ref_int := M_Ref_int;
[L660]               __tmp__sum_balances0 := sum_balances0;
[L661]               __tmp__alloc_allowed_Ducks_lvl0 := alloc_allowed_Ducks_lvl0;
[L662]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L663]               __tmp__sum_allowed1 := sum_allowed1;
[L664]               __tmp__Length := Length;
[L665]               __tmp__now := now;
[L666]               __tmp__name_Ducks := name_Ducks;
[L667]               __tmp__symbol_Ducks := symbol_Ducks;
[L668]               __tmp__decimals_Ducks := decimals_Ducks;
[L669]               __tmp___totalSupply_Ducks := _totalSupply_Ducks;
[L670]               __tmp__balances_Ducks := balances_Ducks;
[L671]               __tmp__allowed_Ducks := allowed_Ducks;
[L672]   CALL        call success_s334 := transfer~address~uint256_Ducks__fail(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L1533]  COND TRUE   __tmp__DType[this] == Ducks
[L1534]  CALL        call __var_2 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][msgsender_MSG], tokens_s334);
[L1339]  COND FALSE  !(!(b_s112 <= a_s112))
[L1343]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1534]  RET         call __var_2 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][msgsender_MSG], tokens_s334);
[L1535]  COND FALSE  !(revert)
[L1541]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_Ducks[this][msgsender_MSG];
[L1542]              __tmp__balances_Ducks[this][msgsender_MSG] := __var_2;
[L1543]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_Ducks[this][msgsender_MSG];
[L1544]  COND TRUE   __tmp__DType[this] == Ducks
[L1545]  CALL        call __var_3 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][to_s334], tokens_s334);
[L1321]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1322]  COND TRUE   !(c_s90 >= a_s90)
[L1323]              revert := true;
[L1545]  RET         call __var_3 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][to_s334], tokens_s334);
[L1546]  COND TRUE   revert
[L672]   RET         call success_s334 := transfer~address~uint256_Ducks__fail(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L673]               assume revert || gas < 0;
[L2773]  RET         call success_s334 := transfer~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2863]  RET         call CorralChoice_Ducks(this);

Loop:
[L2863]  CALL        call CorralChoice_Ducks(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != Ducks;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND FALSE  !(choice == 14)
[L2756]  COND FALSE  !(choice == 13)
[L2762]  COND FALSE  !(choice == 12)
[L2768]  COND TRUE   choice == 11
[L2769]              gas := gas - 21000;
[L2770]  COND TRUE   gas >= 0
[L2771]              assume tokens_s334 >= 0 && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2772]              assume msgvalue_MSG == 0;
[L2773]  CALL        call success_s334 := transfer~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s334 && tokens_s334 <= balances_Ducks[this][msgsender_MSG]) && tokens_s334 >= 0) && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s334] >= 0) && balances_Ducks[this][to_s334] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][msgsender_MSG] >= 0) && balances_Ducks[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_Ducks0 := true;
[L2]                 call_transfer_Ducks0 := false;
[L2]                 revert := revert_hold;
[L652]               havoc __exception;
[L653]               revert := false;
[L654]   COND TRUE   __exception
[L655]               __tmp__Balance := Balance;
[L656]               __tmp__DType := DType;
[L657]               __tmp__Alloc := Alloc;
[L658]               __tmp__balance_ADDR := balance_ADDR;
[L659]               __tmp__M_Ref_int := M_Ref_int;
[L660]               __tmp__sum_balances0 := sum_balances0;
[L661]               __tmp__alloc_allowed_Ducks_lvl0 := alloc_allowed_Ducks_lvl0;
[L662]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L663]               __tmp__sum_allowed1 := sum_allowed1;
[L664]               __tmp__Length := Length;
[L665]               __tmp__now := now;
[L666]               __tmp__name_Ducks := name_Ducks;
[L667]               __tmp__symbol_Ducks := symbol_Ducks;
[L668]               __tmp__decimals_Ducks := decimals_Ducks;
[L669]               __tmp___totalSupply_Ducks := _totalSupply_Ducks;
[L670]               __tmp__balances_Ducks := balances_Ducks;
[L671]               __tmp__allowed_Ducks := allowed_Ducks;
[L672]   CALL        call success_s334 := transfer~address~uint256_Ducks__fail(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L1533]  COND TRUE   __tmp__DType[this] == Ducks
[L1534]  CALL        call __var_2 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][msgsender_MSG], tokens_s334);
[L1339]  COND FALSE  !(!(b_s112 <= a_s112))
[L1343]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1534]  RET         call __var_2 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][msgsender_MSG], tokens_s334);
[L1535]  COND FALSE  !(revert)
[L1541]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_Ducks[this][msgsender_MSG];
[L1542]              __tmp__balances_Ducks[this][msgsender_MSG] := __var_2;
[L1543]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_Ducks[this][msgsender_MSG];
[L1544]  COND TRUE   __tmp__DType[this] == Ducks
[L1545]  CALL        call __var_3 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][to_s334], tokens_s334);
[L1321]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1322]  COND TRUE   !(c_s90 >= a_s90)
[L1323]              revert := true;
[L1545]  RET         call __var_3 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][to_s334], tokens_s334);
[L1546]  COND TRUE   revert
[L672]   RET         call success_s334 := transfer~address~uint256_Ducks__fail(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L673]               assume revert || gas < 0;
[L2773]  RET         call success_s334 := transfer~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2863]  RET         call CorralChoice_Ducks(this);

[2020-11-25 14:27:57,774 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:27:57,774 INFO  L82        PathProgramCache]: Analyzing trace with hash 1918646262, now seen corresponding path program 1 times
[2020-11-25 14:27:57,775 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:27:57,782 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:27:57,829 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 14:27:57,829 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:27:57,830 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [12] imperfect sequences [] total 12
[2020-11-25 14:27:57,830 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:27:57,830 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-25 14:27:57,830 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=23, Invalid=109, Unknown=0, NotChecked=0, Total=132
[2020-11-25 14:27:57,830 INFO  L87              Difference]: Start difference. First operand 1842 states and 1985 transitions. cyclomatic complexity: 147 Second operand 12 states.
[2020-11-25 14:27:58,437 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:27:58,437 INFO  L93              Difference]: Finished difference Result 1936 states and 2095 transitions.
[2020-11-25 14:27:58,437 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-11-25 14:27:58,437 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1936 states and 2095 transitions.
[2020-11-25 14:27:58,443 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 14:27:58,447 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1936 states to 1936 states and 2095 transitions.
[2020-11-25 14:27:58,448 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 687
[2020-11-25 14:27:58,448 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 687
[2020-11-25 14:27:58,448 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1936 states and 2095 transitions.
[2020-11-25 14:27:58,450 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:27:58,450 INFO  L728         BuchiCegarLoop]: Abstraction has 1936 states and 2095 transitions.
[2020-11-25 14:27:58,451 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1936 states and 2095 transitions.
[2020-11-25 14:27:58,462 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1936 to 1880.
[2020-11-25 14:27:58,462 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1880 states.
[2020-11-25 14:27:58,464 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1880 states to 1880 states and 2024 transitions.
[2020-11-25 14:27:58,464 INFO  L751         BuchiCegarLoop]: Abstraction has 1880 states and 2024 transitions.
[2020-11-25 14:27:58,464 INFO  L631         BuchiCegarLoop]: Abstraction has 1880 states and 2024 transitions.
[2020-11-25 14:27:58,464 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 14:27:58,464 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1880 states and 2024 transitions.
[2020-11-25 14:27:58,466 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 14:27:58,467 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:27:58,467 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:27:58,467 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:27:58,468 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_Ducks0 := false;
[L2]                 call_transfer_Ducks0 := false;
[L2]     CALL        call main();
[L2853]              assume null == 0;
[L2854]  CALL        call this := FreshRefGenerator__success();
[L1249]              havoc newRef;
[L1250]              assume Alloc[newRef] == false;
[L1251]              Alloc[newRef] := true;
[L1252]              assume newRef != null;
[L2854]  RET         call this := FreshRefGenerator__success();
[L2855]              assume now >= 0;
[L2856]              assume DType[this] == Ducks;
[L2857]              assume msgvalue_MSG == 0;
[L2858]              gas := gas - 53000;
[L2859]  CALL        call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L398]               havoc __exception;
[L399]               revert := false;
[L400]   COND FALSE  !(__exception)
[L421]   CALL        call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L1456]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1281]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1266]              assume msgsender_MSG != null;
[L1267]              Balance[this] := 0;
[L1281]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  COND FALSE  !(revert)
[L1456]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  COND FALSE  !(revert)
[L1460]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1313]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1298]              assume msgsender_MSG != null;
[L1299]              Balance[this] := 0;
[L1313]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  COND FALSE  !(revert)
[L1460]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1461]  COND FALSE  !(revert)
[L1464]  CALL        call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1417]              assume msgsender_MSG != null;
[L1418]              Balance[this] := 0;
[L1419]              name_Ducks[this] := 560717954;
[L1420]              symbol_Ducks[this] := 560717954;
[L1421]              decimals_Ducks[this] := 0;
[L1422]              _totalSupply_Ducks[this] := 0;
[L1423]              balances_Ducks[this] := zeroRefintArr();
[L1424]              sum_balances0[this] := 0;
[L1425]              allowed_Ducks[this] := zeroRefRefintArr();
[L1426]              sum_allowed1[this] := 0;
[L1428]              name_Ducks[this] := 1576131613;
[L1429]              symbol_Ducks[this] := -1943651461;
[L1430]              decimals_Ducks[this] := 18;
[L1431]              _totalSupply_Ducks[this] := 1500000000000000000000000;
[L1432]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][msgsender_MSG];
[L1433]              balances_Ducks[this][msgsender_MSG] := _totalSupply_Ducks[this];
[L1434]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][msgsender_MSG];
[L1435]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1464]  RET         call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1465]  COND FALSE  !(revert)
[L421]   RET         call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L422]               assume !revert && gas >= 0;
[L2859]  RET         call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L2860]              assume !revert && gas >= 0;
[L2863]  CALL        call CorralChoice_Ducks(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != Ducks;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND FALSE  !(choice == 14)
[L2756]  COND FALSE  !(choice == 13)
[L2762]  COND FALSE  !(choice == 12)
[L2768]  COND TRUE   choice == 11
[L2769]              gas := gas - 21000;
[L2770]  COND TRUE   gas >= 0
[L2771]              assume tokens_s334 >= 0 && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2772]              assume msgvalue_MSG == 0;
[L2773]  CALL        call success_s334 := transfer~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s334 && tokens_s334 <= balances_Ducks[this][msgsender_MSG]) && tokens_s334 >= 0) && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s334] >= 0) && balances_Ducks[this][to_s334] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][msgsender_MSG] >= 0) && balances_Ducks[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_Ducks0 := true;
[L2]                 call_transfer_Ducks0 := false;
[L2]                 revert := revert_hold;
[L652]               havoc __exception;
[L653]               revert := false;
[L654]   COND TRUE   __exception
[L655]               __tmp__Balance := Balance;
[L656]               __tmp__DType := DType;
[L657]               __tmp__Alloc := Alloc;
[L658]               __tmp__balance_ADDR := balance_ADDR;
[L659]               __tmp__M_Ref_int := M_Ref_int;
[L660]               __tmp__sum_balances0 := sum_balances0;
[L661]               __tmp__alloc_allowed_Ducks_lvl0 := alloc_allowed_Ducks_lvl0;
[L662]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L663]               __tmp__sum_allowed1 := sum_allowed1;
[L664]               __tmp__Length := Length;
[L665]               __tmp__now := now;
[L666]               __tmp__name_Ducks := name_Ducks;
[L667]               __tmp__symbol_Ducks := symbol_Ducks;
[L668]               __tmp__decimals_Ducks := decimals_Ducks;
[L669]               __tmp___totalSupply_Ducks := _totalSupply_Ducks;
[L670]               __tmp__balances_Ducks := balances_Ducks;
[L671]               __tmp__allowed_Ducks := allowed_Ducks;
[L672]   CALL        call success_s334 := transfer~address~uint256_Ducks__fail(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L1533]  COND TRUE   __tmp__DType[this] == Ducks
[L1534]  CALL        call __var_2 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][msgsender_MSG], tokens_s334);
[L1339]  COND FALSE  !(!(b_s112 <= a_s112))
[L1343]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1534]  RET         call __var_2 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][msgsender_MSG], tokens_s334);
[L1535]  COND FALSE  !(revert)
[L1541]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_Ducks[this][msgsender_MSG];
[L1542]              __tmp__balances_Ducks[this][msgsender_MSG] := __var_2;
[L1543]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_Ducks[this][msgsender_MSG];
[L1544]  COND TRUE   __tmp__DType[this] == Ducks
[L1545]  CALL        call __var_3 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][to_s334], tokens_s334);
[L1321]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1322]  COND FALSE  !(!(c_s90 >= a_s90))
[L1545]  RET         call __var_3 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][to_s334], tokens_s334);
[L1546]  COND FALSE  !(revert)
[L1552]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_Ducks[this][to_s334];
[L1553]              __tmp__balances_Ducks[this][to_s334] := __var_3;
[L1554]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_Ducks[this][to_s334];
[L1555]              success_s334 := true;
[L672]   RET         call success_s334 := transfer~address~uint256_Ducks__fail(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L673]               assume revert || gas < 0;
[L2773]  RET         call success_s334 := transfer~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2863]  RET         call CorralChoice_Ducks(this);

Loop:
[L2863]  CALL        call CorralChoice_Ducks(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != Ducks;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND FALSE  !(choice == 14)
[L2756]  COND FALSE  !(choice == 13)
[L2762]  COND FALSE  !(choice == 12)
[L2768]  COND TRUE   choice == 11
[L2769]              gas := gas - 21000;
[L2770]  COND TRUE   gas >= 0
[L2771]              assume tokens_s334 >= 0 && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2772]              assume msgvalue_MSG == 0;
[L2773]  CALL        call success_s334 := transfer~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s334 && tokens_s334 <= balances_Ducks[this][msgsender_MSG]) && tokens_s334 >= 0) && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s334] >= 0) && balances_Ducks[this][to_s334] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][msgsender_MSG] >= 0) && balances_Ducks[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_Ducks0 := true;
[L2]                 call_transfer_Ducks0 := false;
[L2]                 revert := revert_hold;
[L652]               havoc __exception;
[L653]               revert := false;
[L654]   COND TRUE   __exception
[L655]               __tmp__Balance := Balance;
[L656]               __tmp__DType := DType;
[L657]               __tmp__Alloc := Alloc;
[L658]               __tmp__balance_ADDR := balance_ADDR;
[L659]               __tmp__M_Ref_int := M_Ref_int;
[L660]               __tmp__sum_balances0 := sum_balances0;
[L661]               __tmp__alloc_allowed_Ducks_lvl0 := alloc_allowed_Ducks_lvl0;
[L662]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L663]               __tmp__sum_allowed1 := sum_allowed1;
[L664]               __tmp__Length := Length;
[L665]               __tmp__now := now;
[L666]               __tmp__name_Ducks := name_Ducks;
[L667]               __tmp__symbol_Ducks := symbol_Ducks;
[L668]               __tmp__decimals_Ducks := decimals_Ducks;
[L669]               __tmp___totalSupply_Ducks := _totalSupply_Ducks;
[L670]               __tmp__balances_Ducks := balances_Ducks;
[L671]               __tmp__allowed_Ducks := allowed_Ducks;
[L672]   CALL        call success_s334 := transfer~address~uint256_Ducks__fail(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L1533]  COND TRUE   __tmp__DType[this] == Ducks
[L1534]  CALL        call __var_2 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][msgsender_MSG], tokens_s334);
[L1339]  COND FALSE  !(!(b_s112 <= a_s112))
[L1343]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1534]  RET         call __var_2 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][msgsender_MSG], tokens_s334);
[L1535]  COND FALSE  !(revert)
[L1541]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_Ducks[this][msgsender_MSG];
[L1542]              __tmp__balances_Ducks[this][msgsender_MSG] := __var_2;
[L1543]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_Ducks[this][msgsender_MSG];
[L1544]  COND TRUE   __tmp__DType[this] == Ducks
[L1545]  CALL        call __var_3 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][to_s334], tokens_s334);
[L1321]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1322]  COND FALSE  !(!(c_s90 >= a_s90))
[L1545]  RET         call __var_3 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][to_s334], tokens_s334);
[L1546]  COND FALSE  !(revert)
[L1552]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_Ducks[this][to_s334];
[L1553]              __tmp__balances_Ducks[this][to_s334] := __var_3;
[L1554]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_Ducks[this][to_s334];
[L1555]              success_s334 := true;
[L672]   RET         call success_s334 := transfer~address~uint256_Ducks__fail(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L673]               assume revert || gas < 0;
[L2773]  RET         call success_s334 := transfer~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2863]  RET         call CorralChoice_Ducks(this);

[2020-11-25 14:27:58,470 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:27:58,471 INFO  L82        PathProgramCache]: Analyzing trace with hash 1851015297, now seen corresponding path program 1 times
[2020-11-25 14:27:58,471 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:27:58,477 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:27:58,495 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 14:27:58,495 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:27:58,495 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 14:27:58,495 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:27:58,496 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 14:27:58,496 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 14:27:58,496 INFO  L87              Difference]: Start difference. First operand 1880 states and 2024 transitions. cyclomatic complexity: 148 Second operand 5 states.
[2020-11-25 14:27:58,726 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:27:58,726 INFO  L93              Difference]: Finished difference Result 2426 states and 2689 transitions.
[2020-11-25 14:27:58,726 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 14:27:58,726 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2426 states and 2689 transitions.
[2020-11-25 14:27:58,732 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 14:27:58,738 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2426 states to 1848 states and 2108 transitions.
[2020-11-25 14:27:58,738 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 550
[2020-11-25 14:27:58,738 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 550
[2020-11-25 14:27:58,738 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1848 states and 2108 transitions.
[2020-11-25 14:27:58,740 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:27:58,740 INFO  L728         BuchiCegarLoop]: Abstraction has 1848 states and 2108 transitions.
[2020-11-25 14:27:58,741 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1848 states and 2108 transitions.
[2020-11-25 14:27:58,750 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1848 to 1288.
[2020-11-25 14:27:58,750 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1288 states.
[2020-11-25 14:27:58,751 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1288 states to 1288 states and 1393 transitions.
[2020-11-25 14:27:58,751 INFO  L751         BuchiCegarLoop]: Abstraction has 1288 states and 1393 transitions.
[2020-11-25 14:27:58,751 INFO  L631         BuchiCegarLoop]: Abstraction has 1288 states and 1393 transitions.
[2020-11-25 14:27:58,751 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 14:27:58,751 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1288 states and 1393 transitions.
[2020-11-25 14:27:58,753 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:27:58,753 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:27:58,753 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:27:58,754 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:27:58,754 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_Ducks0 := false;
[L2]                 call_transfer_Ducks0 := false;
[L2]     CALL        call main();
[L2853]              assume null == 0;
[L2854]  CALL        call this := FreshRefGenerator__success();
[L1249]              havoc newRef;
[L1250]              assume Alloc[newRef] == false;
[L1251]              Alloc[newRef] := true;
[L1252]              assume newRef != null;
[L2854]  RET         call this := FreshRefGenerator__success();
[L2855]              assume now >= 0;
[L2856]              assume DType[this] == Ducks;
[L2857]              assume msgvalue_MSG == 0;
[L2858]              gas := gas - 53000;
[L2859]  CALL        call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L398]               havoc __exception;
[L399]               revert := false;
[L400]   COND FALSE  !(__exception)
[L421]   CALL        call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L1456]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1281]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1266]              assume msgsender_MSG != null;
[L1267]              Balance[this] := 0;
[L1281]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  COND FALSE  !(revert)
[L1456]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  COND FALSE  !(revert)
[L1460]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1313]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1298]              assume msgsender_MSG != null;
[L1299]              Balance[this] := 0;
[L1313]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  COND FALSE  !(revert)
[L1460]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1461]  COND FALSE  !(revert)
[L1464]  CALL        call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1417]              assume msgsender_MSG != null;
[L1418]              Balance[this] := 0;
[L1419]              name_Ducks[this] := 560717954;
[L1420]              symbol_Ducks[this] := 560717954;
[L1421]              decimals_Ducks[this] := 0;
[L1422]              _totalSupply_Ducks[this] := 0;
[L1423]              balances_Ducks[this] := zeroRefintArr();
[L1424]              sum_balances0[this] := 0;
[L1425]              allowed_Ducks[this] := zeroRefRefintArr();
[L1426]              sum_allowed1[this] := 0;
[L1428]              name_Ducks[this] := 1576131613;
[L1429]              symbol_Ducks[this] := -1943651461;
[L1430]              decimals_Ducks[this] := 18;
[L1431]              _totalSupply_Ducks[this] := 1500000000000000000000000;
[L1432]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][msgsender_MSG];
[L1433]              balances_Ducks[this][msgsender_MSG] := _totalSupply_Ducks[this];
[L1434]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][msgsender_MSG];
[L1435]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1464]  RET         call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1465]  COND FALSE  !(revert)
[L421]   RET         call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L422]               assume !revert && gas >= 0;
[L2859]  RET         call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L2860]              assume !revert && gas >= 0;
[L2863]  CALL        call CorralChoice_Ducks(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != Ducks;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND FALSE  !(choice == 14)
[L2756]  COND FALSE  !(choice == 13)
[L2762]  COND FALSE  !(choice == 12)
[L2768]  COND FALSE  !(choice == 11)
[L2775]  COND FALSE  !(choice == 10)
[L2782]  COND TRUE   choice == 9
[L2783]              gas := gas - 21000;
[L2784]  COND TRUE   gas >= 0
[L2785]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2786]              assume msgvalue_MSG == 0;
[L2787]  CALL        call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L706]               havoc __exception;
[L707]               revert := false;
[L708]   COND FALSE  !(__exception)
[L729]   CALL        call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1637]  COND TRUE   DType[this] == Ducks
[L1638]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1348]  COND FALSE  !(!(b_s112 <= a_s112))
[L1352]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1638]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1639]  COND FALSE  !(revert)
[L1645]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][from_s393];
[L1646]              balances_Ducks[this][from_s393] := __var_4;
[L1647]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][from_s393];
[L1648]  COND TRUE   DType[this] == Ducks
[L1649]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1348]  COND FALSE  !(!(b_s112 <= a_s112))
[L1352]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1649]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1650]  COND FALSE  !(revert)
[L1656]              sum_allowed1[from_s393] := sum_allowed1[from_s393] - allowed_Ducks[this][from_s393][msgsender_MSG];
[L1657]              allowed_Ducks[this][from_s393][msgsender_MSG] := __var_5;
[L1658]              sum_allowed1[from_s393] := sum_allowed1[from_s393] + allowed_Ducks[this][from_s393][msgsender_MSG];
[L1659]  COND TRUE   DType[this] == Ducks
[L1660]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s393], tokens_s393);
[L1330]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1331]  COND FALSE  !(!(c_s90 >= a_s90))
[L1660]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s393], tokens_s393);
[L1661]  COND FALSE  !(revert)
[L1667]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][to_s393];
[L1668]              balances_Ducks[this][to_s393] := __var_6;
[L1669]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][to_s393];
[L1670]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1671]              success_s393 := true;
[L729]   RET         call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L730]               assume !revert && gas >= 0;
[L2787]  RET         call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2863]  RET         call CorralChoice_Ducks(this);
[L2863]  CALL        call CorralChoice_Ducks(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != Ducks;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND FALSE  !(choice == 14)
[L2756]  COND FALSE  !(choice == 13)
[L2762]  COND FALSE  !(choice == 12)
[L2768]  COND TRUE   choice == 11
[L2769]              gas := gas - 21000;
[L2770]  COND TRUE   gas >= 0
[L2771]              assume tokens_s334 >= 0 && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2772]              assume msgvalue_MSG == 0;
[L2773]  CALL        call success_s334 := transfer~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s334 && tokens_s334 <= balances_Ducks[this][msgsender_MSG]) && tokens_s334 >= 0) && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s334] >= 0) && balances_Ducks[this][to_s334] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][msgsender_MSG] >= 0) && balances_Ducks[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_Ducks0 := true;
[L2]                 call_transfer_Ducks0 := false;
[L2]                 revert := revert_hold;
[L652]               havoc __exception;
[L653]               revert := false;
[L654]   COND FALSE  !(__exception)
[L675]   CALL        call success_s334 := transfer~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L1563]  COND TRUE   DType[this] == Ducks
[L1564]  CALL        call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][msgsender_MSG], tokens_s334);
[L1348]  COND FALSE  !(!(b_s112 <= a_s112))
[L1352]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1564]  RET         call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][msgsender_MSG], tokens_s334);
[L1565]  COND FALSE  !(revert)
[L1571]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][msgsender_MSG];
[L1572]              balances_Ducks[this][msgsender_MSG] := __var_2;
[L1573]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][msgsender_MSG];
[L1574]  COND TRUE   DType[this] == Ducks
[L1575]  CALL        call __var_3 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s334], tokens_s334);
[L1330]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1331]  COND FALSE  !(!(c_s90 >= a_s90))
[L1575]  RET         call __var_3 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s334], tokens_s334);
[L1576]  COND FALSE  !(revert)
[L1582]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][to_s334];
[L1583]              balances_Ducks[this][to_s334] := __var_3;
[L1584]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][to_s334];
[L1585]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1586]              success_s334 := true;
[L675]   RET         call success_s334 := transfer~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L676]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((success_s334 == true && _totalSupply_Ducks[this] == old(_totalSupply_Ducks[this])) && balances_Ducks[this] == old(balances_Ducks[this])) && allowed_Ducks[this] == old(allowed_Ducks[this])) && name_Ducks[this] == old(name_Ducks[this])) && symbol_Ducks[this] == old(symbol_Ducks[this])) && decimals_Ducks[this] == old(decimals_Ducks[this]));
[L2]                 revert := revert_hold;
[L2773]  RET         call success_s334 := transfer~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2863]  RET         call CorralChoice_Ducks(this);

Loop:
[L2863]  CALL        call CorralChoice_Ducks(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != Ducks;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND TRUE   choice == 14
[L2751]              gas := gas - 21000;
[L2752]  COND FALSE  !(gas >= 0)
[L2863]  RET         call CorralChoice_Ducks(this);

[2020-11-25 14:27:58,757 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:27:58,757 INFO  L82        PathProgramCache]: Analyzing trace with hash -520455818, now seen corresponding path program 1 times
[2020-11-25 14:27:58,757 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:27:58,823 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:27:59,834 WARN  L188               SmtUtils]: Spent 196.00 ms on a formula simplification. DAG size of input: 170 DAG size of output: 69
[2020-11-25 14:28:00,116 WARN  L188               SmtUtils]: Spent 221.00 ms on a formula simplification. DAG size of input: 166 DAG size of output: 85
[2020-11-25 14:28:00,317 WARN  L188               SmtUtils]: Spent 140.00 ms on a formula simplification. DAG size of input: 136 DAG size of output: 84
[2020-11-25 14:28:00,701 WARN  L188               SmtUtils]: Spent 311.00 ms on a formula simplification. DAG size of input: 144 DAG size of output: 98
[2020-11-25 14:28:01,897 WARN  L188               SmtUtils]: Spent 310.00 ms on a formula simplification. DAG size of input: 178 DAG size of output: 70
[2020-11-25 14:28:02,671 WARN  L188               SmtUtils]: Spent 391.00 ms on a formula simplification. DAG size of input: 177 DAG size of output: 75
[2020-11-25 14:28:04,695 WARN  L188               SmtUtils]: Spent 135.00 ms on a formula simplification. DAG size of input: 139 DAG size of output: 36
[2020-11-25 14:28:05,026 INFO  L134       CoverageAnalysis]: Checked inductivity of 56 backedges. 1 proven. 54 refuted. 0 times theorem prover too weak. 1 trivial. 0 not checked.
[2020-11-25 14:28:05,026 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 14:28:05,026 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [45] total 45
[2020-11-25 14:28:05,027 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:28:05,027 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 46 interpolants.
[2020-11-25 14:28:05,027 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=138, Invalid=1932, Unknown=0, NotChecked=0, Total=2070
[2020-11-25 14:28:05,028 INFO  L87              Difference]: Start difference. First operand 1288 states and 1393 transitions. cyclomatic complexity: 108 Second operand 46 states.
[2020-11-25 14:28:05,508 WARN  L188               SmtUtils]: Spent 161.00 ms on a formula simplification that was a NOOP. DAG size: 137
[2020-11-25 14:28:05,761 WARN  L188               SmtUtils]: Spent 175.00 ms on a formula simplification that was a NOOP. DAG size: 140
[2020-11-25 14:28:06,021 WARN  L188               SmtUtils]: Spent 172.00 ms on a formula simplification that was a NOOP. DAG size: 143
[2020-11-25 14:28:06,392 WARN  L188               SmtUtils]: Spent 164.00 ms on a formula simplification that was a NOOP. DAG size: 146
[2020-11-25 14:28:10,507 WARN  L188               SmtUtils]: Spent 1.13 s on a formula simplification. DAG size of input: 225 DAG size of output: 223
[2020-11-25 14:28:11,847 WARN  L188               SmtUtils]: Spent 193.00 ms on a formula simplification. DAG size of input: 108 DAG size of output: 103
[2020-11-25 14:28:17,484 WARN  L188               SmtUtils]: Spent 225.00 ms on a formula simplification. DAG size of input: 78 DAG size of output: 74
[2020-11-25 14:28:17,751 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:28:17,751 INFO  L93              Difference]: Finished difference Result 1473 states and 1644 transitions.
[2020-11-25 14:28:17,751 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 48 states. 
[2020-11-25 14:28:17,752 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1473 states and 1644 transitions.
[2020-11-25 14:28:17,755 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 14:28:17,758 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1473 states to 1473 states and 1644 transitions.
[2020-11-25 14:28:17,758 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 520
[2020-11-25 14:28:17,758 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 520
[2020-11-25 14:28:17,758 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1473 states and 1644 transitions.
[2020-11-25 14:28:17,760 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:28:17,760 INFO  L728         BuchiCegarLoop]: Abstraction has 1473 states and 1644 transitions.
[2020-11-25 14:28:17,761 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1473 states and 1644 transitions.
[2020-11-25 14:28:17,768 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1473 to 1447.
[2020-11-25 14:28:17,768 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1447 states.
[2020-11-25 14:28:17,769 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1447 states to 1447 states and 1609 transitions.
[2020-11-25 14:28:17,769 INFO  L751         BuchiCegarLoop]: Abstraction has 1447 states and 1609 transitions.
[2020-11-25 14:28:17,769 INFO  L631         BuchiCegarLoop]: Abstraction has 1447 states and 1609 transitions.
[2020-11-25 14:28:17,769 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 14:28:17,769 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1447 states and 1609 transitions.
[2020-11-25 14:28:17,771 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 14:28:17,771 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:28:17,771 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:28:17,772 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:28:17,773 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_Ducks0 := false;
[L2]                 call_transfer_Ducks0 := false;
[L2]     CALL        call main();
[L2853]              assume null == 0;
[L2854]  CALL        call this := FreshRefGenerator__success();
[L1249]              havoc newRef;
[L1250]              assume Alloc[newRef] == false;
[L1251]              Alloc[newRef] := true;
[L1252]              assume newRef != null;
[L2854]  RET         call this := FreshRefGenerator__success();
[L2855]              assume now >= 0;
[L2856]              assume DType[this] == Ducks;
[L2857]              assume msgvalue_MSG == 0;
[L2858]              gas := gas - 53000;
[L2859]  CALL        call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L398]               havoc __exception;
[L399]               revert := false;
[L400]   COND FALSE  !(__exception)
[L421]   CALL        call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L1456]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1281]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1266]              assume msgsender_MSG != null;
[L1267]              Balance[this] := 0;
[L1281]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  COND FALSE  !(revert)
[L1456]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  COND FALSE  !(revert)
[L1460]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1313]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1298]              assume msgsender_MSG != null;
[L1299]              Balance[this] := 0;
[L1313]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  COND FALSE  !(revert)
[L1460]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1461]  COND FALSE  !(revert)
[L1464]  CALL        call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1417]              assume msgsender_MSG != null;
[L1418]              Balance[this] := 0;
[L1419]              name_Ducks[this] := 560717954;
[L1420]              symbol_Ducks[this] := 560717954;
[L1421]              decimals_Ducks[this] := 0;
[L1422]              _totalSupply_Ducks[this] := 0;
[L1423]              balances_Ducks[this] := zeroRefintArr();
[L1424]              sum_balances0[this] := 0;
[L1425]              allowed_Ducks[this] := zeroRefRefintArr();
[L1426]              sum_allowed1[this] := 0;
[L1428]              name_Ducks[this] := 1576131613;
[L1429]              symbol_Ducks[this] := -1943651461;
[L1430]              decimals_Ducks[this] := 18;
[L1431]              _totalSupply_Ducks[this] := 1500000000000000000000000;
[L1432]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][msgsender_MSG];
[L1433]              balances_Ducks[this][msgsender_MSG] := _totalSupply_Ducks[this];
[L1434]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][msgsender_MSG];
[L1435]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1464]  RET         call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1465]  COND FALSE  !(revert)
[L421]   RET         call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L422]               assume !revert && gas >= 0;
[L2859]  RET         call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L2860]              assume !revert && gas >= 0;
[L2863]  CALL        call CorralChoice_Ducks(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != Ducks;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND FALSE  !(choice == 14)
[L2756]  COND FALSE  !(choice == 13)
[L2762]  COND FALSE  !(choice == 12)
[L2768]  COND TRUE   choice == 11
[L2769]              gas := gas - 21000;
[L2770]  COND TRUE   gas >= 0
[L2771]              assume tokens_s334 >= 0 && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2772]              assume msgvalue_MSG == 0;
[L2773]  CALL        call success_s334 := transfer~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == to_s334 && tokens_s334 <= balances_Ducks[this][msgsender_MSG]) && tokens_s334 >= 0) && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s334] >= 0) && balances_Ducks[this][to_s334] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][msgsender_MSG] >= 0) && balances_Ducks[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L652]               havoc __exception;
[L653]               revert := false;
[L654]   COND FALSE  !(__exception)
[L675]   CALL        call success_s334 := transfer~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L1563]  COND TRUE   DType[this] == Ducks
[L1564]  CALL        call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][msgsender_MSG], tokens_s334);
[L1348]  COND FALSE  !(!(b_s112 <= a_s112))
[L1352]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1564]  RET         call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][msgsender_MSG], tokens_s334);
[L1565]  COND FALSE  !(revert)
[L1571]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][msgsender_MSG];
[L1572]              balances_Ducks[this][msgsender_MSG] := __var_2;
[L1573]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][msgsender_MSG];
[L1574]  COND TRUE   DType[this] == Ducks
[L1575]  CALL        call __var_3 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s334], tokens_s334);
[L1330]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1331]  COND FALSE  !(!(c_s90 >= a_s90))
[L1575]  RET         call __var_3 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s334], tokens_s334);
[L1576]  COND FALSE  !(revert)
[L1582]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][to_s334];
[L1583]              balances_Ducks[this][to_s334] := __var_3;
[L1584]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][to_s334];
[L1585]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1586]              success_s334 := true;
[L675]   RET         call success_s334 := transfer~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L676]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((success_s334 == true && _totalSupply_Ducks[this] == old(_totalSupply_Ducks[this])) && balances_Ducks[this] == old(balances_Ducks[this])) && allowed_Ducks[this] == old(allowed_Ducks[this])) && name_Ducks[this] == old(name_Ducks[this])) && symbol_Ducks[this] == old(symbol_Ducks[this])) && decimals_Ducks[this] == old(decimals_Ducks[this]));
[L2]                 revert := revert_hold;
[L2773]  RET         call success_s334 := transfer~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2863]  RET         call CorralChoice_Ducks(this);
[L2863]  CALL        call CorralChoice_Ducks(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != Ducks;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND FALSE  !(choice == 14)
[L2756]  COND FALSE  !(choice == 13)
[L2762]  COND FALSE  !(choice == 12)
[L2768]  COND TRUE   choice == 11
[L2769]              gas := gas - 21000;
[L2770]  COND TRUE   gas >= 0
[L2771]              assume tokens_s334 >= 0 && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2772]              assume msgvalue_MSG == 0;
[L2773]  CALL        call success_s334 := transfer~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s334 && tokens_s334 <= balances_Ducks[this][msgsender_MSG]) && tokens_s334 >= 0) && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s334] >= 0) && balances_Ducks[this][to_s334] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][msgsender_MSG] >= 0) && balances_Ducks[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_Ducks0 := true;
[L2]                 call_transfer_Ducks0 := false;
[L2]                 revert := revert_hold;
[L652]               havoc __exception;
[L653]               revert := false;
[L654]   COND FALSE  !(__exception)
[L675]   CALL        call success_s334 := transfer~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L1563]  COND TRUE   DType[this] == Ducks
[L1564]  CALL        call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][msgsender_MSG], tokens_s334);
[L1348]  COND FALSE  !(!(b_s112 <= a_s112))
[L1352]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1564]  RET         call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][msgsender_MSG], tokens_s334);
[L1565]  COND FALSE  !(revert)
[L1571]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][msgsender_MSG];
[L1572]              balances_Ducks[this][msgsender_MSG] := __var_2;
[L1573]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][msgsender_MSG];
[L1574]  COND TRUE   DType[this] == Ducks
[L1575]  CALL        call __var_3 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s334], tokens_s334);
[L1330]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1331]  COND FALSE  !(!(c_s90 >= a_s90))
[L1575]  RET         call __var_3 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s334], tokens_s334);
[L1576]  COND FALSE  !(revert)
[L1582]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][to_s334];
[L1583]              balances_Ducks[this][to_s334] := __var_3;
[L1584]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][to_s334];
[L1585]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1586]              success_s334 := true;
[L675]   RET         call success_s334 := transfer~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L676]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((success_s334 == true && _totalSupply_Ducks[this] == old(_totalSupply_Ducks[this])) && balances_Ducks[this] == old(balances_Ducks[this])) && allowed_Ducks[this] == old(allowed_Ducks[this])) && name_Ducks[this] == old(name_Ducks[this])) && symbol_Ducks[this] == old(symbol_Ducks[this])) && decimals_Ducks[this] == old(decimals_Ducks[this]));
[L2]                 revert := revert_hold;
[L2773]  RET         call success_s334 := transfer~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2863]  RET         call CorralChoice_Ducks(this);

Loop:
[L2863]  CALL        call CorralChoice_Ducks(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != Ducks;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND FALSE  !(choice == 14)
[L2756]  COND FALSE  !(choice == 13)
[L2762]  COND FALSE  !(choice == 12)
[L2768]  COND TRUE   choice == 11
[L2769]              gas := gas - 21000;
[L2770]  COND TRUE   gas >= 0
[L2771]              assume tokens_s334 >= 0 && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2772]              assume msgvalue_MSG == 0;
[L2773]  CALL        call success_s334 := transfer~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s334 && tokens_s334 <= balances_Ducks[this][msgsender_MSG]) && tokens_s334 >= 0) && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s334] >= 0) && balances_Ducks[this][to_s334] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][msgsender_MSG] >= 0) && balances_Ducks[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_Ducks0 := true;
[L2]                 call_transfer_Ducks0 := false;
[L2]                 revert := revert_hold;
[L652]               havoc __exception;
[L653]               revert := false;
[L654]   COND FALSE  !(__exception)
[L675]   CALL        call success_s334 := transfer~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L1563]  COND TRUE   DType[this] == Ducks
[L1564]  CALL        call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][msgsender_MSG], tokens_s334);
[L1348]  COND FALSE  !(!(b_s112 <= a_s112))
[L1352]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1564]  RET         call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][msgsender_MSG], tokens_s334);
[L1565]  COND FALSE  !(revert)
[L1571]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][msgsender_MSG];
[L1572]              balances_Ducks[this][msgsender_MSG] := __var_2;
[L1573]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][msgsender_MSG];
[L1574]  COND TRUE   DType[this] == Ducks
[L1575]  CALL        call __var_3 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s334], tokens_s334);
[L1330]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1331]  COND FALSE  !(!(c_s90 >= a_s90))
[L1575]  RET         call __var_3 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s334], tokens_s334);
[L1576]  COND FALSE  !(revert)
[L1582]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][to_s334];
[L1583]              balances_Ducks[this][to_s334] := __var_3;
[L1584]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][to_s334];
[L1585]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1586]              success_s334 := true;
[L675]   RET         call success_s334 := transfer~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L676]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((success_s334 == true && _totalSupply_Ducks[this] == old(_totalSupply_Ducks[this])) && balances_Ducks[this] == old(balances_Ducks[this])) && allowed_Ducks[this] == old(allowed_Ducks[this])) && name_Ducks[this] == old(name_Ducks[this])) && symbol_Ducks[this] == old(symbol_Ducks[this])) && decimals_Ducks[this] == old(decimals_Ducks[this]));
[L2]                 revert := revert_hold;
[L2773]  RET         call success_s334 := transfer~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2863]  RET         call CorralChoice_Ducks(this);

[2020-11-25 14:28:17,776 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:28:17,776 INFO  L82        PathProgramCache]: Analyzing trace with hash 934652544, now seen corresponding path program 1 times
[2020-11-25 14:28:17,777 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:28:17,820 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
Received shutdown request...
[2020-11-25 14:42:47,990 FATAL L265        ToolchainWalker]: An unrecoverable error occured during an interaction with an SMT solver:
de.uni_freiburg.informatik.ultimate.logic.SMTLIBException: Timeout exceeded
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$IntegerInterpolator.interpolate(Interpolator.java:1432)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$MixedLAInterpolator.convert(Interpolator.java:1288)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer.cacheConvert(TermTransformer.java:131)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer.access$0(TermTransformer.java:127)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer$Convert.walk(TermTransformer.java:79)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:122)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:113)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer.transform(TermTransformer.java:253)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.mixedPivotLA(Interpolator.java:1478)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.combine(Interpolator.java:359)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.access$2(Interpolator.java:328)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$CombineInterpolants.walk(Interpolator.java:153)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:122)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:113)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.interpolate(Interpolator.java:220)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.getInterpolants(Interpolator.java:201)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.smtlib2.SMTInterpol.getInterpolants(SMTInterpol.java:919)
	at de.uni_freiburg.informatik.ultimate.modelcheckerutils.smt.managedscript.ManagedScript.getInterpolants(ManagedScript.java:200)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.NestedInterpolantsBuilder.computeCraigInterpolants(NestedInterpolantsBuilder.java:303)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.NestedInterpolantsBuilder.<init>(NestedInterpolantsBuilder.java:167)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.NestedInterpolantsBuilder.<init>(NestedInterpolantsBuilder.java:182)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.InterpolatingTraceCheckCraig.computeInterpolantsTree(InterpolatingTraceCheckCraig.java:271)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.InterpolatingTraceCheckCraig.computeInterpolants(InterpolatingTraceCheckCraig.java:207)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.InterpolatingTraceCheckCraig.<init>(InterpolatingTraceCheckCraig.java:109)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceCheckConstructor.constructCraig(TraceCheckConstructor.java:211)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceCheckConstructor.constructTraceCheck(TraceCheckConstructor.java:183)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceCheckConstructor.get(TraceCheckConstructor.java:165)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.FixedRefinementStrategy.getTraceCheck(FixedRefinementStrategy.java:134)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.BaseRefinementStrategy.checkFeasibility(BaseRefinementStrategy.java:223)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.BaseRefinementStrategy.executeStrategy(BaseRefinementStrategy.java:197)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceAbstractionRefinementEngine.<init>(TraceAbstractionRefinementEngine.java:70)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.checkFeasibilityAndComputeInterpolants(LassoCheck.java:1126)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.checkStemFeasibility(LassoCheck.java:1080)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.<init>(LassoCheck.java:994)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck.<init>(LassoCheck.java:276)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiCegarLoop.iterate(BuchiCegarLoop.java:479)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver.doTerminationAnalysis(BuchiAutomizerObserver.java:153)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver.finish(BuchiAutomizerObserver.java:413)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.runObserver(PluginConnector.java:168)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.runTool(PluginConnector.java:151)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.run(PluginConnector.java:128)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.executePluginConnector(ToolchainWalker.java:232)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.processPlugin(ToolchainWalker.java:226)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.walkUnprotected(ToolchainWalker.java:142)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.walk(ToolchainWalker.java:104)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainManager$Toolchain.processToolchain(ToolchainManager.java:317)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.toolchain.DefaultToolchainJob.run(DefaultToolchainJob.java:145)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)
[2020-11-25 14:42:47,991 INFO  L168              Benchmark]: Toolchain (without parser) took 898551.99 ms. Allocated memory was 1.0 GB in the beginning and 6.4 GB in the end (delta: 5.4 GB). Free memory was 940.6 MB in the beginning and 4.8 GB in the end (delta: -3.9 GB). Peak memory consumption was 6.1 GB. Max. memory is 15.3 GB.
[2020-11-25 14:42:47,992 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 14:42:47,992 INFO  L168              Benchmark]: Boogie Preprocessor took 79.45 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 929.8 MB in the end (delta: 10.8 MB). Peak memory consumption was 10.8 MB. Max. memory is 15.3 GB.
[2020-11-25 14:42:47,992 INFO  L168              Benchmark]: UtopiaSpecLang took 61.71 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.4 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 14:42:47,993 INFO  L168              Benchmark]: Boogie Printer took 12.27 ms. Allocated memory is still 1.0 GB. Free memory is still 924.4 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 14:42:47,993 INFO  L168              Benchmark]: RCFGBuilder took 602.74 ms. Allocated memory is still 1.0 GB. Free memory was 924.4 MB in the beginning and 849.2 MB in the end (delta: 75.2 MB). Peak memory consumption was 75.2 MB. Max. memory is 15.3 GB.
[2020-11-25 14:42:47,993 INFO  L168              Benchmark]: UtopiaLTL2Aut took 35.97 ms. Allocated memory is still 1.0 GB. Free memory was 849.2 MB in the beginning and 845.6 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-25 14:42:47,994 INFO  L168              Benchmark]: BÃ¼chi Program Product took 997.74 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 59.8 MB). Free memory was 845.6 MB in the beginning and 772.8 MB in the end (delta: 72.9 MB). Peak memory consumption was 132.7 MB. Max. memory is 15.3 GB.
[2020-11-25 14:42:47,994 INFO  L168              Benchmark]: BlockEncodingV2 took 99.24 ms. Allocated memory is still 1.1 GB. Free memory was 772.8 MB in the beginning and 731.9 MB in the end (delta: 40.9 MB). Peak memory consumption was 40.9 MB. Max. memory is 15.3 GB.
[2020-11-25 14:42:47,994 INFO  L168              Benchmark]: BuchiAutomizer took 896659.81 ms. Allocated memory was 1.1 GB in the beginning and 6.4 GB in the end (delta: 5.3 GB). Free memory was 731.9 MB in the beginning and 4.8 GB in the end (delta: -4.1 GB). Peak memory consumption was 5.8 GB. Max. memory is 15.3 GB.
[2020-11-25 14:42:47,996 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    2488 locations, 4278 edges
  - StatisticsResult: Encoded RCFG
    2444 locations, 4160 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 79.45 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 929.8 MB in the end (delta: 10.8 MB). Peak memory consumption was 10.8 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 61.71 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.4 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 12.27 ms. Allocated memory is still 1.0 GB. Free memory is still 924.4 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 602.74 ms. Allocated memory is still 1.0 GB. Free memory was 924.4 MB in the beginning and 849.2 MB in the end (delta: 75.2 MB). Peak memory consumption was 75.2 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 35.97 ms. Allocated memory is still 1.0 GB. Free memory was 849.2 MB in the beginning and 845.6 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 997.74 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 59.8 MB). Free memory was 845.6 MB in the beginning and 772.8 MB in the end (delta: 72.9 MB). Peak memory consumption was 132.7 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 99.24 ms. Allocated memory is still 1.1 GB. Free memory was 772.8 MB in the beginning and 731.9 MB in the end (delta: 40.9 MB). Peak memory consumption was 40.9 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 896659.81 ms. Allocated memory was 1.1 GB in the beginning and 6.4 GB in the end (delta: 5.3 GB). Free memory was 731.9 MB in the beginning and 4.8 GB in the end (delta: -4.1 GB). Peak memory consumption was 5.8 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1049 locations, 1322 edges
  - StatisticsResult: BuchiProgram size
    2488 locations, 4278 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer:
  - ExceptionOrErrorResult: SMTLIBException: Timeout exceeded
    de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer: SMTLIBException: Timeout exceeded: de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$IntegerInterpolator.interpolate(Interpolator.java:1432)
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Completed graceful shutdown
