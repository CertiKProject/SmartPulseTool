This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 13:25:27,045 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 13:25:27,047 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 13:25:27,057 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 13:25:27,057 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 13:25:27,058 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 13:25:27,059 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 13:25:27,060 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 13:25:27,062 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 13:25:27,063 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 13:25:27,063 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 13:25:27,063 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 13:25:27,064 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 13:25:27,065 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 13:25:27,066 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 13:25:27,066 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 13:25:27,067 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 13:25:27,068 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 13:25:27,069 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 13:25:27,070 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 13:25:27,071 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 13:25:27,072 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 13:25:27,073 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 13:25:27,073 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 13:25:27,074 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 13:25:27,074 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 13:25:27,074 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 13:25:27,075 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 13:25:27,075 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 13:25:27,075 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 13:25:27,076 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 13:25:27,076 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 13:25:27,077 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 13:25:27,077 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 13:25:27,078 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 13:25:27,078 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 13:25:27,078 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 13:25:27,079 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 13:25:27,079 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 13:25:27,079 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 13:25:27,080 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 13:25:27,080 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 13:25:27,088 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 13:25:27,088 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 13:25:27,089 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 13:25:27,089 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 13:25:27,089 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 13:25:27,089 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 13:25:27,089 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 13:25:27,089 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 13:25:27,090 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 13:25:27,090 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 13:25:27,090 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 13:25:27,090 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 13:25:27,090 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 13:25:27,090 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 13:25:27,090 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 13:25:27,090 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 13:25:27,091 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 13:25:27,091 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 13:25:27,091 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 13:25:27,091 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 13:25:27,091 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 13:25:27,091 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 13:25:27,091 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 13:25:27,091 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 13:25:27,092 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 13:25:27,092 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 13:25:27,113 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 13:25:27,126 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 13:25:27,128 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 13:25:27,130 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 13:25:27,130 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 13:25:27,130 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_transferfrom-normal.bpl
[2020-11-25 13:25:27,131 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_transferfrom-normal.bpl'
[2020-11-25 13:25:27,271 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 13:25:27,272 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 13:25:27,272 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 13:25:27,273 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 13:25:27,273 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 13:25:27,290 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:25:27" (1/1) ...
[2020-11-25 13:25:27,292 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:25:27" (1/1) ...
[2020-11-25 13:25:27,330 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:25:27" (1/1) ...
[2020-11-25 13:25:27,331 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:25:27" (1/1) ...
[2020-11-25 13:25:27,356 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:25:27" (1/1) ...
[2020-11-25 13:25:27,373 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:25:27" (1/1) ...
[2020-11-25 13:25:27,392 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:25:27" (1/1) ...
[2020-11-25 13:25:27,410 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 13:25:27,411 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 13:25:27,411 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 13:25:27,413 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 13:25:27,417 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:25:27" (1/1) ...
[2020-11-25 13:25:27,444 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(StandardToken.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balances_BasicToken[this][from] && value <= allowed_StandardToken[this][from][msg.sender] && balances_BasicToken[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][from] >= 0 &&  balances_BasicToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_StandardToken[this][from][msg.sender] >= 0 && allowed_StandardToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(StandardToken.transferFrom(from, to, value), return == true && balances_BasicToken[this][from] == old(balances_BasicToken[this][from]) - value && balances_BasicToken[this][to] == old(balances_BasicToken[this][to]) + value && allowed_StandardToken[this][from][msg.sender] == old(allowed_StandardToken[this][from][msg.sender]) - value && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this][p1] == old(balances_BasicToken[this][p1]) && allowed_StandardToken[this][p2][p3] == old(allowed_StandardToken[this][p2][p3]) && owner_wallet_DEAPCoin[this] == old(owner_wallet_DEAPCoin[this]) && unsale_owner_wallet_DEAPCoin[this] == old(unsale_owner_wallet_DEAPCoin[this]) && group_lockup_DEAPCoin[this] == old(group_lockup_DEAPCoin[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]))))
[2020-11-25 13:25:27,449 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(StandardToken.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balances_BasicToken[this][from] && value <= allowed_StandardToken[this][from][msg.sender] && balances_BasicToken[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][from] >= 0 &&  balances_BasicToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_StandardToken[this][from][msg.sender] >= 0 && allowed_StandardToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(StandardToken.transferFrom(from, to, value), return == true && balances_BasicToken[this][from] == old(balances_BasicToken[this][from]) - value && balances_BasicToken[this][to] == old(balances_BasicToken[this][to]) + value && allowed_StandardToken[this][from][msg.sender] == old(allowed_StandardToken[this][from][msg.sender]) - value && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this][p1] == old(balances_BasicToken[this][p1]) && allowed_StandardToken[this][p2][p3] == old(allowed_StandardToken[this][p2][p3]) && owner_wallet_DEAPCoin[this] == old(owner_wallet_DEAPCoin[this]) && unsale_owner_wallet_DEAPCoin[this] == old(unsale_owner_wallet_DEAPCoin[this]) && group_lockup_DEAPCoin[this] == old(group_lockup_DEAPCoin[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]))))
[2020-11-25 13:25:27,457 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(StandardToken.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balances_BasicToken[this][from] && value <= allowed_StandardToken[this][from][msg.sender] && balances_BasicToken[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][from] >= 0 &&  balances_BasicToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_StandardToken[this][from][msg.sender] >= 0 && allowed_StandardToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(StandardToken.transferFrom(from, to, value), return == true && balances_BasicToken[this][from] == old(balances_BasicToken[this][from]) - value && balances_BasicToken[this][to] == old(balances_BasicToken[this][to]) + value && allowed_StandardToken[this][from][msg.sender] == old(allowed_StandardToken[this][from][msg.sender]) - value && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this][p1] == old(balances_BasicToken[this][p1]) && allowed_StandardToken[this][p2][p3] == old(allowed_StandardToken[this][p2][p3]) && owner_wallet_DEAPCoin[this] == old(owner_wallet_DEAPCoin[this]) && unsale_owner_wallet_DEAPCoin[this] == old(unsale_owner_wallet_DEAPCoin[this]) && group_lockup_DEAPCoin[this] == old(group_lockup_DEAPCoin[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]))))
[2020-11-25 13:25:27,473 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( ( ( p1!=_from_s715 && p1!=_to_s715 ) && ( p2!=_from_s715 || p3!=msg.sender ) ) && _from_s715!=_to_s715 ) && _value_s715<=balances_BasicToken[this][_from_s715] ) && _value_s715<=allowed_StandardToken[this][_from_s715][msg.sender] ) && ( balances_BasicToken[this][_to_s715] + _value_s715 )<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _value_s715>=0 ) && _value_s715<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_BasicToken[this][_to_s715]>=0 ) && balances_BasicToken[this][_to_s715]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_BasicToken[this][_from_s715]>=0 ) && balances_BasicToken[this][_from_s715]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && allowed_StandardToken[this][_from_s715][msg.sender]>=0 ) && allowed_StandardToken[this][_from_s715][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[_from_s715,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]],BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[_to_s715,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[_from_s715,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]],BinaryExpression[COMPNEQ,IdentifierExpression[p3,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]]],BinaryExpression[COMPNEQ,IdentifierExpression[_from_s715,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>],IdentifierExpression[_to_s715,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],BinaryExpression[COMPLEQ,IdentifierExpression[_value_s715,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],[IdentifierExpression[_from_s715,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]]]],BinaryExpression[COMPLEQ,IdentifierExpression[_value_s715,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],[IdentifierExpression[_from_s715,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]]]],BinaryExpression[COMPLT,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],[IdentifierExpression[_to_s715,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],IdentifierExpression[_value_s715,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,IdentifierExpression[_value_s715,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[_value_s715,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],[IdentifierExpression[_to_s715,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],[IdentifierExpression[_to_s715,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],[IdentifierExpression[_from_s715,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],[IdentifierExpression[_from_s715,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],[IdentifierExpression[_from_s715,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],[IdentifierExpression[_from_s715,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 13:25:27,477 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( __ret_0_==true && balances_BasicToken[this][_from_s715]==( ( old(balances_BasicToken[this][_from_s715]) ) - _value_s715 ) ) && balances_BasicToken[this][_to_s715]==( ( old(balances_BasicToken[this][_to_s715]) ) + _value_s715 ) ) && allowed_StandardToken[this][_from_s715][msg.sender]==( ( old(allowed_StandardToken[this][_from_s715][msg.sender]) ) - _value_s715 ) ) && totalSupply__BasicToken[this]==( old(totalSupply__BasicToken[this]) ) ) && balances_BasicToken[this][p1]==( old(balances_BasicToken[this][p1]) ) ) && allowed_StandardToken[this][p2][p3]==( old(allowed_StandardToken[this][p2][p3]) ) ) && owner_wallet_DEAPCoin[this]==( old(owner_wallet_DEAPCoin[this]) ) ) && unsale_owner_wallet_DEAPCoin[this]==( old(unsale_owner_wallet_DEAPCoin[this]) ) ) && group_lockup_DEAPCoin[this]==( old(group_lockup_DEAPCoin[this]) ) ) && mintingFinished_MintableToken[this]==( old(mintingFinished_MintableToken[this]) ) ) && owner_Ownable[this]==( old(owner_Ownable[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transferFrom~address~address~uint256_StandardToken>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],[IdentifierExpression[_from_s715,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],[IdentifierExpression[_from_s715,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]]],IdentifierExpression[_value_s715,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],[IdentifierExpression[_to_s715,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],BinaryExpression[ARITHPLUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],[IdentifierExpression[_to_s715,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]]],IdentifierExpression[_value_s715,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],[IdentifierExpression[_from_s715,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],[IdentifierExpression[_from_s715,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]]],IdentifierExpression[_value_s715,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],[IdentifierExpression[p1,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],[IdentifierExpression[p1,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],[IdentifierExpression[p2,GLOBAL]]],[IdentifierExpression[p3,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],[IdentifierExpression[p2,GLOBAL]]],[IdentifierExpression[p3,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_wallet_DEAPCoin,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_wallet_DEAPCoin,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[unsale_owner_wallet_DEAPCoin,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[unsale_owner_wallet_DEAPCoin,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[group_lockup_DEAPCoin,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[group_lockup_DEAPCoin,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[mintingFinished_MintableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[mintingFinished_MintableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]]]]]
[2020-11-25 13:25:27,486 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(StandardToken.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balances_BasicToken[this][from] && value <= allowed_StandardToken[this][from][msg.sender] && balances_BasicToken[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][from] >= 0 &&  balances_BasicToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_StandardToken[this][from][msg.sender] >= 0 && allowed_StandardToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(StandardToken.transferFrom(from, to, value), return == true && balances_BasicToken[this][from] == old(balances_BasicToken[this][from]) - value && balances_BasicToken[this][to] == old(balances_BasicToken[this][to]) + value && allowed_StandardToken[this][from][msg.sender] == old(allowed_StandardToken[this][from][msg.sender]) - value && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this][p1] == old(balances_BasicToken[this][p1]) && allowed_StandardToken[this][p2][p3] == old(allowed_StandardToken[this][p2][p3]) && owner_wallet_DEAPCoin[this] == old(owner_wallet_DEAPCoin[this]) && unsale_owner_wallet_DEAPCoin[this] == old(unsale_owner_wallet_DEAPCoin[this]) && group_lockup_DEAPCoin[this] == old(group_lockup_DEAPCoin[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]))))
[2020-11-25 13:25:27,486 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_StandardToken0) ==> ( <>AP(success_transferFrom_StandardToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 13:25:27,503 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:25:27 PropertyContainer
[2020-11-25 13:25:27,503 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 13:25:27,504 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 13:25:27,504 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 13:25:27,504 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 13:25:27,505 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:25:27" (1/2) ...
[2020-11-25 13:25:27,505 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 13:25:27,505 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 13:25:27,529 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:25:27" (2/2) ...
[2020-11-25 13:25:27,529 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 13:25:27,530 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 13:25:27,530 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 13:25:27,530 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 13:25:27,531 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:25:27" (1/2) ...
[2020-11-25 13:25:27,585 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 13:25:27,585 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 13:25:27,585 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-25 13:25:27,585 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-25 13:25:27,585 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-25 13:25:27,585 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-25 13:25:27,586 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-25 13:25:27,586 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-25 13:25:27,586 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 13:25:27,586 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 13:25:27,586 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 13:25:27,586 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 13:25:27,586 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 13:25:27,586 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 13:25:27,586 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 13:25:27,587 INFO  L130     BoogieDeclarations]: Found specification of procedure GroupLockup_GroupLockup_NoBaseCtor__success
[2020-11-25 13:25:27,587 INFO  L130     BoogieDeclarations]: Found specification of procedure GroupLockup_GroupLockup
[2020-11-25 13:25:27,587 INFO  L138     BoogieDeclarations]: Found implementation of procedure GroupLockup_GroupLockup
[2020-11-25 13:25:27,587 INFO  L130     BoogieDeclarations]: Found specification of procedure getLockupTime~address_GroupLockup
[2020-11-25 13:25:27,587 INFO  L138     BoogieDeclarations]: Found implementation of procedure getLockupTime~address_GroupLockup
[2020-11-25 13:25:27,587 INFO  L130     BoogieDeclarations]: Found specification of procedure isLockup~uint256_GroupLockup
[2020-11-25 13:25:27,587 INFO  L138     BoogieDeclarations]: Found implementation of procedure isLockup~uint256_GroupLockup
[2020-11-25 13:25:27,587 INFO  L130     BoogieDeclarations]: Found specification of procedure inLockupList~address_GroupLockup
[2020-11-25 13:25:27,587 INFO  L138     BoogieDeclarations]: Found implementation of procedure inLockupList~address_GroupLockup
[2020-11-25 13:25:27,587 INFO  L130     BoogieDeclarations]: Found specification of procedure updateLockupList~address~uint256_GroupLockup
[2020-11-25 13:25:27,588 INFO  L138     BoogieDeclarations]: Found implementation of procedure updateLockupList~address~uint256_GroupLockup
[2020-11-25 13:25:27,588 INFO  L130     BoogieDeclarations]: Found specification of procedure updateLockupTime~uint256~uint256_GroupLockup
[2020-11-25 13:25:27,588 INFO  L138     BoogieDeclarations]: Found implementation of procedure updateLockupTime~uint256~uint256_GroupLockup
[2020-11-25 13:25:27,588 INFO  L130     BoogieDeclarations]: Found specification of procedure lockup_list~address_GroupLockup
[2020-11-25 13:25:27,588 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockup_list~address_GroupLockup
[2020-11-25 13:25:27,588 INFO  L130     BoogieDeclarations]: Found specification of procedure lockup_list_flag~uint256_GroupLockup
[2020-11-25 13:25:27,588 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockup_list_flag~uint256_GroupLockup
[2020-11-25 13:25:27,588 INFO  L130     BoogieDeclarations]: Found specification of procedure user_list~uint256_GroupLockup
[2020-11-25 13:25:27,588 INFO  L138     BoogieDeclarations]: Found implementation of procedure user_list~uint256_GroupLockup
[2020-11-25 13:25:27,588 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-25 13:25:27,589 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic
[2020-11-25 13:25:27,589 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic
[2020-11-25 13:25:27,589 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Basic
[2020-11-25 13:25:27,589 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Basic
[2020-11-25 13:25:27,589 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Basic
[2020-11-25 13:25:27,589 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-25 13:25:27,589 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken
[2020-11-25 13:25:27,589 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken
[2020-11-25 13:25:27,589 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken
[2020-11-25 13:25:27,589 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken
[2020-11-25 13:25:27,590 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken
[2020-11-25 13:25:27,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken
[2020-11-25 13:25:27,590 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken
[2020-11-25 13:25:27,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken
[2020-11-25 13:25:27,590 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 13:25:27,590 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 13:25:27,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 13:25:27,590 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 13:25:27,590 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 13:25:27,590 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 13:25:27,590 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-25 13:25:27,591 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken
[2020-11-25 13:25:27,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken
[2020-11-25 13:25:27,591 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-25 13:25:27,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-25 13:25:27,591 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken
[2020-11-25 13:25:27,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken
[2020-11-25 13:25:27,591 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken
[2020-11-25 13:25:27,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken
[2020-11-25 13:25:27,591 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken
[2020-11-25 13:25:27,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken
[2020-11-25 13:25:27,591 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-25 13:25:27,592 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-25 13:25:27,592 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-25 13:25:27,592 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken
[2020-11-25 13:25:27,592 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken
[2020-11-25 13:25:27,592 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken
[2020-11-25 13:25:27,592 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken
[2020-11-25 13:25:27,592 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken
[2020-11-25 13:25:27,592 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken
[2020-11-25 13:25:27,592 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken
[2020-11-25 13:25:27,592 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken
[2020-11-25 13:25:27,593 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC223Token_ERC223Token_NoBaseCtor__success
[2020-11-25 13:25:27,593 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC223Token_ERC223Token
[2020-11-25 13:25:27,593 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC223Token_ERC223Token
[2020-11-25 13:25:27,593 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer_ERC223~address~uint256~bytes_ERC223Token
[2020-11-25 13:25:27,593 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC223ContractInterface_ERC223ContractInterface_NoBaseCtor__success
[2020-11-25 13:25:27,593 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC223ContractInterface_ERC223ContractInterface
[2020-11-25 13:25:27,593 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC223ContractInterface_ERC223ContractInterface
[2020-11-25 13:25:27,593 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenFallback~address~uint256~bytes_ERC223ContractInterface
[2020-11-25 13:25:27,593 INFO  L130     BoogieDeclarations]: Found specification of procedure DEAPCoin_DEAPCoin_NoBaseCtor__success
[2020-11-25 13:25:27,593 INFO  L130     BoogieDeclarations]: Found specification of procedure DEAPCoin_DEAPCoin
[2020-11-25 13:25:27,593 INFO  L138     BoogieDeclarations]: Found implementation of procedure DEAPCoin_DEAPCoin
[2020-11-25 13:25:27,594 INFO  L130     BoogieDeclarations]: Found specification of procedure sendTokens~address~uint256_DEAPCoin
[2020-11-25 13:25:27,594 INFO  L138     BoogieDeclarations]: Found implementation of procedure sendTokens~address~uint256_DEAPCoin
[2020-11-25 13:25:27,594 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_DEAPCoin
[2020-11-25 13:25:27,594 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_DEAPCoin
[2020-11-25 13:25:27,594 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer_ERC223~address~uint256~bytes_DEAPCoin
[2020-11-25 13:25:27,594 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer_ERC223~address~uint256~bytes_DEAPCoin
[2020-11-25 13:25:27,594 INFO  L130     BoogieDeclarations]: Found specification of procedure batchTransfer~address~arr~arr_DEAPCoin
[2020-11-25 13:25:27,594 INFO  L138     BoogieDeclarations]: Found implementation of procedure batchTransfer~address~arr~arr_DEAPCoin
[2020-11-25 13:25:27,594 INFO  L130     BoogieDeclarations]: Found specification of procedure name_DEAPCoin
[2020-11-25 13:25:27,594 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_DEAPCoin
[2020-11-25 13:25:27,594 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_DEAPCoin
[2020-11-25 13:25:27,595 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_DEAPCoin
[2020-11-25 13:25:27,595 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_DEAPCoin
[2020-11-25 13:25:27,595 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_DEAPCoin
[2020-11-25 13:25:27,595 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_DEAPCoin
[2020-11-25 13:25:27,595 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_DEAPCoin
[2020-11-25 13:25:27,595 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SALE_SUPPLY_DEAPCoin
[2020-11-25 13:25:27,595 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SALE_SUPPLY_DEAPCoin
[2020-11-25 13:25:27,595 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_UNSALE_SUPPLY_DEAPCoin
[2020-11-25 13:25:27,595 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_UNSALE_SUPPLY_DEAPCoin
[2020-11-25 13:25:27,595 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_wallet_DEAPCoin
[2020-11-25 13:25:27,596 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_wallet_DEAPCoin
[2020-11-25 13:25:27,596 INFO  L130     BoogieDeclarations]: Found specification of procedure unsale_owner_wallet_DEAPCoin
[2020-11-25 13:25:27,596 INFO  L138     BoogieDeclarations]: Found implementation of procedure unsale_owner_wallet_DEAPCoin
[2020-11-25 13:25:27,596 INFO  L130     BoogieDeclarations]: Found specification of procedure group_lockup_DEAPCoin
[2020-11-25 13:25:27,596 INFO  L138     BoogieDeclarations]: Found implementation of procedure group_lockup_DEAPCoin
[2020-11-25 13:25:27,596 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 13:25:27,596 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 13:25:27,596 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 13:25:27,596 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 13:25:27,596 INFO  L130     BoogieDeclarations]: Found specification of procedure canMint_pre__success
[2020-11-25 13:25:27,596 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-25 13:25:27,597 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-25 13:25:27,597 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 13:25:27,597 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 13:25:27,597 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_GroupLockup
[2020-11-25 13:25:27,597 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_GroupLockup
[2020-11-25 13:25:27,597 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Basic
[2020-11-25 13:25:27,597 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Basic
[2020-11-25 13:25:27,597 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BasicToken
[2020-11-25 13:25:27,597 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BasicToken
[2020-11-25 13:25:27,598 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 13:25:27,598 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 13:25:27,598 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_StandardToken
[2020-11-25 13:25:27,598 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_StandardToken
[2020-11-25 13:25:27,598 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MintableToken
[2020-11-25 13:25:27,598 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MintableToken
[2020-11-25 13:25:27,598 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC223Token
[2020-11-25 13:25:27,598 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC223Token
[2020-11-25 13:25:27,598 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC223ContractInterface
[2020-11-25 13:25:27,598 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC223ContractInterface
[2020-11-25 13:25:27,599 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_DEAPCoin
[2020-11-25 13:25:27,599 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 13:25:27,599 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 13:25:27,599 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 13:25:27,599 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-25 13:25:27,599 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-25 13:25:27,599 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-25 13:25:27,599 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-25 13:25:27,599 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-25 13:25:27,599 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-25 13:25:27,600 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 13:25:27,600 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 13:25:27,600 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 13:25:27,600 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 13:25:27,600 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 13:25:27,600 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 13:25:27,600 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 13:25:27,600 INFO  L130     BoogieDeclarations]: Found specification of procedure GroupLockup_GroupLockup_NoBaseCtor__fail
[2020-11-25 13:25:27,600 INFO  L130     BoogieDeclarations]: Found specification of procedure GroupLockup_GroupLockup__success
[2020-11-25 13:25:27,600 INFO  L130     BoogieDeclarations]: Found specification of procedure GroupLockup_GroupLockup__fail
[2020-11-25 13:25:27,600 INFO  L130     BoogieDeclarations]: Found specification of procedure getLockupTime~address_GroupLockup__success
[2020-11-25 13:25:27,601 INFO  L130     BoogieDeclarations]: Found specification of procedure getLockupTime~address_GroupLockup__fail
[2020-11-25 13:25:27,601 INFO  L130     BoogieDeclarations]: Found specification of procedure isLockup~uint256_GroupLockup__success
[2020-11-25 13:25:27,601 INFO  L130     BoogieDeclarations]: Found specification of procedure isLockup~uint256_GroupLockup__fail
[2020-11-25 13:25:27,601 INFO  L130     BoogieDeclarations]: Found specification of procedure inLockupList~address_GroupLockup__success
[2020-11-25 13:25:27,601 INFO  L130     BoogieDeclarations]: Found specification of procedure inLockupList~address_GroupLockup__fail
[2020-11-25 13:25:27,601 INFO  L130     BoogieDeclarations]: Found specification of procedure updateLockupList~address~uint256_GroupLockup__success
[2020-11-25 13:25:27,601 INFO  L130     BoogieDeclarations]: Found specification of procedure updateLockupList~address~uint256_GroupLockup__fail
[2020-11-25 13:25:27,601 INFO  L130     BoogieDeclarations]: Found specification of procedure updateLockupTime~uint256~uint256_GroupLockup__success
[2020-11-25 13:25:27,601 INFO  L130     BoogieDeclarations]: Found specification of procedure updateLockupTime~uint256~uint256_GroupLockup__fail
[2020-11-25 13:25:27,601 INFO  L130     BoogieDeclarations]: Found specification of procedure lockup_list~address_GroupLockup__success
[2020-11-25 13:25:27,601 INFO  L130     BoogieDeclarations]: Found specification of procedure lockup_list~address_GroupLockup__fail
[2020-11-25 13:25:27,602 INFO  L130     BoogieDeclarations]: Found specification of procedure lockup_list_flag~uint256_GroupLockup__success
[2020-11-25 13:25:27,602 INFO  L130     BoogieDeclarations]: Found specification of procedure lockup_list_flag~uint256_GroupLockup__fail
[2020-11-25 13:25:27,602 INFO  L130     BoogieDeclarations]: Found specification of procedure user_list~uint256_GroupLockup__success
[2020-11-25 13:25:27,602 INFO  L130     BoogieDeclarations]: Found specification of procedure user_list~uint256_GroupLockup__fail
[2020-11-25 13:25:27,602 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-25 13:25:27,602 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__success
[2020-11-25 13:25:27,602 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__fail
[2020-11-25 13:25:27,602 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-25 13:25:27,602 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__success
[2020-11-25 13:25:27,602 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__fail
[2020-11-25 13:25:27,602 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__success
[2020-11-25 13:25:27,602 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__fail
[2020-11-25 13:25:27,603 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__success
[2020-11-25 13:25:27,603 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__fail
[2020-11-25 13:25:27,603 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__success
[2020-11-25 13:25:27,603 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__fail
[2020-11-25 13:25:27,603 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 13:25:27,603 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 13:25:27,603 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 13:25:27,603 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-25 13:25:27,603 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__success
[2020-11-25 13:25:27,603 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__fail
[2020-11-25 13:25:27,603 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-25 13:25:27,603 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-25 13:25:27,604 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__success
[2020-11-25 13:25:27,604 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__fail
[2020-11-25 13:25:27,604 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__success
[2020-11-25 13:25:27,604 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__fail
[2020-11-25 13:25:27,604 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-25 13:25:27,604 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-25 13:25:27,604 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-25 13:25:27,604 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-25 13:25:27,604 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-25 13:25:27,604 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__success
[2020-11-25 13:25:27,604 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__fail
[2020-11-25 13:25:27,604 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__success
[2020-11-25 13:25:27,605 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__fail
[2020-11-25 13:25:27,605 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken__success
[2020-11-25 13:25:27,605 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken__fail
[2020-11-25 13:25:27,605 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken__success
[2020-11-25 13:25:27,605 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken__fail
[2020-11-25 13:25:27,605 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC223Token_ERC223Token_NoBaseCtor__fail
[2020-11-25 13:25:27,605 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC223Token_ERC223Token__success
[2020-11-25 13:25:27,605 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC223Token_ERC223Token__fail
[2020-11-25 13:25:27,605 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC223ContractInterface_ERC223ContractInterface_NoBaseCtor__fail
[2020-11-25 13:25:27,605 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC223ContractInterface_ERC223ContractInterface__success
[2020-11-25 13:25:27,605 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC223ContractInterface_ERC223ContractInterface__fail
[2020-11-25 13:25:27,605 INFO  L130     BoogieDeclarations]: Found specification of procedure DEAPCoin_DEAPCoin_NoBaseCtor__fail
[2020-11-25 13:25:27,606 INFO  L130     BoogieDeclarations]: Found specification of procedure DEAPCoin_DEAPCoin__success
[2020-11-25 13:25:27,606 INFO  L130     BoogieDeclarations]: Found specification of procedure DEAPCoin_DEAPCoin__fail
[2020-11-25 13:25:27,606 INFO  L130     BoogieDeclarations]: Found specification of procedure sendTokens~address~uint256_DEAPCoin__success
[2020-11-25 13:25:27,606 INFO  L130     BoogieDeclarations]: Found specification of procedure sendTokens~address~uint256_DEAPCoin__fail
[2020-11-25 13:25:27,606 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_DEAPCoin__success
[2020-11-25 13:25:27,606 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_DEAPCoin__fail
[2020-11-25 13:25:27,606 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer_ERC223~address~uint256~bytes_DEAPCoin__success
[2020-11-25 13:25:27,606 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer_ERC223~address~uint256~bytes_DEAPCoin__fail
[2020-11-25 13:25:27,606 INFO  L130     BoogieDeclarations]: Found specification of procedure batchTransfer~address~arr~arr_DEAPCoin__success
[2020-11-25 13:25:27,606 INFO  L130     BoogieDeclarations]: Found specification of procedure batchTransfer~address~arr~arr_DEAPCoin__fail
[2020-11-25 13:25:27,606 INFO  L130     BoogieDeclarations]: Found specification of procedure name_DEAPCoin__success
[2020-11-25 13:25:27,607 INFO  L130     BoogieDeclarations]: Found specification of procedure name_DEAPCoin__fail
[2020-11-25 13:25:27,607 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_DEAPCoin__success
[2020-11-25 13:25:27,607 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_DEAPCoin__fail
[2020-11-25 13:25:27,607 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_DEAPCoin__success
[2020-11-25 13:25:27,607 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_DEAPCoin__fail
[2020-11-25 13:25:27,607 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_DEAPCoin__success
[2020-11-25 13:25:27,607 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_DEAPCoin__fail
[2020-11-25 13:25:27,607 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SALE_SUPPLY_DEAPCoin__success
[2020-11-25 13:25:27,607 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SALE_SUPPLY_DEAPCoin__fail
[2020-11-25 13:25:27,607 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_UNSALE_SUPPLY_DEAPCoin__success
[2020-11-25 13:25:27,607 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_UNSALE_SUPPLY_DEAPCoin__fail
[2020-11-25 13:25:27,607 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_wallet_DEAPCoin__success
[2020-11-25 13:25:27,608 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_wallet_DEAPCoin__fail
[2020-11-25 13:25:27,608 INFO  L130     BoogieDeclarations]: Found specification of procedure unsale_owner_wallet_DEAPCoin__success
[2020-11-25 13:25:27,608 INFO  L130     BoogieDeclarations]: Found specification of procedure unsale_owner_wallet_DEAPCoin__fail
[2020-11-25 13:25:27,608 INFO  L130     BoogieDeclarations]: Found specification of procedure group_lockup_DEAPCoin__success
[2020-11-25 13:25:27,608 INFO  L130     BoogieDeclarations]: Found specification of procedure group_lockup_DEAPCoin__fail
[2020-11-25 13:25:27,608 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 13:25:27,608 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 13:25:27,608 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 13:25:27,608 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 13:25:27,608 INFO  L130     BoogieDeclarations]: Found specification of procedure canMint_pre__fail
[2020-11-25 13:25:27,608 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 13:25:27,608 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 13:25:27,609 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 13:25:27,609 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 13:25:27,609 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-25 13:25:27,609 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-25 13:25:27,609 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-25 13:25:27,609 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-25 13:25:27,609 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-25 13:25:27,609 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-25 13:25:27,609 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 13:25:27,609 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 13:25:27,609 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 13:25:27,609 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 13:25:27,610 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 13:25:27,610 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 13:25:27,610 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 13:25:27,610 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 13:25:27,610 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 13:25:27,610 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 13:25:27,610 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 13:25:27,610 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 13:25:27,610 INFO  L138     BoogieDeclarations]: Found implementation of procedure GroupLockup_GroupLockup_NoBaseCtor__fail
[2020-11-25 13:25:27,610 INFO  L138     BoogieDeclarations]: Found implementation of procedure GroupLockup_GroupLockup_NoBaseCtor__success
[2020-11-25 13:25:27,610 INFO  L138     BoogieDeclarations]: Found implementation of procedure GroupLockup_GroupLockup__fail
[2020-11-25 13:25:27,611 INFO  L138     BoogieDeclarations]: Found implementation of procedure GroupLockup_GroupLockup__success
[2020-11-25 13:25:27,611 INFO  L138     BoogieDeclarations]: Found implementation of procedure getLockupTime~address_GroupLockup__fail
[2020-11-25 13:25:27,611 INFO  L138     BoogieDeclarations]: Found implementation of procedure getLockupTime~address_GroupLockup__success
[2020-11-25 13:25:27,611 INFO  L138     BoogieDeclarations]: Found implementation of procedure isLockup~uint256_GroupLockup__fail
[2020-11-25 13:25:27,611 INFO  L138     BoogieDeclarations]: Found implementation of procedure isLockup~uint256_GroupLockup__success
[2020-11-25 13:25:27,611 INFO  L138     BoogieDeclarations]: Found implementation of procedure inLockupList~address_GroupLockup__fail
[2020-11-25 13:25:27,611 INFO  L138     BoogieDeclarations]: Found implementation of procedure inLockupList~address_GroupLockup__success
[2020-11-25 13:25:27,611 INFO  L138     BoogieDeclarations]: Found implementation of procedure updateLockupList~address~uint256_GroupLockup__fail
[2020-11-25 13:25:27,611 INFO  L138     BoogieDeclarations]: Found implementation of procedure updateLockupList~address~uint256_GroupLockup__success
[2020-11-25 13:25:27,611 INFO  L138     BoogieDeclarations]: Found implementation of procedure updateLockupTime~uint256~uint256_GroupLockup__fail
[2020-11-25 13:25:27,612 INFO  L138     BoogieDeclarations]: Found implementation of procedure updateLockupTime~uint256~uint256_GroupLockup__success
[2020-11-25 13:25:27,612 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockup_list~address_GroupLockup__fail
[2020-11-25 13:25:27,612 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockup_list~address_GroupLockup__success
[2020-11-25 13:25:27,612 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockup_list_flag~uint256_GroupLockup__fail
[2020-11-25 13:25:27,612 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockup_list_flag~uint256_GroupLockup__success
[2020-11-25 13:25:27,612 INFO  L138     BoogieDeclarations]: Found implementation of procedure user_list~uint256_GroupLockup__fail
[2020-11-25 13:25:27,612 INFO  L138     BoogieDeclarations]: Found implementation of procedure user_list~uint256_GroupLockup__success
[2020-11-25 13:25:27,612 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-25 13:25:27,612 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-25 13:25:27,612 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__fail
[2020-11-25 13:25:27,612 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__success
[2020-11-25 13:25:27,612 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-25 13:25:27,613 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-25 13:25:27,613 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__fail
[2020-11-25 13:25:27,613 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__success
[2020-11-25 13:25:27,613 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__fail
[2020-11-25 13:25:27,613 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__success
[2020-11-25 13:25:27,613 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__fail
[2020-11-25 13:25:27,613 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__success
[2020-11-25 13:25:27,613 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__fail
[2020-11-25 13:25:27,613 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__success
[2020-11-25 13:25:27,613 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 13:25:27,613 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 13:25:27,613 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 13:25:27,613 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 13:25:27,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-25 13:25:27,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-25 13:25:27,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__fail
[2020-11-25 13:25:27,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__success
[2020-11-25 13:25:27,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-25 13:25:27,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-25 13:25:27,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__fail
[2020-11-25 13:25:27,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__success
[2020-11-25 13:25:27,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__fail
[2020-11-25 13:25:27,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__success
[2020-11-25 13:25:27,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-25 13:25:27,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-25 13:25:27,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-25 13:25:27,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-25 13:25:27,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-25 13:25:27,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-25 13:25:27,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__fail
[2020-11-25 13:25:27,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__success
[2020-11-25 13:25:27,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__fail
[2020-11-25 13:25:27,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__success
[2020-11-25 13:25:27,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken__fail
[2020-11-25 13:25:27,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken__success
[2020-11-25 13:25:27,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken__fail
[2020-11-25 13:25:27,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken__success
[2020-11-25 13:25:27,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC223Token_ERC223Token_NoBaseCtor__fail
[2020-11-25 13:25:27,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC223Token_ERC223Token_NoBaseCtor__success
[2020-11-25 13:25:27,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC223Token_ERC223Token__fail
[2020-11-25 13:25:27,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC223Token_ERC223Token__success
[2020-11-25 13:25:27,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC223ContractInterface_ERC223ContractInterface_NoBaseCtor__fail
[2020-11-25 13:25:27,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC223ContractInterface_ERC223ContractInterface_NoBaseCtor__success
[2020-11-25 13:25:27,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC223ContractInterface_ERC223ContractInterface__fail
[2020-11-25 13:25:27,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC223ContractInterface_ERC223ContractInterface__success
[2020-11-25 13:25:27,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure DEAPCoin_DEAPCoin_NoBaseCtor__fail
[2020-11-25 13:25:27,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure DEAPCoin_DEAPCoin_NoBaseCtor__success
[2020-11-25 13:25:27,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure DEAPCoin_DEAPCoin__fail
[2020-11-25 13:25:27,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure DEAPCoin_DEAPCoin__success
[2020-11-25 13:25:27,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure sendTokens~address~uint256_DEAPCoin__fail
[2020-11-25 13:25:27,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure sendTokens~address~uint256_DEAPCoin__success
[2020-11-25 13:25:27,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_DEAPCoin__fail
[2020-11-25 13:25:27,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_DEAPCoin__success
[2020-11-25 13:25:27,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer_ERC223~address~uint256~bytes_DEAPCoin__fail
[2020-11-25 13:25:27,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer_ERC223~address~uint256~bytes_DEAPCoin__success
[2020-11-25 13:25:27,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure batchTransfer~address~arr~arr_DEAPCoin__fail
[2020-11-25 13:25:27,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure batchTransfer~address~arr~arr_DEAPCoin__success
[2020-11-25 13:25:27,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_DEAPCoin__fail
[2020-11-25 13:25:27,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_DEAPCoin__success
[2020-11-25 13:25:27,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_DEAPCoin__fail
[2020-11-25 13:25:27,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_DEAPCoin__success
[2020-11-25 13:25:27,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_DEAPCoin__fail
[2020-11-25 13:25:27,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_DEAPCoin__success
[2020-11-25 13:25:27,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_DEAPCoin__fail
[2020-11-25 13:25:27,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_DEAPCoin__success
[2020-11-25 13:25:27,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SALE_SUPPLY_DEAPCoin__fail
[2020-11-25 13:25:27,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SALE_SUPPLY_DEAPCoin__success
[2020-11-25 13:25:27,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_UNSALE_SUPPLY_DEAPCoin__fail
[2020-11-25 13:25:27,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_UNSALE_SUPPLY_DEAPCoin__success
[2020-11-25 13:25:27,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_wallet_DEAPCoin__fail
[2020-11-25 13:25:27,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_wallet_DEAPCoin__success
[2020-11-25 13:25:27,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure unsale_owner_wallet_DEAPCoin__fail
[2020-11-25 13:25:27,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure unsale_owner_wallet_DEAPCoin__success
[2020-11-25 13:25:27,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure group_lockup_DEAPCoin__fail
[2020-11-25 13:25:27,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure group_lockup_DEAPCoin__success
[2020-11-25 13:25:27,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 13:25:27,619 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 13:25:27,619 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 13:25:27,619 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 13:25:27,619 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 13:25:27,619 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 13:25:27,619 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 13:25:27,619 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 13:25:27,619 INFO  L138     BoogieDeclarations]: Found implementation of procedure canMint_pre__fail
[2020-11-25 13:25:27,619 INFO  L138     BoogieDeclarations]: Found implementation of procedure canMint_pre__success
[2020-11-25 13:25:27,619 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-25 13:25:27,619 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-25 13:25:27,619 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 13:25:27,619 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 13:25:27,620 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_GroupLockup
[2020-11-25 13:25:27,620 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_GroupLockup
[2020-11-25 13:25:27,620 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Basic
[2020-11-25 13:25:27,620 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Basic
[2020-11-25 13:25:27,620 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BasicToken
[2020-11-25 13:25:27,620 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BasicToken
[2020-11-25 13:25:27,620 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 13:25:27,620 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 13:25:27,620 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_StandardToken
[2020-11-25 13:25:27,620 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_StandardToken
[2020-11-25 13:25:27,620 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MintableToken
[2020-11-25 13:25:27,620 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MintableToken
[2020-11-25 13:25:27,620 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC223Token
[2020-11-25 13:25:27,621 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC223Token
[2020-11-25 13:25:27,621 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC223ContractInterface
[2020-11-25 13:25:27,621 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC223ContractInterface
[2020-11-25 13:25:27,621 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_DEAPCoin
[2020-11-25 13:25:27,621 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 13:25:27,621 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 13:25:27,621 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 13:25:28,437 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 13:25:28,437 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 13:25:28,437 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 13:25:28,612 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 13:25:28,887 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 13:25:28,887 INFO  L286             CfgBuilder]: Removed 11 assue(true) statements.
[2020-11-25 13:25:28,890 INFO  L202        PluginConnector]: Adding new model DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:25:28 BoogieIcfgContainer
[2020-11-25 13:25:28,890 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:25:27" (2/2) ...
[2020-11-25 13:25:28,890 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 13:25:28,890 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@7e50b1fc and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:25:28, skipping insertion in model container
[2020-11-25 13:25:28,890 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 13:25:28,890 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 13:25:28,890 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 13:25:28,891 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 13:25:28,892 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:25:27" (1/3) ...
[2020-11-25 13:25:28,892 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@53ee41ac and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:25:28, skipping insertion in model container
[2020-11-25 13:25:28,892 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:25:27" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 13:25:28,923 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:25:28 NWAContainer
[2020-11-25 13:25:28,923 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 13:25:28,923 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 13:25:28,923 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 13:25:28,924 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 13:25:28,924 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:25:28" (3/4) ...
[2020-11-25 13:25:28,925 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@256be5c9 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:25:28, skipping insertion in model container
[2020-11-25 13:25:28,925 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:25:28" (4/4) ...
[2020-11-25 13:25:28,927 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 13:25:28,932 INFO  L110   BuchiProductObserver]: Initial RCFG 3984 locations, 5228 edges
[2020-11-25 13:25:28,932 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 13:25:28,944 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 13:25:31,905 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 13:25:31,917 INFO  L110   BuchiProductObserver]: BuchiProgram size 9596 locations, 16983 edges
[2020-11-25 13:25:31,917 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:25:31 BoogieIcfgContainer
[2020-11-25 13:25:31,917 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 13:25:31,917 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 13:25:31,918 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 13:25:31,919 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 13:25:31,919 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:25:31" (1/1) ...
[2020-11-25 13:25:32,086 INFO  L313           BlockEncoder]: Initial Icfg 9596 locations, 16983 edges
[2020-11-25 13:25:32,086 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 13:25:32,087 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 13:25:32,087 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 13:25:32,087 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 13:25:32,107 INFO  L70    emoveInfeasibleEdges]: Removed 153 edges and 25 locations because of local infeasibility
[2020-11-25 13:25:32,125 INFO  L70        RemoveSinkStates]: Removed 20 edges and 13 locations by removing sink states
[2020-11-25 13:25:32,153 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 13:25:32,160 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 13:25:32,166 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 13:25:32,166 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 13:25:32,171 INFO  L313           BlockEncoder]: Encoded RCFG 9494 locations, 16715 edges
[2020-11-25 13:25:32,172 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 01:25:32 BasicIcfg
[2020-11-25 13:25:32,172 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 13:25:32,172 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 13:25:32,172 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 13:25:32,174 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 13:25:32,174 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 13:25:32,174 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:25:27" (1/6) ...
[2020-11-25 13:25:32,175 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@435bacd4 and model type DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:25:32, skipping insertion in model container
[2020-11-25 13:25:32,176 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 13:25:32,176 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:25:27" (2/6) ...
[2020-11-25 13:25:32,176 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@435bacd4 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:25:32, skipping insertion in model container
[2020-11-25 13:25:32,176 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 13:25:32,176 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:25:28" (3/6) ...
[2020-11-25 13:25:32,176 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@435bacd4 and model type DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 01:25:32, skipping insertion in model container
[2020-11-25 13:25:32,176 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 13:25:32,176 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:25:28" (4/6) ...
[2020-11-25 13:25:32,176 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@435bacd4 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:25:32, skipping insertion in model container
[2020-11-25 13:25:32,176 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 13:25:32,176 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:25:31" (5/6) ...
[2020-11-25 13:25:32,177 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@435bacd4 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 01:25:32, skipping insertion in model container
[2020-11-25 13:25:32,177 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 13:25:32,177 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 01:25:32" (6/6) ...
[2020-11-25 13:25:32,178 INFO  L404   chiAutomizerObserver]: Analyzing ICFG DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_transferfrom-normal.bpl_BEv2
[2020-11-25 13:25:32,213 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 13:25:32,213 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 13:25:32,213 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 13:25:32,213 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 13:25:32,213 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 13:25:32,213 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 13:25:32,213 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 13:25:32,213 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 13:25:32,213 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 13:25:32,281 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9494 states.
[2020-11-25 13:25:32,366 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:25:32,366 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:25:32,366 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:25:32,375 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:25:32,375 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:25:32,375 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 13:25:32,375 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9494 states.
[2020-11-25 13:25:32,407 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:25:32,407 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:25:32,407 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:25:32,409 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:25:32,409 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_StandardToken0 := false;
[L3]                  call_transferFrom_StandardToken0 := false;
[L3]      CALL        call main();
[L3]                  havoc p3;
[L3]                  havoc p2;
[L3]                  havoc p1;
[L10886]              assume null == 0;
[L10887]  CALL        call this := FreshRefGenerator__success();
[L5226]               havoc newRef;
[L5227]               assume Alloc[newRef] == false;
[L5228]               Alloc[newRef] := true;
[L5229]               assume newRef != null;
[L10887]  RET         call this := FreshRefGenerator__success();
[L10888]              assume now >= 0;
[L10889]              assume DType[this] == DEAPCoin;
[L10890]              assume msgvalue_MSG == 0;
[L10891]              gas := gas - 53000;
[L10892]  CALL        call DEAPCoin_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L2858]               havoc __exception;
[L2859]               revert := false;
[L2860]   COND FALSE  !(__exception)
[L2898]   CALL        call DEAPCoin_DEAPCoin__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6652]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L6652]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6653]   COND TRUE   revert
[L2898]   RET         call DEAPCoin_DEAPCoin__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L2899]               assume !revert && gas >= 0;
[L10892]  RET         call DEAPCoin_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L10893]              assume !revert && gas >= 0;

Loop:
[L10896]  CALL        call CorralChoice_DEAPCoin(this);
[L10641]              havoc msgsender_MSG;
[L10642]              havoc msgvalue_MSG;
[L10643]              havoc choice;
[L10644]              havoc __ret_0_owner;
[L10645]              havoc newOwner_s54;
[L10646]              havoc __ret_0_totalSupply;
[L10647]              havoc _owner_s578;
[L10648]              havoc __ret_0_balanceOf;
[L10649]              havoc _to_s1284;
[L10650]              havoc _value_s1284;
[L10651]              havoc __ret_0_transfer;
[L10652]              havoc _owner_s759;
[L10653]              havoc _spender_s759;
[L10654]              havoc __ret_0_allowance;
[L10655]              havoc _from_s715;
[L10656]              havoc _to_s715;
[L10657]              havoc _value_s715;
[L10658]              havoc __ret_0_transferFrom;
[L10659]              havoc _spender_s743;
[L10660]              havoc _value_s743;
[L10661]              havoc __ret_0_approve;
[L10662]              havoc _spender_s800;
[L10663]              havoc _addedValue_s800;
[L10664]              havoc __ret_0_increaseApproval;
[L10665]              havoc _spender_s860;
[L10666]              havoc _subtractedValue_s860;
[L10667]              havoc __ret_0_decreaseApproval;
[L10668]              havoc __ret_0_mintingFinished;
[L10669]              havoc _to_s932;
[L10670]              havoc _amount_s932;
[L10671]              havoc __ret_0_mint;
[L10672]              havoc __ret_0_finishMinting;
[L10673]              havoc _to_s1413;
[L10674]              havoc _value_s1413;
[L10675]              havoc _data_s1413;
[L10676]              havoc __ret_0_transfer_ERC223;
[L10677]              havoc __ret_0_name;
[L10678]              havoc __ret_0_symbol;
[L10679]              havoc __ret_0_decimals;
[L10680]              havoc __ret_0_INITIAL_SUPPLY;
[L10681]              havoc __ret_0_INITIAL_SALE_SUPPLY;
[L10682]              havoc __ret_0_INITIAL_UNSALE_SUPPLY;
[L10683]              havoc __ret_0_owner_wallet;
[L10684]              havoc __ret_0_unsale_owner_wallet;
[L10685]              havoc __ret_0_group_lockup;
[L10686]              havoc _sale_owner_wallet_s1076;
[L10687]              havoc _unsale_owner_wallet_s1076;
[L10688]              havoc _group_lockup_s1076;
[L10689]              havoc _to_s1162;
[L10690]              havoc _value_s1162;
[L10691]              havoc __ret_0_sendTokens;
[L10692]              havoc _from_s1567;
[L10693]              havoc _users_s1567;
[L10694]              havoc _values_s1567;
[L10695]              havoc __ret_0_batchTransfer;
[L10696]              havoc tmpNow;
[L10697]              havoc gas;
[L10698]              assume gas > 4000000 && gas <= 8000000;
[L10699]              tmpNow := now;
[L10700]              havoc now;
[L10701]              assume now > tmpNow;
[L10702]              assume msgsender_MSG != null;
[L10703]              assume DType[msgsender_MSG] != Ownable;
[L10704]              assume DType[msgsender_MSG] != SafeMath;
[L10705]              assume DType[msgsender_MSG] != GroupLockup;
[L10706]              assume DType[msgsender_MSG] != ERC20Basic;
[L10707]              assume DType[msgsender_MSG] != BasicToken;
[L10708]              assume DType[msgsender_MSG] != ERC20;
[L10709]              assume DType[msgsender_MSG] != StandardToken;
[L10710]              assume DType[msgsender_MSG] != MintableToken;
[L10711]              assume DType[msgsender_MSG] != ERC223Token;
[L10712]              assume DType[msgsender_MSG] != ERC223ContractInterface;
[L10713]              assume DType[msgsender_MSG] != DEAPCoin;
[L10714]              Alloc[msgsender_MSG] := true;
[L10715]  COND TRUE   choice == 25
[L10716]              gas := gas - 21000;
[L10717]  COND FALSE  !(gas >= 0)
[L10896]  RET         call CorralChoice_DEAPCoin(this);

[2020-11-25 13:25:32,428 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:25:32,428 INFO  L82        PathProgramCache]: Analyzing trace with hash 1125569244, now seen corresponding path program 1 times
[2020-11-25 13:25:32,433 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:25:32,455 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:25:32,495 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 13:25:32,496 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:25:32,496 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 13:25:32,912 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:25:32,920 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 13:25:32,921 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 13:25:32,922 INFO  L87              Difference]: Start difference. First operand 9494 states. Second operand 3 states.
[2020-11-25 13:25:33,222 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:25:33,222 INFO  L93              Difference]: Finished difference Result 6224 states and 9878 transitions.
[2020-11-25 13:25:33,222 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 13:25:33,224 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6224 states and 9878 transitions.
[2020-11-25 13:25:33,262 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 13:25:33,318 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6224 states to 6220 states and 9866 transitions.
[2020-11-25 13:25:33,319 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 16
[2020-11-25 13:25:33,323 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1458
[2020-11-25 13:25:33,324 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6220 states and 9866 transitions.
[2020-11-25 13:25:33,341 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:25:33,341 INFO  L728         BuchiCegarLoop]: Abstraction has 6220 states and 9866 transitions.
[2020-11-25 13:25:33,360 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6220 states and 9866 transitions.
[2020-11-25 13:25:33,452 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6220 to 5872.
[2020-11-25 13:25:33,452 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5872 states.
[2020-11-25 13:25:33,463 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5872 states to 5872 states and 9282 transitions.
[2020-11-25 13:25:33,464 INFO  L751         BuchiCegarLoop]: Abstraction has 5872 states and 9282 transitions.
[2020-11-25 13:25:33,464 INFO  L631         BuchiCegarLoop]: Abstraction has 5872 states and 9282 transitions.
[2020-11-25 13:25:33,464 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 13:25:33,464 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5872 states and 9282 transitions.
[2020-11-25 13:25:33,478 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 13:25:33,478 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:25:33,478 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:25:33,483 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [22, 22, 22, 22, 22, 22, 22, 22, 22, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:25:33,483 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_StandardToken0 := false;
[L3]                  call_transferFrom_StandardToken0 := false;
[L3]      CALL        call main();
[L3]                  havoc p3;
[L3]                  havoc p2;
[L3]                  havoc p1;
[L10886]              assume null == 0;
[L10887]  CALL        call this := FreshRefGenerator__success();
[L5226]               havoc newRef;
[L5227]               assume Alloc[newRef] == false;
[L5228]               Alloc[newRef] := true;
[L5229]               assume newRef != null;
[L10887]  RET         call this := FreshRefGenerator__success();
[L10888]              assume now >= 0;
[L10889]              assume DType[this] == DEAPCoin;
[L10890]              assume msgvalue_MSG == 0;
[L10891]              gas := gas - 53000;
[L10892]  CALL        call DEAPCoin_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L2858]               havoc __exception;
[L2859]               revert := false;
[L2860]   COND FALSE  !(__exception)
[L2898]   CALL        call DEAPCoin_DEAPCoin__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6652]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L6652]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6653]   COND FALSE  !(revert)
[L6656]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5953]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]   COND FALSE  !(revert)
[L5957]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5957]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6656]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6657]   COND FALSE  !(revert)
[L6660]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5824]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5825]   COND FALSE  !(revert)
[L5828]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5802]               assume msgsender_MSG != null;
[L5803]               Balance[this] := 0;
[L5804]               balances_BasicToken[this] := zeroRefintArr();
[L5805]               sum_balances2[this] := 0;
[L5806]               totalSupply__BasicToken[this] := 0;
[L5828]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5829]   COND FALSE  !(revert)
[L6660]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6661]   COND FALSE  !(revert)
[L6664]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6005]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L6005]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]   COND FALSE  !(revert)
[L6009]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5953]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]   COND FALSE  !(revert)
[L5957]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5957]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6009]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6010]   COND FALSE  !(revert)
[L6013]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5824]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5825]   COND FALSE  !(revert)
[L5828]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5802]               assume msgsender_MSG != null;
[L5803]               Balance[this] := 0;
[L5804]               balances_BasicToken[this] := zeroRefintArr();
[L5805]               sum_balances2[this] := 0;
[L5806]               totalSupply__BasicToken[this] := 0;
[L5828]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5829]   COND FALSE  !(revert)
[L6013]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]   COND FALSE  !(revert)
[L6017]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5976]               assume msgsender_MSG != null;
[L5977]               Balance[this] := 0;
[L5978]               allowed_StandardToken[this] := zeroRefRefintArr();
[L5979]               sum_allowed3[this] := 0;
[L6017]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6018]   COND FALSE  !(revert)
[L6664]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6665]   COND FALSE  !(revert)
[L6668]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5262]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5245]               assume msgsender_MSG != null;
[L5246]               Balance[this] := 0;
[L5247]               owner_Ownable[this] := null;
[L5249]               owner_Ownable[this] := msgsender_MSG;
[L5262]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5263]   COND FALSE  !(revert)
[L6668]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6669]   COND FALSE  !(revert)
[L6672]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6265]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L6265]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6266]   COND FALSE  !(revert)
[L6269]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5953]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]   COND FALSE  !(revert)
[L5957]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5957]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6269]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6270]   COND FALSE  !(revert)
[L6273]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5824]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5825]   COND FALSE  !(revert)
[L5828]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5802]               assume msgsender_MSG != null;
[L5803]               Balance[this] := 0;
[L5804]               balances_BasicToken[this] := zeroRefintArr();
[L5805]               sum_balances2[this] := 0;
[L5806]               totalSupply__BasicToken[this] := 0;
[L5828]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5829]   COND FALSE  !(revert)
[L6273]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6274]   COND FALSE  !(revert)
[L6277]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6005]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L6005]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]   COND FALSE  !(revert)
[L6009]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5953]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]   COND FALSE  !(revert)
[L5957]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5957]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6009]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6010]   COND FALSE  !(revert)
[L6013]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5824]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5825]   COND FALSE  !(revert)
[L5828]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5802]               assume msgsender_MSG != null;
[L5803]               Balance[this] := 0;
[L5804]               balances_BasicToken[this] := zeroRefintArr();
[L5805]               sum_balances2[this] := 0;
[L5806]               totalSupply__BasicToken[this] := 0;
[L5828]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5829]   COND FALSE  !(revert)
[L6013]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]   COND FALSE  !(revert)
[L6017]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5976]               assume msgsender_MSG != null;
[L5977]               Balance[this] := 0;
[L5978]               allowed_StandardToken[this] := zeroRefRefintArr();
[L5979]               sum_allowed3[this] := 0;
[L6017]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6018]   COND FALSE  !(revert)
[L6277]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6278]   COND FALSE  !(revert)
[L6281]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5262]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5245]               assume msgsender_MSG != null;
[L5246]               Balance[this] := 0;
[L5247]               owner_Ownable[this] := null;
[L5249]               owner_Ownable[this] := msgsender_MSG;
[L5262]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5263]   COND FALSE  !(revert)
[L6281]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6282]   COND FALSE  !(revert)
[L6285]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6229]               assume msgsender_MSG != null;
[L6230]               Balance[this] := 0;
[L6231]               mintingFinished_MintableToken[this] := false;
[L6285]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6286]   COND FALSE  !(revert)
[L6672]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6673]   COND FALSE  !(revert)
[L6676]   CALL        call ERC223Token_ERC223Token__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L6442]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6443]   COND FALSE  !(revert)
[L6446]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5953]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]   COND FALSE  !(revert)
[L5957]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5957]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6446]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6447]   COND FALSE  !(revert)
[L6450]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5824]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5825]   COND FALSE  !(revert)
[L5828]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5802]               assume msgsender_MSG != null;
[L5803]               Balance[this] := 0;
[L5804]               balances_BasicToken[this] := zeroRefintArr();
[L5805]               sum_balances2[this] := 0;
[L5806]               totalSupply__BasicToken[this] := 0;
[L5828]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5829]   COND FALSE  !(revert)
[L6450]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6005]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L6005]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]   COND FALSE  !(revert)
[L6009]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5953]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]   COND FALSE  !(revert)
[L5957]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5957]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6009]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6010]   COND FALSE  !(revert)
[L6013]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5824]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5825]   COND FALSE  !(revert)
[L5828]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5802]               assume msgsender_MSG != null;
[L5803]               Balance[this] := 0;
[L5804]               balances_BasicToken[this] := zeroRefintArr();
[L5805]               sum_balances2[this] := 0;
[L5806]               totalSupply__BasicToken[this] := 0;
[L5828]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5829]   COND FALSE  !(revert)
[L6013]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]   COND FALSE  !(revert)
[L6017]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5976]               assume msgsender_MSG != null;
[L5977]               Balance[this] := 0;
[L5978]               allowed_StandardToken[this] := zeroRefRefintArr();
[L5979]               sum_allowed3[this] := 0;
[L6017]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6018]   COND FALSE  !(revert)
[L6454]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L6458]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5262]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5245]               assume msgsender_MSG != null;
[L5246]               Balance[this] := 0;
[L5247]               owner_Ownable[this] := null;
[L5249]               owner_Ownable[this] := msgsender_MSG;
[L5262]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5263]   COND FALSE  !(revert)
[L6458]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6459]   COND FALSE  !(revert)
[L6462]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6265]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L6265]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6266]   COND FALSE  !(revert)
[L6269]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5953]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]   COND FALSE  !(revert)
[L5957]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5957]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6269]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6270]   COND FALSE  !(revert)
[L6273]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5824]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5825]   COND FALSE  !(revert)
[L5828]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5802]               assume msgsender_MSG != null;
[L5803]               Balance[this] := 0;
[L5804]               balances_BasicToken[this] := zeroRefintArr();
[L5805]               sum_balances2[this] := 0;
[L5806]               totalSupply__BasicToken[this] := 0;
[L5828]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5829]   COND FALSE  !(revert)
[L6273]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6274]   COND FALSE  !(revert)
[L6277]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6005]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L6005]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]   COND FALSE  !(revert)
[L6009]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5953]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]   COND FALSE  !(revert)
[L5957]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5957]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6009]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6010]   COND FALSE  !(revert)
[L6013]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5824]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5825]   COND FALSE  !(revert)
[L5828]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5802]               assume msgsender_MSG != null;
[L5803]               Balance[this] := 0;
[L5804]               balances_BasicToken[this] := zeroRefintArr();
[L5805]               sum_balances2[this] := 0;
[L5806]               totalSupply__BasicToken[this] := 0;
[L5828]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5829]   COND FALSE  !(revert)
[L6013]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]   COND FALSE  !(revert)
[L6017]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5976]               assume msgsender_MSG != null;
[L5977]               Balance[this] := 0;
[L5978]               allowed_StandardToken[this] := zeroRefRefintArr();
[L5979]               sum_allowed3[this] := 0;
[L6017]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6018]   COND FALSE  !(revert)
[L6277]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6278]   COND FALSE  !(revert)
[L6281]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5262]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5245]               assume msgsender_MSG != null;
[L5246]               Balance[this] := 0;
[L5247]               owner_Ownable[this] := null;
[L5249]               owner_Ownable[this] := msgsender_MSG;
[L5262]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5263]   COND FALSE  !(revert)
[L6281]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6282]   COND FALSE  !(revert)
[L6285]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6229]               assume msgsender_MSG != null;
[L6230]               Balance[this] := 0;
[L6231]               mintingFinished_MintableToken[this] := false;
[L6285]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6286]   COND FALSE  !(revert)
[L6462]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6463]   COND FALSE  !(revert)
[L6466]   CALL        call ERC223Token_ERC223Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6403]               assume msgsender_MSG != null;
[L6404]               Balance[this] := 0;
[L6466]   RET         call ERC223Token_ERC223Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]   COND FALSE  !(revert)
[L6676]   RET         call ERC223Token_ERC223Token__success(this, msgsender_MSG, msgvalue_MSG);
[L6677]   COND FALSE  !(revert)
[L6680]   CALL        call DEAPCoin_DEAPCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6562]               assume msgsender_MSG != null;
[L6563]               Balance[this] := 0;
[L6564]               name_DEAPCoin[this] := -635866188;
[L6565]               symbol_DEAPCoin[this] := -1031151507;
[L6566]               decimals_DEAPCoin[this] := 18;
[L6567]               __var_19 := decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6568]               INITIAL_SUPPLY_DEAPCoin[this] := 30000000000 * (nonlinearPow(10, decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6569]               __var_20 := decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6570]               INITIAL_SALE_SUPPLY_DEAPCoin[this] := 12000000000 * (nonlinearPow(10, decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6571]               INITIAL_UNSALE_SUPPLY_DEAPCoin[this] := (INITIAL_SUPPLY_DEAPCoin[this] - INITIAL_SALE_SUPPLY_DEAPCoin[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6572]               owner_wallet_DEAPCoin[this] := null;
[L6573]               unsale_owner_wallet_DEAPCoin[this] := null;
[L6575]               group_lockup_DEAPCoin[this] := _group_lockup_s1076;
[L6576]               owner_wallet_DEAPCoin[this] := _sale_owner_wallet_s1076;
[L6577]               unsale_owner_wallet_DEAPCoin[this] := _unsale_owner_wallet_s1076;
[L6578]   COND TRUE   DType[this] == DEAPCoin
[L6579]   CALL        call __var_16 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, owner_wallet_DEAPCoin[this], INITIAL_SALE_SUPPLY_DEAPCoin[this]);
[L6323]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9398]   COND TRUE   !(msgsender_MSG == owner_Ownable[this])
[L9399]               revert := true;
[L6323]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND TRUE   revert
[L6579]   RET         call __var_16 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, owner_wallet_DEAPCoin[this], INITIAL_SALE_SUPPLY_DEAPCoin[this]);
[L6580]   COND TRUE   revert
[L6680]   RET         call DEAPCoin_DEAPCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6681]   COND FALSE  !(revert)
[L2898]   RET         call DEAPCoin_DEAPCoin__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L2899]               assume !revert && gas >= 0;
[L10892]  RET         call DEAPCoin_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L10893]              assume !revert && gas >= 0;

Loop:
[L10896]  CALL        call CorralChoice_DEAPCoin(this);
[L10641]              havoc msgsender_MSG;
[L10642]              havoc msgvalue_MSG;
[L10643]              havoc choice;
[L10644]              havoc __ret_0_owner;
[L10645]              havoc newOwner_s54;
[L10646]              havoc __ret_0_totalSupply;
[L10647]              havoc _owner_s578;
[L10648]              havoc __ret_0_balanceOf;
[L10649]              havoc _to_s1284;
[L10650]              havoc _value_s1284;
[L10651]              havoc __ret_0_transfer;
[L10652]              havoc _owner_s759;
[L10653]              havoc _spender_s759;
[L10654]              havoc __ret_0_allowance;
[L10655]              havoc _from_s715;
[L10656]              havoc _to_s715;
[L10657]              havoc _value_s715;
[L10658]              havoc __ret_0_transferFrom;
[L10659]              havoc _spender_s743;
[L10660]              havoc _value_s743;
[L10661]              havoc __ret_0_approve;
[L10662]              havoc _spender_s800;
[L10663]              havoc _addedValue_s800;
[L10664]              havoc __ret_0_increaseApproval;
[L10665]              havoc _spender_s860;
[L10666]              havoc _subtractedValue_s860;
[L10667]              havoc __ret_0_decreaseApproval;
[L10668]              havoc __ret_0_mintingFinished;
[L10669]              havoc _to_s932;
[L10670]              havoc _amount_s932;
[L10671]              havoc __ret_0_mint;
[L10672]              havoc __ret_0_finishMinting;
[L10673]              havoc _to_s1413;
[L10674]              havoc _value_s1413;
[L10675]              havoc _data_s1413;
[L10676]              havoc __ret_0_transfer_ERC223;
[L10677]              havoc __ret_0_name;
[L10678]              havoc __ret_0_symbol;
[L10679]              havoc __ret_0_decimals;
[L10680]              havoc __ret_0_INITIAL_SUPPLY;
[L10681]              havoc __ret_0_INITIAL_SALE_SUPPLY;
[L10682]              havoc __ret_0_INITIAL_UNSALE_SUPPLY;
[L10683]              havoc __ret_0_owner_wallet;
[L10684]              havoc __ret_0_unsale_owner_wallet;
[L10685]              havoc __ret_0_group_lockup;
[L10686]              havoc _sale_owner_wallet_s1076;
[L10687]              havoc _unsale_owner_wallet_s1076;
[L10688]              havoc _group_lockup_s1076;
[L10689]              havoc _to_s1162;
[L10690]              havoc _value_s1162;
[L10691]              havoc __ret_0_sendTokens;
[L10692]              havoc _from_s1567;
[L10693]              havoc _users_s1567;
[L10694]              havoc _values_s1567;
[L10695]              havoc __ret_0_batchTransfer;
[L10696]              havoc tmpNow;
[L10697]              havoc gas;
[L10698]              assume gas > 4000000 && gas <= 8000000;
[L10699]              tmpNow := now;
[L10700]              havoc now;
[L10701]              assume now > tmpNow;
[L10702]              assume msgsender_MSG != null;
[L10703]              assume DType[msgsender_MSG] != Ownable;
[L10704]              assume DType[msgsender_MSG] != SafeMath;
[L10705]              assume DType[msgsender_MSG] != GroupLockup;
[L10706]              assume DType[msgsender_MSG] != ERC20Basic;
[L10707]              assume DType[msgsender_MSG] != BasicToken;
[L10708]              assume DType[msgsender_MSG] != ERC20;
[L10709]              assume DType[msgsender_MSG] != StandardToken;
[L10710]              assume DType[msgsender_MSG] != MintableToken;
[L10711]              assume DType[msgsender_MSG] != ERC223Token;
[L10712]              assume DType[msgsender_MSG] != ERC223ContractInterface;
[L10713]              assume DType[msgsender_MSG] != DEAPCoin;
[L10714]              Alloc[msgsender_MSG] := true;
[L10715]  COND TRUE   choice == 25
[L10716]              gas := gas - 21000;
[L10717]  COND FALSE  !(gas >= 0)
[L10896]  RET         call CorralChoice_DEAPCoin(this);

[2020-11-25 13:25:33,492 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:25:33,492 INFO  L82        PathProgramCache]: Analyzing trace with hash -1926220410, now seen corresponding path program 1 times
[2020-11-25 13:25:33,494 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:25:33,516 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:25:33,745 INFO  L134       CoverageAnalysis]: Checked inductivity of 3442 backedges. 0 proven. 71 refuted. 0 times theorem prover too weak. 3371 trivial. 0 not checked.
[2020-11-25 13:25:33,745 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 13:25:33,745 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [4] total 4
[2020-11-25 13:25:33,747 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:25:33,747 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 13:25:33,747 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 13:25:33,747 INFO  L87              Difference]: Start difference. First operand 5872 states and 9282 transitions. cyclomatic complexity: 3416 Second operand 4 states.
[2020-11-25 13:25:34,207 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:25:34,208 INFO  L93              Difference]: Finished difference Result 5375 states and 5949 transitions.
[2020-11-25 13:25:34,208 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 13:25:34,208 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5375 states and 5949 transitions.
[2020-11-25 13:25:34,220 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 13:25:34,233 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5375 states to 5375 states and 5949 transitions.
[2020-11-25 13:25:34,233 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1290
[2020-11-25 13:25:34,234 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1312
[2020-11-25 13:25:34,234 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5375 states and 5949 transitions.
[2020-11-25 13:25:34,238 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:25:34,238 INFO  L728         BuchiCegarLoop]: Abstraction has 5375 states and 5949 transitions.
[2020-11-25 13:25:34,242 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5375 states and 5949 transitions.
[2020-11-25 13:25:34,281 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5375 to 5150.
[2020-11-25 13:25:34,282 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5150 states.
[2020-11-25 13:25:34,287 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5150 states to 5150 states and 5668 transitions.
[2020-11-25 13:25:34,287 INFO  L751         BuchiCegarLoop]: Abstraction has 5150 states and 5668 transitions.
[2020-11-25 13:25:34,287 INFO  L631         BuchiCegarLoop]: Abstraction has 5150 states and 5668 transitions.
[2020-11-25 13:25:34,287 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 13:25:34,287 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5150 states and 5668 transitions.
[2020-11-25 13:25:34,294 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:25:34,294 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:25:34,294 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:25:34,297 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [24, 24, 24, 24, 24, 24, 24, 24, 24, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:25:34,297 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_StandardToken0 := false;
[L3]                  call_transferFrom_StandardToken0 := false;
[L3]      CALL        call main();
[L3]                  havoc p3;
[L3]                  havoc p2;
[L3]                  havoc p1;
[L10886]              assume null == 0;
[L10887]  CALL        call this := FreshRefGenerator__success();
[L5226]               havoc newRef;
[L5227]               assume Alloc[newRef] == false;
[L5228]               Alloc[newRef] := true;
[L5229]               assume newRef != null;
[L10887]  RET         call this := FreshRefGenerator__success();
[L10888]              assume now >= 0;
[L10889]              assume DType[this] == DEAPCoin;
[L10890]              assume msgvalue_MSG == 0;
[L10891]              gas := gas - 53000;
[L10892]  CALL        call DEAPCoin_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L2858]               havoc __exception;
[L2859]               revert := false;
[L2860]   COND FALSE  !(__exception)
[L2898]   CALL        call DEAPCoin_DEAPCoin__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6652]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L6652]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6653]   COND FALSE  !(revert)
[L6656]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5953]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]   COND FALSE  !(revert)
[L5957]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5957]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6656]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6657]   COND FALSE  !(revert)
[L6660]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5824]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5825]   COND FALSE  !(revert)
[L5828]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5802]               assume msgsender_MSG != null;
[L5803]               Balance[this] := 0;
[L5804]               balances_BasicToken[this] := zeroRefintArr();
[L5805]               sum_balances2[this] := 0;
[L5806]               totalSupply__BasicToken[this] := 0;
[L5828]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5829]   COND FALSE  !(revert)
[L6660]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6661]   COND FALSE  !(revert)
[L6664]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6005]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L6005]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]   COND FALSE  !(revert)
[L6009]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5953]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]   COND FALSE  !(revert)
[L5957]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5957]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6009]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6010]   COND FALSE  !(revert)
[L6013]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5824]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5825]   COND FALSE  !(revert)
[L5828]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5802]               assume msgsender_MSG != null;
[L5803]               Balance[this] := 0;
[L5804]               balances_BasicToken[this] := zeroRefintArr();
[L5805]               sum_balances2[this] := 0;
[L5806]               totalSupply__BasicToken[this] := 0;
[L5828]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5829]   COND FALSE  !(revert)
[L6013]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]   COND FALSE  !(revert)
[L6017]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5976]               assume msgsender_MSG != null;
[L5977]               Balance[this] := 0;
[L5978]               allowed_StandardToken[this] := zeroRefRefintArr();
[L5979]               sum_allowed3[this] := 0;
[L6017]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6018]   COND FALSE  !(revert)
[L6664]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6665]   COND FALSE  !(revert)
[L6668]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5262]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5245]               assume msgsender_MSG != null;
[L5246]               Balance[this] := 0;
[L5247]               owner_Ownable[this] := null;
[L5249]               owner_Ownable[this] := msgsender_MSG;
[L5262]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5263]   COND FALSE  !(revert)
[L6668]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6669]   COND FALSE  !(revert)
[L6672]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6265]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L6265]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6266]   COND FALSE  !(revert)
[L6269]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5953]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]   COND FALSE  !(revert)
[L5957]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5957]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6269]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6270]   COND FALSE  !(revert)
[L6273]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5824]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5825]   COND FALSE  !(revert)
[L5828]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5802]               assume msgsender_MSG != null;
[L5803]               Balance[this] := 0;
[L5804]               balances_BasicToken[this] := zeroRefintArr();
[L5805]               sum_balances2[this] := 0;
[L5806]               totalSupply__BasicToken[this] := 0;
[L5828]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5829]   COND FALSE  !(revert)
[L6273]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6274]   COND FALSE  !(revert)
[L6277]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6005]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L6005]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]   COND FALSE  !(revert)
[L6009]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5953]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]   COND FALSE  !(revert)
[L5957]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5957]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6009]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6010]   COND FALSE  !(revert)
[L6013]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5824]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5825]   COND FALSE  !(revert)
[L5828]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5802]               assume msgsender_MSG != null;
[L5803]               Balance[this] := 0;
[L5804]               balances_BasicToken[this] := zeroRefintArr();
[L5805]               sum_balances2[this] := 0;
[L5806]               totalSupply__BasicToken[this] := 0;
[L5828]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5829]   COND FALSE  !(revert)
[L6013]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]   COND FALSE  !(revert)
[L6017]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5976]               assume msgsender_MSG != null;
[L5977]               Balance[this] := 0;
[L5978]               allowed_StandardToken[this] := zeroRefRefintArr();
[L5979]               sum_allowed3[this] := 0;
[L6017]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6018]   COND FALSE  !(revert)
[L6277]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6278]   COND FALSE  !(revert)
[L6281]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5262]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5245]               assume msgsender_MSG != null;
[L5246]               Balance[this] := 0;
[L5247]               owner_Ownable[this] := null;
[L5249]               owner_Ownable[this] := msgsender_MSG;
[L5262]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5263]   COND FALSE  !(revert)
[L6281]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6282]   COND FALSE  !(revert)
[L6285]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6229]               assume msgsender_MSG != null;
[L6230]               Balance[this] := 0;
[L6231]               mintingFinished_MintableToken[this] := false;
[L6285]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6286]   COND FALSE  !(revert)
[L6672]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6673]   COND FALSE  !(revert)
[L6676]   CALL        call ERC223Token_ERC223Token__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L6442]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6443]   COND FALSE  !(revert)
[L6446]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5953]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]   COND FALSE  !(revert)
[L5957]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5957]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6446]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6447]   COND FALSE  !(revert)
[L6450]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5824]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5825]   COND FALSE  !(revert)
[L5828]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5802]               assume msgsender_MSG != null;
[L5803]               Balance[this] := 0;
[L5804]               balances_BasicToken[this] := zeroRefintArr();
[L5805]               sum_balances2[this] := 0;
[L5806]               totalSupply__BasicToken[this] := 0;
[L5828]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5829]   COND FALSE  !(revert)
[L6450]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6005]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L6005]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]   COND FALSE  !(revert)
[L6009]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5953]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]   COND FALSE  !(revert)
[L5957]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5957]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6009]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6010]   COND FALSE  !(revert)
[L6013]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5824]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5825]   COND FALSE  !(revert)
[L5828]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5802]               assume msgsender_MSG != null;
[L5803]               Balance[this] := 0;
[L5804]               balances_BasicToken[this] := zeroRefintArr();
[L5805]               sum_balances2[this] := 0;
[L5806]               totalSupply__BasicToken[this] := 0;
[L5828]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5829]   COND FALSE  !(revert)
[L6013]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]   COND FALSE  !(revert)
[L6017]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5976]               assume msgsender_MSG != null;
[L5977]               Balance[this] := 0;
[L5978]               allowed_StandardToken[this] := zeroRefRefintArr();
[L5979]               sum_allowed3[this] := 0;
[L6017]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6018]   COND FALSE  !(revert)
[L6454]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L6458]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5262]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5245]               assume msgsender_MSG != null;
[L5246]               Balance[this] := 0;
[L5247]               owner_Ownable[this] := null;
[L5249]               owner_Ownable[this] := msgsender_MSG;
[L5262]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5263]   COND FALSE  !(revert)
[L6458]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6459]   COND FALSE  !(revert)
[L6462]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6265]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L6265]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6266]   COND FALSE  !(revert)
[L6269]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5953]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]   COND FALSE  !(revert)
[L5957]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5957]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6269]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6270]   COND FALSE  !(revert)
[L6273]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5824]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5825]   COND FALSE  !(revert)
[L5828]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5802]               assume msgsender_MSG != null;
[L5803]               Balance[this] := 0;
[L5804]               balances_BasicToken[this] := zeroRefintArr();
[L5805]               sum_balances2[this] := 0;
[L5806]               totalSupply__BasicToken[this] := 0;
[L5828]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5829]   COND FALSE  !(revert)
[L6273]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6274]   COND FALSE  !(revert)
[L6277]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6005]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L6005]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]   COND FALSE  !(revert)
[L6009]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5953]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]   COND FALSE  !(revert)
[L5957]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5957]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6009]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6010]   COND FALSE  !(revert)
[L6013]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5824]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5825]   COND FALSE  !(revert)
[L5828]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5802]               assume msgsender_MSG != null;
[L5803]               Balance[this] := 0;
[L5804]               balances_BasicToken[this] := zeroRefintArr();
[L5805]               sum_balances2[this] := 0;
[L5806]               totalSupply__BasicToken[this] := 0;
[L5828]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5829]   COND FALSE  !(revert)
[L6013]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]   COND FALSE  !(revert)
[L6017]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5976]               assume msgsender_MSG != null;
[L5977]               Balance[this] := 0;
[L5978]               allowed_StandardToken[this] := zeroRefRefintArr();
[L5979]               sum_allowed3[this] := 0;
[L6017]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6018]   COND FALSE  !(revert)
[L6277]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6278]   COND FALSE  !(revert)
[L6281]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5262]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5245]               assume msgsender_MSG != null;
[L5246]               Balance[this] := 0;
[L5247]               owner_Ownable[this] := null;
[L5249]               owner_Ownable[this] := msgsender_MSG;
[L5262]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5263]   COND FALSE  !(revert)
[L6281]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6282]   COND FALSE  !(revert)
[L6285]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6229]               assume msgsender_MSG != null;
[L6230]               Balance[this] := 0;
[L6231]               mintingFinished_MintableToken[this] := false;
[L6285]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6286]   COND FALSE  !(revert)
[L6462]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6463]   COND FALSE  !(revert)
[L6466]   CALL        call ERC223Token_ERC223Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6403]               assume msgsender_MSG != null;
[L6404]               Balance[this] := 0;
[L6466]   RET         call ERC223Token_ERC223Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]   COND FALSE  !(revert)
[L6676]   RET         call ERC223Token_ERC223Token__success(this, msgsender_MSG, msgvalue_MSG);
[L6677]   COND FALSE  !(revert)
[L6680]   CALL        call DEAPCoin_DEAPCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6562]               assume msgsender_MSG != null;
[L6563]               Balance[this] := 0;
[L6564]               name_DEAPCoin[this] := -635866188;
[L6565]               symbol_DEAPCoin[this] := -1031151507;
[L6566]               decimals_DEAPCoin[this] := 18;
[L6567]               __var_19 := decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6568]               INITIAL_SUPPLY_DEAPCoin[this] := 30000000000 * (nonlinearPow(10, decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6569]               __var_20 := decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6570]               INITIAL_SALE_SUPPLY_DEAPCoin[this] := 12000000000 * (nonlinearPow(10, decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6571]               INITIAL_UNSALE_SUPPLY_DEAPCoin[this] := (INITIAL_SUPPLY_DEAPCoin[this] - INITIAL_SALE_SUPPLY_DEAPCoin[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6572]               owner_wallet_DEAPCoin[this] := null;
[L6573]               unsale_owner_wallet_DEAPCoin[this] := null;
[L6575]               group_lockup_DEAPCoin[this] := _group_lockup_s1076;
[L6576]               owner_wallet_DEAPCoin[this] := _sale_owner_wallet_s1076;
[L6577]               unsale_owner_wallet_DEAPCoin[this] := _unsale_owner_wallet_s1076;
[L6578]   COND TRUE   DType[this] == DEAPCoin
[L6579]   CALL        call __var_16 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, owner_wallet_DEAPCoin[this], INITIAL_SALE_SUPPLY_DEAPCoin[this]);
[L6323]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9398]   COND TRUE   !(msgsender_MSG == owner_Ownable[this])
[L9399]               revert := true;
[L6323]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND TRUE   revert
[L6579]   RET         call __var_16 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, owner_wallet_DEAPCoin[this], INITIAL_SALE_SUPPLY_DEAPCoin[this]);
[L6580]   COND TRUE   revert
[L6680]   RET         call DEAPCoin_DEAPCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6681]   COND FALSE  !(revert)
[L2898]   RET         call DEAPCoin_DEAPCoin__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L2899]               assume !revert && gas >= 0;
[L10892]  RET         call DEAPCoin_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L10893]              assume !revert && gas >= 0;
[L10896]  CALL        call CorralChoice_DEAPCoin(this);
[L10641]              havoc msgsender_MSG;
[L10642]              havoc msgvalue_MSG;
[L10643]              havoc choice;
[L10644]              havoc __ret_0_owner;
[L10645]              havoc newOwner_s54;
[L10646]              havoc __ret_0_totalSupply;
[L10647]              havoc _owner_s578;
[L10648]              havoc __ret_0_balanceOf;
[L10649]              havoc _to_s1284;
[L10650]              havoc _value_s1284;
[L10651]              havoc __ret_0_transfer;
[L10652]              havoc _owner_s759;
[L10653]              havoc _spender_s759;
[L10654]              havoc __ret_0_allowance;
[L10655]              havoc _from_s715;
[L10656]              havoc _to_s715;
[L10657]              havoc _value_s715;
[L10658]              havoc __ret_0_transferFrom;
[L10659]              havoc _spender_s743;
[L10660]              havoc _value_s743;
[L10661]              havoc __ret_0_approve;
[L10662]              havoc _spender_s800;
[L10663]              havoc _addedValue_s800;
[L10664]              havoc __ret_0_increaseApproval;
[L10665]              havoc _spender_s860;
[L10666]              havoc _subtractedValue_s860;
[L10667]              havoc __ret_0_decreaseApproval;
[L10668]              havoc __ret_0_mintingFinished;
[L10669]              havoc _to_s932;
[L10670]              havoc _amount_s932;
[L10671]              havoc __ret_0_mint;
[L10672]              havoc __ret_0_finishMinting;
[L10673]              havoc _to_s1413;
[L10674]              havoc _value_s1413;
[L10675]              havoc _data_s1413;
[L10676]              havoc __ret_0_transfer_ERC223;
[L10677]              havoc __ret_0_name;
[L10678]              havoc __ret_0_symbol;
[L10679]              havoc __ret_0_decimals;
[L10680]              havoc __ret_0_INITIAL_SUPPLY;
[L10681]              havoc __ret_0_INITIAL_SALE_SUPPLY;
[L10682]              havoc __ret_0_INITIAL_UNSALE_SUPPLY;
[L10683]              havoc __ret_0_owner_wallet;
[L10684]              havoc __ret_0_unsale_owner_wallet;
[L10685]              havoc __ret_0_group_lockup;
[L10686]              havoc _sale_owner_wallet_s1076;
[L10687]              havoc _unsale_owner_wallet_s1076;
[L10688]              havoc _group_lockup_s1076;
[L10689]              havoc _to_s1162;
[L10690]              havoc _value_s1162;
[L10691]              havoc __ret_0_sendTokens;
[L10692]              havoc _from_s1567;
[L10693]              havoc _users_s1567;
[L10694]              havoc _values_s1567;
[L10695]              havoc __ret_0_batchTransfer;
[L10696]              havoc tmpNow;
[L10697]              havoc gas;
[L10698]              assume gas > 4000000 && gas <= 8000000;
[L10699]              tmpNow := now;
[L10700]              havoc now;
[L10701]              assume now > tmpNow;
[L10702]              assume msgsender_MSG != null;
[L10703]              assume DType[msgsender_MSG] != Ownable;
[L10704]              assume DType[msgsender_MSG] != SafeMath;
[L10705]              assume DType[msgsender_MSG] != GroupLockup;
[L10706]              assume DType[msgsender_MSG] != ERC20Basic;
[L10707]              assume DType[msgsender_MSG] != BasicToken;
[L10708]              assume DType[msgsender_MSG] != ERC20;
[L10709]              assume DType[msgsender_MSG] != StandardToken;
[L10710]              assume DType[msgsender_MSG] != MintableToken;
[L10711]              assume DType[msgsender_MSG] != ERC223Token;
[L10712]              assume DType[msgsender_MSG] != ERC223ContractInterface;
[L10713]              assume DType[msgsender_MSG] != DEAPCoin;
[L10714]              Alloc[msgsender_MSG] := true;
[L10715]  COND FALSE  !(choice == 25)
[L10721]  COND FALSE  !(choice == 24)
[L10727]  COND FALSE  !(choice == 23)
[L10733]  COND FALSE  !(choice == 22)
[L10739]  COND FALSE  !(choice == 21)
[L10746]  COND FALSE  !(choice == 20)
[L10752]  COND TRUE   choice == 19
[L10753]              gas := gas - 21000;
[L10754]  COND TRUE   gas >= 0
[L10755]              assume _value_s715 >= 0 && _value_s715 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10756]              assume msgvalue_MSG == 0;
[L10757]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s715, _to_s715, _value_s715);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != _from_s715 && p1 != _to_s715) && (p2 != _from_s715 || p3 != msgsender_MSG)) && _from_s715 != _to_s715) && _value_s715 <= balances_BasicToken[this][_from_s715]) && _value_s715 <= allowed_StandardToken[this][_from_s715][msgsender_MSG]) && balances_BasicToken[this][_to_s715] + _value_s715 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s715 >= 0) && _value_s715 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s715] >= 0) && balances_BasicToken[this][_to_s715] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s715] >= 0) && balances_BasicToken[this][_from_s715] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s715][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s715][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_StandardToken0 := true;
[L3]                  call_transferFrom_StandardToken0 := false;
[L3]                  revert := revert_hold;
[L1855]               havoc __exception;
[L1856]               revert := false;
[L1857]   COND FALSE  !(__exception)
[L1895]   CALL        call __ret_0_ := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s715, _to_s715, _value_s715);
[L6073]               __var_8 := null;
[L6074]   COND TRUE   !(_to_s715 != null)
[L6075]               revert := true;
[L1895]   RET         call __ret_0_ := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s715, _to_s715, _value_s715);
[L1896]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !(((((((((((__ret_0_ == true && balances_BasicToken[this][_from_s715] == old(balances_BasicToken[this][_from_s715]) - _value_s715) && balances_BasicToken[this][_to_s715] == old(balances_BasicToken[this][_to_s715]) + _value_s715) && allowed_StandardToken[this][_from_s715][msgsender_MSG] == old(allowed_StandardToken[this][_from_s715][msgsender_MSG]) - _value_s715) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this][p1] == old(balances_BasicToken[this][p1])) && allowed_StandardToken[this][p2][p3] == old(allowed_StandardToken[this][p2][p3])) && owner_wallet_DEAPCoin[this] == old(owner_wallet_DEAPCoin[this])) && unsale_owner_wallet_DEAPCoin[this] == old(unsale_owner_wallet_DEAPCoin[this])) && group_lockup_DEAPCoin[this] == old(group_lockup_DEAPCoin[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L3]                  revert := revert_hold;
[L10757]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s715, _to_s715, _value_s715);
[L10896]  RET         call CorralChoice_DEAPCoin(this);

Loop:
[L10896]  CALL        call CorralChoice_DEAPCoin(this);
[L10641]              havoc msgsender_MSG;
[L10642]              havoc msgvalue_MSG;
[L10643]              havoc choice;
[L10644]              havoc __ret_0_owner;
[L10645]              havoc newOwner_s54;
[L10646]              havoc __ret_0_totalSupply;
[L10647]              havoc _owner_s578;
[L10648]              havoc __ret_0_balanceOf;
[L10649]              havoc _to_s1284;
[L10650]              havoc _value_s1284;
[L10651]              havoc __ret_0_transfer;
[L10652]              havoc _owner_s759;
[L10653]              havoc _spender_s759;
[L10654]              havoc __ret_0_allowance;
[L10655]              havoc _from_s715;
[L10656]              havoc _to_s715;
[L10657]              havoc _value_s715;
[L10658]              havoc __ret_0_transferFrom;
[L10659]              havoc _spender_s743;
[L10660]              havoc _value_s743;
[L10661]              havoc __ret_0_approve;
[L10662]              havoc _spender_s800;
[L10663]              havoc _addedValue_s800;
[L10664]              havoc __ret_0_increaseApproval;
[L10665]              havoc _spender_s860;
[L10666]              havoc _subtractedValue_s860;
[L10667]              havoc __ret_0_decreaseApproval;
[L10668]              havoc __ret_0_mintingFinished;
[L10669]              havoc _to_s932;
[L10670]              havoc _amount_s932;
[L10671]              havoc __ret_0_mint;
[L10672]              havoc __ret_0_finishMinting;
[L10673]              havoc _to_s1413;
[L10674]              havoc _value_s1413;
[L10675]              havoc _data_s1413;
[L10676]              havoc __ret_0_transfer_ERC223;
[L10677]              havoc __ret_0_name;
[L10678]              havoc __ret_0_symbol;
[L10679]              havoc __ret_0_decimals;
[L10680]              havoc __ret_0_INITIAL_SUPPLY;
[L10681]              havoc __ret_0_INITIAL_SALE_SUPPLY;
[L10682]              havoc __ret_0_INITIAL_UNSALE_SUPPLY;
[L10683]              havoc __ret_0_owner_wallet;
[L10684]              havoc __ret_0_unsale_owner_wallet;
[L10685]              havoc __ret_0_group_lockup;
[L10686]              havoc _sale_owner_wallet_s1076;
[L10687]              havoc _unsale_owner_wallet_s1076;
[L10688]              havoc _group_lockup_s1076;
[L10689]              havoc _to_s1162;
[L10690]              havoc _value_s1162;
[L10691]              havoc __ret_0_sendTokens;
[L10692]              havoc _from_s1567;
[L10693]              havoc _users_s1567;
[L10694]              havoc _values_s1567;
[L10695]              havoc __ret_0_batchTransfer;
[L10696]              havoc tmpNow;
[L10697]              havoc gas;
[L10698]              assume gas > 4000000 && gas <= 8000000;
[L10699]              tmpNow := now;
[L10700]              havoc now;
[L10701]              assume now > tmpNow;
[L10702]              assume msgsender_MSG != null;
[L10703]              assume DType[msgsender_MSG] != Ownable;
[L10704]              assume DType[msgsender_MSG] != SafeMath;
[L10705]              assume DType[msgsender_MSG] != GroupLockup;
[L10706]              assume DType[msgsender_MSG] != ERC20Basic;
[L10707]              assume DType[msgsender_MSG] != BasicToken;
[L10708]              assume DType[msgsender_MSG] != ERC20;
[L10709]              assume DType[msgsender_MSG] != StandardToken;
[L10710]              assume DType[msgsender_MSG] != MintableToken;
[L10711]              assume DType[msgsender_MSG] != ERC223Token;
[L10712]              assume DType[msgsender_MSG] != ERC223ContractInterface;
[L10713]              assume DType[msgsender_MSG] != DEAPCoin;
[L10714]              Alloc[msgsender_MSG] := true;
[L10715]  COND FALSE  !(choice == 25)
[L10721]  COND FALSE  !(choice == 24)
[L10727]  COND FALSE  !(choice == 23)
[L10733]  COND FALSE  !(choice == 22)
[L10739]  COND FALSE  !(choice == 21)
[L10746]  COND FALSE  !(choice == 20)
[L10752]  COND TRUE   choice == 19
[L10753]              gas := gas - 21000;
[L10754]  COND TRUE   gas >= 0
[L10755]              assume _value_s715 >= 0 && _value_s715 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10756]              assume msgvalue_MSG == 0;
[L10757]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s715, _to_s715, _value_s715);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != _from_s715 && p1 != _to_s715) && (p2 != _from_s715 || p3 != msgsender_MSG)) && _from_s715 != _to_s715) && _value_s715 <= balances_BasicToken[this][_from_s715]) && _value_s715 <= allowed_StandardToken[this][_from_s715][msgsender_MSG]) && balances_BasicToken[this][_to_s715] + _value_s715 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s715 >= 0) && _value_s715 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s715] >= 0) && balances_BasicToken[this][_to_s715] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s715] >= 0) && balances_BasicToken[this][_from_s715] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s715][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s715][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_StandardToken0 := true;
[L3]                  call_transferFrom_StandardToken0 := false;
[L3]                  revert := revert_hold;
[L1855]               havoc __exception;
[L1856]               revert := false;
[L1857]   COND FALSE  !(__exception)
[L1895]   CALL        call __ret_0_ := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s715, _to_s715, _value_s715);
[L6073]               __var_8 := null;
[L6074]   COND TRUE   !(_to_s715 != null)
[L6075]               revert := true;
[L1895]   RET         call __ret_0_ := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s715, _to_s715, _value_s715);
[L1896]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !(((((((((((__ret_0_ == true && balances_BasicToken[this][_from_s715] == old(balances_BasicToken[this][_from_s715]) - _value_s715) && balances_BasicToken[this][_to_s715] == old(balances_BasicToken[this][_to_s715]) + _value_s715) && allowed_StandardToken[this][_from_s715][msgsender_MSG] == old(allowed_StandardToken[this][_from_s715][msgsender_MSG]) - _value_s715) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this][p1] == old(balances_BasicToken[this][p1])) && allowed_StandardToken[this][p2][p3] == old(allowed_StandardToken[this][p2][p3])) && owner_wallet_DEAPCoin[this] == old(owner_wallet_DEAPCoin[this])) && unsale_owner_wallet_DEAPCoin[this] == old(unsale_owner_wallet_DEAPCoin[this])) && group_lockup_DEAPCoin[this] == old(group_lockup_DEAPCoin[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L3]                  revert := revert_hold;
[L10757]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s715, _to_s715, _value_s715);
[L10896]  RET         call CorralChoice_DEAPCoin(this);

[2020-11-25 13:25:34,304 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:25:34,304 INFO  L82        PathProgramCache]: Analyzing trace with hash -456478335, now seen corresponding path program 1 times
[2020-11-25 13:25:34,305 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:25:34,331 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:25:34,598 INFO  L134       CoverageAnalysis]: Checked inductivity of 3875 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 3875 trivial. 0 not checked.
[2020-11-25 13:25:34,598 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:25:34,599 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 13:25:34,599 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:25:34,599 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 13:25:34,599 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 13:25:34,600 INFO  L87              Difference]: Start difference. First operand 5150 states and 5668 transitions. cyclomatic complexity: 524 Second operand 3 states.
[2020-11-25 13:25:34,661 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:25:34,661 INFO  L93              Difference]: Finished difference Result 5879 states and 6525 transitions.
[2020-11-25 13:25:34,661 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 13:25:34,661 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5879 states and 6525 transitions.
[2020-11-25 13:25:34,672 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 13:25:34,686 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5879 states to 5715 states and 6331 transitions.
[2020-11-25 13:25:34,686 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1372
[2020-11-25 13:25:34,687 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1388
[2020-11-25 13:25:34,687 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5715 states and 6331 transitions.
[2020-11-25 13:25:34,691 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:25:34,691 INFO  L728         BuchiCegarLoop]: Abstraction has 5715 states and 6331 transitions.
[2020-11-25 13:25:34,697 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5715 states and 6331 transitions.
[2020-11-25 13:25:34,730 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5715 to 5009.
[2020-11-25 13:25:34,730 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5009 states.
[2020-11-25 13:25:34,734 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5009 states to 5009 states and 5443 transitions.
[2020-11-25 13:25:34,735 INFO  L751         BuchiCegarLoop]: Abstraction has 5009 states and 5443 transitions.
[2020-11-25 13:25:34,735 INFO  L631         BuchiCegarLoop]: Abstraction has 5009 states and 5443 transitions.
[2020-11-25 13:25:34,735 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 13:25:34,735 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5009 states and 5443 transitions.
[2020-11-25 13:25:34,740 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:25:34,740 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:25:34,740 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:25:34,744 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [24, 24, 24, 24, 24, 24, 24, 24, 24, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:25:34,744 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_StandardToken0 := false;
[L3]                  call_transferFrom_StandardToken0 := false;
[L3]      CALL        call main();
[L3]                  havoc p3;
[L3]                  havoc p2;
[L3]                  havoc p1;
[L10886]              assume null == 0;
[L10887]  CALL        call this := FreshRefGenerator__success();
[L5226]               havoc newRef;
[L5227]               assume Alloc[newRef] == false;
[L5228]               Alloc[newRef] := true;
[L5229]               assume newRef != null;
[L10887]  RET         call this := FreshRefGenerator__success();
[L10888]              assume now >= 0;
[L10889]              assume DType[this] == DEAPCoin;
[L10890]              assume msgvalue_MSG == 0;
[L10891]              gas := gas - 53000;
[L10892]  CALL        call DEAPCoin_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L2858]               havoc __exception;
[L2859]               revert := false;
[L2860]   COND TRUE   __exception
[L2861]               __tmp__Balance := Balance;
[L2862]               __tmp__DType := DType;
[L2863]               __tmp__Alloc := Alloc;
[L2864]               __tmp__balance_ADDR := balance_ADDR;
[L2865]               __tmp__M_Ref_int := M_Ref_int;
[L2866]               __tmp__sum_lockup_list0 := sum_lockup_list0;
[L2867]               __tmp__M_int_bool := M_int_bool;
[L2868]               __tmp__sum_lockup_list_flag1 := sum_lockup_list_flag1;
[L2869]               __tmp__sum_balances2 := sum_balances2;
[L2870]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L2871]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2872]               __tmp__sum_allowed3 := sum_allowed3;
[L2873]               __tmp__M_int_Ref := M_int_Ref;
[L2874]               __tmp__sum := sum;
[L2875]               __tmp__M_int_int := M_int_int;
[L2876]               __tmp__Length := Length;
[L2877]               __tmp__now := now;
[L2878]               __tmp__owner_Ownable := owner_Ownable;
[L2879]               __tmp__lockup_list_GroupLockup := lockup_list_GroupLockup;
[L2880]               __tmp__lockup_list_flag_GroupLockup := lockup_list_flag_GroupLockup;
[L2881]               __tmp__user_list_GroupLockup := user_list_GroupLockup;
[L2882]               __tmp__balances_BasicToken := balances_BasicToken;
[L2883]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L2884]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L2885]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L2886]               __tmp__name_DEAPCoin := name_DEAPCoin;
[L2887]               __tmp__symbol_DEAPCoin := symbol_DEAPCoin;
[L2888]               __tmp__decimals_DEAPCoin := decimals_DEAPCoin;
[L2889]               __tmp__INITIAL_SUPPLY_DEAPCoin := INITIAL_SUPPLY_DEAPCoin;
[L2890]               __tmp__INITIAL_SALE_SUPPLY_DEAPCoin := INITIAL_SALE_SUPPLY_DEAPCoin;
[L2891]               __tmp__INITIAL_UNSALE_SUPPLY_DEAPCoin := INITIAL_UNSALE_SUPPLY_DEAPCoin;
[L2892]               __tmp__owner_wallet_DEAPCoin := owner_wallet_DEAPCoin;
[L2893]               __tmp__unsale_owner_wallet_DEAPCoin := unsale_owner_wallet_DEAPCoin;
[L2894]               __tmp__group_lockup_DEAPCoin := group_lockup_DEAPCoin;
[L2895]   CALL        call DEAPCoin_DEAPCoin__fail(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6611]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5759]               assume msgsender_MSG != null;
[L5760]               __tmp__Balance[this] := 0;
[L5774]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5775]   COND FALSE  !(revert)
[L6611]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6612]   COND FALSE  !(revert)
[L6615]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5941]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5759]               assume msgsender_MSG != null;
[L5760]               __tmp__Balance[this] := 0;
[L5774]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5775]   COND FALSE  !(revert)
[L5941]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5942]   COND FALSE  !(revert)
[L5945]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5926]               assume msgsender_MSG != null;
[L5927]               __tmp__Balance[this] := 0;
[L5945]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5946]   COND FALSE  !(revert)
[L6615]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6616]   COND FALSE  !(revert)
[L6619]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5812]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5759]               assume msgsender_MSG != null;
[L5760]               __tmp__Balance[this] := 0;
[L5774]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5775]   COND FALSE  !(revert)
[L5812]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5813]   COND FALSE  !(revert)
[L5816]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5791]               assume msgsender_MSG != null;
[L5792]               __tmp__Balance[this] := 0;
[L5793]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L5794]               __tmp__sum_balances2[this] := 0;
[L5795]               __tmp__totalSupply__BasicToken[this] := 0;
[L5816]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5817]   COND FALSE  !(revert)
[L6619]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6620]   COND FALSE  !(revert)
[L6623]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5985]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5759]               assume msgsender_MSG != null;
[L5760]               __tmp__Balance[this] := 0;
[L5774]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5775]   COND FALSE  !(revert)
[L5985]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5986]   COND FALSE  !(revert)
[L5989]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5941]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5759]               assume msgsender_MSG != null;
[L5760]               __tmp__Balance[this] := 0;
[L5774]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5775]   COND FALSE  !(revert)
[L5941]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5942]   COND FALSE  !(revert)
[L5945]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5926]               assume msgsender_MSG != null;
[L5927]               __tmp__Balance[this] := 0;
[L5945]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5946]   COND FALSE  !(revert)
[L5989]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5990]   COND FALSE  !(revert)
[L5993]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5812]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5759]               assume msgsender_MSG != null;
[L5760]               __tmp__Balance[this] := 0;
[L5774]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5775]   COND FALSE  !(revert)
[L5812]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5813]   COND FALSE  !(revert)
[L5816]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5791]               assume msgsender_MSG != null;
[L5792]               __tmp__Balance[this] := 0;
[L5793]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L5794]               __tmp__sum_balances2[this] := 0;
[L5795]               __tmp__totalSupply__BasicToken[this] := 0;
[L5816]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5817]   COND FALSE  !(revert)
[L5993]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5994]   COND FALSE  !(revert)
[L5997]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5966]               assume msgsender_MSG != null;
[L5967]               __tmp__Balance[this] := 0;
[L5968]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L5969]               __tmp__sum_allowed3[this] := 0;
[L5997]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5998]   COND FALSE  !(revert)
[L6623]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6624]   COND FALSE  !(revert)
[L6627]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5254]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5235]               assume msgsender_MSG != null;
[L5236]               __tmp__Balance[this] := 0;
[L5237]               __tmp__owner_Ownable[this] := null;
[L5239]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5254]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5255]   COND FALSE  !(revert)
[L6627]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6628]   COND FALSE  !(revert)
[L6631]   CALL        call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6237]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5759]               assume msgsender_MSG != null;
[L5760]               __tmp__Balance[this] := 0;
[L5774]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5775]   COND FALSE  !(revert)
[L6237]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6238]   COND FALSE  !(revert)
[L6241]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5941]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5759]               assume msgsender_MSG != null;
[L5760]               __tmp__Balance[this] := 0;
[L5774]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5775]   COND FALSE  !(revert)
[L5941]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5942]   COND FALSE  !(revert)
[L5945]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5926]               assume msgsender_MSG != null;
[L5927]               __tmp__Balance[this] := 0;
[L5945]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5946]   COND FALSE  !(revert)
[L6241]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6242]   COND FALSE  !(revert)
[L6245]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5812]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5759]               assume msgsender_MSG != null;
[L5760]               __tmp__Balance[this] := 0;
[L5774]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5775]   COND FALSE  !(revert)
[L5812]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5813]   COND FALSE  !(revert)
[L5816]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5791]               assume msgsender_MSG != null;
[L5792]               __tmp__Balance[this] := 0;
[L5793]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L5794]               __tmp__sum_balances2[this] := 0;
[L5795]               __tmp__totalSupply__BasicToken[this] := 0;
[L5816]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5817]   COND FALSE  !(revert)
[L6245]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6246]   COND FALSE  !(revert)
[L6249]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5985]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5759]               assume msgsender_MSG != null;
[L5760]               __tmp__Balance[this] := 0;
[L5774]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5775]   COND FALSE  !(revert)
[L5985]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5986]   COND FALSE  !(revert)
[L5989]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5941]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5759]               assume msgsender_MSG != null;
[L5760]               __tmp__Balance[this] := 0;
[L5774]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5775]   COND FALSE  !(revert)
[L5941]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5942]   COND FALSE  !(revert)
[L5945]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5926]               assume msgsender_MSG != null;
[L5927]               __tmp__Balance[this] := 0;
[L5945]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5946]   COND FALSE  !(revert)
[L5989]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5990]   COND FALSE  !(revert)
[L5993]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5812]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5759]               assume msgsender_MSG != null;
[L5760]               __tmp__Balance[this] := 0;
[L5774]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5775]   COND FALSE  !(revert)
[L5812]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5813]   COND FALSE  !(revert)
[L5816]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5791]               assume msgsender_MSG != null;
[L5792]               __tmp__Balance[this] := 0;
[L5793]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L5794]               __tmp__sum_balances2[this] := 0;
[L5795]               __tmp__totalSupply__BasicToken[this] := 0;
[L5816]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5817]   COND FALSE  !(revert)
[L5993]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5994]   COND FALSE  !(revert)
[L5997]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5966]               assume msgsender_MSG != null;
[L5967]               __tmp__Balance[this] := 0;
[L5968]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L5969]               __tmp__sum_allowed3[this] := 0;
[L5997]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5998]   COND FALSE  !(revert)
[L6249]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6250]   COND FALSE  !(revert)
[L6253]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5254]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5235]               assume msgsender_MSG != null;
[L5236]               __tmp__Balance[this] := 0;
[L5237]               __tmp__owner_Ownable[this] := null;
[L5239]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5254]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5255]   COND FALSE  !(revert)
[L6253]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6254]   COND FALSE  !(revert)
[L6257]   CALL        call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6220]               assume msgsender_MSG != null;
[L6221]               __tmp__Balance[this] := 0;
[L6222]               __tmp__mintingFinished_MintableToken[this] := false;
[L6257]   RET         call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6258]   COND FALSE  !(revert)
[L6631]   RET         call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6632]   COND FALSE  !(revert)
[L6635]   CALL        call ERC223Token_ERC223Token__fail(this, msgsender_MSG, msgvalue_MSG);
[L6410]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5759]               assume msgsender_MSG != null;
[L5760]               __tmp__Balance[this] := 0;
[L5774]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5775]   COND FALSE  !(revert)
[L6410]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6411]   COND FALSE  !(revert)
[L6414]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5941]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5759]               assume msgsender_MSG != null;
[L5760]               __tmp__Balance[this] := 0;
[L5774]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5775]   COND FALSE  !(revert)
[L5941]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5942]   COND FALSE  !(revert)
[L5945]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5926]               assume msgsender_MSG != null;
[L5927]               __tmp__Balance[this] := 0;
[L5945]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5946]   COND FALSE  !(revert)
[L6414]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6415]   COND FALSE  !(revert)
[L6418]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5812]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5759]               assume msgsender_MSG != null;
[L5760]               __tmp__Balance[this] := 0;
[L5774]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5775]   COND FALSE  !(revert)
[L5812]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5813]   COND FALSE  !(revert)
[L5816]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5791]               assume msgsender_MSG != null;
[L5792]               __tmp__Balance[this] := 0;
[L5793]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L5794]               __tmp__sum_balances2[this] := 0;
[L5795]               __tmp__totalSupply__BasicToken[this] := 0;
[L5816]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5817]   COND FALSE  !(revert)
[L6418]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6419]   COND FALSE  !(revert)
[L6422]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5985]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5759]               assume msgsender_MSG != null;
[L5760]               __tmp__Balance[this] := 0;
[L5774]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5775]   COND FALSE  !(revert)
[L5985]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5986]   COND FALSE  !(revert)
[L5989]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5941]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5759]               assume msgsender_MSG != null;
[L5760]               __tmp__Balance[this] := 0;
[L5774]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5775]   COND FALSE  !(revert)
[L5941]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5942]   COND FALSE  !(revert)
[L5945]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5926]               assume msgsender_MSG != null;
[L5927]               __tmp__Balance[this] := 0;
[L5945]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5946]   COND FALSE  !(revert)
[L5989]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5990]   COND FALSE  !(revert)
[L5993]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5812]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5759]               assume msgsender_MSG != null;
[L5760]               __tmp__Balance[this] := 0;
[L5774]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5775]   COND FALSE  !(revert)
[L5812]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5813]   COND FALSE  !(revert)
[L5816]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5791]               assume msgsender_MSG != null;
[L5792]               __tmp__Balance[this] := 0;
[L5793]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L5794]               __tmp__sum_balances2[this] := 0;
[L5795]               __tmp__totalSupply__BasicToken[this] := 0;
[L5816]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5817]   COND FALSE  !(revert)
[L5993]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5994]   COND FALSE  !(revert)
[L5997]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5966]               assume msgsender_MSG != null;
[L5967]               __tmp__Balance[this] := 0;
[L5968]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L5969]               __tmp__sum_allowed3[this] := 0;
[L5997]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5998]   COND FALSE  !(revert)
[L6422]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6423]   COND FALSE  !(revert)
[L6426]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5254]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5235]               assume msgsender_MSG != null;
[L5236]               __tmp__Balance[this] := 0;
[L5237]               __tmp__owner_Ownable[this] := null;
[L5239]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5254]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5255]   COND FALSE  !(revert)
[L6426]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6427]   COND FALSE  !(revert)
[L6430]   CALL        call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6237]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5759]               assume msgsender_MSG != null;
[L5760]               __tmp__Balance[this] := 0;
[L5774]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5775]   COND FALSE  !(revert)
[L6237]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6238]   COND FALSE  !(revert)
[L6241]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5941]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5759]               assume msgsender_MSG != null;
[L5760]               __tmp__Balance[this] := 0;
[L5774]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5775]   COND FALSE  !(revert)
[L5941]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5942]   COND FALSE  !(revert)
[L5945]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5926]               assume msgsender_MSG != null;
[L5927]               __tmp__Balance[this] := 0;
[L5945]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5946]   COND FALSE  !(revert)
[L6241]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6242]   COND FALSE  !(revert)
[L6245]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5812]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5759]               assume msgsender_MSG != null;
[L5760]               __tmp__Balance[this] := 0;
[L5774]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5775]   COND FALSE  !(revert)
[L5812]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5813]   COND FALSE  !(revert)
[L5816]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5791]               assume msgsender_MSG != null;
[L5792]               __tmp__Balance[this] := 0;
[L5793]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L5794]               __tmp__sum_balances2[this] := 0;
[L5795]               __tmp__totalSupply__BasicToken[this] := 0;
[L5816]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5817]   COND FALSE  !(revert)
[L6245]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6246]   COND FALSE  !(revert)
[L6249]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5985]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5759]               assume msgsender_MSG != null;
[L5760]               __tmp__Balance[this] := 0;
[L5774]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5775]   COND FALSE  !(revert)
[L5985]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5986]   COND FALSE  !(revert)
[L5989]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5941]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5759]               assume msgsender_MSG != null;
[L5760]               __tmp__Balance[this] := 0;
[L5774]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5775]   COND FALSE  !(revert)
[L5941]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5942]   COND FALSE  !(revert)
[L5945]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5926]               assume msgsender_MSG != null;
[L5927]               __tmp__Balance[this] := 0;
[L5945]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5946]   COND FALSE  !(revert)
[L5989]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5990]   COND FALSE  !(revert)
[L5993]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5812]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5759]               assume msgsender_MSG != null;
[L5760]               __tmp__Balance[this] := 0;
[L5774]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5775]   COND FALSE  !(revert)
[L5812]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5813]   COND FALSE  !(revert)
[L5816]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5791]               assume msgsender_MSG != null;
[L5792]               __tmp__Balance[this] := 0;
[L5793]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L5794]               __tmp__sum_balances2[this] := 0;
[L5795]               __tmp__totalSupply__BasicToken[this] := 0;
[L5816]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5817]   COND FALSE  !(revert)
[L5993]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5994]   COND FALSE  !(revert)
[L5997]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5966]               assume msgsender_MSG != null;
[L5967]               __tmp__Balance[this] := 0;
[L5968]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L5969]               __tmp__sum_allowed3[this] := 0;
[L5997]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5998]   COND FALSE  !(revert)
[L6249]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6250]   COND FALSE  !(revert)
[L6253]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5254]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5235]               assume msgsender_MSG != null;
[L5236]               __tmp__Balance[this] := 0;
[L5237]               __tmp__owner_Ownable[this] := null;
[L5239]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5254]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5255]   COND FALSE  !(revert)
[L6253]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6254]   COND FALSE  !(revert)
[L6257]   CALL        call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6220]               assume msgsender_MSG != null;
[L6221]               __tmp__Balance[this] := 0;
[L6222]               __tmp__mintingFinished_MintableToken[this] := false;
[L6257]   RET         call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6258]   COND FALSE  !(revert)
[L6430]   RET         call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND FALSE  !(revert)
[L6434]   CALL        call ERC223Token_ERC223Token_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6395]               assume msgsender_MSG != null;
[L6396]               __tmp__Balance[this] := 0;
[L6434]   RET         call ERC223Token_ERC223Token_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6435]   COND FALSE  !(revert)
[L6635]   RET         call ERC223Token_ERC223Token__fail(this, msgsender_MSG, msgvalue_MSG);
[L6636]   COND FALSE  !(revert)
[L6639]   CALL        call DEAPCoin_DEAPCoin_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6512]               assume msgsender_MSG != null;
[L6513]               __tmp__Balance[this] := 0;
[L6514]               __tmp__name_DEAPCoin[this] := -635866188;
[L6515]               __tmp__symbol_DEAPCoin[this] := -1031151507;
[L6516]               __tmp__decimals_DEAPCoin[this] := 18;
[L6517]               __var_19 := __tmp__decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6518]               __tmp__INITIAL_SUPPLY_DEAPCoin[this] := 30000000000 * (nonlinearPow(10, __tmp__decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6519]               __var_20 := __tmp__decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6520]               __tmp__INITIAL_SALE_SUPPLY_DEAPCoin[this] := 12000000000 * (nonlinearPow(10, __tmp__decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6521]               __tmp__INITIAL_UNSALE_SUPPLY_DEAPCoin[this] := (__tmp__INITIAL_SUPPLY_DEAPCoin[this] - __tmp__INITIAL_SALE_SUPPLY_DEAPCoin[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6522]               __tmp__owner_wallet_DEAPCoin[this] := null;
[L6523]               __tmp__unsale_owner_wallet_DEAPCoin[this] := null;
[L6525]               __tmp__group_lockup_DEAPCoin[this] := _group_lockup_s1076;
[L6526]               __tmp__owner_wallet_DEAPCoin[this] := _sale_owner_wallet_s1076;
[L6527]               __tmp__unsale_owner_wallet_DEAPCoin[this] := _unsale_owner_wallet_s1076;
[L6528]   COND TRUE   __tmp__DType[this] == DEAPCoin
[L6529]   CALL        call __var_16 := mint~address~uint256_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__owner_wallet_DEAPCoin[this], __tmp__INITIAL_SALE_SUPPLY_DEAPCoin[this]);
[L6295]   CALL        call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9390]   COND FALSE  !(!(msgsender_MSG == __tmp__owner_Ownable[this]))
[L6295]   RET         call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6296]   COND FALSE  !(revert)
[L6299]   CALL        call canMint_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9406]   COND FALSE  !(!!__tmp__mintingFinished_MintableToken[this])
[L6299]   RET         call canMint_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6300]   COND FALSE  !(revert)
[L6303]   CALL        call __var_14 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__totalSupply__BasicToken[this], _amount_s932);
[L5393]               c_s146 := (a_s146 + b_s146) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5394]               c_s146 := c_s146;
[L6303]   RET         call __var_14 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__totalSupply__BasicToken[this], _amount_s932);
[L6304]   COND FALSE  !(revert)
[L6307]               __tmp__totalSupply__BasicToken[this] := __var_14;
[L6308]   CALL        call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_BasicToken[this][_to_s932], _amount_s932);
[L5393]               c_s146 := (a_s146 + b_s146) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5394]               c_s146 := c_s146;
[L6308]   RET         call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_BasicToken[this][_to_s932], _amount_s932);
[L6309]   COND FALSE  !(revert)
[L6312]               __tmp__sum_balances2[this] := __tmp__sum_balances2[this] - __tmp__balances_BasicToken[this][_to_s932];
[L6313]               __tmp__balances_BasicToken[this][_to_s932] := __var_15;
[L6314]               __tmp__sum_balances2[this] := __tmp__sum_balances2[this] + __tmp__balances_BasicToken[this][_to_s932];
[L6315]               __ret_0_ := true;
[L6529]   RET         call __var_16 := mint~address~uint256_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__owner_wallet_DEAPCoin[this], __tmp__INITIAL_SALE_SUPPLY_DEAPCoin[this]);
[L6530]   COND FALSE  !(revert)
[L6536]   COND TRUE   __tmp__DType[this] == DEAPCoin
[L6537]   CALL        call __var_17 := mint~address~uint256_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__unsale_owner_wallet_DEAPCoin[this], __tmp__INITIAL_UNSALE_SUPPLY_DEAPCoin[this]);
[L6295]   CALL        call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9390]   COND FALSE  !(!(msgsender_MSG == __tmp__owner_Ownable[this]))
[L6295]   RET         call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6296]   COND FALSE  !(revert)
[L6299]   CALL        call canMint_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9406]   COND FALSE  !(!!__tmp__mintingFinished_MintableToken[this])
[L6299]   RET         call canMint_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6300]   COND FALSE  !(revert)
[L6303]   CALL        call __var_14 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__totalSupply__BasicToken[this], _amount_s932);
[L5393]               c_s146 := (a_s146 + b_s146) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5394]               c_s146 := c_s146;
[L6303]   RET         call __var_14 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__totalSupply__BasicToken[this], _amount_s932);
[L6304]   COND FALSE  !(revert)
[L6307]               __tmp__totalSupply__BasicToken[this] := __var_14;
[L6308]   CALL        call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_BasicToken[this][_to_s932], _amount_s932);
[L5393]               c_s146 := (a_s146 + b_s146) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5394]               c_s146 := c_s146;
[L6308]   RET         call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_BasicToken[this][_to_s932], _amount_s932);
[L6309]   COND FALSE  !(revert)
[L6312]               __tmp__sum_balances2[this] := __tmp__sum_balances2[this] - __tmp__balances_BasicToken[this][_to_s932];
[L6313]               __tmp__balances_BasicToken[this][_to_s932] := __var_15;
[L6314]               __tmp__sum_balances2[this] := __tmp__sum_balances2[this] + __tmp__balances_BasicToken[this][_to_s932];
[L6315]               __ret_0_ := true;
[L6537]   RET         call __var_17 := mint~address~uint256_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__unsale_owner_wallet_DEAPCoin[this], __tmp__INITIAL_UNSALE_SUPPLY_DEAPCoin[this]);
[L6538]   COND FALSE  !(revert)
[L6544]   COND TRUE   __tmp__DType[this] == DEAPCoin
[L6545]   CALL        call __var_18 := finishMinting_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6351]   CALL        call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9390]   COND FALSE  !(!(msgsender_MSG == __tmp__owner_Ownable[this]))
[L6351]   RET         call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6352]   COND FALSE  !(revert)
[L6355]   CALL        call canMint_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9406]   COND FALSE  !(!!__tmp__mintingFinished_MintableToken[this])
[L6355]   RET         call canMint_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6356]   COND FALSE  !(revert)
[L6359]               __tmp__mintingFinished_MintableToken[this] := true;
[L6360]               __ret_0_ := true;
[L6545]   RET         call __var_18 := finishMinting_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6546]   COND FALSE  !(revert)
[L6639]   RET         call DEAPCoin_DEAPCoin_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6640]   COND FALSE  !(revert)
[L2895]   RET         call DEAPCoin_DEAPCoin__fail(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L2896]               assume revert || gas < 0;
[L10892]  RET         call DEAPCoin_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L10893]              assume !revert && gas >= 0;
[L10896]  CALL        call CorralChoice_DEAPCoin(this);
[L10641]              havoc msgsender_MSG;
[L10642]              havoc msgvalue_MSG;
[L10643]              havoc choice;
[L10644]              havoc __ret_0_owner;
[L10645]              havoc newOwner_s54;
[L10646]              havoc __ret_0_totalSupply;
[L10647]              havoc _owner_s578;
[L10648]              havoc __ret_0_balanceOf;
[L10649]              havoc _to_s1284;
[L10650]              havoc _value_s1284;
[L10651]              havoc __ret_0_transfer;
[L10652]              havoc _owner_s759;
[L10653]              havoc _spender_s759;
[L10654]              havoc __ret_0_allowance;
[L10655]              havoc _from_s715;
[L10656]              havoc _to_s715;
[L10657]              havoc _value_s715;
[L10658]              havoc __ret_0_transferFrom;
[L10659]              havoc _spender_s743;
[L10660]              havoc _value_s743;
[L10661]              havoc __ret_0_approve;
[L10662]              havoc _spender_s800;
[L10663]              havoc _addedValue_s800;
[L10664]              havoc __ret_0_increaseApproval;
[L10665]              havoc _spender_s860;
[L10666]              havoc _subtractedValue_s860;
[L10667]              havoc __ret_0_decreaseApproval;
[L10668]              havoc __ret_0_mintingFinished;
[L10669]              havoc _to_s932;
[L10670]              havoc _amount_s932;
[L10671]              havoc __ret_0_mint;
[L10672]              havoc __ret_0_finishMinting;
[L10673]              havoc _to_s1413;
[L10674]              havoc _value_s1413;
[L10675]              havoc _data_s1413;
[L10676]              havoc __ret_0_transfer_ERC223;
[L10677]              havoc __ret_0_name;
[L10678]              havoc __ret_0_symbol;
[L10679]              havoc __ret_0_decimals;
[L10680]              havoc __ret_0_INITIAL_SUPPLY;
[L10681]              havoc __ret_0_INITIAL_SALE_SUPPLY;
[L10682]              havoc __ret_0_INITIAL_UNSALE_SUPPLY;
[L10683]              havoc __ret_0_owner_wallet;
[L10684]              havoc __ret_0_unsale_owner_wallet;
[L10685]              havoc __ret_0_group_lockup;
[L10686]              havoc _sale_owner_wallet_s1076;
[L10687]              havoc _unsale_owner_wallet_s1076;
[L10688]              havoc _group_lockup_s1076;
[L10689]              havoc _to_s1162;
[L10690]              havoc _value_s1162;
[L10691]              havoc __ret_0_sendTokens;
[L10692]              havoc _from_s1567;
[L10693]              havoc _users_s1567;
[L10694]              havoc _values_s1567;
[L10695]              havoc __ret_0_batchTransfer;
[L10696]              havoc tmpNow;
[L10697]              havoc gas;
[L10698]              assume gas > 4000000 && gas <= 8000000;
[L10699]              tmpNow := now;
[L10700]              havoc now;
[L10701]              assume now > tmpNow;
[L10702]              assume msgsender_MSG != null;
[L10703]              assume DType[msgsender_MSG] != Ownable;
[L10704]              assume DType[msgsender_MSG] != SafeMath;
[L10705]              assume DType[msgsender_MSG] != GroupLockup;
[L10706]              assume DType[msgsender_MSG] != ERC20Basic;
[L10707]              assume DType[msgsender_MSG] != BasicToken;
[L10708]              assume DType[msgsender_MSG] != ERC20;
[L10709]              assume DType[msgsender_MSG] != StandardToken;
[L10710]              assume DType[msgsender_MSG] != MintableToken;
[L10711]              assume DType[msgsender_MSG] != ERC223Token;
[L10712]              assume DType[msgsender_MSG] != ERC223ContractInterface;
[L10713]              assume DType[msgsender_MSG] != DEAPCoin;
[L10714]              Alloc[msgsender_MSG] := true;
[L10715]  COND FALSE  !(choice == 25)
[L10721]  COND FALSE  !(choice == 24)
[L10727]  COND FALSE  !(choice == 23)
[L10733]  COND FALSE  !(choice == 22)
[L10739]  COND FALSE  !(choice == 21)
[L10746]  COND FALSE  !(choice == 20)
[L10752]  COND TRUE   choice == 19
[L10753]              gas := gas - 21000;
[L10754]  COND TRUE   gas >= 0
[L10755]              assume _value_s715 >= 0 && _value_s715 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10756]              assume msgvalue_MSG == 0;
[L10757]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s715, _to_s715, _value_s715);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != _from_s715 && p1 != _to_s715) && (p2 != _from_s715 || p3 != msgsender_MSG)) && _from_s715 != _to_s715) && _value_s715 <= balances_BasicToken[this][_from_s715]) && _value_s715 <= allowed_StandardToken[this][_from_s715][msgsender_MSG]) && balances_BasicToken[this][_to_s715] + _value_s715 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s715 >= 0) && _value_s715 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s715] >= 0) && balances_BasicToken[this][_to_s715] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s715] >= 0) && balances_BasicToken[this][_from_s715] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s715][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s715][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_StandardToken0 := true;
[L3]                  call_transferFrom_StandardToken0 := false;
[L3]                  revert := revert_hold;
[L1855]               havoc __exception;
[L1856]               revert := false;
[L1857]   COND TRUE   __exception
[L1858]               __tmp__Balance := Balance;
[L1859]               __tmp__DType := DType;
[L1860]               __tmp__Alloc := Alloc;
[L1861]               __tmp__balance_ADDR := balance_ADDR;
[L1862]               __tmp__M_Ref_int := M_Ref_int;
[L1863]               __tmp__sum_lockup_list0 := sum_lockup_list0;
[L1864]               __tmp__M_int_bool := M_int_bool;
[L1865]               __tmp__sum_lockup_list_flag1 := sum_lockup_list_flag1;
[L1866]               __tmp__sum_balances2 := sum_balances2;
[L1867]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L1868]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L1869]               __tmp__sum_allowed3 := sum_allowed3;
[L1870]               __tmp__M_int_Ref := M_int_Ref;
[L1871]               __tmp__sum := sum;
[L1872]               __tmp__M_int_int := M_int_int;
[L1873]               __tmp__Length := Length;
[L1874]               __tmp__now := now;
[L1875]               __tmp__owner_Ownable := owner_Ownable;
[L1876]               __tmp__lockup_list_GroupLockup := lockup_list_GroupLockup;
[L1877]               __tmp__lockup_list_flag_GroupLockup := lockup_list_flag_GroupLockup;
[L1878]               __tmp__user_list_GroupLockup := user_list_GroupLockup;
[L1879]               __tmp__balances_BasicToken := balances_BasicToken;
[L1880]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L1881]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L1882]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L1883]               __tmp__name_DEAPCoin := name_DEAPCoin;
[L1884]               __tmp__symbol_DEAPCoin := symbol_DEAPCoin;
[L1885]               __tmp__decimals_DEAPCoin := decimals_DEAPCoin;
[L1886]               __tmp__INITIAL_SUPPLY_DEAPCoin := INITIAL_SUPPLY_DEAPCoin;
[L1887]               __tmp__INITIAL_SALE_SUPPLY_DEAPCoin := INITIAL_SALE_SUPPLY_DEAPCoin;
[L1888]               __tmp__INITIAL_UNSALE_SUPPLY_DEAPCoin := INITIAL_UNSALE_SUPPLY_DEAPCoin;
[L1889]               __tmp__owner_wallet_DEAPCoin := owner_wallet_DEAPCoin;
[L1890]               __tmp__unsale_owner_wallet_DEAPCoin := unsale_owner_wallet_DEAPCoin;
[L1891]               __tmp__group_lockup_DEAPCoin := group_lockup_DEAPCoin;
[L1892]   CALL        call __ret_0_ := transferFrom~address~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s715, _to_s715, _value_s715);
[L6029]               __var_8 := null;
[L6030]   COND TRUE   !(_to_s715 != null)
[L6031]               revert := true;
[L1892]   RET         call __ret_0_ := transferFrom~address~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s715, _to_s715, _value_s715);
[L1893]               assume revert || gas < 0;
[L10757]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s715, _to_s715, _value_s715);
[L10896]  RET         call CorralChoice_DEAPCoin(this);

Loop:
[L10896]  CALL        call CorralChoice_DEAPCoin(this);
[L10641]              havoc msgsender_MSG;
[L10642]              havoc msgvalue_MSG;
[L10643]              havoc choice;
[L10644]              havoc __ret_0_owner;
[L10645]              havoc newOwner_s54;
[L10646]              havoc __ret_0_totalSupply;
[L10647]              havoc _owner_s578;
[L10648]              havoc __ret_0_balanceOf;
[L10649]              havoc _to_s1284;
[L10650]              havoc _value_s1284;
[L10651]              havoc __ret_0_transfer;
[L10652]              havoc _owner_s759;
[L10653]              havoc _spender_s759;
[L10654]              havoc __ret_0_allowance;
[L10655]              havoc _from_s715;
[L10656]              havoc _to_s715;
[L10657]              havoc _value_s715;
[L10658]              havoc __ret_0_transferFrom;
[L10659]              havoc _spender_s743;
[L10660]              havoc _value_s743;
[L10661]              havoc __ret_0_approve;
[L10662]              havoc _spender_s800;
[L10663]              havoc _addedValue_s800;
[L10664]              havoc __ret_0_increaseApproval;
[L10665]              havoc _spender_s860;
[L10666]              havoc _subtractedValue_s860;
[L10667]              havoc __ret_0_decreaseApproval;
[L10668]              havoc __ret_0_mintingFinished;
[L10669]              havoc _to_s932;
[L10670]              havoc _amount_s932;
[L10671]              havoc __ret_0_mint;
[L10672]              havoc __ret_0_finishMinting;
[L10673]              havoc _to_s1413;
[L10674]              havoc _value_s1413;
[L10675]              havoc _data_s1413;
[L10676]              havoc __ret_0_transfer_ERC223;
[L10677]              havoc __ret_0_name;
[L10678]              havoc __ret_0_symbol;
[L10679]              havoc __ret_0_decimals;
[L10680]              havoc __ret_0_INITIAL_SUPPLY;
[L10681]              havoc __ret_0_INITIAL_SALE_SUPPLY;
[L10682]              havoc __ret_0_INITIAL_UNSALE_SUPPLY;
[L10683]              havoc __ret_0_owner_wallet;
[L10684]              havoc __ret_0_unsale_owner_wallet;
[L10685]              havoc __ret_0_group_lockup;
[L10686]              havoc _sale_owner_wallet_s1076;
[L10687]              havoc _unsale_owner_wallet_s1076;
[L10688]              havoc _group_lockup_s1076;
[L10689]              havoc _to_s1162;
[L10690]              havoc _value_s1162;
[L10691]              havoc __ret_0_sendTokens;
[L10692]              havoc _from_s1567;
[L10693]              havoc _users_s1567;
[L10694]              havoc _values_s1567;
[L10695]              havoc __ret_0_batchTransfer;
[L10696]              havoc tmpNow;
[L10697]              havoc gas;
[L10698]              assume gas > 4000000 && gas <= 8000000;
[L10699]              tmpNow := now;
[L10700]              havoc now;
[L10701]              assume now > tmpNow;
[L10702]              assume msgsender_MSG != null;
[L10703]              assume DType[msgsender_MSG] != Ownable;
[L10704]              assume DType[msgsender_MSG] != SafeMath;
[L10705]              assume DType[msgsender_MSG] != GroupLockup;
[L10706]              assume DType[msgsender_MSG] != ERC20Basic;
[L10707]              assume DType[msgsender_MSG] != BasicToken;
[L10708]              assume DType[msgsender_MSG] != ERC20;
[L10709]              assume DType[msgsender_MSG] != StandardToken;
[L10710]              assume DType[msgsender_MSG] != MintableToken;
[L10711]              assume DType[msgsender_MSG] != ERC223Token;
[L10712]              assume DType[msgsender_MSG] != ERC223ContractInterface;
[L10713]              assume DType[msgsender_MSG] != DEAPCoin;
[L10714]              Alloc[msgsender_MSG] := true;
[L10715]  COND FALSE  !(choice == 25)
[L10721]  COND FALSE  !(choice == 24)
[L10727]  COND FALSE  !(choice == 23)
[L10733]  COND FALSE  !(choice == 22)
[L10739]  COND FALSE  !(choice == 21)
[L10746]  COND FALSE  !(choice == 20)
[L10752]  COND TRUE   choice == 19
[L10753]              gas := gas - 21000;
[L10754]  COND TRUE   gas >= 0
[L10755]              assume _value_s715 >= 0 && _value_s715 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10756]              assume msgvalue_MSG == 0;
[L10757]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s715, _to_s715, _value_s715);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != _from_s715 && p1 != _to_s715) && (p2 != _from_s715 || p3 != msgsender_MSG)) && _from_s715 != _to_s715) && _value_s715 <= balances_BasicToken[this][_from_s715]) && _value_s715 <= allowed_StandardToken[this][_from_s715][msgsender_MSG]) && balances_BasicToken[this][_to_s715] + _value_s715 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s715 >= 0) && _value_s715 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s715] >= 0) && balances_BasicToken[this][_to_s715] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s715] >= 0) && balances_BasicToken[this][_from_s715] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s715][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s715][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_StandardToken0 := true;
[L3]                  call_transferFrom_StandardToken0 := false;
[L3]                  revert := revert_hold;
[L1855]               havoc __exception;
[L1856]               revert := false;
[L1857]   COND TRUE   __exception
[L1858]               __tmp__Balance := Balance;
[L1859]               __tmp__DType := DType;
[L1860]               __tmp__Alloc := Alloc;
[L1861]               __tmp__balance_ADDR := balance_ADDR;
[L1862]               __tmp__M_Ref_int := M_Ref_int;
[L1863]               __tmp__sum_lockup_list0 := sum_lockup_list0;
[L1864]               __tmp__M_int_bool := M_int_bool;
[L1865]               __tmp__sum_lockup_list_flag1 := sum_lockup_list_flag1;
[L1866]               __tmp__sum_balances2 := sum_balances2;
[L1867]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L1868]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L1869]               __tmp__sum_allowed3 := sum_allowed3;
[L1870]               __tmp__M_int_Ref := M_int_Ref;
[L1871]               __tmp__sum := sum;
[L1872]               __tmp__M_int_int := M_int_int;
[L1873]               __tmp__Length := Length;
[L1874]               __tmp__now := now;
[L1875]               __tmp__owner_Ownable := owner_Ownable;
[L1876]               __tmp__lockup_list_GroupLockup := lockup_list_GroupLockup;
[L1877]               __tmp__lockup_list_flag_GroupLockup := lockup_list_flag_GroupLockup;
[L1878]               __tmp__user_list_GroupLockup := user_list_GroupLockup;
[L1879]               __tmp__balances_BasicToken := balances_BasicToken;
[L1880]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L1881]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L1882]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L1883]               __tmp__name_DEAPCoin := name_DEAPCoin;
[L1884]               __tmp__symbol_DEAPCoin := symbol_DEAPCoin;
[L1885]               __tmp__decimals_DEAPCoin := decimals_DEAPCoin;
[L1886]               __tmp__INITIAL_SUPPLY_DEAPCoin := INITIAL_SUPPLY_DEAPCoin;
[L1887]               __tmp__INITIAL_SALE_SUPPLY_DEAPCoin := INITIAL_SALE_SUPPLY_DEAPCoin;
[L1888]               __tmp__INITIAL_UNSALE_SUPPLY_DEAPCoin := INITIAL_UNSALE_SUPPLY_DEAPCoin;
[L1889]               __tmp__owner_wallet_DEAPCoin := owner_wallet_DEAPCoin;
[L1890]               __tmp__unsale_owner_wallet_DEAPCoin := unsale_owner_wallet_DEAPCoin;
[L1891]               __tmp__group_lockup_DEAPCoin := group_lockup_DEAPCoin;
[L1892]   CALL        call __ret_0_ := transferFrom~address~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s715, _to_s715, _value_s715);
[L6029]               __var_8 := null;
[L6030]   COND TRUE   !(_to_s715 != null)
[L6031]               revert := true;
[L1892]   RET         call __ret_0_ := transferFrom~address~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s715, _to_s715, _value_s715);
[L1893]               assume revert || gas < 0;
[L10757]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s715, _to_s715, _value_s715);
[L10896]  RET         call CorralChoice_DEAPCoin(this);

[2020-11-25 13:25:34,752 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:25:34,752 INFO  L82        PathProgramCache]: Analyzing trace with hash 908812329, now seen corresponding path program 1 times
[2020-11-25 13:25:34,753 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:25:34,785 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:25:35,125 INFO  L134       CoverageAnalysis]: Checked inductivity of 3940 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 3940 trivial. 0 not checked.
[2020-11-25 13:25:35,125 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:25:35,125 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 13:25:35,126 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:25:35,126 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 13:25:35,126 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 13:25:35,127 INFO  L87              Difference]: Start difference. First operand 5009 states and 5443 transitions. cyclomatic complexity: 440 Second operand 4 states.
[2020-11-25 13:25:35,537 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:25:35,537 INFO  L93              Difference]: Finished difference Result 6003 states and 6676 transitions.
[2020-11-25 13:25:35,538 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 13:25:35,538 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6003 states and 6676 transitions.
[2020-11-25 13:25:35,550 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 13:25:35,563 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6003 states to 5745 states and 6399 transitions.
[2020-11-25 13:25:35,563 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1468
[2020-11-25 13:25:35,564 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1468
[2020-11-25 13:25:35,564 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5745 states and 6399 transitions.
[2020-11-25 13:25:35,569 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:25:35,569 INFO  L728         BuchiCegarLoop]: Abstraction has 5745 states and 6399 transitions.
[2020-11-25 13:25:35,573 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5745 states and 6399 transitions.
[2020-11-25 13:25:35,602 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5745 to 5043.
[2020-11-25 13:25:35,603 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5043 states.
[2020-11-25 13:25:35,608 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5043 states to 5043 states and 5511 transitions.
[2020-11-25 13:25:35,608 INFO  L751         BuchiCegarLoop]: Abstraction has 5043 states and 5511 transitions.
[2020-11-25 13:25:35,608 INFO  L631         BuchiCegarLoop]: Abstraction has 5043 states and 5511 transitions.
[2020-11-25 13:25:35,608 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 13:25:35,608 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5043 states and 5511 transitions.
[2020-11-25 13:25:35,613 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 13:25:35,613 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:25:35,614 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:25:35,616 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [24, 24, 24, 24, 24, 24, 24, 24, 24, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:25:35,616 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_StandardToken0 := false;
[L3]                  call_transferFrom_StandardToken0 := false;
[L3]      CALL        call main();
[L3]                  havoc p3;
[L3]                  havoc p2;
[L3]                  havoc p1;
[L10886]              assume null == 0;
[L10887]  CALL        call this := FreshRefGenerator__success();
[L5226]               havoc newRef;
[L5227]               assume Alloc[newRef] == false;
[L5228]               Alloc[newRef] := true;
[L5229]               assume newRef != null;
[L10887]  RET         call this := FreshRefGenerator__success();
[L10888]              assume now >= 0;
[L10889]              assume DType[this] == DEAPCoin;
[L10890]              assume msgvalue_MSG == 0;
[L10891]              gas := gas - 53000;
[L10892]  CALL        call DEAPCoin_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L2858]               havoc __exception;
[L2859]               revert := false;
[L2860]   COND FALSE  !(__exception)
[L2898]   CALL        call DEAPCoin_DEAPCoin__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6652]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L6652]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6653]   COND FALSE  !(revert)
[L6656]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5953]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]   COND FALSE  !(revert)
[L5957]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5957]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6656]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6657]   COND FALSE  !(revert)
[L6660]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5824]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5825]   COND FALSE  !(revert)
[L5828]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5802]               assume msgsender_MSG != null;
[L5803]               Balance[this] := 0;
[L5804]               balances_BasicToken[this] := zeroRefintArr();
[L5805]               sum_balances2[this] := 0;
[L5806]               totalSupply__BasicToken[this] := 0;
[L5828]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5829]   COND FALSE  !(revert)
[L6660]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6661]   COND FALSE  !(revert)
[L6664]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6005]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L6005]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]   COND FALSE  !(revert)
[L6009]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5953]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]   COND FALSE  !(revert)
[L5957]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5957]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6009]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6010]   COND FALSE  !(revert)
[L6013]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5824]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5825]   COND FALSE  !(revert)
[L5828]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5802]               assume msgsender_MSG != null;
[L5803]               Balance[this] := 0;
[L5804]               balances_BasicToken[this] := zeroRefintArr();
[L5805]               sum_balances2[this] := 0;
[L5806]               totalSupply__BasicToken[this] := 0;
[L5828]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5829]   COND FALSE  !(revert)
[L6013]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]   COND FALSE  !(revert)
[L6017]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5976]               assume msgsender_MSG != null;
[L5977]               Balance[this] := 0;
[L5978]               allowed_StandardToken[this] := zeroRefRefintArr();
[L5979]               sum_allowed3[this] := 0;
[L6017]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6018]   COND FALSE  !(revert)
[L6664]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6665]   COND FALSE  !(revert)
[L6668]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5262]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5245]               assume msgsender_MSG != null;
[L5246]               Balance[this] := 0;
[L5247]               owner_Ownable[this] := null;
[L5249]               owner_Ownable[this] := msgsender_MSG;
[L5262]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5263]   COND FALSE  !(revert)
[L6668]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6669]   COND FALSE  !(revert)
[L6672]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6265]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L6265]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6266]   COND FALSE  !(revert)
[L6269]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5953]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]   COND FALSE  !(revert)
[L5957]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5957]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6269]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6270]   COND FALSE  !(revert)
[L6273]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5824]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5825]   COND FALSE  !(revert)
[L5828]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5802]               assume msgsender_MSG != null;
[L5803]               Balance[this] := 0;
[L5804]               balances_BasicToken[this] := zeroRefintArr();
[L5805]               sum_balances2[this] := 0;
[L5806]               totalSupply__BasicToken[this] := 0;
[L5828]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5829]   COND FALSE  !(revert)
[L6273]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6274]   COND FALSE  !(revert)
[L6277]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6005]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L6005]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]   COND FALSE  !(revert)
[L6009]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5953]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]   COND FALSE  !(revert)
[L5957]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5957]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6009]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6010]   COND FALSE  !(revert)
[L6013]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5824]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5825]   COND FALSE  !(revert)
[L5828]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5802]               assume msgsender_MSG != null;
[L5803]               Balance[this] := 0;
[L5804]               balances_BasicToken[this] := zeroRefintArr();
[L5805]               sum_balances2[this] := 0;
[L5806]               totalSupply__BasicToken[this] := 0;
[L5828]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5829]   COND FALSE  !(revert)
[L6013]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]   COND FALSE  !(revert)
[L6017]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5976]               assume msgsender_MSG != null;
[L5977]               Balance[this] := 0;
[L5978]               allowed_StandardToken[this] := zeroRefRefintArr();
[L5979]               sum_allowed3[this] := 0;
[L6017]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6018]   COND FALSE  !(revert)
[L6277]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6278]   COND FALSE  !(revert)
[L6281]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5262]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5245]               assume msgsender_MSG != null;
[L5246]               Balance[this] := 0;
[L5247]               owner_Ownable[this] := null;
[L5249]               owner_Ownable[this] := msgsender_MSG;
[L5262]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5263]   COND FALSE  !(revert)
[L6281]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6282]   COND FALSE  !(revert)
[L6285]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6229]               assume msgsender_MSG != null;
[L6230]               Balance[this] := 0;
[L6231]               mintingFinished_MintableToken[this] := false;
[L6285]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6286]   COND FALSE  !(revert)
[L6672]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6673]   COND FALSE  !(revert)
[L6676]   CALL        call ERC223Token_ERC223Token__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L6442]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6443]   COND FALSE  !(revert)
[L6446]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5953]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]   COND FALSE  !(revert)
[L5957]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5957]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6446]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6447]   COND FALSE  !(revert)
[L6450]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5824]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5825]   COND FALSE  !(revert)
[L5828]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5802]               assume msgsender_MSG != null;
[L5803]               Balance[this] := 0;
[L5804]               balances_BasicToken[this] := zeroRefintArr();
[L5805]               sum_balances2[this] := 0;
[L5806]               totalSupply__BasicToken[this] := 0;
[L5828]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5829]   COND FALSE  !(revert)
[L6450]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6005]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L6005]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]   COND FALSE  !(revert)
[L6009]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5953]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]   COND FALSE  !(revert)
[L5957]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5957]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6009]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6010]   COND FALSE  !(revert)
[L6013]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5824]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5825]   COND FALSE  !(revert)
[L5828]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5802]               assume msgsender_MSG != null;
[L5803]               Balance[this] := 0;
[L5804]               balances_BasicToken[this] := zeroRefintArr();
[L5805]               sum_balances2[this] := 0;
[L5806]               totalSupply__BasicToken[this] := 0;
[L5828]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5829]   COND FALSE  !(revert)
[L6013]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]   COND FALSE  !(revert)
[L6017]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5976]               assume msgsender_MSG != null;
[L5977]               Balance[this] := 0;
[L5978]               allowed_StandardToken[this] := zeroRefRefintArr();
[L5979]               sum_allowed3[this] := 0;
[L6017]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6018]   COND FALSE  !(revert)
[L6454]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L6458]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5262]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5245]               assume msgsender_MSG != null;
[L5246]               Balance[this] := 0;
[L5247]               owner_Ownable[this] := null;
[L5249]               owner_Ownable[this] := msgsender_MSG;
[L5262]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5263]   COND FALSE  !(revert)
[L6458]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6459]   COND FALSE  !(revert)
[L6462]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6265]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L6265]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6266]   COND FALSE  !(revert)
[L6269]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5953]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]   COND FALSE  !(revert)
[L5957]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5957]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6269]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6270]   COND FALSE  !(revert)
[L6273]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5824]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5825]   COND FALSE  !(revert)
[L5828]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5802]               assume msgsender_MSG != null;
[L5803]               Balance[this] := 0;
[L5804]               balances_BasicToken[this] := zeroRefintArr();
[L5805]               sum_balances2[this] := 0;
[L5806]               totalSupply__BasicToken[this] := 0;
[L5828]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5829]   COND FALSE  !(revert)
[L6273]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6274]   COND FALSE  !(revert)
[L6277]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6005]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L6005]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]   COND FALSE  !(revert)
[L6009]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5953]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]   COND FALSE  !(revert)
[L5957]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5957]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6009]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6010]   COND FALSE  !(revert)
[L6013]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5824]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5825]   COND FALSE  !(revert)
[L5828]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5802]               assume msgsender_MSG != null;
[L5803]               Balance[this] := 0;
[L5804]               balances_BasicToken[this] := zeroRefintArr();
[L5805]               sum_balances2[this] := 0;
[L5806]               totalSupply__BasicToken[this] := 0;
[L5828]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5829]   COND FALSE  !(revert)
[L6013]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]   COND FALSE  !(revert)
[L6017]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5976]               assume msgsender_MSG != null;
[L5977]               Balance[this] := 0;
[L5978]               allowed_StandardToken[this] := zeroRefRefintArr();
[L5979]               sum_allowed3[this] := 0;
[L6017]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6018]   COND FALSE  !(revert)
[L6277]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6278]   COND FALSE  !(revert)
[L6281]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5262]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5245]               assume msgsender_MSG != null;
[L5246]               Balance[this] := 0;
[L5247]               owner_Ownable[this] := null;
[L5249]               owner_Ownable[this] := msgsender_MSG;
[L5262]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5263]   COND FALSE  !(revert)
[L6281]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6282]   COND FALSE  !(revert)
[L6285]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6229]               assume msgsender_MSG != null;
[L6230]               Balance[this] := 0;
[L6231]               mintingFinished_MintableToken[this] := false;
[L6285]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6286]   COND FALSE  !(revert)
[L6462]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6463]   COND FALSE  !(revert)
[L6466]   CALL        call ERC223Token_ERC223Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6403]               assume msgsender_MSG != null;
[L6404]               Balance[this] := 0;
[L6466]   RET         call ERC223Token_ERC223Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]   COND FALSE  !(revert)
[L6676]   RET         call ERC223Token_ERC223Token__success(this, msgsender_MSG, msgvalue_MSG);
[L6677]   COND FALSE  !(revert)
[L6680]   CALL        call DEAPCoin_DEAPCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6562]               assume msgsender_MSG != null;
[L6563]               Balance[this] := 0;
[L6564]               name_DEAPCoin[this] := -635866188;
[L6565]               symbol_DEAPCoin[this] := -1031151507;
[L6566]               decimals_DEAPCoin[this] := 18;
[L6567]               __var_19 := decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6568]               INITIAL_SUPPLY_DEAPCoin[this] := 30000000000 * (nonlinearPow(10, decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6569]               __var_20 := decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6570]               INITIAL_SALE_SUPPLY_DEAPCoin[this] := 12000000000 * (nonlinearPow(10, decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6571]               INITIAL_UNSALE_SUPPLY_DEAPCoin[this] := (INITIAL_SUPPLY_DEAPCoin[this] - INITIAL_SALE_SUPPLY_DEAPCoin[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6572]               owner_wallet_DEAPCoin[this] := null;
[L6573]               unsale_owner_wallet_DEAPCoin[this] := null;
[L6575]               group_lockup_DEAPCoin[this] := _group_lockup_s1076;
[L6576]               owner_wallet_DEAPCoin[this] := _sale_owner_wallet_s1076;
[L6577]               unsale_owner_wallet_DEAPCoin[this] := _unsale_owner_wallet_s1076;
[L6578]   COND TRUE   DType[this] == DEAPCoin
[L6579]   CALL        call __var_16 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, owner_wallet_DEAPCoin[this], INITIAL_SALE_SUPPLY_DEAPCoin[this]);
[L6323]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9398]   COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L6323]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6327]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9414]   COND FALSE  !(!!mintingFinished_MintableToken[this])
[L6327]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6328]   COND FALSE  !(revert)
[L6331]   CALL        call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s932);
[L5400]               c_s146 := (a_s146 + b_s146) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5401]               assert c_s146 >= a_s146;
[L5402]               c_s146 := c_s146;
[L6331]   RET         call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s932);
[L6332]   COND FALSE  !(revert)
[L6335]               totalSupply__BasicToken[this] := __var_14;
[L6336]   CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s932], _amount_s932);
[L5400]               c_s146 := (a_s146 + b_s146) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5401]               assert c_s146 >= a_s146;
[L5402]               c_s146 := c_s146;
[L6336]   RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s932], _amount_s932);
[L6337]   COND FALSE  !(revert)
[L6340]               sum_balances2[this] := sum_balances2[this] - balances_BasicToken[this][_to_s932];
[L6341]               balances_BasicToken[this][_to_s932] := __var_15;
[L6342]               sum_balances2[this] := sum_balances2[this] + balances_BasicToken[this][_to_s932];
[L6343]               assert { :EventEmitted "Mint_MintableToken" } true;
[L6344]               assert { :EventEmitted "Transfer_MintableToken" } true;
[L6345]               __ret_0_ := true;
[L6579]   RET         call __var_16 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, owner_wallet_DEAPCoin[this], INITIAL_SALE_SUPPLY_DEAPCoin[this]);
[L6580]   COND FALSE  !(revert)
[L6586]   COND TRUE   DType[this] == DEAPCoin
[L6587]   CALL        call __var_17 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, unsale_owner_wallet_DEAPCoin[this], INITIAL_UNSALE_SUPPLY_DEAPCoin[this]);
[L6323]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9398]   COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L6323]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6327]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9414]   COND FALSE  !(!!mintingFinished_MintableToken[this])
[L6327]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6328]   COND FALSE  !(revert)
[L6331]   CALL        call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s932);
[L5400]               c_s146 := (a_s146 + b_s146) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5401]               assert c_s146 >= a_s146;
[L5402]               c_s146 := c_s146;
[L6331]   RET         call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s932);
[L6332]   COND FALSE  !(revert)
[L6335]               totalSupply__BasicToken[this] := __var_14;
[L6336]   CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s932], _amount_s932);
[L5400]               c_s146 := (a_s146 + b_s146) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5401]               assert c_s146 >= a_s146;
[L5402]               c_s146 := c_s146;
[L6336]   RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s932], _amount_s932);
[L6337]   COND FALSE  !(revert)
[L6340]               sum_balances2[this] := sum_balances2[this] - balances_BasicToken[this][_to_s932];
[L6341]               balances_BasicToken[this][_to_s932] := __var_15;
[L6342]               sum_balances2[this] := sum_balances2[this] + balances_BasicToken[this][_to_s932];
[L6343]               assert { :EventEmitted "Mint_MintableToken" } true;
[L6344]               assert { :EventEmitted "Transfer_MintableToken" } true;
[L6345]               __ret_0_ := true;
[L6587]   RET         call __var_17 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, unsale_owner_wallet_DEAPCoin[this], INITIAL_UNSALE_SUPPLY_DEAPCoin[this]);
[L6588]   COND FALSE  !(revert)
[L6594]   COND TRUE   DType[this] == DEAPCoin
[L6595]   CALL        call __var_18 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6366]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9398]   COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L6366]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6367]   COND FALSE  !(revert)
[L6370]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9414]   COND FALSE  !(!!mintingFinished_MintableToken[this])
[L6370]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6371]   COND FALSE  !(revert)
[L6374]               mintingFinished_MintableToken[this] := true;
[L6375]               assert { :EventEmitted "MintFinished_MintableToken" } true;
[L6376]               __ret_0_ := true;
[L6595]   RET         call __var_18 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6596]   COND FALSE  !(revert)
[L6680]   RET         call DEAPCoin_DEAPCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6681]   COND FALSE  !(revert)
[L2898]   RET         call DEAPCoin_DEAPCoin__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L2899]               assume !revert && gas >= 0;
[L10892]  RET         call DEAPCoin_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L10893]              assume !revert && gas >= 0;
[L10896]  CALL        call CorralChoice_DEAPCoin(this);
[L10641]              havoc msgsender_MSG;
[L10642]              havoc msgvalue_MSG;
[L10643]              havoc choice;
[L10644]              havoc __ret_0_owner;
[L10645]              havoc newOwner_s54;
[L10646]              havoc __ret_0_totalSupply;
[L10647]              havoc _owner_s578;
[L10648]              havoc __ret_0_balanceOf;
[L10649]              havoc _to_s1284;
[L10650]              havoc _value_s1284;
[L10651]              havoc __ret_0_transfer;
[L10652]              havoc _owner_s759;
[L10653]              havoc _spender_s759;
[L10654]              havoc __ret_0_allowance;
[L10655]              havoc _from_s715;
[L10656]              havoc _to_s715;
[L10657]              havoc _value_s715;
[L10658]              havoc __ret_0_transferFrom;
[L10659]              havoc _spender_s743;
[L10660]              havoc _value_s743;
[L10661]              havoc __ret_0_approve;
[L10662]              havoc _spender_s800;
[L10663]              havoc _addedValue_s800;
[L10664]              havoc __ret_0_increaseApproval;
[L10665]              havoc _spender_s860;
[L10666]              havoc _subtractedValue_s860;
[L10667]              havoc __ret_0_decreaseApproval;
[L10668]              havoc __ret_0_mintingFinished;
[L10669]              havoc _to_s932;
[L10670]              havoc _amount_s932;
[L10671]              havoc __ret_0_mint;
[L10672]              havoc __ret_0_finishMinting;
[L10673]              havoc _to_s1413;
[L10674]              havoc _value_s1413;
[L10675]              havoc _data_s1413;
[L10676]              havoc __ret_0_transfer_ERC223;
[L10677]              havoc __ret_0_name;
[L10678]              havoc __ret_0_symbol;
[L10679]              havoc __ret_0_decimals;
[L10680]              havoc __ret_0_INITIAL_SUPPLY;
[L10681]              havoc __ret_0_INITIAL_SALE_SUPPLY;
[L10682]              havoc __ret_0_INITIAL_UNSALE_SUPPLY;
[L10683]              havoc __ret_0_owner_wallet;
[L10684]              havoc __ret_0_unsale_owner_wallet;
[L10685]              havoc __ret_0_group_lockup;
[L10686]              havoc _sale_owner_wallet_s1076;
[L10687]              havoc _unsale_owner_wallet_s1076;
[L10688]              havoc _group_lockup_s1076;
[L10689]              havoc _to_s1162;
[L10690]              havoc _value_s1162;
[L10691]              havoc __ret_0_sendTokens;
[L10692]              havoc _from_s1567;
[L10693]              havoc _users_s1567;
[L10694]              havoc _values_s1567;
[L10695]              havoc __ret_0_batchTransfer;
[L10696]              havoc tmpNow;
[L10697]              havoc gas;
[L10698]              assume gas > 4000000 && gas <= 8000000;
[L10699]              tmpNow := now;
[L10700]              havoc now;
[L10701]              assume now > tmpNow;
[L10702]              assume msgsender_MSG != null;
[L10703]              assume DType[msgsender_MSG] != Ownable;
[L10704]              assume DType[msgsender_MSG] != SafeMath;
[L10705]              assume DType[msgsender_MSG] != GroupLockup;
[L10706]              assume DType[msgsender_MSG] != ERC20Basic;
[L10707]              assume DType[msgsender_MSG] != BasicToken;
[L10708]              assume DType[msgsender_MSG] != ERC20;
[L10709]              assume DType[msgsender_MSG] != StandardToken;
[L10710]              assume DType[msgsender_MSG] != MintableToken;
[L10711]              assume DType[msgsender_MSG] != ERC223Token;
[L10712]              assume DType[msgsender_MSG] != ERC223ContractInterface;
[L10713]              assume DType[msgsender_MSG] != DEAPCoin;
[L10714]              Alloc[msgsender_MSG] := true;
[L10715]  COND FALSE  !(choice == 25)
[L10721]  COND FALSE  !(choice == 24)
[L10727]  COND FALSE  !(choice == 23)
[L10733]  COND FALSE  !(choice == 22)
[L10739]  COND FALSE  !(choice == 21)
[L10746]  COND FALSE  !(choice == 20)
[L10752]  COND TRUE   choice == 19
[L10753]              gas := gas - 21000;
[L10754]  COND TRUE   gas >= 0
[L10755]              assume _value_s715 >= 0 && _value_s715 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10756]              assume msgvalue_MSG == 0;
[L10757]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s715, _to_s715, _value_s715);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != _from_s715 && p1 != _to_s715) && (p2 != _from_s715 || p3 != msgsender_MSG)) && _from_s715 != _to_s715) && _value_s715 <= balances_BasicToken[this][_from_s715]) && _value_s715 <= allowed_StandardToken[this][_from_s715][msgsender_MSG]) && balances_BasicToken[this][_to_s715] + _value_s715 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s715 >= 0) && _value_s715 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s715] >= 0) && balances_BasicToken[this][_to_s715] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s715] >= 0) && balances_BasicToken[this][_from_s715] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s715][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s715][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_StandardToken0 := true;
[L3]                  call_transferFrom_StandardToken0 := false;
[L3]                  revert := revert_hold;
[L1855]               havoc __exception;
[L1856]               revert := false;
[L1857]   COND TRUE   __exception
[L1858]               __tmp__Balance := Balance;
[L1859]               __tmp__DType := DType;
[L1860]               __tmp__Alloc := Alloc;
[L1861]               __tmp__balance_ADDR := balance_ADDR;
[L1862]               __tmp__M_Ref_int := M_Ref_int;
[L1863]               __tmp__sum_lockup_list0 := sum_lockup_list0;
[L1864]               __tmp__M_int_bool := M_int_bool;
[L1865]               __tmp__sum_lockup_list_flag1 := sum_lockup_list_flag1;
[L1866]               __tmp__sum_balances2 := sum_balances2;
[L1867]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L1868]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L1869]               __tmp__sum_allowed3 := sum_allowed3;
[L1870]               __tmp__M_int_Ref := M_int_Ref;
[L1871]               __tmp__sum := sum;
[L1872]               __tmp__M_int_int := M_int_int;
[L1873]               __tmp__Length := Length;
[L1874]               __tmp__now := now;
[L1875]               __tmp__owner_Ownable := owner_Ownable;
[L1876]               __tmp__lockup_list_GroupLockup := lockup_list_GroupLockup;
[L1877]               __tmp__lockup_list_flag_GroupLockup := lockup_list_flag_GroupLockup;
[L1878]               __tmp__user_list_GroupLockup := user_list_GroupLockup;
[L1879]               __tmp__balances_BasicToken := balances_BasicToken;
[L1880]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L1881]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L1882]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L1883]               __tmp__name_DEAPCoin := name_DEAPCoin;
[L1884]               __tmp__symbol_DEAPCoin := symbol_DEAPCoin;
[L1885]               __tmp__decimals_DEAPCoin := decimals_DEAPCoin;
[L1886]               __tmp__INITIAL_SUPPLY_DEAPCoin := INITIAL_SUPPLY_DEAPCoin;
[L1887]               __tmp__INITIAL_SALE_SUPPLY_DEAPCoin := INITIAL_SALE_SUPPLY_DEAPCoin;
[L1888]               __tmp__INITIAL_UNSALE_SUPPLY_DEAPCoin := INITIAL_UNSALE_SUPPLY_DEAPCoin;
[L1889]               __tmp__owner_wallet_DEAPCoin := owner_wallet_DEAPCoin;
[L1890]               __tmp__unsale_owner_wallet_DEAPCoin := unsale_owner_wallet_DEAPCoin;
[L1891]               __tmp__group_lockup_DEAPCoin := group_lockup_DEAPCoin;
[L1892]   CALL        call __ret_0_ := transferFrom~address~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s715, _to_s715, _value_s715);
[L6029]               __var_8 := null;
[L6030]   COND TRUE   !(_to_s715 != null)
[L6031]               revert := true;
[L1892]   RET         call __ret_0_ := transferFrom~address~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s715, _to_s715, _value_s715);
[L1893]               assume revert || gas < 0;
[L10757]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s715, _to_s715, _value_s715);
[L10896]  RET         call CorralChoice_DEAPCoin(this);

Loop:
[L10896]  CALL        call CorralChoice_DEAPCoin(this);
[L10641]              havoc msgsender_MSG;
[L10642]              havoc msgvalue_MSG;
[L10643]              havoc choice;
[L10644]              havoc __ret_0_owner;
[L10645]              havoc newOwner_s54;
[L10646]              havoc __ret_0_totalSupply;
[L10647]              havoc _owner_s578;
[L10648]              havoc __ret_0_balanceOf;
[L10649]              havoc _to_s1284;
[L10650]              havoc _value_s1284;
[L10651]              havoc __ret_0_transfer;
[L10652]              havoc _owner_s759;
[L10653]              havoc _spender_s759;
[L10654]              havoc __ret_0_allowance;
[L10655]              havoc _from_s715;
[L10656]              havoc _to_s715;
[L10657]              havoc _value_s715;
[L10658]              havoc __ret_0_transferFrom;
[L10659]              havoc _spender_s743;
[L10660]              havoc _value_s743;
[L10661]              havoc __ret_0_approve;
[L10662]              havoc _spender_s800;
[L10663]              havoc _addedValue_s800;
[L10664]              havoc __ret_0_increaseApproval;
[L10665]              havoc _spender_s860;
[L10666]              havoc _subtractedValue_s860;
[L10667]              havoc __ret_0_decreaseApproval;
[L10668]              havoc __ret_0_mintingFinished;
[L10669]              havoc _to_s932;
[L10670]              havoc _amount_s932;
[L10671]              havoc __ret_0_mint;
[L10672]              havoc __ret_0_finishMinting;
[L10673]              havoc _to_s1413;
[L10674]              havoc _value_s1413;
[L10675]              havoc _data_s1413;
[L10676]              havoc __ret_0_transfer_ERC223;
[L10677]              havoc __ret_0_name;
[L10678]              havoc __ret_0_symbol;
[L10679]              havoc __ret_0_decimals;
[L10680]              havoc __ret_0_INITIAL_SUPPLY;
[L10681]              havoc __ret_0_INITIAL_SALE_SUPPLY;
[L10682]              havoc __ret_0_INITIAL_UNSALE_SUPPLY;
[L10683]              havoc __ret_0_owner_wallet;
[L10684]              havoc __ret_0_unsale_owner_wallet;
[L10685]              havoc __ret_0_group_lockup;
[L10686]              havoc _sale_owner_wallet_s1076;
[L10687]              havoc _unsale_owner_wallet_s1076;
[L10688]              havoc _group_lockup_s1076;
[L10689]              havoc _to_s1162;
[L10690]              havoc _value_s1162;
[L10691]              havoc __ret_0_sendTokens;
[L10692]              havoc _from_s1567;
[L10693]              havoc _users_s1567;
[L10694]              havoc _values_s1567;
[L10695]              havoc __ret_0_batchTransfer;
[L10696]              havoc tmpNow;
[L10697]              havoc gas;
[L10698]              assume gas > 4000000 && gas <= 8000000;
[L10699]              tmpNow := now;
[L10700]              havoc now;
[L10701]              assume now > tmpNow;
[L10702]              assume msgsender_MSG != null;
[L10703]              assume DType[msgsender_MSG] != Ownable;
[L10704]              assume DType[msgsender_MSG] != SafeMath;
[L10705]              assume DType[msgsender_MSG] != GroupLockup;
[L10706]              assume DType[msgsender_MSG] != ERC20Basic;
[L10707]              assume DType[msgsender_MSG] != BasicToken;
[L10708]              assume DType[msgsender_MSG] != ERC20;
[L10709]              assume DType[msgsender_MSG] != StandardToken;
[L10710]              assume DType[msgsender_MSG] != MintableToken;
[L10711]              assume DType[msgsender_MSG] != ERC223Token;
[L10712]              assume DType[msgsender_MSG] != ERC223ContractInterface;
[L10713]              assume DType[msgsender_MSG] != DEAPCoin;
[L10714]              Alloc[msgsender_MSG] := true;
[L10715]  COND FALSE  !(choice == 25)
[L10721]  COND FALSE  !(choice == 24)
[L10727]  COND FALSE  !(choice == 23)
[L10733]  COND FALSE  !(choice == 22)
[L10739]  COND FALSE  !(choice == 21)
[L10746]  COND FALSE  !(choice == 20)
[L10752]  COND TRUE   choice == 19
[L10753]              gas := gas - 21000;
[L10754]  COND TRUE   gas >= 0
[L10755]              assume _value_s715 >= 0 && _value_s715 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10756]              assume msgvalue_MSG == 0;
[L10757]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s715, _to_s715, _value_s715);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != _from_s715 && p1 != _to_s715) && (p2 != _from_s715 || p3 != msgsender_MSG)) && _from_s715 != _to_s715) && _value_s715 <= balances_BasicToken[this][_from_s715]) && _value_s715 <= allowed_StandardToken[this][_from_s715][msgsender_MSG]) && balances_BasicToken[this][_to_s715] + _value_s715 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s715 >= 0) && _value_s715 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s715] >= 0) && balances_BasicToken[this][_to_s715] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s715] >= 0) && balances_BasicToken[this][_from_s715] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s715][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s715][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_StandardToken0 := true;
[L3]                  call_transferFrom_StandardToken0 := false;
[L3]                  revert := revert_hold;
[L1855]               havoc __exception;
[L1856]               revert := false;
[L1857]   COND TRUE   __exception
[L1858]               __tmp__Balance := Balance;
[L1859]               __tmp__DType := DType;
[L1860]               __tmp__Alloc := Alloc;
[L1861]               __tmp__balance_ADDR := balance_ADDR;
[L1862]               __tmp__M_Ref_int := M_Ref_int;
[L1863]               __tmp__sum_lockup_list0 := sum_lockup_list0;
[L1864]               __tmp__M_int_bool := M_int_bool;
[L1865]               __tmp__sum_lockup_list_flag1 := sum_lockup_list_flag1;
[L1866]               __tmp__sum_balances2 := sum_balances2;
[L1867]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L1868]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L1869]               __tmp__sum_allowed3 := sum_allowed3;
[L1870]               __tmp__M_int_Ref := M_int_Ref;
[L1871]               __tmp__sum := sum;
[L1872]               __tmp__M_int_int := M_int_int;
[L1873]               __tmp__Length := Length;
[L1874]               __tmp__now := now;
[L1875]               __tmp__owner_Ownable := owner_Ownable;
[L1876]               __tmp__lockup_list_GroupLockup := lockup_list_GroupLockup;
[L1877]               __tmp__lockup_list_flag_GroupLockup := lockup_list_flag_GroupLockup;
[L1878]               __tmp__user_list_GroupLockup := user_list_GroupLockup;
[L1879]               __tmp__balances_BasicToken := balances_BasicToken;
[L1880]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L1881]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L1882]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L1883]               __tmp__name_DEAPCoin := name_DEAPCoin;
[L1884]               __tmp__symbol_DEAPCoin := symbol_DEAPCoin;
[L1885]               __tmp__decimals_DEAPCoin := decimals_DEAPCoin;
[L1886]               __tmp__INITIAL_SUPPLY_DEAPCoin := INITIAL_SUPPLY_DEAPCoin;
[L1887]               __tmp__INITIAL_SALE_SUPPLY_DEAPCoin := INITIAL_SALE_SUPPLY_DEAPCoin;
[L1888]               __tmp__INITIAL_UNSALE_SUPPLY_DEAPCoin := INITIAL_UNSALE_SUPPLY_DEAPCoin;
[L1889]               __tmp__owner_wallet_DEAPCoin := owner_wallet_DEAPCoin;
[L1890]               __tmp__unsale_owner_wallet_DEAPCoin := unsale_owner_wallet_DEAPCoin;
[L1891]               __tmp__group_lockup_DEAPCoin := group_lockup_DEAPCoin;
[L1892]   CALL        call __ret_0_ := transferFrom~address~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s715, _to_s715, _value_s715);
[L6029]               __var_8 := null;
[L6030]   COND TRUE   !(_to_s715 != null)
[L6031]               revert := true;
[L1892]   RET         call __ret_0_ := transferFrom~address~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s715, _to_s715, _value_s715);
[L1893]               assume revert || gas < 0;
[L10757]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s715, _to_s715, _value_s715);
[L10896]  RET         call CorralChoice_DEAPCoin(this);

[2020-11-25 13:25:35,622 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:25:35,623 INFO  L82        PathProgramCache]: Analyzing trace with hash -1048899643, now seen corresponding path program 1 times
[2020-11-25 13:25:35,623 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:25:35,745 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 13:25:35,828 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 13:25:36,050 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:25:36,051 INFO  L82        PathProgramCache]: Analyzing trace with hash -111576916, now seen corresponding path program 1 times
[2020-11-25 13:25:36,051 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:25:36,057 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 13:25:36,062 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 13:25:36,075 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:25:36,076 INFO  L82        PathProgramCache]: Analyzing trace with hash -274830744, now seen corresponding path program 1 times
[2020-11-25 13:25:36,076 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:25:36,127 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 13:25:36,249 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 199 to 397
[2020-11-25 13:25:36,590 WARN  L188               SmtUtils]: Spent 147.00 ms on a formula simplification. DAG size of input: 210 DAG size of output: 203
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2473 to 4943
Garbage collection #1: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #7: 3517 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3517 to 7027
Garbage collection #8: 7027 nodes / 0 free / 0.002s / 0.003s total
Resizing node table from 7027 to 14051
[2020-11-25 13:25:36,811 WARN  L188               SmtUtils]: Spent 182.00 ms on a formula simplification. DAG size of input: 159 DAG size of output: 153
[2020-11-25 13:25:37,069 WARN  L188               SmtUtils]: Spent 255.00 ms on a formula simplification that was a NOOP. DAG size: 378
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.002s / 0.005s total
Resizing node table from 9181 to 18353
Garbage collection #8: 18353 nodes / 0 free / 0.0s / 0.005s total
Resizing node table from 18353 to 36697
[2020-11-25 13:25:38,030 WARN  L188               SmtUtils]: Spent 930.00 ms on a formula simplification. DAG size of input: 304 DAG size of output: 304
[2020-11-25 13:25:39,275 WARN  L188               SmtUtils]: Spent 1.24 s on a formula simplification. DAG size of input: 384 DAG size of output: 362
Garbage collection #1: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
Garbage collection #7: 8053 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 8053 to 16103
Garbage collection #8: 16103 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 16103 to 32203
Garbage collection #9: 32203 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 32203 to 64403
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #7: 5003 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5003 to 9973
Garbage collection #8: 9973 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9973 to 19937
[2020-11-25 13:25:39,637 WARN  L188               SmtUtils]: Spent 328.00 ms on a formula simplification. DAG size of input: 222 DAG size of output: 216
[2020-11-25 13:25:40,074 WARN  L188               SmtUtils]: Spent 435.00 ms on a formula simplification that was a NOOP. DAG size: 448
Garbage collection #1: 179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 179 to 353
Garbage collection #2: 353 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 353 to 701
Garbage collection #3: 701 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 701 to 1399
Garbage collection #4: 1399 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1399 to 2797
Garbage collection #5: 2797 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2797 to 5591
Garbage collection #6: 5591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5591 to 11177
Garbage collection #7: 11177 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11177 to 22349
[2020-11-25 13:25:40,811 WARN  L188               SmtUtils]: Spent 724.00 ms on a formula simplification. DAG size of input: 357 DAG size of output: 357
[2020-11-25 13:25:41,215 WARN  L188               SmtUtils]: Spent 401.00 ms on a formula simplification that was a NOOP. DAG size: 357
Garbage collection #1: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
Garbage collection #7: 8053 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8053 to 16103
Garbage collection #8: 16103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 16103 to 32203
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #7: 6037 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 6037 to 12073
[2020-11-25 13:25:41,777 WARN  L188               SmtUtils]: Spent 509.00 ms on a formula simplification. DAG size of input: 274 DAG size of output: 241
[2020-11-25 13:25:41,787 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 5 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5 to 7
Garbage collection #2: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #1: 5 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5 to 7
Garbage collection #2: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 5 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5 to 7
Garbage collection #2: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #1: 5 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5 to 7
Garbage collection #2: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
[2020-11-25 13:25:43,303 WARN  L188               SmtUtils]: Spent 516.00 ms on a formula simplification. DAG size of input: 229 DAG size of output: 220
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
[2020-11-25 13:25:43,451 WARN  L188               SmtUtils]: Spent 144.00 ms on a formula simplification that was a NOOP. DAG size: 136
[2020-11-25 13:25:43,708 WARN  L188               SmtUtils]: Spent 256.00 ms on a formula simplification that was a NOOP. DAG size: 209
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
[2020-11-25 13:25:43,822 WARN  L188               SmtUtils]: Spent 112.00 ms on a formula simplification that was a NOOP. DAG size: 179
[2020-11-25 13:25:47,087 WARN  L188               SmtUtils]: Spent 3.26 s on a formula simplification. DAG size of input: 391 DAG size of output: 370
Garbage collection #1: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
Garbage collection #7: 8053 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8053 to 16103
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
[2020-11-25 13:25:47,897 WARN  L188               SmtUtils]: Spent 802.00 ms on a formula simplification that was a NOOP. DAG size: 132
[2020-11-25 13:25:48,301 WARN  L188               SmtUtils]: Spent 403.00 ms on a formula simplification that was a NOOP. DAG size: 217
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
[2020-11-25 13:25:48,730 WARN  L188               SmtUtils]: Spent 428.00 ms on a formula simplification that was a NOOP. DAG size: 181
[2020-11-25 13:25:49,733 WARN  L188               SmtUtils]: Spent 1.00 s on a formula simplification. DAG size of input: 186 DAG size of output: 185
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
[2020-11-25 13:25:50,295 WARN  L188               SmtUtils]: Spent 560.00 ms on a formula simplification that was a NOOP. DAG size: 134
[2020-11-25 13:25:51,183 WARN  L188               SmtUtils]: Spent 886.00 ms on a formula simplification that was a NOOP. DAG size: 390
Garbage collection #1: 137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 137 to 271
Garbage collection #2: 271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 271 to 541
Garbage collection #3: 541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 541 to 1069
Garbage collection #4: 1069 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1069 to 2137
Garbage collection #5: 2137 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2137 to 4273
Garbage collection #6: 4273 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 4273 to 8543
Garbage collection #7: 8543 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 8543 to 17077
[2020-11-25 13:25:53,378 WARN  L188               SmtUtils]: Spent 2.19 s on a formula simplification that was a NOOP. DAG size: 354
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #1: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #7: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
Garbage collection #8: 7027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7027 to 14051
[2020-11-25 13:25:53,645 WARN  L188               SmtUtils]: Spent 149.00 ms on a formula simplification. DAG size of input: 159 DAG size of output: 153
[2020-11-25 13:25:53,822 WARN  L188               SmtUtils]: Spent 176.00 ms on a formula simplification that was a NOOP. DAG size: 378
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
[2020-11-25 13:25:54,771 WARN  L188               SmtUtils]: Spent 933.00 ms on a formula simplification. DAG size of input: 304 DAG size of output: 304
[2020-11-25 13:25:56,094 WARN  L188               SmtUtils]: Spent 1.32 s on a formula simplification. DAG size of input: 383 DAG size of output: 362
Garbage collection #1: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
Garbage collection #7: 8053 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8053 to 16103
Garbage collection #8: 16103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 16103 to 32203
Garbage collection #9: 32203 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 32203 to 64403
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #7: 5281 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5281 to 10559
Garbage collection #8: 10559 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 10559 to 21107
[2020-11-25 13:25:56,564 WARN  L188               SmtUtils]: Spent 436.00 ms on a formula simplification. DAG size of input: 257 DAG size of output: 221
[2020-11-25 13:25:56,985 WARN  L188               SmtUtils]: Spent 419.00 ms on a formula simplification that was a NOOP. DAG size: 453
Garbage collection #1: 179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 179 to 353
Garbage collection #2: 353 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 353 to 701
Garbage collection #3: 701 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 701 to 1399
Garbage collection #4: 1399 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1399 to 2797
Garbage collection #5: 2797 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2797 to 5591
Garbage collection #6: 5591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5591 to 11177
Garbage collection #7: 11177 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11177 to 22349
[2020-11-25 13:25:57,812 WARN  L188               SmtUtils]: Spent 806.00 ms on a formula simplification. DAG size of input: 367 DAG size of output: 357
Received shutdown request...
Cannot interrupt operation gracefully because timeout expired. Forcing shutdown
