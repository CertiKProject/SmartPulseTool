This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 13:23:32,480 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 13:23:32,481 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 13:23:32,491 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 13:23:32,492 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 13:23:32,492 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 13:23:32,493 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 13:23:32,495 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 13:23:32,496 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 13:23:32,497 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 13:23:32,497 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 13:23:32,497 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 13:23:32,498 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 13:23:32,499 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 13:23:32,500 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 13:23:32,500 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 13:23:32,501 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 13:23:32,502 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 13:23:32,503 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 13:23:32,504 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 13:23:32,505 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 13:23:32,506 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 13:23:32,507 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 13:23:32,507 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 13:23:32,508 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 13:23:32,508 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 13:23:32,508 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 13:23:32,509 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 13:23:32,509 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 13:23:32,509 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 13:23:32,510 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 13:23:32,510 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 13:23:32,511 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 13:23:32,511 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 13:23:32,512 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 13:23:32,512 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 13:23:32,513 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 13:23:32,513 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 13:23:32,513 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 13:23:32,514 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 13:23:32,514 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 13:23:32,514 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 13:23:32,522 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 13:23:32,522 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 13:23:32,523 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 13:23:32,523 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 13:23:32,523 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 13:23:32,523 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 13:23:32,523 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 13:23:32,524 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 13:23:32,524 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 13:23:32,524 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 13:23:32,524 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 13:23:32,524 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 13:23:32,524 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 13:23:32,524 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 13:23:32,524 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 13:23:32,525 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 13:23:32,525 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 13:23:32,525 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 13:23:32,525 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 13:23:32,525 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 13:23:32,525 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 13:23:32,525 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 13:23:32,525 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 13:23:32,526 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 13:23:32,526 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 13:23:32,526 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 13:23:32,546 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 13:23:32,556 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 13:23:32,559 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 13:23:32,560 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 13:23:32,560 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 13:23:32,561 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_approve.bpl
[2020-11-25 13:23:32,561 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_approve.bpl'
[2020-11-25 13:23:32,687 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 13:23:32,688 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 13:23:32,689 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 13:23:32,689 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 13:23:32,689 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 13:23:32,705 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:23:32" (1/1) ...
[2020-11-25 13:23:32,707 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:23:32" (1/1) ...
[2020-11-25 13:23:32,753 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:23:32" (1/1) ...
[2020-11-25 13:23:32,754 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:23:32" (1/1) ...
[2020-11-25 13:23:32,784 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:23:32" (1/1) ...
[2020-11-25 13:23:32,804 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:23:32" (1/1) ...
[2020-11-25 13:23:32,819 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:23:32" (1/1) ...
[2020-11-25 13:23:32,837 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 13:23:32,838 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 13:23:32,838 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 13:23:32,840 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 13:23:32,844 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:23:32" (1/1) ...
[2020-11-25 13:23:32,874 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(StandardToken.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(StandardToken.approve(spender, value), return == true && allowed_StandardToken[this][msg.sender][spender] == value &&  totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2]) && owner_wallet_DEAPCoin[this] == old(owner_wallet_DEAPCoin[this]) && unsale_owner_wallet_DEAPCoin[this] == old(unsale_owner_wallet_DEAPCoin[this]) && group_lockup_DEAPCoin[this] == old(group_lockup_DEAPCoin[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]))))
[2020-11-25 13:23:32,880 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(StandardToken.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(StandardToken.approve(spender, value), return == true && allowed_StandardToken[this][msg.sender][spender] == value &&  totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2]) && owner_wallet_DEAPCoin[this] == old(owner_wallet_DEAPCoin[this]) && unsale_owner_wallet_DEAPCoin[this] == old(unsale_owner_wallet_DEAPCoin[this]) && group_lockup_DEAPCoin[this] == old(group_lockup_DEAPCoin[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]))))
[2020-11-25 13:23:32,887 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(StandardToken.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(StandardToken.approve(spender, value), return == true && allowed_StandardToken[this][msg.sender][spender] == value &&  totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2]) && owner_wallet_DEAPCoin[this] == old(owner_wallet_DEAPCoin[this]) && unsale_owner_wallet_DEAPCoin[this] == old(unsale_owner_wallet_DEAPCoin[this]) && group_lockup_DEAPCoin[this] == old(group_lockup_DEAPCoin[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]))))
[2020-11-25 13:23:32,895 INFO  L636   opiaSpecLangObserver]: Parsed ( p1!=msg.sender || p2!=_spender_s743 ) to BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]],BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[_spender_s743,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]]
[2020-11-25 13:23:32,898 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( __ret_0_==true && allowed_StandardToken[this][msg.sender][_spender_s743]==_value_s743 ) && totalSupply__BasicToken[this]==( old(totalSupply__BasicToken[this]) ) ) && balances_BasicToken[this]==( old(balances_BasicToken[this]) ) ) && allowed_StandardToken[this][p1][p2]==( old(allowed_StandardToken[this][p1][p2]) ) ) && owner_wallet_DEAPCoin[this]==( old(owner_wallet_DEAPCoin[this]) ) ) && unsale_owner_wallet_DEAPCoin[this]==( old(unsale_owner_wallet_DEAPCoin[this]) ) ) && group_lockup_DEAPCoin[this]==( old(group_lockup_DEAPCoin[this]) ) ) && mintingFinished_MintableToken[this]==( old(mintingFinished_MintableToken[this]) ) ) && owner_Ownable[this]==( old(owner_Ownable[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,approve~address~uint256_StandardToken>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],[IdentifierExpression[_spender_s743,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],IdentifierExpression[_value_s743,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_wallet_DEAPCoin,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_wallet_DEAPCoin,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[unsale_owner_wallet_DEAPCoin,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[unsale_owner_wallet_DEAPCoin,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[group_lockup_DEAPCoin,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[group_lockup_DEAPCoin,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[mintingFinished_MintableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[mintingFinished_MintableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]]]]]
[2020-11-25 13:23:32,905 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(StandardToken.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(StandardToken.approve(spender, value), return == true && allowed_StandardToken[this][msg.sender][spender] == value &&  totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2]) && owner_wallet_DEAPCoin[this] == old(owner_wallet_DEAPCoin[this]) && unsale_owner_wallet_DEAPCoin[this] == old(unsale_owner_wallet_DEAPCoin[this]) && group_lockup_DEAPCoin[this] == old(group_lockup_DEAPCoin[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]))))
[2020-11-25 13:23:32,905 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_approve_StandardToken0) ==> ( <>AP(success_approve_StandardToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 13:23:32,924 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:23:32 PropertyContainer
[2020-11-25 13:23:32,924 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 13:23:32,924 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 13:23:32,925 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 13:23:32,925 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 13:23:32,925 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:23:32" (1/2) ...
[2020-11-25 13:23:32,926 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 13:23:32,926 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 13:23:32,950 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:23:32" (2/2) ...
[2020-11-25 13:23:32,951 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 13:23:32,951 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 13:23:32,951 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 13:23:32,951 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 13:23:32,952 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:23:32" (1/2) ...
[2020-11-25 13:23:33,005 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 13:23:33,005 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 13:23:33,005 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-25 13:23:33,005 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-25 13:23:33,005 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-25 13:23:33,006 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-25 13:23:33,006 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-25 13:23:33,006 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-25 13:23:33,006 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 13:23:33,006 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 13:23:33,006 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 13:23:33,006 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 13:23:33,006 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 13:23:33,006 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 13:23:33,007 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 13:23:33,007 INFO  L130     BoogieDeclarations]: Found specification of procedure GroupLockup_GroupLockup_NoBaseCtor__success
[2020-11-25 13:23:33,007 INFO  L130     BoogieDeclarations]: Found specification of procedure GroupLockup_GroupLockup
[2020-11-25 13:23:33,007 INFO  L138     BoogieDeclarations]: Found implementation of procedure GroupLockup_GroupLockup
[2020-11-25 13:23:33,007 INFO  L130     BoogieDeclarations]: Found specification of procedure getLockupTime~address_GroupLockup
[2020-11-25 13:23:33,007 INFO  L138     BoogieDeclarations]: Found implementation of procedure getLockupTime~address_GroupLockup
[2020-11-25 13:23:33,007 INFO  L130     BoogieDeclarations]: Found specification of procedure isLockup~uint256_GroupLockup
[2020-11-25 13:23:33,008 INFO  L138     BoogieDeclarations]: Found implementation of procedure isLockup~uint256_GroupLockup
[2020-11-25 13:23:33,008 INFO  L130     BoogieDeclarations]: Found specification of procedure inLockupList~address_GroupLockup
[2020-11-25 13:23:33,008 INFO  L138     BoogieDeclarations]: Found implementation of procedure inLockupList~address_GroupLockup
[2020-11-25 13:23:33,008 INFO  L130     BoogieDeclarations]: Found specification of procedure updateLockupList~address~uint256_GroupLockup
[2020-11-25 13:23:33,008 INFO  L138     BoogieDeclarations]: Found implementation of procedure updateLockupList~address~uint256_GroupLockup
[2020-11-25 13:23:33,008 INFO  L130     BoogieDeclarations]: Found specification of procedure updateLockupTime~uint256~uint256_GroupLockup
[2020-11-25 13:23:33,008 INFO  L138     BoogieDeclarations]: Found implementation of procedure updateLockupTime~uint256~uint256_GroupLockup
[2020-11-25 13:23:33,008 INFO  L130     BoogieDeclarations]: Found specification of procedure lockup_list~address_GroupLockup
[2020-11-25 13:23:33,008 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockup_list~address_GroupLockup
[2020-11-25 13:23:33,008 INFO  L130     BoogieDeclarations]: Found specification of procedure lockup_list_flag~uint256_GroupLockup
[2020-11-25 13:23:33,008 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockup_list_flag~uint256_GroupLockup
[2020-11-25 13:23:33,009 INFO  L130     BoogieDeclarations]: Found specification of procedure user_list~uint256_GroupLockup
[2020-11-25 13:23:33,009 INFO  L138     BoogieDeclarations]: Found implementation of procedure user_list~uint256_GroupLockup
[2020-11-25 13:23:33,009 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-25 13:23:33,009 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic
[2020-11-25 13:23:33,009 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic
[2020-11-25 13:23:33,009 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Basic
[2020-11-25 13:23:33,009 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Basic
[2020-11-25 13:23:33,009 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Basic
[2020-11-25 13:23:33,009 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-25 13:23:33,009 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken
[2020-11-25 13:23:33,010 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken
[2020-11-25 13:23:33,010 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken
[2020-11-25 13:23:33,010 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken
[2020-11-25 13:23:33,010 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken
[2020-11-25 13:23:33,010 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken
[2020-11-25 13:23:33,010 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken
[2020-11-25 13:23:33,010 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken
[2020-11-25 13:23:33,010 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 13:23:33,010 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 13:23:33,010 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 13:23:33,011 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 13:23:33,011 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 13:23:33,011 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 13:23:33,011 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-25 13:23:33,011 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken
[2020-11-25 13:23:33,011 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken
[2020-11-25 13:23:33,011 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-25 13:23:33,011 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-25 13:23:33,011 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken
[2020-11-25 13:23:33,011 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken
[2020-11-25 13:23:33,011 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken
[2020-11-25 13:23:33,012 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken
[2020-11-25 13:23:33,012 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken
[2020-11-25 13:23:33,012 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken
[2020-11-25 13:23:33,012 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-25 13:23:33,012 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-25 13:23:33,012 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-25 13:23:33,012 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken
[2020-11-25 13:23:33,012 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken
[2020-11-25 13:23:33,012 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken
[2020-11-25 13:23:33,012 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken
[2020-11-25 13:23:33,013 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken
[2020-11-25 13:23:33,013 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken
[2020-11-25 13:23:33,013 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken
[2020-11-25 13:23:33,013 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken
[2020-11-25 13:23:33,013 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC223Token_ERC223Token_NoBaseCtor__success
[2020-11-25 13:23:33,013 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC223Token_ERC223Token
[2020-11-25 13:23:33,013 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC223Token_ERC223Token
[2020-11-25 13:23:33,013 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer_ERC223~address~uint256~bytes_ERC223Token
[2020-11-25 13:23:33,013 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC223ContractInterface_ERC223ContractInterface_NoBaseCtor__success
[2020-11-25 13:23:33,014 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC223ContractInterface_ERC223ContractInterface
[2020-11-25 13:23:33,014 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC223ContractInterface_ERC223ContractInterface
[2020-11-25 13:23:33,014 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenFallback~address~uint256~bytes_ERC223ContractInterface
[2020-11-25 13:23:33,014 INFO  L130     BoogieDeclarations]: Found specification of procedure DEAPCoin_DEAPCoin_NoBaseCtor__success
[2020-11-25 13:23:33,014 INFO  L130     BoogieDeclarations]: Found specification of procedure DEAPCoin_DEAPCoin
[2020-11-25 13:23:33,014 INFO  L138     BoogieDeclarations]: Found implementation of procedure DEAPCoin_DEAPCoin
[2020-11-25 13:23:33,014 INFO  L130     BoogieDeclarations]: Found specification of procedure sendTokens~address~uint256_DEAPCoin
[2020-11-25 13:23:33,014 INFO  L138     BoogieDeclarations]: Found implementation of procedure sendTokens~address~uint256_DEAPCoin
[2020-11-25 13:23:33,014 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_DEAPCoin
[2020-11-25 13:23:33,014 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_DEAPCoin
[2020-11-25 13:23:33,014 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer_ERC223~address~uint256~bytes_DEAPCoin
[2020-11-25 13:23:33,015 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer_ERC223~address~uint256~bytes_DEAPCoin
[2020-11-25 13:23:33,015 INFO  L130     BoogieDeclarations]: Found specification of procedure batchTransfer~address~arr~arr_DEAPCoin
[2020-11-25 13:23:33,015 INFO  L138     BoogieDeclarations]: Found implementation of procedure batchTransfer~address~arr~arr_DEAPCoin
[2020-11-25 13:23:33,015 INFO  L130     BoogieDeclarations]: Found specification of procedure name_DEAPCoin
[2020-11-25 13:23:33,015 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_DEAPCoin
[2020-11-25 13:23:33,015 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_DEAPCoin
[2020-11-25 13:23:33,015 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_DEAPCoin
[2020-11-25 13:23:33,015 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_DEAPCoin
[2020-11-25 13:23:33,015 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_DEAPCoin
[2020-11-25 13:23:33,015 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_DEAPCoin
[2020-11-25 13:23:33,015 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_DEAPCoin
[2020-11-25 13:23:33,016 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SALE_SUPPLY_DEAPCoin
[2020-11-25 13:23:33,016 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SALE_SUPPLY_DEAPCoin
[2020-11-25 13:23:33,016 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_UNSALE_SUPPLY_DEAPCoin
[2020-11-25 13:23:33,016 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_UNSALE_SUPPLY_DEAPCoin
[2020-11-25 13:23:33,016 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_wallet_DEAPCoin
[2020-11-25 13:23:33,016 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_wallet_DEAPCoin
[2020-11-25 13:23:33,016 INFO  L130     BoogieDeclarations]: Found specification of procedure unsale_owner_wallet_DEAPCoin
[2020-11-25 13:23:33,016 INFO  L138     BoogieDeclarations]: Found implementation of procedure unsale_owner_wallet_DEAPCoin
[2020-11-25 13:23:33,016 INFO  L130     BoogieDeclarations]: Found specification of procedure group_lockup_DEAPCoin
[2020-11-25 13:23:33,016 INFO  L138     BoogieDeclarations]: Found implementation of procedure group_lockup_DEAPCoin
[2020-11-25 13:23:33,017 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 13:23:33,017 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 13:23:33,017 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 13:23:33,017 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 13:23:33,017 INFO  L130     BoogieDeclarations]: Found specification of procedure canMint_pre__success
[2020-11-25 13:23:33,017 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-25 13:23:33,017 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-25 13:23:33,017 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 13:23:33,017 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 13:23:33,018 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_GroupLockup
[2020-11-25 13:23:33,018 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_GroupLockup
[2020-11-25 13:23:33,018 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Basic
[2020-11-25 13:23:33,018 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Basic
[2020-11-25 13:23:33,018 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BasicToken
[2020-11-25 13:23:33,018 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BasicToken
[2020-11-25 13:23:33,018 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 13:23:33,018 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 13:23:33,019 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_StandardToken
[2020-11-25 13:23:33,019 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_StandardToken
[2020-11-25 13:23:33,019 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MintableToken
[2020-11-25 13:23:33,019 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MintableToken
[2020-11-25 13:23:33,019 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC223Token
[2020-11-25 13:23:33,019 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC223Token
[2020-11-25 13:23:33,019 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC223ContractInterface
[2020-11-25 13:23:33,019 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC223ContractInterface
[2020-11-25 13:23:33,019 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_DEAPCoin
[2020-11-25 13:23:33,019 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 13:23:33,020 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 13:23:33,020 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 13:23:33,020 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-25 13:23:33,020 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-25 13:23:33,020 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-25 13:23:33,020 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-25 13:23:33,020 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-25 13:23:33,020 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-25 13:23:33,021 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 13:23:33,021 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 13:23:33,021 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 13:23:33,021 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 13:23:33,021 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 13:23:33,021 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 13:23:33,021 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 13:23:33,021 INFO  L130     BoogieDeclarations]: Found specification of procedure GroupLockup_GroupLockup_NoBaseCtor__fail
[2020-11-25 13:23:33,021 INFO  L130     BoogieDeclarations]: Found specification of procedure GroupLockup_GroupLockup__success
[2020-11-25 13:23:33,021 INFO  L130     BoogieDeclarations]: Found specification of procedure GroupLockup_GroupLockup__fail
[2020-11-25 13:23:33,022 INFO  L130     BoogieDeclarations]: Found specification of procedure getLockupTime~address_GroupLockup__success
[2020-11-25 13:23:33,022 INFO  L130     BoogieDeclarations]: Found specification of procedure getLockupTime~address_GroupLockup__fail
[2020-11-25 13:23:33,022 INFO  L130     BoogieDeclarations]: Found specification of procedure isLockup~uint256_GroupLockup__success
[2020-11-25 13:23:33,022 INFO  L130     BoogieDeclarations]: Found specification of procedure isLockup~uint256_GroupLockup__fail
[2020-11-25 13:23:33,022 INFO  L130     BoogieDeclarations]: Found specification of procedure inLockupList~address_GroupLockup__success
[2020-11-25 13:23:33,022 INFO  L130     BoogieDeclarations]: Found specification of procedure inLockupList~address_GroupLockup__fail
[2020-11-25 13:23:33,022 INFO  L130     BoogieDeclarations]: Found specification of procedure updateLockupList~address~uint256_GroupLockup__success
[2020-11-25 13:23:33,022 INFO  L130     BoogieDeclarations]: Found specification of procedure updateLockupList~address~uint256_GroupLockup__fail
[2020-11-25 13:23:33,022 INFO  L130     BoogieDeclarations]: Found specification of procedure updateLockupTime~uint256~uint256_GroupLockup__success
[2020-11-25 13:23:33,022 INFO  L130     BoogieDeclarations]: Found specification of procedure updateLockupTime~uint256~uint256_GroupLockup__fail
[2020-11-25 13:23:33,022 INFO  L130     BoogieDeclarations]: Found specification of procedure lockup_list~address_GroupLockup__success
[2020-11-25 13:23:33,023 INFO  L130     BoogieDeclarations]: Found specification of procedure lockup_list~address_GroupLockup__fail
[2020-11-25 13:23:33,023 INFO  L130     BoogieDeclarations]: Found specification of procedure lockup_list_flag~uint256_GroupLockup__success
[2020-11-25 13:23:33,023 INFO  L130     BoogieDeclarations]: Found specification of procedure lockup_list_flag~uint256_GroupLockup__fail
[2020-11-25 13:23:33,023 INFO  L130     BoogieDeclarations]: Found specification of procedure user_list~uint256_GroupLockup__success
[2020-11-25 13:23:33,023 INFO  L130     BoogieDeclarations]: Found specification of procedure user_list~uint256_GroupLockup__fail
[2020-11-25 13:23:33,023 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-25 13:23:33,023 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__success
[2020-11-25 13:23:33,023 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__fail
[2020-11-25 13:23:33,023 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-25 13:23:33,023 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__success
[2020-11-25 13:23:33,023 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__fail
[2020-11-25 13:23:33,023 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__success
[2020-11-25 13:23:33,024 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__fail
[2020-11-25 13:23:33,024 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__success
[2020-11-25 13:23:33,024 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__fail
[2020-11-25 13:23:33,024 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__success
[2020-11-25 13:23:33,024 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__fail
[2020-11-25 13:23:33,024 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 13:23:33,024 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 13:23:33,024 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 13:23:33,024 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-25 13:23:33,024 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__success
[2020-11-25 13:23:33,024 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__fail
[2020-11-25 13:23:33,024 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-25 13:23:33,025 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-25 13:23:33,025 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__success
[2020-11-25 13:23:33,025 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__fail
[2020-11-25 13:23:33,025 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__success
[2020-11-25 13:23:33,025 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__fail
[2020-11-25 13:23:33,025 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-25 13:23:33,025 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-25 13:23:33,025 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-25 13:23:33,025 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-25 13:23:33,025 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-25 13:23:33,025 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__success
[2020-11-25 13:23:33,025 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__fail
[2020-11-25 13:23:33,026 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__success
[2020-11-25 13:23:33,026 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__fail
[2020-11-25 13:23:33,026 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken__success
[2020-11-25 13:23:33,026 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken__fail
[2020-11-25 13:23:33,026 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken__success
[2020-11-25 13:23:33,026 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken__fail
[2020-11-25 13:23:33,026 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC223Token_ERC223Token_NoBaseCtor__fail
[2020-11-25 13:23:33,026 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC223Token_ERC223Token__success
[2020-11-25 13:23:33,026 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC223Token_ERC223Token__fail
[2020-11-25 13:23:33,026 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC223ContractInterface_ERC223ContractInterface_NoBaseCtor__fail
[2020-11-25 13:23:33,026 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC223ContractInterface_ERC223ContractInterface__success
[2020-11-25 13:23:33,027 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC223ContractInterface_ERC223ContractInterface__fail
[2020-11-25 13:23:33,027 INFO  L130     BoogieDeclarations]: Found specification of procedure DEAPCoin_DEAPCoin_NoBaseCtor__fail
[2020-11-25 13:23:33,027 INFO  L130     BoogieDeclarations]: Found specification of procedure DEAPCoin_DEAPCoin__success
[2020-11-25 13:23:33,027 INFO  L130     BoogieDeclarations]: Found specification of procedure DEAPCoin_DEAPCoin__fail
[2020-11-25 13:23:33,027 INFO  L130     BoogieDeclarations]: Found specification of procedure sendTokens~address~uint256_DEAPCoin__success
[2020-11-25 13:23:33,027 INFO  L130     BoogieDeclarations]: Found specification of procedure sendTokens~address~uint256_DEAPCoin__fail
[2020-11-25 13:23:33,027 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_DEAPCoin__success
[2020-11-25 13:23:33,027 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_DEAPCoin__fail
[2020-11-25 13:23:33,027 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer_ERC223~address~uint256~bytes_DEAPCoin__success
[2020-11-25 13:23:33,027 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer_ERC223~address~uint256~bytes_DEAPCoin__fail
[2020-11-25 13:23:33,027 INFO  L130     BoogieDeclarations]: Found specification of procedure batchTransfer~address~arr~arr_DEAPCoin__success
[2020-11-25 13:23:33,027 INFO  L130     BoogieDeclarations]: Found specification of procedure batchTransfer~address~arr~arr_DEAPCoin__fail
[2020-11-25 13:23:33,028 INFO  L130     BoogieDeclarations]: Found specification of procedure name_DEAPCoin__success
[2020-11-25 13:23:33,028 INFO  L130     BoogieDeclarations]: Found specification of procedure name_DEAPCoin__fail
[2020-11-25 13:23:33,028 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_DEAPCoin__success
[2020-11-25 13:23:33,028 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_DEAPCoin__fail
[2020-11-25 13:23:33,028 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_DEAPCoin__success
[2020-11-25 13:23:33,028 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_DEAPCoin__fail
[2020-11-25 13:23:33,028 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_DEAPCoin__success
[2020-11-25 13:23:33,028 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_DEAPCoin__fail
[2020-11-25 13:23:33,028 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SALE_SUPPLY_DEAPCoin__success
[2020-11-25 13:23:33,028 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SALE_SUPPLY_DEAPCoin__fail
[2020-11-25 13:23:33,028 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_UNSALE_SUPPLY_DEAPCoin__success
[2020-11-25 13:23:33,028 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_UNSALE_SUPPLY_DEAPCoin__fail
[2020-11-25 13:23:33,029 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_wallet_DEAPCoin__success
[2020-11-25 13:23:33,029 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_wallet_DEAPCoin__fail
[2020-11-25 13:23:33,029 INFO  L130     BoogieDeclarations]: Found specification of procedure unsale_owner_wallet_DEAPCoin__success
[2020-11-25 13:23:33,029 INFO  L130     BoogieDeclarations]: Found specification of procedure unsale_owner_wallet_DEAPCoin__fail
[2020-11-25 13:23:33,029 INFO  L130     BoogieDeclarations]: Found specification of procedure group_lockup_DEAPCoin__success
[2020-11-25 13:23:33,029 INFO  L130     BoogieDeclarations]: Found specification of procedure group_lockup_DEAPCoin__fail
[2020-11-25 13:23:33,029 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 13:23:33,029 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 13:23:33,029 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 13:23:33,029 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 13:23:33,029 INFO  L130     BoogieDeclarations]: Found specification of procedure canMint_pre__fail
[2020-11-25 13:23:33,029 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 13:23:33,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 13:23:33,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 13:23:33,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 13:23:33,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-25 13:23:33,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-25 13:23:33,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-25 13:23:33,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-25 13:23:33,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-25 13:23:33,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-25 13:23:33,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 13:23:33,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 13:23:33,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 13:23:33,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 13:23:33,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 13:23:33,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 13:23:33,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 13:23:33,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 13:23:33,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 13:23:33,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 13:23:33,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 13:23:33,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 13:23:33,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure GroupLockup_GroupLockup_NoBaseCtor__fail
[2020-11-25 13:23:33,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure GroupLockup_GroupLockup_NoBaseCtor__success
[2020-11-25 13:23:33,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure GroupLockup_GroupLockup__fail
[2020-11-25 13:23:33,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure GroupLockup_GroupLockup__success
[2020-11-25 13:23:33,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure getLockupTime~address_GroupLockup__fail
[2020-11-25 13:23:33,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure getLockupTime~address_GroupLockup__success
[2020-11-25 13:23:33,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure isLockup~uint256_GroupLockup__fail
[2020-11-25 13:23:33,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure isLockup~uint256_GroupLockup__success
[2020-11-25 13:23:33,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure inLockupList~address_GroupLockup__fail
[2020-11-25 13:23:33,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure inLockupList~address_GroupLockup__success
[2020-11-25 13:23:33,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure updateLockupList~address~uint256_GroupLockup__fail
[2020-11-25 13:23:33,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure updateLockupList~address~uint256_GroupLockup__success
[2020-11-25 13:23:33,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure updateLockupTime~uint256~uint256_GroupLockup__fail
[2020-11-25 13:23:33,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure updateLockupTime~uint256~uint256_GroupLockup__success
[2020-11-25 13:23:33,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockup_list~address_GroupLockup__fail
[2020-11-25 13:23:33,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockup_list~address_GroupLockup__success
[2020-11-25 13:23:33,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockup_list_flag~uint256_GroupLockup__fail
[2020-11-25 13:23:33,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockup_list_flag~uint256_GroupLockup__success
[2020-11-25 13:23:33,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure user_list~uint256_GroupLockup__fail
[2020-11-25 13:23:33,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure user_list~uint256_GroupLockup__success
[2020-11-25 13:23:33,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-25 13:23:33,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-25 13:23:33,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__fail
[2020-11-25 13:23:33,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__success
[2020-11-25 13:23:33,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-25 13:23:33,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-25 13:23:33,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__fail
[2020-11-25 13:23:33,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__success
[2020-11-25 13:23:33,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__fail
[2020-11-25 13:23:33,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__success
[2020-11-25 13:23:33,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__fail
[2020-11-25 13:23:33,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__success
[2020-11-25 13:23:33,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__fail
[2020-11-25 13:23:33,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__success
[2020-11-25 13:23:33,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 13:23:33,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 13:23:33,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 13:23:33,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 13:23:33,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-25 13:23:33,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-25 13:23:33,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__fail
[2020-11-25 13:23:33,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__success
[2020-11-25 13:23:33,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-25 13:23:33,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-25 13:23:33,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__fail
[2020-11-25 13:23:33,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__success
[2020-11-25 13:23:33,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__fail
[2020-11-25 13:23:33,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__success
[2020-11-25 13:23:33,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-25 13:23:33,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-25 13:23:33,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-25 13:23:33,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-25 13:23:33,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-25 13:23:33,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-25 13:23:33,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__fail
[2020-11-25 13:23:33,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__success
[2020-11-25 13:23:33,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__fail
[2020-11-25 13:23:33,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__success
[2020-11-25 13:23:33,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken__fail
[2020-11-25 13:23:33,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken__success
[2020-11-25 13:23:33,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken__fail
[2020-11-25 13:23:33,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken__success
[2020-11-25 13:23:33,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC223Token_ERC223Token_NoBaseCtor__fail
[2020-11-25 13:23:33,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC223Token_ERC223Token_NoBaseCtor__success
[2020-11-25 13:23:33,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC223Token_ERC223Token__fail
[2020-11-25 13:23:33,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC223Token_ERC223Token__success
[2020-11-25 13:23:33,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC223ContractInterface_ERC223ContractInterface_NoBaseCtor__fail
[2020-11-25 13:23:33,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC223ContractInterface_ERC223ContractInterface_NoBaseCtor__success
[2020-11-25 13:23:33,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC223ContractInterface_ERC223ContractInterface__fail
[2020-11-25 13:23:33,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC223ContractInterface_ERC223ContractInterface__success
[2020-11-25 13:23:33,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure DEAPCoin_DEAPCoin_NoBaseCtor__fail
[2020-11-25 13:23:33,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure DEAPCoin_DEAPCoin_NoBaseCtor__success
[2020-11-25 13:23:33,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure DEAPCoin_DEAPCoin__fail
[2020-11-25 13:23:33,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure DEAPCoin_DEAPCoin__success
[2020-11-25 13:23:33,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure sendTokens~address~uint256_DEAPCoin__fail
[2020-11-25 13:23:33,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure sendTokens~address~uint256_DEAPCoin__success
[2020-11-25 13:23:33,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_DEAPCoin__fail
[2020-11-25 13:23:33,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_DEAPCoin__success
[2020-11-25 13:23:33,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer_ERC223~address~uint256~bytes_DEAPCoin__fail
[2020-11-25 13:23:33,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer_ERC223~address~uint256~bytes_DEAPCoin__success
[2020-11-25 13:23:33,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure batchTransfer~address~arr~arr_DEAPCoin__fail
[2020-11-25 13:23:33,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure batchTransfer~address~arr~arr_DEAPCoin__success
[2020-11-25 13:23:33,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_DEAPCoin__fail
[2020-11-25 13:23:33,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_DEAPCoin__success
[2020-11-25 13:23:33,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_DEAPCoin__fail
[2020-11-25 13:23:33,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_DEAPCoin__success
[2020-11-25 13:23:33,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_DEAPCoin__fail
[2020-11-25 13:23:33,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_DEAPCoin__success
[2020-11-25 13:23:33,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_DEAPCoin__fail
[2020-11-25 13:23:33,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_DEAPCoin__success
[2020-11-25 13:23:33,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SALE_SUPPLY_DEAPCoin__fail
[2020-11-25 13:23:33,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SALE_SUPPLY_DEAPCoin__success
[2020-11-25 13:23:33,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_UNSALE_SUPPLY_DEAPCoin__fail
[2020-11-25 13:23:33,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_UNSALE_SUPPLY_DEAPCoin__success
[2020-11-25 13:23:33,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_wallet_DEAPCoin__fail
[2020-11-25 13:23:33,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_wallet_DEAPCoin__success
[2020-11-25 13:23:33,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure unsale_owner_wallet_DEAPCoin__fail
[2020-11-25 13:23:33,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure unsale_owner_wallet_DEAPCoin__success
[2020-11-25 13:23:33,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure group_lockup_DEAPCoin__fail
[2020-11-25 13:23:33,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure group_lockup_DEAPCoin__success
[2020-11-25 13:23:33,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 13:23:33,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 13:23:33,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 13:23:33,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 13:23:33,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 13:23:33,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 13:23:33,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 13:23:33,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 13:23:33,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure canMint_pre__fail
[2020-11-25 13:23:33,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure canMint_pre__success
[2020-11-25 13:23:33,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-25 13:23:33,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-25 13:23:33,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 13:23:33,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 13:23:33,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_GroupLockup
[2020-11-25 13:23:33,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_GroupLockup
[2020-11-25 13:23:33,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Basic
[2020-11-25 13:23:33,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Basic
[2020-11-25 13:23:33,042 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BasicToken
[2020-11-25 13:23:33,042 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BasicToken
[2020-11-25 13:23:33,042 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 13:23:33,042 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 13:23:33,042 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_StandardToken
[2020-11-25 13:23:33,043 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_StandardToken
[2020-11-25 13:23:33,043 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MintableToken
[2020-11-25 13:23:33,043 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MintableToken
[2020-11-25 13:23:33,043 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC223Token
[2020-11-25 13:23:33,043 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC223Token
[2020-11-25 13:23:33,043 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC223ContractInterface
[2020-11-25 13:23:33,043 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC223ContractInterface
[2020-11-25 13:23:33,044 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_DEAPCoin
[2020-11-25 13:23:33,044 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 13:23:33,044 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 13:23:33,044 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 13:23:33,612 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 13:23:33,612 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 13:23:33,612 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 13:23:34,020 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 13:23:34,288 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 13:23:34,288 INFO  L286             CfgBuilder]: Removed 11 assue(true) statements.
[2020-11-25 13:23:34,291 INFO  L202        PluginConnector]: Adding new model DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:23:34 BoogieIcfgContainer
[2020-11-25 13:23:34,291 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:23:32" (2/2) ...
[2020-11-25 13:23:34,291 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 13:23:34,291 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@131cc0de and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:23:34, skipping insertion in model container
[2020-11-25 13:23:34,291 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 13:23:34,291 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 13:23:34,291 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 13:23:34,292 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 13:23:34,293 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:23:32" (1/3) ...
[2020-11-25 13:23:34,293 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@396baa9d and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:23:34, skipping insertion in model container
[2020-11-25 13:23:34,293 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:23:32" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 13:23:34,325 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:23:34 NWAContainer
[2020-11-25 13:23:34,325 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 13:23:34,325 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 13:23:34,325 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 13:23:34,326 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 13:23:34,327 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:23:34" (3/4) ...
[2020-11-25 13:23:34,327 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@248c3bdd and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:23:34, skipping insertion in model container
[2020-11-25 13:23:34,327 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:23:34" (4/4) ...
[2020-11-25 13:23:34,329 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 13:23:34,335 INFO  L110   BuchiProductObserver]: Initial RCFG 3983 locations, 5227 edges
[2020-11-25 13:23:34,335 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 13:23:34,346 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 13:23:37,276 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 13:23:37,293 INFO  L110   BuchiProductObserver]: BuchiProgram size 9594 locations, 16980 edges
[2020-11-25 13:23:37,293 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:23:37 BoogieIcfgContainer
[2020-11-25 13:23:37,293 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 13:23:37,293 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 13:23:37,294 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 13:23:37,295 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 13:23:37,296 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:23:37" (1/1) ...
[2020-11-25 13:23:37,508 INFO  L313           BlockEncoder]: Initial Icfg 9594 locations, 16980 edges
[2020-11-25 13:23:37,508 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 13:23:37,508 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 13:23:37,509 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 13:23:37,509 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 13:23:37,532 INFO  L70    emoveInfeasibleEdges]: Removed 153 edges and 25 locations because of local infeasibility
[2020-11-25 13:23:37,553 INFO  L70        RemoveSinkStates]: Removed 20 edges and 13 locations by removing sink states
[2020-11-25 13:23:37,580 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 13:23:37,589 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 13:23:37,598 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 13:23:37,598 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 13:23:37,605 INFO  L313           BlockEncoder]: Encoded RCFG 9492 locations, 16712 edges
[2020-11-25 13:23:37,606 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 01:23:37 BasicIcfg
[2020-11-25 13:23:37,606 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 13:23:37,606 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 13:23:37,607 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 13:23:37,609 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 13:23:37,609 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 13:23:37,609 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:23:32" (1/6) ...
[2020-11-25 13:23:37,611 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@c3927d2 and model type DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:23:37, skipping insertion in model container
[2020-11-25 13:23:37,611 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 13:23:37,611 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:23:32" (2/6) ...
[2020-11-25 13:23:37,611 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@c3927d2 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:23:37, skipping insertion in model container
[2020-11-25 13:23:37,611 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 13:23:37,612 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:23:34" (3/6) ...
[2020-11-25 13:23:37,612 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@c3927d2 and model type DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 01:23:37, skipping insertion in model container
[2020-11-25 13:23:37,612 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 13:23:37,612 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:23:34" (4/6) ...
[2020-11-25 13:23:37,612 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@c3927d2 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:23:37, skipping insertion in model container
[2020-11-25 13:23:37,612 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 13:23:37,612 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:23:37" (5/6) ...
[2020-11-25 13:23:37,613 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@c3927d2 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 01:23:37, skipping insertion in model container
[2020-11-25 13:23:37,613 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 13:23:37,613 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 01:23:37" (6/6) ...
[2020-11-25 13:23:37,614 INFO  L404   chiAutomizerObserver]: Analyzing ICFG DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_approve.bpl_BEv2
[2020-11-25 13:23:37,653 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 13:23:37,654 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 13:23:37,654 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 13:23:37,654 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 13:23:37,654 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 13:23:37,654 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 13:23:37,654 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 13:23:37,654 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 13:23:37,654 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 13:23:37,737 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9492 states.
[2020-11-25 13:23:37,816 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:23:37,816 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:23:37,816 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:23:37,827 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:23:37,827 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:23:37,827 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 13:23:37,827 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9492 states.
[2020-11-25 13:23:37,864 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:23:37,864 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:23:37,864 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:23:37,866 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:23:37,866 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_StandardToken0 := false;
[L3]                  call_approve_StandardToken0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L10886]              assume null == 0;
[L10887]  CALL        call this := FreshRefGenerator__success();
[L5226]               havoc newRef;
[L5227]               assume Alloc[newRef] == false;
[L5228]               Alloc[newRef] := true;
[L5229]               assume newRef != null;
[L10887]  RET         call this := FreshRefGenerator__success();
[L10888]              assume now >= 0;
[L10889]              assume DType[this] == DEAPCoin;
[L10890]              assume msgvalue_MSG == 0;
[L10891]              gas := gas - 53000;
[L10892]  CALL        call DEAPCoin_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L2858]               havoc __exception;
[L2859]               revert := false;
[L2860]   COND FALSE  !(__exception)
[L2898]   CALL        call DEAPCoin_DEAPCoin__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6652]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L6652]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6653]   COND TRUE   revert
[L2898]   RET         call DEAPCoin_DEAPCoin__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L2899]               assume !revert && gas >= 0;
[L10892]  RET         call DEAPCoin_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L10893]              assume !revert && gas >= 0;

Loop:
[L10896]  CALL        call CorralChoice_DEAPCoin(this);
[L10641]              havoc msgsender_MSG;
[L10642]              havoc msgvalue_MSG;
[L10643]              havoc choice;
[L10644]              havoc __ret_0_owner;
[L10645]              havoc newOwner_s54;
[L10646]              havoc __ret_0_totalSupply;
[L10647]              havoc _owner_s578;
[L10648]              havoc __ret_0_balanceOf;
[L10649]              havoc _to_s1284;
[L10650]              havoc _value_s1284;
[L10651]              havoc __ret_0_transfer;
[L10652]              havoc _owner_s759;
[L10653]              havoc _spender_s759;
[L10654]              havoc __ret_0_allowance;
[L10655]              havoc _from_s715;
[L10656]              havoc _to_s715;
[L10657]              havoc _value_s715;
[L10658]              havoc __ret_0_transferFrom;
[L10659]              havoc _spender_s743;
[L10660]              havoc _value_s743;
[L10661]              havoc __ret_0_approve;
[L10662]              havoc _spender_s800;
[L10663]              havoc _addedValue_s800;
[L10664]              havoc __ret_0_increaseApproval;
[L10665]              havoc _spender_s860;
[L10666]              havoc _subtractedValue_s860;
[L10667]              havoc __ret_0_decreaseApproval;
[L10668]              havoc __ret_0_mintingFinished;
[L10669]              havoc _to_s932;
[L10670]              havoc _amount_s932;
[L10671]              havoc __ret_0_mint;
[L10672]              havoc __ret_0_finishMinting;
[L10673]              havoc _to_s1413;
[L10674]              havoc _value_s1413;
[L10675]              havoc _data_s1413;
[L10676]              havoc __ret_0_transfer_ERC223;
[L10677]              havoc __ret_0_name;
[L10678]              havoc __ret_0_symbol;
[L10679]              havoc __ret_0_decimals;
[L10680]              havoc __ret_0_INITIAL_SUPPLY;
[L10681]              havoc __ret_0_INITIAL_SALE_SUPPLY;
[L10682]              havoc __ret_0_INITIAL_UNSALE_SUPPLY;
[L10683]              havoc __ret_0_owner_wallet;
[L10684]              havoc __ret_0_unsale_owner_wallet;
[L10685]              havoc __ret_0_group_lockup;
[L10686]              havoc _sale_owner_wallet_s1076;
[L10687]              havoc _unsale_owner_wallet_s1076;
[L10688]              havoc _group_lockup_s1076;
[L10689]              havoc _to_s1162;
[L10690]              havoc _value_s1162;
[L10691]              havoc __ret_0_sendTokens;
[L10692]              havoc _from_s1567;
[L10693]              havoc _users_s1567;
[L10694]              havoc _values_s1567;
[L10695]              havoc __ret_0_batchTransfer;
[L10696]              havoc tmpNow;
[L10697]              havoc gas;
[L10698]              assume gas > 4000000 && gas <= 8000000;
[L10699]              tmpNow := now;
[L10700]              havoc now;
[L10701]              assume now > tmpNow;
[L10702]              assume msgsender_MSG != null;
[L10703]              assume DType[msgsender_MSG] != Ownable;
[L10704]              assume DType[msgsender_MSG] != SafeMath;
[L10705]              assume DType[msgsender_MSG] != GroupLockup;
[L10706]              assume DType[msgsender_MSG] != ERC20Basic;
[L10707]              assume DType[msgsender_MSG] != BasicToken;
[L10708]              assume DType[msgsender_MSG] != ERC20;
[L10709]              assume DType[msgsender_MSG] != StandardToken;
[L10710]              assume DType[msgsender_MSG] != MintableToken;
[L10711]              assume DType[msgsender_MSG] != ERC223Token;
[L10712]              assume DType[msgsender_MSG] != ERC223ContractInterface;
[L10713]              assume DType[msgsender_MSG] != DEAPCoin;
[L10714]              Alloc[msgsender_MSG] := true;
[L10715]  COND TRUE   choice == 25
[L10716]              gas := gas - 21000;
[L10717]  COND FALSE  !(gas >= 0)
[L10896]  RET         call CorralChoice_DEAPCoin(this);

[2020-11-25 13:23:37,885 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:23:37,885 INFO  L82        PathProgramCache]: Analyzing trace with hash 1896761337, now seen corresponding path program 1 times
[2020-11-25 13:23:37,891 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:23:37,916 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:23:37,963 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 13:23:37,965 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:23:37,965 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 13:23:38,359 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:23:38,368 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 13:23:38,368 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 13:23:38,369 INFO  L87              Difference]: Start difference. First operand 9492 states. Second operand 4 states.
[2020-11-25 13:23:39,018 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:23:39,018 INFO  L93              Difference]: Finished difference Result 4836 states and 5422 transitions.
[2020-11-25 13:23:39,018 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 13:23:39,019 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4836 states and 5422 transitions.
[2020-11-25 13:23:39,045 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:23:39,080 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4836 states to 4832 states and 5414 transitions.
[2020-11-25 13:23:39,080 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 13:23:39,083 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1202
[2020-11-25 13:23:39,083 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4832 states and 5414 transitions.
[2020-11-25 13:23:39,093 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:23:39,093 INFO  L728         BuchiCegarLoop]: Abstraction has 4832 states and 5414 transitions.
[2020-11-25 13:23:39,113 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4832 states and 5414 transitions.
[2020-11-25 13:23:39,175 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4832 to 4832.
[2020-11-25 13:23:39,176 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4832 states.
[2020-11-25 13:23:39,184 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4832 states to 4832 states and 5414 transitions.
[2020-11-25 13:23:39,185 INFO  L751         BuchiCegarLoop]: Abstraction has 4832 states and 5414 transitions.
[2020-11-25 13:23:39,185 INFO  L631         BuchiCegarLoop]: Abstraction has 4832 states and 5414 transitions.
[2020-11-25 13:23:39,185 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 13:23:39,185 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4832 states and 5414 transitions.
[2020-11-25 13:23:39,196 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:23:39,196 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:23:39,196 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:23:39,198 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:23:39,198 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_StandardToken0 := false;
[L3]                  call_approve_StandardToken0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L10886]              assume null == 0;
[L10887]  CALL        call this := FreshRefGenerator__success();
[L5226]               havoc newRef;
[L5227]               assume Alloc[newRef] == false;
[L5228]               Alloc[newRef] := true;
[L5229]               assume newRef != null;
[L10887]  RET         call this := FreshRefGenerator__success();
[L10888]              assume now >= 0;
[L10889]              assume DType[this] == DEAPCoin;
[L10890]              assume msgvalue_MSG == 0;
[L10891]              gas := gas - 53000;
[L10892]  CALL        call DEAPCoin_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L2858]               havoc __exception;
[L2859]               revert := false;
[L2860]   COND FALSE  !(__exception)
[L2898]   CALL        call DEAPCoin_DEAPCoin__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6652]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L6652]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6653]   COND TRUE   revert
[L2898]   RET         call DEAPCoin_DEAPCoin__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L2899]               assume !revert && gas >= 0;
[L10892]  RET         call DEAPCoin_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L10893]              assume !revert && gas >= 0;
[L10896]  CALL        call CorralChoice_DEAPCoin(this);
[L10641]              havoc msgsender_MSG;
[L10642]              havoc msgvalue_MSG;
[L10643]              havoc choice;
[L10644]              havoc __ret_0_owner;
[L10645]              havoc newOwner_s54;
[L10646]              havoc __ret_0_totalSupply;
[L10647]              havoc _owner_s578;
[L10648]              havoc __ret_0_balanceOf;
[L10649]              havoc _to_s1284;
[L10650]              havoc _value_s1284;
[L10651]              havoc __ret_0_transfer;
[L10652]              havoc _owner_s759;
[L10653]              havoc _spender_s759;
[L10654]              havoc __ret_0_allowance;
[L10655]              havoc _from_s715;
[L10656]              havoc _to_s715;
[L10657]              havoc _value_s715;
[L10658]              havoc __ret_0_transferFrom;
[L10659]              havoc _spender_s743;
[L10660]              havoc _value_s743;
[L10661]              havoc __ret_0_approve;
[L10662]              havoc _spender_s800;
[L10663]              havoc _addedValue_s800;
[L10664]              havoc __ret_0_increaseApproval;
[L10665]              havoc _spender_s860;
[L10666]              havoc _subtractedValue_s860;
[L10667]              havoc __ret_0_decreaseApproval;
[L10668]              havoc __ret_0_mintingFinished;
[L10669]              havoc _to_s932;
[L10670]              havoc _amount_s932;
[L10671]              havoc __ret_0_mint;
[L10672]              havoc __ret_0_finishMinting;
[L10673]              havoc _to_s1413;
[L10674]              havoc _value_s1413;
[L10675]              havoc _data_s1413;
[L10676]              havoc __ret_0_transfer_ERC223;
[L10677]              havoc __ret_0_name;
[L10678]              havoc __ret_0_symbol;
[L10679]              havoc __ret_0_decimals;
[L10680]              havoc __ret_0_INITIAL_SUPPLY;
[L10681]              havoc __ret_0_INITIAL_SALE_SUPPLY;
[L10682]              havoc __ret_0_INITIAL_UNSALE_SUPPLY;
[L10683]              havoc __ret_0_owner_wallet;
[L10684]              havoc __ret_0_unsale_owner_wallet;
[L10685]              havoc __ret_0_group_lockup;
[L10686]              havoc _sale_owner_wallet_s1076;
[L10687]              havoc _unsale_owner_wallet_s1076;
[L10688]              havoc _group_lockup_s1076;
[L10689]              havoc _to_s1162;
[L10690]              havoc _value_s1162;
[L10691]              havoc __ret_0_sendTokens;
[L10692]              havoc _from_s1567;
[L10693]              havoc _users_s1567;
[L10694]              havoc _values_s1567;
[L10695]              havoc __ret_0_batchTransfer;
[L10696]              havoc tmpNow;
[L10697]              havoc gas;
[L10698]              assume gas > 4000000 && gas <= 8000000;
[L10699]              tmpNow := now;
[L10700]              havoc now;
[L10701]              assume now > tmpNow;
[L10702]              assume msgsender_MSG != null;
[L10703]              assume DType[msgsender_MSG] != Ownable;
[L10704]              assume DType[msgsender_MSG] != SafeMath;
[L10705]              assume DType[msgsender_MSG] != GroupLockup;
[L10706]              assume DType[msgsender_MSG] != ERC20Basic;
[L10707]              assume DType[msgsender_MSG] != BasicToken;
[L10708]              assume DType[msgsender_MSG] != ERC20;
[L10709]              assume DType[msgsender_MSG] != StandardToken;
[L10710]              assume DType[msgsender_MSG] != MintableToken;
[L10711]              assume DType[msgsender_MSG] != ERC223Token;
[L10712]              assume DType[msgsender_MSG] != ERC223ContractInterface;
[L10713]              assume DType[msgsender_MSG] != DEAPCoin;
[L10714]              Alloc[msgsender_MSG] := true;
[L10715]  COND FALSE  !(choice == 25)
[L10721]  COND FALSE  !(choice == 24)
[L10727]  COND FALSE  !(choice == 23)
[L10733]  COND FALSE  !(choice == 22)
[L10739]  COND FALSE  !(choice == 21)
[L10746]  COND FALSE  !(choice == 20)
[L10752]  COND FALSE  !(choice == 19)
[L10759]  COND TRUE   choice == 18
[L10760]              gas := gas - 21000;
[L10761]  COND TRUE   gas >= 0
[L10762]              assume _value_s743 >= 0 && _value_s743 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10763]              assume msgvalue_MSG == 0;
[L10764]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s743, _value_s743);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != _spender_s743;
[L3]                  call_approve_StandardToken0 := true;
[L3]                  call_approve_StandardToken0 := false;
[L3]                  revert := revert_hold;
[L1941]               havoc __exception;
[L1942]               revert := false;
[L1943]   COND FALSE  !(__exception)
[L1981]   CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s743, _value_s743);
[L6123]               sum_allowed3[msgsender_MSG] := sum_allowed3[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s743];
[L6124]               allowed_StandardToken[this][msgsender_MSG][_spender_s743] := _value_s743;
[L6125]               sum_allowed3[msgsender_MSG] := sum_allowed3[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s743];
[L6126]               assert { :EventEmitted "Approval_StandardToken" } true;
[L6127]               __ret_0_ := true;
[L1981]   RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s743, _value_s743);
[L1982]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !(((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s743] == _value_s743) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && owner_wallet_DEAPCoin[this] == old(owner_wallet_DEAPCoin[this])) && unsale_owner_wallet_DEAPCoin[this] == old(unsale_owner_wallet_DEAPCoin[this])) && group_lockup_DEAPCoin[this] == old(group_lockup_DEAPCoin[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L3]                  revert := revert_hold;
[L10764]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s743, _value_s743);
[L10896]  RET         call CorralChoice_DEAPCoin(this);

Loop:
[L10896]  CALL        call CorralChoice_DEAPCoin(this);
[L10641]              havoc msgsender_MSG;
[L10642]              havoc msgvalue_MSG;
[L10643]              havoc choice;
[L10644]              havoc __ret_0_owner;
[L10645]              havoc newOwner_s54;
[L10646]              havoc __ret_0_totalSupply;
[L10647]              havoc _owner_s578;
[L10648]              havoc __ret_0_balanceOf;
[L10649]              havoc _to_s1284;
[L10650]              havoc _value_s1284;
[L10651]              havoc __ret_0_transfer;
[L10652]              havoc _owner_s759;
[L10653]              havoc _spender_s759;
[L10654]              havoc __ret_0_allowance;
[L10655]              havoc _from_s715;
[L10656]              havoc _to_s715;
[L10657]              havoc _value_s715;
[L10658]              havoc __ret_0_transferFrom;
[L10659]              havoc _spender_s743;
[L10660]              havoc _value_s743;
[L10661]              havoc __ret_0_approve;
[L10662]              havoc _spender_s800;
[L10663]              havoc _addedValue_s800;
[L10664]              havoc __ret_0_increaseApproval;
[L10665]              havoc _spender_s860;
[L10666]              havoc _subtractedValue_s860;
[L10667]              havoc __ret_0_decreaseApproval;
[L10668]              havoc __ret_0_mintingFinished;
[L10669]              havoc _to_s932;
[L10670]              havoc _amount_s932;
[L10671]              havoc __ret_0_mint;
[L10672]              havoc __ret_0_finishMinting;
[L10673]              havoc _to_s1413;
[L10674]              havoc _value_s1413;
[L10675]              havoc _data_s1413;
[L10676]              havoc __ret_0_transfer_ERC223;
[L10677]              havoc __ret_0_name;
[L10678]              havoc __ret_0_symbol;
[L10679]              havoc __ret_0_decimals;
[L10680]              havoc __ret_0_INITIAL_SUPPLY;
[L10681]              havoc __ret_0_INITIAL_SALE_SUPPLY;
[L10682]              havoc __ret_0_INITIAL_UNSALE_SUPPLY;
[L10683]              havoc __ret_0_owner_wallet;
[L10684]              havoc __ret_0_unsale_owner_wallet;
[L10685]              havoc __ret_0_group_lockup;
[L10686]              havoc _sale_owner_wallet_s1076;
[L10687]              havoc _unsale_owner_wallet_s1076;
[L10688]              havoc _group_lockup_s1076;
[L10689]              havoc _to_s1162;
[L10690]              havoc _value_s1162;
[L10691]              havoc __ret_0_sendTokens;
[L10692]              havoc _from_s1567;
[L10693]              havoc _users_s1567;
[L10694]              havoc _values_s1567;
[L10695]              havoc __ret_0_batchTransfer;
[L10696]              havoc tmpNow;
[L10697]              havoc gas;
[L10698]              assume gas > 4000000 && gas <= 8000000;
[L10699]              tmpNow := now;
[L10700]              havoc now;
[L10701]              assume now > tmpNow;
[L10702]              assume msgsender_MSG != null;
[L10703]              assume DType[msgsender_MSG] != Ownable;
[L10704]              assume DType[msgsender_MSG] != SafeMath;
[L10705]              assume DType[msgsender_MSG] != GroupLockup;
[L10706]              assume DType[msgsender_MSG] != ERC20Basic;
[L10707]              assume DType[msgsender_MSG] != BasicToken;
[L10708]              assume DType[msgsender_MSG] != ERC20;
[L10709]              assume DType[msgsender_MSG] != StandardToken;
[L10710]              assume DType[msgsender_MSG] != MintableToken;
[L10711]              assume DType[msgsender_MSG] != ERC223Token;
[L10712]              assume DType[msgsender_MSG] != ERC223ContractInterface;
[L10713]              assume DType[msgsender_MSG] != DEAPCoin;
[L10714]              Alloc[msgsender_MSG] := true;
[L10715]  COND FALSE  !(choice == 25)
[L10721]  COND FALSE  !(choice == 24)
[L10727]  COND FALSE  !(choice == 23)
[L10733]  COND FALSE  !(choice == 22)
[L10739]  COND FALSE  !(choice == 21)
[L10746]  COND FALSE  !(choice == 20)
[L10752]  COND FALSE  !(choice == 19)
[L10759]  COND TRUE   choice == 18
[L10760]              gas := gas - 21000;
[L10761]  COND TRUE   gas >= 0
[L10762]              assume _value_s743 >= 0 && _value_s743 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10763]              assume msgvalue_MSG == 0;
[L10764]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s743, _value_s743);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != _spender_s743;
[L3]                  call_approve_StandardToken0 := true;
[L3]                  call_approve_StandardToken0 := false;
[L3]                  revert := revert_hold;
[L1941]               havoc __exception;
[L1942]               revert := false;
[L1943]   COND FALSE  !(__exception)
[L1981]   CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s743, _value_s743);
[L6123]               sum_allowed3[msgsender_MSG] := sum_allowed3[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s743];
[L6124]               allowed_StandardToken[this][msgsender_MSG][_spender_s743] := _value_s743;
[L6125]               sum_allowed3[msgsender_MSG] := sum_allowed3[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s743];
[L6126]               assert { :EventEmitted "Approval_StandardToken" } true;
[L6127]               __ret_0_ := true;
[L1981]   RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s743, _value_s743);
[L1982]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !(((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s743] == _value_s743) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && owner_wallet_DEAPCoin[this] == old(owner_wallet_DEAPCoin[this])) && unsale_owner_wallet_DEAPCoin[this] == old(unsale_owner_wallet_DEAPCoin[this])) && group_lockup_DEAPCoin[this] == old(group_lockup_DEAPCoin[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L3]                  revert := revert_hold;
[L10764]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s743, _value_s743);
[L10896]  RET         call CorralChoice_DEAPCoin(this);

[2020-11-25 13:23:39,203 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:23:39,203 INFO  L82        PathProgramCache]: Analyzing trace with hash -1760922640, now seen corresponding path program 1 times
[2020-11-25 13:23:39,204 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:23:39,214 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:23:39,240 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 13:23:39,240 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:23:39,241 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 13:23:39,242 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:23:39,242 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 13:23:39,242 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 13:23:39,242 INFO  L87              Difference]: Start difference. First operand 4832 states and 5414 transitions. cyclomatic complexity: 588 Second operand 3 states.
[2020-11-25 13:23:39,340 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:23:39,341 INFO  L93              Difference]: Finished difference Result 5716 states and 6360 transitions.
[2020-11-25 13:23:39,341 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 13:23:39,341 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5716 states and 6360 transitions.
[2020-11-25 13:23:39,358 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 13:23:39,381 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5716 states to 5716 states and 6360 transitions.
[2020-11-25 13:23:39,381 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1411
[2020-11-25 13:23:39,382 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1411
[2020-11-25 13:23:39,383 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5716 states and 6360 transitions.
[2020-11-25 13:23:39,389 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:23:39,389 INFO  L728         BuchiCegarLoop]: Abstraction has 5716 states and 6360 transitions.
[2020-11-25 13:23:39,395 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5716 states and 6360 transitions.
[2020-11-25 13:23:39,444 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5716 to 5152.
[2020-11-25 13:23:39,445 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5152 states.
[2020-11-25 13:23:39,451 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5152 states to 5152 states and 5670 transitions.
[2020-11-25 13:23:39,451 INFO  L751         BuchiCegarLoop]: Abstraction has 5152 states and 5670 transitions.
[2020-11-25 13:23:39,452 INFO  L631         BuchiCegarLoop]: Abstraction has 5152 states and 5670 transitions.
[2020-11-25 13:23:39,452 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 13:23:39,452 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5152 states and 5670 transitions.
[2020-11-25 13:23:39,459 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:23:39,459 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:23:39,459 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:23:39,464 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [24, 24, 24, 24, 24, 24, 24, 24, 24, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:23:39,464 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_StandardToken0 := false;
[L3]                  call_approve_StandardToken0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L10886]              assume null == 0;
[L10887]  CALL        call this := FreshRefGenerator__success();
[L5226]               havoc newRef;
[L5227]               assume Alloc[newRef] == false;
[L5228]               Alloc[newRef] := true;
[L5229]               assume newRef != null;
[L10887]  RET         call this := FreshRefGenerator__success();
[L10888]              assume now >= 0;
[L10889]              assume DType[this] == DEAPCoin;
[L10890]              assume msgvalue_MSG == 0;
[L10891]              gas := gas - 53000;
[L10892]  CALL        call DEAPCoin_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L2858]               havoc __exception;
[L2859]               revert := false;
[L2860]   COND FALSE  !(__exception)
[L2898]   CALL        call DEAPCoin_DEAPCoin__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6652]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L6652]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6653]   COND FALSE  !(revert)
[L6656]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5953]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]   COND FALSE  !(revert)
[L5957]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5957]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6656]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6657]   COND FALSE  !(revert)
[L6660]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5824]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5825]   COND FALSE  !(revert)
[L5828]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5802]               assume msgsender_MSG != null;
[L5803]               Balance[this] := 0;
[L5804]               balances_BasicToken[this] := zeroRefintArr();
[L5805]               sum_balances2[this] := 0;
[L5806]               totalSupply__BasicToken[this] := 0;
[L5828]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5829]   COND FALSE  !(revert)
[L6660]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6661]   COND FALSE  !(revert)
[L6664]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6005]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L6005]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]   COND FALSE  !(revert)
[L6009]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5953]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]   COND FALSE  !(revert)
[L5957]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5957]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6009]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6010]   COND FALSE  !(revert)
[L6013]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5824]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5825]   COND FALSE  !(revert)
[L5828]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5802]               assume msgsender_MSG != null;
[L5803]               Balance[this] := 0;
[L5804]               balances_BasicToken[this] := zeroRefintArr();
[L5805]               sum_balances2[this] := 0;
[L5806]               totalSupply__BasicToken[this] := 0;
[L5828]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5829]   COND FALSE  !(revert)
[L6013]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]   COND FALSE  !(revert)
[L6017]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5976]               assume msgsender_MSG != null;
[L5977]               Balance[this] := 0;
[L5978]               allowed_StandardToken[this] := zeroRefRefintArr();
[L5979]               sum_allowed3[this] := 0;
[L6017]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6018]   COND FALSE  !(revert)
[L6664]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6665]   COND FALSE  !(revert)
[L6668]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5262]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5245]               assume msgsender_MSG != null;
[L5246]               Balance[this] := 0;
[L5247]               owner_Ownable[this] := null;
[L5249]               owner_Ownable[this] := msgsender_MSG;
[L5262]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5263]   COND FALSE  !(revert)
[L6668]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6669]   COND FALSE  !(revert)
[L6672]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6265]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L6265]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6266]   COND FALSE  !(revert)
[L6269]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5953]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]   COND FALSE  !(revert)
[L5957]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5957]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6269]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6270]   COND FALSE  !(revert)
[L6273]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5824]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5825]   COND FALSE  !(revert)
[L5828]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5802]               assume msgsender_MSG != null;
[L5803]               Balance[this] := 0;
[L5804]               balances_BasicToken[this] := zeroRefintArr();
[L5805]               sum_balances2[this] := 0;
[L5806]               totalSupply__BasicToken[this] := 0;
[L5828]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5829]   COND FALSE  !(revert)
[L6273]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6274]   COND FALSE  !(revert)
[L6277]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6005]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L6005]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]   COND FALSE  !(revert)
[L6009]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5953]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]   COND FALSE  !(revert)
[L5957]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5957]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6009]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6010]   COND FALSE  !(revert)
[L6013]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5824]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5825]   COND FALSE  !(revert)
[L5828]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5802]               assume msgsender_MSG != null;
[L5803]               Balance[this] := 0;
[L5804]               balances_BasicToken[this] := zeroRefintArr();
[L5805]               sum_balances2[this] := 0;
[L5806]               totalSupply__BasicToken[this] := 0;
[L5828]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5829]   COND FALSE  !(revert)
[L6013]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]   COND FALSE  !(revert)
[L6017]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5976]               assume msgsender_MSG != null;
[L5977]               Balance[this] := 0;
[L5978]               allowed_StandardToken[this] := zeroRefRefintArr();
[L5979]               sum_allowed3[this] := 0;
[L6017]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6018]   COND FALSE  !(revert)
[L6277]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6278]   COND FALSE  !(revert)
[L6281]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5262]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5245]               assume msgsender_MSG != null;
[L5246]               Balance[this] := 0;
[L5247]               owner_Ownable[this] := null;
[L5249]               owner_Ownable[this] := msgsender_MSG;
[L5262]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5263]   COND FALSE  !(revert)
[L6281]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6282]   COND FALSE  !(revert)
[L6285]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6229]               assume msgsender_MSG != null;
[L6230]               Balance[this] := 0;
[L6231]               mintingFinished_MintableToken[this] := false;
[L6285]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6286]   COND FALSE  !(revert)
[L6672]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6673]   COND FALSE  !(revert)
[L6676]   CALL        call ERC223Token_ERC223Token__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L6442]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6443]   COND FALSE  !(revert)
[L6446]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5953]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]   COND FALSE  !(revert)
[L5957]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5957]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6446]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6447]   COND FALSE  !(revert)
[L6450]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5824]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5825]   COND FALSE  !(revert)
[L5828]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5802]               assume msgsender_MSG != null;
[L5803]               Balance[this] := 0;
[L5804]               balances_BasicToken[this] := zeroRefintArr();
[L5805]               sum_balances2[this] := 0;
[L5806]               totalSupply__BasicToken[this] := 0;
[L5828]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5829]   COND FALSE  !(revert)
[L6450]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6005]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L6005]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]   COND FALSE  !(revert)
[L6009]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5953]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]   COND FALSE  !(revert)
[L5957]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5957]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6009]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6010]   COND FALSE  !(revert)
[L6013]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5824]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5825]   COND FALSE  !(revert)
[L5828]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5802]               assume msgsender_MSG != null;
[L5803]               Balance[this] := 0;
[L5804]               balances_BasicToken[this] := zeroRefintArr();
[L5805]               sum_balances2[this] := 0;
[L5806]               totalSupply__BasicToken[this] := 0;
[L5828]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5829]   COND FALSE  !(revert)
[L6013]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]   COND FALSE  !(revert)
[L6017]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5976]               assume msgsender_MSG != null;
[L5977]               Balance[this] := 0;
[L5978]               allowed_StandardToken[this] := zeroRefRefintArr();
[L5979]               sum_allowed3[this] := 0;
[L6017]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6018]   COND FALSE  !(revert)
[L6454]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L6458]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5262]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5245]               assume msgsender_MSG != null;
[L5246]               Balance[this] := 0;
[L5247]               owner_Ownable[this] := null;
[L5249]               owner_Ownable[this] := msgsender_MSG;
[L5262]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5263]   COND FALSE  !(revert)
[L6458]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6459]   COND FALSE  !(revert)
[L6462]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6265]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L6265]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6266]   COND FALSE  !(revert)
[L6269]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5953]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]   COND FALSE  !(revert)
[L5957]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5957]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6269]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6270]   COND FALSE  !(revert)
[L6273]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5824]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5825]   COND FALSE  !(revert)
[L5828]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5802]               assume msgsender_MSG != null;
[L5803]               Balance[this] := 0;
[L5804]               balances_BasicToken[this] := zeroRefintArr();
[L5805]               sum_balances2[this] := 0;
[L5806]               totalSupply__BasicToken[this] := 0;
[L5828]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5829]   COND FALSE  !(revert)
[L6273]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6274]   COND FALSE  !(revert)
[L6277]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6005]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L6005]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]   COND FALSE  !(revert)
[L6009]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5953]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]   COND FALSE  !(revert)
[L5957]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5957]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6009]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6010]   COND FALSE  !(revert)
[L6013]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5824]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5825]   COND FALSE  !(revert)
[L5828]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5802]               assume msgsender_MSG != null;
[L5803]               Balance[this] := 0;
[L5804]               balances_BasicToken[this] := zeroRefintArr();
[L5805]               sum_balances2[this] := 0;
[L5806]               totalSupply__BasicToken[this] := 0;
[L5828]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5829]   COND FALSE  !(revert)
[L6013]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]   COND FALSE  !(revert)
[L6017]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5976]               assume msgsender_MSG != null;
[L5977]               Balance[this] := 0;
[L5978]               allowed_StandardToken[this] := zeroRefRefintArr();
[L5979]               sum_allowed3[this] := 0;
[L6017]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6018]   COND FALSE  !(revert)
[L6277]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6278]   COND FALSE  !(revert)
[L6281]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5262]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5245]               assume msgsender_MSG != null;
[L5246]               Balance[this] := 0;
[L5247]               owner_Ownable[this] := null;
[L5249]               owner_Ownable[this] := msgsender_MSG;
[L5262]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5263]   COND FALSE  !(revert)
[L6281]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6282]   COND FALSE  !(revert)
[L6285]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6229]               assume msgsender_MSG != null;
[L6230]               Balance[this] := 0;
[L6231]               mintingFinished_MintableToken[this] := false;
[L6285]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6286]   COND FALSE  !(revert)
[L6462]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6463]   COND FALSE  !(revert)
[L6466]   CALL        call ERC223Token_ERC223Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6403]               assume msgsender_MSG != null;
[L6404]               Balance[this] := 0;
[L6466]   RET         call ERC223Token_ERC223Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]   COND FALSE  !(revert)
[L6676]   RET         call ERC223Token_ERC223Token__success(this, msgsender_MSG, msgvalue_MSG);
[L6677]   COND FALSE  !(revert)
[L6680]   CALL        call DEAPCoin_DEAPCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6562]               assume msgsender_MSG != null;
[L6563]               Balance[this] := 0;
[L6564]               name_DEAPCoin[this] := -635866188;
[L6565]               symbol_DEAPCoin[this] := -1031151507;
[L6566]               decimals_DEAPCoin[this] := 18;
[L6567]               __var_19 := decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6568]               INITIAL_SUPPLY_DEAPCoin[this] := 30000000000 * (nonlinearPow(10, decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6569]               __var_20 := decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6570]               INITIAL_SALE_SUPPLY_DEAPCoin[this] := 12000000000 * (nonlinearPow(10, decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6571]               INITIAL_UNSALE_SUPPLY_DEAPCoin[this] := (INITIAL_SUPPLY_DEAPCoin[this] - INITIAL_SALE_SUPPLY_DEAPCoin[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6572]               owner_wallet_DEAPCoin[this] := null;
[L6573]               unsale_owner_wallet_DEAPCoin[this] := null;
[L6575]               group_lockup_DEAPCoin[this] := _group_lockup_s1076;
[L6576]               owner_wallet_DEAPCoin[this] := _sale_owner_wallet_s1076;
[L6577]               unsale_owner_wallet_DEAPCoin[this] := _unsale_owner_wallet_s1076;
[L6578]   COND TRUE   DType[this] == DEAPCoin
[L6579]   CALL        call __var_16 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, owner_wallet_DEAPCoin[this], INITIAL_SALE_SUPPLY_DEAPCoin[this]);
[L6323]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9398]   COND TRUE   !(msgsender_MSG == owner_Ownable[this])
[L9399]               revert := true;
[L6323]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND TRUE   revert
[L6579]   RET         call __var_16 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, owner_wallet_DEAPCoin[this], INITIAL_SALE_SUPPLY_DEAPCoin[this]);
[L6580]   COND TRUE   revert
[L6680]   RET         call DEAPCoin_DEAPCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6681]   COND FALSE  !(revert)
[L2898]   RET         call DEAPCoin_DEAPCoin__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L2899]               assume !revert && gas >= 0;
[L10892]  RET         call DEAPCoin_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L10893]              assume !revert && gas >= 0;
[L10896]  CALL        call CorralChoice_DEAPCoin(this);
[L10641]              havoc msgsender_MSG;
[L10642]              havoc msgvalue_MSG;
[L10643]              havoc choice;
[L10644]              havoc __ret_0_owner;
[L10645]              havoc newOwner_s54;
[L10646]              havoc __ret_0_totalSupply;
[L10647]              havoc _owner_s578;
[L10648]              havoc __ret_0_balanceOf;
[L10649]              havoc _to_s1284;
[L10650]              havoc _value_s1284;
[L10651]              havoc __ret_0_transfer;
[L10652]              havoc _owner_s759;
[L10653]              havoc _spender_s759;
[L10654]              havoc __ret_0_allowance;
[L10655]              havoc _from_s715;
[L10656]              havoc _to_s715;
[L10657]              havoc _value_s715;
[L10658]              havoc __ret_0_transferFrom;
[L10659]              havoc _spender_s743;
[L10660]              havoc _value_s743;
[L10661]              havoc __ret_0_approve;
[L10662]              havoc _spender_s800;
[L10663]              havoc _addedValue_s800;
[L10664]              havoc __ret_0_increaseApproval;
[L10665]              havoc _spender_s860;
[L10666]              havoc _subtractedValue_s860;
[L10667]              havoc __ret_0_decreaseApproval;
[L10668]              havoc __ret_0_mintingFinished;
[L10669]              havoc _to_s932;
[L10670]              havoc _amount_s932;
[L10671]              havoc __ret_0_mint;
[L10672]              havoc __ret_0_finishMinting;
[L10673]              havoc _to_s1413;
[L10674]              havoc _value_s1413;
[L10675]              havoc _data_s1413;
[L10676]              havoc __ret_0_transfer_ERC223;
[L10677]              havoc __ret_0_name;
[L10678]              havoc __ret_0_symbol;
[L10679]              havoc __ret_0_decimals;
[L10680]              havoc __ret_0_INITIAL_SUPPLY;
[L10681]              havoc __ret_0_INITIAL_SALE_SUPPLY;
[L10682]              havoc __ret_0_INITIAL_UNSALE_SUPPLY;
[L10683]              havoc __ret_0_owner_wallet;
[L10684]              havoc __ret_0_unsale_owner_wallet;
[L10685]              havoc __ret_0_group_lockup;
[L10686]              havoc _sale_owner_wallet_s1076;
[L10687]              havoc _unsale_owner_wallet_s1076;
[L10688]              havoc _group_lockup_s1076;
[L10689]              havoc _to_s1162;
[L10690]              havoc _value_s1162;
[L10691]              havoc __ret_0_sendTokens;
[L10692]              havoc _from_s1567;
[L10693]              havoc _users_s1567;
[L10694]              havoc _values_s1567;
[L10695]              havoc __ret_0_batchTransfer;
[L10696]              havoc tmpNow;
[L10697]              havoc gas;
[L10698]              assume gas > 4000000 && gas <= 8000000;
[L10699]              tmpNow := now;
[L10700]              havoc now;
[L10701]              assume now > tmpNow;
[L10702]              assume msgsender_MSG != null;
[L10703]              assume DType[msgsender_MSG] != Ownable;
[L10704]              assume DType[msgsender_MSG] != SafeMath;
[L10705]              assume DType[msgsender_MSG] != GroupLockup;
[L10706]              assume DType[msgsender_MSG] != ERC20Basic;
[L10707]              assume DType[msgsender_MSG] != BasicToken;
[L10708]              assume DType[msgsender_MSG] != ERC20;
[L10709]              assume DType[msgsender_MSG] != StandardToken;
[L10710]              assume DType[msgsender_MSG] != MintableToken;
[L10711]              assume DType[msgsender_MSG] != ERC223Token;
[L10712]              assume DType[msgsender_MSG] != ERC223ContractInterface;
[L10713]              assume DType[msgsender_MSG] != DEAPCoin;
[L10714]              Alloc[msgsender_MSG] := true;
[L10715]  COND FALSE  !(choice == 25)
[L10721]  COND FALSE  !(choice == 24)
[L10727]  COND FALSE  !(choice == 23)
[L10733]  COND FALSE  !(choice == 22)
[L10739]  COND FALSE  !(choice == 21)
[L10746]  COND FALSE  !(choice == 20)
[L10752]  COND FALSE  !(choice == 19)
[L10759]  COND TRUE   choice == 18
[L10760]              gas := gas - 21000;
[L10761]  COND TRUE   gas >= 0
[L10762]              assume _value_s743 >= 0 && _value_s743 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10763]              assume msgvalue_MSG == 0;
[L10764]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s743, _value_s743);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != _spender_s743;
[L3]                  call_approve_StandardToken0 := true;
[L3]                  call_approve_StandardToken0 := false;
[L3]                  revert := revert_hold;
[L1941]               havoc __exception;
[L1942]               revert := false;
[L1943]   COND FALSE  !(__exception)
[L1981]   CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s743, _value_s743);
[L6123]               sum_allowed3[msgsender_MSG] := sum_allowed3[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s743];
[L6124]               allowed_StandardToken[this][msgsender_MSG][_spender_s743] := _value_s743;
[L6125]               sum_allowed3[msgsender_MSG] := sum_allowed3[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s743];
[L6126]               assert { :EventEmitted "Approval_StandardToken" } true;
[L6127]               __ret_0_ := true;
[L1981]   RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s743, _value_s743);
[L1982]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !(((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s743] == _value_s743) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && owner_wallet_DEAPCoin[this] == old(owner_wallet_DEAPCoin[this])) && unsale_owner_wallet_DEAPCoin[this] == old(unsale_owner_wallet_DEAPCoin[this])) && group_lockup_DEAPCoin[this] == old(group_lockup_DEAPCoin[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L3]                  revert := revert_hold;
[L10764]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s743, _value_s743);
[L10896]  RET         call CorralChoice_DEAPCoin(this);

Loop:
[L10896]  CALL        call CorralChoice_DEAPCoin(this);
[L10641]              havoc msgsender_MSG;
[L10642]              havoc msgvalue_MSG;
[L10643]              havoc choice;
[L10644]              havoc __ret_0_owner;
[L10645]              havoc newOwner_s54;
[L10646]              havoc __ret_0_totalSupply;
[L10647]              havoc _owner_s578;
[L10648]              havoc __ret_0_balanceOf;
[L10649]              havoc _to_s1284;
[L10650]              havoc _value_s1284;
[L10651]              havoc __ret_0_transfer;
[L10652]              havoc _owner_s759;
[L10653]              havoc _spender_s759;
[L10654]              havoc __ret_0_allowance;
[L10655]              havoc _from_s715;
[L10656]              havoc _to_s715;
[L10657]              havoc _value_s715;
[L10658]              havoc __ret_0_transferFrom;
[L10659]              havoc _spender_s743;
[L10660]              havoc _value_s743;
[L10661]              havoc __ret_0_approve;
[L10662]              havoc _spender_s800;
[L10663]              havoc _addedValue_s800;
[L10664]              havoc __ret_0_increaseApproval;
[L10665]              havoc _spender_s860;
[L10666]              havoc _subtractedValue_s860;
[L10667]              havoc __ret_0_decreaseApproval;
[L10668]              havoc __ret_0_mintingFinished;
[L10669]              havoc _to_s932;
[L10670]              havoc _amount_s932;
[L10671]              havoc __ret_0_mint;
[L10672]              havoc __ret_0_finishMinting;
[L10673]              havoc _to_s1413;
[L10674]              havoc _value_s1413;
[L10675]              havoc _data_s1413;
[L10676]              havoc __ret_0_transfer_ERC223;
[L10677]              havoc __ret_0_name;
[L10678]              havoc __ret_0_symbol;
[L10679]              havoc __ret_0_decimals;
[L10680]              havoc __ret_0_INITIAL_SUPPLY;
[L10681]              havoc __ret_0_INITIAL_SALE_SUPPLY;
[L10682]              havoc __ret_0_INITIAL_UNSALE_SUPPLY;
[L10683]              havoc __ret_0_owner_wallet;
[L10684]              havoc __ret_0_unsale_owner_wallet;
[L10685]              havoc __ret_0_group_lockup;
[L10686]              havoc _sale_owner_wallet_s1076;
[L10687]              havoc _unsale_owner_wallet_s1076;
[L10688]              havoc _group_lockup_s1076;
[L10689]              havoc _to_s1162;
[L10690]              havoc _value_s1162;
[L10691]              havoc __ret_0_sendTokens;
[L10692]              havoc _from_s1567;
[L10693]              havoc _users_s1567;
[L10694]              havoc _values_s1567;
[L10695]              havoc __ret_0_batchTransfer;
[L10696]              havoc tmpNow;
[L10697]              havoc gas;
[L10698]              assume gas > 4000000 && gas <= 8000000;
[L10699]              tmpNow := now;
[L10700]              havoc now;
[L10701]              assume now > tmpNow;
[L10702]              assume msgsender_MSG != null;
[L10703]              assume DType[msgsender_MSG] != Ownable;
[L10704]              assume DType[msgsender_MSG] != SafeMath;
[L10705]              assume DType[msgsender_MSG] != GroupLockup;
[L10706]              assume DType[msgsender_MSG] != ERC20Basic;
[L10707]              assume DType[msgsender_MSG] != BasicToken;
[L10708]              assume DType[msgsender_MSG] != ERC20;
[L10709]              assume DType[msgsender_MSG] != StandardToken;
[L10710]              assume DType[msgsender_MSG] != MintableToken;
[L10711]              assume DType[msgsender_MSG] != ERC223Token;
[L10712]              assume DType[msgsender_MSG] != ERC223ContractInterface;
[L10713]              assume DType[msgsender_MSG] != DEAPCoin;
[L10714]              Alloc[msgsender_MSG] := true;
[L10715]  COND FALSE  !(choice == 25)
[L10721]  COND FALSE  !(choice == 24)
[L10727]  COND FALSE  !(choice == 23)
[L10733]  COND FALSE  !(choice == 22)
[L10739]  COND FALSE  !(choice == 21)
[L10746]  COND FALSE  !(choice == 20)
[L10752]  COND FALSE  !(choice == 19)
[L10759]  COND TRUE   choice == 18
[L10760]              gas := gas - 21000;
[L10761]  COND TRUE   gas >= 0
[L10762]              assume _value_s743 >= 0 && _value_s743 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10763]              assume msgvalue_MSG == 0;
[L10764]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s743, _value_s743);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != _spender_s743;
[L3]                  call_approve_StandardToken0 := true;
[L3]                  call_approve_StandardToken0 := false;
[L3]                  revert := revert_hold;
[L1941]               havoc __exception;
[L1942]               revert := false;
[L1943]   COND FALSE  !(__exception)
[L1981]   CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s743, _value_s743);
[L6123]               sum_allowed3[msgsender_MSG] := sum_allowed3[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s743];
[L6124]               allowed_StandardToken[this][msgsender_MSG][_spender_s743] := _value_s743;
[L6125]               sum_allowed3[msgsender_MSG] := sum_allowed3[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s743];
[L6126]               assert { :EventEmitted "Approval_StandardToken" } true;
[L6127]               __ret_0_ := true;
[L1981]   RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s743, _value_s743);
[L1982]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !(((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s743] == _value_s743) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && owner_wallet_DEAPCoin[this] == old(owner_wallet_DEAPCoin[this])) && unsale_owner_wallet_DEAPCoin[this] == old(unsale_owner_wallet_DEAPCoin[this])) && group_lockup_DEAPCoin[this] == old(group_lockup_DEAPCoin[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L3]                  revert := revert_hold;
[L10764]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s743, _value_s743);
[L10896]  RET         call CorralChoice_DEAPCoin(this);

[2020-11-25 13:23:39,472 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:23:39,473 INFO  L82        PathProgramCache]: Analyzing trace with hash 909188553, now seen corresponding path program 1 times
[2020-11-25 13:23:39,474 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:23:39,503 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:23:39,795 INFO  L134       CoverageAnalysis]: Checked inductivity of 3875 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 3875 trivial. 0 not checked.
[2020-11-25 13:23:39,795 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:23:39,795 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 13:23:39,796 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:23:39,796 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 13:23:39,796 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 13:23:39,796 INFO  L87              Difference]: Start difference. First operand 5152 states and 5670 transitions. cyclomatic complexity: 524 Second operand 3 states.
[2020-11-25 13:23:39,861 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:23:39,861 INFO  L93              Difference]: Finished difference Result 5878 states and 6519 transitions.
[2020-11-25 13:23:39,861 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 13:23:39,861 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5878 states and 6519 transitions.
[2020-11-25 13:23:39,873 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 13:23:39,891 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5878 states to 5714 states and 6325 transitions.
[2020-11-25 13:23:39,891 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1358
[2020-11-25 13:23:39,892 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1374
[2020-11-25 13:23:39,892 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5714 states and 6325 transitions.
[2020-11-25 13:23:39,898 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:23:39,898 INFO  L728         BuchiCegarLoop]: Abstraction has 5714 states and 6325 transitions.
[2020-11-25 13:23:39,902 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5714 states and 6325 transitions.
[2020-11-25 13:23:39,939 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5714 to 5218.
[2020-11-25 13:23:39,939 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5218 states.
[2020-11-25 13:23:39,944 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5218 states to 5218 states and 5704 transitions.
[2020-11-25 13:23:39,944 INFO  L751         BuchiCegarLoop]: Abstraction has 5218 states and 5704 transitions.
[2020-11-25 13:23:39,944 INFO  L631         BuchiCegarLoop]: Abstraction has 5218 states and 5704 transitions.
[2020-11-25 13:23:39,944 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 13:23:39,944 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5218 states and 5704 transitions.
[2020-11-25 13:23:39,950 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 13:23:39,950 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:23:39,950 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:23:39,954 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [24, 24, 24, 24, 24, 24, 24, 24, 24, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:23:39,954 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_StandardToken0 := false;
[L3]                  call_approve_StandardToken0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L10886]              assume null == 0;
[L10887]  CALL        call this := FreshRefGenerator__success();
[L5226]               havoc newRef;
[L5227]               assume Alloc[newRef] == false;
[L5228]               Alloc[newRef] := true;
[L5229]               assume newRef != null;
[L10887]  RET         call this := FreshRefGenerator__success();
[L10888]              assume now >= 0;
[L10889]              assume DType[this] == DEAPCoin;
[L10890]              assume msgvalue_MSG == 0;
[L10891]              gas := gas - 53000;
[L10892]  CALL        call DEAPCoin_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L2858]               havoc __exception;
[L2859]               revert := false;
[L2860]   COND TRUE   __exception
[L2861]               __tmp__Balance := Balance;
[L2862]               __tmp__DType := DType;
[L2863]               __tmp__Alloc := Alloc;
[L2864]               __tmp__balance_ADDR := balance_ADDR;
[L2865]               __tmp__M_Ref_int := M_Ref_int;
[L2866]               __tmp__sum_lockup_list0 := sum_lockup_list0;
[L2867]               __tmp__M_int_bool := M_int_bool;
[L2868]               __tmp__sum_lockup_list_flag1 := sum_lockup_list_flag1;
[L2869]               __tmp__sum_balances2 := sum_balances2;
[L2870]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L2871]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2872]               __tmp__sum_allowed3 := sum_allowed3;
[L2873]               __tmp__M_int_Ref := M_int_Ref;
[L2874]               __tmp__sum := sum;
[L2875]               __tmp__M_int_int := M_int_int;
[L2876]               __tmp__Length := Length;
[L2877]               __tmp__now := now;
[L2878]               __tmp__owner_Ownable := owner_Ownable;
[L2879]               __tmp__lockup_list_GroupLockup := lockup_list_GroupLockup;
[L2880]               __tmp__lockup_list_flag_GroupLockup := lockup_list_flag_GroupLockup;
[L2881]               __tmp__user_list_GroupLockup := user_list_GroupLockup;
[L2882]               __tmp__balances_BasicToken := balances_BasicToken;
[L2883]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L2884]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L2885]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L2886]               __tmp__name_DEAPCoin := name_DEAPCoin;
[L2887]               __tmp__symbol_DEAPCoin := symbol_DEAPCoin;
[L2888]               __tmp__decimals_DEAPCoin := decimals_DEAPCoin;
[L2889]               __tmp__INITIAL_SUPPLY_DEAPCoin := INITIAL_SUPPLY_DEAPCoin;
[L2890]               __tmp__INITIAL_SALE_SUPPLY_DEAPCoin := INITIAL_SALE_SUPPLY_DEAPCoin;
[L2891]               __tmp__INITIAL_UNSALE_SUPPLY_DEAPCoin := INITIAL_UNSALE_SUPPLY_DEAPCoin;
[L2892]               __tmp__owner_wallet_DEAPCoin := owner_wallet_DEAPCoin;
[L2893]               __tmp__unsale_owner_wallet_DEAPCoin := unsale_owner_wallet_DEAPCoin;
[L2894]               __tmp__group_lockup_DEAPCoin := group_lockup_DEAPCoin;
[L2895]   CALL        call DEAPCoin_DEAPCoin__fail(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6611]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5759]               assume msgsender_MSG != null;
[L5760]               __tmp__Balance[this] := 0;
[L5774]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5775]   COND FALSE  !(revert)
[L6611]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6612]   COND FALSE  !(revert)
[L6615]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5941]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5759]               assume msgsender_MSG != null;
[L5760]               __tmp__Balance[this] := 0;
[L5774]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5775]   COND FALSE  !(revert)
[L5941]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5942]   COND FALSE  !(revert)
[L5945]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5926]               assume msgsender_MSG != null;
[L5927]               __tmp__Balance[this] := 0;
[L5945]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5946]   COND FALSE  !(revert)
[L6615]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6616]   COND FALSE  !(revert)
[L6619]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5812]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5759]               assume msgsender_MSG != null;
[L5760]               __tmp__Balance[this] := 0;
[L5774]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5775]   COND FALSE  !(revert)
[L5812]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5813]   COND FALSE  !(revert)
[L5816]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5791]               assume msgsender_MSG != null;
[L5792]               __tmp__Balance[this] := 0;
[L5793]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L5794]               __tmp__sum_balances2[this] := 0;
[L5795]               __tmp__totalSupply__BasicToken[this] := 0;
[L5816]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5817]   COND FALSE  !(revert)
[L6619]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6620]   COND FALSE  !(revert)
[L6623]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5985]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5759]               assume msgsender_MSG != null;
[L5760]               __tmp__Balance[this] := 0;
[L5774]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5775]   COND FALSE  !(revert)
[L5985]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5986]   COND FALSE  !(revert)
[L5989]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5941]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5759]               assume msgsender_MSG != null;
[L5760]               __tmp__Balance[this] := 0;
[L5774]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5775]   COND FALSE  !(revert)
[L5941]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5942]   COND FALSE  !(revert)
[L5945]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5926]               assume msgsender_MSG != null;
[L5927]               __tmp__Balance[this] := 0;
[L5945]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5946]   COND FALSE  !(revert)
[L5989]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5990]   COND FALSE  !(revert)
[L5993]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5812]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5759]               assume msgsender_MSG != null;
[L5760]               __tmp__Balance[this] := 0;
[L5774]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5775]   COND FALSE  !(revert)
[L5812]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5813]   COND FALSE  !(revert)
[L5816]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5791]               assume msgsender_MSG != null;
[L5792]               __tmp__Balance[this] := 0;
[L5793]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L5794]               __tmp__sum_balances2[this] := 0;
[L5795]               __tmp__totalSupply__BasicToken[this] := 0;
[L5816]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5817]   COND FALSE  !(revert)
[L5993]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5994]   COND FALSE  !(revert)
[L5997]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5966]               assume msgsender_MSG != null;
[L5967]               __tmp__Balance[this] := 0;
[L5968]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L5969]               __tmp__sum_allowed3[this] := 0;
[L5997]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5998]   COND FALSE  !(revert)
[L6623]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6624]   COND FALSE  !(revert)
[L6627]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5254]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5235]               assume msgsender_MSG != null;
[L5236]               __tmp__Balance[this] := 0;
[L5237]               __tmp__owner_Ownable[this] := null;
[L5239]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5254]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5255]   COND FALSE  !(revert)
[L6627]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6628]   COND FALSE  !(revert)
[L6631]   CALL        call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6237]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5759]               assume msgsender_MSG != null;
[L5760]               __tmp__Balance[this] := 0;
[L5774]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5775]   COND FALSE  !(revert)
[L6237]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6238]   COND FALSE  !(revert)
[L6241]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5941]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5759]               assume msgsender_MSG != null;
[L5760]               __tmp__Balance[this] := 0;
[L5774]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5775]   COND FALSE  !(revert)
[L5941]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5942]   COND FALSE  !(revert)
[L5945]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5926]               assume msgsender_MSG != null;
[L5927]               __tmp__Balance[this] := 0;
[L5945]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5946]   COND FALSE  !(revert)
[L6241]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6242]   COND FALSE  !(revert)
[L6245]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5812]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5759]               assume msgsender_MSG != null;
[L5760]               __tmp__Balance[this] := 0;
[L5774]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5775]   COND FALSE  !(revert)
[L5812]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5813]   COND FALSE  !(revert)
[L5816]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5791]               assume msgsender_MSG != null;
[L5792]               __tmp__Balance[this] := 0;
[L5793]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L5794]               __tmp__sum_balances2[this] := 0;
[L5795]               __tmp__totalSupply__BasicToken[this] := 0;
[L5816]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5817]   COND FALSE  !(revert)
[L6245]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6246]   COND FALSE  !(revert)
[L6249]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5985]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5759]               assume msgsender_MSG != null;
[L5760]               __tmp__Balance[this] := 0;
[L5774]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5775]   COND FALSE  !(revert)
[L5985]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5986]   COND FALSE  !(revert)
[L5989]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5941]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5759]               assume msgsender_MSG != null;
[L5760]               __tmp__Balance[this] := 0;
[L5774]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5775]   COND FALSE  !(revert)
[L5941]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5942]   COND FALSE  !(revert)
[L5945]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5926]               assume msgsender_MSG != null;
[L5927]               __tmp__Balance[this] := 0;
[L5945]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5946]   COND FALSE  !(revert)
[L5989]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5990]   COND FALSE  !(revert)
[L5993]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5812]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5759]               assume msgsender_MSG != null;
[L5760]               __tmp__Balance[this] := 0;
[L5774]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5775]   COND FALSE  !(revert)
[L5812]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5813]   COND FALSE  !(revert)
[L5816]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5791]               assume msgsender_MSG != null;
[L5792]               __tmp__Balance[this] := 0;
[L5793]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L5794]               __tmp__sum_balances2[this] := 0;
[L5795]               __tmp__totalSupply__BasicToken[this] := 0;
[L5816]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5817]   COND FALSE  !(revert)
[L5993]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5994]   COND FALSE  !(revert)
[L5997]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5966]               assume msgsender_MSG != null;
[L5967]               __tmp__Balance[this] := 0;
[L5968]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L5969]               __tmp__sum_allowed3[this] := 0;
[L5997]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5998]   COND FALSE  !(revert)
[L6249]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6250]   COND FALSE  !(revert)
[L6253]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5254]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5235]               assume msgsender_MSG != null;
[L5236]               __tmp__Balance[this] := 0;
[L5237]               __tmp__owner_Ownable[this] := null;
[L5239]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5254]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5255]   COND FALSE  !(revert)
[L6253]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6254]   COND FALSE  !(revert)
[L6257]   CALL        call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6220]               assume msgsender_MSG != null;
[L6221]               __tmp__Balance[this] := 0;
[L6222]               __tmp__mintingFinished_MintableToken[this] := false;
[L6257]   RET         call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6258]   COND FALSE  !(revert)
[L6631]   RET         call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6632]   COND FALSE  !(revert)
[L6635]   CALL        call ERC223Token_ERC223Token__fail(this, msgsender_MSG, msgvalue_MSG);
[L6410]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5759]               assume msgsender_MSG != null;
[L5760]               __tmp__Balance[this] := 0;
[L5774]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5775]   COND FALSE  !(revert)
[L6410]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6411]   COND FALSE  !(revert)
[L6414]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5941]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5759]               assume msgsender_MSG != null;
[L5760]               __tmp__Balance[this] := 0;
[L5774]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5775]   COND FALSE  !(revert)
[L5941]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5942]   COND FALSE  !(revert)
[L5945]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5926]               assume msgsender_MSG != null;
[L5927]               __tmp__Balance[this] := 0;
[L5945]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5946]   COND FALSE  !(revert)
[L6414]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6415]   COND FALSE  !(revert)
[L6418]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5812]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5759]               assume msgsender_MSG != null;
[L5760]               __tmp__Balance[this] := 0;
[L5774]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5775]   COND FALSE  !(revert)
[L5812]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5813]   COND FALSE  !(revert)
[L5816]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5791]               assume msgsender_MSG != null;
[L5792]               __tmp__Balance[this] := 0;
[L5793]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L5794]               __tmp__sum_balances2[this] := 0;
[L5795]               __tmp__totalSupply__BasicToken[this] := 0;
[L5816]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5817]   COND FALSE  !(revert)
[L6418]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6419]   COND FALSE  !(revert)
[L6422]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5985]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5759]               assume msgsender_MSG != null;
[L5760]               __tmp__Balance[this] := 0;
[L5774]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5775]   COND FALSE  !(revert)
[L5985]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5986]   COND FALSE  !(revert)
[L5989]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5941]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5759]               assume msgsender_MSG != null;
[L5760]               __tmp__Balance[this] := 0;
[L5774]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5775]   COND FALSE  !(revert)
[L5941]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5942]   COND FALSE  !(revert)
[L5945]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5926]               assume msgsender_MSG != null;
[L5927]               __tmp__Balance[this] := 0;
[L5945]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5946]   COND FALSE  !(revert)
[L5989]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5990]   COND FALSE  !(revert)
[L5993]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5812]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5759]               assume msgsender_MSG != null;
[L5760]               __tmp__Balance[this] := 0;
[L5774]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5775]   COND FALSE  !(revert)
[L5812]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5813]   COND FALSE  !(revert)
[L5816]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5791]               assume msgsender_MSG != null;
[L5792]               __tmp__Balance[this] := 0;
[L5793]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L5794]               __tmp__sum_balances2[this] := 0;
[L5795]               __tmp__totalSupply__BasicToken[this] := 0;
[L5816]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5817]   COND FALSE  !(revert)
[L5993]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5994]   COND FALSE  !(revert)
[L5997]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5966]               assume msgsender_MSG != null;
[L5967]               __tmp__Balance[this] := 0;
[L5968]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L5969]               __tmp__sum_allowed3[this] := 0;
[L5997]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5998]   COND FALSE  !(revert)
[L6422]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6423]   COND FALSE  !(revert)
[L6426]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5254]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5235]               assume msgsender_MSG != null;
[L5236]               __tmp__Balance[this] := 0;
[L5237]               __tmp__owner_Ownable[this] := null;
[L5239]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5254]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5255]   COND FALSE  !(revert)
[L6426]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6427]   COND FALSE  !(revert)
[L6430]   CALL        call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6237]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5759]               assume msgsender_MSG != null;
[L5760]               __tmp__Balance[this] := 0;
[L5774]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5775]   COND FALSE  !(revert)
[L6237]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6238]   COND FALSE  !(revert)
[L6241]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5941]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5759]               assume msgsender_MSG != null;
[L5760]               __tmp__Balance[this] := 0;
[L5774]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5775]   COND FALSE  !(revert)
[L5941]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5942]   COND FALSE  !(revert)
[L5945]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5926]               assume msgsender_MSG != null;
[L5927]               __tmp__Balance[this] := 0;
[L5945]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5946]   COND FALSE  !(revert)
[L6241]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6242]   COND FALSE  !(revert)
[L6245]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5812]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5759]               assume msgsender_MSG != null;
[L5760]               __tmp__Balance[this] := 0;
[L5774]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5775]   COND FALSE  !(revert)
[L5812]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5813]   COND FALSE  !(revert)
[L5816]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5791]               assume msgsender_MSG != null;
[L5792]               __tmp__Balance[this] := 0;
[L5793]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L5794]               __tmp__sum_balances2[this] := 0;
[L5795]               __tmp__totalSupply__BasicToken[this] := 0;
[L5816]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5817]   COND FALSE  !(revert)
[L6245]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6246]   COND FALSE  !(revert)
[L6249]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5985]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5759]               assume msgsender_MSG != null;
[L5760]               __tmp__Balance[this] := 0;
[L5774]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5775]   COND FALSE  !(revert)
[L5985]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5986]   COND FALSE  !(revert)
[L5989]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5941]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5759]               assume msgsender_MSG != null;
[L5760]               __tmp__Balance[this] := 0;
[L5774]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5775]   COND FALSE  !(revert)
[L5941]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5942]   COND FALSE  !(revert)
[L5945]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5926]               assume msgsender_MSG != null;
[L5927]               __tmp__Balance[this] := 0;
[L5945]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5946]   COND FALSE  !(revert)
[L5989]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5990]   COND FALSE  !(revert)
[L5993]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5812]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5759]               assume msgsender_MSG != null;
[L5760]               __tmp__Balance[this] := 0;
[L5774]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5775]   COND FALSE  !(revert)
[L5812]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5813]   COND FALSE  !(revert)
[L5816]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5791]               assume msgsender_MSG != null;
[L5792]               __tmp__Balance[this] := 0;
[L5793]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L5794]               __tmp__sum_balances2[this] := 0;
[L5795]               __tmp__totalSupply__BasicToken[this] := 0;
[L5816]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5817]   COND FALSE  !(revert)
[L5993]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5994]   COND FALSE  !(revert)
[L5997]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5966]               assume msgsender_MSG != null;
[L5967]               __tmp__Balance[this] := 0;
[L5968]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L5969]               __tmp__sum_allowed3[this] := 0;
[L5997]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5998]   COND FALSE  !(revert)
[L6249]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6250]   COND FALSE  !(revert)
[L6253]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5254]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5235]               assume msgsender_MSG != null;
[L5236]               __tmp__Balance[this] := 0;
[L5237]               __tmp__owner_Ownable[this] := null;
[L5239]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5254]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5255]   COND FALSE  !(revert)
[L6253]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6254]   COND FALSE  !(revert)
[L6257]   CALL        call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6220]               assume msgsender_MSG != null;
[L6221]               __tmp__Balance[this] := 0;
[L6222]               __tmp__mintingFinished_MintableToken[this] := false;
[L6257]   RET         call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6258]   COND FALSE  !(revert)
[L6430]   RET         call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND FALSE  !(revert)
[L6434]   CALL        call ERC223Token_ERC223Token_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6395]               assume msgsender_MSG != null;
[L6396]               __tmp__Balance[this] := 0;
[L6434]   RET         call ERC223Token_ERC223Token_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6435]   COND FALSE  !(revert)
[L6635]   RET         call ERC223Token_ERC223Token__fail(this, msgsender_MSG, msgvalue_MSG);
[L6636]   COND FALSE  !(revert)
[L6639]   CALL        call DEAPCoin_DEAPCoin_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6512]               assume msgsender_MSG != null;
[L6513]               __tmp__Balance[this] := 0;
[L6514]               __tmp__name_DEAPCoin[this] := -635866188;
[L6515]               __tmp__symbol_DEAPCoin[this] := -1031151507;
[L6516]               __tmp__decimals_DEAPCoin[this] := 18;
[L6517]               __var_19 := __tmp__decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6518]               __tmp__INITIAL_SUPPLY_DEAPCoin[this] := 30000000000 * (nonlinearPow(10, __tmp__decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6519]               __var_20 := __tmp__decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6520]               __tmp__INITIAL_SALE_SUPPLY_DEAPCoin[this] := 12000000000 * (nonlinearPow(10, __tmp__decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6521]               __tmp__INITIAL_UNSALE_SUPPLY_DEAPCoin[this] := (__tmp__INITIAL_SUPPLY_DEAPCoin[this] - __tmp__INITIAL_SALE_SUPPLY_DEAPCoin[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6522]               __tmp__owner_wallet_DEAPCoin[this] := null;
[L6523]               __tmp__unsale_owner_wallet_DEAPCoin[this] := null;
[L6525]               __tmp__group_lockup_DEAPCoin[this] := _group_lockup_s1076;
[L6526]               __tmp__owner_wallet_DEAPCoin[this] := _sale_owner_wallet_s1076;
[L6527]               __tmp__unsale_owner_wallet_DEAPCoin[this] := _unsale_owner_wallet_s1076;
[L6528]   COND TRUE   __tmp__DType[this] == DEAPCoin
[L6529]   CALL        call __var_16 := mint~address~uint256_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__owner_wallet_DEAPCoin[this], __tmp__INITIAL_SALE_SUPPLY_DEAPCoin[this]);
[L6295]   CALL        call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9390]   COND FALSE  !(!(msgsender_MSG == __tmp__owner_Ownable[this]))
[L6295]   RET         call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6296]   COND FALSE  !(revert)
[L6299]   CALL        call canMint_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9406]   COND FALSE  !(!!__tmp__mintingFinished_MintableToken[this])
[L6299]   RET         call canMint_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6300]   COND FALSE  !(revert)
[L6303]   CALL        call __var_14 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__totalSupply__BasicToken[this], _amount_s932);
[L5393]               c_s146 := (a_s146 + b_s146) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5394]               c_s146 := c_s146;
[L6303]   RET         call __var_14 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__totalSupply__BasicToken[this], _amount_s932);
[L6304]   COND FALSE  !(revert)
[L6307]               __tmp__totalSupply__BasicToken[this] := __var_14;
[L6308]   CALL        call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_BasicToken[this][_to_s932], _amount_s932);
[L5393]               c_s146 := (a_s146 + b_s146) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5394]               c_s146 := c_s146;
[L6308]   RET         call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_BasicToken[this][_to_s932], _amount_s932);
[L6309]   COND FALSE  !(revert)
[L6312]               __tmp__sum_balances2[this] := __tmp__sum_balances2[this] - __tmp__balances_BasicToken[this][_to_s932];
[L6313]               __tmp__balances_BasicToken[this][_to_s932] := __var_15;
[L6314]               __tmp__sum_balances2[this] := __tmp__sum_balances2[this] + __tmp__balances_BasicToken[this][_to_s932];
[L6315]               __ret_0_ := true;
[L6529]   RET         call __var_16 := mint~address~uint256_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__owner_wallet_DEAPCoin[this], __tmp__INITIAL_SALE_SUPPLY_DEAPCoin[this]);
[L6530]   COND FALSE  !(revert)
[L6536]   COND TRUE   __tmp__DType[this] == DEAPCoin
[L6537]   CALL        call __var_17 := mint~address~uint256_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__unsale_owner_wallet_DEAPCoin[this], __tmp__INITIAL_UNSALE_SUPPLY_DEAPCoin[this]);
[L6295]   CALL        call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9390]   COND FALSE  !(!(msgsender_MSG == __tmp__owner_Ownable[this]))
[L6295]   RET         call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6296]   COND FALSE  !(revert)
[L6299]   CALL        call canMint_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9406]   COND FALSE  !(!!__tmp__mintingFinished_MintableToken[this])
[L6299]   RET         call canMint_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6300]   COND FALSE  !(revert)
[L6303]   CALL        call __var_14 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__totalSupply__BasicToken[this], _amount_s932);
[L5393]               c_s146 := (a_s146 + b_s146) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5394]               c_s146 := c_s146;
[L6303]   RET         call __var_14 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__totalSupply__BasicToken[this], _amount_s932);
[L6304]   COND FALSE  !(revert)
[L6307]               __tmp__totalSupply__BasicToken[this] := __var_14;
[L6308]   CALL        call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_BasicToken[this][_to_s932], _amount_s932);
[L5393]               c_s146 := (a_s146 + b_s146) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5394]               c_s146 := c_s146;
[L6308]   RET         call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_BasicToken[this][_to_s932], _amount_s932);
[L6309]   COND FALSE  !(revert)
[L6312]               __tmp__sum_balances2[this] := __tmp__sum_balances2[this] - __tmp__balances_BasicToken[this][_to_s932];
[L6313]               __tmp__balances_BasicToken[this][_to_s932] := __var_15;
[L6314]               __tmp__sum_balances2[this] := __tmp__sum_balances2[this] + __tmp__balances_BasicToken[this][_to_s932];
[L6315]               __ret_0_ := true;
[L6537]   RET         call __var_17 := mint~address~uint256_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__unsale_owner_wallet_DEAPCoin[this], __tmp__INITIAL_UNSALE_SUPPLY_DEAPCoin[this]);
[L6538]   COND FALSE  !(revert)
[L6544]   COND TRUE   __tmp__DType[this] == DEAPCoin
[L6545]   CALL        call __var_18 := finishMinting_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6351]   CALL        call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9390]   COND FALSE  !(!(msgsender_MSG == __tmp__owner_Ownable[this]))
[L6351]   RET         call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6352]   COND FALSE  !(revert)
[L6355]   CALL        call canMint_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9406]   COND FALSE  !(!!__tmp__mintingFinished_MintableToken[this])
[L6355]   RET         call canMint_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6356]   COND FALSE  !(revert)
[L6359]               __tmp__mintingFinished_MintableToken[this] := true;
[L6360]               __ret_0_ := true;
[L6545]   RET         call __var_18 := finishMinting_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6546]   COND FALSE  !(revert)
[L6639]   RET         call DEAPCoin_DEAPCoin_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6640]   COND FALSE  !(revert)
[L2895]   RET         call DEAPCoin_DEAPCoin__fail(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L2896]               assume revert || gas < 0;
[L10892]  RET         call DEAPCoin_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L10893]              assume !revert && gas >= 0;
[L10896]  CALL        call CorralChoice_DEAPCoin(this);
[L10641]              havoc msgsender_MSG;
[L10642]              havoc msgvalue_MSG;
[L10643]              havoc choice;
[L10644]              havoc __ret_0_owner;
[L10645]              havoc newOwner_s54;
[L10646]              havoc __ret_0_totalSupply;
[L10647]              havoc _owner_s578;
[L10648]              havoc __ret_0_balanceOf;
[L10649]              havoc _to_s1284;
[L10650]              havoc _value_s1284;
[L10651]              havoc __ret_0_transfer;
[L10652]              havoc _owner_s759;
[L10653]              havoc _spender_s759;
[L10654]              havoc __ret_0_allowance;
[L10655]              havoc _from_s715;
[L10656]              havoc _to_s715;
[L10657]              havoc _value_s715;
[L10658]              havoc __ret_0_transferFrom;
[L10659]              havoc _spender_s743;
[L10660]              havoc _value_s743;
[L10661]              havoc __ret_0_approve;
[L10662]              havoc _spender_s800;
[L10663]              havoc _addedValue_s800;
[L10664]              havoc __ret_0_increaseApproval;
[L10665]              havoc _spender_s860;
[L10666]              havoc _subtractedValue_s860;
[L10667]              havoc __ret_0_decreaseApproval;
[L10668]              havoc __ret_0_mintingFinished;
[L10669]              havoc _to_s932;
[L10670]              havoc _amount_s932;
[L10671]              havoc __ret_0_mint;
[L10672]              havoc __ret_0_finishMinting;
[L10673]              havoc _to_s1413;
[L10674]              havoc _value_s1413;
[L10675]              havoc _data_s1413;
[L10676]              havoc __ret_0_transfer_ERC223;
[L10677]              havoc __ret_0_name;
[L10678]              havoc __ret_0_symbol;
[L10679]              havoc __ret_0_decimals;
[L10680]              havoc __ret_0_INITIAL_SUPPLY;
[L10681]              havoc __ret_0_INITIAL_SALE_SUPPLY;
[L10682]              havoc __ret_0_INITIAL_UNSALE_SUPPLY;
[L10683]              havoc __ret_0_owner_wallet;
[L10684]              havoc __ret_0_unsale_owner_wallet;
[L10685]              havoc __ret_0_group_lockup;
[L10686]              havoc _sale_owner_wallet_s1076;
[L10687]              havoc _unsale_owner_wallet_s1076;
[L10688]              havoc _group_lockup_s1076;
[L10689]              havoc _to_s1162;
[L10690]              havoc _value_s1162;
[L10691]              havoc __ret_0_sendTokens;
[L10692]              havoc _from_s1567;
[L10693]              havoc _users_s1567;
[L10694]              havoc _values_s1567;
[L10695]              havoc __ret_0_batchTransfer;
[L10696]              havoc tmpNow;
[L10697]              havoc gas;
[L10698]              assume gas > 4000000 && gas <= 8000000;
[L10699]              tmpNow := now;
[L10700]              havoc now;
[L10701]              assume now > tmpNow;
[L10702]              assume msgsender_MSG != null;
[L10703]              assume DType[msgsender_MSG] != Ownable;
[L10704]              assume DType[msgsender_MSG] != SafeMath;
[L10705]              assume DType[msgsender_MSG] != GroupLockup;
[L10706]              assume DType[msgsender_MSG] != ERC20Basic;
[L10707]              assume DType[msgsender_MSG] != BasicToken;
[L10708]              assume DType[msgsender_MSG] != ERC20;
[L10709]              assume DType[msgsender_MSG] != StandardToken;
[L10710]              assume DType[msgsender_MSG] != MintableToken;
[L10711]              assume DType[msgsender_MSG] != ERC223Token;
[L10712]              assume DType[msgsender_MSG] != ERC223ContractInterface;
[L10713]              assume DType[msgsender_MSG] != DEAPCoin;
[L10714]              Alloc[msgsender_MSG] := true;
[L10715]  COND FALSE  !(choice == 25)
[L10721]  COND FALSE  !(choice == 24)
[L10727]  COND FALSE  !(choice == 23)
[L10733]  COND FALSE  !(choice == 22)
[L10739]  COND FALSE  !(choice == 21)
[L10746]  COND FALSE  !(choice == 20)
[L10752]  COND FALSE  !(choice == 19)
[L10759]  COND TRUE   choice == 18
[L10760]              gas := gas - 21000;
[L10761]  COND TRUE   gas >= 0
[L10762]              assume _value_s743 >= 0 && _value_s743 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10763]              assume msgvalue_MSG == 0;
[L10764]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s743, _value_s743);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != _spender_s743;
[L3]                  call_approve_StandardToken0 := true;
[L3]                  call_approve_StandardToken0 := false;
[L3]                  revert := revert_hold;
[L1941]               havoc __exception;
[L1942]               revert := false;
[L1943]   COND FALSE  !(__exception)
[L1981]   CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s743, _value_s743);
[L6123]               sum_allowed3[msgsender_MSG] := sum_allowed3[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s743];
[L6124]               allowed_StandardToken[this][msgsender_MSG][_spender_s743] := _value_s743;
[L6125]               sum_allowed3[msgsender_MSG] := sum_allowed3[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s743];
[L6126]               assert { :EventEmitted "Approval_StandardToken" } true;
[L6127]               __ret_0_ := true;
[L1981]   RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s743, _value_s743);
[L1982]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !(((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s743] == _value_s743) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && owner_wallet_DEAPCoin[this] == old(owner_wallet_DEAPCoin[this])) && unsale_owner_wallet_DEAPCoin[this] == old(unsale_owner_wallet_DEAPCoin[this])) && group_lockup_DEAPCoin[this] == old(group_lockup_DEAPCoin[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L3]                  revert := revert_hold;
[L10764]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s743, _value_s743);
[L10896]  RET         call CorralChoice_DEAPCoin(this);

Loop:
[L10896]  CALL        call CorralChoice_DEAPCoin(this);
[L10641]              havoc msgsender_MSG;
[L10642]              havoc msgvalue_MSG;
[L10643]              havoc choice;
[L10644]              havoc __ret_0_owner;
[L10645]              havoc newOwner_s54;
[L10646]              havoc __ret_0_totalSupply;
[L10647]              havoc _owner_s578;
[L10648]              havoc __ret_0_balanceOf;
[L10649]              havoc _to_s1284;
[L10650]              havoc _value_s1284;
[L10651]              havoc __ret_0_transfer;
[L10652]              havoc _owner_s759;
[L10653]              havoc _spender_s759;
[L10654]              havoc __ret_0_allowance;
[L10655]              havoc _from_s715;
[L10656]              havoc _to_s715;
[L10657]              havoc _value_s715;
[L10658]              havoc __ret_0_transferFrom;
[L10659]              havoc _spender_s743;
[L10660]              havoc _value_s743;
[L10661]              havoc __ret_0_approve;
[L10662]              havoc _spender_s800;
[L10663]              havoc _addedValue_s800;
[L10664]              havoc __ret_0_increaseApproval;
[L10665]              havoc _spender_s860;
[L10666]              havoc _subtractedValue_s860;
[L10667]              havoc __ret_0_decreaseApproval;
[L10668]              havoc __ret_0_mintingFinished;
[L10669]              havoc _to_s932;
[L10670]              havoc _amount_s932;
[L10671]              havoc __ret_0_mint;
[L10672]              havoc __ret_0_finishMinting;
[L10673]              havoc _to_s1413;
[L10674]              havoc _value_s1413;
[L10675]              havoc _data_s1413;
[L10676]              havoc __ret_0_transfer_ERC223;
[L10677]              havoc __ret_0_name;
[L10678]              havoc __ret_0_symbol;
[L10679]              havoc __ret_0_decimals;
[L10680]              havoc __ret_0_INITIAL_SUPPLY;
[L10681]              havoc __ret_0_INITIAL_SALE_SUPPLY;
[L10682]              havoc __ret_0_INITIAL_UNSALE_SUPPLY;
[L10683]              havoc __ret_0_owner_wallet;
[L10684]              havoc __ret_0_unsale_owner_wallet;
[L10685]              havoc __ret_0_group_lockup;
[L10686]              havoc _sale_owner_wallet_s1076;
[L10687]              havoc _unsale_owner_wallet_s1076;
[L10688]              havoc _group_lockup_s1076;
[L10689]              havoc _to_s1162;
[L10690]              havoc _value_s1162;
[L10691]              havoc __ret_0_sendTokens;
[L10692]              havoc _from_s1567;
[L10693]              havoc _users_s1567;
[L10694]              havoc _values_s1567;
[L10695]              havoc __ret_0_batchTransfer;
[L10696]              havoc tmpNow;
[L10697]              havoc gas;
[L10698]              assume gas > 4000000 && gas <= 8000000;
[L10699]              tmpNow := now;
[L10700]              havoc now;
[L10701]              assume now > tmpNow;
[L10702]              assume msgsender_MSG != null;
[L10703]              assume DType[msgsender_MSG] != Ownable;
[L10704]              assume DType[msgsender_MSG] != SafeMath;
[L10705]              assume DType[msgsender_MSG] != GroupLockup;
[L10706]              assume DType[msgsender_MSG] != ERC20Basic;
[L10707]              assume DType[msgsender_MSG] != BasicToken;
[L10708]              assume DType[msgsender_MSG] != ERC20;
[L10709]              assume DType[msgsender_MSG] != StandardToken;
[L10710]              assume DType[msgsender_MSG] != MintableToken;
[L10711]              assume DType[msgsender_MSG] != ERC223Token;
[L10712]              assume DType[msgsender_MSG] != ERC223ContractInterface;
[L10713]              assume DType[msgsender_MSG] != DEAPCoin;
[L10714]              Alloc[msgsender_MSG] := true;
[L10715]  COND FALSE  !(choice == 25)
[L10721]  COND FALSE  !(choice == 24)
[L10727]  COND FALSE  !(choice == 23)
[L10733]  COND FALSE  !(choice == 22)
[L10739]  COND FALSE  !(choice == 21)
[L10746]  COND FALSE  !(choice == 20)
[L10752]  COND FALSE  !(choice == 19)
[L10759]  COND TRUE   choice == 18
[L10760]              gas := gas - 21000;
[L10761]  COND TRUE   gas >= 0
[L10762]              assume _value_s743 >= 0 && _value_s743 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10763]              assume msgvalue_MSG == 0;
[L10764]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s743, _value_s743);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != _spender_s743;
[L3]                  call_approve_StandardToken0 := true;
[L3]                  call_approve_StandardToken0 := false;
[L3]                  revert := revert_hold;
[L1941]               havoc __exception;
[L1942]               revert := false;
[L1943]   COND FALSE  !(__exception)
[L1981]   CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s743, _value_s743);
[L6123]               sum_allowed3[msgsender_MSG] := sum_allowed3[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s743];
[L6124]               allowed_StandardToken[this][msgsender_MSG][_spender_s743] := _value_s743;
[L6125]               sum_allowed3[msgsender_MSG] := sum_allowed3[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s743];
[L6126]               assert { :EventEmitted "Approval_StandardToken" } true;
[L6127]               __ret_0_ := true;
[L1981]   RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s743, _value_s743);
[L1982]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !(((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s743] == _value_s743) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && owner_wallet_DEAPCoin[this] == old(owner_wallet_DEAPCoin[this])) && unsale_owner_wallet_DEAPCoin[this] == old(unsale_owner_wallet_DEAPCoin[this])) && group_lockup_DEAPCoin[this] == old(group_lockup_DEAPCoin[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L3]                  revert := revert_hold;
[L10764]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s743, _value_s743);
[L10896]  RET         call CorralChoice_DEAPCoin(this);

[2020-11-25 13:23:39,962 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:23:39,962 INFO  L82        PathProgramCache]: Analyzing trace with hash -392169020, now seen corresponding path program 1 times
[2020-11-25 13:23:39,963 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:23:39,991 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:23:40,320 INFO  L134       CoverageAnalysis]: Checked inductivity of 3940 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 3940 trivial. 0 not checked.
[2020-11-25 13:23:40,320 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:23:40,321 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 13:23:40,321 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:23:40,322 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 13:23:40,322 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 13:23:40,322 INFO  L87              Difference]: Start difference. First operand 5218 states and 5704 transitions. cyclomatic complexity: 492 Second operand 4 states.
[2020-11-25 13:23:40,546 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:23:40,546 INFO  L93              Difference]: Finished difference Result 6407 states and 7161 transitions.
[2020-11-25 13:23:40,547 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-25 13:23:40,547 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6407 states and 7161 transitions.
[2020-11-25 13:23:40,561 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 12
[2020-11-25 13:23:40,576 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6407 states to 6149 states and 6884 transitions.
[2020-11-25 13:23:40,576 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1499
[2020-11-25 13:23:40,577 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1499
[2020-11-25 13:23:40,577 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6149 states and 6884 transitions.
[2020-11-25 13:23:40,582 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:23:40,582 INFO  L728         BuchiCegarLoop]: Abstraction has 6149 states and 6884 transitions.
[2020-11-25 13:23:40,587 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6149 states and 6884 transitions.
[2020-11-25 13:23:40,624 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6149 to 5417.
[2020-11-25 13:23:40,625 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5417 states.
[2020-11-25 13:23:40,630 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5417 states to 5417 states and 5996 transitions.
[2020-11-25 13:23:40,630 INFO  L751         BuchiCegarLoop]: Abstraction has 5417 states and 5996 transitions.
[2020-11-25 13:23:40,630 INFO  L631         BuchiCegarLoop]: Abstraction has 5417 states and 5996 transitions.
[2020-11-25 13:23:40,630 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 13:23:40,630 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5417 states and 5996 transitions.
[2020-11-25 13:23:40,636 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 13:23:40,636 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:23:40,636 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:23:40,638 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [24, 24, 24, 24, 24, 24, 24, 24, 24, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:23:40,638 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_StandardToken0 := false;
[L3]                  call_approve_StandardToken0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L10886]              assume null == 0;
[L10887]  CALL        call this := FreshRefGenerator__success();
[L5226]               havoc newRef;
[L5227]               assume Alloc[newRef] == false;
[L5228]               Alloc[newRef] := true;
[L5229]               assume newRef != null;
[L10887]  RET         call this := FreshRefGenerator__success();
[L10888]              assume now >= 0;
[L10889]              assume DType[this] == DEAPCoin;
[L10890]              assume msgvalue_MSG == 0;
[L10891]              gas := gas - 53000;
[L10892]  CALL        call DEAPCoin_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L2858]               havoc __exception;
[L2859]               revert := false;
[L2860]   COND FALSE  !(__exception)
[L2898]   CALL        call DEAPCoin_DEAPCoin__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6652]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L6652]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6653]   COND FALSE  !(revert)
[L6656]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5953]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]   COND FALSE  !(revert)
[L5957]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5957]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6656]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6657]   COND FALSE  !(revert)
[L6660]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5824]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5825]   COND FALSE  !(revert)
[L5828]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5802]               assume msgsender_MSG != null;
[L5803]               Balance[this] := 0;
[L5804]               balances_BasicToken[this] := zeroRefintArr();
[L5805]               sum_balances2[this] := 0;
[L5806]               totalSupply__BasicToken[this] := 0;
[L5828]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5829]   COND FALSE  !(revert)
[L6660]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6661]   COND FALSE  !(revert)
[L6664]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6005]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L6005]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]   COND FALSE  !(revert)
[L6009]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5953]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]   COND FALSE  !(revert)
[L5957]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5957]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6009]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6010]   COND FALSE  !(revert)
[L6013]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5824]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5825]   COND FALSE  !(revert)
[L5828]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5802]               assume msgsender_MSG != null;
[L5803]               Balance[this] := 0;
[L5804]               balances_BasicToken[this] := zeroRefintArr();
[L5805]               sum_balances2[this] := 0;
[L5806]               totalSupply__BasicToken[this] := 0;
[L5828]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5829]   COND FALSE  !(revert)
[L6013]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]   COND FALSE  !(revert)
[L6017]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5976]               assume msgsender_MSG != null;
[L5977]               Balance[this] := 0;
[L5978]               allowed_StandardToken[this] := zeroRefRefintArr();
[L5979]               sum_allowed3[this] := 0;
[L6017]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6018]   COND FALSE  !(revert)
[L6664]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6665]   COND FALSE  !(revert)
[L6668]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5262]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5245]               assume msgsender_MSG != null;
[L5246]               Balance[this] := 0;
[L5247]               owner_Ownable[this] := null;
[L5249]               owner_Ownable[this] := msgsender_MSG;
[L5262]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5263]   COND FALSE  !(revert)
[L6668]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6669]   COND FALSE  !(revert)
[L6672]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6265]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L6265]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6266]   COND FALSE  !(revert)
[L6269]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5953]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]   COND FALSE  !(revert)
[L5957]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5957]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6269]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6270]   COND FALSE  !(revert)
[L6273]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5824]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5825]   COND FALSE  !(revert)
[L5828]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5802]               assume msgsender_MSG != null;
[L5803]               Balance[this] := 0;
[L5804]               balances_BasicToken[this] := zeroRefintArr();
[L5805]               sum_balances2[this] := 0;
[L5806]               totalSupply__BasicToken[this] := 0;
[L5828]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5829]   COND FALSE  !(revert)
[L6273]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6274]   COND FALSE  !(revert)
[L6277]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6005]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L6005]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]   COND FALSE  !(revert)
[L6009]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5953]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]   COND FALSE  !(revert)
[L5957]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5957]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6009]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6010]   COND FALSE  !(revert)
[L6013]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5824]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5825]   COND FALSE  !(revert)
[L5828]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5802]               assume msgsender_MSG != null;
[L5803]               Balance[this] := 0;
[L5804]               balances_BasicToken[this] := zeroRefintArr();
[L5805]               sum_balances2[this] := 0;
[L5806]               totalSupply__BasicToken[this] := 0;
[L5828]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5829]   COND FALSE  !(revert)
[L6013]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]   COND FALSE  !(revert)
[L6017]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5976]               assume msgsender_MSG != null;
[L5977]               Balance[this] := 0;
[L5978]               allowed_StandardToken[this] := zeroRefRefintArr();
[L5979]               sum_allowed3[this] := 0;
[L6017]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6018]   COND FALSE  !(revert)
[L6277]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6278]   COND FALSE  !(revert)
[L6281]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5262]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5245]               assume msgsender_MSG != null;
[L5246]               Balance[this] := 0;
[L5247]               owner_Ownable[this] := null;
[L5249]               owner_Ownable[this] := msgsender_MSG;
[L5262]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5263]   COND FALSE  !(revert)
[L6281]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6282]   COND FALSE  !(revert)
[L6285]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6229]               assume msgsender_MSG != null;
[L6230]               Balance[this] := 0;
[L6231]               mintingFinished_MintableToken[this] := false;
[L6285]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6286]   COND FALSE  !(revert)
[L6672]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6673]   COND FALSE  !(revert)
[L6676]   CALL        call ERC223Token_ERC223Token__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L6442]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6443]   COND FALSE  !(revert)
[L6446]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5953]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]   COND FALSE  !(revert)
[L5957]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5957]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6446]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6447]   COND FALSE  !(revert)
[L6450]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5824]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5825]   COND FALSE  !(revert)
[L5828]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5802]               assume msgsender_MSG != null;
[L5803]               Balance[this] := 0;
[L5804]               balances_BasicToken[this] := zeroRefintArr();
[L5805]               sum_balances2[this] := 0;
[L5806]               totalSupply__BasicToken[this] := 0;
[L5828]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5829]   COND FALSE  !(revert)
[L6450]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6005]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L6005]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]   COND FALSE  !(revert)
[L6009]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5953]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]   COND FALSE  !(revert)
[L5957]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5957]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6009]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6010]   COND FALSE  !(revert)
[L6013]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5824]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5825]   COND FALSE  !(revert)
[L5828]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5802]               assume msgsender_MSG != null;
[L5803]               Balance[this] := 0;
[L5804]               balances_BasicToken[this] := zeroRefintArr();
[L5805]               sum_balances2[this] := 0;
[L5806]               totalSupply__BasicToken[this] := 0;
[L5828]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5829]   COND FALSE  !(revert)
[L6013]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]   COND FALSE  !(revert)
[L6017]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5976]               assume msgsender_MSG != null;
[L5977]               Balance[this] := 0;
[L5978]               allowed_StandardToken[this] := zeroRefRefintArr();
[L5979]               sum_allowed3[this] := 0;
[L6017]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6018]   COND FALSE  !(revert)
[L6454]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L6458]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5262]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5245]               assume msgsender_MSG != null;
[L5246]               Balance[this] := 0;
[L5247]               owner_Ownable[this] := null;
[L5249]               owner_Ownable[this] := msgsender_MSG;
[L5262]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5263]   COND FALSE  !(revert)
[L6458]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6459]   COND FALSE  !(revert)
[L6462]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6265]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L6265]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6266]   COND FALSE  !(revert)
[L6269]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5953]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]   COND FALSE  !(revert)
[L5957]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5957]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6269]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6270]   COND FALSE  !(revert)
[L6273]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5824]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5825]   COND FALSE  !(revert)
[L5828]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5802]               assume msgsender_MSG != null;
[L5803]               Balance[this] := 0;
[L5804]               balances_BasicToken[this] := zeroRefintArr();
[L5805]               sum_balances2[this] := 0;
[L5806]               totalSupply__BasicToken[this] := 0;
[L5828]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5829]   COND FALSE  !(revert)
[L6273]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6274]   COND FALSE  !(revert)
[L6277]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6005]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L6005]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]   COND FALSE  !(revert)
[L6009]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5953]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]   COND FALSE  !(revert)
[L5957]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5957]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6009]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6010]   COND FALSE  !(revert)
[L6013]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5824]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5825]   COND FALSE  !(revert)
[L5828]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5802]               assume msgsender_MSG != null;
[L5803]               Balance[this] := 0;
[L5804]               balances_BasicToken[this] := zeroRefintArr();
[L5805]               sum_balances2[this] := 0;
[L5806]               totalSupply__BasicToken[this] := 0;
[L5828]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5829]   COND FALSE  !(revert)
[L6013]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]   COND FALSE  !(revert)
[L6017]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5976]               assume msgsender_MSG != null;
[L5977]               Balance[this] := 0;
[L5978]               allowed_StandardToken[this] := zeroRefRefintArr();
[L5979]               sum_allowed3[this] := 0;
[L6017]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6018]   COND FALSE  !(revert)
[L6277]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6278]   COND FALSE  !(revert)
[L6281]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5262]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5245]               assume msgsender_MSG != null;
[L5246]               Balance[this] := 0;
[L5247]               owner_Ownable[this] := null;
[L5249]               owner_Ownable[this] := msgsender_MSG;
[L5262]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5263]   COND FALSE  !(revert)
[L6281]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6282]   COND FALSE  !(revert)
[L6285]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6229]               assume msgsender_MSG != null;
[L6230]               Balance[this] := 0;
[L6231]               mintingFinished_MintableToken[this] := false;
[L6285]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6286]   COND FALSE  !(revert)
[L6462]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6463]   COND FALSE  !(revert)
[L6466]   CALL        call ERC223Token_ERC223Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6403]               assume msgsender_MSG != null;
[L6404]               Balance[this] := 0;
[L6466]   RET         call ERC223Token_ERC223Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]   COND FALSE  !(revert)
[L6676]   RET         call ERC223Token_ERC223Token__success(this, msgsender_MSG, msgvalue_MSG);
[L6677]   COND FALSE  !(revert)
[L6680]   CALL        call DEAPCoin_DEAPCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6562]               assume msgsender_MSG != null;
[L6563]               Balance[this] := 0;
[L6564]               name_DEAPCoin[this] := -635866188;
[L6565]               symbol_DEAPCoin[this] := -1031151507;
[L6566]               decimals_DEAPCoin[this] := 18;
[L6567]               __var_19 := decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6568]               INITIAL_SUPPLY_DEAPCoin[this] := 30000000000 * (nonlinearPow(10, decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6569]               __var_20 := decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6570]               INITIAL_SALE_SUPPLY_DEAPCoin[this] := 12000000000 * (nonlinearPow(10, decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6571]               INITIAL_UNSALE_SUPPLY_DEAPCoin[this] := (INITIAL_SUPPLY_DEAPCoin[this] - INITIAL_SALE_SUPPLY_DEAPCoin[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6572]               owner_wallet_DEAPCoin[this] := null;
[L6573]               unsale_owner_wallet_DEAPCoin[this] := null;
[L6575]               group_lockup_DEAPCoin[this] := _group_lockup_s1076;
[L6576]               owner_wallet_DEAPCoin[this] := _sale_owner_wallet_s1076;
[L6577]               unsale_owner_wallet_DEAPCoin[this] := _unsale_owner_wallet_s1076;
[L6578]   COND TRUE   DType[this] == DEAPCoin
[L6579]   CALL        call __var_16 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, owner_wallet_DEAPCoin[this], INITIAL_SALE_SUPPLY_DEAPCoin[this]);
[L6323]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9398]   COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L6323]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6327]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9414]   COND FALSE  !(!!mintingFinished_MintableToken[this])
[L6327]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6328]   COND FALSE  !(revert)
[L6331]   CALL        call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s932);
[L5400]               c_s146 := (a_s146 + b_s146) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5401]               assert c_s146 >= a_s146;
[L5402]               c_s146 := c_s146;
[L6331]   RET         call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s932);
[L6332]   COND FALSE  !(revert)
[L6335]               totalSupply__BasicToken[this] := __var_14;
[L6336]   CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s932], _amount_s932);
[L5400]               c_s146 := (a_s146 + b_s146) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5401]               assert c_s146 >= a_s146;
[L5402]               c_s146 := c_s146;
[L6336]   RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s932], _amount_s932);
[L6337]   COND FALSE  !(revert)
[L6340]               sum_balances2[this] := sum_balances2[this] - balances_BasicToken[this][_to_s932];
[L6341]               balances_BasicToken[this][_to_s932] := __var_15;
[L6342]               sum_balances2[this] := sum_balances2[this] + balances_BasicToken[this][_to_s932];
[L6343]               assert { :EventEmitted "Mint_MintableToken" } true;
[L6344]               assert { :EventEmitted "Transfer_MintableToken" } true;
[L6345]               __ret_0_ := true;
[L6579]   RET         call __var_16 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, owner_wallet_DEAPCoin[this], INITIAL_SALE_SUPPLY_DEAPCoin[this]);
[L6580]   COND FALSE  !(revert)
[L6586]   COND TRUE   DType[this] == DEAPCoin
[L6587]   CALL        call __var_17 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, unsale_owner_wallet_DEAPCoin[this], INITIAL_UNSALE_SUPPLY_DEAPCoin[this]);
[L6323]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9398]   COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L6323]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6327]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9414]   COND FALSE  !(!!mintingFinished_MintableToken[this])
[L6327]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6328]   COND FALSE  !(revert)
[L6331]   CALL        call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s932);
[L5400]               c_s146 := (a_s146 + b_s146) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5401]               assert c_s146 >= a_s146;
[L5402]               c_s146 := c_s146;
[L6331]   RET         call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s932);
[L6332]   COND FALSE  !(revert)
[L6335]               totalSupply__BasicToken[this] := __var_14;
[L6336]   CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s932], _amount_s932);
[L5400]               c_s146 := (a_s146 + b_s146) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5401]               assert c_s146 >= a_s146;
[L5402]               c_s146 := c_s146;
[L6336]   RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s932], _amount_s932);
[L6337]   COND FALSE  !(revert)
[L6340]               sum_balances2[this] := sum_balances2[this] - balances_BasicToken[this][_to_s932];
[L6341]               balances_BasicToken[this][_to_s932] := __var_15;
[L6342]               sum_balances2[this] := sum_balances2[this] + balances_BasicToken[this][_to_s932];
[L6343]               assert { :EventEmitted "Mint_MintableToken" } true;
[L6344]               assert { :EventEmitted "Transfer_MintableToken" } true;
[L6345]               __ret_0_ := true;
[L6587]   RET         call __var_17 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, unsale_owner_wallet_DEAPCoin[this], INITIAL_UNSALE_SUPPLY_DEAPCoin[this]);
[L6588]   COND FALSE  !(revert)
[L6594]   COND TRUE   DType[this] == DEAPCoin
[L6595]   CALL        call __var_18 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6366]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9398]   COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L6366]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6367]   COND FALSE  !(revert)
[L6370]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9414]   COND FALSE  !(!!mintingFinished_MintableToken[this])
[L6370]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6371]   COND FALSE  !(revert)
[L6374]               mintingFinished_MintableToken[this] := true;
[L6375]               assert { :EventEmitted "MintFinished_MintableToken" } true;
[L6376]               __ret_0_ := true;
[L6595]   RET         call __var_18 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6596]   COND FALSE  !(revert)
[L6680]   RET         call DEAPCoin_DEAPCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6681]   COND FALSE  !(revert)
[L2898]   RET         call DEAPCoin_DEAPCoin__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L2899]               assume !revert && gas >= 0;
[L10892]  RET         call DEAPCoin_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L10893]              assume !revert && gas >= 0;
[L10896]  CALL        call CorralChoice_DEAPCoin(this);
[L10641]              havoc msgsender_MSG;
[L10642]              havoc msgvalue_MSG;
[L10643]              havoc choice;
[L10644]              havoc __ret_0_owner;
[L10645]              havoc newOwner_s54;
[L10646]              havoc __ret_0_totalSupply;
[L10647]              havoc _owner_s578;
[L10648]              havoc __ret_0_balanceOf;
[L10649]              havoc _to_s1284;
[L10650]              havoc _value_s1284;
[L10651]              havoc __ret_0_transfer;
[L10652]              havoc _owner_s759;
[L10653]              havoc _spender_s759;
[L10654]              havoc __ret_0_allowance;
[L10655]              havoc _from_s715;
[L10656]              havoc _to_s715;
[L10657]              havoc _value_s715;
[L10658]              havoc __ret_0_transferFrom;
[L10659]              havoc _spender_s743;
[L10660]              havoc _value_s743;
[L10661]              havoc __ret_0_approve;
[L10662]              havoc _spender_s800;
[L10663]              havoc _addedValue_s800;
[L10664]              havoc __ret_0_increaseApproval;
[L10665]              havoc _spender_s860;
[L10666]              havoc _subtractedValue_s860;
[L10667]              havoc __ret_0_decreaseApproval;
[L10668]              havoc __ret_0_mintingFinished;
[L10669]              havoc _to_s932;
[L10670]              havoc _amount_s932;
[L10671]              havoc __ret_0_mint;
[L10672]              havoc __ret_0_finishMinting;
[L10673]              havoc _to_s1413;
[L10674]              havoc _value_s1413;
[L10675]              havoc _data_s1413;
[L10676]              havoc __ret_0_transfer_ERC223;
[L10677]              havoc __ret_0_name;
[L10678]              havoc __ret_0_symbol;
[L10679]              havoc __ret_0_decimals;
[L10680]              havoc __ret_0_INITIAL_SUPPLY;
[L10681]              havoc __ret_0_INITIAL_SALE_SUPPLY;
[L10682]              havoc __ret_0_INITIAL_UNSALE_SUPPLY;
[L10683]              havoc __ret_0_owner_wallet;
[L10684]              havoc __ret_0_unsale_owner_wallet;
[L10685]              havoc __ret_0_group_lockup;
[L10686]              havoc _sale_owner_wallet_s1076;
[L10687]              havoc _unsale_owner_wallet_s1076;
[L10688]              havoc _group_lockup_s1076;
[L10689]              havoc _to_s1162;
[L10690]              havoc _value_s1162;
[L10691]              havoc __ret_0_sendTokens;
[L10692]              havoc _from_s1567;
[L10693]              havoc _users_s1567;
[L10694]              havoc _values_s1567;
[L10695]              havoc __ret_0_batchTransfer;
[L10696]              havoc tmpNow;
[L10697]              havoc gas;
[L10698]              assume gas > 4000000 && gas <= 8000000;
[L10699]              tmpNow := now;
[L10700]              havoc now;
[L10701]              assume now > tmpNow;
[L10702]              assume msgsender_MSG != null;
[L10703]              assume DType[msgsender_MSG] != Ownable;
[L10704]              assume DType[msgsender_MSG] != SafeMath;
[L10705]              assume DType[msgsender_MSG] != GroupLockup;
[L10706]              assume DType[msgsender_MSG] != ERC20Basic;
[L10707]              assume DType[msgsender_MSG] != BasicToken;
[L10708]              assume DType[msgsender_MSG] != ERC20;
[L10709]              assume DType[msgsender_MSG] != StandardToken;
[L10710]              assume DType[msgsender_MSG] != MintableToken;
[L10711]              assume DType[msgsender_MSG] != ERC223Token;
[L10712]              assume DType[msgsender_MSG] != ERC223ContractInterface;
[L10713]              assume DType[msgsender_MSG] != DEAPCoin;
[L10714]              Alloc[msgsender_MSG] := true;
[L10715]  COND FALSE  !(choice == 25)
[L10721]  COND FALSE  !(choice == 24)
[L10727]  COND FALSE  !(choice == 23)
[L10733]  COND FALSE  !(choice == 22)
[L10739]  COND FALSE  !(choice == 21)
[L10746]  COND FALSE  !(choice == 20)
[L10752]  COND FALSE  !(choice == 19)
[L10759]  COND TRUE   choice == 18
[L10760]              gas := gas - 21000;
[L10761]  COND TRUE   gas >= 0
[L10762]              assume _value_s743 >= 0 && _value_s743 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10763]              assume msgvalue_MSG == 0;
[L10764]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s743, _value_s743);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != _spender_s743;
[L3]                  call_approve_StandardToken0 := true;
[L3]                  call_approve_StandardToken0 := false;
[L3]                  revert := revert_hold;
[L1941]               havoc __exception;
[L1942]               revert := false;
[L1943]   COND FALSE  !(__exception)
[L1981]   CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s743, _value_s743);
[L6123]               sum_allowed3[msgsender_MSG] := sum_allowed3[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s743];
[L6124]               allowed_StandardToken[this][msgsender_MSG][_spender_s743] := _value_s743;
[L6125]               sum_allowed3[msgsender_MSG] := sum_allowed3[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s743];
[L6126]               assert { :EventEmitted "Approval_StandardToken" } true;
[L6127]               __ret_0_ := true;
[L1981]   RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s743, _value_s743);
[L1982]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !(((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s743] == _value_s743) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && owner_wallet_DEAPCoin[this] == old(owner_wallet_DEAPCoin[this])) && unsale_owner_wallet_DEAPCoin[this] == old(unsale_owner_wallet_DEAPCoin[this])) && group_lockup_DEAPCoin[this] == old(group_lockup_DEAPCoin[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L3]                  revert := revert_hold;
[L10764]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s743, _value_s743);
[L10896]  RET         call CorralChoice_DEAPCoin(this);

Loop:
[L10896]  CALL        call CorralChoice_DEAPCoin(this);
[L10641]              havoc msgsender_MSG;
[L10642]              havoc msgvalue_MSG;
[L10643]              havoc choice;
[L10644]              havoc __ret_0_owner;
[L10645]              havoc newOwner_s54;
[L10646]              havoc __ret_0_totalSupply;
[L10647]              havoc _owner_s578;
[L10648]              havoc __ret_0_balanceOf;
[L10649]              havoc _to_s1284;
[L10650]              havoc _value_s1284;
[L10651]              havoc __ret_0_transfer;
[L10652]              havoc _owner_s759;
[L10653]              havoc _spender_s759;
[L10654]              havoc __ret_0_allowance;
[L10655]              havoc _from_s715;
[L10656]              havoc _to_s715;
[L10657]              havoc _value_s715;
[L10658]              havoc __ret_0_transferFrom;
[L10659]              havoc _spender_s743;
[L10660]              havoc _value_s743;
[L10661]              havoc __ret_0_approve;
[L10662]              havoc _spender_s800;
[L10663]              havoc _addedValue_s800;
[L10664]              havoc __ret_0_increaseApproval;
[L10665]              havoc _spender_s860;
[L10666]              havoc _subtractedValue_s860;
[L10667]              havoc __ret_0_decreaseApproval;
[L10668]              havoc __ret_0_mintingFinished;
[L10669]              havoc _to_s932;
[L10670]              havoc _amount_s932;
[L10671]              havoc __ret_0_mint;
[L10672]              havoc __ret_0_finishMinting;
[L10673]              havoc _to_s1413;
[L10674]              havoc _value_s1413;
[L10675]              havoc _data_s1413;
[L10676]              havoc __ret_0_transfer_ERC223;
[L10677]              havoc __ret_0_name;
[L10678]              havoc __ret_0_symbol;
[L10679]              havoc __ret_0_decimals;
[L10680]              havoc __ret_0_INITIAL_SUPPLY;
[L10681]              havoc __ret_0_INITIAL_SALE_SUPPLY;
[L10682]              havoc __ret_0_INITIAL_UNSALE_SUPPLY;
[L10683]              havoc __ret_0_owner_wallet;
[L10684]              havoc __ret_0_unsale_owner_wallet;
[L10685]              havoc __ret_0_group_lockup;
[L10686]              havoc _sale_owner_wallet_s1076;
[L10687]              havoc _unsale_owner_wallet_s1076;
[L10688]              havoc _group_lockup_s1076;
[L10689]              havoc _to_s1162;
[L10690]              havoc _value_s1162;
[L10691]              havoc __ret_0_sendTokens;
[L10692]              havoc _from_s1567;
[L10693]              havoc _users_s1567;
[L10694]              havoc _values_s1567;
[L10695]              havoc __ret_0_batchTransfer;
[L10696]              havoc tmpNow;
[L10697]              havoc gas;
[L10698]              assume gas > 4000000 && gas <= 8000000;
[L10699]              tmpNow := now;
[L10700]              havoc now;
[L10701]              assume now > tmpNow;
[L10702]              assume msgsender_MSG != null;
[L10703]              assume DType[msgsender_MSG] != Ownable;
[L10704]              assume DType[msgsender_MSG] != SafeMath;
[L10705]              assume DType[msgsender_MSG] != GroupLockup;
[L10706]              assume DType[msgsender_MSG] != ERC20Basic;
[L10707]              assume DType[msgsender_MSG] != BasicToken;
[L10708]              assume DType[msgsender_MSG] != ERC20;
[L10709]              assume DType[msgsender_MSG] != StandardToken;
[L10710]              assume DType[msgsender_MSG] != MintableToken;
[L10711]              assume DType[msgsender_MSG] != ERC223Token;
[L10712]              assume DType[msgsender_MSG] != ERC223ContractInterface;
[L10713]              assume DType[msgsender_MSG] != DEAPCoin;
[L10714]              Alloc[msgsender_MSG] := true;
[L10715]  COND TRUE   choice == 25
[L10716]              gas := gas - 21000;
[L10717]  COND FALSE  !(gas >= 0)
[L10896]  RET         call CorralChoice_DEAPCoin(this);

[2020-11-25 13:23:40,644 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:23:40,645 INFO  L82        PathProgramCache]: Analyzing trace with hash 1264446535, now seen corresponding path program 1 times
[2020-11-25 13:23:40,646 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:23:40,952 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:23:41,466 INFO  L134       CoverageAnalysis]: Checked inductivity of 3948 backedges. 31 proven. 0 refuted. 0 times theorem prover too weak. 3917 trivial. 0 not checked.
[2020-11-25 13:23:41,466 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:23:41,466 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [15] imperfect sequences [] total 15
[2020-11-25 13:23:41,467 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:23:41,467 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-11-25 13:23:41,468 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=31, Invalid=209, Unknown=0, NotChecked=0, Total=240
[2020-11-25 13:23:41,468 INFO  L87              Difference]: Start difference. First operand 5417 states and 5996 transitions. cyclomatic complexity: 585 Second operand 16 states.
[2020-11-25 13:23:44,899 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:23:44,899 INFO  L93              Difference]: Finished difference Result 5576 states and 6194 transitions.
[2020-11-25 13:23:44,925 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 18 states. 
[2020-11-25 13:23:44,925 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5576 states and 6194 transitions.
[2020-11-25 13:23:44,934 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 10
[2020-11-25 13:23:44,947 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5576 states to 5576 states and 6194 transitions.
[2020-11-25 13:23:44,947 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1476
[2020-11-25 13:23:44,949 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1476
[2020-11-25 13:23:44,949 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5576 states and 6194 transitions.
[2020-11-25 13:23:44,954 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:23:44,954 INFO  L728         BuchiCegarLoop]: Abstraction has 5576 states and 6194 transitions.
[2020-11-25 13:23:44,958 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5576 states and 6194 transitions.
[2020-11-25 13:23:44,995 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5576 to 5530.
[2020-11-25 13:23:44,995 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5530 states.
[2020-11-25 13:23:45,001 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5530 states to 5530 states and 6147 transitions.
[2020-11-25 13:23:45,001 INFO  L751         BuchiCegarLoop]: Abstraction has 5530 states and 6147 transitions.
[2020-11-25 13:23:45,001 INFO  L631         BuchiCegarLoop]: Abstraction has 5530 states and 6147 transitions.
[2020-11-25 13:23:45,001 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 13:23:45,001 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5530 states and 6147 transitions.
[2020-11-25 13:23:45,007 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 10
[2020-11-25 13:23:45,007 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:23:45,007 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:23:45,009 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [24, 24, 24, 24, 24, 24, 24, 24, 24, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:23:45,009 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_StandardToken0 := false;
[L3]                  call_approve_StandardToken0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L10886]              assume null == 0;
[L10887]  CALL        call this := FreshRefGenerator__success();
[L5226]               havoc newRef;
[L5227]               assume Alloc[newRef] == false;
[L5228]               Alloc[newRef] := true;
[L5229]               assume newRef != null;
[L10887]  RET         call this := FreshRefGenerator__success();
[L10888]              assume now >= 0;
[L10889]              assume DType[this] == DEAPCoin;
[L10890]              assume msgvalue_MSG == 0;
[L10891]              gas := gas - 53000;
[L10892]  CALL        call DEAPCoin_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L2858]               havoc __exception;
[L2859]               revert := false;
[L2860]   COND FALSE  !(__exception)
[L2898]   CALL        call DEAPCoin_DEAPCoin__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6652]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L6652]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6653]   COND FALSE  !(revert)
[L6656]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5953]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]   COND FALSE  !(revert)
[L5957]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5957]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6656]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6657]   COND FALSE  !(revert)
[L6660]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5824]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5825]   COND FALSE  !(revert)
[L5828]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5802]               assume msgsender_MSG != null;
[L5803]               Balance[this] := 0;
[L5804]               balances_BasicToken[this] := zeroRefintArr();
[L5805]               sum_balances2[this] := 0;
[L5806]               totalSupply__BasicToken[this] := 0;
[L5828]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5829]   COND FALSE  !(revert)
[L6660]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6661]   COND FALSE  !(revert)
[L6664]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6005]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L6005]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]   COND FALSE  !(revert)
[L6009]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5953]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]   COND FALSE  !(revert)
[L5957]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5957]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6009]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6010]   COND FALSE  !(revert)
[L6013]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5824]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5825]   COND FALSE  !(revert)
[L5828]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5802]               assume msgsender_MSG != null;
[L5803]               Balance[this] := 0;
[L5804]               balances_BasicToken[this] := zeroRefintArr();
[L5805]               sum_balances2[this] := 0;
[L5806]               totalSupply__BasicToken[this] := 0;
[L5828]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5829]   COND FALSE  !(revert)
[L6013]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]   COND FALSE  !(revert)
[L6017]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5976]               assume msgsender_MSG != null;
[L5977]               Balance[this] := 0;
[L5978]               allowed_StandardToken[this] := zeroRefRefintArr();
[L5979]               sum_allowed3[this] := 0;
[L6017]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6018]   COND FALSE  !(revert)
[L6664]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6665]   COND FALSE  !(revert)
[L6668]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5262]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5245]               assume msgsender_MSG != null;
[L5246]               Balance[this] := 0;
[L5247]               owner_Ownable[this] := null;
[L5249]               owner_Ownable[this] := msgsender_MSG;
[L5262]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5263]   COND FALSE  !(revert)
[L6668]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6669]   COND FALSE  !(revert)
[L6672]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6265]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L6265]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6266]   COND FALSE  !(revert)
[L6269]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5953]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]   COND FALSE  !(revert)
[L5957]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5957]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6269]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6270]   COND FALSE  !(revert)
[L6273]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5824]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5825]   COND FALSE  !(revert)
[L5828]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5802]               assume msgsender_MSG != null;
[L5803]               Balance[this] := 0;
[L5804]               balances_BasicToken[this] := zeroRefintArr();
[L5805]               sum_balances2[this] := 0;
[L5806]               totalSupply__BasicToken[this] := 0;
[L5828]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5829]   COND FALSE  !(revert)
[L6273]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6274]   COND FALSE  !(revert)
[L6277]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6005]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L6005]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]   COND FALSE  !(revert)
[L6009]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5953]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]   COND FALSE  !(revert)
[L5957]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5957]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6009]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6010]   COND FALSE  !(revert)
[L6013]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5824]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5825]   COND FALSE  !(revert)
[L5828]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5802]               assume msgsender_MSG != null;
[L5803]               Balance[this] := 0;
[L5804]               balances_BasicToken[this] := zeroRefintArr();
[L5805]               sum_balances2[this] := 0;
[L5806]               totalSupply__BasicToken[this] := 0;
[L5828]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5829]   COND FALSE  !(revert)
[L6013]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]   COND FALSE  !(revert)
[L6017]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5976]               assume msgsender_MSG != null;
[L5977]               Balance[this] := 0;
[L5978]               allowed_StandardToken[this] := zeroRefRefintArr();
[L5979]               sum_allowed3[this] := 0;
[L6017]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6018]   COND FALSE  !(revert)
[L6277]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6278]   COND FALSE  !(revert)
[L6281]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5262]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5245]               assume msgsender_MSG != null;
[L5246]               Balance[this] := 0;
[L5247]               owner_Ownable[this] := null;
[L5249]               owner_Ownable[this] := msgsender_MSG;
[L5262]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5263]   COND FALSE  !(revert)
[L6281]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6282]   COND FALSE  !(revert)
[L6285]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6229]               assume msgsender_MSG != null;
[L6230]               Balance[this] := 0;
[L6231]               mintingFinished_MintableToken[this] := false;
[L6285]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6286]   COND FALSE  !(revert)
[L6672]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6673]   COND FALSE  !(revert)
[L6676]   CALL        call ERC223Token_ERC223Token__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L6442]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6443]   COND FALSE  !(revert)
[L6446]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5953]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]   COND FALSE  !(revert)
[L5957]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5957]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6446]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6447]   COND FALSE  !(revert)
[L6450]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5824]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5825]   COND FALSE  !(revert)
[L5828]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5802]               assume msgsender_MSG != null;
[L5803]               Balance[this] := 0;
[L5804]               balances_BasicToken[this] := zeroRefintArr();
[L5805]               sum_balances2[this] := 0;
[L5806]               totalSupply__BasicToken[this] := 0;
[L5828]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5829]   COND FALSE  !(revert)
[L6450]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6005]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L6005]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]   COND FALSE  !(revert)
[L6009]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5953]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]   COND FALSE  !(revert)
[L5957]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5957]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6009]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6010]   COND FALSE  !(revert)
[L6013]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5824]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5825]   COND FALSE  !(revert)
[L5828]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5802]               assume msgsender_MSG != null;
[L5803]               Balance[this] := 0;
[L5804]               balances_BasicToken[this] := zeroRefintArr();
[L5805]               sum_balances2[this] := 0;
[L5806]               totalSupply__BasicToken[this] := 0;
[L5828]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5829]   COND FALSE  !(revert)
[L6013]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]   COND FALSE  !(revert)
[L6017]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5976]               assume msgsender_MSG != null;
[L5977]               Balance[this] := 0;
[L5978]               allowed_StandardToken[this] := zeroRefRefintArr();
[L5979]               sum_allowed3[this] := 0;
[L6017]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6018]   COND FALSE  !(revert)
[L6454]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L6458]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5262]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5245]               assume msgsender_MSG != null;
[L5246]               Balance[this] := 0;
[L5247]               owner_Ownable[this] := null;
[L5249]               owner_Ownable[this] := msgsender_MSG;
[L5262]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5263]   COND FALSE  !(revert)
[L6458]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6459]   COND FALSE  !(revert)
[L6462]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6265]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L6265]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6266]   COND FALSE  !(revert)
[L6269]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5953]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]   COND FALSE  !(revert)
[L5957]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5957]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6269]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6270]   COND FALSE  !(revert)
[L6273]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5824]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5825]   COND FALSE  !(revert)
[L5828]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5802]               assume msgsender_MSG != null;
[L5803]               Balance[this] := 0;
[L5804]               balances_BasicToken[this] := zeroRefintArr();
[L5805]               sum_balances2[this] := 0;
[L5806]               totalSupply__BasicToken[this] := 0;
[L5828]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5829]   COND FALSE  !(revert)
[L6273]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6274]   COND FALSE  !(revert)
[L6277]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6005]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L6005]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]   COND FALSE  !(revert)
[L6009]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5953]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]   COND FALSE  !(revert)
[L5957]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5957]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6009]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6010]   COND FALSE  !(revert)
[L6013]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5824]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5825]   COND FALSE  !(revert)
[L5828]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5802]               assume msgsender_MSG != null;
[L5803]               Balance[this] := 0;
[L5804]               balances_BasicToken[this] := zeroRefintArr();
[L5805]               sum_balances2[this] := 0;
[L5806]               totalSupply__BasicToken[this] := 0;
[L5828]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5829]   COND FALSE  !(revert)
[L6013]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]   COND FALSE  !(revert)
[L6017]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5976]               assume msgsender_MSG != null;
[L5977]               Balance[this] := 0;
[L5978]               allowed_StandardToken[this] := zeroRefRefintArr();
[L5979]               sum_allowed3[this] := 0;
[L6017]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6018]   COND FALSE  !(revert)
[L6277]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6278]   COND FALSE  !(revert)
[L6281]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5262]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5245]               assume msgsender_MSG != null;
[L5246]               Balance[this] := 0;
[L5247]               owner_Ownable[this] := null;
[L5249]               owner_Ownable[this] := msgsender_MSG;
[L5262]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5263]   COND FALSE  !(revert)
[L6281]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6282]   COND FALSE  !(revert)
[L6285]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6229]               assume msgsender_MSG != null;
[L6230]               Balance[this] := 0;
[L6231]               mintingFinished_MintableToken[this] := false;
[L6285]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6286]   COND FALSE  !(revert)
[L6462]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6463]   COND FALSE  !(revert)
[L6466]   CALL        call ERC223Token_ERC223Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6403]               assume msgsender_MSG != null;
[L6404]               Balance[this] := 0;
[L6466]   RET         call ERC223Token_ERC223Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]   COND FALSE  !(revert)
[L6676]   RET         call ERC223Token_ERC223Token__success(this, msgsender_MSG, msgvalue_MSG);
[L6677]   COND FALSE  !(revert)
[L6680]   CALL        call DEAPCoin_DEAPCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6562]               assume msgsender_MSG != null;
[L6563]               Balance[this] := 0;
[L6564]               name_DEAPCoin[this] := -635866188;
[L6565]               symbol_DEAPCoin[this] := -1031151507;
[L6566]               decimals_DEAPCoin[this] := 18;
[L6567]               __var_19 := decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6568]               INITIAL_SUPPLY_DEAPCoin[this] := 30000000000 * (nonlinearPow(10, decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6569]               __var_20 := decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6570]               INITIAL_SALE_SUPPLY_DEAPCoin[this] := 12000000000 * (nonlinearPow(10, decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6571]               INITIAL_UNSALE_SUPPLY_DEAPCoin[this] := (INITIAL_SUPPLY_DEAPCoin[this] - INITIAL_SALE_SUPPLY_DEAPCoin[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6572]               owner_wallet_DEAPCoin[this] := null;
[L6573]               unsale_owner_wallet_DEAPCoin[this] := null;
[L6575]               group_lockup_DEAPCoin[this] := _group_lockup_s1076;
[L6576]               owner_wallet_DEAPCoin[this] := _sale_owner_wallet_s1076;
[L6577]               unsale_owner_wallet_DEAPCoin[this] := _unsale_owner_wallet_s1076;
[L6578]   COND TRUE   DType[this] == DEAPCoin
[L6579]   CALL        call __var_16 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, owner_wallet_DEAPCoin[this], INITIAL_SALE_SUPPLY_DEAPCoin[this]);
[L6323]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9398]   COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L6323]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6327]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9414]   COND FALSE  !(!!mintingFinished_MintableToken[this])
[L6327]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6328]   COND FALSE  !(revert)
[L6331]   CALL        call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s932);
[L5400]               c_s146 := (a_s146 + b_s146) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5401]               assert c_s146 >= a_s146;
[L5402]               c_s146 := c_s146;
[L6331]   RET         call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s932);
[L6332]   COND FALSE  !(revert)
[L6335]               totalSupply__BasicToken[this] := __var_14;
[L6336]   CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s932], _amount_s932);
[L5400]               c_s146 := (a_s146 + b_s146) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5401]               assert c_s146 >= a_s146;
[L5402]               c_s146 := c_s146;
[L6336]   RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s932], _amount_s932);
[L6337]   COND FALSE  !(revert)
[L6340]               sum_balances2[this] := sum_balances2[this] - balances_BasicToken[this][_to_s932];
[L6341]               balances_BasicToken[this][_to_s932] := __var_15;
[L6342]               sum_balances2[this] := sum_balances2[this] + balances_BasicToken[this][_to_s932];
[L6343]               assert { :EventEmitted "Mint_MintableToken" } true;
[L6344]               assert { :EventEmitted "Transfer_MintableToken" } true;
[L6345]               __ret_0_ := true;
[L6579]   RET         call __var_16 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, owner_wallet_DEAPCoin[this], INITIAL_SALE_SUPPLY_DEAPCoin[this]);
[L6580]   COND FALSE  !(revert)
[L6586]   COND TRUE   DType[this] == DEAPCoin
[L6587]   CALL        call __var_17 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, unsale_owner_wallet_DEAPCoin[this], INITIAL_UNSALE_SUPPLY_DEAPCoin[this]);
[L6323]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9398]   COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L6323]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6327]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9414]   COND FALSE  !(!!mintingFinished_MintableToken[this])
[L6327]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6328]   COND FALSE  !(revert)
[L6331]   CALL        call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s932);
[L5400]               c_s146 := (a_s146 + b_s146) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5401]               assert c_s146 >= a_s146;
[L5402]               c_s146 := c_s146;
[L6331]   RET         call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s932);
[L6332]   COND FALSE  !(revert)
[L6335]               totalSupply__BasicToken[this] := __var_14;
[L6336]   CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s932], _amount_s932);
[L5400]               c_s146 := (a_s146 + b_s146) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5401]               assert c_s146 >= a_s146;
[L5402]               c_s146 := c_s146;
[L6336]   RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s932], _amount_s932);
[L6337]   COND FALSE  !(revert)
[L6340]               sum_balances2[this] := sum_balances2[this] - balances_BasicToken[this][_to_s932];
[L6341]               balances_BasicToken[this][_to_s932] := __var_15;
[L6342]               sum_balances2[this] := sum_balances2[this] + balances_BasicToken[this][_to_s932];
[L6343]               assert { :EventEmitted "Mint_MintableToken" } true;
[L6344]               assert { :EventEmitted "Transfer_MintableToken" } true;
[L6345]               __ret_0_ := true;
[L6587]   RET         call __var_17 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, unsale_owner_wallet_DEAPCoin[this], INITIAL_UNSALE_SUPPLY_DEAPCoin[this]);
[L6588]   COND FALSE  !(revert)
[L6594]   COND TRUE   DType[this] == DEAPCoin
[L6595]   CALL        call __var_18 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6366]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9398]   COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L6366]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6367]   COND FALSE  !(revert)
[L6370]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9414]   COND FALSE  !(!!mintingFinished_MintableToken[this])
[L6370]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6371]   COND FALSE  !(revert)
[L6374]               mintingFinished_MintableToken[this] := true;
[L6375]               assert { :EventEmitted "MintFinished_MintableToken" } true;
[L6376]               __ret_0_ := true;
[L6595]   RET         call __var_18 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6596]   COND FALSE  !(revert)
[L6680]   RET         call DEAPCoin_DEAPCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6681]   COND FALSE  !(revert)
[L2898]   RET         call DEAPCoin_DEAPCoin__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L2899]               assume !revert && gas >= 0;
[L10892]  RET         call DEAPCoin_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L10893]              assume !revert && gas >= 0;
[L10896]  CALL        call CorralChoice_DEAPCoin(this);
[L10641]              havoc msgsender_MSG;
[L10642]              havoc msgvalue_MSG;
[L10643]              havoc choice;
[L10644]              havoc __ret_0_owner;
[L10645]              havoc newOwner_s54;
[L10646]              havoc __ret_0_totalSupply;
[L10647]              havoc _owner_s578;
[L10648]              havoc __ret_0_balanceOf;
[L10649]              havoc _to_s1284;
[L10650]              havoc _value_s1284;
[L10651]              havoc __ret_0_transfer;
[L10652]              havoc _owner_s759;
[L10653]              havoc _spender_s759;
[L10654]              havoc __ret_0_allowance;
[L10655]              havoc _from_s715;
[L10656]              havoc _to_s715;
[L10657]              havoc _value_s715;
[L10658]              havoc __ret_0_transferFrom;
[L10659]              havoc _spender_s743;
[L10660]              havoc _value_s743;
[L10661]              havoc __ret_0_approve;
[L10662]              havoc _spender_s800;
[L10663]              havoc _addedValue_s800;
[L10664]              havoc __ret_0_increaseApproval;
[L10665]              havoc _spender_s860;
[L10666]              havoc _subtractedValue_s860;
[L10667]              havoc __ret_0_decreaseApproval;
[L10668]              havoc __ret_0_mintingFinished;
[L10669]              havoc _to_s932;
[L10670]              havoc _amount_s932;
[L10671]              havoc __ret_0_mint;
[L10672]              havoc __ret_0_finishMinting;
[L10673]              havoc _to_s1413;
[L10674]              havoc _value_s1413;
[L10675]              havoc _data_s1413;
[L10676]              havoc __ret_0_transfer_ERC223;
[L10677]              havoc __ret_0_name;
[L10678]              havoc __ret_0_symbol;
[L10679]              havoc __ret_0_decimals;
[L10680]              havoc __ret_0_INITIAL_SUPPLY;
[L10681]              havoc __ret_0_INITIAL_SALE_SUPPLY;
[L10682]              havoc __ret_0_INITIAL_UNSALE_SUPPLY;
[L10683]              havoc __ret_0_owner_wallet;
[L10684]              havoc __ret_0_unsale_owner_wallet;
[L10685]              havoc __ret_0_group_lockup;
[L10686]              havoc _sale_owner_wallet_s1076;
[L10687]              havoc _unsale_owner_wallet_s1076;
[L10688]              havoc _group_lockup_s1076;
[L10689]              havoc _to_s1162;
[L10690]              havoc _value_s1162;
[L10691]              havoc __ret_0_sendTokens;
[L10692]              havoc _from_s1567;
[L10693]              havoc _users_s1567;
[L10694]              havoc _values_s1567;
[L10695]              havoc __ret_0_batchTransfer;
[L10696]              havoc tmpNow;
[L10697]              havoc gas;
[L10698]              assume gas > 4000000 && gas <= 8000000;
[L10699]              tmpNow := now;
[L10700]              havoc now;
[L10701]              assume now > tmpNow;
[L10702]              assume msgsender_MSG != null;
[L10703]              assume DType[msgsender_MSG] != Ownable;
[L10704]              assume DType[msgsender_MSG] != SafeMath;
[L10705]              assume DType[msgsender_MSG] != GroupLockup;
[L10706]              assume DType[msgsender_MSG] != ERC20Basic;
[L10707]              assume DType[msgsender_MSG] != BasicToken;
[L10708]              assume DType[msgsender_MSG] != ERC20;
[L10709]              assume DType[msgsender_MSG] != StandardToken;
[L10710]              assume DType[msgsender_MSG] != MintableToken;
[L10711]              assume DType[msgsender_MSG] != ERC223Token;
[L10712]              assume DType[msgsender_MSG] != ERC223ContractInterface;
[L10713]              assume DType[msgsender_MSG] != DEAPCoin;
[L10714]              Alloc[msgsender_MSG] := true;
[L10715]  COND FALSE  !(choice == 25)
[L10721]  COND FALSE  !(choice == 24)
[L10727]  COND FALSE  !(choice == 23)
[L10733]  COND FALSE  !(choice == 22)
[L10739]  COND FALSE  !(choice == 21)
[L10746]  COND FALSE  !(choice == 20)
[L10752]  COND FALSE  !(choice == 19)
[L10759]  COND TRUE   choice == 18
[L10760]              gas := gas - 21000;
[L10761]  COND TRUE   gas >= 0
[L10762]              assume _value_s743 >= 0 && _value_s743 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10763]              assume msgvalue_MSG == 0;
[L10764]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s743, _value_s743);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != _spender_s743;
[L3]                  call_approve_StandardToken0 := true;
[L3]                  call_approve_StandardToken0 := false;
[L3]                  revert := revert_hold;
[L1941]               havoc __exception;
[L1942]               revert := false;
[L1943]   COND TRUE   __exception
[L1944]               __tmp__Balance := Balance;
[L1945]               __tmp__DType := DType;
[L1946]               __tmp__Alloc := Alloc;
[L1947]               __tmp__balance_ADDR := balance_ADDR;
[L1948]               __tmp__M_Ref_int := M_Ref_int;
[L1949]               __tmp__sum_lockup_list0 := sum_lockup_list0;
[L1950]               __tmp__M_int_bool := M_int_bool;
[L1951]               __tmp__sum_lockup_list_flag1 := sum_lockup_list_flag1;
[L1952]               __tmp__sum_balances2 := sum_balances2;
[L1953]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L1954]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L1955]               __tmp__sum_allowed3 := sum_allowed3;
[L1956]               __tmp__M_int_Ref := M_int_Ref;
[L1957]               __tmp__sum := sum;
[L1958]               __tmp__M_int_int := M_int_int;
[L1959]               __tmp__Length := Length;
[L1960]               __tmp__now := now;
[L1961]               __tmp__owner_Ownable := owner_Ownable;
[L1962]               __tmp__lockup_list_GroupLockup := lockup_list_GroupLockup;
[L1963]               __tmp__lockup_list_flag_GroupLockup := lockup_list_flag_GroupLockup;
[L1964]               __tmp__user_list_GroupLockup := user_list_GroupLockup;
[L1965]               __tmp__balances_BasicToken := balances_BasicToken;
[L1966]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L1967]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L1968]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L1969]               __tmp__name_DEAPCoin := name_DEAPCoin;
[L1970]               __tmp__symbol_DEAPCoin := symbol_DEAPCoin;
[L1971]               __tmp__decimals_DEAPCoin := decimals_DEAPCoin;
[L1972]               __tmp__INITIAL_SUPPLY_DEAPCoin := INITIAL_SUPPLY_DEAPCoin;
[L1973]               __tmp__INITIAL_SALE_SUPPLY_DEAPCoin := INITIAL_SALE_SUPPLY_DEAPCoin;
[L1974]               __tmp__INITIAL_UNSALE_SUPPLY_DEAPCoin := INITIAL_UNSALE_SUPPLY_DEAPCoin;
[L1975]               __tmp__owner_wallet_DEAPCoin := owner_wallet_DEAPCoin;
[L1976]               __tmp__unsale_owner_wallet_DEAPCoin := unsale_owner_wallet_DEAPCoin;
[L1977]               __tmp__group_lockup_DEAPCoin := group_lockup_DEAPCoin;
[L1978]   CALL        call __ret_0_ := approve~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s743, _value_s743);
[L6114]               __tmp__sum_allowed3[msgsender_MSG] := __tmp__sum_allowed3[msgsender_MSG] - __tmp__allowed_StandardToken[this][msgsender_MSG][_spender_s743];
[L6115]               __tmp__allowed_StandardToken[this][msgsender_MSG][_spender_s743] := _value_s743;
[L6116]               __tmp__sum_allowed3[msgsender_MSG] := __tmp__sum_allowed3[msgsender_MSG] + __tmp__allowed_StandardToken[this][msgsender_MSG][_spender_s743];
[L6117]               __ret_0_ := true;
[L1978]   RET         call __ret_0_ := approve~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s743, _value_s743);
[L1979]               assume revert || gas < 0;
[L10764]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s743, _value_s743);
[L10896]  RET         call CorralChoice_DEAPCoin(this);

Loop:
[L10896]  CALL        call CorralChoice_DEAPCoin(this);
[L10641]              havoc msgsender_MSG;
[L10642]              havoc msgvalue_MSG;
[L10643]              havoc choice;
[L10644]              havoc __ret_0_owner;
[L10645]              havoc newOwner_s54;
[L10646]              havoc __ret_0_totalSupply;
[L10647]              havoc _owner_s578;
[L10648]              havoc __ret_0_balanceOf;
[L10649]              havoc _to_s1284;
[L10650]              havoc _value_s1284;
[L10651]              havoc __ret_0_transfer;
[L10652]              havoc _owner_s759;
[L10653]              havoc _spender_s759;
[L10654]              havoc __ret_0_allowance;
[L10655]              havoc _from_s715;
[L10656]              havoc _to_s715;
[L10657]              havoc _value_s715;
[L10658]              havoc __ret_0_transferFrom;
[L10659]              havoc _spender_s743;
[L10660]              havoc _value_s743;
[L10661]              havoc __ret_0_approve;
[L10662]              havoc _spender_s800;
[L10663]              havoc _addedValue_s800;
[L10664]              havoc __ret_0_increaseApproval;
[L10665]              havoc _spender_s860;
[L10666]              havoc _subtractedValue_s860;
[L10667]              havoc __ret_0_decreaseApproval;
[L10668]              havoc __ret_0_mintingFinished;
[L10669]              havoc _to_s932;
[L10670]              havoc _amount_s932;
[L10671]              havoc __ret_0_mint;
[L10672]              havoc __ret_0_finishMinting;
[L10673]              havoc _to_s1413;
[L10674]              havoc _value_s1413;
[L10675]              havoc _data_s1413;
[L10676]              havoc __ret_0_transfer_ERC223;
[L10677]              havoc __ret_0_name;
[L10678]              havoc __ret_0_symbol;
[L10679]              havoc __ret_0_decimals;
[L10680]              havoc __ret_0_INITIAL_SUPPLY;
[L10681]              havoc __ret_0_INITIAL_SALE_SUPPLY;
[L10682]              havoc __ret_0_INITIAL_UNSALE_SUPPLY;
[L10683]              havoc __ret_0_owner_wallet;
[L10684]              havoc __ret_0_unsale_owner_wallet;
[L10685]              havoc __ret_0_group_lockup;
[L10686]              havoc _sale_owner_wallet_s1076;
[L10687]              havoc _unsale_owner_wallet_s1076;
[L10688]              havoc _group_lockup_s1076;
[L10689]              havoc _to_s1162;
[L10690]              havoc _value_s1162;
[L10691]              havoc __ret_0_sendTokens;
[L10692]              havoc _from_s1567;
[L10693]              havoc _users_s1567;
[L10694]              havoc _values_s1567;
[L10695]              havoc __ret_0_batchTransfer;
[L10696]              havoc tmpNow;
[L10697]              havoc gas;
[L10698]              assume gas > 4000000 && gas <= 8000000;
[L10699]              tmpNow := now;
[L10700]              havoc now;
[L10701]              assume now > tmpNow;
[L10702]              assume msgsender_MSG != null;
[L10703]              assume DType[msgsender_MSG] != Ownable;
[L10704]              assume DType[msgsender_MSG] != SafeMath;
[L10705]              assume DType[msgsender_MSG] != GroupLockup;
[L10706]              assume DType[msgsender_MSG] != ERC20Basic;
[L10707]              assume DType[msgsender_MSG] != BasicToken;
[L10708]              assume DType[msgsender_MSG] != ERC20;
[L10709]              assume DType[msgsender_MSG] != StandardToken;
[L10710]              assume DType[msgsender_MSG] != MintableToken;
[L10711]              assume DType[msgsender_MSG] != ERC223Token;
[L10712]              assume DType[msgsender_MSG] != ERC223ContractInterface;
[L10713]              assume DType[msgsender_MSG] != DEAPCoin;
[L10714]              Alloc[msgsender_MSG] := true;
[L10715]  COND TRUE   choice == 25
[L10716]              gas := gas - 21000;
[L10717]  COND TRUE   gas >= 0
[L10718]              assume msgvalue_MSG == 0;
[L10719]  CALL        call __ret_0_owner := owner_Ownable(this, msgsender_MSG, msgvalue_MSG);
[L271]                havoc __exception;
[L272]                revert := false;
[L273]    COND FALSE  !(__exception)
[L311]    CALL        call __ret_0_ := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5307]               __ret_0_ := owner_Ownable[this];
[L311]    RET         call __ret_0_ := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L312]                assume !revert && gas >= 0;
[L10719]  RET         call __ret_0_owner := owner_Ownable(this, msgsender_MSG, msgvalue_MSG);
[L10896]  RET         call CorralChoice_DEAPCoin(this);

[2020-11-25 13:23:45,020 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:23:45,020 INFO  L82        PathProgramCache]: Analyzing trace with hash -684476279, now seen corresponding path program 1 times
[2020-11-25 13:23:45,021 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:23:45,043 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:23:45,303 INFO  L134       CoverageAnalysis]: Checked inductivity of 3948 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 3948 trivial. 0 not checked.
[2020-11-25 13:23:45,304 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:23:45,304 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 13:23:45,304 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:23:45,304 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 13:23:45,305 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 13:23:45,305 INFO  L87              Difference]: Start difference. First operand 5530 states and 6147 transitions. cyclomatic complexity: 625 Second operand 5 states.
[2020-11-25 13:23:45,781 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:23:45,781 INFO  L93              Difference]: Finished difference Result 6152 states and 6820 transitions.
[2020-11-25 13:23:45,781 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 13:23:45,781 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6152 states and 6820 transitions.
[2020-11-25 13:23:45,792 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 12
[2020-11-25 13:23:45,804 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6152 states to 4297 states and 4913 transitions.
[2020-11-25 13:23:45,804 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 713
[2020-11-25 13:23:45,805 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1084
[2020-11-25 13:23:45,805 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4297 states and 4913 transitions.
[2020-11-25 13:23:45,808 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:23:45,808 INFO  L728         BuchiCegarLoop]: Abstraction has 4297 states and 4913 transitions.
[2020-11-25 13:23:45,810 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4297 states and 4913 transitions.
[2020-11-25 13:23:45,828 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4297 to 3109.
[2020-11-25 13:23:45,828 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3109 states.
[2020-11-25 13:23:45,831 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3109 states to 3109 states and 3429 transitions.
[2020-11-25 13:23:45,831 INFO  L751         BuchiCegarLoop]: Abstraction has 3109 states and 3429 transitions.
[2020-11-25 13:23:45,831 INFO  L631         BuchiCegarLoop]: Abstraction has 3109 states and 3429 transitions.
[2020-11-25 13:23:45,831 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 13:23:45,831 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3109 states and 3429 transitions.
[2020-11-25 13:23:45,834 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:23:45,834 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:23:45,834 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:23:45,836 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [24, 24, 24, 24, 24, 24, 24, 24, 24, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:23:45,836 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_StandardToken0 := false;
[L3]                  call_approve_StandardToken0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L10886]              assume null == 0;
[L10887]  CALL        call this := FreshRefGenerator__success();
[L5226]               havoc newRef;
[L5227]               assume Alloc[newRef] == false;
[L5228]               Alloc[newRef] := true;
[L5229]               assume newRef != null;
[L10887]  RET         call this := FreshRefGenerator__success();
[L10888]              assume now >= 0;
[L10889]              assume DType[this] == DEAPCoin;
[L10890]              assume msgvalue_MSG == 0;
[L10891]              gas := gas - 53000;
[L10892]  CALL        call DEAPCoin_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L2858]               havoc __exception;
[L2859]               revert := false;
[L2860]   COND FALSE  !(__exception)
[L2898]   CALL        call DEAPCoin_DEAPCoin__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6652]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L6652]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6653]   COND FALSE  !(revert)
[L6656]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5953]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]   COND FALSE  !(revert)
[L5957]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5957]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6656]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6657]   COND FALSE  !(revert)
[L6660]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5824]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5825]   COND FALSE  !(revert)
[L5828]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5802]               assume msgsender_MSG != null;
[L5803]               Balance[this] := 0;
[L5804]               balances_BasicToken[this] := zeroRefintArr();
[L5805]               sum_balances2[this] := 0;
[L5806]               totalSupply__BasicToken[this] := 0;
[L5828]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5829]   COND FALSE  !(revert)
[L6660]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6661]   COND FALSE  !(revert)
[L6664]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6005]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L6005]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]   COND FALSE  !(revert)
[L6009]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5953]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]   COND FALSE  !(revert)
[L5957]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5957]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6009]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6010]   COND FALSE  !(revert)
[L6013]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5824]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5825]   COND FALSE  !(revert)
[L5828]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5802]               assume msgsender_MSG != null;
[L5803]               Balance[this] := 0;
[L5804]               balances_BasicToken[this] := zeroRefintArr();
[L5805]               sum_balances2[this] := 0;
[L5806]               totalSupply__BasicToken[this] := 0;
[L5828]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5829]   COND FALSE  !(revert)
[L6013]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]   COND FALSE  !(revert)
[L6017]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5976]               assume msgsender_MSG != null;
[L5977]               Balance[this] := 0;
[L5978]               allowed_StandardToken[this] := zeroRefRefintArr();
[L5979]               sum_allowed3[this] := 0;
[L6017]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6018]   COND FALSE  !(revert)
[L6664]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6665]   COND FALSE  !(revert)
[L6668]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5262]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5245]               assume msgsender_MSG != null;
[L5246]               Balance[this] := 0;
[L5247]               owner_Ownable[this] := null;
[L5249]               owner_Ownable[this] := msgsender_MSG;
[L5262]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5263]   COND FALSE  !(revert)
[L6668]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6669]   COND FALSE  !(revert)
[L6672]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6265]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L6265]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6266]   COND FALSE  !(revert)
[L6269]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5953]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]   COND FALSE  !(revert)
[L5957]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5957]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6269]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6270]   COND FALSE  !(revert)
[L6273]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5824]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5825]   COND FALSE  !(revert)
[L5828]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5802]               assume msgsender_MSG != null;
[L5803]               Balance[this] := 0;
[L5804]               balances_BasicToken[this] := zeroRefintArr();
[L5805]               sum_balances2[this] := 0;
[L5806]               totalSupply__BasicToken[this] := 0;
[L5828]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5829]   COND FALSE  !(revert)
[L6273]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6274]   COND FALSE  !(revert)
[L6277]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6005]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L6005]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]   COND FALSE  !(revert)
[L6009]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5953]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]   COND FALSE  !(revert)
[L5957]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5957]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6009]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6010]   COND FALSE  !(revert)
[L6013]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5824]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5825]   COND FALSE  !(revert)
[L5828]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5802]               assume msgsender_MSG != null;
[L5803]               Balance[this] := 0;
[L5804]               balances_BasicToken[this] := zeroRefintArr();
[L5805]               sum_balances2[this] := 0;
[L5806]               totalSupply__BasicToken[this] := 0;
[L5828]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5829]   COND FALSE  !(revert)
[L6013]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]   COND FALSE  !(revert)
[L6017]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5976]               assume msgsender_MSG != null;
[L5977]               Balance[this] := 0;
[L5978]               allowed_StandardToken[this] := zeroRefRefintArr();
[L5979]               sum_allowed3[this] := 0;
[L6017]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6018]   COND FALSE  !(revert)
[L6277]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6278]   COND FALSE  !(revert)
[L6281]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5262]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5245]               assume msgsender_MSG != null;
[L5246]               Balance[this] := 0;
[L5247]               owner_Ownable[this] := null;
[L5249]               owner_Ownable[this] := msgsender_MSG;
[L5262]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5263]   COND FALSE  !(revert)
[L6281]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6282]   COND FALSE  !(revert)
[L6285]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6229]               assume msgsender_MSG != null;
[L6230]               Balance[this] := 0;
[L6231]               mintingFinished_MintableToken[this] := false;
[L6285]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6286]   COND FALSE  !(revert)
[L6672]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6673]   COND FALSE  !(revert)
[L6676]   CALL        call ERC223Token_ERC223Token__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L6442]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6443]   COND FALSE  !(revert)
[L6446]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5953]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]   COND FALSE  !(revert)
[L5957]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5957]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6446]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6447]   COND FALSE  !(revert)
[L6450]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5824]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5825]   COND FALSE  !(revert)
[L5828]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5802]               assume msgsender_MSG != null;
[L5803]               Balance[this] := 0;
[L5804]               balances_BasicToken[this] := zeroRefintArr();
[L5805]               sum_balances2[this] := 0;
[L5806]               totalSupply__BasicToken[this] := 0;
[L5828]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5829]   COND FALSE  !(revert)
[L6450]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6005]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L6005]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]   COND FALSE  !(revert)
[L6009]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5953]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]   COND FALSE  !(revert)
[L5957]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5957]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6009]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6010]   COND FALSE  !(revert)
[L6013]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5824]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5825]   COND FALSE  !(revert)
[L5828]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5802]               assume msgsender_MSG != null;
[L5803]               Balance[this] := 0;
[L5804]               balances_BasicToken[this] := zeroRefintArr();
[L5805]               sum_balances2[this] := 0;
[L5806]               totalSupply__BasicToken[this] := 0;
[L5828]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5829]   COND FALSE  !(revert)
[L6013]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]   COND FALSE  !(revert)
[L6017]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5976]               assume msgsender_MSG != null;
[L5977]               Balance[this] := 0;
[L5978]               allowed_StandardToken[this] := zeroRefRefintArr();
[L5979]               sum_allowed3[this] := 0;
[L6017]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6018]   COND FALSE  !(revert)
[L6454]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L6458]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5262]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5245]               assume msgsender_MSG != null;
[L5246]               Balance[this] := 0;
[L5247]               owner_Ownable[this] := null;
[L5249]               owner_Ownable[this] := msgsender_MSG;
[L5262]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5263]   COND FALSE  !(revert)
[L6458]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6459]   COND FALSE  !(revert)
[L6462]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6265]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L6265]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6266]   COND FALSE  !(revert)
[L6269]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5953]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]   COND FALSE  !(revert)
[L5957]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5957]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6269]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6270]   COND FALSE  !(revert)
[L6273]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5824]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5825]   COND FALSE  !(revert)
[L5828]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5802]               assume msgsender_MSG != null;
[L5803]               Balance[this] := 0;
[L5804]               balances_BasicToken[this] := zeroRefintArr();
[L5805]               sum_balances2[this] := 0;
[L5806]               totalSupply__BasicToken[this] := 0;
[L5828]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5829]   COND FALSE  !(revert)
[L6273]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6274]   COND FALSE  !(revert)
[L6277]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6005]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L6005]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]   COND FALSE  !(revert)
[L6009]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5953]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]   COND FALSE  !(revert)
[L5957]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5957]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6009]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6010]   COND FALSE  !(revert)
[L6013]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]               assume msgsender_MSG != null;
[L5768]               Balance[this] := 0;
[L5782]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]   COND FALSE  !(revert)
[L5824]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5825]   COND FALSE  !(revert)
[L5828]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5802]               assume msgsender_MSG != null;
[L5803]               Balance[this] := 0;
[L5804]               balances_BasicToken[this] := zeroRefintArr();
[L5805]               sum_balances2[this] := 0;
[L5806]               totalSupply__BasicToken[this] := 0;
[L5828]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5829]   COND FALSE  !(revert)
[L6013]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]   COND FALSE  !(revert)
[L6017]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5976]               assume msgsender_MSG != null;
[L5977]               Balance[this] := 0;
[L5978]               allowed_StandardToken[this] := zeroRefRefintArr();
[L5979]               sum_allowed3[this] := 0;
[L6017]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6018]   COND FALSE  !(revert)
[L6277]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6278]   COND FALSE  !(revert)
[L6281]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5262]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5245]               assume msgsender_MSG != null;
[L5246]               Balance[this] := 0;
[L5247]               owner_Ownable[this] := null;
[L5249]               owner_Ownable[this] := msgsender_MSG;
[L5262]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5263]   COND FALSE  !(revert)
[L6281]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6282]   COND FALSE  !(revert)
[L6285]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6229]               assume msgsender_MSG != null;
[L6230]               Balance[this] := 0;
[L6231]               mintingFinished_MintableToken[this] := false;
[L6285]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6286]   COND FALSE  !(revert)
[L6462]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6463]   COND FALSE  !(revert)
[L6466]   CALL        call ERC223Token_ERC223Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6403]               assume msgsender_MSG != null;
[L6404]               Balance[this] := 0;
[L6466]   RET         call ERC223Token_ERC223Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]   COND FALSE  !(revert)
[L6676]   RET         call ERC223Token_ERC223Token__success(this, msgsender_MSG, msgvalue_MSG);
[L6677]   COND FALSE  !(revert)
[L6680]   CALL        call DEAPCoin_DEAPCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6562]               assume msgsender_MSG != null;
[L6563]               Balance[this] := 0;
[L6564]               name_DEAPCoin[this] := -635866188;
[L6565]               symbol_DEAPCoin[this] := -1031151507;
[L6566]               decimals_DEAPCoin[this] := 18;
[L6567]               __var_19 := decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6568]               INITIAL_SUPPLY_DEAPCoin[this] := 30000000000 * (nonlinearPow(10, decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6569]               __var_20 := decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6570]               INITIAL_SALE_SUPPLY_DEAPCoin[this] := 12000000000 * (nonlinearPow(10, decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6571]               INITIAL_UNSALE_SUPPLY_DEAPCoin[this] := (INITIAL_SUPPLY_DEAPCoin[this] - INITIAL_SALE_SUPPLY_DEAPCoin[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6572]               owner_wallet_DEAPCoin[this] := null;
[L6573]               unsale_owner_wallet_DEAPCoin[this] := null;
[L6575]               group_lockup_DEAPCoin[this] := _group_lockup_s1076;
[L6576]               owner_wallet_DEAPCoin[this] := _sale_owner_wallet_s1076;
[L6577]               unsale_owner_wallet_DEAPCoin[this] := _unsale_owner_wallet_s1076;
[L6578]   COND TRUE   DType[this] == DEAPCoin
[L6579]   CALL        call __var_16 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, owner_wallet_DEAPCoin[this], INITIAL_SALE_SUPPLY_DEAPCoin[this]);
[L6323]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9398]   COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L6323]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6327]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9414]   COND FALSE  !(!!mintingFinished_MintableToken[this])
[L6327]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6328]   COND FALSE  !(revert)
[L6331]   CALL        call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s932);
[L5400]               c_s146 := (a_s146 + b_s146) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5401]               assert c_s146 >= a_s146;
[L5402]               c_s146 := c_s146;
[L6331]   RET         call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s932);
[L6332]   COND FALSE  !(revert)
[L6335]               totalSupply__BasicToken[this] := __var_14;
[L6336]   CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s932], _amount_s932);
[L5400]               c_s146 := (a_s146 + b_s146) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5401]               assert c_s146 >= a_s146;
[L5402]               c_s146 := c_s146;
[L6336]   RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s932], _amount_s932);
[L6337]   COND FALSE  !(revert)
[L6340]               sum_balances2[this] := sum_balances2[this] - balances_BasicToken[this][_to_s932];
[L6341]               balances_BasicToken[this][_to_s932] := __var_15;
[L6342]               sum_balances2[this] := sum_balances2[this] + balances_BasicToken[this][_to_s932];
[L6343]               assert { :EventEmitted "Mint_MintableToken" } true;
[L6344]               assert { :EventEmitted "Transfer_MintableToken" } true;
[L6345]               __ret_0_ := true;
[L6579]   RET         call __var_16 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, owner_wallet_DEAPCoin[this], INITIAL_SALE_SUPPLY_DEAPCoin[this]);
[L6580]   COND FALSE  !(revert)
[L6586]   COND TRUE   DType[this] == DEAPCoin
[L6587]   CALL        call __var_17 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, unsale_owner_wallet_DEAPCoin[this], INITIAL_UNSALE_SUPPLY_DEAPCoin[this]);
[L6323]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9398]   COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L6323]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6327]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9414]   COND FALSE  !(!!mintingFinished_MintableToken[this])
[L6327]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6328]   COND FALSE  !(revert)
[L6331]   CALL        call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s932);
[L5400]               c_s146 := (a_s146 + b_s146) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5401]               assert c_s146 >= a_s146;
[L5402]               c_s146 := c_s146;
[L6331]   RET         call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s932);
[L6332]   COND FALSE  !(revert)
[L6335]               totalSupply__BasicToken[this] := __var_14;
[L6336]   CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s932], _amount_s932);
[L5400]               c_s146 := (a_s146 + b_s146) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5401]               assert c_s146 >= a_s146;
[L5402]               c_s146 := c_s146;
[L6336]   RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s932], _amount_s932);
[L6337]   COND FALSE  !(revert)
[L6340]               sum_balances2[this] := sum_balances2[this] - balances_BasicToken[this][_to_s932];
[L6341]               balances_BasicToken[this][_to_s932] := __var_15;
[L6342]               sum_balances2[this] := sum_balances2[this] + balances_BasicToken[this][_to_s932];
[L6343]               assert { :EventEmitted "Mint_MintableToken" } true;
[L6344]               assert { :EventEmitted "Transfer_MintableToken" } true;
[L6345]               __ret_0_ := true;
[L6587]   RET         call __var_17 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, unsale_owner_wallet_DEAPCoin[this], INITIAL_UNSALE_SUPPLY_DEAPCoin[this]);
[L6588]   COND FALSE  !(revert)
[L6594]   COND TRUE   DType[this] == DEAPCoin
[L6595]   CALL        call __var_18 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6366]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9398]   COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L6366]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6367]   COND FALSE  !(revert)
[L6370]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9414]   COND FALSE  !(!!mintingFinished_MintableToken[this])
[L6370]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6371]   COND FALSE  !(revert)
[L6374]               mintingFinished_MintableToken[this] := true;
[L6375]               assert { :EventEmitted "MintFinished_MintableToken" } true;
[L6376]               __ret_0_ := true;
[L6595]   RET         call __var_18 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6596]   COND FALSE  !(revert)
[L6680]   RET         call DEAPCoin_DEAPCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6681]   COND FALSE  !(revert)
[L2898]   RET         call DEAPCoin_DEAPCoin__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L2899]               assume !revert && gas >= 0;
[L10892]  RET         call DEAPCoin_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L10893]              assume !revert && gas >= 0;
[L10896]  CALL        call CorralChoice_DEAPCoin(this);
[L10641]              havoc msgsender_MSG;
[L10642]              havoc msgvalue_MSG;
[L10643]              havoc choice;
[L10644]              havoc __ret_0_owner;
[L10645]              havoc newOwner_s54;
[L10646]              havoc __ret_0_totalSupply;
[L10647]              havoc _owner_s578;
[L10648]              havoc __ret_0_balanceOf;
[L10649]              havoc _to_s1284;
[L10650]              havoc _value_s1284;
[L10651]              havoc __ret_0_transfer;
[L10652]              havoc _owner_s759;
[L10653]              havoc _spender_s759;
[L10654]              havoc __ret_0_allowance;
[L10655]              havoc _from_s715;
[L10656]              havoc _to_s715;
[L10657]              havoc _value_s715;
[L10658]              havoc __ret_0_transferFrom;
[L10659]              havoc _spender_s743;
[L10660]              havoc _value_s743;
[L10661]              havoc __ret_0_approve;
[L10662]              havoc _spender_s800;
[L10663]              havoc _addedValue_s800;
[L10664]              havoc __ret_0_increaseApproval;
[L10665]              havoc _spender_s860;
[L10666]              havoc _subtractedValue_s860;
[L10667]              havoc __ret_0_decreaseApproval;
[L10668]              havoc __ret_0_mintingFinished;
[L10669]              havoc _to_s932;
[L10670]              havoc _amount_s932;
[L10671]              havoc __ret_0_mint;
[L10672]              havoc __ret_0_finishMinting;
[L10673]              havoc _to_s1413;
[L10674]              havoc _value_s1413;
[L10675]              havoc _data_s1413;
[L10676]              havoc __ret_0_transfer_ERC223;
[L10677]              havoc __ret_0_name;
[L10678]              havoc __ret_0_symbol;
[L10679]              havoc __ret_0_decimals;
[L10680]              havoc __ret_0_INITIAL_SUPPLY;
[L10681]              havoc __ret_0_INITIAL_SALE_SUPPLY;
[L10682]              havoc __ret_0_INITIAL_UNSALE_SUPPLY;
[L10683]              havoc __ret_0_owner_wallet;
[L10684]              havoc __ret_0_unsale_owner_wallet;
[L10685]              havoc __ret_0_group_lockup;
[L10686]              havoc _sale_owner_wallet_s1076;
[L10687]              havoc _unsale_owner_wallet_s1076;
[L10688]              havoc _group_lockup_s1076;
[L10689]              havoc _to_s1162;
[L10690]              havoc _value_s1162;
[L10691]              havoc __ret_0_sendTokens;
[L10692]              havoc _from_s1567;
[L10693]              havoc _users_s1567;
[L10694]              havoc _values_s1567;
[L10695]              havoc __ret_0_batchTransfer;
[L10696]              havoc tmpNow;
[L10697]              havoc gas;
[L10698]              assume gas > 4000000 && gas <= 8000000;
[L10699]              tmpNow := now;
[L10700]              havoc now;
[L10701]              assume now > tmpNow;
[L10702]              assume msgsender_MSG != null;
[L10703]              assume DType[msgsender_MSG] != Ownable;
[L10704]              assume DType[msgsender_MSG] != SafeMath;
[L10705]              assume DType[msgsender_MSG] != GroupLockup;
[L10706]              assume DType[msgsender_MSG] != ERC20Basic;
[L10707]              assume DType[msgsender_MSG] != BasicToken;
[L10708]              assume DType[msgsender_MSG] != ERC20;
[L10709]              assume DType[msgsender_MSG] != StandardToken;
[L10710]              assume DType[msgsender_MSG] != MintableToken;
[L10711]              assume DType[msgsender_MSG] != ERC223Token;
[L10712]              assume DType[msgsender_MSG] != ERC223ContractInterface;
[L10713]              assume DType[msgsender_MSG] != DEAPCoin;
[L10714]              Alloc[msgsender_MSG] := true;
[L10715]  COND FALSE  !(choice == 25)
[L10721]  COND FALSE  !(choice == 24)
[L10727]  COND FALSE  !(choice == 23)
[L10733]  COND FALSE  !(choice == 22)
[L10739]  COND FALSE  !(choice == 21)
[L10746]  COND FALSE  !(choice == 20)
[L10752]  COND FALSE  !(choice == 19)
[L10759]  COND FALSE  !(choice == 18)
[L10766]  COND FALSE  !(choice == 17)
[L10773]  COND TRUE   choice == 16
[L10774]              gas := gas - 21000;
[L10775]  COND TRUE   gas >= 0
[L10776]              assume _subtractedValue_s860 >= 0 && _subtractedValue_s860 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10777]              assume msgvalue_MSG == 0;
[L10778]  CALL        call __ret_0_decreaseApproval := decreaseApproval~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s860, _subtractedValue_s860);
[L2197]               havoc __exception;
[L2198]               revert := false;
[L2199]   COND FALSE  !(__exception)
[L2237]   CALL        call __ret_0_ := decreaseApproval~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s860, _subtractedValue_s860);
[L6198]               oldValue_s860 := allowed_StandardToken[this][msgsender_MSG][_spender_s860];
[L6199]   COND TRUE   _subtractedValue_s860 > oldValue_s860
[L6200]               sum_allowed3[msgsender_MSG] := sum_allowed3[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s860];
[L6201]               allowed_StandardToken[this][msgsender_MSG][_spender_s860] := 0;
[L6202]               sum_allowed3[msgsender_MSG] := sum_allowed3[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s860];
[L6212]               assert { :EventEmitted "Approval_StandardToken" } true;
[L6213]               __ret_0_ := true;
[L2237]   RET         call __ret_0_ := decreaseApproval~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s860, _subtractedValue_s860);
[L2238]               assume !revert && gas >= 0;
[L10778]  RET         call __ret_0_decreaseApproval := decreaseApproval~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s860, _subtractedValue_s860);
[L10896]  RET         call CorralChoice_DEAPCoin(this);
[L10896]  CALL        call CorralChoice_DEAPCoin(this);
[L10641]              havoc msgsender_MSG;
[L10642]              havoc msgvalue_MSG;
[L10643]              havoc choice;
[L10644]              havoc __ret_0_owner;
[L10645]              havoc newOwner_s54;
[L10646]              havoc __ret_0_totalSupply;
[L10647]              havoc _owner_s578;
[L10648]              havoc __ret_0_balanceOf;
[L10649]              havoc _to_s1284;
[L10650]              havoc _value_s1284;
[L10651]              havoc __ret_0_transfer;
[L10652]              havoc _owner_s759;
[L10653]              havoc _spender_s759;
[L10654]              havoc __ret_0_allowance;
[L10655]              havoc _from_s715;
[L10656]              havoc _to_s715;
[L10657]              havoc _value_s715;
[L10658]              havoc __ret_0_transferFrom;
[L10659]              havoc _spender_s743;
[L10660]              havoc _value_s743;
[L10661]              havoc __ret_0_approve;
[L10662]              havoc _spender_s800;
[L10663]              havoc _addedValue_s800;
[L10664]              havoc __ret_0_increaseApproval;
[L10665]              havoc _spender_s860;
[L10666]              havoc _subtractedValue_s860;
[L10667]              havoc __ret_0_decreaseApproval;
[L10668]              havoc __ret_0_mintingFinished;
[L10669]              havoc _to_s932;
[L10670]              havoc _amount_s932;
[L10671]              havoc __ret_0_mint;
[L10672]              havoc __ret_0_finishMinting;
[L10673]              havoc _to_s1413;
[L10674]              havoc _value_s1413;
[L10675]              havoc _data_s1413;
[L10676]              havoc __ret_0_transfer_ERC223;
[L10677]              havoc __ret_0_name;
[L10678]              havoc __ret_0_symbol;
[L10679]              havoc __ret_0_decimals;
[L10680]              havoc __ret_0_INITIAL_SUPPLY;
[L10681]              havoc __ret_0_INITIAL_SALE_SUPPLY;
[L10682]              havoc __ret_0_INITIAL_UNSALE_SUPPLY;
[L10683]              havoc __ret_0_owner_wallet;
[L10684]              havoc __ret_0_unsale_owner_wallet;
[L10685]              havoc __ret_0_group_lockup;
[L10686]              havoc _sale_owner_wallet_s1076;
[L10687]              havoc _unsale_owner_wallet_s1076;
[L10688]              havoc _group_lockup_s1076;
[L10689]              havoc _to_s1162;
[L10690]              havoc _value_s1162;
[L10691]              havoc __ret_0_sendTokens;
[L10692]              havoc _from_s1567;
[L10693]              havoc _users_s1567;
[L10694]              havoc _values_s1567;
[L10695]              havoc __ret_0_batchTransfer;
[L10696]              havoc tmpNow;
[L10697]              havoc gas;
[L10698]              assume gas > 4000000 && gas <= 8000000;
[L10699]              tmpNow := now;
[L10700]              havoc now;
[L10701]              assume now > tmpNow;
[L10702]              assume msgsender_MSG != null;
[L10703]              assume DType[msgsender_MSG] != Ownable;
[L10704]              assume DType[msgsender_MSG] != SafeMath;
[L10705]              assume DType[msgsender_MSG] != GroupLockup;
[L10706]              assume DType[msgsender_MSG] != ERC20Basic;
[L10707]              assume DType[msgsender_MSG] != BasicToken;
[L10708]              assume DType[msgsender_MSG] != ERC20;
[L10709]              assume DType[msgsender_MSG] != StandardToken;
[L10710]              assume DType[msgsender_MSG] != MintableToken;
[L10711]              assume DType[msgsender_MSG] != ERC223Token;
[L10712]              assume DType[msgsender_MSG] != ERC223ContractInterface;
[L10713]              assume DType[msgsender_MSG] != DEAPCoin;
[L10714]              Alloc[msgsender_MSG] := true;
[L10715]  COND FALSE  !(choice == 25)
[L10721]  COND FALSE  !(choice == 24)
[L10727]  COND FALSE  !(choice == 23)
[L10733]  COND FALSE  !(choice == 22)
[L10739]  COND FALSE  !(choice == 21)
[L10746]  COND FALSE  !(choice == 20)
[L10752]  COND FALSE  !(choice == 19)
[L10759]  COND TRUE   choice == 18
[L10760]              gas := gas - 21000;
[L10761]  COND TRUE   gas >= 0
[L10762]              assume _value_s743 >= 0 && _value_s743 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10763]              assume msgvalue_MSG == 0;
[L10764]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s743, _value_s743);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != _spender_s743;
[L3]                  call_approve_StandardToken0 := true;
[L3]                  call_approve_StandardToken0 := false;
[L3]                  revert := revert_hold;
[L1941]               havoc __exception;
[L1942]               revert := false;
[L1943]   COND FALSE  !(__exception)
[L1981]   CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s743, _value_s743);
[L6123]               sum_allowed3[msgsender_MSG] := sum_allowed3[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s743];
[L6124]               allowed_StandardToken[this][msgsender_MSG][_spender_s743] := _value_s743;
[L6125]               sum_allowed3[msgsender_MSG] := sum_allowed3[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s743];
[L6126]               assert { :EventEmitted "Approval_StandardToken" } true;
[L6127]               __ret_0_ := true;
[L1981]   RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s743, _value_s743);
[L1982]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !(((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s743] == _value_s743) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && owner_wallet_DEAPCoin[this] == old(owner_wallet_DEAPCoin[this])) && unsale_owner_wallet_DEAPCoin[this] == old(unsale_owner_wallet_DEAPCoin[this])) && group_lockup_DEAPCoin[this] == old(group_lockup_DEAPCoin[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L3]                  revert := revert_hold;
[L10764]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s743, _value_s743);
[L10896]  RET         call CorralChoice_DEAPCoin(this);

Loop:
[L10896]  CALL        call CorralChoice_DEAPCoin(this);
[L10641]              havoc msgsender_MSG;
[L10642]              havoc msgvalue_MSG;
[L10643]              havoc choice;
[L10644]              havoc __ret_0_owner;
[L10645]              havoc newOwner_s54;
[L10646]              havoc __ret_0_totalSupply;
[L10647]              havoc _owner_s578;
[L10648]              havoc __ret_0_balanceOf;
[L10649]              havoc _to_s1284;
[L10650]              havoc _value_s1284;
[L10651]              havoc __ret_0_transfer;
[L10652]              havoc _owner_s759;
[L10653]              havoc _spender_s759;
[L10654]              havoc __ret_0_allowance;
[L10655]              havoc _from_s715;
[L10656]              havoc _to_s715;
[L10657]              havoc _value_s715;
[L10658]              havoc __ret_0_transferFrom;
[L10659]              havoc _spender_s743;
[L10660]              havoc _value_s743;
[L10661]              havoc __ret_0_approve;
[L10662]              havoc _spender_s800;
[L10663]              havoc _addedValue_s800;
[L10664]              havoc __ret_0_increaseApproval;
[L10665]              havoc _spender_s860;
[L10666]              havoc _subtractedValue_s860;
[L10667]              havoc __ret_0_decreaseApproval;
[L10668]              havoc __ret_0_mintingFinished;
[L10669]              havoc _to_s932;
[L10670]              havoc _amount_s932;
[L10671]              havoc __ret_0_mint;
[L10672]              havoc __ret_0_finishMinting;
[L10673]              havoc _to_s1413;
[L10674]              havoc _value_s1413;
[L10675]              havoc _data_s1413;
[L10676]              havoc __ret_0_transfer_ERC223;
[L10677]              havoc __ret_0_name;
[L10678]              havoc __ret_0_symbol;
[L10679]              havoc __ret_0_decimals;
[L10680]              havoc __ret_0_INITIAL_SUPPLY;
[L10681]              havoc __ret_0_INITIAL_SALE_SUPPLY;
[L10682]              havoc __ret_0_INITIAL_UNSALE_SUPPLY;
[L10683]              havoc __ret_0_owner_wallet;
[L10684]              havoc __ret_0_unsale_owner_wallet;
[L10685]              havoc __ret_0_group_lockup;
[L10686]              havoc _sale_owner_wallet_s1076;
[L10687]              havoc _unsale_owner_wallet_s1076;
[L10688]              havoc _group_lockup_s1076;
[L10689]              havoc _to_s1162;
[L10690]              havoc _value_s1162;
[L10691]              havoc __ret_0_sendTokens;
[L10692]              havoc _from_s1567;
[L10693]              havoc _users_s1567;
[L10694]              havoc _values_s1567;
[L10695]              havoc __ret_0_batchTransfer;
[L10696]              havoc tmpNow;
[L10697]              havoc gas;
[L10698]              assume gas > 4000000 && gas <= 8000000;
[L10699]              tmpNow := now;
[L10700]              havoc now;
[L10701]              assume now > tmpNow;
[L10702]              assume msgsender_MSG != null;
[L10703]              assume DType[msgsender_MSG] != Ownable;
[L10704]              assume DType[msgsender_MSG] != SafeMath;
[L10705]              assume DType[msgsender_MSG] != GroupLockup;
[L10706]              assume DType[msgsender_MSG] != ERC20Basic;
[L10707]              assume DType[msgsender_MSG] != BasicToken;
[L10708]              assume DType[msgsender_MSG] != ERC20;
[L10709]              assume DType[msgsender_MSG] != StandardToken;
[L10710]              assume DType[msgsender_MSG] != MintableToken;
[L10711]              assume DType[msgsender_MSG] != ERC223Token;
[L10712]              assume DType[msgsender_MSG] != ERC223ContractInterface;
[L10713]              assume DType[msgsender_MSG] != DEAPCoin;
[L10714]              Alloc[msgsender_MSG] := true;
[L10715]  COND TRUE   choice == 25
[L10716]              gas := gas - 21000;
[L10717]  COND FALSE  !(gas >= 0)
[L10896]  RET         call CorralChoice_DEAPCoin(this);

[2020-11-25 13:23:45,843 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:23:45,843 INFO  L82        PathProgramCache]: Analyzing trace with hash 1101951802, now seen corresponding path program 1 times
[2020-11-25 13:23:45,844 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:23:46,232 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:23:46,656 INFO  L134       CoverageAnalysis]: Checked inductivity of 4032 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 4032 trivial. 0 not checked.
[2020-11-25 13:23:46,656 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:23:46,656 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 13:23:46,657 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:23:46,657 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 13:23:46,657 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=29, Unknown=0, NotChecked=0, Total=42
[2020-11-25 13:23:46,657 INFO  L87              Difference]: Start difference. First operand 3109 states and 3429 transitions. cyclomatic complexity: 325 Second operand 7 states.
[2020-11-25 13:23:47,101 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:23:47,101 INFO  L93              Difference]: Finished difference Result 1809 states and 2006 transitions.
[2020-11-25 13:23:47,101 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 13:23:47,101 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1809 states and 2006 transitions.
[2020-11-25 13:23:47,104 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 13:23:47,104 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1809 states to 0 states and 0 transitions.
[2020-11-25 13:23:47,104 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 13:23:47,104 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 13:23:47,104 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 13:23:47,104 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:23:47,104 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 13:23:47,104 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 13:23:47,104 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 13:23:47,104 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 13:23:47,104 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 13:23:47,105 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 13:23:47,105 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 13:23:47,107 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 01:23:47 BasicIcfg
[2020-11-25 13:23:47,108 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 13:23:47,108 INFO  L168              Benchmark]: Toolchain (without parser) took 14420.48 ms. Allocated memory was 1.0 GB in the beginning and 2.8 GB in the end (delta: 1.7 GB). Free memory was 924.5 MB in the beginning and 2.0 GB in the end (delta: -1.0 GB). Peak memory consumption was 699.0 MB. Max. memory is 15.3 GB.
[2020-11-25 13:23:47,109 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 13:23:47,109 INFO  L168              Benchmark]: Boogie Preprocessor took 148.87 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 903.0 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
[2020-11-25 13:23:47,109 INFO  L168              Benchmark]: UtopiaSpecLang took 86.61 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 886.9 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-25 13:23:47,110 INFO  L168              Benchmark]: Boogie Printer took 26.32 ms. Allocated memory is still 1.0 GB. Free memory was 886.9 MB in the beginning and 881.3 MB in the end (delta: 5.6 MB). Peak memory consumption was 5.6 MB. Max. memory is 15.3 GB.
[2020-11-25 13:23:47,110 INFO  L168              Benchmark]: RCFGBuilder took 1340.19 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 67.6 MB). Free memory was 881.3 MB in the beginning and 840.6 MB in the end (delta: 40.8 MB). Peak memory consumption was 171.7 MB. Max. memory is 15.3 GB.
[2020-11-25 13:23:47,110 INFO  L168              Benchmark]: UtopiaLTL2Aut took 33.85 ms. Allocated memory is still 1.1 GB. Free memory was 840.6 MB in the beginning and 837.1 MB in the end (delta: 3.5 MB). Peak memory consumption was 3.5 MB. Max. memory is 15.3 GB.
[2020-11-25 13:23:47,111 INFO  L168              Benchmark]: BÃ¼chi Program Product took 2967.86 ms. Allocated memory was 1.1 GB in the beginning and 1.6 GB in the end (delta: 456.7 MB). Free memory was 837.1 MB in the beginning and 1.3 GB in the end (delta: -462.2 MB). Peak memory consumption was 428.8 MB. Max. memory is 15.3 GB.
[2020-11-25 13:23:47,111 INFO  L168              Benchmark]: BlockEncodingV2 took 312.62 ms. Allocated memory is still 1.6 GB. Free memory was 1.3 GB in the beginning and 1.2 GB in the end (delta: 142.1 MB). Peak memory consumption was 142.1 MB. Max. memory is 15.3 GB.
[2020-11-25 13:23:47,112 INFO  L168              Benchmark]: BuchiAutomizer took 9501.16 ms. Allocated memory was 1.6 GB in the beginning and 2.8 GB in the end (delta: 1.2 GB). Free memory was 1.2 GB in the beginning and 2.0 GB in the end (delta: -801.5 MB). Peak memory consumption was 407.5 MB. Max. memory is 15.3 GB.
[2020-11-25 13:23:47,114 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    9594 locations, 16980 edges
  - StatisticsResult: Encoded RCFG
    9492 locations, 16712 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 148.87 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 903.0 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 86.61 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 886.9 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 26.32 ms. Allocated memory is still 1.0 GB. Free memory was 886.9 MB in the beginning and 881.3 MB in the end (delta: 5.6 MB). Peak memory consumption was 5.6 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1340.19 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 67.6 MB). Free memory was 881.3 MB in the beginning and 840.6 MB in the end (delta: 40.8 MB). Peak memory consumption was 171.7 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 33.85 ms. Allocated memory is still 1.1 GB. Free memory was 840.6 MB in the beginning and 837.1 MB in the end (delta: 3.5 MB). Peak memory consumption was 3.5 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 2967.86 ms. Allocated memory was 1.1 GB in the beginning and 1.6 GB in the end (delta: 456.7 MB). Free memory was 837.1 MB in the beginning and 1.3 GB in the end (delta: -462.2 MB). Peak memory consumption was 428.8 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 312.62 ms. Allocated memory is still 1.6 GB. Free memory was 1.3 GB in the beginning and 1.2 GB in the end (delta: 142.1 MB). Peak memory consumption was 142.1 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 9501.16 ms. Allocated memory was 1.6 GB in the beginning and 2.8 GB in the end (delta: 1.2 GB). Free memory was 1.2 GB in the beginning and 2.0 GB in the end (delta: -801.5 MB). Peak memory consumption was 407.5 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    3983 locations, 5227 edges
  - StatisticsResult: BuchiProgram size
    9594 locations, 16980 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 7 terminating modules (7 trivial, 0 deterministic, 0 nondeterministic). 7 modules have a trivial ranking function, the largest among these consists of 16 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 9.4s and 8 iterations.  TraceHistogramMax:24. Analysis of lassos took 3.1s. Construction of modules took 3.8s. BÃ¼chi inclusion checks took 1.5s. Highest rank in rank-based complementation 0. Minimization of det autom 7. Minimization of nondet autom 0. Automata minimization 0.3s AutomataMinimizationTime, 6 MinimizatonAttempts, 3026 StatesRemovedByMinimization, 5 NontrivialMinimizations. Non-live state removal took 0.2s Buchi closure took 0.0s. Biggest automaton had 5530 states and ocurred in iteration 5.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 34166 SDtfs, 31404 SDslu, 37680 SDs, 0 SdLazy, 56200 SolverSat, 5102 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 3.8s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU7 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_approve_StandardToken0) ==> ( <>(success_approve_StandardToken0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
