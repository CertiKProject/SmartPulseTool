This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 02:26:05,406 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 02:26:05,407 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 02:26:05,418 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 02:26:05,418 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 02:26:05,419 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 02:26:05,420 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 02:26:05,422 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 02:26:05,423 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 02:26:05,424 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 02:26:05,424 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 02:26:05,425 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 02:26:05,425 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 02:26:05,426 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 02:26:05,427 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 02:26:05,428 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 02:26:05,428 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 02:26:05,430 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 02:26:05,431 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 02:26:05,432 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 02:26:05,433 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 02:26:05,434 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 02:26:05,436 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 02:26:05,436 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 02:26:05,436 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 02:26:05,436 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 02:26:05,437 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 02:26:05,437 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 02:26:05,437 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 02:26:05,438 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 02:26:05,438 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 02:26:05,439 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 02:26:05,439 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 02:26:05,440 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 02:26:05,440 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 02:26:05,440 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 02:26:05,441 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 02:26:05,441 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 02:26:05,441 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 02:26:05,442 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 02:26:05,442 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 02:26:05,443 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 02:26:05,450 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 02:26:05,451 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 02:26:05,451 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 02:26:05,452 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 02:26:05,452 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 02:26:05,452 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 02:26:05,452 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 02:26:05,452 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 02:26:05,452 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 02:26:05,452 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 02:26:05,452 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 02:26:05,452 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 02:26:05,452 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 02:26:05,453 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 02:26:05,453 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 02:26:05,453 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 02:26:05,453 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 02:26:05,453 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 02:26:05,453 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 02:26:05,453 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 02:26:05,453 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 02:26:05,453 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 02:26:05,454 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 02:26:05,454 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 02:26:05,454 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 02:26:05,454 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 02:26:05,476 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 02:26:05,489 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 02:26:05,492 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 02:26:05,493 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 02:26:05,493 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 02:26:05,494 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/OMAToken_0xade84da51b67cbe9002c85b7422c86d78a52f0d2_transfer-self.bpl
[2020-11-25 02:26:05,494 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/OMAToken_0xade84da51b67cbe9002c85b7422c86d78a52f0d2_transfer-self.bpl'
[2020-11-25 02:26:05,576 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 02:26:05,577 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 02:26:05,579 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 02:26:05,579 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 02:26:05,579 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 02:26:05,597 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "OMAToken_0xade84da51b67cbe9002c85b7422c86d78a52f0d2_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:26:05" (1/1) ...
[2020-11-25 02:26:05,599 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "OMAToken_0xade84da51b67cbe9002c85b7422c86d78a52f0d2_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:26:05" (1/1) ...
[2020-11-25 02:26:05,635 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "OMAToken_0xade84da51b67cbe9002c85b7422c86d78a52f0d2_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:26:05" (1/1) ...
[2020-11-25 02:26:05,636 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "OMAToken_0xade84da51b67cbe9002c85b7422c86d78a52f0d2_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:26:05" (1/1) ...
[2020-11-25 02:26:05,664 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "OMAToken_0xade84da51b67cbe9002c85b7422c86d78a52f0d2_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:26:05" (1/1) ...
[2020-11-25 02:26:05,674 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "OMAToken_0xade84da51b67cbe9002c85b7422c86d78a52f0d2_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:26:05" (1/1) ...
[2020-11-25 02:26:05,682 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "OMAToken_0xade84da51b67cbe9002c85b7422c86d78a52f0d2_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:26:05" (1/1) ...
[2020-11-25 02:26:05,691 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 02:26:05,691 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 02:26:05,691 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 02:26:05,693 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 02:26:05,697 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "OMAToken_0xade84da51b67cbe9002c85b7422c86d78a52f0d2_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:26:05" (1/1) ...
[2020-11-25 02:26:05,720 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(OMAToken.transfer(to, value), msg.sender == to && value <= balanceOf_OMAToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_OMAToken[this][to] >= 0 && balanceOf_OMAToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_OMAToken[this][msg.sender] >= 0 &&  balanceOf_OMAToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(OMAToken.transfer(to, value), return == true && totalSupply_OMAToken[this] == old(totalSupply_OMAToken[this]) && balanceOf_OMAToken[this] == old(balanceOf_OMAToken[this]) && allowance_OMAToken[this] == old(allowance_OMAToken[this]) && symbol_OMAToken[this] == old(symbol_OMAToken[this]) && name_OMAToken[this] == old(name_OMAToken[this]) && decimals_OMAToken[this] == old(decimals_OMAToken[this]) && frozenAccount_OMAToken[this] == old(frozenAccount_OMAToken[this]) && frozenAmount_OMAToken[this] == old(frozenAmount_OMAToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && owner_Owned[this] == old(owner_Owned[this]))))
[2020-11-25 02:26:05,728 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(OMAToken.transfer(to, value), msg.sender == to && value <= balanceOf_OMAToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_OMAToken[this][to] >= 0 && balanceOf_OMAToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_OMAToken[this][msg.sender] >= 0 &&  balanceOf_OMAToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(OMAToken.transfer(to, value), return == true && totalSupply_OMAToken[this] == old(totalSupply_OMAToken[this]) && balanceOf_OMAToken[this] == old(balanceOf_OMAToken[this]) && allowance_OMAToken[this] == old(allowance_OMAToken[this]) && symbol_OMAToken[this] == old(symbol_OMAToken[this]) && name_OMAToken[this] == old(name_OMAToken[this]) && decimals_OMAToken[this] == old(decimals_OMAToken[this]) && frozenAccount_OMAToken[this] == old(frozenAccount_OMAToken[this]) && frozenAmount_OMAToken[this] == old(frozenAmount_OMAToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && owner_Owned[this] == old(owner_Owned[this]))))
[2020-11-25 02:26:05,736 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(OMAToken.transfer(to, value), msg.sender == to && value <= balanceOf_OMAToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_OMAToken[this][to] >= 0 && balanceOf_OMAToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_OMAToken[this][msg.sender] >= 0 &&  balanceOf_OMAToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(OMAToken.transfer(to, value), return == true && totalSupply_OMAToken[this] == old(totalSupply_OMAToken[this]) && balanceOf_OMAToken[this] == old(balanceOf_OMAToken[this]) && allowance_OMAToken[this] == old(allowance_OMAToken[this]) && symbol_OMAToken[this] == old(symbol_OMAToken[this]) && name_OMAToken[this] == old(name_OMAToken[this]) && decimals_OMAToken[this] == old(decimals_OMAToken[this]) && frozenAccount_OMAToken[this] == old(frozenAccount_OMAToken[this]) && frozenAmount_OMAToken[this] == old(frozenAmount_OMAToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && owner_Owned[this] == old(owner_Owned[this]))))
[2020-11-25 02:26:05,743 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==_to_s401 && _value_s401<=balanceOf_OMAToken[this][msg.sender] ) && _value_s401>=0 ) && _value_s401<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balanceOf_OMAToken[this][_to_s401]>=0 ) && balanceOf_OMAToken[this][_to_s401]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balanceOf_OMAToken[this][msg.sender]>=0 ) && balanceOf_OMAToken[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_OMAToken>],IdentifierExpression[_to_s401,<IMPLEMENTATION_INPARAM,transfer~address~uint256_OMAToken>]],BinaryExpression[COMPLEQ,IdentifierExpression[_value_s401,<IMPLEMENTATION_INPARAM,transfer~address~uint256_OMAToken>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_OMAToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_OMAToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_OMAToken>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[_value_s401,<IMPLEMENTATION_INPARAM,transfer~address~uint256_OMAToken>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[_value_s401,<IMPLEMENTATION_INPARAM,transfer~address~uint256_OMAToken>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_OMAToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_OMAToken>]]],[IdentifierExpression[_to_s401,<IMPLEMENTATION_INPARAM,transfer~address~uint256_OMAToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_OMAToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_OMAToken>]]],[IdentifierExpression[_to_s401,<IMPLEMENTATION_INPARAM,transfer~address~uint256_OMAToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_OMAToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_OMAToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_OMAToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_OMAToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_OMAToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_OMAToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 02:26:05,746 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( success_s401==true && totalSupply_OMAToken[this]==( old(totalSupply_OMAToken[this]) ) ) && balanceOf_OMAToken[this]==( old(balanceOf_OMAToken[this]) ) ) && allowance_OMAToken[this]==( old(allowance_OMAToken[this]) ) ) && symbol_OMAToken[this]==( old(symbol_OMAToken[this]) ) ) && name_OMAToken[this]==( old(name_OMAToken[this]) ) ) && decimals_OMAToken[this]==( old(decimals_OMAToken[this]) ) ) && frozenAccount_OMAToken[this]==( old(frozenAccount_OMAToken[this]) ) ) && frozenAmount_OMAToken[this]==( old(frozenAmount_OMAToken[this]) ) ) && paused_Pausable[this]==( old(paused_Pausable[this]) ) ) && owner_Owned[this]==( old(owner_Owned[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[success_s401,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_OMAToken>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[totalSupply_OMAToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_OMAToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[totalSupply_OMAToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_OMAToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[balanceOf_OMAToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_OMAToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[balanceOf_OMAToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_OMAToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[allowance_OMAToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_OMAToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[allowance_OMAToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_OMAToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_OMAToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_OMAToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_OMAToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_OMAToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_OMAToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_OMAToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_OMAToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_OMAToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_OMAToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_OMAToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_OMAToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_OMAToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[frozenAccount_OMAToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_OMAToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[frozenAccount_OMAToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_OMAToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[frozenAmount_OMAToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_OMAToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[frozenAmount_OMAToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_OMAToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_OMAToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_OMAToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_OMAToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_OMAToken>]]]]]]
[2020-11-25 02:26:05,751 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(OMAToken.transfer(to, value), msg.sender == to && value <= balanceOf_OMAToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_OMAToken[this][to] >= 0 && balanceOf_OMAToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_OMAToken[this][msg.sender] >= 0 &&  balanceOf_OMAToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(OMAToken.transfer(to, value), return == true && totalSupply_OMAToken[this] == old(totalSupply_OMAToken[this]) && balanceOf_OMAToken[this] == old(balanceOf_OMAToken[this]) && allowance_OMAToken[this] == old(allowance_OMAToken[this]) && symbol_OMAToken[this] == old(symbol_OMAToken[this]) && name_OMAToken[this] == old(name_OMAToken[this]) && decimals_OMAToken[this] == old(decimals_OMAToken[this]) && frozenAccount_OMAToken[this] == old(frozenAccount_OMAToken[this]) && frozenAmount_OMAToken[this] == old(frozenAmount_OMAToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && owner_Owned[this] == old(owner_Owned[this]))))
[2020-11-25 02:26:05,752 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_OMAToken0) ==> ( <>AP(success_transfer_OMAToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 02:26:05,762 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:26:05 PropertyContainer
[2020-11-25 02:26:05,762 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 02:26:05,763 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 02:26:05,763 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 02:26:05,763 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 02:26:05,764 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "OMAToken_0xade84da51b67cbe9002c85b7422c86d78a52f0d2_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:26:05" (1/2) ...
[2020-11-25 02:26:05,764 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 02:26:05,764 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 02:26:05,779 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:26:05" (2/2) ...
[2020-11-25 02:26:05,779 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 02:26:05,779 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 02:26:05,779 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 02:26:05,779 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 02:26:05,780 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "OMAToken_0xade84da51b67cbe9002c85b7422c86d78a52f0d2_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:26:05" (1/2) ...
[2020-11-25 02:26:05,834 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 02:26:05,834 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 02:26:05,834 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 02:26:05,834 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 02:26:05,834 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 02:26:05,835 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 02:26:05,835 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 02:26:05,835 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 02:26:05,835 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 02:26:05,835 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned
[2020-11-25 02:26:05,835 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned
[2020-11-25 02:26:05,835 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned
[2020-11-25 02:26:05,835 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned
[2020-11-25 02:26:05,835 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned
[2020-11-25 02:26:05,835 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned
[2020-11-25 02:26:05,835 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 02:26:05,836 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable
[2020-11-25 02:26:05,836 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable
[2020-11-25 02:26:05,836 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable
[2020-11-25 02:26:05,836 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable
[2020-11-25 02:26:05,836 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable
[2020-11-25 02:26:05,836 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable
[2020-11-25 02:26:05,836 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable
[2020-11-25 02:26:05,836 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable
[2020-11-25 02:26:05,836 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient_NoBaseCtor__success
[2020-11-25 02:26:05,837 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient
[2020-11-25 02:26:05,837 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient
[2020-11-25 02:26:05,837 INFO  L130     BoogieDeclarations]: Found specification of procedure receiveApproval~address~uint256~address~bytes_tokenRecipient
[2020-11-25 02:26:05,837 INFO  L130     BoogieDeclarations]: Found specification of procedure OMAToken_OMAToken_NoBaseCtor__success
[2020-11-25 02:26:05,837 INFO  L130     BoogieDeclarations]: Found specification of procedure OMAToken_OMAToken
[2020-11-25 02:26:05,837 INFO  L138     BoogieDeclarations]: Found implementation of procedure OMAToken_OMAToken
[2020-11-25 02:26:05,837 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_OMAToken__success
[2020-11-25 02:26:05,837 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_OMAToken
[2020-11-25 02:26:05,837 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_OMAToken
[2020-11-25 02:26:05,837 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_OMAToken
[2020-11-25 02:26:05,837 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_OMAToken
[2020-11-25 02:26:05,837 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_OMAToken
[2020-11-25 02:26:05,837 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_OMAToken
[2020-11-25 02:26:05,837 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_OMAToken
[2020-11-25 02:26:05,838 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_OMAToken
[2020-11-25 02:26:05,838 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_OMAToken
[2020-11-25 02:26:05,838 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_OMAToken
[2020-11-25 02:26:05,838 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address~bool_OMAToken
[2020-11-25 02:26:05,838 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address~bool_OMAToken
[2020-11-25 02:26:05,838 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAmount~address~uint256_OMAToken
[2020-11-25 02:26:05,838 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAmount~address~uint256_OMAToken
[2020-11-25 02:26:05,838 INFO  L130     BoogieDeclarations]: Found specification of procedure unfreezeAmount~address_OMAToken
[2020-11-25 02:26:05,838 INFO  L138     BoogieDeclarations]: Found implementation of procedure unfreezeAmount~address_OMAToken
[2020-11-25 02:26:05,838 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_OMAToken
[2020-11-25 02:26:05,839 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_OMAToken
[2020-11-25 02:26:05,839 INFO  L130     BoogieDeclarations]: Found specification of procedure name_OMAToken
[2020-11-25 02:26:05,839 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_OMAToken
[2020-11-25 02:26:05,839 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_OMAToken
[2020-11-25 02:26:05,839 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_OMAToken
[2020-11-25 02:26:05,839 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_OMAToken
[2020-11-25 02:26:05,839 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_OMAToken
[2020-11-25 02:26:05,839 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_OMAToken
[2020-11-25 02:26:05,839 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_OMAToken
[2020-11-25 02:26:05,839 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_OMAToken
[2020-11-25 02:26:05,840 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_OMAToken
[2020-11-25 02:26:05,840 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_OMAToken
[2020-11-25 02:26:05,840 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_OMAToken
[2020-11-25 02:26:05,840 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAmount~address_OMAToken
[2020-11-25 02:26:05,840 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAmount~address_OMAToken
[2020-11-25 02:26:05,840 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 02:26:05,840 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 02:26:05,840 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 02:26:05,840 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 02:26:05,840 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__success
[2020-11-25 02:26:05,841 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__success
[2020-11-25 02:26:05,841 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 02:26:05,841 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 02:26:05,841 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Owned
[2020-11-25 02:26:05,841 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Owned
[2020-11-25 02:26:05,841 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Pausable
[2020-11-25 02:26:05,841 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Pausable
[2020-11-25 02:26:05,841 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_tokenRecipient
[2020-11-25 02:26:05,841 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_tokenRecipient
[2020-11-25 02:26:05,841 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_OMAToken
[2020-11-25 02:26:05,842 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 02:26:05,842 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 02:26:05,842 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 02:26:05,842 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 02:26:05,842 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 02:26:05,842 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 02:26:05,842 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 02:26:05,842 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 02:26:05,843 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 02:26:05,843 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 02:26:05,843 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__success
[2020-11-25 02:26:05,843 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__fail
[2020-11-25 02:26:05,843 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__success
[2020-11-25 02:26:05,843 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__fail
[2020-11-25 02:26:05,843 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__success
[2020-11-25 02:26:05,843 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__fail
[2020-11-25 02:26:05,843 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 02:26:05,843 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__success
[2020-11-25 02:26:05,844 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__fail
[2020-11-25 02:26:05,844 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__success
[2020-11-25 02:26:05,844 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__fail
[2020-11-25 02:26:05,844 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__success
[2020-11-25 02:26:05,844 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__fail
[2020-11-25 02:26:05,844 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__success
[2020-11-25 02:26:05,844 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__fail
[2020-11-25 02:26:05,844 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient_NoBaseCtor__fail
[2020-11-25 02:26:05,844 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient__success
[2020-11-25 02:26:05,844 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient__fail
[2020-11-25 02:26:05,844 INFO  L130     BoogieDeclarations]: Found specification of procedure OMAToken_OMAToken_NoBaseCtor__fail
[2020-11-25 02:26:05,845 INFO  L130     BoogieDeclarations]: Found specification of procedure OMAToken_OMAToken__success
[2020-11-25 02:26:05,845 INFO  L130     BoogieDeclarations]: Found specification of procedure OMAToken_OMAToken__fail
[2020-11-25 02:26:05,845 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_OMAToken__fail
[2020-11-25 02:26:05,845 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_OMAToken__success
[2020-11-25 02:26:05,845 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_OMAToken__fail
[2020-11-25 02:26:05,845 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_OMAToken__success
[2020-11-25 02:26:05,845 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_OMAToken__fail
[2020-11-25 02:26:05,845 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_OMAToken__success
[2020-11-25 02:26:05,845 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_OMAToken__fail
[2020-11-25 02:26:05,846 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_OMAToken__success
[2020-11-25 02:26:05,846 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_OMAToken__fail
[2020-11-25 02:26:05,846 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_OMAToken__success
[2020-11-25 02:26:05,846 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_OMAToken__fail
[2020-11-25 02:26:05,846 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address~bool_OMAToken__success
[2020-11-25 02:26:05,846 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address~bool_OMAToken__fail
[2020-11-25 02:26:05,846 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAmount~address~uint256_OMAToken__success
[2020-11-25 02:26:05,846 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAmount~address~uint256_OMAToken__fail
[2020-11-25 02:26:05,846 INFO  L130     BoogieDeclarations]: Found specification of procedure unfreezeAmount~address_OMAToken__success
[2020-11-25 02:26:05,846 INFO  L130     BoogieDeclarations]: Found specification of procedure unfreezeAmount~address_OMAToken__fail
[2020-11-25 02:26:05,847 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_OMAToken__success
[2020-11-25 02:26:05,847 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_OMAToken__fail
[2020-11-25 02:26:05,847 INFO  L130     BoogieDeclarations]: Found specification of procedure name_OMAToken__success
[2020-11-25 02:26:05,847 INFO  L130     BoogieDeclarations]: Found specification of procedure name_OMAToken__fail
[2020-11-25 02:26:05,847 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_OMAToken__success
[2020-11-25 02:26:05,847 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_OMAToken__fail
[2020-11-25 02:26:05,847 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_OMAToken__success
[2020-11-25 02:26:05,847 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_OMAToken__fail
[2020-11-25 02:26:05,847 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_OMAToken__success
[2020-11-25 02:26:05,847 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_OMAToken__fail
[2020-11-25 02:26:05,848 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_OMAToken__success
[2020-11-25 02:26:05,848 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_OMAToken__fail
[2020-11-25 02:26:05,848 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_OMAToken__success
[2020-11-25 02:26:05,848 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_OMAToken__fail
[2020-11-25 02:26:05,848 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAmount~address_OMAToken__success
[2020-11-25 02:26:05,848 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAmount~address_OMAToken__fail
[2020-11-25 02:26:05,848 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 02:26:05,848 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 02:26:05,848 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 02:26:05,848 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 02:26:05,849 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__fail
[2020-11-25 02:26:05,849 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__fail
[2020-11-25 02:26:05,849 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 02:26:05,849 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 02:26:05,849 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 02:26:05,849 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 02:26:05,849 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 02:26:05,849 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 02:26:05,849 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 02:26:05,850 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 02:26:05,850 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 02:26:05,850 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 02:26:05,850 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 02:26:05,850 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 02:26:05,850 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 02:26:05,850 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 02:26:05,850 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 02:26:05,851 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 02:26:05,851 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__fail
[2020-11-25 02:26:05,851 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__success
[2020-11-25 02:26:05,851 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__fail
[2020-11-25 02:26:05,851 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__success
[2020-11-25 02:26:05,851 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__fail
[2020-11-25 02:26:05,851 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__success
[2020-11-25 02:26:05,851 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 02:26:05,851 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 02:26:05,851 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__fail
[2020-11-25 02:26:05,851 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__success
[2020-11-25 02:26:05,852 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__fail
[2020-11-25 02:26:05,852 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__success
[2020-11-25 02:26:05,852 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__fail
[2020-11-25 02:26:05,852 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__success
[2020-11-25 02:26:05,852 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__fail
[2020-11-25 02:26:05,852 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__success
[2020-11-25 02:26:05,852 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient_NoBaseCtor__fail
[2020-11-25 02:26:05,852 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient_NoBaseCtor__success
[2020-11-25 02:26:05,852 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient__fail
[2020-11-25 02:26:05,852 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient__success
[2020-11-25 02:26:05,852 INFO  L138     BoogieDeclarations]: Found implementation of procedure OMAToken_OMAToken_NoBaseCtor__fail
[2020-11-25 02:26:05,853 INFO  L138     BoogieDeclarations]: Found implementation of procedure OMAToken_OMAToken_NoBaseCtor__success
[2020-11-25 02:26:05,853 INFO  L138     BoogieDeclarations]: Found implementation of procedure OMAToken_OMAToken__fail
[2020-11-25 02:26:05,853 INFO  L138     BoogieDeclarations]: Found implementation of procedure OMAToken_OMAToken__success
[2020-11-25 02:26:05,853 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_OMAToken__fail
[2020-11-25 02:26:05,853 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_OMAToken__success
[2020-11-25 02:26:05,853 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_OMAToken__fail
[2020-11-25 02:26:05,853 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_OMAToken__success
[2020-11-25 02:26:05,853 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_OMAToken__fail
[2020-11-25 02:26:05,853 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_OMAToken__success
[2020-11-25 02:26:05,853 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_OMAToken__fail
[2020-11-25 02:26:05,853 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_OMAToken__success
[2020-11-25 02:26:05,853 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_OMAToken__fail
[2020-11-25 02:26:05,854 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_OMAToken__success
[2020-11-25 02:26:05,854 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_OMAToken__fail
[2020-11-25 02:26:05,854 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_OMAToken__success
[2020-11-25 02:26:05,854 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address~bool_OMAToken__fail
[2020-11-25 02:26:05,854 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address~bool_OMAToken__success
[2020-11-25 02:26:05,854 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAmount~address~uint256_OMAToken__fail
[2020-11-25 02:26:05,854 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAmount~address~uint256_OMAToken__success
[2020-11-25 02:26:05,854 INFO  L138     BoogieDeclarations]: Found implementation of procedure unfreezeAmount~address_OMAToken__fail
[2020-11-25 02:26:05,854 INFO  L138     BoogieDeclarations]: Found implementation of procedure unfreezeAmount~address_OMAToken__success
[2020-11-25 02:26:05,854 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_OMAToken__fail
[2020-11-25 02:26:05,854 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_OMAToken__success
[2020-11-25 02:26:05,854 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_OMAToken__fail
[2020-11-25 02:26:05,855 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_OMAToken__success
[2020-11-25 02:26:05,855 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_OMAToken__fail
[2020-11-25 02:26:05,855 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_OMAToken__success
[2020-11-25 02:26:05,855 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_OMAToken__fail
[2020-11-25 02:26:05,855 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_OMAToken__success
[2020-11-25 02:26:05,855 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_OMAToken__fail
[2020-11-25 02:26:05,855 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_OMAToken__success
[2020-11-25 02:26:05,855 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_OMAToken__fail
[2020-11-25 02:26:05,855 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_OMAToken__success
[2020-11-25 02:26:05,855 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_OMAToken__fail
[2020-11-25 02:26:05,855 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_OMAToken__success
[2020-11-25 02:26:05,856 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAmount~address_OMAToken__fail
[2020-11-25 02:26:05,856 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAmount~address_OMAToken__success
[2020-11-25 02:26:05,856 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 02:26:05,856 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 02:26:05,856 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 02:26:05,856 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 02:26:05,856 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 02:26:05,856 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 02:26:05,856 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 02:26:05,856 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 02:26:05,856 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__fail
[2020-11-25 02:26:05,856 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__success
[2020-11-25 02:26:05,857 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__fail
[2020-11-25 02:26:05,857 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__success
[2020-11-25 02:26:05,857 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 02:26:05,857 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 02:26:05,857 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Owned
[2020-11-25 02:26:05,857 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Owned
[2020-11-25 02:26:05,857 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Pausable
[2020-11-25 02:26:05,857 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Pausable
[2020-11-25 02:26:05,857 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_tokenRecipient
[2020-11-25 02:26:05,857 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_tokenRecipient
[2020-11-25 02:26:05,857 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_OMAToken
[2020-11-25 02:26:05,857 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 02:26:05,857 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 02:26:05,857 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 02:26:06,343 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 02:26:06,344 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 02:26:06,344 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 02:26:06,520 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 02:26:06,520 INFO  L286             CfgBuilder]: Removed 5 assue(true) statements.
[2020-11-25 02:26:06,522 INFO  L202        PluginConnector]: Adding new model OMAToken_0xade84da51b67cbe9002c85b7422c86d78a52f0d2_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:26:06 BoogieIcfgContainer
[2020-11-25 02:26:06,522 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:26:05" (2/2) ...
[2020-11-25 02:26:06,522 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 02:26:06,523 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@1b37baad and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:26:06, skipping insertion in model container
[2020-11-25 02:26:06,523 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 02:26:06,523 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 02:26:06,523 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 02:26:06,524 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 02:26:06,525 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "OMAToken_0xade84da51b67cbe9002c85b7422c86d78a52f0d2_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:26:05" (1/3) ...
[2020-11-25 02:26:06,525 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@ce01cb4 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:26:06, skipping insertion in model container
[2020-11-25 02:26:06,525 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:26:05" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 02:26:06,561 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:26:06 NWAContainer
[2020-11-25 02:26:06,561 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 02:26:06,561 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 02:26:06,561 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 02:26:06,562 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 02:26:06,563 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "OMAToken_0xade84da51b67cbe9002c85b7422c86d78a52f0d2_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:26:06" (3/4) ...
[2020-11-25 02:26:06,564 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@50cfd06f and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:26:06, skipping insertion in model container
[2020-11-25 02:26:06,564 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:26:06" (4/4) ...
[2020-11-25 02:26:06,566 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 02:26:06,570 INFO  L110   BuchiProductObserver]: Initial RCFG 1680 locations, 2126 edges
[2020-11-25 02:26:06,570 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 02:26:06,581 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 02:26:08,057 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 02:26:08,064 INFO  L110   BuchiProductObserver]: BuchiProgram size 4042 locations, 6907 edges
[2020-11-25 02:26:08,064 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:26:08 BoogieIcfgContainer
[2020-11-25 02:26:08,064 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 02:26:08,064 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 02:26:08,065 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 02:26:08,066 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 02:26:08,067 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:26:08" (1/1) ...
[2020-11-25 02:26:08,172 INFO  L313           BlockEncoder]: Initial Icfg 4042 locations, 6907 edges
[2020-11-25 02:26:08,172 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 02:26:08,172 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 02:26:08,173 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 02:26:08,173 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 02:26:08,187 INFO  L70    emoveInfeasibleEdges]: Removed 60 edges and 13 locations because of local infeasibility
[2020-11-25 02:26:08,197 INFO  L70        RemoveSinkStates]: Removed 2 edges and 1 locations by removing sink states
[2020-11-25 02:26:08,212 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 02:26:08,216 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 02:26:08,220 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 02:26:08,221 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 02:26:08,228 INFO  L313           BlockEncoder]: Encoded RCFG 4002 locations, 6807 edges
[2020-11-25 02:26:08,228 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 02:26:08 BasicIcfg
[2020-11-25 02:26:08,228 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 02:26:08,229 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 02:26:08,229 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 02:26:08,231 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 02:26:08,232 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:26:08,232 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "OMAToken_0xade84da51b67cbe9002c85b7422c86d78a52f0d2_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:26:05" (1/6) ...
[2020-11-25 02:26:08,233 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1abbf2f0 and model type OMAToken_0xade84da51b67cbe9002c85b7422c86d78a52f0d2_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:26:08, skipping insertion in model container
[2020-11-25 02:26:08,233 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:26:08,234 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:26:05" (2/6) ...
[2020-11-25 02:26:08,234 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1abbf2f0 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:26:08, skipping insertion in model container
[2020-11-25 02:26:08,234 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:26:08,234 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "OMAToken_0xade84da51b67cbe9002c85b7422c86d78a52f0d2_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:26:06" (3/6) ...
[2020-11-25 02:26:08,234 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1abbf2f0 and model type OMAToken_0xade84da51b67cbe9002c85b7422c86d78a52f0d2_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 02:26:08, skipping insertion in model container
[2020-11-25 02:26:08,234 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:26:08,235 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:26:06" (4/6) ...
[2020-11-25 02:26:08,235 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1abbf2f0 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:26:08, skipping insertion in model container
[2020-11-25 02:26:08,235 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:26:08,235 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:26:08" (5/6) ...
[2020-11-25 02:26:08,235 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1abbf2f0 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 02:26:08, skipping insertion in model container
[2020-11-25 02:26:08,235 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:26:08,235 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 02:26:08" (6/6) ...
[2020-11-25 02:26:08,237 INFO  L404   chiAutomizerObserver]: Analyzing ICFG OMAToken_0xade84da51b67cbe9002c85b7422c86d78a52f0d2_transfer-self.bpl_BEv2
[2020-11-25 02:26:08,276 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 02:26:08,276 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 02:26:08,276 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 02:26:08,276 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 02:26:08,276 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 02:26:08,276 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 02:26:08,276 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 02:26:08,277 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 02:26:08,277 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 02:26:08,321 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4002 states.
[2020-11-25 02:26:08,379 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:26:08,380 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:26:08,380 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:26:08,389 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:26:08,390 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:26:08,390 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 02:26:08,390 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4002 states.
[2020-11-25 02:26:08,416 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:26:08,416 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:26:08,416 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:26:08,418 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:26:08,418 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_OMAToken0 := false;
[L2]                 call_transfer_OMAToken0 := false;
[L2]     CALL        call main();
[L4541]              assume null == 0;
[L4542]  CALL        call this := FreshRefGenerator__success();
[L2373]              havoc newRef;
[L2374]              assume Alloc[newRef] == false;
[L2375]              Alloc[newRef] := true;
[L2376]              assume newRef != null;
[L4542]  RET         call this := FreshRefGenerator__success();
[L4543]              assume now >= 0;
[L4544]              assume DType[this] == OMAToken;
[L4545]              assume msgvalue_MSG == 0;
[L4546]              gas := gas - 53000;
[L4547]  CALL        call OMAToken_OMAToken(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L712]               havoc __exception;
[L713]               revert := false;
[L714]   COND FALSE  !(__exception)
[L742]   CALL        call OMAToken_OMAToken__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L2754]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2504]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2487]              assume msgsender_MSG != null;
[L2488]              Balance[this] := 0;
[L2489]              owner_Owned[this] := null;
[L2491]              owner_Owned[this] := msgsender_MSG;
[L2504]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]  COND FALSE  !(revert)
[L2754]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2755]  COND TRUE   revert
[L742]   RET         call OMAToken_OMAToken__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L743]               assume !revert && gas >= 0;
[L4547]  RET         call OMAToken_OMAToken(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L4548]              assume !revert && gas >= 0;

Loop:
[L4551]  CALL        call CorralChoice_OMAToken(this);
[L4342]              havoc msgsender_MSG;
[L4343]              havoc msgvalue_MSG;
[L4344]              havoc choice;
[L4345]              havoc __ret_0_owner;
[L4346]              havoc newOwner_s127;
[L4347]              havoc __ret_0_paused;
[L4348]              havoc __ret_0_symbol;
[L4349]              havoc __ret_0_name;
[L4350]              havoc __ret_0_decimals;
[L4351]              havoc __ret_0_totalSupply;
[L4352]              havoc arg613_s0;
[L4353]              havoc __ret_0_balanceOf;
[L4354]              havoc arg614_s0;
[L4355]              havoc arg615_s0;
[L4356]              havoc __ret_0_allowance;
[L4357]              havoc arg616_s0;
[L4358]              havoc __ret_0_frozenAccount;
[L4359]              havoc arg617_s0;
[L4360]              havoc __ret_0_frozenAmount;
[L4361]              havoc initialSupply_s302;
[L4362]              havoc tokenName_s302;
[L4363]              havoc tokenSymbol_s302;
[L4364]              havoc _to_s401;
[L4365]              havoc _value_s401;
[L4366]              havoc success_s401;
[L4367]              havoc _from_s438;
[L4368]              havoc _to_s438;
[L4369]              havoc _value_s438;
[L4370]              havoc success_s438;
[L4371]              havoc _spender_s468;
[L4372]              havoc _value_s468;
[L4373]              havoc success_s468;
[L4374]              havoc _spender_s508;
[L4375]              havoc _value_s508;
[L4376]              havoc _extraData_s508;
[L4377]              havoc success_s508;
[L4378]              havoc _value_s544;
[L4379]              havoc success_s544;
[L4380]              havoc target_s565;
[L4381]              havoc freeze_s565;
[L4382]              havoc target_s592;
[L4383]              havoc _value_s592;
[L4384]              havoc target_s610;
[L4385]              havoc tmpNow;
[L4386]              havoc gas;
[L4387]              assume gas > 4000000 && gas <= 8000000;
[L4388]              tmpNow := now;
[L4389]              havoc now;
[L4390]              assume now > tmpNow;
[L4391]              assume msgsender_MSG != null;
[L4392]              assume DType[msgsender_MSG] != SafeMath;
[L4393]              assume DType[msgsender_MSG] != Owned;
[L4394]              assume DType[msgsender_MSG] != Pausable;
[L4395]              assume DType[msgsender_MSG] != tokenRecipient;
[L4396]              assume DType[msgsender_MSG] != OMAToken;
[L4397]              Alloc[msgsender_MSG] := true;
[L4398]  COND TRUE   choice == 21
[L4399]              gas := gas - 21000;
[L4400]  COND FALSE  !(gas >= 0)
[L4551]  RET         call CorralChoice_OMAToken(this);

[2020-11-25 02:26:08,435 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:26:08,436 INFO  L82        PathProgramCache]: Analyzing trace with hash -343731662, now seen corresponding path program 1 times
[2020-11-25 02:26:08,440 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:26:08,461 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:26:08,498 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 02:26:08,500 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:26:08,500 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 02:26:08,674 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:26:08,686 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 02:26:08,687 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 02:26:08,688 INFO  L87              Difference]: Start difference. First operand 4002 states. Second operand 4 states.
[2020-11-25 02:26:09,059 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:26:09,059 INFO  L93              Difference]: Finished difference Result 3000 states and 3315 transitions.
[2020-11-25 02:26:09,059 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 02:26:09,060 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3000 states and 3315 transitions.
[2020-11-25 02:26:09,075 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:26:09,095 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3000 states to 2996 states and 3307 transitions.
[2020-11-25 02:26:09,096 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 02:26:09,098 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 796
[2020-11-25 02:26:09,099 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2996 states and 3307 transitions.
[2020-11-25 02:26:09,106 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:26:09,106 INFO  L728         BuchiCegarLoop]: Abstraction has 2996 states and 3307 transitions.
[2020-11-25 02:26:09,124 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2996 states and 3307 transitions.
[2020-11-25 02:26:09,172 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2996 to 2996.
[2020-11-25 02:26:09,172 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2996 states.
[2020-11-25 02:26:09,177 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2996 states to 2996 states and 3307 transitions.
[2020-11-25 02:26:09,178 INFO  L751         BuchiCegarLoop]: Abstraction has 2996 states and 3307 transitions.
[2020-11-25 02:26:09,178 INFO  L631         BuchiCegarLoop]: Abstraction has 2996 states and 3307 transitions.
[2020-11-25 02:26:09,178 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 02:26:09,178 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2996 states and 3307 transitions.
[2020-11-25 02:26:09,185 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:26:09,185 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:26:09,185 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:26:09,187 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:26:09,187 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_OMAToken0 := false;
[L2]                 call_transfer_OMAToken0 := false;
[L2]     CALL        call main();
[L4541]              assume null == 0;
[L4542]  CALL        call this := FreshRefGenerator__success();
[L2373]              havoc newRef;
[L2374]              assume Alloc[newRef] == false;
[L2375]              Alloc[newRef] := true;
[L2376]              assume newRef != null;
[L4542]  RET         call this := FreshRefGenerator__success();
[L4543]              assume now >= 0;
[L4544]              assume DType[this] == OMAToken;
[L4545]              assume msgvalue_MSG == 0;
[L4546]              gas := gas - 53000;
[L4547]  CALL        call OMAToken_OMAToken(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L712]               havoc __exception;
[L713]               revert := false;
[L714]   COND FALSE  !(__exception)
[L742]   CALL        call OMAToken_OMAToken__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L2754]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2504]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2487]              assume msgsender_MSG != null;
[L2488]              Balance[this] := 0;
[L2489]              owner_Owned[this] := null;
[L2491]              owner_Owned[this] := msgsender_MSG;
[L2504]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]  COND FALSE  !(revert)
[L2754]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2755]  COND TRUE   revert
[L742]   RET         call OMAToken_OMAToken__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L743]               assume !revert && gas >= 0;
[L4547]  RET         call OMAToken_OMAToken(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L4548]              assume !revert && gas >= 0;
[L4551]  CALL        call CorralChoice_OMAToken(this);
[L4342]              havoc msgsender_MSG;
[L4343]              havoc msgvalue_MSG;
[L4344]              havoc choice;
[L4345]              havoc __ret_0_owner;
[L4346]              havoc newOwner_s127;
[L4347]              havoc __ret_0_paused;
[L4348]              havoc __ret_0_symbol;
[L4349]              havoc __ret_0_name;
[L4350]              havoc __ret_0_decimals;
[L4351]              havoc __ret_0_totalSupply;
[L4352]              havoc arg613_s0;
[L4353]              havoc __ret_0_balanceOf;
[L4354]              havoc arg614_s0;
[L4355]              havoc arg615_s0;
[L4356]              havoc __ret_0_allowance;
[L4357]              havoc arg616_s0;
[L4358]              havoc __ret_0_frozenAccount;
[L4359]              havoc arg617_s0;
[L4360]              havoc __ret_0_frozenAmount;
[L4361]              havoc initialSupply_s302;
[L4362]              havoc tokenName_s302;
[L4363]              havoc tokenSymbol_s302;
[L4364]              havoc _to_s401;
[L4365]              havoc _value_s401;
[L4366]              havoc success_s401;
[L4367]              havoc _from_s438;
[L4368]              havoc _to_s438;
[L4369]              havoc _value_s438;
[L4370]              havoc success_s438;
[L4371]              havoc _spender_s468;
[L4372]              havoc _value_s468;
[L4373]              havoc success_s468;
[L4374]              havoc _spender_s508;
[L4375]              havoc _value_s508;
[L4376]              havoc _extraData_s508;
[L4377]              havoc success_s508;
[L4378]              havoc _value_s544;
[L4379]              havoc success_s544;
[L4380]              havoc target_s565;
[L4381]              havoc freeze_s565;
[L4382]              havoc target_s592;
[L4383]              havoc _value_s592;
[L4384]              havoc target_s610;
[L4385]              havoc tmpNow;
[L4386]              havoc gas;
[L4387]              assume gas > 4000000 && gas <= 8000000;
[L4388]              tmpNow := now;
[L4389]              havoc now;
[L4390]              assume now > tmpNow;
[L4391]              assume msgsender_MSG != null;
[L4392]              assume DType[msgsender_MSG] != SafeMath;
[L4393]              assume DType[msgsender_MSG] != Owned;
[L4394]              assume DType[msgsender_MSG] != Pausable;
[L4395]              assume DType[msgsender_MSG] != tokenRecipient;
[L4396]              assume DType[msgsender_MSG] != OMAToken;
[L4397]              Alloc[msgsender_MSG] := true;
[L4398]  COND FALSE  !(choice == 21)
[L4404]  COND FALSE  !(choice == 20)
[L4410]  COND FALSE  !(choice == 19)
[L4416]  COND FALSE  !(choice == 18)
[L4422]  COND FALSE  !(choice == 17)
[L4428]  COND FALSE  !(choice == 16)
[L4434]  COND FALSE  !(choice == 15)
[L4440]  COND FALSE  !(choice == 14)
[L4446]  COND FALSE  !(choice == 13)
[L4452]  COND FALSE  !(choice == 12)
[L4458]  COND FALSE  !(choice == 11)
[L4464]  COND FALSE  !(choice == 10)
[L4470]  COND FALSE  !(choice == 9)
[L4476]  COND TRUE   choice == 8
[L4477]              gas := gas - 21000;
[L4478]  COND TRUE   gas >= 0
[L4479]              assume _value_s401 >= 0 && _value_s401 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4480]              assume msgvalue_MSG == 0;
[L4481]  CALL        call success_s401 := transfer~address~uint256_OMAToken(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s401 && _value_s401 <= balanceOf_OMAToken[this][msgsender_MSG]) && _value_s401 >= 0) && _value_s401 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_OMAToken[this][_to_s401] >= 0) && balanceOf_OMAToken[this][_to_s401] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_OMAToken[this][msgsender_MSG] >= 0) && balanceOf_OMAToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_OMAToken0 := true;
[L2]                 call_transfer_OMAToken0 := false;
[L2]                 revert := revert_hold;
[L782]               havoc __exception;
[L783]               revert := false;
[L784]   COND FALSE  !(__exception)
[L812]   CALL        call success_s401 := transfer~address~uint256_OMAToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L2867]  CALL        call _transfer~address~address~uint256_OMAToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s401, _value_s401);
[L2816]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4048]  COND FALSE  !(!!paused_Pausable[this])
[L2816]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2817]  COND TRUE   revert
[L2867]  RET         call _transfer~address~address~uint256_OMAToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s401, _value_s401);
[L2868]  COND TRUE   revert
[L812]   RET         call success_s401 := transfer~address~uint256_OMAToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L813]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((((success_s401 == true && totalSupply_OMAToken[this] == old(totalSupply_OMAToken[this])) && balanceOf_OMAToken[this] == old(balanceOf_OMAToken[this])) && allowance_OMAToken[this] == old(allowance_OMAToken[this])) && symbol_OMAToken[this] == old(symbol_OMAToken[this])) && name_OMAToken[this] == old(name_OMAToken[this])) && decimals_OMAToken[this] == old(decimals_OMAToken[this])) && frozenAccount_OMAToken[this] == old(frozenAccount_OMAToken[this])) && frozenAmount_OMAToken[this] == old(frozenAmount_OMAToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && owner_Owned[this] == old(owner_Owned[this]));
[L2]                 revert := revert_hold;
[L4481]  RET         call success_s401 := transfer~address~uint256_OMAToken(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L4551]  RET         call CorralChoice_OMAToken(this);

Loop:
[L4551]  CALL        call CorralChoice_OMAToken(this);
[L4342]              havoc msgsender_MSG;
[L4343]              havoc msgvalue_MSG;
[L4344]              havoc choice;
[L4345]              havoc __ret_0_owner;
[L4346]              havoc newOwner_s127;
[L4347]              havoc __ret_0_paused;
[L4348]              havoc __ret_0_symbol;
[L4349]              havoc __ret_0_name;
[L4350]              havoc __ret_0_decimals;
[L4351]              havoc __ret_0_totalSupply;
[L4352]              havoc arg613_s0;
[L4353]              havoc __ret_0_balanceOf;
[L4354]              havoc arg614_s0;
[L4355]              havoc arg615_s0;
[L4356]              havoc __ret_0_allowance;
[L4357]              havoc arg616_s0;
[L4358]              havoc __ret_0_frozenAccount;
[L4359]              havoc arg617_s0;
[L4360]              havoc __ret_0_frozenAmount;
[L4361]              havoc initialSupply_s302;
[L4362]              havoc tokenName_s302;
[L4363]              havoc tokenSymbol_s302;
[L4364]              havoc _to_s401;
[L4365]              havoc _value_s401;
[L4366]              havoc success_s401;
[L4367]              havoc _from_s438;
[L4368]              havoc _to_s438;
[L4369]              havoc _value_s438;
[L4370]              havoc success_s438;
[L4371]              havoc _spender_s468;
[L4372]              havoc _value_s468;
[L4373]              havoc success_s468;
[L4374]              havoc _spender_s508;
[L4375]              havoc _value_s508;
[L4376]              havoc _extraData_s508;
[L4377]              havoc success_s508;
[L4378]              havoc _value_s544;
[L4379]              havoc success_s544;
[L4380]              havoc target_s565;
[L4381]              havoc freeze_s565;
[L4382]              havoc target_s592;
[L4383]              havoc _value_s592;
[L4384]              havoc target_s610;
[L4385]              havoc tmpNow;
[L4386]              havoc gas;
[L4387]              assume gas > 4000000 && gas <= 8000000;
[L4388]              tmpNow := now;
[L4389]              havoc now;
[L4390]              assume now > tmpNow;
[L4391]              assume msgsender_MSG != null;
[L4392]              assume DType[msgsender_MSG] != SafeMath;
[L4393]              assume DType[msgsender_MSG] != Owned;
[L4394]              assume DType[msgsender_MSG] != Pausable;
[L4395]              assume DType[msgsender_MSG] != tokenRecipient;
[L4396]              assume DType[msgsender_MSG] != OMAToken;
[L4397]              Alloc[msgsender_MSG] := true;
[L4398]  COND FALSE  !(choice == 21)
[L4404]  COND FALSE  !(choice == 20)
[L4410]  COND FALSE  !(choice == 19)
[L4416]  COND FALSE  !(choice == 18)
[L4422]  COND FALSE  !(choice == 17)
[L4428]  COND FALSE  !(choice == 16)
[L4434]  COND FALSE  !(choice == 15)
[L4440]  COND FALSE  !(choice == 14)
[L4446]  COND FALSE  !(choice == 13)
[L4452]  COND FALSE  !(choice == 12)
[L4458]  COND FALSE  !(choice == 11)
[L4464]  COND FALSE  !(choice == 10)
[L4470]  COND FALSE  !(choice == 9)
[L4476]  COND TRUE   choice == 8
[L4477]              gas := gas - 21000;
[L4478]  COND TRUE   gas >= 0
[L4479]              assume _value_s401 >= 0 && _value_s401 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4480]              assume msgvalue_MSG == 0;
[L4481]  CALL        call success_s401 := transfer~address~uint256_OMAToken(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s401 && _value_s401 <= balanceOf_OMAToken[this][msgsender_MSG]) && _value_s401 >= 0) && _value_s401 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_OMAToken[this][_to_s401] >= 0) && balanceOf_OMAToken[this][_to_s401] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_OMAToken[this][msgsender_MSG] >= 0) && balanceOf_OMAToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_OMAToken0 := true;
[L2]                 call_transfer_OMAToken0 := false;
[L2]                 revert := revert_hold;
[L782]               havoc __exception;
[L783]               revert := false;
[L784]   COND FALSE  !(__exception)
[L812]   CALL        call success_s401 := transfer~address~uint256_OMAToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L2867]  CALL        call _transfer~address~address~uint256_OMAToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s401, _value_s401);
[L2816]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4048]  COND FALSE  !(!!paused_Pausable[this])
[L2816]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2817]  COND TRUE   revert
[L2867]  RET         call _transfer~address~address~uint256_OMAToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s401, _value_s401);
[L2868]  COND TRUE   revert
[L812]   RET         call success_s401 := transfer~address~uint256_OMAToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L813]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((((success_s401 == true && totalSupply_OMAToken[this] == old(totalSupply_OMAToken[this])) && balanceOf_OMAToken[this] == old(balanceOf_OMAToken[this])) && allowance_OMAToken[this] == old(allowance_OMAToken[this])) && symbol_OMAToken[this] == old(symbol_OMAToken[this])) && name_OMAToken[this] == old(name_OMAToken[this])) && decimals_OMAToken[this] == old(decimals_OMAToken[this])) && frozenAccount_OMAToken[this] == old(frozenAccount_OMAToken[this])) && frozenAmount_OMAToken[this] == old(frozenAmount_OMAToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && owner_Owned[this] == old(owner_Owned[this]));
[L2]                 revert := revert_hold;
[L4481]  RET         call success_s401 := transfer~address~uint256_OMAToken(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L4551]  RET         call CorralChoice_OMAToken(this);

[2020-11-25 02:26:09,191 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:26:09,191 INFO  L82        PathProgramCache]: Analyzing trace with hash 2080831393, now seen corresponding path program 1 times
[2020-11-25 02:26:09,192 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:26:09,203 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:26:09,235 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 02:26:09,235 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:26:09,235 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 02:26:09,237 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:26:09,237 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 02:26:09,237 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 02:26:09,237 INFO  L87              Difference]: Start difference. First operand 2996 states and 3307 transitions. cyclomatic complexity: 313 Second operand 4 states.
[2020-11-25 02:26:09,915 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:26:09,915 INFO  L93              Difference]: Finished difference Result 4306 states and 4873 transitions.
[2020-11-25 02:26:09,915 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 02:26:09,915 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4306 states and 4873 transitions.
[2020-11-25 02:26:09,930 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 02:26:09,946 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4306 states to 4138 states and 4689 transitions.
[2020-11-25 02:26:09,946 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1053
[2020-11-25 02:26:09,947 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1065
[2020-11-25 02:26:09,947 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4138 states and 4689 transitions.
[2020-11-25 02:26:09,953 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:26:09,953 INFO  L728         BuchiCegarLoop]: Abstraction has 4138 states and 4689 transitions.
[2020-11-25 02:26:09,957 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4138 states and 4689 transitions.
[2020-11-25 02:26:10,000 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4138 to 3056.
[2020-11-25 02:26:10,000 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3056 states.
[2020-11-25 02:26:10,005 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3056 states to 3056 states and 3283 transitions.
[2020-11-25 02:26:10,005 INFO  L751         BuchiCegarLoop]: Abstraction has 3056 states and 3283 transitions.
[2020-11-25 02:26:10,005 INFO  L631         BuchiCegarLoop]: Abstraction has 3056 states and 3283 transitions.
[2020-11-25 02:26:10,005 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 02:26:10,006 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3056 states and 3283 transitions.
[2020-11-25 02:26:10,015 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:26:10,015 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:26:10,015 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:26:10,018 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:26:10,018 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_OMAToken0 := false;
[L2]                 call_transfer_OMAToken0 := false;
[L2]     CALL        call main();
[L4541]              assume null == 0;
[L4542]  CALL        call this := FreshRefGenerator__success();
[L2373]              havoc newRef;
[L2374]              assume Alloc[newRef] == false;
[L2375]              Alloc[newRef] := true;
[L2376]              assume newRef != null;
[L4542]  RET         call this := FreshRefGenerator__success();
[L4543]              assume now >= 0;
[L4544]              assume DType[this] == OMAToken;
[L4545]              assume msgvalue_MSG == 0;
[L4546]              gas := gas - 53000;
[L4547]  CALL        call OMAToken_OMAToken(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L712]               havoc __exception;
[L713]               revert := false;
[L714]   COND FALSE  !(__exception)
[L742]   CALL        call OMAToken_OMAToken__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L2754]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2504]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2487]              assume msgsender_MSG != null;
[L2488]              Balance[this] := 0;
[L2489]              owner_Owned[this] := null;
[L2491]              owner_Owned[this] := msgsender_MSG;
[L2504]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]  COND FALSE  !(revert)
[L2754]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2755]  COND FALSE  !(revert)
[L2758]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L2572]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2504]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2487]              assume msgsender_MSG != null;
[L2488]              Balance[this] := 0;
[L2489]              owner_Owned[this] := null;
[L2491]              owner_Owned[this] := msgsender_MSG;
[L2504]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]  COND FALSE  !(revert)
[L2572]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2573]  COND FALSE  !(revert)
[L2576]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2552]              assume msgsender_MSG != null;
[L2553]              Balance[this] := 0;
[L2554]              paused_Pausable[this] := false;
[L2576]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2577]  COND FALSE  !(revert)
[L2758]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L2759]  COND FALSE  !(revert)
[L2762]  CALL        call OMAToken_OMAToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L2711]              assume msgsender_MSG != null;
[L2712]              Balance[this] := 0;
[L2713]              symbol_OMAToken[this] := -641797033;
[L2714]              name_OMAToken[this] := -641797033;
[L2715]              decimals_OMAToken[this] := 18;
[L2716]              totalSupply_OMAToken[this] := 0;
[L2717]              balanceOf_OMAToken[this] := zeroRefintArr();
[L2718]              sum_balanceOf0[this] := 0;
[L2719]              allowance_OMAToken[this] := zeroRefRefintArr();
[L2720]              sum_allowance1[this] := 0;
[L2721]              frozenAccount_OMAToken[this] := zeroRefboolArr();
[L2722]              frozenAmount_OMAToken[this] := zeroRefintArr();
[L2723]              sum_frozenAmount3[this] := 0;
[L2725]              __var_1 := decimals_OMAToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2726]              totalSupply_OMAToken[this] := nonlinearMul(initialSupply_s302, nonlinearPow(10, decimals_OMAToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2727]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_OMAToken[this][msgsender_MSG];
[L2728]              balanceOf_OMAToken[this][msgsender_MSG] := totalSupply_OMAToken[this];
[L2729]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_OMAToken[this][msgsender_MSG];
[L2730]              name_OMAToken[this] := tokenName_s302;
[L2731]              symbol_OMAToken[this] := tokenSymbol_s302;
[L2762]  RET         call OMAToken_OMAToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L2763]  COND FALSE  !(revert)
[L742]   RET         call OMAToken_OMAToken__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L743]               assume !revert && gas >= 0;
[L4547]  RET         call OMAToken_OMAToken(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L4548]              assume !revert && gas >= 0;
[L4551]  CALL        call CorralChoice_OMAToken(this);
[L4342]              havoc msgsender_MSG;
[L4343]              havoc msgvalue_MSG;
[L4344]              havoc choice;
[L4345]              havoc __ret_0_owner;
[L4346]              havoc newOwner_s127;
[L4347]              havoc __ret_0_paused;
[L4348]              havoc __ret_0_symbol;
[L4349]              havoc __ret_0_name;
[L4350]              havoc __ret_0_decimals;
[L4351]              havoc __ret_0_totalSupply;
[L4352]              havoc arg613_s0;
[L4353]              havoc __ret_0_balanceOf;
[L4354]              havoc arg614_s0;
[L4355]              havoc arg615_s0;
[L4356]              havoc __ret_0_allowance;
[L4357]              havoc arg616_s0;
[L4358]              havoc __ret_0_frozenAccount;
[L4359]              havoc arg617_s0;
[L4360]              havoc __ret_0_frozenAmount;
[L4361]              havoc initialSupply_s302;
[L4362]              havoc tokenName_s302;
[L4363]              havoc tokenSymbol_s302;
[L4364]              havoc _to_s401;
[L4365]              havoc _value_s401;
[L4366]              havoc success_s401;
[L4367]              havoc _from_s438;
[L4368]              havoc _to_s438;
[L4369]              havoc _value_s438;
[L4370]              havoc success_s438;
[L4371]              havoc _spender_s468;
[L4372]              havoc _value_s468;
[L4373]              havoc success_s468;
[L4374]              havoc _spender_s508;
[L4375]              havoc _value_s508;
[L4376]              havoc _extraData_s508;
[L4377]              havoc success_s508;
[L4378]              havoc _value_s544;
[L4379]              havoc success_s544;
[L4380]              havoc target_s565;
[L4381]              havoc freeze_s565;
[L4382]              havoc target_s592;
[L4383]              havoc _value_s592;
[L4384]              havoc target_s610;
[L4385]              havoc tmpNow;
[L4386]              havoc gas;
[L4387]              assume gas > 4000000 && gas <= 8000000;
[L4388]              tmpNow := now;
[L4389]              havoc now;
[L4390]              assume now > tmpNow;
[L4391]              assume msgsender_MSG != null;
[L4392]              assume DType[msgsender_MSG] != SafeMath;
[L4393]              assume DType[msgsender_MSG] != Owned;
[L4394]              assume DType[msgsender_MSG] != Pausable;
[L4395]              assume DType[msgsender_MSG] != tokenRecipient;
[L4396]              assume DType[msgsender_MSG] != OMAToken;
[L4397]              Alloc[msgsender_MSG] := true;
[L4398]  COND FALSE  !(choice == 21)
[L4404]  COND FALSE  !(choice == 20)
[L4410]  COND FALSE  !(choice == 19)
[L4416]  COND FALSE  !(choice == 18)
[L4422]  COND FALSE  !(choice == 17)
[L4428]  COND FALSE  !(choice == 16)
[L4434]  COND FALSE  !(choice == 15)
[L4440]  COND FALSE  !(choice == 14)
[L4446]  COND FALSE  !(choice == 13)
[L4452]  COND FALSE  !(choice == 12)
[L4458]  COND FALSE  !(choice == 11)
[L4464]  COND FALSE  !(choice == 10)
[L4470]  COND FALSE  !(choice == 9)
[L4476]  COND TRUE   choice == 8
[L4477]              gas := gas - 21000;
[L4478]  COND TRUE   gas >= 0
[L4479]              assume _value_s401 >= 0 && _value_s401 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4480]              assume msgvalue_MSG == 0;
[L4481]  CALL        call success_s401 := transfer~address~uint256_OMAToken(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s401 && _value_s401 <= balanceOf_OMAToken[this][msgsender_MSG]) && _value_s401 >= 0) && _value_s401 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_OMAToken[this][_to_s401] >= 0) && balanceOf_OMAToken[this][_to_s401] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_OMAToken[this][msgsender_MSG] >= 0) && balanceOf_OMAToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_OMAToken0 := true;
[L2]                 call_transfer_OMAToken0 := false;
[L2]                 revert := revert_hold;
[L782]               havoc __exception;
[L783]               revert := false;
[L784]   COND TRUE   __exception
[L785]               __tmp__Balance := Balance;
[L786]               __tmp__DType := DType;
[L787]               __tmp__Alloc := Alloc;
[L788]               __tmp__balance_ADDR := balance_ADDR;
[L789]               __tmp__M_Ref_int := M_Ref_int;
[L790]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L791]               __tmp__alloc_allowance_OMAToken_lvl0 := alloc_allowance_OMAToken_lvl0;
[L792]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L793]               __tmp__sum_allowance1 := sum_allowance1;
[L794]               __tmp__M_Ref_bool := M_Ref_bool;
[L795]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L796]               __tmp__sum_frozenAmount3 := sum_frozenAmount3;
[L797]               __tmp__Length := Length;
[L798]               __tmp__now := now;
[L799]               __tmp__owner_Owned := owner_Owned;
[L800]               __tmp__paused_Pausable := paused_Pausable;
[L801]               __tmp__symbol_OMAToken := symbol_OMAToken;
[L802]               __tmp__name_OMAToken := name_OMAToken;
[L803]               __tmp__decimals_OMAToken := decimals_OMAToken;
[L804]               __tmp__totalSupply_OMAToken := totalSupply_OMAToken;
[L805]               __tmp__balanceOf_OMAToken := balanceOf_OMAToken;
[L806]               __tmp__allowance_OMAToken := allowance_OMAToken;
[L807]               __tmp__frozenAccount_OMAToken := frozenAccount_OMAToken;
[L808]               __tmp__frozenAmount_OMAToken := frozenAmount_OMAToken;
[L809]   CALL        call success_s401 := transfer~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L2857]  CALL        call _transfer~address~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s401, _value_s401);
[L2773]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4040]  COND TRUE   !!__tmp__paused_Pausable[this]
[L4041]              revert := true;
[L2773]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L2774]  COND TRUE   revert
[L2857]  RET         call _transfer~address~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s401, _value_s401);
[L2858]  COND TRUE   revert
[L809]   RET         call success_s401 := transfer~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L810]               assume revert || gas < 0;
[L4481]  RET         call success_s401 := transfer~address~uint256_OMAToken(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L4551]  RET         call CorralChoice_OMAToken(this);

Loop:
[L4551]  CALL        call CorralChoice_OMAToken(this);
[L4342]              havoc msgsender_MSG;
[L4343]              havoc msgvalue_MSG;
[L4344]              havoc choice;
[L4345]              havoc __ret_0_owner;
[L4346]              havoc newOwner_s127;
[L4347]              havoc __ret_0_paused;
[L4348]              havoc __ret_0_symbol;
[L4349]              havoc __ret_0_name;
[L4350]              havoc __ret_0_decimals;
[L4351]              havoc __ret_0_totalSupply;
[L4352]              havoc arg613_s0;
[L4353]              havoc __ret_0_balanceOf;
[L4354]              havoc arg614_s0;
[L4355]              havoc arg615_s0;
[L4356]              havoc __ret_0_allowance;
[L4357]              havoc arg616_s0;
[L4358]              havoc __ret_0_frozenAccount;
[L4359]              havoc arg617_s0;
[L4360]              havoc __ret_0_frozenAmount;
[L4361]              havoc initialSupply_s302;
[L4362]              havoc tokenName_s302;
[L4363]              havoc tokenSymbol_s302;
[L4364]              havoc _to_s401;
[L4365]              havoc _value_s401;
[L4366]              havoc success_s401;
[L4367]              havoc _from_s438;
[L4368]              havoc _to_s438;
[L4369]              havoc _value_s438;
[L4370]              havoc success_s438;
[L4371]              havoc _spender_s468;
[L4372]              havoc _value_s468;
[L4373]              havoc success_s468;
[L4374]              havoc _spender_s508;
[L4375]              havoc _value_s508;
[L4376]              havoc _extraData_s508;
[L4377]              havoc success_s508;
[L4378]              havoc _value_s544;
[L4379]              havoc success_s544;
[L4380]              havoc target_s565;
[L4381]              havoc freeze_s565;
[L4382]              havoc target_s592;
[L4383]              havoc _value_s592;
[L4384]              havoc target_s610;
[L4385]              havoc tmpNow;
[L4386]              havoc gas;
[L4387]              assume gas > 4000000 && gas <= 8000000;
[L4388]              tmpNow := now;
[L4389]              havoc now;
[L4390]              assume now > tmpNow;
[L4391]              assume msgsender_MSG != null;
[L4392]              assume DType[msgsender_MSG] != SafeMath;
[L4393]              assume DType[msgsender_MSG] != Owned;
[L4394]              assume DType[msgsender_MSG] != Pausable;
[L4395]              assume DType[msgsender_MSG] != tokenRecipient;
[L4396]              assume DType[msgsender_MSG] != OMAToken;
[L4397]              Alloc[msgsender_MSG] := true;
[L4398]  COND FALSE  !(choice == 21)
[L4404]  COND FALSE  !(choice == 20)
[L4410]  COND FALSE  !(choice == 19)
[L4416]  COND FALSE  !(choice == 18)
[L4422]  COND FALSE  !(choice == 17)
[L4428]  COND FALSE  !(choice == 16)
[L4434]  COND FALSE  !(choice == 15)
[L4440]  COND FALSE  !(choice == 14)
[L4446]  COND FALSE  !(choice == 13)
[L4452]  COND FALSE  !(choice == 12)
[L4458]  COND FALSE  !(choice == 11)
[L4464]  COND FALSE  !(choice == 10)
[L4470]  COND FALSE  !(choice == 9)
[L4476]  COND TRUE   choice == 8
[L4477]              gas := gas - 21000;
[L4478]  COND TRUE   gas >= 0
[L4479]              assume _value_s401 >= 0 && _value_s401 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4480]              assume msgvalue_MSG == 0;
[L4481]  CALL        call success_s401 := transfer~address~uint256_OMAToken(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s401 && _value_s401 <= balanceOf_OMAToken[this][msgsender_MSG]) && _value_s401 >= 0) && _value_s401 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_OMAToken[this][_to_s401] >= 0) && balanceOf_OMAToken[this][_to_s401] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_OMAToken[this][msgsender_MSG] >= 0) && balanceOf_OMAToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_OMAToken0 := true;
[L2]                 call_transfer_OMAToken0 := false;
[L2]                 revert := revert_hold;
[L782]               havoc __exception;
[L783]               revert := false;
[L784]   COND TRUE   __exception
[L785]               __tmp__Balance := Balance;
[L786]               __tmp__DType := DType;
[L787]               __tmp__Alloc := Alloc;
[L788]               __tmp__balance_ADDR := balance_ADDR;
[L789]               __tmp__M_Ref_int := M_Ref_int;
[L790]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L791]               __tmp__alloc_allowance_OMAToken_lvl0 := alloc_allowance_OMAToken_lvl0;
[L792]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L793]               __tmp__sum_allowance1 := sum_allowance1;
[L794]               __tmp__M_Ref_bool := M_Ref_bool;
[L795]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L796]               __tmp__sum_frozenAmount3 := sum_frozenAmount3;
[L797]               __tmp__Length := Length;
[L798]               __tmp__now := now;
[L799]               __tmp__owner_Owned := owner_Owned;
[L800]               __tmp__paused_Pausable := paused_Pausable;
[L801]               __tmp__symbol_OMAToken := symbol_OMAToken;
[L802]               __tmp__name_OMAToken := name_OMAToken;
[L803]               __tmp__decimals_OMAToken := decimals_OMAToken;
[L804]               __tmp__totalSupply_OMAToken := totalSupply_OMAToken;
[L805]               __tmp__balanceOf_OMAToken := balanceOf_OMAToken;
[L806]               __tmp__allowance_OMAToken := allowance_OMAToken;
[L807]               __tmp__frozenAccount_OMAToken := frozenAccount_OMAToken;
[L808]               __tmp__frozenAmount_OMAToken := frozenAmount_OMAToken;
[L809]   CALL        call success_s401 := transfer~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L2857]  CALL        call _transfer~address~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s401, _value_s401);
[L2773]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4040]  COND TRUE   !!__tmp__paused_Pausable[this]
[L4041]              revert := true;
[L2773]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L2774]  COND TRUE   revert
[L2857]  RET         call _transfer~address~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s401, _value_s401);
[L2858]  COND TRUE   revert
[L809]   RET         call success_s401 := transfer~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L810]               assume revert || gas < 0;
[L4481]  RET         call success_s401 := transfer~address~uint256_OMAToken(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L4551]  RET         call CorralChoice_OMAToken(this);

[2020-11-25 02:26:10,024 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:26:10,024 INFO  L82        PathProgramCache]: Analyzing trace with hash -1874904831, now seen corresponding path program 1 times
[2020-11-25 02:26:10,025 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:26:10,047 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:26:10,172 INFO  L134       CoverageAnalysis]: Checked inductivity of 12 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 12 trivial. 0 not checked.
[2020-11-25 02:26:10,173 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:26:10,173 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-11-25 02:26:10,174 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:26:10,174 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 02:26:10,174 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=157, Unknown=0, NotChecked=0, Total=182
[2020-11-25 02:26:10,174 INFO  L87              Difference]: Start difference. First operand 3056 states and 3283 transitions. cyclomatic complexity: 229 Second operand 14 states.
[2020-11-25 02:26:12,440 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:26:12,440 INFO  L93              Difference]: Finished difference Result 5012 states and 5507 transitions.
[2020-11-25 02:26:12,441 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-11-25 02:26:12,441 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5012 states and 5507 transitions.
[2020-11-25 02:26:12,452 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 12
[2020-11-25 02:26:12,466 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5012 states to 5012 states and 5507 transitions.
[2020-11-25 02:26:12,466 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1375
[2020-11-25 02:26:12,467 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1375
[2020-11-25 02:26:12,467 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5012 states and 5507 transitions.
[2020-11-25 02:26:12,472 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:26:12,472 INFO  L728         BuchiCegarLoop]: Abstraction has 5012 states and 5507 transitions.
[2020-11-25 02:26:12,475 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5012 states and 5507 transitions.
[2020-11-25 02:26:12,507 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5012 to 3106.
[2020-11-25 02:26:12,507 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3106 states.
[2020-11-25 02:26:12,510 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3106 states to 3106 states and 3342 transitions.
[2020-11-25 02:26:12,510 INFO  L751         BuchiCegarLoop]: Abstraction has 3106 states and 3342 transitions.
[2020-11-25 02:26:12,510 INFO  L631         BuchiCegarLoop]: Abstraction has 3106 states and 3342 transitions.
[2020-11-25 02:26:12,510 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 02:26:12,510 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3106 states and 3342 transitions.
[2020-11-25 02:26:12,513 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 02:26:12,513 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:26:12,514 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:26:12,515 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:26:12,516 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_OMAToken0 := false;
[L2]                 call_transfer_OMAToken0 := false;
[L2]     CALL        call main();
[L4541]              assume null == 0;
[L4542]  CALL        call this := FreshRefGenerator__success();
[L2373]              havoc newRef;
[L2374]              assume Alloc[newRef] == false;
[L2375]              Alloc[newRef] := true;
[L2376]              assume newRef != null;
[L4542]  RET         call this := FreshRefGenerator__success();
[L4543]              assume now >= 0;
[L4544]              assume DType[this] == OMAToken;
[L4545]              assume msgvalue_MSG == 0;
[L4546]              gas := gas - 53000;
[L4547]  CALL        call OMAToken_OMAToken(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L712]               havoc __exception;
[L713]               revert := false;
[L714]   COND FALSE  !(__exception)
[L742]   CALL        call OMAToken_OMAToken__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L2754]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2504]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2487]              assume msgsender_MSG != null;
[L2488]              Balance[this] := 0;
[L2489]              owner_Owned[this] := null;
[L2491]              owner_Owned[this] := msgsender_MSG;
[L2504]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]  COND FALSE  !(revert)
[L2754]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2755]  COND FALSE  !(revert)
[L2758]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L2572]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2504]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2487]              assume msgsender_MSG != null;
[L2488]              Balance[this] := 0;
[L2489]              owner_Owned[this] := null;
[L2491]              owner_Owned[this] := msgsender_MSG;
[L2504]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]  COND FALSE  !(revert)
[L2572]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2573]  COND FALSE  !(revert)
[L2576]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2552]              assume msgsender_MSG != null;
[L2553]              Balance[this] := 0;
[L2554]              paused_Pausable[this] := false;
[L2576]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2577]  COND FALSE  !(revert)
[L2758]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L2759]  COND FALSE  !(revert)
[L2762]  CALL        call OMAToken_OMAToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L2711]              assume msgsender_MSG != null;
[L2712]              Balance[this] := 0;
[L2713]              symbol_OMAToken[this] := -641797033;
[L2714]              name_OMAToken[this] := -641797033;
[L2715]              decimals_OMAToken[this] := 18;
[L2716]              totalSupply_OMAToken[this] := 0;
[L2717]              balanceOf_OMAToken[this] := zeroRefintArr();
[L2718]              sum_balanceOf0[this] := 0;
[L2719]              allowance_OMAToken[this] := zeroRefRefintArr();
[L2720]              sum_allowance1[this] := 0;
[L2721]              frozenAccount_OMAToken[this] := zeroRefboolArr();
[L2722]              frozenAmount_OMAToken[this] := zeroRefintArr();
[L2723]              sum_frozenAmount3[this] := 0;
[L2725]              __var_1 := decimals_OMAToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2726]              totalSupply_OMAToken[this] := nonlinearMul(initialSupply_s302, nonlinearPow(10, decimals_OMAToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2727]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_OMAToken[this][msgsender_MSG];
[L2728]              balanceOf_OMAToken[this][msgsender_MSG] := totalSupply_OMAToken[this];
[L2729]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_OMAToken[this][msgsender_MSG];
[L2730]              name_OMAToken[this] := tokenName_s302;
[L2731]              symbol_OMAToken[this] := tokenSymbol_s302;
[L2762]  RET         call OMAToken_OMAToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L2763]  COND FALSE  !(revert)
[L742]   RET         call OMAToken_OMAToken__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L743]               assume !revert && gas >= 0;
[L4547]  RET         call OMAToken_OMAToken(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L4548]              assume !revert && gas >= 0;
[L4551]  CALL        call CorralChoice_OMAToken(this);
[L4342]              havoc msgsender_MSG;
[L4343]              havoc msgvalue_MSG;
[L4344]              havoc choice;
[L4345]              havoc __ret_0_owner;
[L4346]              havoc newOwner_s127;
[L4347]              havoc __ret_0_paused;
[L4348]              havoc __ret_0_symbol;
[L4349]              havoc __ret_0_name;
[L4350]              havoc __ret_0_decimals;
[L4351]              havoc __ret_0_totalSupply;
[L4352]              havoc arg613_s0;
[L4353]              havoc __ret_0_balanceOf;
[L4354]              havoc arg614_s0;
[L4355]              havoc arg615_s0;
[L4356]              havoc __ret_0_allowance;
[L4357]              havoc arg616_s0;
[L4358]              havoc __ret_0_frozenAccount;
[L4359]              havoc arg617_s0;
[L4360]              havoc __ret_0_frozenAmount;
[L4361]              havoc initialSupply_s302;
[L4362]              havoc tokenName_s302;
[L4363]              havoc tokenSymbol_s302;
[L4364]              havoc _to_s401;
[L4365]              havoc _value_s401;
[L4366]              havoc success_s401;
[L4367]              havoc _from_s438;
[L4368]              havoc _to_s438;
[L4369]              havoc _value_s438;
[L4370]              havoc success_s438;
[L4371]              havoc _spender_s468;
[L4372]              havoc _value_s468;
[L4373]              havoc success_s468;
[L4374]              havoc _spender_s508;
[L4375]              havoc _value_s508;
[L4376]              havoc _extraData_s508;
[L4377]              havoc success_s508;
[L4378]              havoc _value_s544;
[L4379]              havoc success_s544;
[L4380]              havoc target_s565;
[L4381]              havoc freeze_s565;
[L4382]              havoc target_s592;
[L4383]              havoc _value_s592;
[L4384]              havoc target_s610;
[L4385]              havoc tmpNow;
[L4386]              havoc gas;
[L4387]              assume gas > 4000000 && gas <= 8000000;
[L4388]              tmpNow := now;
[L4389]              havoc now;
[L4390]              assume now > tmpNow;
[L4391]              assume msgsender_MSG != null;
[L4392]              assume DType[msgsender_MSG] != SafeMath;
[L4393]              assume DType[msgsender_MSG] != Owned;
[L4394]              assume DType[msgsender_MSG] != Pausable;
[L4395]              assume DType[msgsender_MSG] != tokenRecipient;
[L4396]              assume DType[msgsender_MSG] != OMAToken;
[L4397]              Alloc[msgsender_MSG] := true;
[L4398]  COND FALSE  !(choice == 21)
[L4404]  COND FALSE  !(choice == 20)
[L4410]  COND FALSE  !(choice == 19)
[L4416]  COND FALSE  !(choice == 18)
[L4422]  COND FALSE  !(choice == 17)
[L4428]  COND FALSE  !(choice == 16)
[L4434]  COND FALSE  !(choice == 15)
[L4440]  COND FALSE  !(choice == 14)
[L4446]  COND FALSE  !(choice == 13)
[L4452]  COND FALSE  !(choice == 12)
[L4458]  COND FALSE  !(choice == 11)
[L4464]  COND FALSE  !(choice == 10)
[L4470]  COND FALSE  !(choice == 9)
[L4476]  COND TRUE   choice == 8
[L4477]              gas := gas - 21000;
[L4478]  COND TRUE   gas >= 0
[L4479]              assume _value_s401 >= 0 && _value_s401 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4480]              assume msgvalue_MSG == 0;
[L4481]  CALL        call success_s401 := transfer~address~uint256_OMAToken(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s401 && _value_s401 <= balanceOf_OMAToken[this][msgsender_MSG]) && _value_s401 >= 0) && _value_s401 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_OMAToken[this][_to_s401] >= 0) && balanceOf_OMAToken[this][_to_s401] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_OMAToken[this][msgsender_MSG] >= 0) && balanceOf_OMAToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_OMAToken0 := true;
[L2]                 call_transfer_OMAToken0 := false;
[L2]                 revert := revert_hold;
[L782]               havoc __exception;
[L783]               revert := false;
[L784]   COND TRUE   __exception
[L785]               __tmp__Balance := Balance;
[L786]               __tmp__DType := DType;
[L787]               __tmp__Alloc := Alloc;
[L788]               __tmp__balance_ADDR := balance_ADDR;
[L789]               __tmp__M_Ref_int := M_Ref_int;
[L790]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L791]               __tmp__alloc_allowance_OMAToken_lvl0 := alloc_allowance_OMAToken_lvl0;
[L792]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L793]               __tmp__sum_allowance1 := sum_allowance1;
[L794]               __tmp__M_Ref_bool := M_Ref_bool;
[L795]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L796]               __tmp__sum_frozenAmount3 := sum_frozenAmount3;
[L797]               __tmp__Length := Length;
[L798]               __tmp__now := now;
[L799]               __tmp__owner_Owned := owner_Owned;
[L800]               __tmp__paused_Pausable := paused_Pausable;
[L801]               __tmp__symbol_OMAToken := symbol_OMAToken;
[L802]               __tmp__name_OMAToken := name_OMAToken;
[L803]               __tmp__decimals_OMAToken := decimals_OMAToken;
[L804]               __tmp__totalSupply_OMAToken := totalSupply_OMAToken;
[L805]               __tmp__balanceOf_OMAToken := balanceOf_OMAToken;
[L806]               __tmp__allowance_OMAToken := allowance_OMAToken;
[L807]               __tmp__frozenAccount_OMAToken := frozenAccount_OMAToken;
[L808]               __tmp__frozenAmount_OMAToken := frozenAmount_OMAToken;
[L809]   CALL        call success_s401 := transfer~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L2857]  CALL        call _transfer~address~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s401, _value_s401);
[L2773]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4040]  COND FALSE  !(!!__tmp__paused_Pausable[this])
[L2773]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L2774]  COND FALSE  !(revert)
[L2777]              __var_2 := null;
[L2778]  COND TRUE   !(_to_s382 != null)
[L2779]              revert := true;
[L2857]  RET         call _transfer~address~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s401, _value_s401);
[L2858]  COND TRUE   revert
[L809]   RET         call success_s401 := transfer~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L810]               assume revert || gas < 0;
[L4481]  RET         call success_s401 := transfer~address~uint256_OMAToken(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L4551]  RET         call CorralChoice_OMAToken(this);

Loop:
[L4551]  CALL        call CorralChoice_OMAToken(this);
[L4342]              havoc msgsender_MSG;
[L4343]              havoc msgvalue_MSG;
[L4344]              havoc choice;
[L4345]              havoc __ret_0_owner;
[L4346]              havoc newOwner_s127;
[L4347]              havoc __ret_0_paused;
[L4348]              havoc __ret_0_symbol;
[L4349]              havoc __ret_0_name;
[L4350]              havoc __ret_0_decimals;
[L4351]              havoc __ret_0_totalSupply;
[L4352]              havoc arg613_s0;
[L4353]              havoc __ret_0_balanceOf;
[L4354]              havoc arg614_s0;
[L4355]              havoc arg615_s0;
[L4356]              havoc __ret_0_allowance;
[L4357]              havoc arg616_s0;
[L4358]              havoc __ret_0_frozenAccount;
[L4359]              havoc arg617_s0;
[L4360]              havoc __ret_0_frozenAmount;
[L4361]              havoc initialSupply_s302;
[L4362]              havoc tokenName_s302;
[L4363]              havoc tokenSymbol_s302;
[L4364]              havoc _to_s401;
[L4365]              havoc _value_s401;
[L4366]              havoc success_s401;
[L4367]              havoc _from_s438;
[L4368]              havoc _to_s438;
[L4369]              havoc _value_s438;
[L4370]              havoc success_s438;
[L4371]              havoc _spender_s468;
[L4372]              havoc _value_s468;
[L4373]              havoc success_s468;
[L4374]              havoc _spender_s508;
[L4375]              havoc _value_s508;
[L4376]              havoc _extraData_s508;
[L4377]              havoc success_s508;
[L4378]              havoc _value_s544;
[L4379]              havoc success_s544;
[L4380]              havoc target_s565;
[L4381]              havoc freeze_s565;
[L4382]              havoc target_s592;
[L4383]              havoc _value_s592;
[L4384]              havoc target_s610;
[L4385]              havoc tmpNow;
[L4386]              havoc gas;
[L4387]              assume gas > 4000000 && gas <= 8000000;
[L4388]              tmpNow := now;
[L4389]              havoc now;
[L4390]              assume now > tmpNow;
[L4391]              assume msgsender_MSG != null;
[L4392]              assume DType[msgsender_MSG] != SafeMath;
[L4393]              assume DType[msgsender_MSG] != Owned;
[L4394]              assume DType[msgsender_MSG] != Pausable;
[L4395]              assume DType[msgsender_MSG] != tokenRecipient;
[L4396]              assume DType[msgsender_MSG] != OMAToken;
[L4397]              Alloc[msgsender_MSG] := true;
[L4398]  COND FALSE  !(choice == 21)
[L4404]  COND FALSE  !(choice == 20)
[L4410]  COND FALSE  !(choice == 19)
[L4416]  COND FALSE  !(choice == 18)
[L4422]  COND FALSE  !(choice == 17)
[L4428]  COND FALSE  !(choice == 16)
[L4434]  COND FALSE  !(choice == 15)
[L4440]  COND FALSE  !(choice == 14)
[L4446]  COND FALSE  !(choice == 13)
[L4452]  COND FALSE  !(choice == 12)
[L4458]  COND FALSE  !(choice == 11)
[L4464]  COND FALSE  !(choice == 10)
[L4470]  COND FALSE  !(choice == 9)
[L4476]  COND TRUE   choice == 8
[L4477]              gas := gas - 21000;
[L4478]  COND TRUE   gas >= 0
[L4479]              assume _value_s401 >= 0 && _value_s401 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4480]              assume msgvalue_MSG == 0;
[L4481]  CALL        call success_s401 := transfer~address~uint256_OMAToken(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s401 && _value_s401 <= balanceOf_OMAToken[this][msgsender_MSG]) && _value_s401 >= 0) && _value_s401 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_OMAToken[this][_to_s401] >= 0) && balanceOf_OMAToken[this][_to_s401] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_OMAToken[this][msgsender_MSG] >= 0) && balanceOf_OMAToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_OMAToken0 := true;
[L2]                 call_transfer_OMAToken0 := false;
[L2]                 revert := revert_hold;
[L782]               havoc __exception;
[L783]               revert := false;
[L784]   COND TRUE   __exception
[L785]               __tmp__Balance := Balance;
[L786]               __tmp__DType := DType;
[L787]               __tmp__Alloc := Alloc;
[L788]               __tmp__balance_ADDR := balance_ADDR;
[L789]               __tmp__M_Ref_int := M_Ref_int;
[L790]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L791]               __tmp__alloc_allowance_OMAToken_lvl0 := alloc_allowance_OMAToken_lvl0;
[L792]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L793]               __tmp__sum_allowance1 := sum_allowance1;
[L794]               __tmp__M_Ref_bool := M_Ref_bool;
[L795]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L796]               __tmp__sum_frozenAmount3 := sum_frozenAmount3;
[L797]               __tmp__Length := Length;
[L798]               __tmp__now := now;
[L799]               __tmp__owner_Owned := owner_Owned;
[L800]               __tmp__paused_Pausable := paused_Pausable;
[L801]               __tmp__symbol_OMAToken := symbol_OMAToken;
[L802]               __tmp__name_OMAToken := name_OMAToken;
[L803]               __tmp__decimals_OMAToken := decimals_OMAToken;
[L804]               __tmp__totalSupply_OMAToken := totalSupply_OMAToken;
[L805]               __tmp__balanceOf_OMAToken := balanceOf_OMAToken;
[L806]               __tmp__allowance_OMAToken := allowance_OMAToken;
[L807]               __tmp__frozenAccount_OMAToken := frozenAccount_OMAToken;
[L808]               __tmp__frozenAmount_OMAToken := frozenAmount_OMAToken;
[L809]   CALL        call success_s401 := transfer~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L2857]  CALL        call _transfer~address~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s401, _value_s401);
[L2773]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4040]  COND FALSE  !(!!__tmp__paused_Pausable[this])
[L2773]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L2774]  COND FALSE  !(revert)
[L2777]              __var_2 := null;
[L2778]  COND TRUE   !(_to_s382 != null)
[L2779]              revert := true;
[L2857]  RET         call _transfer~address~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s401, _value_s401);
[L2858]  COND TRUE   revert
[L809]   RET         call success_s401 := transfer~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L810]               assume revert || gas < 0;
[L4481]  RET         call success_s401 := transfer~address~uint256_OMAToken(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L4551]  RET         call CorralChoice_OMAToken(this);

[2020-11-25 02:26:12,519 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:26:12,519 INFO  L82        PathProgramCache]: Analyzing trace with hash -1184091053, now seen corresponding path program 1 times
[2020-11-25 02:26:12,520 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:26:12,528 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:26:12,562 INFO  L134       CoverageAnalysis]: Checked inductivity of 12 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 12 trivial. 0 not checked.
[2020-11-25 02:26:12,562 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:26:12,562 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 02:26:12,562 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:26:12,563 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 02:26:12,563 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 02:26:12,563 INFO  L87              Difference]: Start difference. First operand 3106 states and 3342 transitions. cyclomatic complexity: 240 Second operand 7 states.
[2020-11-25 02:26:12,602 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:26:12,602 INFO  L93              Difference]: Finished difference Result 3216 states and 3463 transitions.
[2020-11-25 02:26:12,602 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 02:26:12,603 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3216 states and 3463 transitions.
[2020-11-25 02:26:12,608 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 02:26:12,617 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3216 states to 3208 states and 3455 transitions.
[2020-11-25 02:26:12,617 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 874
[2020-11-25 02:26:12,617 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 874
[2020-11-25 02:26:12,617 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3208 states and 3455 transitions.
[2020-11-25 02:26:12,620 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:26:12,620 INFO  L728         BuchiCegarLoop]: Abstraction has 3208 states and 3455 transitions.
[2020-11-25 02:26:12,622 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3208 states and 3455 transitions.
[2020-11-25 02:26:12,641 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3208 to 3191.
[2020-11-25 02:26:12,641 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3191 states.
[2020-11-25 02:26:12,643 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3191 states to 3191 states and 3436 transitions.
[2020-11-25 02:26:12,644 INFO  L751         BuchiCegarLoop]: Abstraction has 3191 states and 3436 transitions.
[2020-11-25 02:26:12,644 INFO  L631         BuchiCegarLoop]: Abstraction has 3191 states and 3436 transitions.
[2020-11-25 02:26:12,644 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 02:26:12,644 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3191 states and 3436 transitions.
[2020-11-25 02:26:12,647 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 02:26:12,648 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:26:12,648 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:26:12,649 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:26:12,649 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_OMAToken0 := false;
[L2]                 call_transfer_OMAToken0 := false;
[L2]     CALL        call main();
[L4541]              assume null == 0;
[L4542]  CALL        call this := FreshRefGenerator__success();
[L2373]              havoc newRef;
[L2374]              assume Alloc[newRef] == false;
[L2375]              Alloc[newRef] := true;
[L2376]              assume newRef != null;
[L4542]  RET         call this := FreshRefGenerator__success();
[L4543]              assume now >= 0;
[L4544]              assume DType[this] == OMAToken;
[L4545]              assume msgvalue_MSG == 0;
[L4546]              gas := gas - 53000;
[L4547]  CALL        call OMAToken_OMAToken(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L712]               havoc __exception;
[L713]               revert := false;
[L714]   COND FALSE  !(__exception)
[L742]   CALL        call OMAToken_OMAToken__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L2754]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2504]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2487]              assume msgsender_MSG != null;
[L2488]              Balance[this] := 0;
[L2489]              owner_Owned[this] := null;
[L2491]              owner_Owned[this] := msgsender_MSG;
[L2504]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]  COND FALSE  !(revert)
[L2754]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2755]  COND FALSE  !(revert)
[L2758]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L2572]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2504]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2487]              assume msgsender_MSG != null;
[L2488]              Balance[this] := 0;
[L2489]              owner_Owned[this] := null;
[L2491]              owner_Owned[this] := msgsender_MSG;
[L2504]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]  COND FALSE  !(revert)
[L2572]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2573]  COND FALSE  !(revert)
[L2576]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2552]              assume msgsender_MSG != null;
[L2553]              Balance[this] := 0;
[L2554]              paused_Pausable[this] := false;
[L2576]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2577]  COND FALSE  !(revert)
[L2758]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L2759]  COND FALSE  !(revert)
[L2762]  CALL        call OMAToken_OMAToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L2711]              assume msgsender_MSG != null;
[L2712]              Balance[this] := 0;
[L2713]              symbol_OMAToken[this] := -641797033;
[L2714]              name_OMAToken[this] := -641797033;
[L2715]              decimals_OMAToken[this] := 18;
[L2716]              totalSupply_OMAToken[this] := 0;
[L2717]              balanceOf_OMAToken[this] := zeroRefintArr();
[L2718]              sum_balanceOf0[this] := 0;
[L2719]              allowance_OMAToken[this] := zeroRefRefintArr();
[L2720]              sum_allowance1[this] := 0;
[L2721]              frozenAccount_OMAToken[this] := zeroRefboolArr();
[L2722]              frozenAmount_OMAToken[this] := zeroRefintArr();
[L2723]              sum_frozenAmount3[this] := 0;
[L2725]              __var_1 := decimals_OMAToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2726]              totalSupply_OMAToken[this] := nonlinearMul(initialSupply_s302, nonlinearPow(10, decimals_OMAToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2727]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_OMAToken[this][msgsender_MSG];
[L2728]              balanceOf_OMAToken[this][msgsender_MSG] := totalSupply_OMAToken[this];
[L2729]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_OMAToken[this][msgsender_MSG];
[L2730]              name_OMAToken[this] := tokenName_s302;
[L2731]              symbol_OMAToken[this] := tokenSymbol_s302;
[L2762]  RET         call OMAToken_OMAToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L2763]  COND FALSE  !(revert)
[L742]   RET         call OMAToken_OMAToken__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L743]               assume !revert && gas >= 0;
[L4547]  RET         call OMAToken_OMAToken(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L4548]              assume !revert && gas >= 0;
[L4551]  CALL        call CorralChoice_OMAToken(this);
[L4342]              havoc msgsender_MSG;
[L4343]              havoc msgvalue_MSG;
[L4344]              havoc choice;
[L4345]              havoc __ret_0_owner;
[L4346]              havoc newOwner_s127;
[L4347]              havoc __ret_0_paused;
[L4348]              havoc __ret_0_symbol;
[L4349]              havoc __ret_0_name;
[L4350]              havoc __ret_0_decimals;
[L4351]              havoc __ret_0_totalSupply;
[L4352]              havoc arg613_s0;
[L4353]              havoc __ret_0_balanceOf;
[L4354]              havoc arg614_s0;
[L4355]              havoc arg615_s0;
[L4356]              havoc __ret_0_allowance;
[L4357]              havoc arg616_s0;
[L4358]              havoc __ret_0_frozenAccount;
[L4359]              havoc arg617_s0;
[L4360]              havoc __ret_0_frozenAmount;
[L4361]              havoc initialSupply_s302;
[L4362]              havoc tokenName_s302;
[L4363]              havoc tokenSymbol_s302;
[L4364]              havoc _to_s401;
[L4365]              havoc _value_s401;
[L4366]              havoc success_s401;
[L4367]              havoc _from_s438;
[L4368]              havoc _to_s438;
[L4369]              havoc _value_s438;
[L4370]              havoc success_s438;
[L4371]              havoc _spender_s468;
[L4372]              havoc _value_s468;
[L4373]              havoc success_s468;
[L4374]              havoc _spender_s508;
[L4375]              havoc _value_s508;
[L4376]              havoc _extraData_s508;
[L4377]              havoc success_s508;
[L4378]              havoc _value_s544;
[L4379]              havoc success_s544;
[L4380]              havoc target_s565;
[L4381]              havoc freeze_s565;
[L4382]              havoc target_s592;
[L4383]              havoc _value_s592;
[L4384]              havoc target_s610;
[L4385]              havoc tmpNow;
[L4386]              havoc gas;
[L4387]              assume gas > 4000000 && gas <= 8000000;
[L4388]              tmpNow := now;
[L4389]              havoc now;
[L4390]              assume now > tmpNow;
[L4391]              assume msgsender_MSG != null;
[L4392]              assume DType[msgsender_MSG] != SafeMath;
[L4393]              assume DType[msgsender_MSG] != Owned;
[L4394]              assume DType[msgsender_MSG] != Pausable;
[L4395]              assume DType[msgsender_MSG] != tokenRecipient;
[L4396]              assume DType[msgsender_MSG] != OMAToken;
[L4397]              Alloc[msgsender_MSG] := true;
[L4398]  COND FALSE  !(choice == 21)
[L4404]  COND FALSE  !(choice == 20)
[L4410]  COND FALSE  !(choice == 19)
[L4416]  COND FALSE  !(choice == 18)
[L4422]  COND FALSE  !(choice == 17)
[L4428]  COND FALSE  !(choice == 16)
[L4434]  COND FALSE  !(choice == 15)
[L4440]  COND FALSE  !(choice == 14)
[L4446]  COND FALSE  !(choice == 13)
[L4452]  COND FALSE  !(choice == 12)
[L4458]  COND FALSE  !(choice == 11)
[L4464]  COND FALSE  !(choice == 10)
[L4470]  COND FALSE  !(choice == 9)
[L4476]  COND TRUE   choice == 8
[L4477]              gas := gas - 21000;
[L4478]  COND TRUE   gas >= 0
[L4479]              assume _value_s401 >= 0 && _value_s401 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4480]              assume msgvalue_MSG == 0;
[L4481]  CALL        call success_s401 := transfer~address~uint256_OMAToken(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s401 && _value_s401 <= balanceOf_OMAToken[this][msgsender_MSG]) && _value_s401 >= 0) && _value_s401 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_OMAToken[this][_to_s401] >= 0) && balanceOf_OMAToken[this][_to_s401] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_OMAToken[this][msgsender_MSG] >= 0) && balanceOf_OMAToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_OMAToken0 := true;
[L2]                 call_transfer_OMAToken0 := false;
[L2]                 revert := revert_hold;
[L782]               havoc __exception;
[L783]               revert := false;
[L784]   COND TRUE   __exception
[L785]               __tmp__Balance := Balance;
[L786]               __tmp__DType := DType;
[L787]               __tmp__Alloc := Alloc;
[L788]               __tmp__balance_ADDR := balance_ADDR;
[L789]               __tmp__M_Ref_int := M_Ref_int;
[L790]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L791]               __tmp__alloc_allowance_OMAToken_lvl0 := alloc_allowance_OMAToken_lvl0;
[L792]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L793]               __tmp__sum_allowance1 := sum_allowance1;
[L794]               __tmp__M_Ref_bool := M_Ref_bool;
[L795]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L796]               __tmp__sum_frozenAmount3 := sum_frozenAmount3;
[L797]               __tmp__Length := Length;
[L798]               __tmp__now := now;
[L799]               __tmp__owner_Owned := owner_Owned;
[L800]               __tmp__paused_Pausable := paused_Pausable;
[L801]               __tmp__symbol_OMAToken := symbol_OMAToken;
[L802]               __tmp__name_OMAToken := name_OMAToken;
[L803]               __tmp__decimals_OMAToken := decimals_OMAToken;
[L804]               __tmp__totalSupply_OMAToken := totalSupply_OMAToken;
[L805]               __tmp__balanceOf_OMAToken := balanceOf_OMAToken;
[L806]               __tmp__allowance_OMAToken := allowance_OMAToken;
[L807]               __tmp__frozenAccount_OMAToken := frozenAccount_OMAToken;
[L808]               __tmp__frozenAmount_OMAToken := frozenAmount_OMAToken;
[L809]   CALL        call success_s401 := transfer~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L2857]  CALL        call _transfer~address~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s401, _value_s401);
[L2773]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4040]  COND FALSE  !(!!__tmp__paused_Pausable[this])
[L2773]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L2774]  COND FALSE  !(revert)
[L2777]              __var_2 := null;
[L2778]  COND FALSE  !(!(_to_s382 != null))
[L2782]  COND TRUE   !!__tmp__frozenAccount_OMAToken[this][_from_s382]
[L2783]              revert := true;
[L2857]  RET         call _transfer~address~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s401, _value_s401);
[L2858]  COND TRUE   revert
[L809]   RET         call success_s401 := transfer~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L810]               assume revert || gas < 0;
[L4481]  RET         call success_s401 := transfer~address~uint256_OMAToken(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L4551]  RET         call CorralChoice_OMAToken(this);

Loop:
[L4551]  CALL        call CorralChoice_OMAToken(this);
[L4342]              havoc msgsender_MSG;
[L4343]              havoc msgvalue_MSG;
[L4344]              havoc choice;
[L4345]              havoc __ret_0_owner;
[L4346]              havoc newOwner_s127;
[L4347]              havoc __ret_0_paused;
[L4348]              havoc __ret_0_symbol;
[L4349]              havoc __ret_0_name;
[L4350]              havoc __ret_0_decimals;
[L4351]              havoc __ret_0_totalSupply;
[L4352]              havoc arg613_s0;
[L4353]              havoc __ret_0_balanceOf;
[L4354]              havoc arg614_s0;
[L4355]              havoc arg615_s0;
[L4356]              havoc __ret_0_allowance;
[L4357]              havoc arg616_s0;
[L4358]              havoc __ret_0_frozenAccount;
[L4359]              havoc arg617_s0;
[L4360]              havoc __ret_0_frozenAmount;
[L4361]              havoc initialSupply_s302;
[L4362]              havoc tokenName_s302;
[L4363]              havoc tokenSymbol_s302;
[L4364]              havoc _to_s401;
[L4365]              havoc _value_s401;
[L4366]              havoc success_s401;
[L4367]              havoc _from_s438;
[L4368]              havoc _to_s438;
[L4369]              havoc _value_s438;
[L4370]              havoc success_s438;
[L4371]              havoc _spender_s468;
[L4372]              havoc _value_s468;
[L4373]              havoc success_s468;
[L4374]              havoc _spender_s508;
[L4375]              havoc _value_s508;
[L4376]              havoc _extraData_s508;
[L4377]              havoc success_s508;
[L4378]              havoc _value_s544;
[L4379]              havoc success_s544;
[L4380]              havoc target_s565;
[L4381]              havoc freeze_s565;
[L4382]              havoc target_s592;
[L4383]              havoc _value_s592;
[L4384]              havoc target_s610;
[L4385]              havoc tmpNow;
[L4386]              havoc gas;
[L4387]              assume gas > 4000000 && gas <= 8000000;
[L4388]              tmpNow := now;
[L4389]              havoc now;
[L4390]              assume now > tmpNow;
[L4391]              assume msgsender_MSG != null;
[L4392]              assume DType[msgsender_MSG] != SafeMath;
[L4393]              assume DType[msgsender_MSG] != Owned;
[L4394]              assume DType[msgsender_MSG] != Pausable;
[L4395]              assume DType[msgsender_MSG] != tokenRecipient;
[L4396]              assume DType[msgsender_MSG] != OMAToken;
[L4397]              Alloc[msgsender_MSG] := true;
[L4398]  COND FALSE  !(choice == 21)
[L4404]  COND FALSE  !(choice == 20)
[L4410]  COND FALSE  !(choice == 19)
[L4416]  COND FALSE  !(choice == 18)
[L4422]  COND FALSE  !(choice == 17)
[L4428]  COND FALSE  !(choice == 16)
[L4434]  COND FALSE  !(choice == 15)
[L4440]  COND FALSE  !(choice == 14)
[L4446]  COND FALSE  !(choice == 13)
[L4452]  COND FALSE  !(choice == 12)
[L4458]  COND FALSE  !(choice == 11)
[L4464]  COND FALSE  !(choice == 10)
[L4470]  COND FALSE  !(choice == 9)
[L4476]  COND TRUE   choice == 8
[L4477]              gas := gas - 21000;
[L4478]  COND TRUE   gas >= 0
[L4479]              assume _value_s401 >= 0 && _value_s401 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4480]              assume msgvalue_MSG == 0;
[L4481]  CALL        call success_s401 := transfer~address~uint256_OMAToken(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s401 && _value_s401 <= balanceOf_OMAToken[this][msgsender_MSG]) && _value_s401 >= 0) && _value_s401 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_OMAToken[this][_to_s401] >= 0) && balanceOf_OMAToken[this][_to_s401] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_OMAToken[this][msgsender_MSG] >= 0) && balanceOf_OMAToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_OMAToken0 := true;
[L2]                 call_transfer_OMAToken0 := false;
[L2]                 revert := revert_hold;
[L782]               havoc __exception;
[L783]               revert := false;
[L784]   COND TRUE   __exception
[L785]               __tmp__Balance := Balance;
[L786]               __tmp__DType := DType;
[L787]               __tmp__Alloc := Alloc;
[L788]               __tmp__balance_ADDR := balance_ADDR;
[L789]               __tmp__M_Ref_int := M_Ref_int;
[L790]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L791]               __tmp__alloc_allowance_OMAToken_lvl0 := alloc_allowance_OMAToken_lvl0;
[L792]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L793]               __tmp__sum_allowance1 := sum_allowance1;
[L794]               __tmp__M_Ref_bool := M_Ref_bool;
[L795]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L796]               __tmp__sum_frozenAmount3 := sum_frozenAmount3;
[L797]               __tmp__Length := Length;
[L798]               __tmp__now := now;
[L799]               __tmp__owner_Owned := owner_Owned;
[L800]               __tmp__paused_Pausable := paused_Pausable;
[L801]               __tmp__symbol_OMAToken := symbol_OMAToken;
[L802]               __tmp__name_OMAToken := name_OMAToken;
[L803]               __tmp__decimals_OMAToken := decimals_OMAToken;
[L804]               __tmp__totalSupply_OMAToken := totalSupply_OMAToken;
[L805]               __tmp__balanceOf_OMAToken := balanceOf_OMAToken;
[L806]               __tmp__allowance_OMAToken := allowance_OMAToken;
[L807]               __tmp__frozenAccount_OMAToken := frozenAccount_OMAToken;
[L808]               __tmp__frozenAmount_OMAToken := frozenAmount_OMAToken;
[L809]   CALL        call success_s401 := transfer~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L2857]  CALL        call _transfer~address~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s401, _value_s401);
[L2773]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4040]  COND FALSE  !(!!__tmp__paused_Pausable[this])
[L2773]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L2774]  COND FALSE  !(revert)
[L2777]              __var_2 := null;
[L2778]  COND FALSE  !(!(_to_s382 != null))
[L2782]  COND TRUE   !!__tmp__frozenAccount_OMAToken[this][_from_s382]
[L2783]              revert := true;
[L2857]  RET         call _transfer~address~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s401, _value_s401);
[L2858]  COND TRUE   revert
[L809]   RET         call success_s401 := transfer~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L810]               assume revert || gas < 0;
[L4481]  RET         call success_s401 := transfer~address~uint256_OMAToken(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L4551]  RET         call CorralChoice_OMAToken(this);

[2020-11-25 02:26:12,653 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:26:12,653 INFO  L82        PathProgramCache]: Analyzing trace with hash 98880698, now seen corresponding path program 1 times
[2020-11-25 02:26:12,654 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:26:12,666 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:26:12,735 INFO  L134       CoverageAnalysis]: Checked inductivity of 12 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 12 trivial. 0 not checked.
[2020-11-25 02:26:12,735 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:26:12,735 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [11] imperfect sequences [] total 11
[2020-11-25 02:26:12,736 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:26:12,736 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-25 02:26:12,736 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=111, Unknown=0, NotChecked=0, Total=132
[2020-11-25 02:26:12,736 INFO  L87              Difference]: Start difference. First operand 3191 states and 3436 transitions. cyclomatic complexity: 249 Second operand 12 states.
[2020-11-25 02:26:14,415 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:26:14,416 INFO  L93              Difference]: Finished difference Result 5516 states and 6096 transitions.
[2020-11-25 02:26:14,416 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-11-25 02:26:14,416 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5516 states and 6096 transitions.
[2020-11-25 02:26:14,432 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 20
[2020-11-25 02:26:14,447 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5516 states to 5516 states and 6096 transitions.
[2020-11-25 02:26:14,447 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1508
[2020-11-25 02:26:14,448 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1508
[2020-11-25 02:26:14,448 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5516 states and 6096 transitions.
[2020-11-25 02:26:14,453 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:26:14,453 INFO  L728         BuchiCegarLoop]: Abstraction has 5516 states and 6096 transitions.
[2020-11-25 02:26:14,457 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5516 states and 6096 transitions.
[2020-11-25 02:26:14,486 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5516 to 3239.
[2020-11-25 02:26:14,487 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3239 states.
[2020-11-25 02:26:14,490 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3239 states to 3239 states and 3512 transitions.
[2020-11-25 02:26:14,490 INFO  L751         BuchiCegarLoop]: Abstraction has 3239 states and 3512 transitions.
[2020-11-25 02:26:14,490 INFO  L631         BuchiCegarLoop]: Abstraction has 3239 states and 3512 transitions.
[2020-11-25 02:26:14,490 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 02:26:14,490 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3239 states and 3512 transitions.
[2020-11-25 02:26:14,494 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 02:26:14,495 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:26:14,495 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:26:14,496 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:26:14,496 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_OMAToken0 := false;
[L2]                 call_transfer_OMAToken0 := false;
[L2]     CALL        call main();
[L4541]              assume null == 0;
[L4542]  CALL        call this := FreshRefGenerator__success();
[L2373]              havoc newRef;
[L2374]              assume Alloc[newRef] == false;
[L2375]              Alloc[newRef] := true;
[L2376]              assume newRef != null;
[L4542]  RET         call this := FreshRefGenerator__success();
[L4543]              assume now >= 0;
[L4544]              assume DType[this] == OMAToken;
[L4545]              assume msgvalue_MSG == 0;
[L4546]              gas := gas - 53000;
[L4547]  CALL        call OMAToken_OMAToken(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L712]               havoc __exception;
[L713]               revert := false;
[L714]   COND FALSE  !(__exception)
[L742]   CALL        call OMAToken_OMAToken__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L2754]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2504]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2487]              assume msgsender_MSG != null;
[L2488]              Balance[this] := 0;
[L2489]              owner_Owned[this] := null;
[L2491]              owner_Owned[this] := msgsender_MSG;
[L2504]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]  COND FALSE  !(revert)
[L2754]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2755]  COND FALSE  !(revert)
[L2758]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L2572]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2504]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2487]              assume msgsender_MSG != null;
[L2488]              Balance[this] := 0;
[L2489]              owner_Owned[this] := null;
[L2491]              owner_Owned[this] := msgsender_MSG;
[L2504]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]  COND FALSE  !(revert)
[L2572]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2573]  COND FALSE  !(revert)
[L2576]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2552]              assume msgsender_MSG != null;
[L2553]              Balance[this] := 0;
[L2554]              paused_Pausable[this] := false;
[L2576]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2577]  COND FALSE  !(revert)
[L2758]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L2759]  COND FALSE  !(revert)
[L2762]  CALL        call OMAToken_OMAToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L2711]              assume msgsender_MSG != null;
[L2712]              Balance[this] := 0;
[L2713]              symbol_OMAToken[this] := -641797033;
[L2714]              name_OMAToken[this] := -641797033;
[L2715]              decimals_OMAToken[this] := 18;
[L2716]              totalSupply_OMAToken[this] := 0;
[L2717]              balanceOf_OMAToken[this] := zeroRefintArr();
[L2718]              sum_balanceOf0[this] := 0;
[L2719]              allowance_OMAToken[this] := zeroRefRefintArr();
[L2720]              sum_allowance1[this] := 0;
[L2721]              frozenAccount_OMAToken[this] := zeroRefboolArr();
[L2722]              frozenAmount_OMAToken[this] := zeroRefintArr();
[L2723]              sum_frozenAmount3[this] := 0;
[L2725]              __var_1 := decimals_OMAToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2726]              totalSupply_OMAToken[this] := nonlinearMul(initialSupply_s302, nonlinearPow(10, decimals_OMAToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2727]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_OMAToken[this][msgsender_MSG];
[L2728]              balanceOf_OMAToken[this][msgsender_MSG] := totalSupply_OMAToken[this];
[L2729]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_OMAToken[this][msgsender_MSG];
[L2730]              name_OMAToken[this] := tokenName_s302;
[L2731]              symbol_OMAToken[this] := tokenSymbol_s302;
[L2762]  RET         call OMAToken_OMAToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L2763]  COND FALSE  !(revert)
[L742]   RET         call OMAToken_OMAToken__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L743]               assume !revert && gas >= 0;
[L4547]  RET         call OMAToken_OMAToken(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L4548]              assume !revert && gas >= 0;
[L4551]  CALL        call CorralChoice_OMAToken(this);
[L4342]              havoc msgsender_MSG;
[L4343]              havoc msgvalue_MSG;
[L4344]              havoc choice;
[L4345]              havoc __ret_0_owner;
[L4346]              havoc newOwner_s127;
[L4347]              havoc __ret_0_paused;
[L4348]              havoc __ret_0_symbol;
[L4349]              havoc __ret_0_name;
[L4350]              havoc __ret_0_decimals;
[L4351]              havoc __ret_0_totalSupply;
[L4352]              havoc arg613_s0;
[L4353]              havoc __ret_0_balanceOf;
[L4354]              havoc arg614_s0;
[L4355]              havoc arg615_s0;
[L4356]              havoc __ret_0_allowance;
[L4357]              havoc arg616_s0;
[L4358]              havoc __ret_0_frozenAccount;
[L4359]              havoc arg617_s0;
[L4360]              havoc __ret_0_frozenAmount;
[L4361]              havoc initialSupply_s302;
[L4362]              havoc tokenName_s302;
[L4363]              havoc tokenSymbol_s302;
[L4364]              havoc _to_s401;
[L4365]              havoc _value_s401;
[L4366]              havoc success_s401;
[L4367]              havoc _from_s438;
[L4368]              havoc _to_s438;
[L4369]              havoc _value_s438;
[L4370]              havoc success_s438;
[L4371]              havoc _spender_s468;
[L4372]              havoc _value_s468;
[L4373]              havoc success_s468;
[L4374]              havoc _spender_s508;
[L4375]              havoc _value_s508;
[L4376]              havoc _extraData_s508;
[L4377]              havoc success_s508;
[L4378]              havoc _value_s544;
[L4379]              havoc success_s544;
[L4380]              havoc target_s565;
[L4381]              havoc freeze_s565;
[L4382]              havoc target_s592;
[L4383]              havoc _value_s592;
[L4384]              havoc target_s610;
[L4385]              havoc tmpNow;
[L4386]              havoc gas;
[L4387]              assume gas > 4000000 && gas <= 8000000;
[L4388]              tmpNow := now;
[L4389]              havoc now;
[L4390]              assume now > tmpNow;
[L4391]              assume msgsender_MSG != null;
[L4392]              assume DType[msgsender_MSG] != SafeMath;
[L4393]              assume DType[msgsender_MSG] != Owned;
[L4394]              assume DType[msgsender_MSG] != Pausable;
[L4395]              assume DType[msgsender_MSG] != tokenRecipient;
[L4396]              assume DType[msgsender_MSG] != OMAToken;
[L4397]              Alloc[msgsender_MSG] := true;
[L4398]  COND FALSE  !(choice == 21)
[L4404]  COND FALSE  !(choice == 20)
[L4410]  COND FALSE  !(choice == 19)
[L4416]  COND FALSE  !(choice == 18)
[L4422]  COND FALSE  !(choice == 17)
[L4428]  COND FALSE  !(choice == 16)
[L4434]  COND FALSE  !(choice == 15)
[L4440]  COND FALSE  !(choice == 14)
[L4446]  COND FALSE  !(choice == 13)
[L4452]  COND FALSE  !(choice == 12)
[L4458]  COND FALSE  !(choice == 11)
[L4464]  COND FALSE  !(choice == 10)
[L4470]  COND FALSE  !(choice == 9)
[L4476]  COND TRUE   choice == 8
[L4477]              gas := gas - 21000;
[L4478]  COND TRUE   gas >= 0
[L4479]              assume _value_s401 >= 0 && _value_s401 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4480]              assume msgvalue_MSG == 0;
[L4481]  CALL        call success_s401 := transfer~address~uint256_OMAToken(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s401 && _value_s401 <= balanceOf_OMAToken[this][msgsender_MSG]) && _value_s401 >= 0) && _value_s401 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_OMAToken[this][_to_s401] >= 0) && balanceOf_OMAToken[this][_to_s401] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_OMAToken[this][msgsender_MSG] >= 0) && balanceOf_OMAToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_OMAToken0 := true;
[L2]                 call_transfer_OMAToken0 := false;
[L2]                 revert := revert_hold;
[L782]               havoc __exception;
[L783]               revert := false;
[L784]   COND TRUE   __exception
[L785]               __tmp__Balance := Balance;
[L786]               __tmp__DType := DType;
[L787]               __tmp__Alloc := Alloc;
[L788]               __tmp__balance_ADDR := balance_ADDR;
[L789]               __tmp__M_Ref_int := M_Ref_int;
[L790]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L791]               __tmp__alloc_allowance_OMAToken_lvl0 := alloc_allowance_OMAToken_lvl0;
[L792]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L793]               __tmp__sum_allowance1 := sum_allowance1;
[L794]               __tmp__M_Ref_bool := M_Ref_bool;
[L795]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L796]               __tmp__sum_frozenAmount3 := sum_frozenAmount3;
[L797]               __tmp__Length := Length;
[L798]               __tmp__now := now;
[L799]               __tmp__owner_Owned := owner_Owned;
[L800]               __tmp__paused_Pausable := paused_Pausable;
[L801]               __tmp__symbol_OMAToken := symbol_OMAToken;
[L802]               __tmp__name_OMAToken := name_OMAToken;
[L803]               __tmp__decimals_OMAToken := decimals_OMAToken;
[L804]               __tmp__totalSupply_OMAToken := totalSupply_OMAToken;
[L805]               __tmp__balanceOf_OMAToken := balanceOf_OMAToken;
[L806]               __tmp__allowance_OMAToken := allowance_OMAToken;
[L807]               __tmp__frozenAccount_OMAToken := frozenAccount_OMAToken;
[L808]               __tmp__frozenAmount_OMAToken := frozenAmount_OMAToken;
[L809]   CALL        call success_s401 := transfer~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L2857]  CALL        call _transfer~address~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s401, _value_s401);
[L2773]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4040]  COND FALSE  !(!!__tmp__paused_Pausable[this])
[L2773]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L2774]  COND FALSE  !(revert)
[L2777]              __var_2 := null;
[L2778]  COND FALSE  !(!(_to_s382 != null))
[L2782]  COND FALSE  !(!!__tmp__frozenAccount_OMAToken[this][_from_s382])
[L2786]  COND TRUE   !!__tmp__frozenAccount_OMAToken[this][_to_s382]
[L2787]              revert := true;
[L2857]  RET         call _transfer~address~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s401, _value_s401);
[L2858]  COND TRUE   revert
[L809]   RET         call success_s401 := transfer~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L810]               assume revert || gas < 0;
[L4481]  RET         call success_s401 := transfer~address~uint256_OMAToken(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L4551]  RET         call CorralChoice_OMAToken(this);

Loop:
[L4551]  CALL        call CorralChoice_OMAToken(this);
[L4342]              havoc msgsender_MSG;
[L4343]              havoc msgvalue_MSG;
[L4344]              havoc choice;
[L4345]              havoc __ret_0_owner;
[L4346]              havoc newOwner_s127;
[L4347]              havoc __ret_0_paused;
[L4348]              havoc __ret_0_symbol;
[L4349]              havoc __ret_0_name;
[L4350]              havoc __ret_0_decimals;
[L4351]              havoc __ret_0_totalSupply;
[L4352]              havoc arg613_s0;
[L4353]              havoc __ret_0_balanceOf;
[L4354]              havoc arg614_s0;
[L4355]              havoc arg615_s0;
[L4356]              havoc __ret_0_allowance;
[L4357]              havoc arg616_s0;
[L4358]              havoc __ret_0_frozenAccount;
[L4359]              havoc arg617_s0;
[L4360]              havoc __ret_0_frozenAmount;
[L4361]              havoc initialSupply_s302;
[L4362]              havoc tokenName_s302;
[L4363]              havoc tokenSymbol_s302;
[L4364]              havoc _to_s401;
[L4365]              havoc _value_s401;
[L4366]              havoc success_s401;
[L4367]              havoc _from_s438;
[L4368]              havoc _to_s438;
[L4369]              havoc _value_s438;
[L4370]              havoc success_s438;
[L4371]              havoc _spender_s468;
[L4372]              havoc _value_s468;
[L4373]              havoc success_s468;
[L4374]              havoc _spender_s508;
[L4375]              havoc _value_s508;
[L4376]              havoc _extraData_s508;
[L4377]              havoc success_s508;
[L4378]              havoc _value_s544;
[L4379]              havoc success_s544;
[L4380]              havoc target_s565;
[L4381]              havoc freeze_s565;
[L4382]              havoc target_s592;
[L4383]              havoc _value_s592;
[L4384]              havoc target_s610;
[L4385]              havoc tmpNow;
[L4386]              havoc gas;
[L4387]              assume gas > 4000000 && gas <= 8000000;
[L4388]              tmpNow := now;
[L4389]              havoc now;
[L4390]              assume now > tmpNow;
[L4391]              assume msgsender_MSG != null;
[L4392]              assume DType[msgsender_MSG] != SafeMath;
[L4393]              assume DType[msgsender_MSG] != Owned;
[L4394]              assume DType[msgsender_MSG] != Pausable;
[L4395]              assume DType[msgsender_MSG] != tokenRecipient;
[L4396]              assume DType[msgsender_MSG] != OMAToken;
[L4397]              Alloc[msgsender_MSG] := true;
[L4398]  COND FALSE  !(choice == 21)
[L4404]  COND FALSE  !(choice == 20)
[L4410]  COND FALSE  !(choice == 19)
[L4416]  COND FALSE  !(choice == 18)
[L4422]  COND FALSE  !(choice == 17)
[L4428]  COND FALSE  !(choice == 16)
[L4434]  COND FALSE  !(choice == 15)
[L4440]  COND FALSE  !(choice == 14)
[L4446]  COND FALSE  !(choice == 13)
[L4452]  COND FALSE  !(choice == 12)
[L4458]  COND FALSE  !(choice == 11)
[L4464]  COND FALSE  !(choice == 10)
[L4470]  COND FALSE  !(choice == 9)
[L4476]  COND TRUE   choice == 8
[L4477]              gas := gas - 21000;
[L4478]  COND TRUE   gas >= 0
[L4479]              assume _value_s401 >= 0 && _value_s401 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4480]              assume msgvalue_MSG == 0;
[L4481]  CALL        call success_s401 := transfer~address~uint256_OMAToken(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s401 && _value_s401 <= balanceOf_OMAToken[this][msgsender_MSG]) && _value_s401 >= 0) && _value_s401 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_OMAToken[this][_to_s401] >= 0) && balanceOf_OMAToken[this][_to_s401] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_OMAToken[this][msgsender_MSG] >= 0) && balanceOf_OMAToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_OMAToken0 := true;
[L2]                 call_transfer_OMAToken0 := false;
[L2]                 revert := revert_hold;
[L782]               havoc __exception;
[L783]               revert := false;
[L784]   COND TRUE   __exception
[L785]               __tmp__Balance := Balance;
[L786]               __tmp__DType := DType;
[L787]               __tmp__Alloc := Alloc;
[L788]               __tmp__balance_ADDR := balance_ADDR;
[L789]               __tmp__M_Ref_int := M_Ref_int;
[L790]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L791]               __tmp__alloc_allowance_OMAToken_lvl0 := alloc_allowance_OMAToken_lvl0;
[L792]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L793]               __tmp__sum_allowance1 := sum_allowance1;
[L794]               __tmp__M_Ref_bool := M_Ref_bool;
[L795]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L796]               __tmp__sum_frozenAmount3 := sum_frozenAmount3;
[L797]               __tmp__Length := Length;
[L798]               __tmp__now := now;
[L799]               __tmp__owner_Owned := owner_Owned;
[L800]               __tmp__paused_Pausable := paused_Pausable;
[L801]               __tmp__symbol_OMAToken := symbol_OMAToken;
[L802]               __tmp__name_OMAToken := name_OMAToken;
[L803]               __tmp__decimals_OMAToken := decimals_OMAToken;
[L804]               __tmp__totalSupply_OMAToken := totalSupply_OMAToken;
[L805]               __tmp__balanceOf_OMAToken := balanceOf_OMAToken;
[L806]               __tmp__allowance_OMAToken := allowance_OMAToken;
[L807]               __tmp__frozenAccount_OMAToken := frozenAccount_OMAToken;
[L808]               __tmp__frozenAmount_OMAToken := frozenAmount_OMAToken;
[L809]   CALL        call success_s401 := transfer~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L2857]  CALL        call _transfer~address~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s401, _value_s401);
[L2773]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4040]  COND FALSE  !(!!__tmp__paused_Pausable[this])
[L2773]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L2774]  COND FALSE  !(revert)
[L2777]              __var_2 := null;
[L2778]  COND FALSE  !(!(_to_s382 != null))
[L2782]  COND FALSE  !(!!__tmp__frozenAccount_OMAToken[this][_from_s382])
[L2786]  COND TRUE   !!__tmp__frozenAccount_OMAToken[this][_to_s382]
[L2787]              revert := true;
[L2857]  RET         call _transfer~address~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s401, _value_s401);
[L2858]  COND TRUE   revert
[L809]   RET         call success_s401 := transfer~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L810]               assume revert || gas < 0;
[L4481]  RET         call success_s401 := transfer~address~uint256_OMAToken(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L4551]  RET         call CorralChoice_OMAToken(this);

[2020-11-25 02:26:14,499 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:26:14,499 INFO  L82        PathProgramCache]: Analyzing trace with hash -1359275478, now seen corresponding path program 1 times
[2020-11-25 02:26:14,500 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:26:14,510 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:26:14,581 INFO  L134       CoverageAnalysis]: Checked inductivity of 12 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 12 trivial. 0 not checked.
[2020-11-25 02:26:14,582 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:26:14,582 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 02:26:14,582 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:26:14,582 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 02:26:14,582 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=10, Invalid=20, Unknown=0, NotChecked=0, Total=30
[2020-11-25 02:26:14,582 INFO  L87              Difference]: Start difference. First operand 3239 states and 3512 transitions. cyclomatic complexity: 281 Second operand 6 states.
[2020-11-25 02:26:14,651 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:26:14,651 INFO  L93              Difference]: Finished difference Result 3272 states and 3549 transitions.
[2020-11-25 02:26:14,651 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 02:26:14,652 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3272 states and 3549 transitions.
[2020-11-25 02:26:14,657 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 02:26:14,663 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3272 states to 3272 states and 3549 transitions.
[2020-11-25 02:26:14,663 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 906
[2020-11-25 02:26:14,664 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 906
[2020-11-25 02:26:14,664 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3272 states and 3549 transitions.
[2020-11-25 02:26:14,666 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:26:14,666 INFO  L728         BuchiCegarLoop]: Abstraction has 3272 states and 3549 transitions.
[2020-11-25 02:26:14,669 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3272 states and 3549 transitions.
[2020-11-25 02:26:14,686 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3272 to 3239.
[2020-11-25 02:26:14,686 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3239 states.
[2020-11-25 02:26:14,689 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3239 states to 3239 states and 3512 transitions.
[2020-11-25 02:26:14,689 INFO  L751         BuchiCegarLoop]: Abstraction has 3239 states and 3512 transitions.
[2020-11-25 02:26:14,689 INFO  L631         BuchiCegarLoop]: Abstraction has 3239 states and 3512 transitions.
[2020-11-25 02:26:14,689 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 02:26:14,689 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3239 states and 3512 transitions.
[2020-11-25 02:26:14,692 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 02:26:14,692 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:26:14,692 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:26:14,693 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:26:14,693 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_OMAToken0 := false;
[L2]                 call_transfer_OMAToken0 := false;
[L2]     CALL        call main();
[L4541]              assume null == 0;
[L4542]  CALL        call this := FreshRefGenerator__success();
[L2373]              havoc newRef;
[L2374]              assume Alloc[newRef] == false;
[L2375]              Alloc[newRef] := true;
[L2376]              assume newRef != null;
[L4542]  RET         call this := FreshRefGenerator__success();
[L4543]              assume now >= 0;
[L4544]              assume DType[this] == OMAToken;
[L4545]              assume msgvalue_MSG == 0;
[L4546]              gas := gas - 53000;
[L4547]  CALL        call OMAToken_OMAToken(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L712]               havoc __exception;
[L713]               revert := false;
[L714]   COND FALSE  !(__exception)
[L742]   CALL        call OMAToken_OMAToken__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L2754]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2504]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2487]              assume msgsender_MSG != null;
[L2488]              Balance[this] := 0;
[L2489]              owner_Owned[this] := null;
[L2491]              owner_Owned[this] := msgsender_MSG;
[L2504]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]  COND FALSE  !(revert)
[L2754]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2755]  COND FALSE  !(revert)
[L2758]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L2572]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2504]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2487]              assume msgsender_MSG != null;
[L2488]              Balance[this] := 0;
[L2489]              owner_Owned[this] := null;
[L2491]              owner_Owned[this] := msgsender_MSG;
[L2504]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]  COND FALSE  !(revert)
[L2572]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2573]  COND FALSE  !(revert)
[L2576]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2552]              assume msgsender_MSG != null;
[L2553]              Balance[this] := 0;
[L2554]              paused_Pausable[this] := false;
[L2576]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2577]  COND FALSE  !(revert)
[L2758]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L2759]  COND FALSE  !(revert)
[L2762]  CALL        call OMAToken_OMAToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L2711]              assume msgsender_MSG != null;
[L2712]              Balance[this] := 0;
[L2713]              symbol_OMAToken[this] := -641797033;
[L2714]              name_OMAToken[this] := -641797033;
[L2715]              decimals_OMAToken[this] := 18;
[L2716]              totalSupply_OMAToken[this] := 0;
[L2717]              balanceOf_OMAToken[this] := zeroRefintArr();
[L2718]              sum_balanceOf0[this] := 0;
[L2719]              allowance_OMAToken[this] := zeroRefRefintArr();
[L2720]              sum_allowance1[this] := 0;
[L2721]              frozenAccount_OMAToken[this] := zeroRefboolArr();
[L2722]              frozenAmount_OMAToken[this] := zeroRefintArr();
[L2723]              sum_frozenAmount3[this] := 0;
[L2725]              __var_1 := decimals_OMAToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2726]              totalSupply_OMAToken[this] := nonlinearMul(initialSupply_s302, nonlinearPow(10, decimals_OMAToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2727]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_OMAToken[this][msgsender_MSG];
[L2728]              balanceOf_OMAToken[this][msgsender_MSG] := totalSupply_OMAToken[this];
[L2729]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_OMAToken[this][msgsender_MSG];
[L2730]              name_OMAToken[this] := tokenName_s302;
[L2731]              symbol_OMAToken[this] := tokenSymbol_s302;
[L2762]  RET         call OMAToken_OMAToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L2763]  COND FALSE  !(revert)
[L742]   RET         call OMAToken_OMAToken__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L743]               assume !revert && gas >= 0;
[L4547]  RET         call OMAToken_OMAToken(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L4548]              assume !revert && gas >= 0;
[L4551]  CALL        call CorralChoice_OMAToken(this);
[L4342]              havoc msgsender_MSG;
[L4343]              havoc msgvalue_MSG;
[L4344]              havoc choice;
[L4345]              havoc __ret_0_owner;
[L4346]              havoc newOwner_s127;
[L4347]              havoc __ret_0_paused;
[L4348]              havoc __ret_0_symbol;
[L4349]              havoc __ret_0_name;
[L4350]              havoc __ret_0_decimals;
[L4351]              havoc __ret_0_totalSupply;
[L4352]              havoc arg613_s0;
[L4353]              havoc __ret_0_balanceOf;
[L4354]              havoc arg614_s0;
[L4355]              havoc arg615_s0;
[L4356]              havoc __ret_0_allowance;
[L4357]              havoc arg616_s0;
[L4358]              havoc __ret_0_frozenAccount;
[L4359]              havoc arg617_s0;
[L4360]              havoc __ret_0_frozenAmount;
[L4361]              havoc initialSupply_s302;
[L4362]              havoc tokenName_s302;
[L4363]              havoc tokenSymbol_s302;
[L4364]              havoc _to_s401;
[L4365]              havoc _value_s401;
[L4366]              havoc success_s401;
[L4367]              havoc _from_s438;
[L4368]              havoc _to_s438;
[L4369]              havoc _value_s438;
[L4370]              havoc success_s438;
[L4371]              havoc _spender_s468;
[L4372]              havoc _value_s468;
[L4373]              havoc success_s468;
[L4374]              havoc _spender_s508;
[L4375]              havoc _value_s508;
[L4376]              havoc _extraData_s508;
[L4377]              havoc success_s508;
[L4378]              havoc _value_s544;
[L4379]              havoc success_s544;
[L4380]              havoc target_s565;
[L4381]              havoc freeze_s565;
[L4382]              havoc target_s592;
[L4383]              havoc _value_s592;
[L4384]              havoc target_s610;
[L4385]              havoc tmpNow;
[L4386]              havoc gas;
[L4387]              assume gas > 4000000 && gas <= 8000000;
[L4388]              tmpNow := now;
[L4389]              havoc now;
[L4390]              assume now > tmpNow;
[L4391]              assume msgsender_MSG != null;
[L4392]              assume DType[msgsender_MSG] != SafeMath;
[L4393]              assume DType[msgsender_MSG] != Owned;
[L4394]              assume DType[msgsender_MSG] != Pausable;
[L4395]              assume DType[msgsender_MSG] != tokenRecipient;
[L4396]              assume DType[msgsender_MSG] != OMAToken;
[L4397]              Alloc[msgsender_MSG] := true;
[L4398]  COND FALSE  !(choice == 21)
[L4404]  COND FALSE  !(choice == 20)
[L4410]  COND FALSE  !(choice == 19)
[L4416]  COND FALSE  !(choice == 18)
[L4422]  COND FALSE  !(choice == 17)
[L4428]  COND FALSE  !(choice == 16)
[L4434]  COND FALSE  !(choice == 15)
[L4440]  COND FALSE  !(choice == 14)
[L4446]  COND FALSE  !(choice == 13)
[L4452]  COND FALSE  !(choice == 12)
[L4458]  COND FALSE  !(choice == 11)
[L4464]  COND FALSE  !(choice == 10)
[L4470]  COND FALSE  !(choice == 9)
[L4476]  COND TRUE   choice == 8
[L4477]              gas := gas - 21000;
[L4478]  COND TRUE   gas >= 0
[L4479]              assume _value_s401 >= 0 && _value_s401 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4480]              assume msgvalue_MSG == 0;
[L4481]  CALL        call success_s401 := transfer~address~uint256_OMAToken(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s401 && _value_s401 <= balanceOf_OMAToken[this][msgsender_MSG]) && _value_s401 >= 0) && _value_s401 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_OMAToken[this][_to_s401] >= 0) && balanceOf_OMAToken[this][_to_s401] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_OMAToken[this][msgsender_MSG] >= 0) && balanceOf_OMAToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_OMAToken0 := true;
[L2]                 call_transfer_OMAToken0 := false;
[L2]                 revert := revert_hold;
[L782]               havoc __exception;
[L783]               revert := false;
[L784]   COND FALSE  !(__exception)
[L812]   CALL        call success_s401 := transfer~address~uint256_OMAToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L2867]  CALL        call _transfer~address~address~uint256_OMAToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s401, _value_s401);
[L2816]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4048]  COND FALSE  !(!!paused_Pausable[this])
[L2816]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2817]  COND FALSE  !(revert)
[L2820]              __var_2 := null;
[L2821]  COND FALSE  !(!(_to_s382 != null))
[L2825]  COND FALSE  !(!!frozenAccount_OMAToken[this][_from_s382])
[L2829]  COND FALSE  !(!!frozenAccount_OMAToken[this][_to_s382])
[L2833]  CALL        call amount_s382 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_OMAToken[this][_from_s382], _value_s382);
[L2454]              assert b_s68 <= a_s68;
[L2455]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2833]  RET         call amount_s382 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_OMAToken[this][_from_s382], _value_s382);
[L2834]  COND FALSE  !(revert)
[L2837]              amount_s382 := amount_s382;
[L2838]  COND FALSE  !(!(frozenAmount_OMAToken[this][_from_s382] == 0 || amount_s382 >= frozenAmount_OMAToken[this][_from_s382]))
[L2842]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_OMAToken[this][_from_s382];
[L2843]              balanceOf_OMAToken[this][_from_s382] := amount_s382;
[L2844]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_OMAToken[this][_from_s382];
[L2845]  CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_OMAToken[this][_to_s382], _value_s382);
[L2468]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2469]              assert c_s92 >= a_s92;
[L2470]              c_s92 := c_s92;
[L2845]  RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_OMAToken[this][_to_s382], _value_s382);
[L2846]  COND FALSE  !(revert)
[L2849]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_OMAToken[this][_to_s382];
[L2850]              balanceOf_OMAToken[this][_to_s382] := __var_3;
[L2851]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_OMAToken[this][_to_s382];
[L2852]              assert { :EventEmitted "Transfer_OMAToken" } true;
[L2867]  RET         call _transfer~address~address~uint256_OMAToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s401, _value_s401);
[L2868]  COND FALSE  !(revert)
[L2871]              success_s401 := true;
[L812]   RET         call success_s401 := transfer~address~uint256_OMAToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L813]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((((success_s401 == true && totalSupply_OMAToken[this] == old(totalSupply_OMAToken[this])) && balanceOf_OMAToken[this] == old(balanceOf_OMAToken[this])) && allowance_OMAToken[this] == old(allowance_OMAToken[this])) && symbol_OMAToken[this] == old(symbol_OMAToken[this])) && name_OMAToken[this] == old(name_OMAToken[this])) && decimals_OMAToken[this] == old(decimals_OMAToken[this])) && frozenAccount_OMAToken[this] == old(frozenAccount_OMAToken[this])) && frozenAmount_OMAToken[this] == old(frozenAmount_OMAToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && owner_Owned[this] == old(owner_Owned[this]));
[L2]                 revert := revert_hold;
[L4481]  RET         call success_s401 := transfer~address~uint256_OMAToken(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L4551]  RET         call CorralChoice_OMAToken(this);

Loop:
[L4551]  CALL        call CorralChoice_OMAToken(this);
[L4342]              havoc msgsender_MSG;
[L4343]              havoc msgvalue_MSG;
[L4344]              havoc choice;
[L4345]              havoc __ret_0_owner;
[L4346]              havoc newOwner_s127;
[L4347]              havoc __ret_0_paused;
[L4348]              havoc __ret_0_symbol;
[L4349]              havoc __ret_0_name;
[L4350]              havoc __ret_0_decimals;
[L4351]              havoc __ret_0_totalSupply;
[L4352]              havoc arg613_s0;
[L4353]              havoc __ret_0_balanceOf;
[L4354]              havoc arg614_s0;
[L4355]              havoc arg615_s0;
[L4356]              havoc __ret_0_allowance;
[L4357]              havoc arg616_s0;
[L4358]              havoc __ret_0_frozenAccount;
[L4359]              havoc arg617_s0;
[L4360]              havoc __ret_0_frozenAmount;
[L4361]              havoc initialSupply_s302;
[L4362]              havoc tokenName_s302;
[L4363]              havoc tokenSymbol_s302;
[L4364]              havoc _to_s401;
[L4365]              havoc _value_s401;
[L4366]              havoc success_s401;
[L4367]              havoc _from_s438;
[L4368]              havoc _to_s438;
[L4369]              havoc _value_s438;
[L4370]              havoc success_s438;
[L4371]              havoc _spender_s468;
[L4372]              havoc _value_s468;
[L4373]              havoc success_s468;
[L4374]              havoc _spender_s508;
[L4375]              havoc _value_s508;
[L4376]              havoc _extraData_s508;
[L4377]              havoc success_s508;
[L4378]              havoc _value_s544;
[L4379]              havoc success_s544;
[L4380]              havoc target_s565;
[L4381]              havoc freeze_s565;
[L4382]              havoc target_s592;
[L4383]              havoc _value_s592;
[L4384]              havoc target_s610;
[L4385]              havoc tmpNow;
[L4386]              havoc gas;
[L4387]              assume gas > 4000000 && gas <= 8000000;
[L4388]              tmpNow := now;
[L4389]              havoc now;
[L4390]              assume now > tmpNow;
[L4391]              assume msgsender_MSG != null;
[L4392]              assume DType[msgsender_MSG] != SafeMath;
[L4393]              assume DType[msgsender_MSG] != Owned;
[L4394]              assume DType[msgsender_MSG] != Pausable;
[L4395]              assume DType[msgsender_MSG] != tokenRecipient;
[L4396]              assume DType[msgsender_MSG] != OMAToken;
[L4397]              Alloc[msgsender_MSG] := true;
[L4398]  COND FALSE  !(choice == 21)
[L4404]  COND FALSE  !(choice == 20)
[L4410]  COND FALSE  !(choice == 19)
[L4416]  COND FALSE  !(choice == 18)
[L4422]  COND FALSE  !(choice == 17)
[L4428]  COND FALSE  !(choice == 16)
[L4434]  COND FALSE  !(choice == 15)
[L4440]  COND FALSE  !(choice == 14)
[L4446]  COND FALSE  !(choice == 13)
[L4452]  COND FALSE  !(choice == 12)
[L4458]  COND FALSE  !(choice == 11)
[L4464]  COND FALSE  !(choice == 10)
[L4470]  COND FALSE  !(choice == 9)
[L4476]  COND TRUE   choice == 8
[L4477]              gas := gas - 21000;
[L4478]  COND TRUE   gas >= 0
[L4479]              assume _value_s401 >= 0 && _value_s401 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4480]              assume msgvalue_MSG == 0;
[L4481]  CALL        call success_s401 := transfer~address~uint256_OMAToken(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s401 && _value_s401 <= balanceOf_OMAToken[this][msgsender_MSG]) && _value_s401 >= 0) && _value_s401 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_OMAToken[this][_to_s401] >= 0) && balanceOf_OMAToken[this][_to_s401] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_OMAToken[this][msgsender_MSG] >= 0) && balanceOf_OMAToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_OMAToken0 := true;
[L2]                 call_transfer_OMAToken0 := false;
[L2]                 revert := revert_hold;
[L782]               havoc __exception;
[L783]               revert := false;
[L784]   COND FALSE  !(__exception)
[L812]   CALL        call success_s401 := transfer~address~uint256_OMAToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L2867]  CALL        call _transfer~address~address~uint256_OMAToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s401, _value_s401);
[L2816]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4048]  COND FALSE  !(!!paused_Pausable[this])
[L2816]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2817]  COND FALSE  !(revert)
[L2820]              __var_2 := null;
[L2821]  COND FALSE  !(!(_to_s382 != null))
[L2825]  COND FALSE  !(!!frozenAccount_OMAToken[this][_from_s382])
[L2829]  COND FALSE  !(!!frozenAccount_OMAToken[this][_to_s382])
[L2833]  CALL        call amount_s382 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_OMAToken[this][_from_s382], _value_s382);
[L2454]              assert b_s68 <= a_s68;
[L2455]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2833]  RET         call amount_s382 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_OMAToken[this][_from_s382], _value_s382);
[L2834]  COND FALSE  !(revert)
[L2837]              amount_s382 := amount_s382;
[L2838]  COND FALSE  !(!(frozenAmount_OMAToken[this][_from_s382] == 0 || amount_s382 >= frozenAmount_OMAToken[this][_from_s382]))
[L2842]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_OMAToken[this][_from_s382];
[L2843]              balanceOf_OMAToken[this][_from_s382] := amount_s382;
[L2844]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_OMAToken[this][_from_s382];
[L2845]  CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_OMAToken[this][_to_s382], _value_s382);
[L2468]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2469]              assert c_s92 >= a_s92;
[L2470]              c_s92 := c_s92;
[L2845]  RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_OMAToken[this][_to_s382], _value_s382);
[L2846]  COND FALSE  !(revert)
[L2849]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_OMAToken[this][_to_s382];
[L2850]              balanceOf_OMAToken[this][_to_s382] := __var_3;
[L2851]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_OMAToken[this][_to_s382];
[L2852]              assert { :EventEmitted "Transfer_OMAToken" } true;
[L2867]  RET         call _transfer~address~address~uint256_OMAToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s401, _value_s401);
[L2868]  COND FALSE  !(revert)
[L2871]              success_s401 := true;
[L812]   RET         call success_s401 := transfer~address~uint256_OMAToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L813]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((((success_s401 == true && totalSupply_OMAToken[this] == old(totalSupply_OMAToken[this])) && balanceOf_OMAToken[this] == old(balanceOf_OMAToken[this])) && allowance_OMAToken[this] == old(allowance_OMAToken[this])) && symbol_OMAToken[this] == old(symbol_OMAToken[this])) && name_OMAToken[this] == old(name_OMAToken[this])) && decimals_OMAToken[this] == old(decimals_OMAToken[this])) && frozenAccount_OMAToken[this] == old(frozenAccount_OMAToken[this])) && frozenAmount_OMAToken[this] == old(frozenAmount_OMAToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && owner_Owned[this] == old(owner_Owned[this]));
[L2]                 revert := revert_hold;
[L4481]  RET         call success_s401 := transfer~address~uint256_OMAToken(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L4551]  RET         call CorralChoice_OMAToken(this);

[2020-11-25 02:26:14,697 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:26:14,697 INFO  L82        PathProgramCache]: Analyzing trace with hash -431466045, now seen corresponding path program 1 times
[2020-11-25 02:26:14,697 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:26:14,742 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:26:15,291 INFO  L134       CoverageAnalysis]: Checked inductivity of 12 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 12 trivial. 0 not checked.
[2020-11-25 02:26:15,291 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:26:15,291 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [25] imperfect sequences [] total 25
[2020-11-25 02:26:15,291 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:26:15,291 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 26 interpolants.
[2020-11-25 02:26:15,292 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=71, Invalid=579, Unknown=0, NotChecked=0, Total=650
[2020-11-25 02:26:15,292 INFO  L87              Difference]: Start difference. First operand 3239 states and 3512 transitions. cyclomatic complexity: 281 Second operand 26 states.
[2020-11-25 02:26:20,209 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:26:20,209 INFO  L93              Difference]: Finished difference Result 3349 states and 3811 transitions.
[2020-11-25 02:26:20,209 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 27 states. 
[2020-11-25 02:26:20,209 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3349 states and 3811 transitions.
[2020-11-25 02:26:20,216 INFO  L131   ngComponentsAnalysis]: Automaton has 14 accepting balls. 28
[2020-11-25 02:26:20,225 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3349 states to 3349 states and 3811 transitions.
[2020-11-25 02:26:20,225 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 944
[2020-11-25 02:26:20,225 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 944
[2020-11-25 02:26:20,225 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3349 states and 3811 transitions.
[2020-11-25 02:26:20,228 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:26:20,228 INFO  L728         BuchiCegarLoop]: Abstraction has 3349 states and 3811 transitions.
[2020-11-25 02:26:20,230 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3349 states and 3811 transitions.
[2020-11-25 02:26:20,251 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3349 to 3306.
[2020-11-25 02:26:20,251 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3306 states.
[2020-11-25 02:26:20,255 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3306 states to 3306 states and 3646 transitions.
[2020-11-25 02:26:20,255 INFO  L751         BuchiCegarLoop]: Abstraction has 3306 states and 3646 transitions.
[2020-11-25 02:26:20,255 INFO  L631         BuchiCegarLoop]: Abstraction has 3306 states and 3646 transitions.
[2020-11-25 02:26:20,255 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 02:26:20,255 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3306 states and 3646 transitions.
[2020-11-25 02:26:20,258 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 16
[2020-11-25 02:26:20,258 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:26:20,259 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:26:20,260 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:26:20,260 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_OMAToken0 := false;
[L2]                 call_transfer_OMAToken0 := false;
[L2]     CALL        call main();
[L4541]              assume null == 0;
[L4542]  CALL        call this := FreshRefGenerator__success();
[L2373]              havoc newRef;
[L2374]              assume Alloc[newRef] == false;
[L2375]              Alloc[newRef] := true;
[L2376]              assume newRef != null;
[L4542]  RET         call this := FreshRefGenerator__success();
[L4543]              assume now >= 0;
[L4544]              assume DType[this] == OMAToken;
[L4545]              assume msgvalue_MSG == 0;
[L4546]              gas := gas - 53000;
[L4547]  CALL        call OMAToken_OMAToken(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L712]               havoc __exception;
[L713]               revert := false;
[L714]   COND FALSE  !(__exception)
[L742]   CALL        call OMAToken_OMAToken__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L2754]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2504]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2487]              assume msgsender_MSG != null;
[L2488]              Balance[this] := 0;
[L2489]              owner_Owned[this] := null;
[L2491]              owner_Owned[this] := msgsender_MSG;
[L2504]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]  COND FALSE  !(revert)
[L2754]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2755]  COND FALSE  !(revert)
[L2758]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L2572]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2504]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2487]              assume msgsender_MSG != null;
[L2488]              Balance[this] := 0;
[L2489]              owner_Owned[this] := null;
[L2491]              owner_Owned[this] := msgsender_MSG;
[L2504]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]  COND FALSE  !(revert)
[L2572]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2573]  COND FALSE  !(revert)
[L2576]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2552]              assume msgsender_MSG != null;
[L2553]              Balance[this] := 0;
[L2554]              paused_Pausable[this] := false;
[L2576]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2577]  COND FALSE  !(revert)
[L2758]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L2759]  COND FALSE  !(revert)
[L2762]  CALL        call OMAToken_OMAToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L2711]              assume msgsender_MSG != null;
[L2712]              Balance[this] := 0;
[L2713]              symbol_OMAToken[this] := -641797033;
[L2714]              name_OMAToken[this] := -641797033;
[L2715]              decimals_OMAToken[this] := 18;
[L2716]              totalSupply_OMAToken[this] := 0;
[L2717]              balanceOf_OMAToken[this] := zeroRefintArr();
[L2718]              sum_balanceOf0[this] := 0;
[L2719]              allowance_OMAToken[this] := zeroRefRefintArr();
[L2720]              sum_allowance1[this] := 0;
[L2721]              frozenAccount_OMAToken[this] := zeroRefboolArr();
[L2722]              frozenAmount_OMAToken[this] := zeroRefintArr();
[L2723]              sum_frozenAmount3[this] := 0;
[L2725]              __var_1 := decimals_OMAToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2726]              totalSupply_OMAToken[this] := nonlinearMul(initialSupply_s302, nonlinearPow(10, decimals_OMAToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2727]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_OMAToken[this][msgsender_MSG];
[L2728]              balanceOf_OMAToken[this][msgsender_MSG] := totalSupply_OMAToken[this];
[L2729]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_OMAToken[this][msgsender_MSG];
[L2730]              name_OMAToken[this] := tokenName_s302;
[L2731]              symbol_OMAToken[this] := tokenSymbol_s302;
[L2762]  RET         call OMAToken_OMAToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L2763]  COND FALSE  !(revert)
[L742]   RET         call OMAToken_OMAToken__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L743]               assume !revert && gas >= 0;
[L4547]  RET         call OMAToken_OMAToken(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L4548]              assume !revert && gas >= 0;
[L4551]  CALL        call CorralChoice_OMAToken(this);
[L4342]              havoc msgsender_MSG;
[L4343]              havoc msgvalue_MSG;
[L4344]              havoc choice;
[L4345]              havoc __ret_0_owner;
[L4346]              havoc newOwner_s127;
[L4347]              havoc __ret_0_paused;
[L4348]              havoc __ret_0_symbol;
[L4349]              havoc __ret_0_name;
[L4350]              havoc __ret_0_decimals;
[L4351]              havoc __ret_0_totalSupply;
[L4352]              havoc arg613_s0;
[L4353]              havoc __ret_0_balanceOf;
[L4354]              havoc arg614_s0;
[L4355]              havoc arg615_s0;
[L4356]              havoc __ret_0_allowance;
[L4357]              havoc arg616_s0;
[L4358]              havoc __ret_0_frozenAccount;
[L4359]              havoc arg617_s0;
[L4360]              havoc __ret_0_frozenAmount;
[L4361]              havoc initialSupply_s302;
[L4362]              havoc tokenName_s302;
[L4363]              havoc tokenSymbol_s302;
[L4364]              havoc _to_s401;
[L4365]              havoc _value_s401;
[L4366]              havoc success_s401;
[L4367]              havoc _from_s438;
[L4368]              havoc _to_s438;
[L4369]              havoc _value_s438;
[L4370]              havoc success_s438;
[L4371]              havoc _spender_s468;
[L4372]              havoc _value_s468;
[L4373]              havoc success_s468;
[L4374]              havoc _spender_s508;
[L4375]              havoc _value_s508;
[L4376]              havoc _extraData_s508;
[L4377]              havoc success_s508;
[L4378]              havoc _value_s544;
[L4379]              havoc success_s544;
[L4380]              havoc target_s565;
[L4381]              havoc freeze_s565;
[L4382]              havoc target_s592;
[L4383]              havoc _value_s592;
[L4384]              havoc target_s610;
[L4385]              havoc tmpNow;
[L4386]              havoc gas;
[L4387]              assume gas > 4000000 && gas <= 8000000;
[L4388]              tmpNow := now;
[L4389]              havoc now;
[L4390]              assume now > tmpNow;
[L4391]              assume msgsender_MSG != null;
[L4392]              assume DType[msgsender_MSG] != SafeMath;
[L4393]              assume DType[msgsender_MSG] != Owned;
[L4394]              assume DType[msgsender_MSG] != Pausable;
[L4395]              assume DType[msgsender_MSG] != tokenRecipient;
[L4396]              assume DType[msgsender_MSG] != OMAToken;
[L4397]              Alloc[msgsender_MSG] := true;
[L4398]  COND FALSE  !(choice == 21)
[L4404]  COND FALSE  !(choice == 20)
[L4410]  COND FALSE  !(choice == 19)
[L4416]  COND FALSE  !(choice == 18)
[L4422]  COND FALSE  !(choice == 17)
[L4428]  COND FALSE  !(choice == 16)
[L4434]  COND FALSE  !(choice == 15)
[L4440]  COND FALSE  !(choice == 14)
[L4446]  COND FALSE  !(choice == 13)
[L4452]  COND FALSE  !(choice == 12)
[L4458]  COND FALSE  !(choice == 11)
[L4464]  COND FALSE  !(choice == 10)
[L4470]  COND FALSE  !(choice == 9)
[L4476]  COND TRUE   choice == 8
[L4477]              gas := gas - 21000;
[L4478]  COND TRUE   gas >= 0
[L4479]              assume _value_s401 >= 0 && _value_s401 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4480]              assume msgvalue_MSG == 0;
[L4481]  CALL        call success_s401 := transfer~address~uint256_OMAToken(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s401 && _value_s401 <= balanceOf_OMAToken[this][msgsender_MSG]) && _value_s401 >= 0) && _value_s401 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_OMAToken[this][_to_s401] >= 0) && balanceOf_OMAToken[this][_to_s401] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_OMAToken[this][msgsender_MSG] >= 0) && balanceOf_OMAToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_OMAToken0 := true;
[L2]                 call_transfer_OMAToken0 := false;
[L2]                 revert := revert_hold;
[L782]               havoc __exception;
[L783]               revert := false;
[L784]   COND TRUE   __exception
[L785]               __tmp__Balance := Balance;
[L786]               __tmp__DType := DType;
[L787]               __tmp__Alloc := Alloc;
[L788]               __tmp__balance_ADDR := balance_ADDR;
[L789]               __tmp__M_Ref_int := M_Ref_int;
[L790]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L791]               __tmp__alloc_allowance_OMAToken_lvl0 := alloc_allowance_OMAToken_lvl0;
[L792]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L793]               __tmp__sum_allowance1 := sum_allowance1;
[L794]               __tmp__M_Ref_bool := M_Ref_bool;
[L795]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L796]               __tmp__sum_frozenAmount3 := sum_frozenAmount3;
[L797]               __tmp__Length := Length;
[L798]               __tmp__now := now;
[L799]               __tmp__owner_Owned := owner_Owned;
[L800]               __tmp__paused_Pausable := paused_Pausable;
[L801]               __tmp__symbol_OMAToken := symbol_OMAToken;
[L802]               __tmp__name_OMAToken := name_OMAToken;
[L803]               __tmp__decimals_OMAToken := decimals_OMAToken;
[L804]               __tmp__totalSupply_OMAToken := totalSupply_OMAToken;
[L805]               __tmp__balanceOf_OMAToken := balanceOf_OMAToken;
[L806]               __tmp__allowance_OMAToken := allowance_OMAToken;
[L807]               __tmp__frozenAccount_OMAToken := frozenAccount_OMAToken;
[L808]               __tmp__frozenAmount_OMAToken := frozenAmount_OMAToken;
[L809]   CALL        call success_s401 := transfer~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L2857]  CALL        call _transfer~address~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s401, _value_s401);
[L2773]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4040]  COND FALSE  !(!!__tmp__paused_Pausable[this])
[L2773]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L2774]  COND FALSE  !(revert)
[L2777]              __var_2 := null;
[L2778]  COND FALSE  !(!(_to_s382 != null))
[L2782]  COND FALSE  !(!!__tmp__frozenAccount_OMAToken[this][_from_s382])
[L2786]  COND FALSE  !(!!__tmp__frozenAccount_OMAToken[this][_to_s382])
[L2790]  CALL        call amount_s382 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balanceOf_OMAToken[this][_from_s382], _value_s382);
[L2448]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2790]  RET         call amount_s382 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balanceOf_OMAToken[this][_from_s382], _value_s382);
[L2791]  COND FALSE  !(revert)
[L2794]              amount_s382 := amount_s382;
[L2795]  COND TRUE   !(__tmp__frozenAmount_OMAToken[this][_from_s382] == 0 || amount_s382 >= __tmp__frozenAmount_OMAToken[this][_from_s382])
[L2796]              revert := true;
[L2857]  RET         call _transfer~address~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s401, _value_s401);
[L2858]  COND TRUE   revert
[L809]   RET         call success_s401 := transfer~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L810]               assume revert || gas < 0;
[L4481]  RET         call success_s401 := transfer~address~uint256_OMAToken(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L4551]  RET         call CorralChoice_OMAToken(this);

Loop:
[L4551]  CALL        call CorralChoice_OMAToken(this);
[L4342]              havoc msgsender_MSG;
[L4343]              havoc msgvalue_MSG;
[L4344]              havoc choice;
[L4345]              havoc __ret_0_owner;
[L4346]              havoc newOwner_s127;
[L4347]              havoc __ret_0_paused;
[L4348]              havoc __ret_0_symbol;
[L4349]              havoc __ret_0_name;
[L4350]              havoc __ret_0_decimals;
[L4351]              havoc __ret_0_totalSupply;
[L4352]              havoc arg613_s0;
[L4353]              havoc __ret_0_balanceOf;
[L4354]              havoc arg614_s0;
[L4355]              havoc arg615_s0;
[L4356]              havoc __ret_0_allowance;
[L4357]              havoc arg616_s0;
[L4358]              havoc __ret_0_frozenAccount;
[L4359]              havoc arg617_s0;
[L4360]              havoc __ret_0_frozenAmount;
[L4361]              havoc initialSupply_s302;
[L4362]              havoc tokenName_s302;
[L4363]              havoc tokenSymbol_s302;
[L4364]              havoc _to_s401;
[L4365]              havoc _value_s401;
[L4366]              havoc success_s401;
[L4367]              havoc _from_s438;
[L4368]              havoc _to_s438;
[L4369]              havoc _value_s438;
[L4370]              havoc success_s438;
[L4371]              havoc _spender_s468;
[L4372]              havoc _value_s468;
[L4373]              havoc success_s468;
[L4374]              havoc _spender_s508;
[L4375]              havoc _value_s508;
[L4376]              havoc _extraData_s508;
[L4377]              havoc success_s508;
[L4378]              havoc _value_s544;
[L4379]              havoc success_s544;
[L4380]              havoc target_s565;
[L4381]              havoc freeze_s565;
[L4382]              havoc target_s592;
[L4383]              havoc _value_s592;
[L4384]              havoc target_s610;
[L4385]              havoc tmpNow;
[L4386]              havoc gas;
[L4387]              assume gas > 4000000 && gas <= 8000000;
[L4388]              tmpNow := now;
[L4389]              havoc now;
[L4390]              assume now > tmpNow;
[L4391]              assume msgsender_MSG != null;
[L4392]              assume DType[msgsender_MSG] != SafeMath;
[L4393]              assume DType[msgsender_MSG] != Owned;
[L4394]              assume DType[msgsender_MSG] != Pausable;
[L4395]              assume DType[msgsender_MSG] != tokenRecipient;
[L4396]              assume DType[msgsender_MSG] != OMAToken;
[L4397]              Alloc[msgsender_MSG] := true;
[L4398]  COND FALSE  !(choice == 21)
[L4404]  COND FALSE  !(choice == 20)
[L4410]  COND FALSE  !(choice == 19)
[L4416]  COND FALSE  !(choice == 18)
[L4422]  COND FALSE  !(choice == 17)
[L4428]  COND FALSE  !(choice == 16)
[L4434]  COND FALSE  !(choice == 15)
[L4440]  COND FALSE  !(choice == 14)
[L4446]  COND FALSE  !(choice == 13)
[L4452]  COND FALSE  !(choice == 12)
[L4458]  COND FALSE  !(choice == 11)
[L4464]  COND FALSE  !(choice == 10)
[L4470]  COND FALSE  !(choice == 9)
[L4476]  COND TRUE   choice == 8
[L4477]              gas := gas - 21000;
[L4478]  COND TRUE   gas >= 0
[L4479]              assume _value_s401 >= 0 && _value_s401 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4480]              assume msgvalue_MSG == 0;
[L4481]  CALL        call success_s401 := transfer~address~uint256_OMAToken(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s401 && _value_s401 <= balanceOf_OMAToken[this][msgsender_MSG]) && _value_s401 >= 0) && _value_s401 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_OMAToken[this][_to_s401] >= 0) && balanceOf_OMAToken[this][_to_s401] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_OMAToken[this][msgsender_MSG] >= 0) && balanceOf_OMAToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_OMAToken0 := true;
[L2]                 call_transfer_OMAToken0 := false;
[L2]                 revert := revert_hold;
[L782]               havoc __exception;
[L783]               revert := false;
[L784]   COND TRUE   __exception
[L785]               __tmp__Balance := Balance;
[L786]               __tmp__DType := DType;
[L787]               __tmp__Alloc := Alloc;
[L788]               __tmp__balance_ADDR := balance_ADDR;
[L789]               __tmp__M_Ref_int := M_Ref_int;
[L790]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L791]               __tmp__alloc_allowance_OMAToken_lvl0 := alloc_allowance_OMAToken_lvl0;
[L792]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L793]               __tmp__sum_allowance1 := sum_allowance1;
[L794]               __tmp__M_Ref_bool := M_Ref_bool;
[L795]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L796]               __tmp__sum_frozenAmount3 := sum_frozenAmount3;
[L797]               __tmp__Length := Length;
[L798]               __tmp__now := now;
[L799]               __tmp__owner_Owned := owner_Owned;
[L800]               __tmp__paused_Pausable := paused_Pausable;
[L801]               __tmp__symbol_OMAToken := symbol_OMAToken;
[L802]               __tmp__name_OMAToken := name_OMAToken;
[L803]               __tmp__decimals_OMAToken := decimals_OMAToken;
[L804]               __tmp__totalSupply_OMAToken := totalSupply_OMAToken;
[L805]               __tmp__balanceOf_OMAToken := balanceOf_OMAToken;
[L806]               __tmp__allowance_OMAToken := allowance_OMAToken;
[L807]               __tmp__frozenAccount_OMAToken := frozenAccount_OMAToken;
[L808]               __tmp__frozenAmount_OMAToken := frozenAmount_OMAToken;
[L809]   CALL        call success_s401 := transfer~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L2857]  CALL        call _transfer~address~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s401, _value_s401);
[L2773]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4040]  COND FALSE  !(!!__tmp__paused_Pausable[this])
[L2773]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L2774]  COND FALSE  !(revert)
[L2777]              __var_2 := null;
[L2778]  COND FALSE  !(!(_to_s382 != null))
[L2782]  COND FALSE  !(!!__tmp__frozenAccount_OMAToken[this][_from_s382])
[L2786]  COND FALSE  !(!!__tmp__frozenAccount_OMAToken[this][_to_s382])
[L2790]  CALL        call amount_s382 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balanceOf_OMAToken[this][_from_s382], _value_s382);
[L2448]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2790]  RET         call amount_s382 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balanceOf_OMAToken[this][_from_s382], _value_s382);
[L2791]  COND FALSE  !(revert)
[L2794]              amount_s382 := amount_s382;
[L2795]  COND TRUE   !(__tmp__frozenAmount_OMAToken[this][_from_s382] == 0 || amount_s382 >= __tmp__frozenAmount_OMAToken[this][_from_s382])
[L2796]              revert := true;
[L2857]  RET         call _transfer~address~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s401, _value_s401);
[L2858]  COND TRUE   revert
[L809]   RET         call success_s401 := transfer~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L810]               assume revert || gas < 0;
[L4481]  RET         call success_s401 := transfer~address~uint256_OMAToken(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L4551]  RET         call CorralChoice_OMAToken(this);

[2020-11-25 02:26:20,262 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:26:20,263 INFO  L82        PathProgramCache]: Analyzing trace with hash 2114571412, now seen corresponding path program 1 times
[2020-11-25 02:26:20,263 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:26:20,271 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:26:20,324 INFO  L134       CoverageAnalysis]: Checked inductivity of 12 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 12 trivial. 0 not checked.
[2020-11-25 02:26:20,324 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:26:20,324 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [11] imperfect sequences [] total 11
[2020-11-25 02:26:20,325 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:26:20,325 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-25 02:26:20,325 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=111, Unknown=0, NotChecked=0, Total=132
[2020-11-25 02:26:20,325 INFO  L87              Difference]: Start difference. First operand 3306 states and 3646 transitions. cyclomatic complexity: 356 Second operand 12 states.
[2020-11-25 02:26:22,071 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:26:22,071 INFO  L93              Difference]: Finished difference Result 5718 states and 6677 transitions.
[2020-11-25 02:26:22,071 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-11-25 02:26:22,071 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5718 states and 6677 transitions.
[2020-11-25 02:26:22,086 INFO  L131   ngComponentsAnalysis]: Automaton has 13 accepting balls. 52
[2020-11-25 02:26:22,103 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5718 states to 5718 states and 6677 transitions.
[2020-11-25 02:26:22,103 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1591
[2020-11-25 02:26:22,104 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1591
[2020-11-25 02:26:22,104 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5718 states and 6677 transitions.
[2020-11-25 02:26:22,108 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:26:22,108 INFO  L728         BuchiCegarLoop]: Abstraction has 5718 states and 6677 transitions.
[2020-11-25 02:26:22,111 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5718 states and 6677 transitions.
[2020-11-25 02:26:22,148 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5718 to 4636.
[2020-11-25 02:26:22,148 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4636 states.
[2020-11-25 02:26:22,155 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4636 states to 4636 states and 5545 transitions.
[2020-11-25 02:26:22,155 INFO  L751         BuchiCegarLoop]: Abstraction has 4636 states and 5545 transitions.
[2020-11-25 02:26:22,155 INFO  L631         BuchiCegarLoop]: Abstraction has 4636 states and 5545 transitions.
[2020-11-25 02:26:22,155 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 02:26:22,156 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4636 states and 5545 transitions.
[2020-11-25 02:26:22,161 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 48
[2020-11-25 02:26:22,161 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:26:22,161 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:26:22,162 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:26:22,162 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_OMAToken0 := false;
[L2]                 call_transfer_OMAToken0 := false;
[L2]     CALL        call main();
[L4541]              assume null == 0;
[L4542]  CALL        call this := FreshRefGenerator__success();
[L2373]              havoc newRef;
[L2374]              assume Alloc[newRef] == false;
[L2375]              Alloc[newRef] := true;
[L2376]              assume newRef != null;
[L4542]  RET         call this := FreshRefGenerator__success();
[L4543]              assume now >= 0;
[L4544]              assume DType[this] == OMAToken;
[L4545]              assume msgvalue_MSG == 0;
[L4546]              gas := gas - 53000;
[L4547]  CALL        call OMAToken_OMAToken(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L712]               havoc __exception;
[L713]               revert := false;
[L714]   COND FALSE  !(__exception)
[L742]   CALL        call OMAToken_OMAToken__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L2754]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2504]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2487]              assume msgsender_MSG != null;
[L2488]              Balance[this] := 0;
[L2489]              owner_Owned[this] := null;
[L2491]              owner_Owned[this] := msgsender_MSG;
[L2504]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]  COND FALSE  !(revert)
[L2754]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2755]  COND FALSE  !(revert)
[L2758]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L2572]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2504]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2487]              assume msgsender_MSG != null;
[L2488]              Balance[this] := 0;
[L2489]              owner_Owned[this] := null;
[L2491]              owner_Owned[this] := msgsender_MSG;
[L2504]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]  COND FALSE  !(revert)
[L2572]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2573]  COND FALSE  !(revert)
[L2576]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2552]              assume msgsender_MSG != null;
[L2553]              Balance[this] := 0;
[L2554]              paused_Pausable[this] := false;
[L2576]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2577]  COND FALSE  !(revert)
[L2758]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L2759]  COND FALSE  !(revert)
[L2762]  CALL        call OMAToken_OMAToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L2711]              assume msgsender_MSG != null;
[L2712]              Balance[this] := 0;
[L2713]              symbol_OMAToken[this] := -641797033;
[L2714]              name_OMAToken[this] := -641797033;
[L2715]              decimals_OMAToken[this] := 18;
[L2716]              totalSupply_OMAToken[this] := 0;
[L2717]              balanceOf_OMAToken[this] := zeroRefintArr();
[L2718]              sum_balanceOf0[this] := 0;
[L2719]              allowance_OMAToken[this] := zeroRefRefintArr();
[L2720]              sum_allowance1[this] := 0;
[L2721]              frozenAccount_OMAToken[this] := zeroRefboolArr();
[L2722]              frozenAmount_OMAToken[this] := zeroRefintArr();
[L2723]              sum_frozenAmount3[this] := 0;
[L2725]              __var_1 := decimals_OMAToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2726]              totalSupply_OMAToken[this] := nonlinearMul(initialSupply_s302, nonlinearPow(10, decimals_OMAToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2727]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_OMAToken[this][msgsender_MSG];
[L2728]              balanceOf_OMAToken[this][msgsender_MSG] := totalSupply_OMAToken[this];
[L2729]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_OMAToken[this][msgsender_MSG];
[L2730]              name_OMAToken[this] := tokenName_s302;
[L2731]              symbol_OMAToken[this] := tokenSymbol_s302;
[L2762]  RET         call OMAToken_OMAToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L2763]  COND FALSE  !(revert)
[L742]   RET         call OMAToken_OMAToken__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L743]               assume !revert && gas >= 0;
[L4547]  RET         call OMAToken_OMAToken(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L4548]              assume !revert && gas >= 0;
[L4551]  CALL        call CorralChoice_OMAToken(this);
[L4342]              havoc msgsender_MSG;
[L4343]              havoc msgvalue_MSG;
[L4344]              havoc choice;
[L4345]              havoc __ret_0_owner;
[L4346]              havoc newOwner_s127;
[L4347]              havoc __ret_0_paused;
[L4348]              havoc __ret_0_symbol;
[L4349]              havoc __ret_0_name;
[L4350]              havoc __ret_0_decimals;
[L4351]              havoc __ret_0_totalSupply;
[L4352]              havoc arg613_s0;
[L4353]              havoc __ret_0_balanceOf;
[L4354]              havoc arg614_s0;
[L4355]              havoc arg615_s0;
[L4356]              havoc __ret_0_allowance;
[L4357]              havoc arg616_s0;
[L4358]              havoc __ret_0_frozenAccount;
[L4359]              havoc arg617_s0;
[L4360]              havoc __ret_0_frozenAmount;
[L4361]              havoc initialSupply_s302;
[L4362]              havoc tokenName_s302;
[L4363]              havoc tokenSymbol_s302;
[L4364]              havoc _to_s401;
[L4365]              havoc _value_s401;
[L4366]              havoc success_s401;
[L4367]              havoc _from_s438;
[L4368]              havoc _to_s438;
[L4369]              havoc _value_s438;
[L4370]              havoc success_s438;
[L4371]              havoc _spender_s468;
[L4372]              havoc _value_s468;
[L4373]              havoc success_s468;
[L4374]              havoc _spender_s508;
[L4375]              havoc _value_s508;
[L4376]              havoc _extraData_s508;
[L4377]              havoc success_s508;
[L4378]              havoc _value_s544;
[L4379]              havoc success_s544;
[L4380]              havoc target_s565;
[L4381]              havoc freeze_s565;
[L4382]              havoc target_s592;
[L4383]              havoc _value_s592;
[L4384]              havoc target_s610;
[L4385]              havoc tmpNow;
[L4386]              havoc gas;
[L4387]              assume gas > 4000000 && gas <= 8000000;
[L4388]              tmpNow := now;
[L4389]              havoc now;
[L4390]              assume now > tmpNow;
[L4391]              assume msgsender_MSG != null;
[L4392]              assume DType[msgsender_MSG] != SafeMath;
[L4393]              assume DType[msgsender_MSG] != Owned;
[L4394]              assume DType[msgsender_MSG] != Pausable;
[L4395]              assume DType[msgsender_MSG] != tokenRecipient;
[L4396]              assume DType[msgsender_MSG] != OMAToken;
[L4397]              Alloc[msgsender_MSG] := true;
[L4398]  COND FALSE  !(choice == 21)
[L4404]  COND FALSE  !(choice == 20)
[L4410]  COND FALSE  !(choice == 19)
[L4416]  COND FALSE  !(choice == 18)
[L4422]  COND FALSE  !(choice == 17)
[L4428]  COND FALSE  !(choice == 16)
[L4434]  COND FALSE  !(choice == 15)
[L4440]  COND FALSE  !(choice == 14)
[L4446]  COND FALSE  !(choice == 13)
[L4452]  COND FALSE  !(choice == 12)
[L4458]  COND FALSE  !(choice == 11)
[L4464]  COND FALSE  !(choice == 10)
[L4470]  COND FALSE  !(choice == 9)
[L4476]  COND TRUE   choice == 8
[L4477]              gas := gas - 21000;
[L4478]  COND TRUE   gas >= 0
[L4479]              assume _value_s401 >= 0 && _value_s401 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4480]              assume msgvalue_MSG == 0;
[L4481]  CALL        call success_s401 := transfer~address~uint256_OMAToken(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s401 && _value_s401 <= balanceOf_OMAToken[this][msgsender_MSG]) && _value_s401 >= 0) && _value_s401 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_OMAToken[this][_to_s401] >= 0) && balanceOf_OMAToken[this][_to_s401] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_OMAToken[this][msgsender_MSG] >= 0) && balanceOf_OMAToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_OMAToken0 := true;
[L2]                 call_transfer_OMAToken0 := false;
[L2]                 revert := revert_hold;
[L782]               havoc __exception;
[L783]               revert := false;
[L784]   COND TRUE   __exception
[L785]               __tmp__Balance := Balance;
[L786]               __tmp__DType := DType;
[L787]               __tmp__Alloc := Alloc;
[L788]               __tmp__balance_ADDR := balance_ADDR;
[L789]               __tmp__M_Ref_int := M_Ref_int;
[L790]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L791]               __tmp__alloc_allowance_OMAToken_lvl0 := alloc_allowance_OMAToken_lvl0;
[L792]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L793]               __tmp__sum_allowance1 := sum_allowance1;
[L794]               __tmp__M_Ref_bool := M_Ref_bool;
[L795]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L796]               __tmp__sum_frozenAmount3 := sum_frozenAmount3;
[L797]               __tmp__Length := Length;
[L798]               __tmp__now := now;
[L799]               __tmp__owner_Owned := owner_Owned;
[L800]               __tmp__paused_Pausable := paused_Pausable;
[L801]               __tmp__symbol_OMAToken := symbol_OMAToken;
[L802]               __tmp__name_OMAToken := name_OMAToken;
[L803]               __tmp__decimals_OMAToken := decimals_OMAToken;
[L804]               __tmp__totalSupply_OMAToken := totalSupply_OMAToken;
[L805]               __tmp__balanceOf_OMAToken := balanceOf_OMAToken;
[L806]               __tmp__allowance_OMAToken := allowance_OMAToken;
[L807]               __tmp__frozenAccount_OMAToken := frozenAccount_OMAToken;
[L808]               __tmp__frozenAmount_OMAToken := frozenAmount_OMAToken;
[L809]   CALL        call success_s401 := transfer~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L2857]  CALL        call _transfer~address~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s401, _value_s401);
[L2773]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4040]  COND FALSE  !(!!__tmp__paused_Pausable[this])
[L2773]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L2774]  COND FALSE  !(revert)
[L2777]              __var_2 := null;
[L2778]  COND FALSE  !(!(_to_s382 != null))
[L2782]  COND FALSE  !(!!__tmp__frozenAccount_OMAToken[this][_from_s382])
[L2786]  COND FALSE  !(!!__tmp__frozenAccount_OMAToken[this][_to_s382])
[L2790]  CALL        call amount_s382 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balanceOf_OMAToken[this][_from_s382], _value_s382);
[L2448]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2790]  RET         call amount_s382 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balanceOf_OMAToken[this][_from_s382], _value_s382);
[L2791]  COND FALSE  !(revert)
[L2794]              amount_s382 := amount_s382;
[L2795]  COND FALSE  !(!(__tmp__frozenAmount_OMAToken[this][_from_s382] == 0 || amount_s382 >= __tmp__frozenAmount_OMAToken[this][_from_s382]))
[L2799]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] - __tmp__balanceOf_OMAToken[this][_from_s382];
[L2800]              __tmp__balanceOf_OMAToken[this][_from_s382] := amount_s382;
[L2801]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] + __tmp__balanceOf_OMAToken[this][_from_s382];
[L2802]  CALL        call __var_3 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balanceOf_OMAToken[this][_to_s382], _value_s382);
[L2461]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2462]              c_s92 := c_s92;
[L2802]  RET         call __var_3 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balanceOf_OMAToken[this][_to_s382], _value_s382);
[L2803]  COND FALSE  !(revert)
[L2806]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] - __tmp__balanceOf_OMAToken[this][_to_s382];
[L2807]              __tmp__balanceOf_OMAToken[this][_to_s382] := __var_3;
[L2808]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] + __tmp__balanceOf_OMAToken[this][_to_s382];
[L2857]  RET         call _transfer~address~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s401, _value_s401);
[L2858]  COND FALSE  !(revert)
[L2861]              success_s401 := true;
[L809]   RET         call success_s401 := transfer~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L810]               assume revert || gas < 0;
[L4481]  RET         call success_s401 := transfer~address~uint256_OMAToken(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L4551]  RET         call CorralChoice_OMAToken(this);

Loop:
[L4551]  CALL        call CorralChoice_OMAToken(this);
[L4342]              havoc msgsender_MSG;
[L4343]              havoc msgvalue_MSG;
[L4344]              havoc choice;
[L4345]              havoc __ret_0_owner;
[L4346]              havoc newOwner_s127;
[L4347]              havoc __ret_0_paused;
[L4348]              havoc __ret_0_symbol;
[L4349]              havoc __ret_0_name;
[L4350]              havoc __ret_0_decimals;
[L4351]              havoc __ret_0_totalSupply;
[L4352]              havoc arg613_s0;
[L4353]              havoc __ret_0_balanceOf;
[L4354]              havoc arg614_s0;
[L4355]              havoc arg615_s0;
[L4356]              havoc __ret_0_allowance;
[L4357]              havoc arg616_s0;
[L4358]              havoc __ret_0_frozenAccount;
[L4359]              havoc arg617_s0;
[L4360]              havoc __ret_0_frozenAmount;
[L4361]              havoc initialSupply_s302;
[L4362]              havoc tokenName_s302;
[L4363]              havoc tokenSymbol_s302;
[L4364]              havoc _to_s401;
[L4365]              havoc _value_s401;
[L4366]              havoc success_s401;
[L4367]              havoc _from_s438;
[L4368]              havoc _to_s438;
[L4369]              havoc _value_s438;
[L4370]              havoc success_s438;
[L4371]              havoc _spender_s468;
[L4372]              havoc _value_s468;
[L4373]              havoc success_s468;
[L4374]              havoc _spender_s508;
[L4375]              havoc _value_s508;
[L4376]              havoc _extraData_s508;
[L4377]              havoc success_s508;
[L4378]              havoc _value_s544;
[L4379]              havoc success_s544;
[L4380]              havoc target_s565;
[L4381]              havoc freeze_s565;
[L4382]              havoc target_s592;
[L4383]              havoc _value_s592;
[L4384]              havoc target_s610;
[L4385]              havoc tmpNow;
[L4386]              havoc gas;
[L4387]              assume gas > 4000000 && gas <= 8000000;
[L4388]              tmpNow := now;
[L4389]              havoc now;
[L4390]              assume now > tmpNow;
[L4391]              assume msgsender_MSG != null;
[L4392]              assume DType[msgsender_MSG] != SafeMath;
[L4393]              assume DType[msgsender_MSG] != Owned;
[L4394]              assume DType[msgsender_MSG] != Pausable;
[L4395]              assume DType[msgsender_MSG] != tokenRecipient;
[L4396]              assume DType[msgsender_MSG] != OMAToken;
[L4397]              Alloc[msgsender_MSG] := true;
[L4398]  COND FALSE  !(choice == 21)
[L4404]  COND FALSE  !(choice == 20)
[L4410]  COND FALSE  !(choice == 19)
[L4416]  COND FALSE  !(choice == 18)
[L4422]  COND FALSE  !(choice == 17)
[L4428]  COND FALSE  !(choice == 16)
[L4434]  COND FALSE  !(choice == 15)
[L4440]  COND FALSE  !(choice == 14)
[L4446]  COND FALSE  !(choice == 13)
[L4452]  COND FALSE  !(choice == 12)
[L4458]  COND FALSE  !(choice == 11)
[L4464]  COND FALSE  !(choice == 10)
[L4470]  COND FALSE  !(choice == 9)
[L4476]  COND TRUE   choice == 8
[L4477]              gas := gas - 21000;
[L4478]  COND TRUE   gas >= 0
[L4479]              assume _value_s401 >= 0 && _value_s401 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4480]              assume msgvalue_MSG == 0;
[L4481]  CALL        call success_s401 := transfer~address~uint256_OMAToken(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s401 && _value_s401 <= balanceOf_OMAToken[this][msgsender_MSG]) && _value_s401 >= 0) && _value_s401 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_OMAToken[this][_to_s401] >= 0) && balanceOf_OMAToken[this][_to_s401] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_OMAToken[this][msgsender_MSG] >= 0) && balanceOf_OMAToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_OMAToken0 := true;
[L2]                 call_transfer_OMAToken0 := false;
[L2]                 revert := revert_hold;
[L782]               havoc __exception;
[L783]               revert := false;
[L784]   COND TRUE   __exception
[L785]               __tmp__Balance := Balance;
[L786]               __tmp__DType := DType;
[L787]               __tmp__Alloc := Alloc;
[L788]               __tmp__balance_ADDR := balance_ADDR;
[L789]               __tmp__M_Ref_int := M_Ref_int;
[L790]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L791]               __tmp__alloc_allowance_OMAToken_lvl0 := alloc_allowance_OMAToken_lvl0;
[L792]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L793]               __tmp__sum_allowance1 := sum_allowance1;
[L794]               __tmp__M_Ref_bool := M_Ref_bool;
[L795]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L796]               __tmp__sum_frozenAmount3 := sum_frozenAmount3;
[L797]               __tmp__Length := Length;
[L798]               __tmp__now := now;
[L799]               __tmp__owner_Owned := owner_Owned;
[L800]               __tmp__paused_Pausable := paused_Pausable;
[L801]               __tmp__symbol_OMAToken := symbol_OMAToken;
[L802]               __tmp__name_OMAToken := name_OMAToken;
[L803]               __tmp__decimals_OMAToken := decimals_OMAToken;
[L804]               __tmp__totalSupply_OMAToken := totalSupply_OMAToken;
[L805]               __tmp__balanceOf_OMAToken := balanceOf_OMAToken;
[L806]               __tmp__allowance_OMAToken := allowance_OMAToken;
[L807]               __tmp__frozenAccount_OMAToken := frozenAccount_OMAToken;
[L808]               __tmp__frozenAmount_OMAToken := frozenAmount_OMAToken;
[L809]   CALL        call success_s401 := transfer~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L2857]  CALL        call _transfer~address~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s401, _value_s401);
[L2773]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4040]  COND FALSE  !(!!__tmp__paused_Pausable[this])
[L2773]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L2774]  COND FALSE  !(revert)
[L2777]              __var_2 := null;
[L2778]  COND FALSE  !(!(_to_s382 != null))
[L2782]  COND FALSE  !(!!__tmp__frozenAccount_OMAToken[this][_from_s382])
[L2786]  COND FALSE  !(!!__tmp__frozenAccount_OMAToken[this][_to_s382])
[L2790]  CALL        call amount_s382 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balanceOf_OMAToken[this][_from_s382], _value_s382);
[L2448]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2790]  RET         call amount_s382 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balanceOf_OMAToken[this][_from_s382], _value_s382);
[L2791]  COND FALSE  !(revert)
[L2794]              amount_s382 := amount_s382;
[L2795]  COND FALSE  !(!(__tmp__frozenAmount_OMAToken[this][_from_s382] == 0 || amount_s382 >= __tmp__frozenAmount_OMAToken[this][_from_s382]))
[L2799]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] - __tmp__balanceOf_OMAToken[this][_from_s382];
[L2800]              __tmp__balanceOf_OMAToken[this][_from_s382] := amount_s382;
[L2801]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] + __tmp__balanceOf_OMAToken[this][_from_s382];
[L2802]  CALL        call __var_3 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balanceOf_OMAToken[this][_to_s382], _value_s382);
[L2461]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2462]              c_s92 := c_s92;
[L2802]  RET         call __var_3 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balanceOf_OMAToken[this][_to_s382], _value_s382);
[L2803]  COND FALSE  !(revert)
[L2806]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] - __tmp__balanceOf_OMAToken[this][_to_s382];
[L2807]              __tmp__balanceOf_OMAToken[this][_to_s382] := __var_3;
[L2808]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] + __tmp__balanceOf_OMAToken[this][_to_s382];
[L2857]  RET         call _transfer~address~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s401, _value_s401);
[L2858]  COND FALSE  !(revert)
[L2861]              success_s401 := true;
[L809]   RET         call success_s401 := transfer~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L810]               assume revert || gas < 0;
[L4481]  RET         call success_s401 := transfer~address~uint256_OMAToken(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L4551]  RET         call CorralChoice_OMAToken(this);

[2020-11-25 02:26:22,165 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:26:22,165 INFO  L82        PathProgramCache]: Analyzing trace with hash -910983412, now seen corresponding path program 1 times
[2020-11-25 02:26:22,166 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:26:22,174 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:26:22,209 INFO  L134       CoverageAnalysis]: Checked inductivity of 12 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 12 trivial. 0 not checked.
[2020-11-25 02:26:22,210 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:26:22,210 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 02:26:22,210 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:26:22,210 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 02:26:22,210 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=10, Invalid=20, Unknown=0, NotChecked=0, Total=30
[2020-11-25 02:26:22,210 INFO  L87              Difference]: Start difference. First operand 4636 states and 5545 transitions. cyclomatic complexity: 933 Second operand 6 states.
[2020-11-25 02:26:22,637 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:26:22,637 INFO  L93              Difference]: Finished difference Result 6250 states and 8868 transitions.
[2020-11-25 02:26:22,637 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 02:26:22,637 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6250 states and 8868 transitions.
[2020-11-25 02:26:22,665 INFO  L131   ngComponentsAnalysis]: Automaton has 15 accepting balls. 152
[2020-11-25 02:26:22,701 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6250 states to 5255 states and 7843 transitions.
[2020-11-25 02:26:22,702 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1226
[2020-11-25 02:26:22,702 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1226
[2020-11-25 02:26:22,702 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5255 states and 7843 transitions.
[2020-11-25 02:26:22,712 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:26:22,712 INFO  L728         BuchiCegarLoop]: Abstraction has 5255 states and 7843 transitions.
[2020-11-25 02:26:22,714 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5255 states and 7843 transitions.
[2020-11-25 02:26:22,781 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5255 to 3829.
[2020-11-25 02:26:22,781 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3829 states.
[2020-11-25 02:26:22,788 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3829 states to 3829 states and 4735 transitions.
[2020-11-25 02:26:22,788 INFO  L751         BuchiCegarLoop]: Abstraction has 3829 states and 4735 transitions.
[2020-11-25 02:26:22,788 INFO  L631         BuchiCegarLoop]: Abstraction has 3829 states and 4735 transitions.
[2020-11-25 02:26:22,788 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 02:26:22,788 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3829 states and 4735 transitions.
[2020-11-25 02:26:22,792 INFO  L131   ngComponentsAnalysis]: Automaton has 15 accepting balls. 38
[2020-11-25 02:26:22,792 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:26:22,792 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:26:22,793 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:26:22,793 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_OMAToken0 := false;
[L2]                 call_transfer_OMAToken0 := false;
[L2]     CALL        call main();
[L4541]              assume null == 0;
[L4542]  CALL        call this := FreshRefGenerator__success();
[L2373]              havoc newRef;
[L2374]              assume Alloc[newRef] == false;
[L2375]              Alloc[newRef] := true;
[L2376]              assume newRef != null;
[L4542]  RET         call this := FreshRefGenerator__success();
[L4543]              assume now >= 0;
[L4544]              assume DType[this] == OMAToken;
[L4545]              assume msgvalue_MSG == 0;
[L4546]              gas := gas - 53000;
[L4547]  CALL        call OMAToken_OMAToken(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L712]               havoc __exception;
[L713]               revert := false;
[L714]   COND FALSE  !(__exception)
[L742]   CALL        call OMAToken_OMAToken__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L2754]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2504]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2487]              assume msgsender_MSG != null;
[L2488]              Balance[this] := 0;
[L2489]              owner_Owned[this] := null;
[L2491]              owner_Owned[this] := msgsender_MSG;
[L2504]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]  COND FALSE  !(revert)
[L2754]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2755]  COND FALSE  !(revert)
[L2758]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L2572]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2504]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2487]              assume msgsender_MSG != null;
[L2488]              Balance[this] := 0;
[L2489]              owner_Owned[this] := null;
[L2491]              owner_Owned[this] := msgsender_MSG;
[L2504]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]  COND FALSE  !(revert)
[L2572]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2573]  COND FALSE  !(revert)
[L2576]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2552]              assume msgsender_MSG != null;
[L2553]              Balance[this] := 0;
[L2554]              paused_Pausable[this] := false;
[L2576]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2577]  COND FALSE  !(revert)
[L2758]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L2759]  COND FALSE  !(revert)
[L2762]  CALL        call OMAToken_OMAToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L2711]              assume msgsender_MSG != null;
[L2712]              Balance[this] := 0;
[L2713]              symbol_OMAToken[this] := -641797033;
[L2714]              name_OMAToken[this] := -641797033;
[L2715]              decimals_OMAToken[this] := 18;
[L2716]              totalSupply_OMAToken[this] := 0;
[L2717]              balanceOf_OMAToken[this] := zeroRefintArr();
[L2718]              sum_balanceOf0[this] := 0;
[L2719]              allowance_OMAToken[this] := zeroRefRefintArr();
[L2720]              sum_allowance1[this] := 0;
[L2721]              frozenAccount_OMAToken[this] := zeroRefboolArr();
[L2722]              frozenAmount_OMAToken[this] := zeroRefintArr();
[L2723]              sum_frozenAmount3[this] := 0;
[L2725]              __var_1 := decimals_OMAToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2726]              totalSupply_OMAToken[this] := nonlinearMul(initialSupply_s302, nonlinearPow(10, decimals_OMAToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2727]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_OMAToken[this][msgsender_MSG];
[L2728]              balanceOf_OMAToken[this][msgsender_MSG] := totalSupply_OMAToken[this];
[L2729]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_OMAToken[this][msgsender_MSG];
[L2730]              name_OMAToken[this] := tokenName_s302;
[L2731]              symbol_OMAToken[this] := tokenSymbol_s302;
[L2762]  RET         call OMAToken_OMAToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L2763]  COND FALSE  !(revert)
[L742]   RET         call OMAToken_OMAToken__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L743]               assume !revert && gas >= 0;
[L4547]  RET         call OMAToken_OMAToken(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L4548]              assume !revert && gas >= 0;
[L4551]  CALL        call CorralChoice_OMAToken(this);
[L4342]              havoc msgsender_MSG;
[L4343]              havoc msgvalue_MSG;
[L4344]              havoc choice;
[L4345]              havoc __ret_0_owner;
[L4346]              havoc newOwner_s127;
[L4347]              havoc __ret_0_paused;
[L4348]              havoc __ret_0_symbol;
[L4349]              havoc __ret_0_name;
[L4350]              havoc __ret_0_decimals;
[L4351]              havoc __ret_0_totalSupply;
[L4352]              havoc arg613_s0;
[L4353]              havoc __ret_0_balanceOf;
[L4354]              havoc arg614_s0;
[L4355]              havoc arg615_s0;
[L4356]              havoc __ret_0_allowance;
[L4357]              havoc arg616_s0;
[L4358]              havoc __ret_0_frozenAccount;
[L4359]              havoc arg617_s0;
[L4360]              havoc __ret_0_frozenAmount;
[L4361]              havoc initialSupply_s302;
[L4362]              havoc tokenName_s302;
[L4363]              havoc tokenSymbol_s302;
[L4364]              havoc _to_s401;
[L4365]              havoc _value_s401;
[L4366]              havoc success_s401;
[L4367]              havoc _from_s438;
[L4368]              havoc _to_s438;
[L4369]              havoc _value_s438;
[L4370]              havoc success_s438;
[L4371]              havoc _spender_s468;
[L4372]              havoc _value_s468;
[L4373]              havoc success_s468;
[L4374]              havoc _spender_s508;
[L4375]              havoc _value_s508;
[L4376]              havoc _extraData_s508;
[L4377]              havoc success_s508;
[L4378]              havoc _value_s544;
[L4379]              havoc success_s544;
[L4380]              havoc target_s565;
[L4381]              havoc freeze_s565;
[L4382]              havoc target_s592;
[L4383]              havoc _value_s592;
[L4384]              havoc target_s610;
[L4385]              havoc tmpNow;
[L4386]              havoc gas;
[L4387]              assume gas > 4000000 && gas <= 8000000;
[L4388]              tmpNow := now;
[L4389]              havoc now;
[L4390]              assume now > tmpNow;
[L4391]              assume msgsender_MSG != null;
[L4392]              assume DType[msgsender_MSG] != SafeMath;
[L4393]              assume DType[msgsender_MSG] != Owned;
[L4394]              assume DType[msgsender_MSG] != Pausable;
[L4395]              assume DType[msgsender_MSG] != tokenRecipient;
[L4396]              assume DType[msgsender_MSG] != OMAToken;
[L4397]              Alloc[msgsender_MSG] := true;
[L4398]  COND FALSE  !(choice == 21)
[L4404]  COND FALSE  !(choice == 20)
[L4410]  COND FALSE  !(choice == 19)
[L4416]  COND FALSE  !(choice == 18)
[L4422]  COND FALSE  !(choice == 17)
[L4428]  COND FALSE  !(choice == 16)
[L4434]  COND FALSE  !(choice == 15)
[L4440]  COND FALSE  !(choice == 14)
[L4446]  COND FALSE  !(choice == 13)
[L4452]  COND FALSE  !(choice == 12)
[L4458]  COND FALSE  !(choice == 11)
[L4464]  COND FALSE  !(choice == 10)
[L4470]  COND FALSE  !(choice == 9)
[L4476]  COND TRUE   choice == 8
[L4477]              gas := gas - 21000;
[L4478]  COND TRUE   gas >= 0
[L4479]              assume _value_s401 >= 0 && _value_s401 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4480]              assume msgvalue_MSG == 0;
[L4481]  CALL        call success_s401 := transfer~address~uint256_OMAToken(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == _to_s401 && _value_s401 <= balanceOf_OMAToken[this][msgsender_MSG]) && _value_s401 >= 0) && _value_s401 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_OMAToken[this][_to_s401] >= 0) && balanceOf_OMAToken[this][_to_s401] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_OMAToken[this][msgsender_MSG] >= 0) && balanceOf_OMAToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L782]               havoc __exception;
[L783]               revert := false;
[L784]   COND FALSE  !(__exception)
[L812]   CALL        call success_s401 := transfer~address~uint256_OMAToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L2867]  CALL        call _transfer~address~address~uint256_OMAToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s401, _value_s401);
[L2816]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4048]  COND FALSE  !(!!paused_Pausable[this])
[L2816]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2817]  COND FALSE  !(revert)
[L2820]              __var_2 := null;
[L2821]  COND FALSE  !(!(_to_s382 != null))
[L2825]  COND FALSE  !(!!frozenAccount_OMAToken[this][_from_s382])
[L2829]  COND FALSE  !(!!frozenAccount_OMAToken[this][_to_s382])
[L2833]  CALL        call amount_s382 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_OMAToken[this][_from_s382], _value_s382);
[L2454]              assert b_s68 <= a_s68;
[L2455]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2833]  RET         call amount_s382 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_OMAToken[this][_from_s382], _value_s382);
[L2834]  COND FALSE  !(revert)
[L2837]              amount_s382 := amount_s382;
[L2838]  COND FALSE  !(!(frozenAmount_OMAToken[this][_from_s382] == 0 || amount_s382 >= frozenAmount_OMAToken[this][_from_s382]))
[L2842]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_OMAToken[this][_from_s382];
[L2843]              balanceOf_OMAToken[this][_from_s382] := amount_s382;
[L2844]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_OMAToken[this][_from_s382];
[L2845]  CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_OMAToken[this][_to_s382], _value_s382);
[L2468]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2469]              assert c_s92 >= a_s92;
[L2470]              c_s92 := c_s92;
[L2845]  RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_OMAToken[this][_to_s382], _value_s382);
[L2846]  COND FALSE  !(revert)
[L2849]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_OMAToken[this][_to_s382];
[L2850]              balanceOf_OMAToken[this][_to_s382] := __var_3;
[L2851]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_OMAToken[this][_to_s382];
[L2852]              assert { :EventEmitted "Transfer_OMAToken" } true;
[L2867]  RET         call _transfer~address~address~uint256_OMAToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s401, _value_s401);
[L2868]  COND FALSE  !(revert)
[L2871]              success_s401 := true;
[L812]   RET         call success_s401 := transfer~address~uint256_OMAToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L813]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((((success_s401 == true && totalSupply_OMAToken[this] == old(totalSupply_OMAToken[this])) && balanceOf_OMAToken[this] == old(balanceOf_OMAToken[this])) && allowance_OMAToken[this] == old(allowance_OMAToken[this])) && symbol_OMAToken[this] == old(symbol_OMAToken[this])) && name_OMAToken[this] == old(name_OMAToken[this])) && decimals_OMAToken[this] == old(decimals_OMAToken[this])) && frozenAccount_OMAToken[this] == old(frozenAccount_OMAToken[this])) && frozenAmount_OMAToken[this] == old(frozenAmount_OMAToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && owner_Owned[this] == old(owner_Owned[this]));
[L2]                 revert := revert_hold;
[L4481]  RET         call success_s401 := transfer~address~uint256_OMAToken(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L4551]  RET         call CorralChoice_OMAToken(this);
[L4551]  CALL        call CorralChoice_OMAToken(this);
[L4342]              havoc msgsender_MSG;
[L4343]              havoc msgvalue_MSG;
[L4344]              havoc choice;
[L4345]              havoc __ret_0_owner;
[L4346]              havoc newOwner_s127;
[L4347]              havoc __ret_0_paused;
[L4348]              havoc __ret_0_symbol;
[L4349]              havoc __ret_0_name;
[L4350]              havoc __ret_0_decimals;
[L4351]              havoc __ret_0_totalSupply;
[L4352]              havoc arg613_s0;
[L4353]              havoc __ret_0_balanceOf;
[L4354]              havoc arg614_s0;
[L4355]              havoc arg615_s0;
[L4356]              havoc __ret_0_allowance;
[L4357]              havoc arg616_s0;
[L4358]              havoc __ret_0_frozenAccount;
[L4359]              havoc arg617_s0;
[L4360]              havoc __ret_0_frozenAmount;
[L4361]              havoc initialSupply_s302;
[L4362]              havoc tokenName_s302;
[L4363]              havoc tokenSymbol_s302;
[L4364]              havoc _to_s401;
[L4365]              havoc _value_s401;
[L4366]              havoc success_s401;
[L4367]              havoc _from_s438;
[L4368]              havoc _to_s438;
[L4369]              havoc _value_s438;
[L4370]              havoc success_s438;
[L4371]              havoc _spender_s468;
[L4372]              havoc _value_s468;
[L4373]              havoc success_s468;
[L4374]              havoc _spender_s508;
[L4375]              havoc _value_s508;
[L4376]              havoc _extraData_s508;
[L4377]              havoc success_s508;
[L4378]              havoc _value_s544;
[L4379]              havoc success_s544;
[L4380]              havoc target_s565;
[L4381]              havoc freeze_s565;
[L4382]              havoc target_s592;
[L4383]              havoc _value_s592;
[L4384]              havoc target_s610;
[L4385]              havoc tmpNow;
[L4386]              havoc gas;
[L4387]              assume gas > 4000000 && gas <= 8000000;
[L4388]              tmpNow := now;
[L4389]              havoc now;
[L4390]              assume now > tmpNow;
[L4391]              assume msgsender_MSG != null;
[L4392]              assume DType[msgsender_MSG] != SafeMath;
[L4393]              assume DType[msgsender_MSG] != Owned;
[L4394]              assume DType[msgsender_MSG] != Pausable;
[L4395]              assume DType[msgsender_MSG] != tokenRecipient;
[L4396]              assume DType[msgsender_MSG] != OMAToken;
[L4397]              Alloc[msgsender_MSG] := true;
[L4398]  COND FALSE  !(choice == 21)
[L4404]  COND FALSE  !(choice == 20)
[L4410]  COND FALSE  !(choice == 19)
[L4416]  COND FALSE  !(choice == 18)
[L4422]  COND FALSE  !(choice == 17)
[L4428]  COND FALSE  !(choice == 16)
[L4434]  COND FALSE  !(choice == 15)
[L4440]  COND FALSE  !(choice == 14)
[L4446]  COND FALSE  !(choice == 13)
[L4452]  COND FALSE  !(choice == 12)
[L4458]  COND FALSE  !(choice == 11)
[L4464]  COND FALSE  !(choice == 10)
[L4470]  COND FALSE  !(choice == 9)
[L4476]  COND TRUE   choice == 8
[L4477]              gas := gas - 21000;
[L4478]  COND TRUE   gas >= 0
[L4479]              assume _value_s401 >= 0 && _value_s401 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4480]              assume msgvalue_MSG == 0;
[L4481]  CALL        call success_s401 := transfer~address~uint256_OMAToken(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s401 && _value_s401 <= balanceOf_OMAToken[this][msgsender_MSG]) && _value_s401 >= 0) && _value_s401 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_OMAToken[this][_to_s401] >= 0) && balanceOf_OMAToken[this][_to_s401] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_OMAToken[this][msgsender_MSG] >= 0) && balanceOf_OMAToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_OMAToken0 := true;
[L2]                 call_transfer_OMAToken0 := false;
[L2]                 revert := revert_hold;
[L782]               havoc __exception;
[L783]               revert := false;
[L784]   COND FALSE  !(__exception)
[L812]   CALL        call success_s401 := transfer~address~uint256_OMAToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L2867]  CALL        call _transfer~address~address~uint256_OMAToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s401, _value_s401);
[L2816]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4048]  COND FALSE  !(!!paused_Pausable[this])
[L2816]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2817]  COND FALSE  !(revert)
[L2820]              __var_2 := null;
[L2821]  COND FALSE  !(!(_to_s382 != null))
[L2825]  COND FALSE  !(!!frozenAccount_OMAToken[this][_from_s382])
[L2829]  COND FALSE  !(!!frozenAccount_OMAToken[this][_to_s382])
[L2833]  CALL        call amount_s382 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_OMAToken[this][_from_s382], _value_s382);
[L2454]              assert b_s68 <= a_s68;
[L2455]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2833]  RET         call amount_s382 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_OMAToken[this][_from_s382], _value_s382);
[L2834]  COND FALSE  !(revert)
[L2837]              amount_s382 := amount_s382;
[L2838]  COND FALSE  !(!(frozenAmount_OMAToken[this][_from_s382] == 0 || amount_s382 >= frozenAmount_OMAToken[this][_from_s382]))
[L2842]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_OMAToken[this][_from_s382];
[L2843]              balanceOf_OMAToken[this][_from_s382] := amount_s382;
[L2844]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_OMAToken[this][_from_s382];
[L2845]  CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_OMAToken[this][_to_s382], _value_s382);
[L2468]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2469]              assert c_s92 >= a_s92;
[L2470]              c_s92 := c_s92;
[L2845]  RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_OMAToken[this][_to_s382], _value_s382);
[L2846]  COND FALSE  !(revert)
[L2849]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_OMAToken[this][_to_s382];
[L2850]              balanceOf_OMAToken[this][_to_s382] := __var_3;
[L2851]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_OMAToken[this][_to_s382];
[L2852]              assert { :EventEmitted "Transfer_OMAToken" } true;
[L2867]  RET         call _transfer~address~address~uint256_OMAToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s401, _value_s401);
[L2868]  COND FALSE  !(revert)
[L2871]              success_s401 := true;
[L812]   RET         call success_s401 := transfer~address~uint256_OMAToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L813]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((((success_s401 == true && totalSupply_OMAToken[this] == old(totalSupply_OMAToken[this])) && balanceOf_OMAToken[this] == old(balanceOf_OMAToken[this])) && allowance_OMAToken[this] == old(allowance_OMAToken[this])) && symbol_OMAToken[this] == old(symbol_OMAToken[this])) && name_OMAToken[this] == old(name_OMAToken[this])) && decimals_OMAToken[this] == old(decimals_OMAToken[this])) && frozenAccount_OMAToken[this] == old(frozenAccount_OMAToken[this])) && frozenAmount_OMAToken[this] == old(frozenAmount_OMAToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && owner_Owned[this] == old(owner_Owned[this]));
[L2]                 revert := revert_hold;
[L4481]  RET         call success_s401 := transfer~address~uint256_OMAToken(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L4551]  RET         call CorralChoice_OMAToken(this);

Loop:
[L4551]  CALL        call CorralChoice_OMAToken(this);
[L4342]              havoc msgsender_MSG;
[L4343]              havoc msgvalue_MSG;
[L4344]              havoc choice;
[L4345]              havoc __ret_0_owner;
[L4346]              havoc newOwner_s127;
[L4347]              havoc __ret_0_paused;
[L4348]              havoc __ret_0_symbol;
[L4349]              havoc __ret_0_name;
[L4350]              havoc __ret_0_decimals;
[L4351]              havoc __ret_0_totalSupply;
[L4352]              havoc arg613_s0;
[L4353]              havoc __ret_0_balanceOf;
[L4354]              havoc arg614_s0;
[L4355]              havoc arg615_s0;
[L4356]              havoc __ret_0_allowance;
[L4357]              havoc arg616_s0;
[L4358]              havoc __ret_0_frozenAccount;
[L4359]              havoc arg617_s0;
[L4360]              havoc __ret_0_frozenAmount;
[L4361]              havoc initialSupply_s302;
[L4362]              havoc tokenName_s302;
[L4363]              havoc tokenSymbol_s302;
[L4364]              havoc _to_s401;
[L4365]              havoc _value_s401;
[L4366]              havoc success_s401;
[L4367]              havoc _from_s438;
[L4368]              havoc _to_s438;
[L4369]              havoc _value_s438;
[L4370]              havoc success_s438;
[L4371]              havoc _spender_s468;
[L4372]              havoc _value_s468;
[L4373]              havoc success_s468;
[L4374]              havoc _spender_s508;
[L4375]              havoc _value_s508;
[L4376]              havoc _extraData_s508;
[L4377]              havoc success_s508;
[L4378]              havoc _value_s544;
[L4379]              havoc success_s544;
[L4380]              havoc target_s565;
[L4381]              havoc freeze_s565;
[L4382]              havoc target_s592;
[L4383]              havoc _value_s592;
[L4384]              havoc target_s610;
[L4385]              havoc tmpNow;
[L4386]              havoc gas;
[L4387]              assume gas > 4000000 && gas <= 8000000;
[L4388]              tmpNow := now;
[L4389]              havoc now;
[L4390]              assume now > tmpNow;
[L4391]              assume msgsender_MSG != null;
[L4392]              assume DType[msgsender_MSG] != SafeMath;
[L4393]              assume DType[msgsender_MSG] != Owned;
[L4394]              assume DType[msgsender_MSG] != Pausable;
[L4395]              assume DType[msgsender_MSG] != tokenRecipient;
[L4396]              assume DType[msgsender_MSG] != OMAToken;
[L4397]              Alloc[msgsender_MSG] := true;
[L4398]  COND FALSE  !(choice == 21)
[L4404]  COND FALSE  !(choice == 20)
[L4410]  COND FALSE  !(choice == 19)
[L4416]  COND FALSE  !(choice == 18)
[L4422]  COND FALSE  !(choice == 17)
[L4428]  COND FALSE  !(choice == 16)
[L4434]  COND FALSE  !(choice == 15)
[L4440]  COND FALSE  !(choice == 14)
[L4446]  COND FALSE  !(choice == 13)
[L4452]  COND FALSE  !(choice == 12)
[L4458]  COND FALSE  !(choice == 11)
[L4464]  COND FALSE  !(choice == 10)
[L4470]  COND FALSE  !(choice == 9)
[L4476]  COND TRUE   choice == 8
[L4477]              gas := gas - 21000;
[L4478]  COND TRUE   gas >= 0
[L4479]              assume _value_s401 >= 0 && _value_s401 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4480]              assume msgvalue_MSG == 0;
[L4481]  CALL        call success_s401 := transfer~address~uint256_OMAToken(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s401 && _value_s401 <= balanceOf_OMAToken[this][msgsender_MSG]) && _value_s401 >= 0) && _value_s401 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_OMAToken[this][_to_s401] >= 0) && balanceOf_OMAToken[this][_to_s401] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_OMAToken[this][msgsender_MSG] >= 0) && balanceOf_OMAToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_OMAToken0 := true;
[L2]                 call_transfer_OMAToken0 := false;
[L2]                 revert := revert_hold;
[L782]               havoc __exception;
[L783]               revert := false;
[L784]   COND FALSE  !(__exception)
[L812]   CALL        call success_s401 := transfer~address~uint256_OMAToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L2867]  CALL        call _transfer~address~address~uint256_OMAToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s401, _value_s401);
[L2816]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4048]  COND FALSE  !(!!paused_Pausable[this])
[L2816]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2817]  COND FALSE  !(revert)
[L2820]              __var_2 := null;
[L2821]  COND FALSE  !(!(_to_s382 != null))
[L2825]  COND FALSE  !(!!frozenAccount_OMAToken[this][_from_s382])
[L2829]  COND FALSE  !(!!frozenAccount_OMAToken[this][_to_s382])
[L2833]  CALL        call amount_s382 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_OMAToken[this][_from_s382], _value_s382);
[L2454]              assert b_s68 <= a_s68;
[L2455]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2833]  RET         call amount_s382 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_OMAToken[this][_from_s382], _value_s382);
[L2834]  COND FALSE  !(revert)
[L2837]              amount_s382 := amount_s382;
[L2838]  COND FALSE  !(!(frozenAmount_OMAToken[this][_from_s382] == 0 || amount_s382 >= frozenAmount_OMAToken[this][_from_s382]))
[L2842]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_OMAToken[this][_from_s382];
[L2843]              balanceOf_OMAToken[this][_from_s382] := amount_s382;
[L2844]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_OMAToken[this][_from_s382];
[L2845]  CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_OMAToken[this][_to_s382], _value_s382);
[L2468]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2469]              assert c_s92 >= a_s92;
[L2470]              c_s92 := c_s92;
[L2845]  RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_OMAToken[this][_to_s382], _value_s382);
[L2846]  COND FALSE  !(revert)
[L2849]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_OMAToken[this][_to_s382];
[L2850]              balanceOf_OMAToken[this][_to_s382] := __var_3;
[L2851]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_OMAToken[this][_to_s382];
[L2852]              assert { :EventEmitted "Transfer_OMAToken" } true;
[L2867]  RET         call _transfer~address~address~uint256_OMAToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s401, _value_s401);
[L2868]  COND FALSE  !(revert)
[L2871]              success_s401 := true;
[L812]   RET         call success_s401 := transfer~address~uint256_OMAToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L813]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((((success_s401 == true && totalSupply_OMAToken[this] == old(totalSupply_OMAToken[this])) && balanceOf_OMAToken[this] == old(balanceOf_OMAToken[this])) && allowance_OMAToken[this] == old(allowance_OMAToken[this])) && symbol_OMAToken[this] == old(symbol_OMAToken[this])) && name_OMAToken[this] == old(name_OMAToken[this])) && decimals_OMAToken[this] == old(decimals_OMAToken[this])) && frozenAccount_OMAToken[this] == old(frozenAccount_OMAToken[this])) && frozenAmount_OMAToken[this] == old(frozenAmount_OMAToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && owner_Owned[this] == old(owner_Owned[this]));
[L2]                 revert := revert_hold;
[L4481]  RET         call success_s401 := transfer~address~uint256_OMAToken(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L4551]  RET         call CorralChoice_OMAToken(this);

[2020-11-25 02:26:22,797 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:26:22,797 INFO  L82        PathProgramCache]: Analyzing trace with hash 1908349057, now seen corresponding path program 1 times
[2020-11-25 02:26:22,798 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:26:22,858 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:26:23,092 INFO  L134       CoverageAnalysis]: Checked inductivity of 93 backedges. 80 proven. 0 refuted. 0 times theorem prover too weak. 13 trivial. 0 not checked.
[2020-11-25 02:26:23,093 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:26:23,093 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [22] imperfect sequences [] total 22
[2020-11-25 02:26:23,093 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:26:23,093 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 23 interpolants.
[2020-11-25 02:26:23,093 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=60, Invalid=446, Unknown=0, NotChecked=0, Total=506
[2020-11-25 02:26:23,094 INFO  L87              Difference]: Start difference. First operand 3829 states and 4735 transitions. cyclomatic complexity: 941 Second operand 23 states.
[2020-11-25 02:26:25,990 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:26:25,990 INFO  L93              Difference]: Finished difference Result 3839 states and 4689 transitions.
[2020-11-25 02:26:25,990 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 22 states. 
[2020-11-25 02:26:25,990 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3839 states and 4689 transitions.
[2020-11-25 02:26:25,999 INFO  L131   ngComponentsAnalysis]: Automaton has 10 accepting balls. 28
[2020-11-25 02:26:26,010 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3839 states to 3839 states and 4689 transitions.
[2020-11-25 02:26:26,010 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 930
[2020-11-25 02:26:26,010 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 930
[2020-11-25 02:26:26,010 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3839 states and 4689 transitions.
[2020-11-25 02:26:26,013 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:26:26,013 INFO  L728         BuchiCegarLoop]: Abstraction has 3839 states and 4689 transitions.
[2020-11-25 02:26:26,015 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3839 states and 4689 transitions.
[2020-11-25 02:26:26,039 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3839 to 3649.
[2020-11-25 02:26:26,039 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3649 states.
[2020-11-25 02:26:26,043 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3649 states to 3649 states and 4228 transitions.
[2020-11-25 02:26:26,044 INFO  L751         BuchiCegarLoop]: Abstraction has 3649 states and 4228 transitions.
[2020-11-25 02:26:26,044 INFO  L631         BuchiCegarLoop]: Abstraction has 3649 states and 4228 transitions.
[2020-11-25 02:26:26,044 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 02:26:26,044 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3649 states and 4228 transitions.
[2020-11-25 02:26:26,047 INFO  L131   ngComponentsAnalysis]: Automaton has 7 accepting balls. 22
[2020-11-25 02:26:26,047 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:26:26,047 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:26:26,048 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:26:26,048 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_OMAToken0 := false;
[L2]                 call_transfer_OMAToken0 := false;
[L2]     CALL        call main();
[L4541]              assume null == 0;
[L4542]  CALL        call this := FreshRefGenerator__success();
[L2373]              havoc newRef;
[L2374]              assume Alloc[newRef] == false;
[L2375]              Alloc[newRef] := true;
[L2376]              assume newRef != null;
[L4542]  RET         call this := FreshRefGenerator__success();
[L4543]              assume now >= 0;
[L4544]              assume DType[this] == OMAToken;
[L4545]              assume msgvalue_MSG == 0;
[L4546]              gas := gas - 53000;
[L4547]  CALL        call OMAToken_OMAToken(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L712]               havoc __exception;
[L713]               revert := false;
[L714]   COND FALSE  !(__exception)
[L742]   CALL        call OMAToken_OMAToken__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L2754]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2504]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2487]              assume msgsender_MSG != null;
[L2488]              Balance[this] := 0;
[L2489]              owner_Owned[this] := null;
[L2491]              owner_Owned[this] := msgsender_MSG;
[L2504]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]  COND FALSE  !(revert)
[L2754]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2755]  COND FALSE  !(revert)
[L2758]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L2572]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2504]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2487]              assume msgsender_MSG != null;
[L2488]              Balance[this] := 0;
[L2489]              owner_Owned[this] := null;
[L2491]              owner_Owned[this] := msgsender_MSG;
[L2504]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]  COND FALSE  !(revert)
[L2572]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2573]  COND FALSE  !(revert)
[L2576]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2552]              assume msgsender_MSG != null;
[L2553]              Balance[this] := 0;
[L2554]              paused_Pausable[this] := false;
[L2576]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2577]  COND FALSE  !(revert)
[L2758]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L2759]  COND FALSE  !(revert)
[L2762]  CALL        call OMAToken_OMAToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L2711]              assume msgsender_MSG != null;
[L2712]              Balance[this] := 0;
[L2713]              symbol_OMAToken[this] := -641797033;
[L2714]              name_OMAToken[this] := -641797033;
[L2715]              decimals_OMAToken[this] := 18;
[L2716]              totalSupply_OMAToken[this] := 0;
[L2717]              balanceOf_OMAToken[this] := zeroRefintArr();
[L2718]              sum_balanceOf0[this] := 0;
[L2719]              allowance_OMAToken[this] := zeroRefRefintArr();
[L2720]              sum_allowance1[this] := 0;
[L2721]              frozenAccount_OMAToken[this] := zeroRefboolArr();
[L2722]              frozenAmount_OMAToken[this] := zeroRefintArr();
[L2723]              sum_frozenAmount3[this] := 0;
[L2725]              __var_1 := decimals_OMAToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2726]              totalSupply_OMAToken[this] := nonlinearMul(initialSupply_s302, nonlinearPow(10, decimals_OMAToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2727]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_OMAToken[this][msgsender_MSG];
[L2728]              balanceOf_OMAToken[this][msgsender_MSG] := totalSupply_OMAToken[this];
[L2729]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_OMAToken[this][msgsender_MSG];
[L2730]              name_OMAToken[this] := tokenName_s302;
[L2731]              symbol_OMAToken[this] := tokenSymbol_s302;
[L2762]  RET         call OMAToken_OMAToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L2763]  COND FALSE  !(revert)
[L742]   RET         call OMAToken_OMAToken__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L743]               assume !revert && gas >= 0;
[L4547]  RET         call OMAToken_OMAToken(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L4548]              assume !revert && gas >= 0;
[L4551]  CALL        call CorralChoice_OMAToken(this);
[L4342]              havoc msgsender_MSG;
[L4343]              havoc msgvalue_MSG;
[L4344]              havoc choice;
[L4345]              havoc __ret_0_owner;
[L4346]              havoc newOwner_s127;
[L4347]              havoc __ret_0_paused;
[L4348]              havoc __ret_0_symbol;
[L4349]              havoc __ret_0_name;
[L4350]              havoc __ret_0_decimals;
[L4351]              havoc __ret_0_totalSupply;
[L4352]              havoc arg613_s0;
[L4353]              havoc __ret_0_balanceOf;
[L4354]              havoc arg614_s0;
[L4355]              havoc arg615_s0;
[L4356]              havoc __ret_0_allowance;
[L4357]              havoc arg616_s0;
[L4358]              havoc __ret_0_frozenAccount;
[L4359]              havoc arg617_s0;
[L4360]              havoc __ret_0_frozenAmount;
[L4361]              havoc initialSupply_s302;
[L4362]              havoc tokenName_s302;
[L4363]              havoc tokenSymbol_s302;
[L4364]              havoc _to_s401;
[L4365]              havoc _value_s401;
[L4366]              havoc success_s401;
[L4367]              havoc _from_s438;
[L4368]              havoc _to_s438;
[L4369]              havoc _value_s438;
[L4370]              havoc success_s438;
[L4371]              havoc _spender_s468;
[L4372]              havoc _value_s468;
[L4373]              havoc success_s468;
[L4374]              havoc _spender_s508;
[L4375]              havoc _value_s508;
[L4376]              havoc _extraData_s508;
[L4377]              havoc success_s508;
[L4378]              havoc _value_s544;
[L4379]              havoc success_s544;
[L4380]              havoc target_s565;
[L4381]              havoc freeze_s565;
[L4382]              havoc target_s592;
[L4383]              havoc _value_s592;
[L4384]              havoc target_s610;
[L4385]              havoc tmpNow;
[L4386]              havoc gas;
[L4387]              assume gas > 4000000 && gas <= 8000000;
[L4388]              tmpNow := now;
[L4389]              havoc now;
[L4390]              assume now > tmpNow;
[L4391]              assume msgsender_MSG != null;
[L4392]              assume DType[msgsender_MSG] != SafeMath;
[L4393]              assume DType[msgsender_MSG] != Owned;
[L4394]              assume DType[msgsender_MSG] != Pausable;
[L4395]              assume DType[msgsender_MSG] != tokenRecipient;
[L4396]              assume DType[msgsender_MSG] != OMAToken;
[L4397]              Alloc[msgsender_MSG] := true;
[L4398]  COND FALSE  !(choice == 21)
[L4404]  COND FALSE  !(choice == 20)
[L4410]  COND FALSE  !(choice == 19)
[L4416]  COND FALSE  !(choice == 18)
[L4422]  COND TRUE   choice == 17
[L4423]              gas := gas - 21000;
[L4424]  COND TRUE   gas >= 0
[L4425]              assume msgvalue_MSG == 0;
[L4426]  CALL        call unpause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L481]               havoc __exception;
[L482]               revert := false;
[L483]   COND FALSE  !(__exception)
[L511]   CALL        call unpause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L2624]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4032]  COND FALSE  !(!(msgsender_MSG == owner_Owned[this]))
[L2624]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2625]  COND FALSE  !(revert)
[L2628]  CALL        call whenPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4064]  COND FALSE  !(!paused_Pausable[this])
[L2628]  RET         call whenPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2629]  COND FALSE  !(revert)
[L2632]              paused_Pausable[this] := false;
[L2633]              assert { :EventEmitted "Unpause_Pausable" } true;
[L511]   RET         call unpause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L512]               assume !revert && gas >= 0;
[L4426]  RET         call unpause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L4551]  RET         call CorralChoice_OMAToken(this);
[L4551]  CALL        call CorralChoice_OMAToken(this);
[L4342]              havoc msgsender_MSG;
[L4343]              havoc msgvalue_MSG;
[L4344]              havoc choice;
[L4345]              havoc __ret_0_owner;
[L4346]              havoc newOwner_s127;
[L4347]              havoc __ret_0_paused;
[L4348]              havoc __ret_0_symbol;
[L4349]              havoc __ret_0_name;
[L4350]              havoc __ret_0_decimals;
[L4351]              havoc __ret_0_totalSupply;
[L4352]              havoc arg613_s0;
[L4353]              havoc __ret_0_balanceOf;
[L4354]              havoc arg614_s0;
[L4355]              havoc arg615_s0;
[L4356]              havoc __ret_0_allowance;
[L4357]              havoc arg616_s0;
[L4358]              havoc __ret_0_frozenAccount;
[L4359]              havoc arg617_s0;
[L4360]              havoc __ret_0_frozenAmount;
[L4361]              havoc initialSupply_s302;
[L4362]              havoc tokenName_s302;
[L4363]              havoc tokenSymbol_s302;
[L4364]              havoc _to_s401;
[L4365]              havoc _value_s401;
[L4366]              havoc success_s401;
[L4367]              havoc _from_s438;
[L4368]              havoc _to_s438;
[L4369]              havoc _value_s438;
[L4370]              havoc success_s438;
[L4371]              havoc _spender_s468;
[L4372]              havoc _value_s468;
[L4373]              havoc success_s468;
[L4374]              havoc _spender_s508;
[L4375]              havoc _value_s508;
[L4376]              havoc _extraData_s508;
[L4377]              havoc success_s508;
[L4378]              havoc _value_s544;
[L4379]              havoc success_s544;
[L4380]              havoc target_s565;
[L4381]              havoc freeze_s565;
[L4382]              havoc target_s592;
[L4383]              havoc _value_s592;
[L4384]              havoc target_s610;
[L4385]              havoc tmpNow;
[L4386]              havoc gas;
[L4387]              assume gas > 4000000 && gas <= 8000000;
[L4388]              tmpNow := now;
[L4389]              havoc now;
[L4390]              assume now > tmpNow;
[L4391]              assume msgsender_MSG != null;
[L4392]              assume DType[msgsender_MSG] != SafeMath;
[L4393]              assume DType[msgsender_MSG] != Owned;
[L4394]              assume DType[msgsender_MSG] != Pausable;
[L4395]              assume DType[msgsender_MSG] != tokenRecipient;
[L4396]              assume DType[msgsender_MSG] != OMAToken;
[L4397]              Alloc[msgsender_MSG] := true;
[L4398]  COND FALSE  !(choice == 21)
[L4404]  COND FALSE  !(choice == 20)
[L4410]  COND FALSE  !(choice == 19)
[L4416]  COND FALSE  !(choice == 18)
[L4422]  COND FALSE  !(choice == 17)
[L4428]  COND FALSE  !(choice == 16)
[L4434]  COND FALSE  !(choice == 15)
[L4440]  COND FALSE  !(choice == 14)
[L4446]  COND FALSE  !(choice == 13)
[L4452]  COND FALSE  !(choice == 12)
[L4458]  COND FALSE  !(choice == 11)
[L4464]  COND FALSE  !(choice == 10)
[L4470]  COND FALSE  !(choice == 9)
[L4476]  COND TRUE   choice == 8
[L4477]              gas := gas - 21000;
[L4478]  COND TRUE   gas >= 0
[L4479]              assume _value_s401 >= 0 && _value_s401 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4480]              assume msgvalue_MSG == 0;
[L4481]  CALL        call success_s401 := transfer~address~uint256_OMAToken(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s401 && _value_s401 <= balanceOf_OMAToken[this][msgsender_MSG]) && _value_s401 >= 0) && _value_s401 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_OMAToken[this][_to_s401] >= 0) && balanceOf_OMAToken[this][_to_s401] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_OMAToken[this][msgsender_MSG] >= 0) && balanceOf_OMAToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_OMAToken0 := true;
[L2]                 call_transfer_OMAToken0 := false;
[L2]                 revert := revert_hold;
[L782]               havoc __exception;
[L783]               revert := false;
[L784]   COND TRUE   __exception
[L785]               __tmp__Balance := Balance;
[L786]               __tmp__DType := DType;
[L787]               __tmp__Alloc := Alloc;
[L788]               __tmp__balance_ADDR := balance_ADDR;
[L789]               __tmp__M_Ref_int := M_Ref_int;
[L790]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L791]               __tmp__alloc_allowance_OMAToken_lvl0 := alloc_allowance_OMAToken_lvl0;
[L792]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L793]               __tmp__sum_allowance1 := sum_allowance1;
[L794]               __tmp__M_Ref_bool := M_Ref_bool;
[L795]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L796]               __tmp__sum_frozenAmount3 := sum_frozenAmount3;
[L797]               __tmp__Length := Length;
[L798]               __tmp__now := now;
[L799]               __tmp__owner_Owned := owner_Owned;
[L800]               __tmp__paused_Pausable := paused_Pausable;
[L801]               __tmp__symbol_OMAToken := symbol_OMAToken;
[L802]               __tmp__name_OMAToken := name_OMAToken;
[L803]               __tmp__decimals_OMAToken := decimals_OMAToken;
[L804]               __tmp__totalSupply_OMAToken := totalSupply_OMAToken;
[L805]               __tmp__balanceOf_OMAToken := balanceOf_OMAToken;
[L806]               __tmp__allowance_OMAToken := allowance_OMAToken;
[L807]               __tmp__frozenAccount_OMAToken := frozenAccount_OMAToken;
[L808]               __tmp__frozenAmount_OMAToken := frozenAmount_OMAToken;
[L809]   CALL        call success_s401 := transfer~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L2857]  CALL        call _transfer~address~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s401, _value_s401);
[L2773]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4040]  COND TRUE   !!__tmp__paused_Pausable[this]
[L4041]              revert := true;
[L2773]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L2774]  COND TRUE   revert
[L2857]  RET         call _transfer~address~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s401, _value_s401);
[L2858]  COND TRUE   revert
[L809]   RET         call success_s401 := transfer~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L810]               assume revert || gas < 0;
[L4481]  RET         call success_s401 := transfer~address~uint256_OMAToken(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L4551]  RET         call CorralChoice_OMAToken(this);

Loop:
[L4551]  CALL        call CorralChoice_OMAToken(this);
[L4342]              havoc msgsender_MSG;
[L4343]              havoc msgvalue_MSG;
[L4344]              havoc choice;
[L4345]              havoc __ret_0_owner;
[L4346]              havoc newOwner_s127;
[L4347]              havoc __ret_0_paused;
[L4348]              havoc __ret_0_symbol;
[L4349]              havoc __ret_0_name;
[L4350]              havoc __ret_0_decimals;
[L4351]              havoc __ret_0_totalSupply;
[L4352]              havoc arg613_s0;
[L4353]              havoc __ret_0_balanceOf;
[L4354]              havoc arg614_s0;
[L4355]              havoc arg615_s0;
[L4356]              havoc __ret_0_allowance;
[L4357]              havoc arg616_s0;
[L4358]              havoc __ret_0_frozenAccount;
[L4359]              havoc arg617_s0;
[L4360]              havoc __ret_0_frozenAmount;
[L4361]              havoc initialSupply_s302;
[L4362]              havoc tokenName_s302;
[L4363]              havoc tokenSymbol_s302;
[L4364]              havoc _to_s401;
[L4365]              havoc _value_s401;
[L4366]              havoc success_s401;
[L4367]              havoc _from_s438;
[L4368]              havoc _to_s438;
[L4369]              havoc _value_s438;
[L4370]              havoc success_s438;
[L4371]              havoc _spender_s468;
[L4372]              havoc _value_s468;
[L4373]              havoc success_s468;
[L4374]              havoc _spender_s508;
[L4375]              havoc _value_s508;
[L4376]              havoc _extraData_s508;
[L4377]              havoc success_s508;
[L4378]              havoc _value_s544;
[L4379]              havoc success_s544;
[L4380]              havoc target_s565;
[L4381]              havoc freeze_s565;
[L4382]              havoc target_s592;
[L4383]              havoc _value_s592;
[L4384]              havoc target_s610;
[L4385]              havoc tmpNow;
[L4386]              havoc gas;
[L4387]              assume gas > 4000000 && gas <= 8000000;
[L4388]              tmpNow := now;
[L4389]              havoc now;
[L4390]              assume now > tmpNow;
[L4391]              assume msgsender_MSG != null;
[L4392]              assume DType[msgsender_MSG] != SafeMath;
[L4393]              assume DType[msgsender_MSG] != Owned;
[L4394]              assume DType[msgsender_MSG] != Pausable;
[L4395]              assume DType[msgsender_MSG] != tokenRecipient;
[L4396]              assume DType[msgsender_MSG] != OMAToken;
[L4397]              Alloc[msgsender_MSG] := true;
[L4398]  COND FALSE  !(choice == 21)
[L4404]  COND TRUE   choice == 20
[L4405]              gas := gas - 21000;
[L4406]  COND TRUE   gas >= 0
[L4407]              assume msgvalue_MSG == 0;
[L4408]  CALL        call transferOwnership~address_Owned(this, msgsender_MSG, msgvalue_MSG, newOwner_s127);
[L216]               havoc __exception;
[L217]               revert := false;
[L218]   COND TRUE   __exception
[L219]               __tmp__Balance := Balance;
[L220]               __tmp__DType := DType;
[L221]               __tmp__Alloc := Alloc;
[L222]               __tmp__balance_ADDR := balance_ADDR;
[L223]               __tmp__M_Ref_int := M_Ref_int;
[L224]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L225]               __tmp__alloc_allowance_OMAToken_lvl0 := alloc_allowance_OMAToken_lvl0;
[L226]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L227]               __tmp__sum_allowance1 := sum_allowance1;
[L228]               __tmp__M_Ref_bool := M_Ref_bool;
[L229]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L230]               __tmp__sum_frozenAmount3 := sum_frozenAmount3;
[L231]               __tmp__Length := Length;
[L232]               __tmp__now := now;
[L233]               __tmp__owner_Owned := owner_Owned;
[L234]               __tmp__paused_Pausable := paused_Pausable;
[L235]               __tmp__symbol_OMAToken := symbol_OMAToken;
[L236]               __tmp__name_OMAToken := name_OMAToken;
[L237]               __tmp__decimals_OMAToken := decimals_OMAToken;
[L238]               __tmp__totalSupply_OMAToken := totalSupply_OMAToken;
[L239]               __tmp__balanceOf_OMAToken := balanceOf_OMAToken;
[L240]               __tmp__allowance_OMAToken := allowance_OMAToken;
[L241]               __tmp__frozenAccount_OMAToken := frozenAccount_OMAToken;
[L242]               __tmp__frozenAmount_OMAToken := frozenAmount_OMAToken;
[L243]   CALL        call transferOwnership~address_Owned__fail(this, msgsender_MSG, msgvalue_MSG, newOwner_s127);
[L2512]  CALL        call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4024]  COND TRUE   !(msgsender_MSG == __tmp__owner_Owned[this])
[L4025]              revert := true;
[L2512]  RET         call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L2513]  COND TRUE   revert
[L243]   RET         call transferOwnership~address_Owned__fail(this, msgsender_MSG, msgvalue_MSG, newOwner_s127);
[L244]               assume revert || gas < 0;
[L4408]  RET         call transferOwnership~address_Owned(this, msgsender_MSG, msgvalue_MSG, newOwner_s127);
[L4551]  RET         call CorralChoice_OMAToken(this);

[2020-11-25 02:26:26,051 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:26:26,051 INFO  L82        PathProgramCache]: Analyzing trace with hash 2070098469, now seen corresponding path program 1 times
[2020-11-25 02:26:26,052 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:26:26,060 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:26:26,108 INFO  L134       CoverageAnalysis]: Checked inductivity of 75 backedges. 1 proven. 62 refuted. 0 times theorem prover too weak. 12 trivial. 0 not checked.
[2020-11-25 02:26:26,108 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:26:26,108 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [13] total 13
[2020-11-25 02:26:26,109 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:26:26,109 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-11-25 02:26:26,109 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=131, Unknown=0, NotChecked=0, Total=156
[2020-11-25 02:26:26,109 INFO  L87              Difference]: Start difference. First operand 3649 states and 4228 transitions. cyclomatic complexity: 598 Second operand 13 states.
[2020-11-25 02:26:26,832 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:26:26,832 INFO  L93              Difference]: Finished difference Result 3657 states and 4246 transitions.
[2020-11-25 02:26:26,832 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-11-25 02:26:26,832 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3657 states and 4246 transitions.
[2020-11-25 02:26:26,840 INFO  L131   ngComponentsAnalysis]: Automaton has 7 accepting balls. 22
[2020-11-25 02:26:26,849 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3657 states to 3657 states and 4246 transitions.
[2020-11-25 02:26:26,849 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 924
[2020-11-25 02:26:26,850 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 924
[2020-11-25 02:26:26,850 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3657 states and 4246 transitions.
[2020-11-25 02:26:26,852 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:26:26,852 INFO  L728         BuchiCegarLoop]: Abstraction has 3657 states and 4246 transitions.
[2020-11-25 02:26:26,854 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3657 states and 4246 transitions.
[2020-11-25 02:26:26,872 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3657 to 3657.
[2020-11-25 02:26:26,872 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3657 states.
[2020-11-25 02:26:26,877 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3657 states to 3657 states and 4246 transitions.
[2020-11-25 02:26:26,877 INFO  L751         BuchiCegarLoop]: Abstraction has 3657 states and 4246 transitions.
[2020-11-25 02:26:26,877 INFO  L631         BuchiCegarLoop]: Abstraction has 3657 states and 4246 transitions.
[2020-11-25 02:26:26,877 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 02:26:26,877 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3657 states and 4246 transitions.
[2020-11-25 02:26:26,881 INFO  L131   ngComponentsAnalysis]: Automaton has 7 accepting balls. 22
[2020-11-25 02:26:26,881 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:26:26,881 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:26:26,882 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:26:26,882 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_OMAToken0 := false;
[L2]                 call_transfer_OMAToken0 := false;
[L2]     CALL        call main();
[L4541]              assume null == 0;
[L4542]  CALL        call this := FreshRefGenerator__success();
[L2373]              havoc newRef;
[L2374]              assume Alloc[newRef] == false;
[L2375]              Alloc[newRef] := true;
[L2376]              assume newRef != null;
[L4542]  RET         call this := FreshRefGenerator__success();
[L4543]              assume now >= 0;
[L4544]              assume DType[this] == OMAToken;
[L4545]              assume msgvalue_MSG == 0;
[L4546]              gas := gas - 53000;
[L4547]  CALL        call OMAToken_OMAToken(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L712]               havoc __exception;
[L713]               revert := false;
[L714]   COND FALSE  !(__exception)
[L742]   CALL        call OMAToken_OMAToken__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L2754]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2504]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2487]              assume msgsender_MSG != null;
[L2488]              Balance[this] := 0;
[L2489]              owner_Owned[this] := null;
[L2491]              owner_Owned[this] := msgsender_MSG;
[L2504]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]  COND FALSE  !(revert)
[L2754]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2755]  COND FALSE  !(revert)
[L2758]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L2572]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2504]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2487]              assume msgsender_MSG != null;
[L2488]              Balance[this] := 0;
[L2489]              owner_Owned[this] := null;
[L2491]              owner_Owned[this] := msgsender_MSG;
[L2504]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]  COND FALSE  !(revert)
[L2572]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2573]  COND FALSE  !(revert)
[L2576]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2552]              assume msgsender_MSG != null;
[L2553]              Balance[this] := 0;
[L2554]              paused_Pausable[this] := false;
[L2576]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2577]  COND FALSE  !(revert)
[L2758]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L2759]  COND FALSE  !(revert)
[L2762]  CALL        call OMAToken_OMAToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L2711]              assume msgsender_MSG != null;
[L2712]              Balance[this] := 0;
[L2713]              symbol_OMAToken[this] := -641797033;
[L2714]              name_OMAToken[this] := -641797033;
[L2715]              decimals_OMAToken[this] := 18;
[L2716]              totalSupply_OMAToken[this] := 0;
[L2717]              balanceOf_OMAToken[this] := zeroRefintArr();
[L2718]              sum_balanceOf0[this] := 0;
[L2719]              allowance_OMAToken[this] := zeroRefRefintArr();
[L2720]              sum_allowance1[this] := 0;
[L2721]              frozenAccount_OMAToken[this] := zeroRefboolArr();
[L2722]              frozenAmount_OMAToken[this] := zeroRefintArr();
[L2723]              sum_frozenAmount3[this] := 0;
[L2725]              __var_1 := decimals_OMAToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2726]              totalSupply_OMAToken[this] := nonlinearMul(initialSupply_s302, nonlinearPow(10, decimals_OMAToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2727]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_OMAToken[this][msgsender_MSG];
[L2728]              balanceOf_OMAToken[this][msgsender_MSG] := totalSupply_OMAToken[this];
[L2729]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_OMAToken[this][msgsender_MSG];
[L2730]              name_OMAToken[this] := tokenName_s302;
[L2731]              symbol_OMAToken[this] := tokenSymbol_s302;
[L2762]  RET         call OMAToken_OMAToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L2763]  COND FALSE  !(revert)
[L742]   RET         call OMAToken_OMAToken__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L743]               assume !revert && gas >= 0;
[L4547]  RET         call OMAToken_OMAToken(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L4548]              assume !revert && gas >= 0;
[L4551]  CALL        call CorralChoice_OMAToken(this);
[L4342]              havoc msgsender_MSG;
[L4343]              havoc msgvalue_MSG;
[L4344]              havoc choice;
[L4345]              havoc __ret_0_owner;
[L4346]              havoc newOwner_s127;
[L4347]              havoc __ret_0_paused;
[L4348]              havoc __ret_0_symbol;
[L4349]              havoc __ret_0_name;
[L4350]              havoc __ret_0_decimals;
[L4351]              havoc __ret_0_totalSupply;
[L4352]              havoc arg613_s0;
[L4353]              havoc __ret_0_balanceOf;
[L4354]              havoc arg614_s0;
[L4355]              havoc arg615_s0;
[L4356]              havoc __ret_0_allowance;
[L4357]              havoc arg616_s0;
[L4358]              havoc __ret_0_frozenAccount;
[L4359]              havoc arg617_s0;
[L4360]              havoc __ret_0_frozenAmount;
[L4361]              havoc initialSupply_s302;
[L4362]              havoc tokenName_s302;
[L4363]              havoc tokenSymbol_s302;
[L4364]              havoc _to_s401;
[L4365]              havoc _value_s401;
[L4366]              havoc success_s401;
[L4367]              havoc _from_s438;
[L4368]              havoc _to_s438;
[L4369]              havoc _value_s438;
[L4370]              havoc success_s438;
[L4371]              havoc _spender_s468;
[L4372]              havoc _value_s468;
[L4373]              havoc success_s468;
[L4374]              havoc _spender_s508;
[L4375]              havoc _value_s508;
[L4376]              havoc _extraData_s508;
[L4377]              havoc success_s508;
[L4378]              havoc _value_s544;
[L4379]              havoc success_s544;
[L4380]              havoc target_s565;
[L4381]              havoc freeze_s565;
[L4382]              havoc target_s592;
[L4383]              havoc _value_s592;
[L4384]              havoc target_s610;
[L4385]              havoc tmpNow;
[L4386]              havoc gas;
[L4387]              assume gas > 4000000 && gas <= 8000000;
[L4388]              tmpNow := now;
[L4389]              havoc now;
[L4390]              assume now > tmpNow;
[L4391]              assume msgsender_MSG != null;
[L4392]              assume DType[msgsender_MSG] != SafeMath;
[L4393]              assume DType[msgsender_MSG] != Owned;
[L4394]              assume DType[msgsender_MSG] != Pausable;
[L4395]              assume DType[msgsender_MSG] != tokenRecipient;
[L4396]              assume DType[msgsender_MSG] != OMAToken;
[L4397]              Alloc[msgsender_MSG] := true;
[L4398]  COND FALSE  !(choice == 21)
[L4404]  COND FALSE  !(choice == 20)
[L4410]  COND FALSE  !(choice == 19)
[L4416]  COND FALSE  !(choice == 18)
[L4422]  COND FALSE  !(choice == 17)
[L4428]  COND FALSE  !(choice == 16)
[L4434]  COND FALSE  !(choice == 15)
[L4440]  COND FALSE  !(choice == 14)
[L4446]  COND FALSE  !(choice == 13)
[L4452]  COND FALSE  !(choice == 12)
[L4458]  COND FALSE  !(choice == 11)
[L4464]  COND FALSE  !(choice == 10)
[L4470]  COND FALSE  !(choice == 9)
[L4476]  COND FALSE  !(choice == 8)
[L4483]  COND FALSE  !(choice == 7)
[L4490]  COND FALSE  !(choice == 6)
[L4497]  COND FALSE  !(choice == 5)
[L4504]  COND FALSE  !(choice == 4)
[L4511]  COND FALSE  !(choice == 3)
[L4517]  COND FALSE  !(choice == 2)
[L4524]  COND TRUE   choice == 1
[L4525]              gas := gas - 21000;
[L4526]  COND TRUE   gas >= 0
[L4527]              assume msgvalue_MSG == 0;
[L4528]  CALL        call unfreezeAmount~address_OMAToken(this, msgsender_MSG, msgvalue_MSG, target_s610);
[L1246]              havoc __exception;
[L1247]              revert := false;
[L1248]  COND FALSE  !(__exception)
[L1276]  CALL        call unfreezeAmount~address_OMAToken__success(this, msgsender_MSG, msgvalue_MSG, target_s610);
[L3090]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4032]  COND FALSE  !(!(msgsender_MSG == owner_Owned[this]))
[L3090]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3091]  COND FALSE  !(revert)
[L3094]              sum_frozenAmount3[this] := sum_frozenAmount3[this] - frozenAmount_OMAToken[this][target_s610];
[L3095]              frozenAmount_OMAToken[this][target_s610] := 0;
[L3096]              sum_frozenAmount3[this] := sum_frozenAmount3[this] + frozenAmount_OMAToken[this][target_s610];
[L3097]              assert { :EventEmitted "UnfrozenAmt_OMAToken" } true;
[L1276]  RET         call unfreezeAmount~address_OMAToken__success(this, msgsender_MSG, msgvalue_MSG, target_s610);
[L1277]              assume !revert && gas >= 0;
[L4528]  RET         call unfreezeAmount~address_OMAToken(this, msgsender_MSG, msgvalue_MSG, target_s610);
[L4551]  RET         call CorralChoice_OMAToken(this);
[L4551]  CALL        call CorralChoice_OMAToken(this);
[L4342]              havoc msgsender_MSG;
[L4343]              havoc msgvalue_MSG;
[L4344]              havoc choice;
[L4345]              havoc __ret_0_owner;
[L4346]              havoc newOwner_s127;
[L4347]              havoc __ret_0_paused;
[L4348]              havoc __ret_0_symbol;
[L4349]              havoc __ret_0_name;
[L4350]              havoc __ret_0_decimals;
[L4351]              havoc __ret_0_totalSupply;
[L4352]              havoc arg613_s0;
[L4353]              havoc __ret_0_balanceOf;
[L4354]              havoc arg614_s0;
[L4355]              havoc arg615_s0;
[L4356]              havoc __ret_0_allowance;
[L4357]              havoc arg616_s0;
[L4358]              havoc __ret_0_frozenAccount;
[L4359]              havoc arg617_s0;
[L4360]              havoc __ret_0_frozenAmount;
[L4361]              havoc initialSupply_s302;
[L4362]              havoc tokenName_s302;
[L4363]              havoc tokenSymbol_s302;
[L4364]              havoc _to_s401;
[L4365]              havoc _value_s401;
[L4366]              havoc success_s401;
[L4367]              havoc _from_s438;
[L4368]              havoc _to_s438;
[L4369]              havoc _value_s438;
[L4370]              havoc success_s438;
[L4371]              havoc _spender_s468;
[L4372]              havoc _value_s468;
[L4373]              havoc success_s468;
[L4374]              havoc _spender_s508;
[L4375]              havoc _value_s508;
[L4376]              havoc _extraData_s508;
[L4377]              havoc success_s508;
[L4378]              havoc _value_s544;
[L4379]              havoc success_s544;
[L4380]              havoc target_s565;
[L4381]              havoc freeze_s565;
[L4382]              havoc target_s592;
[L4383]              havoc _value_s592;
[L4384]              havoc target_s610;
[L4385]              havoc tmpNow;
[L4386]              havoc gas;
[L4387]              assume gas > 4000000 && gas <= 8000000;
[L4388]              tmpNow := now;
[L4389]              havoc now;
[L4390]              assume now > tmpNow;
[L4391]              assume msgsender_MSG != null;
[L4392]              assume DType[msgsender_MSG] != SafeMath;
[L4393]              assume DType[msgsender_MSG] != Owned;
[L4394]              assume DType[msgsender_MSG] != Pausable;
[L4395]              assume DType[msgsender_MSG] != tokenRecipient;
[L4396]              assume DType[msgsender_MSG] != OMAToken;
[L4397]              Alloc[msgsender_MSG] := true;
[L4398]  COND FALSE  !(choice == 21)
[L4404]  COND FALSE  !(choice == 20)
[L4410]  COND FALSE  !(choice == 19)
[L4416]  COND FALSE  !(choice == 18)
[L4422]  COND FALSE  !(choice == 17)
[L4428]  COND FALSE  !(choice == 16)
[L4434]  COND FALSE  !(choice == 15)
[L4440]  COND FALSE  !(choice == 14)
[L4446]  COND FALSE  !(choice == 13)
[L4452]  COND FALSE  !(choice == 12)
[L4458]  COND FALSE  !(choice == 11)
[L4464]  COND FALSE  !(choice == 10)
[L4470]  COND FALSE  !(choice == 9)
[L4476]  COND TRUE   choice == 8
[L4477]              gas := gas - 21000;
[L4478]  COND TRUE   gas >= 0
[L4479]              assume _value_s401 >= 0 && _value_s401 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4480]              assume msgvalue_MSG == 0;
[L4481]  CALL        call success_s401 := transfer~address~uint256_OMAToken(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s401 && _value_s401 <= balanceOf_OMAToken[this][msgsender_MSG]) && _value_s401 >= 0) && _value_s401 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_OMAToken[this][_to_s401] >= 0) && balanceOf_OMAToken[this][_to_s401] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_OMAToken[this][msgsender_MSG] >= 0) && balanceOf_OMAToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_OMAToken0 := true;
[L2]                 call_transfer_OMAToken0 := false;
[L2]                 revert := revert_hold;
[L782]               havoc __exception;
[L783]               revert := false;
[L784]   COND TRUE   __exception
[L785]               __tmp__Balance := Balance;
[L786]               __tmp__DType := DType;
[L787]               __tmp__Alloc := Alloc;
[L788]               __tmp__balance_ADDR := balance_ADDR;
[L789]               __tmp__M_Ref_int := M_Ref_int;
[L790]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L791]               __tmp__alloc_allowance_OMAToken_lvl0 := alloc_allowance_OMAToken_lvl0;
[L792]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L793]               __tmp__sum_allowance1 := sum_allowance1;
[L794]               __tmp__M_Ref_bool := M_Ref_bool;
[L795]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L796]               __tmp__sum_frozenAmount3 := sum_frozenAmount3;
[L797]               __tmp__Length := Length;
[L798]               __tmp__now := now;
[L799]               __tmp__owner_Owned := owner_Owned;
[L800]               __tmp__paused_Pausable := paused_Pausable;
[L801]               __tmp__symbol_OMAToken := symbol_OMAToken;
[L802]               __tmp__name_OMAToken := name_OMAToken;
[L803]               __tmp__decimals_OMAToken := decimals_OMAToken;
[L804]               __tmp__totalSupply_OMAToken := totalSupply_OMAToken;
[L805]               __tmp__balanceOf_OMAToken := balanceOf_OMAToken;
[L806]               __tmp__allowance_OMAToken := allowance_OMAToken;
[L807]               __tmp__frozenAccount_OMAToken := frozenAccount_OMAToken;
[L808]               __tmp__frozenAmount_OMAToken := frozenAmount_OMAToken;
[L809]   CALL        call success_s401 := transfer~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L2857]  CALL        call _transfer~address~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s401, _value_s401);
[L2773]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4040]  COND FALSE  !(!!__tmp__paused_Pausable[this])
[L2773]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L2774]  COND FALSE  !(revert)
[L2777]              __var_2 := null;
[L2778]  COND FALSE  !(!(_to_s382 != null))
[L2782]  COND FALSE  !(!!__tmp__frozenAccount_OMAToken[this][_from_s382])
[L2786]  COND FALSE  !(!!__tmp__frozenAccount_OMAToken[this][_to_s382])
[L2790]  CALL        call amount_s382 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balanceOf_OMAToken[this][_from_s382], _value_s382);
[L2448]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2790]  RET         call amount_s382 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balanceOf_OMAToken[this][_from_s382], _value_s382);
[L2791]  COND FALSE  !(revert)
[L2794]              amount_s382 := amount_s382;
[L2795]  COND TRUE   !(__tmp__frozenAmount_OMAToken[this][_from_s382] == 0 || amount_s382 >= __tmp__frozenAmount_OMAToken[this][_from_s382])
[L2796]              revert := true;
[L2857]  RET         call _transfer~address~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s401, _value_s401);
[L2858]  COND TRUE   revert
[L809]   RET         call success_s401 := transfer~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L810]               assume revert || gas < 0;
[L4481]  RET         call success_s401 := transfer~address~uint256_OMAToken(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L4551]  RET         call CorralChoice_OMAToken(this);

Loop:
[L4551]  CALL        call CorralChoice_OMAToken(this);
[L4342]              havoc msgsender_MSG;
[L4343]              havoc msgvalue_MSG;
[L4344]              havoc choice;
[L4345]              havoc __ret_0_owner;
[L4346]              havoc newOwner_s127;
[L4347]              havoc __ret_0_paused;
[L4348]              havoc __ret_0_symbol;
[L4349]              havoc __ret_0_name;
[L4350]              havoc __ret_0_decimals;
[L4351]              havoc __ret_0_totalSupply;
[L4352]              havoc arg613_s0;
[L4353]              havoc __ret_0_balanceOf;
[L4354]              havoc arg614_s0;
[L4355]              havoc arg615_s0;
[L4356]              havoc __ret_0_allowance;
[L4357]              havoc arg616_s0;
[L4358]              havoc __ret_0_frozenAccount;
[L4359]              havoc arg617_s0;
[L4360]              havoc __ret_0_frozenAmount;
[L4361]              havoc initialSupply_s302;
[L4362]              havoc tokenName_s302;
[L4363]              havoc tokenSymbol_s302;
[L4364]              havoc _to_s401;
[L4365]              havoc _value_s401;
[L4366]              havoc success_s401;
[L4367]              havoc _from_s438;
[L4368]              havoc _to_s438;
[L4369]              havoc _value_s438;
[L4370]              havoc success_s438;
[L4371]              havoc _spender_s468;
[L4372]              havoc _value_s468;
[L4373]              havoc success_s468;
[L4374]              havoc _spender_s508;
[L4375]              havoc _value_s508;
[L4376]              havoc _extraData_s508;
[L4377]              havoc success_s508;
[L4378]              havoc _value_s544;
[L4379]              havoc success_s544;
[L4380]              havoc target_s565;
[L4381]              havoc freeze_s565;
[L4382]              havoc target_s592;
[L4383]              havoc _value_s592;
[L4384]              havoc target_s610;
[L4385]              havoc tmpNow;
[L4386]              havoc gas;
[L4387]              assume gas > 4000000 && gas <= 8000000;
[L4388]              tmpNow := now;
[L4389]              havoc now;
[L4390]              assume now > tmpNow;
[L4391]              assume msgsender_MSG != null;
[L4392]              assume DType[msgsender_MSG] != SafeMath;
[L4393]              assume DType[msgsender_MSG] != Owned;
[L4394]              assume DType[msgsender_MSG] != Pausable;
[L4395]              assume DType[msgsender_MSG] != tokenRecipient;
[L4396]              assume DType[msgsender_MSG] != OMAToken;
[L4397]              Alloc[msgsender_MSG] := true;
[L4398]  COND TRUE   choice == 21
[L4399]              gas := gas - 21000;
[L4400]  COND FALSE  !(gas >= 0)
[L4551]  RET         call CorralChoice_OMAToken(this);

[2020-11-25 02:26:26,885 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:26:26,885 INFO  L82        PathProgramCache]: Analyzing trace with hash 83003161, now seen corresponding path program 1 times
[2020-11-25 02:26:26,885 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:26:26,895 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:26:26,974 INFO  L134       CoverageAnalysis]: Checked inductivity of 84 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 84 trivial. 0 not checked.
[2020-11-25 02:26:26,974 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:26:26,974 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [14] imperfect sequences [] total 14
[2020-11-25 02:26:26,974 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:26:26,974 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 15 interpolants.
[2020-11-25 02:26:26,974 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=29, Invalid=181, Unknown=0, NotChecked=0, Total=210
[2020-11-25 02:26:26,975 INFO  L87              Difference]: Start difference. First operand 3657 states and 4246 transitions. cyclomatic complexity: 608 Second operand 15 states.
[2020-11-25 02:26:28,270 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:26:28,270 INFO  L93              Difference]: Finished difference Result 4239 states and 5005 transitions.
[2020-11-25 02:26:28,270 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 02:26:28,271 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4239 states and 5005 transitions.
[2020-11-25 02:26:28,280 INFO  L131   ngComponentsAnalysis]: Automaton has 11 accepting balls. 38
[2020-11-25 02:26:28,291 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4239 states to 4239 states and 5005 transitions.
[2020-11-25 02:26:28,291 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 951
[2020-11-25 02:26:28,291 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 951
[2020-11-25 02:26:28,291 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4239 states and 5005 transitions.
[2020-11-25 02:26:28,294 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:26:28,294 INFO  L728         BuchiCegarLoop]: Abstraction has 4239 states and 5005 transitions.
[2020-11-25 02:26:28,296 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4239 states and 5005 transitions.
[2020-11-25 02:26:28,319 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4239 to 3693.
[2020-11-25 02:26:28,319 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3693 states.
[2020-11-25 02:26:28,325 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3693 states to 3693 states and 4459 transitions.
[2020-11-25 02:26:28,325 INFO  L751         BuchiCegarLoop]: Abstraction has 3693 states and 4459 transitions.
[2020-11-25 02:26:28,325 INFO  L631         BuchiCegarLoop]: Abstraction has 3693 states and 4459 transitions.
[2020-11-25 02:26:28,325 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 02:26:28,325 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3693 states and 4459 transitions.
[2020-11-25 02:26:28,329 INFO  L131   ngComponentsAnalysis]: Automaton has 11 accepting balls. 38
[2020-11-25 02:26:28,329 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:26:28,329 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:26:28,330 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:26:28,330 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_OMAToken0 := false;
[L2]                 call_transfer_OMAToken0 := false;
[L2]     CALL        call main();
[L4541]              assume null == 0;
[L4542]  CALL        call this := FreshRefGenerator__success();
[L2373]              havoc newRef;
[L2374]              assume Alloc[newRef] == false;
[L2375]              Alloc[newRef] := true;
[L2376]              assume newRef != null;
[L4542]  RET         call this := FreshRefGenerator__success();
[L4543]              assume now >= 0;
[L4544]              assume DType[this] == OMAToken;
[L4545]              assume msgvalue_MSG == 0;
[L4546]              gas := gas - 53000;
[L4547]  CALL        call OMAToken_OMAToken(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L712]               havoc __exception;
[L713]               revert := false;
[L714]   COND FALSE  !(__exception)
[L742]   CALL        call OMAToken_OMAToken__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L2754]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2504]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2487]              assume msgsender_MSG != null;
[L2488]              Balance[this] := 0;
[L2489]              owner_Owned[this] := null;
[L2491]              owner_Owned[this] := msgsender_MSG;
[L2504]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]  COND FALSE  !(revert)
[L2754]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2755]  COND FALSE  !(revert)
[L2758]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L2572]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2504]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2487]              assume msgsender_MSG != null;
[L2488]              Balance[this] := 0;
[L2489]              owner_Owned[this] := null;
[L2491]              owner_Owned[this] := msgsender_MSG;
[L2504]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]  COND FALSE  !(revert)
[L2572]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2573]  COND FALSE  !(revert)
[L2576]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2552]              assume msgsender_MSG != null;
[L2553]              Balance[this] := 0;
[L2554]              paused_Pausable[this] := false;
[L2576]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2577]  COND FALSE  !(revert)
[L2758]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L2759]  COND FALSE  !(revert)
[L2762]  CALL        call OMAToken_OMAToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L2711]              assume msgsender_MSG != null;
[L2712]              Balance[this] := 0;
[L2713]              symbol_OMAToken[this] := -641797033;
[L2714]              name_OMAToken[this] := -641797033;
[L2715]              decimals_OMAToken[this] := 18;
[L2716]              totalSupply_OMAToken[this] := 0;
[L2717]              balanceOf_OMAToken[this] := zeroRefintArr();
[L2718]              sum_balanceOf0[this] := 0;
[L2719]              allowance_OMAToken[this] := zeroRefRefintArr();
[L2720]              sum_allowance1[this] := 0;
[L2721]              frozenAccount_OMAToken[this] := zeroRefboolArr();
[L2722]              frozenAmount_OMAToken[this] := zeroRefintArr();
[L2723]              sum_frozenAmount3[this] := 0;
[L2725]              __var_1 := decimals_OMAToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2726]              totalSupply_OMAToken[this] := nonlinearMul(initialSupply_s302, nonlinearPow(10, decimals_OMAToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2727]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_OMAToken[this][msgsender_MSG];
[L2728]              balanceOf_OMAToken[this][msgsender_MSG] := totalSupply_OMAToken[this];
[L2729]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_OMAToken[this][msgsender_MSG];
[L2730]              name_OMAToken[this] := tokenName_s302;
[L2731]              symbol_OMAToken[this] := tokenSymbol_s302;
[L2762]  RET         call OMAToken_OMAToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L2763]  COND FALSE  !(revert)
[L742]   RET         call OMAToken_OMAToken__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L743]               assume !revert && gas >= 0;
[L4547]  RET         call OMAToken_OMAToken(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L4548]              assume !revert && gas >= 0;
[L4551]  CALL        call CorralChoice_OMAToken(this);
[L4342]              havoc msgsender_MSG;
[L4343]              havoc msgvalue_MSG;
[L4344]              havoc choice;
[L4345]              havoc __ret_0_owner;
[L4346]              havoc newOwner_s127;
[L4347]              havoc __ret_0_paused;
[L4348]              havoc __ret_0_symbol;
[L4349]              havoc __ret_0_name;
[L4350]              havoc __ret_0_decimals;
[L4351]              havoc __ret_0_totalSupply;
[L4352]              havoc arg613_s0;
[L4353]              havoc __ret_0_balanceOf;
[L4354]              havoc arg614_s0;
[L4355]              havoc arg615_s0;
[L4356]              havoc __ret_0_allowance;
[L4357]              havoc arg616_s0;
[L4358]              havoc __ret_0_frozenAccount;
[L4359]              havoc arg617_s0;
[L4360]              havoc __ret_0_frozenAmount;
[L4361]              havoc initialSupply_s302;
[L4362]              havoc tokenName_s302;
[L4363]              havoc tokenSymbol_s302;
[L4364]              havoc _to_s401;
[L4365]              havoc _value_s401;
[L4366]              havoc success_s401;
[L4367]              havoc _from_s438;
[L4368]              havoc _to_s438;
[L4369]              havoc _value_s438;
[L4370]              havoc success_s438;
[L4371]              havoc _spender_s468;
[L4372]              havoc _value_s468;
[L4373]              havoc success_s468;
[L4374]              havoc _spender_s508;
[L4375]              havoc _value_s508;
[L4376]              havoc _extraData_s508;
[L4377]              havoc success_s508;
[L4378]              havoc _value_s544;
[L4379]              havoc success_s544;
[L4380]              havoc target_s565;
[L4381]              havoc freeze_s565;
[L4382]              havoc target_s592;
[L4383]              havoc _value_s592;
[L4384]              havoc target_s610;
[L4385]              havoc tmpNow;
[L4386]              havoc gas;
[L4387]              assume gas > 4000000 && gas <= 8000000;
[L4388]              tmpNow := now;
[L4389]              havoc now;
[L4390]              assume now > tmpNow;
[L4391]              assume msgsender_MSG != null;
[L4392]              assume DType[msgsender_MSG] != SafeMath;
[L4393]              assume DType[msgsender_MSG] != Owned;
[L4394]              assume DType[msgsender_MSG] != Pausable;
[L4395]              assume DType[msgsender_MSG] != tokenRecipient;
[L4396]              assume DType[msgsender_MSG] != OMAToken;
[L4397]              Alloc[msgsender_MSG] := true;
[L4398]  COND FALSE  !(choice == 21)
[L4404]  COND FALSE  !(choice == 20)
[L4410]  COND FALSE  !(choice == 19)
[L4416]  COND FALSE  !(choice == 18)
[L4422]  COND FALSE  !(choice == 17)
[L4428]  COND FALSE  !(choice == 16)
[L4434]  COND FALSE  !(choice == 15)
[L4440]  COND FALSE  !(choice == 14)
[L4446]  COND FALSE  !(choice == 13)
[L4452]  COND FALSE  !(choice == 12)
[L4458]  COND FALSE  !(choice == 11)
[L4464]  COND FALSE  !(choice == 10)
[L4470]  COND FALSE  !(choice == 9)
[L4476]  COND FALSE  !(choice == 8)
[L4483]  COND FALSE  !(choice == 7)
[L4490]  COND FALSE  !(choice == 6)
[L4497]  COND FALSE  !(choice == 5)
[L4504]  COND FALSE  !(choice == 4)
[L4511]  COND TRUE   choice == 3
[L4512]              gas := gas - 21000;
[L4513]  COND TRUE   gas >= 0
[L4514]              assume msgvalue_MSG == 0;
[L4515]  CALL        call freezeAccount~address~bool_OMAToken(this, msgsender_MSG, msgvalue_MSG, target_s565, freeze_s565);
[L1114]              havoc __exception;
[L1115]              revert := false;
[L1116]  COND FALSE  !(__exception)
[L1144]  CALL        call freezeAccount~address~bool_OMAToken__success(this, msgsender_MSG, msgvalue_MSG, target_s565, freeze_s565);
[L3038]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4032]  COND FALSE  !(!(msgsender_MSG == owner_Owned[this]))
[L3038]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3039]  COND FALSE  !(revert)
[L3042]              frozenAccount_OMAToken[this][target_s565] := freeze_s565;
[L3043]              assert { :EventEmitted "FrozenFunds_OMAToken" } true;
[L1144]  RET         call freezeAccount~address~bool_OMAToken__success(this, msgsender_MSG, msgvalue_MSG, target_s565, freeze_s565);
[L1145]              assume !revert && gas >= 0;
[L4515]  RET         call freezeAccount~address~bool_OMAToken(this, msgsender_MSG, msgvalue_MSG, target_s565, freeze_s565);
[L4551]  RET         call CorralChoice_OMAToken(this);
[L4551]  CALL        call CorralChoice_OMAToken(this);
[L4342]              havoc msgsender_MSG;
[L4343]              havoc msgvalue_MSG;
[L4344]              havoc choice;
[L4345]              havoc __ret_0_owner;
[L4346]              havoc newOwner_s127;
[L4347]              havoc __ret_0_paused;
[L4348]              havoc __ret_0_symbol;
[L4349]              havoc __ret_0_name;
[L4350]              havoc __ret_0_decimals;
[L4351]              havoc __ret_0_totalSupply;
[L4352]              havoc arg613_s0;
[L4353]              havoc __ret_0_balanceOf;
[L4354]              havoc arg614_s0;
[L4355]              havoc arg615_s0;
[L4356]              havoc __ret_0_allowance;
[L4357]              havoc arg616_s0;
[L4358]              havoc __ret_0_frozenAccount;
[L4359]              havoc arg617_s0;
[L4360]              havoc __ret_0_frozenAmount;
[L4361]              havoc initialSupply_s302;
[L4362]              havoc tokenName_s302;
[L4363]              havoc tokenSymbol_s302;
[L4364]              havoc _to_s401;
[L4365]              havoc _value_s401;
[L4366]              havoc success_s401;
[L4367]              havoc _from_s438;
[L4368]              havoc _to_s438;
[L4369]              havoc _value_s438;
[L4370]              havoc success_s438;
[L4371]              havoc _spender_s468;
[L4372]              havoc _value_s468;
[L4373]              havoc success_s468;
[L4374]              havoc _spender_s508;
[L4375]              havoc _value_s508;
[L4376]              havoc _extraData_s508;
[L4377]              havoc success_s508;
[L4378]              havoc _value_s544;
[L4379]              havoc success_s544;
[L4380]              havoc target_s565;
[L4381]              havoc freeze_s565;
[L4382]              havoc target_s592;
[L4383]              havoc _value_s592;
[L4384]              havoc target_s610;
[L4385]              havoc tmpNow;
[L4386]              havoc gas;
[L4387]              assume gas > 4000000 && gas <= 8000000;
[L4388]              tmpNow := now;
[L4389]              havoc now;
[L4390]              assume now > tmpNow;
[L4391]              assume msgsender_MSG != null;
[L4392]              assume DType[msgsender_MSG] != SafeMath;
[L4393]              assume DType[msgsender_MSG] != Owned;
[L4394]              assume DType[msgsender_MSG] != Pausable;
[L4395]              assume DType[msgsender_MSG] != tokenRecipient;
[L4396]              assume DType[msgsender_MSG] != OMAToken;
[L4397]              Alloc[msgsender_MSG] := true;
[L4398]  COND FALSE  !(choice == 21)
[L4404]  COND FALSE  !(choice == 20)
[L4410]  COND FALSE  !(choice == 19)
[L4416]  COND FALSE  !(choice == 18)
[L4422]  COND FALSE  !(choice == 17)
[L4428]  COND FALSE  !(choice == 16)
[L4434]  COND FALSE  !(choice == 15)
[L4440]  COND FALSE  !(choice == 14)
[L4446]  COND FALSE  !(choice == 13)
[L4452]  COND FALSE  !(choice == 12)
[L4458]  COND FALSE  !(choice == 11)
[L4464]  COND FALSE  !(choice == 10)
[L4470]  COND FALSE  !(choice == 9)
[L4476]  COND TRUE   choice == 8
[L4477]              gas := gas - 21000;
[L4478]  COND TRUE   gas >= 0
[L4479]              assume _value_s401 >= 0 && _value_s401 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4480]              assume msgvalue_MSG == 0;
[L4481]  CALL        call success_s401 := transfer~address~uint256_OMAToken(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s401 && _value_s401 <= balanceOf_OMAToken[this][msgsender_MSG]) && _value_s401 >= 0) && _value_s401 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_OMAToken[this][_to_s401] >= 0) && balanceOf_OMAToken[this][_to_s401] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_OMAToken[this][msgsender_MSG] >= 0) && balanceOf_OMAToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_OMAToken0 := true;
[L2]                 call_transfer_OMAToken0 := false;
[L2]                 revert := revert_hold;
[L782]               havoc __exception;
[L783]               revert := false;
[L784]   COND TRUE   __exception
[L785]               __tmp__Balance := Balance;
[L786]               __tmp__DType := DType;
[L787]               __tmp__Alloc := Alloc;
[L788]               __tmp__balance_ADDR := balance_ADDR;
[L789]               __tmp__M_Ref_int := M_Ref_int;
[L790]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L791]               __tmp__alloc_allowance_OMAToken_lvl0 := alloc_allowance_OMAToken_lvl0;
[L792]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L793]               __tmp__sum_allowance1 := sum_allowance1;
[L794]               __tmp__M_Ref_bool := M_Ref_bool;
[L795]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L796]               __tmp__sum_frozenAmount3 := sum_frozenAmount3;
[L797]               __tmp__Length := Length;
[L798]               __tmp__now := now;
[L799]               __tmp__owner_Owned := owner_Owned;
[L800]               __tmp__paused_Pausable := paused_Pausable;
[L801]               __tmp__symbol_OMAToken := symbol_OMAToken;
[L802]               __tmp__name_OMAToken := name_OMAToken;
[L803]               __tmp__decimals_OMAToken := decimals_OMAToken;
[L804]               __tmp__totalSupply_OMAToken := totalSupply_OMAToken;
[L805]               __tmp__balanceOf_OMAToken := balanceOf_OMAToken;
[L806]               __tmp__allowance_OMAToken := allowance_OMAToken;
[L807]               __tmp__frozenAccount_OMAToken := frozenAccount_OMAToken;
[L808]               __tmp__frozenAmount_OMAToken := frozenAmount_OMAToken;
[L809]   CALL        call success_s401 := transfer~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L2857]  CALL        call _transfer~address~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s401, _value_s401);
[L2773]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4040]  COND FALSE  !(!!__tmp__paused_Pausable[this])
[L2773]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L2774]  COND FALSE  !(revert)
[L2777]              __var_2 := null;
[L2778]  COND FALSE  !(!(_to_s382 != null))
[L2782]  COND TRUE   !!__tmp__frozenAccount_OMAToken[this][_from_s382]
[L2783]              revert := true;
[L2857]  RET         call _transfer~address~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s401, _value_s401);
[L2858]  COND TRUE   revert
[L809]   RET         call success_s401 := transfer~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L810]               assume revert || gas < 0;
[L4481]  RET         call success_s401 := transfer~address~uint256_OMAToken(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L4551]  RET         call CorralChoice_OMAToken(this);

Loop:
[L4551]  CALL        call CorralChoice_OMAToken(this);
[L4342]              havoc msgsender_MSG;
[L4343]              havoc msgvalue_MSG;
[L4344]              havoc choice;
[L4345]              havoc __ret_0_owner;
[L4346]              havoc newOwner_s127;
[L4347]              havoc __ret_0_paused;
[L4348]              havoc __ret_0_symbol;
[L4349]              havoc __ret_0_name;
[L4350]              havoc __ret_0_decimals;
[L4351]              havoc __ret_0_totalSupply;
[L4352]              havoc arg613_s0;
[L4353]              havoc __ret_0_balanceOf;
[L4354]              havoc arg614_s0;
[L4355]              havoc arg615_s0;
[L4356]              havoc __ret_0_allowance;
[L4357]              havoc arg616_s0;
[L4358]              havoc __ret_0_frozenAccount;
[L4359]              havoc arg617_s0;
[L4360]              havoc __ret_0_frozenAmount;
[L4361]              havoc initialSupply_s302;
[L4362]              havoc tokenName_s302;
[L4363]              havoc tokenSymbol_s302;
[L4364]              havoc _to_s401;
[L4365]              havoc _value_s401;
[L4366]              havoc success_s401;
[L4367]              havoc _from_s438;
[L4368]              havoc _to_s438;
[L4369]              havoc _value_s438;
[L4370]              havoc success_s438;
[L4371]              havoc _spender_s468;
[L4372]              havoc _value_s468;
[L4373]              havoc success_s468;
[L4374]              havoc _spender_s508;
[L4375]              havoc _value_s508;
[L4376]              havoc _extraData_s508;
[L4377]              havoc success_s508;
[L4378]              havoc _value_s544;
[L4379]              havoc success_s544;
[L4380]              havoc target_s565;
[L4381]              havoc freeze_s565;
[L4382]              havoc target_s592;
[L4383]              havoc _value_s592;
[L4384]              havoc target_s610;
[L4385]              havoc tmpNow;
[L4386]              havoc gas;
[L4387]              assume gas > 4000000 && gas <= 8000000;
[L4388]              tmpNow := now;
[L4389]              havoc now;
[L4390]              assume now > tmpNow;
[L4391]              assume msgsender_MSG != null;
[L4392]              assume DType[msgsender_MSG] != SafeMath;
[L4393]              assume DType[msgsender_MSG] != Owned;
[L4394]              assume DType[msgsender_MSG] != Pausable;
[L4395]              assume DType[msgsender_MSG] != tokenRecipient;
[L4396]              assume DType[msgsender_MSG] != OMAToken;
[L4397]              Alloc[msgsender_MSG] := true;
[L4398]  COND FALSE  !(choice == 21)
[L4404]  COND FALSE  !(choice == 20)
[L4410]  COND FALSE  !(choice == 19)
[L4416]  COND FALSE  !(choice == 18)
[L4422]  COND FALSE  !(choice == 17)
[L4428]  COND FALSE  !(choice == 16)
[L4434]  COND FALSE  !(choice == 15)
[L4440]  COND FALSE  !(choice == 14)
[L4446]  COND FALSE  !(choice == 13)
[L4452]  COND FALSE  !(choice == 12)
[L4458]  COND FALSE  !(choice == 11)
[L4464]  COND FALSE  !(choice == 10)
[L4470]  COND FALSE  !(choice == 9)
[L4476]  COND TRUE   choice == 8
[L4477]              gas := gas - 21000;
[L4478]  COND TRUE   gas >= 0
[L4479]              assume _value_s401 >= 0 && _value_s401 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4480]              assume msgvalue_MSG == 0;
[L4481]  CALL        call success_s401 := transfer~address~uint256_OMAToken(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s401 && _value_s401 <= balanceOf_OMAToken[this][msgsender_MSG]) && _value_s401 >= 0) && _value_s401 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_OMAToken[this][_to_s401] >= 0) && balanceOf_OMAToken[this][_to_s401] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_OMAToken[this][msgsender_MSG] >= 0) && balanceOf_OMAToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_OMAToken0 := true;
[L2]                 call_transfer_OMAToken0 := false;
[L2]                 revert := revert_hold;
[L782]               havoc __exception;
[L783]               revert := false;
[L784]   COND TRUE   __exception
[L785]               __tmp__Balance := Balance;
[L786]               __tmp__DType := DType;
[L787]               __tmp__Alloc := Alloc;
[L788]               __tmp__balance_ADDR := balance_ADDR;
[L789]               __tmp__M_Ref_int := M_Ref_int;
[L790]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L791]               __tmp__alloc_allowance_OMAToken_lvl0 := alloc_allowance_OMAToken_lvl0;
[L792]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L793]               __tmp__sum_allowance1 := sum_allowance1;
[L794]               __tmp__M_Ref_bool := M_Ref_bool;
[L795]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L796]               __tmp__sum_frozenAmount3 := sum_frozenAmount3;
[L797]               __tmp__Length := Length;
[L798]               __tmp__now := now;
[L799]               __tmp__owner_Owned := owner_Owned;
[L800]               __tmp__paused_Pausable := paused_Pausable;
[L801]               __tmp__symbol_OMAToken := symbol_OMAToken;
[L802]               __tmp__name_OMAToken := name_OMAToken;
[L803]               __tmp__decimals_OMAToken := decimals_OMAToken;
[L804]               __tmp__totalSupply_OMAToken := totalSupply_OMAToken;
[L805]               __tmp__balanceOf_OMAToken := balanceOf_OMAToken;
[L806]               __tmp__allowance_OMAToken := allowance_OMAToken;
[L807]               __tmp__frozenAccount_OMAToken := frozenAccount_OMAToken;
[L808]               __tmp__frozenAmount_OMAToken := frozenAmount_OMAToken;
[L809]   CALL        call success_s401 := transfer~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L2857]  CALL        call _transfer~address~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s401, _value_s401);
[L2773]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4040]  COND FALSE  !(!!__tmp__paused_Pausable[this])
[L2773]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L2774]  COND FALSE  !(revert)
[L2777]              __var_2 := null;
[L2778]  COND FALSE  !(!(_to_s382 != null))
[L2782]  COND TRUE   !!__tmp__frozenAccount_OMAToken[this][_from_s382]
[L2783]              revert := true;
[L2857]  RET         call _transfer~address~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s401, _value_s401);
[L2858]  COND TRUE   revert
[L809]   RET         call success_s401 := transfer~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L810]               assume revert || gas < 0;
[L4481]  RET         call success_s401 := transfer~address~uint256_OMAToken(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L4551]  RET         call CorralChoice_OMAToken(this);

[2020-11-25 02:26:28,334 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:26:28,334 INFO  L82        PathProgramCache]: Analyzing trace with hash 2022976831, now seen corresponding path program 1 times
[2020-11-25 02:26:28,334 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:26:28,345 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:26:28,357 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:26:28,427 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:26:28,427 INFO  L82        PathProgramCache]: Analyzing trace with hash 1852016415, now seen corresponding path program 1 times
[2020-11-25 02:26:28,427 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:26:28,434 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:26:28,440 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:26:28,455 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:26:28,455 INFO  L82        PathProgramCache]: Analyzing trace with hash 420865885, now seen corresponding path program 1 times
[2020-11-25 02:26:28,456 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:26:28,477 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:26:28,500 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 883 to 1759
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 673 to 1327
Garbage collection #6: 1327 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 1327 to 2647
Garbage collection #7: 2647 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 2647 to 5281
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #7: 6661 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 6661 to 13313
[2020-11-25 02:26:29,042 WARN  L188               SmtUtils]: Spent 121.00 ms on a formula simplification that was a NOOP. DAG size: 214
[2020-11-25 02:26:29,503 WARN  L188               SmtUtils]: Spent 458.00 ms on a formula simplification. DAG size of input: 297 DAG size of output: 252
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #7: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
[2020-11-25 02:26:29,667 WARN  L188               SmtUtils]: Spent 145.00 ms on a formula simplification. DAG size of input: 148 DAG size of output: 144
[2020-11-25 02:26:29,826 WARN  L188               SmtUtils]: Spent 158.00 ms on a formula simplification that was a NOOP. DAG size: 338
Garbage collection #1: 137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 137 to 271
Garbage collection #2: 271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 271 to 541
Garbage collection #3: 541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 541 to 1069
Garbage collection #4: 1069 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1069 to 2137
Garbage collection #5: 2137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2137 to 4273
Garbage collection #6: 4273 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4273 to 8543
[2020-11-25 02:26:29,955 WARN  L188               SmtUtils]: Spent 123.00 ms on a formula simplification that was a NOOP. DAG size: 271
[2020-11-25 02:26:30,080 WARN  L188               SmtUtils]: Spent 123.00 ms on a formula simplification that was a NOOP. DAG size: 271
Garbage collection #1: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 3137 to 6271
Garbage collection #7: 6271 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 6271 to 12541
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
[2020-11-25 02:26:30,132 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
[2020-11-25 02:26:30,410 WARN  L188               SmtUtils]: Spent 124.00 ms on a formula simplification. DAG size of input: 163 DAG size of output: 159
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
[2020-11-25 02:26:31,051 WARN  L188               SmtUtils]: Spent 246.00 ms on a formula simplification. DAG size of input: 259 DAG size of output: 204
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #6: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
[2020-11-25 02:26:31,202 WARN  L188               SmtUtils]: Spent 112.00 ms on a formula simplification that was a NOOP. DAG size: 314
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #7: 6271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6271 to 12541
[2020-11-25 02:26:31,343 WARN  L188               SmtUtils]: Spent 135.00 ms on a formula simplification that was a NOOP. DAG size: 255
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #6: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #7: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
[2020-11-25 02:26:31,656 WARN  L188               SmtUtils]: Spent 110.00 ms on a formula simplification that was a NOOP. DAG size: 214
[2020-11-25 02:26:31,971 WARN  L188               SmtUtils]: Spent 312.00 ms on a formula simplification. DAG size of input: 296 DAG size of output: 252
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #7: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #7: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
[2020-11-25 02:26:32,182 WARN  L188               SmtUtils]: Spent 131.00 ms on a formula simplification that was a NOOP. DAG size: 337
Garbage collection #1: 137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 137 to 271
Garbage collection #2: 271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 271 to 541
Garbage collection #3: 541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 541 to 1069
Garbage collection #4: 1069 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1069 to 2137
Garbage collection #5: 2137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2137 to 4273
Garbage collection #6: 4273 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4273 to 8543
Garbage collection #7: 8543 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8543 to 17077
[2020-11-25 02:26:32,309 WARN  L188               SmtUtils]: Spent 122.00 ms on a formula simplification that was a NOOP. DAG size: 270
[2020-11-25 02:26:34,007 WARN  L188               SmtUtils]: Spent 1.70 s on a formula simplification. DAG size of input: 705 DAG size of output: 692
Garbage collection #1: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #2: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #3: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #4: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #5: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #6: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
Garbage collection #7: 18353 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 18353 to 36697
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
[2020-11-25 02:26:34,210 WARN  L188               SmtUtils]: Spent 181.00 ms on a formula simplification. DAG size of input: 222 DAG size of output: 219
[2020-11-25 02:26:34,404 WARN  L188               SmtUtils]: Spent 176.00 ms on a formula simplification that was a NOOP. DAG size: 336
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
[2020-11-25 02:26:34,508 WARN  L188               SmtUtils]: Spent 100.00 ms on a formula simplification that was a NOOP. DAG size: 219
[2020-11-25 02:26:34,867 WARN  L188               SmtUtils]: Spent 357.00 ms on a formula simplification. DAG size of input: 338 DAG size of output: 337
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #1: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #2: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #3: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #4: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #5: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #6: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
[2020-11-25 02:26:35,032 WARN  L188               SmtUtils]: Spent 162.00 ms on a formula simplification that was a NOOP. DAG size: 333
[2020-11-25 02:26:35,053 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:26:35,072 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:26:35,083 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 02:26:35 BasicIcfg
[2020-11-25 02:26:35,083 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 02:26:35,084 INFO  L168              Benchmark]: Toolchain (without parser) took 29507.05 ms. Allocated memory was 1.0 GB in the beginning and 2.7 GB in the end (delta: 1.7 GB). Free memory was 935.2 MB in the beginning and 2.0 GB in the end (delta: -1.0 GB). Peak memory consumption was 1.8 GB. Max. memory is 15.3 GB.
[2020-11-25 02:26:35,084 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.17 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 02:26:35,084 INFO  L168              Benchmark]: Boogie Preprocessor took 112.33 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 02:26:35,085 INFO  L168              Benchmark]: UtopiaSpecLang took 71.05 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 02:26:35,085 INFO  L168              Benchmark]: Boogie Printer took 16.31 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 913.7 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 02:26:35,086 INFO  L168              Benchmark]: RCFGBuilder took 743.66 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 800.8 MB in the end (delta: 112.9 MB). Peak memory consumption was 112.9 MB. Max. memory is 15.3 GB.
[2020-11-25 02:26:35,086 INFO  L168              Benchmark]: UtopiaLTL2Aut took 38.11 ms. Allocated memory is still 1.0 GB. Free memory was 800.8 MB in the beginning and 791.8 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
[2020-11-25 02:26:35,086 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1502.94 ms. Allocated memory was 1.0 GB in the beginning and 1.3 GB in the end (delta: 221.8 MB). Free memory was 791.8 MB in the beginning and 1.0 GB in the end (delta: -248.4 MB). Peak memory consumption was 180.6 MB. Max. memory is 15.3 GB.
[2020-11-25 02:26:35,087 INFO  L168              Benchmark]: BlockEncodingV2 took 163.78 ms. Allocated memory is still 1.3 GB. Free memory was 1.0 GB in the beginning and 987.7 MB in the end (delta: 52.6 MB). Peak memory consumption was 52.6 MB. Max. memory is 15.3 GB.
[2020-11-25 02:26:35,087 INFO  L168              Benchmark]: BuchiAutomizer took 26854.70 ms. Allocated memory was 1.3 GB in the beginning and 2.7 GB in the end (delta: 1.4 GB). Free memory was 987.7 MB in the beginning and 2.0 GB in the end (delta: -992.9 MB). Peak memory consumption was 1.7 GB. Max. memory is 15.3 GB.
[2020-11-25 02:26:35,089 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    4042 locations, 6907 edges
  - StatisticsResult: Encoded RCFG
    4002 locations, 6807 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.17 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 112.33 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 71.05 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 16.31 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 913.7 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 743.66 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 800.8 MB in the end (delta: 112.9 MB). Peak memory consumption was 112.9 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 38.11 ms. Allocated memory is still 1.0 GB. Free memory was 800.8 MB in the beginning and 791.8 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1502.94 ms. Allocated memory was 1.0 GB in the beginning and 1.3 GB in the end (delta: 221.8 MB). Free memory was 791.8 MB in the beginning and 1.0 GB in the end (delta: -248.4 MB). Peak memory consumption was 180.6 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 163.78 ms. Allocated memory is still 1.3 GB. Free memory was 1.0 GB in the beginning and 987.7 MB in the end (delta: 52.6 MB). Peak memory consumption was 52.6 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 26854.70 ms. Allocated memory was 1.3 GB in the beginning and 2.7 GB in the end (delta: 1.4 GB). Free memory was 987.7 MB in the beginning and 2.0 GB in the end (delta: -992.9 MB). Peak memory consumption was 1.7 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1680 locations, 2126 edges
  - StatisticsResult: BuchiProgram size
    4042 locations, 6907 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 12 terminating modules (12 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.12 modules have a trivial ranking function, the largest among these consists of 26 locations. The remainder module has 3693 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 26.7s and 13 iterations.  TraceHistogramMax:2. Analysis of lassos took 8.5s. Construction of modules took 12.9s. BÃ¼chi inclusion checks took 4.1s. Highest rank in rank-based complementation 0. Minimization of det autom 12. Minimization of nondet autom 0. Automata minimization 0.4s AutomataMinimizationTime, 12 MinimizatonAttempts, 8602 StatesRemovedByMinimization, 10 NontrivialMinimizations. Non-live state removal took 0.3s Buchi closure took 0.0s. Biggest automaton had 4636 states and ocurred in iteration 8.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 39654 SDtfs, 47646 SDslu, 93923 SDs, 0 SdLazy, 219106 SolverSat, 8699 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 12.9s Time	LassoAnalysisResults: nont1 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU12 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(3979010) = (new OMAToken)({from : 3979006, initialSupply : 3979005, tokenName : 3979012, tokenSymbol : 3979017});
[L712]               havoc __exception;
[L713]               revert := false;
[L714]   COND FALSE  !(__exception)
[L742]   CALL        call OMAToken_OMAToken__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L2754]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2504]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2487]              assume msgsender_MSG != null;
[L2488]              Balance[this] := 0;
[L2489]              owner_Owned[this] := null;
[L2491]              owner_Owned[this] := msgsender_MSG;
[L2504]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]  COND FALSE  !(revert)
[L2754]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2755]  COND FALSE  !(revert)
[L2758]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L2572]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2504]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2487]              assume msgsender_MSG != null;
[L2488]              Balance[this] := 0;
[L2489]              owner_Owned[this] := null;
[L2491]              owner_Owned[this] := msgsender_MSG;
[L2504]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]  COND FALSE  !(revert)
[L2572]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2573]  COND FALSE  !(revert)
[L2576]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2552]              assume msgsender_MSG != null;
[L2553]              Balance[this] := 0;
[L2554]              paused_Pausable[this] := false;
[L2576]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2577]  COND FALSE  !(revert)
[L2758]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L2759]  COND FALSE  !(revert)
[L2762]  CALL        call OMAToken_OMAToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L2711]              assume msgsender_MSG != null;
[L2712]              Balance[this] := 0;
[L2713]              symbol_OMAToken[this] := -641797033;
[L2714]              name_OMAToken[this] := -641797033;
[L2715]              decimals_OMAToken[this] := 18;
[L2716]              totalSupply_OMAToken[this] := 0;
[L2717]              balanceOf_OMAToken[this] := zeroRefintArr();
[L2718]              sum_balanceOf0[this] := 0;
[L2719]              allowance_OMAToken[this] := zeroRefRefintArr();
[L2720]              sum_allowance1[this] := 0;
[L2721]              frozenAccount_OMAToken[this] := zeroRefboolArr();
[L2722]              frozenAmount_OMAToken[this] := zeroRefintArr();
[L2723]              sum_frozenAmount3[this] := 0;
[L2725]              __var_1 := decimals_OMAToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2726]              totalSupply_OMAToken[this] := nonlinearMul(initialSupply_s302, nonlinearPow(10, decimals_OMAToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2727]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_OMAToken[this][msgsender_MSG];
[L2728]              balanceOf_OMAToken[this][msgsender_MSG] := totalSupply_OMAToken[this];
[L2729]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_OMAToken[this][msgsender_MSG];
[L2730]              name_OMAToken[this] := tokenName_s302;
[L2731]              symbol_OMAToken[this] := tokenSymbol_s302;
[L2762]  RET         call OMAToken_OMAToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L2763]  COND FALSE  !(revert)
[L742]   RET         call OMAToken_OMAToken__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
[L743]               assume !revert && gas >= 0;
[L4547]  RET         call OMAToken_OMAToken(this, msgsender_MSG, msgvalue_MSG, initialSupply_s302, tokenName_s302, tokenSymbol_s302);
OMAToken(3979010).freezeAccount~address~bool.gas(3979002)({from : 3979006, target : 3979011, freeze : true});
[L1114]              havoc __exception;
[L1115]              revert := false;
[L1116]  COND FALSE  !(__exception)
[L1144]  CALL        call freezeAccount~address~bool_OMAToken__success(this, msgsender_MSG, msgvalue_MSG, target_s565, freeze_s565);
[L3038]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4032]  COND FALSE  !(!(msgsender_MSG == owner_Owned[this]))
[L3038]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3039]  COND FALSE  !(revert)
[L3042]              frozenAccount_OMAToken[this][target_s565] := freeze_s565;
[L3043]              assert { :EventEmitted "FrozenFunds_OMAToken" } true;
[L1144]  RET         call freezeAccount~address~bool_OMAToken__success(this, msgsender_MSG, msgvalue_MSG, target_s565, freeze_s565);
[L1145]              assume !revert && gas >= 0;
[L4515]  RET         call freezeAccount~address~bool_OMAToken(this, msgsender_MSG, msgvalue_MSG, target_s565, freeze_s565);
OMAToken(3979010).transfer~address~uint256.gas(3979003)({from : 3979011, _to : 3979011, _value : 0});
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s401 && _value_s401 <= balanceOf_OMAToken[this][msgsender_MSG]) && _value_s401 >= 0) && _value_s401 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_OMAToken[this][_to_s401] >= 0) && balanceOf_OMAToken[this][_to_s401] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_OMAToken[this][msgsender_MSG] >= 0) && balanceOf_OMAToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_OMAToken0 := true;
[L2]                 call_transfer_OMAToken0 := false;
[L2]                 revert := revert_hold;
[L782]               havoc __exception;
[L783]               revert := false;
[L784]   COND TRUE   __exception
[L785]               __tmp__Balance := Balance;
[L786]               __tmp__DType := DType;
[L787]               __tmp__Alloc := Alloc;
[L788]               __tmp__balance_ADDR := balance_ADDR;
[L789]               __tmp__M_Ref_int := M_Ref_int;
[L790]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L791]               __tmp__alloc_allowance_OMAToken_lvl0 := alloc_allowance_OMAToken_lvl0;
[L792]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L793]               __tmp__sum_allowance1 := sum_allowance1;
[L794]               __tmp__M_Ref_bool := M_Ref_bool;
[L795]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L796]               __tmp__sum_frozenAmount3 := sum_frozenAmount3;
[L797]               __tmp__Length := Length;
[L798]               __tmp__now := now;
[L799]               __tmp__owner_Owned := owner_Owned;
[L800]               __tmp__paused_Pausable := paused_Pausable;
[L801]               __tmp__symbol_OMAToken := symbol_OMAToken;
[L802]               __tmp__name_OMAToken := name_OMAToken;
[L803]               __tmp__decimals_OMAToken := decimals_OMAToken;
[L804]               __tmp__totalSupply_OMAToken := totalSupply_OMAToken;
[L805]               __tmp__balanceOf_OMAToken := balanceOf_OMAToken;
[L806]               __tmp__allowance_OMAToken := allowance_OMAToken;
[L807]               __tmp__frozenAccount_OMAToken := frozenAccount_OMAToken;
[L808]               __tmp__frozenAmount_OMAToken := frozenAmount_OMAToken;
[L809]   CALL        call success_s401 := transfer~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L2857]  CALL        call _transfer~address~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s401, _value_s401);
[L2773]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4040]  COND FALSE  !(!!__tmp__paused_Pausable[this])
[L2773]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L2774]  COND FALSE  !(revert)
[L2777]              __var_2 := null;
[L2778]  COND FALSE  !(!(_to_s382 != null))
[L2782]  COND TRUE   !!__tmp__frozenAccount_OMAToken[this][_from_s382]
[L2783]              revert := true;
[L2857]  RET         call _transfer~address~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s401, _value_s401);
[L2858]  COND TRUE   revert
[L809]   RET         call success_s401 := transfer~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L810]               assume revert || gas < 0;
[L4481]  RET         call success_s401 := transfer~address~uint256_OMAToken(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);

Loop:
OMAToken(3979010).transfer~address~uint256.gas(3979001)({from : 3979011, _to : 3979011, _value : 0});
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s401 && _value_s401 <= balanceOf_OMAToken[this][msgsender_MSG]) && _value_s401 >= 0) && _value_s401 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_OMAToken[this][_to_s401] >= 0) && balanceOf_OMAToken[this][_to_s401] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_OMAToken[this][msgsender_MSG] >= 0) && balanceOf_OMAToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_OMAToken0 := true;
[L2]                 call_transfer_OMAToken0 := false;
[L2]                 revert := revert_hold;
[L782]               havoc __exception;
[L783]               revert := false;
[L784]   COND TRUE   __exception
[L785]               __tmp__Balance := Balance;
[L786]               __tmp__DType := DType;
[L787]               __tmp__Alloc := Alloc;
[L788]               __tmp__balance_ADDR := balance_ADDR;
[L789]               __tmp__M_Ref_int := M_Ref_int;
[L790]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L791]               __tmp__alloc_allowance_OMAToken_lvl0 := alloc_allowance_OMAToken_lvl0;
[L792]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L793]               __tmp__sum_allowance1 := sum_allowance1;
[L794]               __tmp__M_Ref_bool := M_Ref_bool;
[L795]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L796]               __tmp__sum_frozenAmount3 := sum_frozenAmount3;
[L797]               __tmp__Length := Length;
[L798]               __tmp__now := now;
[L799]               __tmp__owner_Owned := owner_Owned;
[L800]               __tmp__paused_Pausable := paused_Pausable;
[L801]               __tmp__symbol_OMAToken := symbol_OMAToken;
[L802]               __tmp__name_OMAToken := name_OMAToken;
[L803]               __tmp__decimals_OMAToken := decimals_OMAToken;
[L804]               __tmp__totalSupply_OMAToken := totalSupply_OMAToken;
[L805]               __tmp__balanceOf_OMAToken := balanceOf_OMAToken;
[L806]               __tmp__allowance_OMAToken := allowance_OMAToken;
[L807]               __tmp__frozenAccount_OMAToken := frozenAccount_OMAToken;
[L808]               __tmp__frozenAmount_OMAToken := frozenAmount_OMAToken;
[L809]   CALL        call success_s401 := transfer~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L2857]  CALL        call _transfer~address~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s401, _value_s401);
[L2773]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4040]  COND FALSE  !(!!__tmp__paused_Pausable[this])
[L2773]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L2774]  COND FALSE  !(revert)
[L2777]              __var_2 := null;
[L2778]  COND FALSE  !(!(_to_s382 != null))
[L2782]  COND TRUE   !!__tmp__frozenAccount_OMAToken[this][_from_s382]
[L2783]              revert := true;
[L2857]  RET         call _transfer~address~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s401, _value_s401);
[L2858]  COND TRUE   revert
[L809]   RET         call success_s401 := transfer~address~uint256_OMAToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);
[L810]               assume revert || gas < 0;
[L4481]  RET         call success_s401 := transfer~address~uint256_OMAToken(this, msgsender_MSG, msgvalue_MSG, _to_s401, _value_s401);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
