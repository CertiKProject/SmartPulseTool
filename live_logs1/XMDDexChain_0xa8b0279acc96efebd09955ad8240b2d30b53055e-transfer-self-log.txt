This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 09:07:38,939 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 09:07:38,941 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 09:07:38,951 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 09:07:38,951 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 09:07:38,951 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 09:07:38,952 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 09:07:38,954 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 09:07:38,955 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 09:07:38,956 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 09:07:38,957 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 09:07:38,957 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 09:07:38,958 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 09:07:38,958 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 09:07:38,959 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 09:07:38,960 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 09:07:38,960 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 09:07:38,961 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 09:07:38,963 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 09:07:38,964 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 09:07:38,965 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 09:07:38,965 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 09:07:38,967 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 09:07:38,967 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 09:07:38,967 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 09:07:38,968 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 09:07:38,968 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 09:07:38,969 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 09:07:38,969 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 09:07:38,969 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 09:07:38,969 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 09:07:38,970 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 09:07:38,970 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 09:07:38,971 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 09:07:38,971 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 09:07:38,972 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 09:07:38,972 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 09:07:38,972 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 09:07:38,972 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 09:07:38,973 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 09:07:38,973 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 09:07:38,974 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 09:07:38,981 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 09:07:38,981 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 09:07:38,982 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 09:07:38,982 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 09:07:38,982 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 09:07:38,982 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 09:07:38,982 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 09:07:38,982 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 09:07:38,982 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 09:07:38,982 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 09:07:38,983 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 09:07:38,983 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 09:07:38,983 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 09:07:38,983 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 09:07:38,983 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 09:07:38,983 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 09:07:38,983 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 09:07:38,983 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 09:07:38,983 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 09:07:38,983 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 09:07:38,984 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 09:07:38,984 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 09:07:38,984 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 09:07:38,984 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 09:07:38,984 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 09:07:38,984 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 09:07:39,004 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 09:07:39,013 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 09:07:39,016 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 09:07:39,017 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 09:07:39,017 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 09:07:39,018 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/XMDDexChain_0xa8b0279acc96efebd09955ad8240b2d30b53055e_transfer-self.bpl
[2020-11-25 09:07:39,018 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/XMDDexChain_0xa8b0279acc96efebd09955ad8240b2d30b53055e_transfer-self.bpl'
[2020-11-25 09:07:39,097 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 09:07:39,098 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 09:07:39,098 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 09:07:39,099 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 09:07:39,099 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 09:07:39,115 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "XMDDexChain_0xa8b0279acc96efebd09955ad8240b2d30b53055e_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:07:39" (1/1) ...
[2020-11-25 09:07:39,117 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "XMDDexChain_0xa8b0279acc96efebd09955ad8240b2d30b53055e_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:07:39" (1/1) ...
[2020-11-25 09:07:39,152 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "XMDDexChain_0xa8b0279acc96efebd09955ad8240b2d30b53055e_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:07:39" (1/1) ...
[2020-11-25 09:07:39,153 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "XMDDexChain_0xa8b0279acc96efebd09955ad8240b2d30b53055e_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:07:39" (1/1) ...
[2020-11-25 09:07:39,174 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "XMDDexChain_0xa8b0279acc96efebd09955ad8240b2d30b53055e_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:07:39" (1/1) ...
[2020-11-25 09:07:39,184 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "XMDDexChain_0xa8b0279acc96efebd09955ad8240b2d30b53055e_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:07:39" (1/1) ...
[2020-11-25 09:07:39,191 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "XMDDexChain_0xa8b0279acc96efebd09955ad8240b2d30b53055e_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:07:39" (1/1) ...
[2020-11-25 09:07:39,201 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 09:07:39,201 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 09:07:39,201 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 09:07:39,203 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 09:07:39,207 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "XMDDexChain_0xa8b0279acc96efebd09955ad8240b2d30b53055e_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:07:39" (1/1) ...
[2020-11-25 09:07:39,227 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(XMDDexChain.transfer(to, value), msg.sender == to && value <= balances_XMDDexChain[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_XMDDexChain[this][to] >= 0 && balances_XMDDexChain[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_XMDDexChain[this][msg.sender] >= 0 &&  balances_XMDDexChain[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(XMDDexChain.transfer(to, value), return == true && _totalSupply_XMDDexChain[this] == old(_totalSupply_XMDDexChain[this]) && balances_XMDDexChain[this] == old(balances_XMDDexChain[this]) && allowed_XMDDexChain[this] == old(allowed_XMDDexChain[this]) && symbol_XMDDexChain[this] == old(symbol_XMDDexChain[this]) && name_XMDDexChain[this] == old(name_XMDDexChain[this]) && decimals_XMDDexChain[this] == old(decimals_XMDDexChain[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 09:07:39,232 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(XMDDexChain.transfer(to, value), msg.sender == to && value <= balances_XMDDexChain[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_XMDDexChain[this][to] >= 0 && balances_XMDDexChain[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_XMDDexChain[this][msg.sender] >= 0 &&  balances_XMDDexChain[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(XMDDexChain.transfer(to, value), return == true && _totalSupply_XMDDexChain[this] == old(_totalSupply_XMDDexChain[this]) && balances_XMDDexChain[this] == old(balances_XMDDexChain[this]) && allowed_XMDDexChain[this] == old(allowed_XMDDexChain[this]) && symbol_XMDDexChain[this] == old(symbol_XMDDexChain[this]) && name_XMDDexChain[this] == old(name_XMDDexChain[this]) && decimals_XMDDexChain[this] == old(decimals_XMDDexChain[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 09:07:39,240 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(XMDDexChain.transfer(to, value), msg.sender == to && value <= balances_XMDDexChain[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_XMDDexChain[this][to] >= 0 && balances_XMDDexChain[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_XMDDexChain[this][msg.sender] >= 0 &&  balances_XMDDexChain[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(XMDDexChain.transfer(to, value), return == true && _totalSupply_XMDDexChain[this] == old(_totalSupply_XMDDexChain[this]) && balances_XMDDexChain[this] == old(balances_XMDDexChain[this]) && allowed_XMDDexChain[this] == old(allowed_XMDDexChain[this]) && symbol_XMDDexChain[this] == old(symbol_XMDDexChain[this]) && name_XMDDexChain[this] == old(name_XMDDexChain[this]) && decimals_XMDDexChain[this] == old(decimals_XMDDexChain[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 09:07:39,247 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==to_s371 && tokens_s371<=balances_XMDDexChain[this][msg.sender] ) && tokens_s371>=0 ) && tokens_s371<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_XMDDexChain[this][to_s371]>=0 ) && balances_XMDDexChain[this][to_s371]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_XMDDexChain[this][msg.sender]>=0 ) && balances_XMDDexChain[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_XMDDexChain>],IdentifierExpression[to_s371,<IMPLEMENTATION_INPARAM,transfer~address~uint256_XMDDexChain>]],BinaryExpression[COMPLEQ,IdentifierExpression[tokens_s371,<IMPLEMENTATION_INPARAM,transfer~address~uint256_XMDDexChain>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_XMDDexChain>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_XMDDexChain>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[tokens_s371,<IMPLEMENTATION_INPARAM,transfer~address~uint256_XMDDexChain>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[tokens_s371,<IMPLEMENTATION_INPARAM,transfer~address~uint256_XMDDexChain>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_XMDDexChain>]]],[IdentifierExpression[to_s371,<IMPLEMENTATION_INPARAM,transfer~address~uint256_XMDDexChain>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_XMDDexChain>]]],[IdentifierExpression[to_s371,<IMPLEMENTATION_INPARAM,transfer~address~uint256_XMDDexChain>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_XMDDexChain>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_XMDDexChain>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_XMDDexChain>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_XMDDexChain>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 09:07:39,249 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( success_s371==true && _totalSupply_XMDDexChain[this]==( old(_totalSupply_XMDDexChain[this]) ) ) && balances_XMDDexChain[this]==( old(balances_XMDDexChain[this]) ) ) && allowed_XMDDexChain[this]==( old(allowed_XMDDexChain[this]) ) ) && symbol_XMDDexChain[this]==( old(symbol_XMDDexChain[this]) ) ) && name_XMDDexChain[this]==( old(name_XMDDexChain[this]) ) ) && decimals_XMDDexChain[this]==( old(decimals_XMDDexChain[this]) ) ) && owner_Owned[this]==( old(owner_Owned[this]) ) ) && newOwner_Owned[this]==( old(newOwner_Owned[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[success_s371,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_XMDDexChain>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_XMDDexChain>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_XMDDexChain>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[balances_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_XMDDexChain>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[balances_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_XMDDexChain>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[allowed_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_XMDDexChain>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[allowed_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_XMDDexChain>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_XMDDexChain>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_XMDDexChain>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_XMDDexChain>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_XMDDexChain>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_XMDDexChain>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_XMDDexChain>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_XMDDexChain>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_XMDDexChain>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[newOwner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_XMDDexChain>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[newOwner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_XMDDexChain>]]]]]]
[2020-11-25 09:07:39,255 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(XMDDexChain.transfer(to, value), msg.sender == to && value <= balances_XMDDexChain[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_XMDDexChain[this][to] >= 0 && balances_XMDDexChain[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_XMDDexChain[this][msg.sender] >= 0 &&  balances_XMDDexChain[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(XMDDexChain.transfer(to, value), return == true && _totalSupply_XMDDexChain[this] == old(_totalSupply_XMDDexChain[this]) && balances_XMDDexChain[this] == old(balances_XMDDexChain[this]) && allowed_XMDDexChain[this] == old(allowed_XMDDexChain[this]) && symbol_XMDDexChain[this] == old(symbol_XMDDexChain[this]) && name_XMDDexChain[this] == old(name_XMDDexChain[this]) && decimals_XMDDexChain[this] == old(decimals_XMDDexChain[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 09:07:39,255 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_XMDDexChain0) ==> ( <>AP(success_transfer_XMDDexChain0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 09:07:39,265 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:07:39 PropertyContainer
[2020-11-25 09:07:39,266 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 09:07:39,266 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 09:07:39,266 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 09:07:39,266 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 09:07:39,268 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "XMDDexChain_0xa8b0279acc96efebd09955ad8240b2d30b53055e_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:07:39" (1/2) ...
[2020-11-25 09:07:39,268 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 09:07:39,268 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 09:07:39,284 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:07:39" (2/2) ...
[2020-11-25 09:07:39,284 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 09:07:39,285 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 09:07:39,285 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 09:07:39,285 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 09:07:39,286 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "XMDDexChain_0xa8b0279acc96efebd09955ad8240b2d30b53055e_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:07:39" (1/2) ...
[2020-11-25 09:07:39,339 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 09:07:39,339 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 09:07:39,339 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 09:07:39,339 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 09:07:39,339 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath
[2020-11-25 09:07:39,339 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath
[2020-11-25 09:07:39,339 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath
[2020-11-25 09:07:39,339 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath
[2020-11-25 09:07:39,340 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath
[2020-11-25 09:07:39,340 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath
[2020-11-25 09:07:39,340 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath
[2020-11-25 09:07:39,340 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath
[2020-11-25 09:07:39,340 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 09:07:39,340 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface
[2020-11-25 09:07:39,340 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface
[2020-11-25 09:07:39,340 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Interface
[2020-11-25 09:07:39,340 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Interface
[2020-11-25 09:07:39,340 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20Interface
[2020-11-25 09:07:39,340 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Interface
[2020-11-25 09:07:39,341 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Interface
[2020-11-25 09:07:39,341 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Interface
[2020-11-25 09:07:39,341 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__success
[2020-11-25 09:07:39,341 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack
[2020-11-25 09:07:39,341 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack
[2020-11-25 09:07:39,341 INFO  L130     BoogieDeclarations]: Found specification of procedure receiveApproval~address~uint256~address~bytes_ApproveAndCallFallBack
[2020-11-25 09:07:39,341 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 09:07:39,341 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned
[2020-11-25 09:07:39,341 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned
[2020-11-25 09:07:39,341 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned
[2020-11-25 09:07:39,341 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned
[2020-11-25 09:07:39,342 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned
[2020-11-25 09:07:39,342 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned
[2020-11-25 09:07:39,342 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned
[2020-11-25 09:07:39,342 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned
[2020-11-25 09:07:39,342 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned
[2020-11-25 09:07:39,342 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned
[2020-11-25 09:07:39,342 INFO  L130     BoogieDeclarations]: Found specification of procedure XMDDexChain_XMDDexChain_NoBaseCtor__success
[2020-11-25 09:07:39,342 INFO  L130     BoogieDeclarations]: Found specification of procedure XMDDexChain_XMDDexChain
[2020-11-25 09:07:39,342 INFO  L138     BoogieDeclarations]: Found implementation of procedure XMDDexChain_XMDDexChain
[2020-11-25 09:07:39,342 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_XMDDexChain
[2020-11-25 09:07:39,342 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_XMDDexChain
[2020-11-25 09:07:39,342 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_XMDDexChain
[2020-11-25 09:07:39,342 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_XMDDexChain
[2020-11-25 09:07:39,343 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_XMDDexChain
[2020-11-25 09:07:39,343 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_XMDDexChain
[2020-11-25 09:07:39,343 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_XMDDexChain
[2020-11-25 09:07:39,343 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_XMDDexChain
[2020-11-25 09:07:39,343 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_XMDDexChain
[2020-11-25 09:07:39,343 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_XMDDexChain
[2020-11-25 09:07:39,343 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_XMDDexChain
[2020-11-25 09:07:39,343 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_XMDDexChain
[2020-11-25 09:07:39,343 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_XMDDexChain
[2020-11-25 09:07:39,343 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_XMDDexChain
[2020-11-25 09:07:39,343 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_XMDDexChain__success
[2020-11-25 09:07:39,343 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~uint256_XMDDexChain
[2020-11-25 09:07:39,343 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~uint256_XMDDexChain
[2020-11-25 09:07:39,344 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_XMDDexChain
[2020-11-25 09:07:39,344 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_XMDDexChain
[2020-11-25 09:07:39,344 INFO  L130     BoogieDeclarations]: Found specification of procedure name_XMDDexChain
[2020-11-25 09:07:39,344 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_XMDDexChain
[2020-11-25 09:07:39,344 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_XMDDexChain
[2020-11-25 09:07:39,344 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_XMDDexChain
[2020-11-25 09:07:39,344 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_XMDDexChain
[2020-11-25 09:07:39,344 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_XMDDexChain
[2020-11-25 09:07:39,344 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 09:07:39,344 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 09:07:39,344 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 09:07:39,344 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 09:07:39,344 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 09:07:39,345 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 09:07:39,345 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Interface
[2020-11-25 09:07:39,345 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Interface
[2020-11-25 09:07:39,345 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-25 09:07:39,345 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-25 09:07:39,345 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Owned
[2020-11-25 09:07:39,345 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Owned
[2020-11-25 09:07:39,345 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_XMDDexChain
[2020-11-25 09:07:39,345 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 09:07:39,345 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 09:07:39,345 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 09:07:39,345 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 09:07:39,346 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 09:07:39,346 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath__success
[2020-11-25 09:07:39,346 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath__fail
[2020-11-25 09:07:39,346 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath__success
[2020-11-25 09:07:39,346 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath__fail
[2020-11-25 09:07:39,346 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath__success
[2020-11-25 09:07:39,346 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath__fail
[2020-11-25 09:07:39,346 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath__success
[2020-11-25 09:07:39,346 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath__fail
[2020-11-25 09:07:39,346 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 09:07:39,346 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 09:07:39,346 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 09:07:39,346 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__fail
[2020-11-25 09:07:39,347 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__success
[2020-11-25 09:07:39,347 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__fail
[2020-11-25 09:07:39,347 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 09:07:39,347 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__success
[2020-11-25 09:07:39,347 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__fail
[2020-11-25 09:07:39,347 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__success
[2020-11-25 09:07:39,347 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__fail
[2020-11-25 09:07:39,347 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__success
[2020-11-25 09:07:39,347 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__fail
[2020-11-25 09:07:39,347 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__success
[2020-11-25 09:07:39,347 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__fail
[2020-11-25 09:07:39,347 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__success
[2020-11-25 09:07:39,348 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__fail
[2020-11-25 09:07:39,348 INFO  L130     BoogieDeclarations]: Found specification of procedure XMDDexChain_XMDDexChain_NoBaseCtor__fail
[2020-11-25 09:07:39,348 INFO  L130     BoogieDeclarations]: Found specification of procedure XMDDexChain_XMDDexChain__success
[2020-11-25 09:07:39,348 INFO  L130     BoogieDeclarations]: Found specification of procedure XMDDexChain_XMDDexChain__fail
[2020-11-25 09:07:39,348 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_XMDDexChain__success
[2020-11-25 09:07:39,348 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_XMDDexChain__fail
[2020-11-25 09:07:39,348 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_XMDDexChain__success
[2020-11-25 09:07:39,348 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_XMDDexChain__fail
[2020-11-25 09:07:39,348 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_XMDDexChain__success
[2020-11-25 09:07:39,348 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_XMDDexChain__fail
[2020-11-25 09:07:39,348 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_XMDDexChain__success
[2020-11-25 09:07:39,349 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_XMDDexChain__fail
[2020-11-25 09:07:39,349 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_XMDDexChain__success
[2020-11-25 09:07:39,349 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_XMDDexChain__fail
[2020-11-25 09:07:39,349 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_XMDDexChain__success
[2020-11-25 09:07:39,349 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_XMDDexChain__fail
[2020-11-25 09:07:39,349 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_XMDDexChain__success
[2020-11-25 09:07:39,349 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_XMDDexChain__fail
[2020-11-25 09:07:39,349 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_XMDDexChain__fail
[2020-11-25 09:07:39,349 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~uint256_XMDDexChain__success
[2020-11-25 09:07:39,349 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~uint256_XMDDexChain__fail
[2020-11-25 09:07:39,349 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_XMDDexChain__success
[2020-11-25 09:07:39,349 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_XMDDexChain__fail
[2020-11-25 09:07:39,349 INFO  L130     BoogieDeclarations]: Found specification of procedure name_XMDDexChain__success
[2020-11-25 09:07:39,349 INFO  L130     BoogieDeclarations]: Found specification of procedure name_XMDDexChain__fail
[2020-11-25 09:07:39,350 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_XMDDexChain__success
[2020-11-25 09:07:39,350 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_XMDDexChain__fail
[2020-11-25 09:07:39,350 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_XMDDexChain__success
[2020-11-25 09:07:39,350 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_XMDDexChain__fail
[2020-11-25 09:07:39,350 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 09:07:39,350 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 09:07:39,350 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 09:07:39,350 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 09:07:39,350 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 09:07:39,350 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 09:07:39,350 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 09:07:39,350 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 09:07:39,351 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 09:07:39,351 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 09:07:39,351 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath__fail
[2020-11-25 09:07:39,351 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath__success
[2020-11-25 09:07:39,351 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath__fail
[2020-11-25 09:07:39,351 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath__success
[2020-11-25 09:07:39,351 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath__fail
[2020-11-25 09:07:39,351 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath__success
[2020-11-25 09:07:39,351 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath__fail
[2020-11-25 09:07:39,351 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath__success
[2020-11-25 09:07:39,351 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 09:07:39,352 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 09:07:39,352 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 09:07:39,352 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 09:07:39,352 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__fail
[2020-11-25 09:07:39,352 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__success
[2020-11-25 09:07:39,352 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__fail
[2020-11-25 09:07:39,352 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__success
[2020-11-25 09:07:39,352 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 09:07:39,352 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 09:07:39,352 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__fail
[2020-11-25 09:07:39,353 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__success
[2020-11-25 09:07:39,353 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__fail
[2020-11-25 09:07:39,353 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__success
[2020-11-25 09:07:39,353 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__fail
[2020-11-25 09:07:39,353 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__success
[2020-11-25 09:07:39,353 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__fail
[2020-11-25 09:07:39,353 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__success
[2020-11-25 09:07:39,353 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__fail
[2020-11-25 09:07:39,353 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__success
[2020-11-25 09:07:39,353 INFO  L138     BoogieDeclarations]: Found implementation of procedure XMDDexChain_XMDDexChain_NoBaseCtor__fail
[2020-11-25 09:07:39,353 INFO  L138     BoogieDeclarations]: Found implementation of procedure XMDDexChain_XMDDexChain_NoBaseCtor__success
[2020-11-25 09:07:39,354 INFO  L138     BoogieDeclarations]: Found implementation of procedure XMDDexChain_XMDDexChain__fail
[2020-11-25 09:07:39,354 INFO  L138     BoogieDeclarations]: Found implementation of procedure XMDDexChain_XMDDexChain__success
[2020-11-25 09:07:39,354 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_XMDDexChain__fail
[2020-11-25 09:07:39,354 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_XMDDexChain__success
[2020-11-25 09:07:39,354 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_XMDDexChain__fail
[2020-11-25 09:07:39,354 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_XMDDexChain__success
[2020-11-25 09:07:39,354 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_XMDDexChain__fail
[2020-11-25 09:07:39,354 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_XMDDexChain__success
[2020-11-25 09:07:39,354 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_XMDDexChain__fail
[2020-11-25 09:07:39,354 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_XMDDexChain__success
[2020-11-25 09:07:39,354 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_XMDDexChain__fail
[2020-11-25 09:07:39,355 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_XMDDexChain__success
[2020-11-25 09:07:39,355 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_XMDDexChain__fail
[2020-11-25 09:07:39,355 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_XMDDexChain__success
[2020-11-25 09:07:39,355 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_XMDDexChain__fail
[2020-11-25 09:07:39,355 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_XMDDexChain__success
[2020-11-25 09:07:39,355 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_XMDDexChain__fail
[2020-11-25 09:07:39,355 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_XMDDexChain__success
[2020-11-25 09:07:39,355 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~uint256_XMDDexChain__fail
[2020-11-25 09:07:39,355 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~uint256_XMDDexChain__success
[2020-11-25 09:07:39,355 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_XMDDexChain__fail
[2020-11-25 09:07:39,355 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_XMDDexChain__success
[2020-11-25 09:07:39,356 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_XMDDexChain__fail
[2020-11-25 09:07:39,356 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_XMDDexChain__success
[2020-11-25 09:07:39,356 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_XMDDexChain__fail
[2020-11-25 09:07:39,356 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_XMDDexChain__success
[2020-11-25 09:07:39,356 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_XMDDexChain__fail
[2020-11-25 09:07:39,356 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_XMDDexChain__success
[2020-11-25 09:07:39,356 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 09:07:39,356 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 09:07:39,356 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 09:07:39,356 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 09:07:39,356 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 09:07:39,357 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 09:07:39,357 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 09:07:39,357 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 09:07:39,357 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 09:07:39,357 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 09:07:39,357 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Interface
[2020-11-25 09:07:39,357 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Interface
[2020-11-25 09:07:39,357 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-25 09:07:39,357 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-25 09:07:39,357 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Owned
[2020-11-25 09:07:39,357 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Owned
[2020-11-25 09:07:39,358 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_XMDDexChain
[2020-11-25 09:07:39,358 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 09:07:39,358 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 09:07:39,358 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 09:07:39,612 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 09:07:39,613 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 09:07:39,613 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 09:07:40,027 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 09:07:40,027 INFO  L286             CfgBuilder]: Removed 5 assue(true) statements.
[2020-11-25 09:07:40,029 INFO  L202        PluginConnector]: Adding new model XMDDexChain_0xa8b0279acc96efebd09955ad8240b2d30b53055e_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 09:07:40 BoogieIcfgContainer
[2020-11-25 09:07:40,029 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:07:39" (2/2) ...
[2020-11-25 09:07:40,030 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 09:07:40,030 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@108142a6 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 09:07:40, skipping insertion in model container
[2020-11-25 09:07:40,030 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 09:07:40,030 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 09:07:40,030 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 09:07:40,032 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 09:07:40,032 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "XMDDexChain_0xa8b0279acc96efebd09955ad8240b2d30b53055e_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:07:39" (1/3) ...
[2020-11-25 09:07:40,032 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@29d9d3fe and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 09:07:40, skipping insertion in model container
[2020-11-25 09:07:40,033 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:07:39" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 09:07:40,075 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 09:07:40 NWAContainer
[2020-11-25 09:07:40,075 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 09:07:40,076 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 09:07:40,076 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 09:07:40,077 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 09:07:40,078 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "XMDDexChain_0xa8b0279acc96efebd09955ad8240b2d30b53055e_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 09:07:40" (3/4) ...
[2020-11-25 09:07:40,078 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@4505b1a5 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 09:07:40, skipping insertion in model container
[2020-11-25 09:07:40,079 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 09:07:40" (4/4) ...
[2020-11-25 09:07:40,082 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 09:07:40,086 INFO  L110   BuchiProductObserver]: Initial RCFG 1563 locations, 1975 edges
[2020-11-25 09:07:40,086 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 09:07:40,097 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 09:07:41,409 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 09:07:41,414 INFO  L110   BuchiProductObserver]: BuchiProgram size 3718 locations, 6399 edges
[2020-11-25 09:07:41,414 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 09:07:41 BoogieIcfgContainer
[2020-11-25 09:07:41,414 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 09:07:41,415 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 09:07:41,415 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 09:07:41,416 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 09:07:41,417 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 09:07:41" (1/1) ...
[2020-11-25 09:07:41,496 INFO  L313           BlockEncoder]: Initial Icfg 3718 locations, 6399 edges
[2020-11-25 09:07:41,496 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 09:07:41,497 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 09:07:41,497 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 09:07:41,497 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 09:07:41,508 INFO  L70    emoveInfeasibleEdges]: Removed 90 edges and 13 locations because of local infeasibility
[2020-11-25 09:07:41,515 INFO  L70        RemoveSinkStates]: Removed 38 edges and 25 locations by removing sink states
[2020-11-25 09:07:41,529 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 09:07:41,532 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 09:07:41,535 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 09:07:41,535 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 09:07:41,539 INFO  L313           BlockEncoder]: Encoded RCFG 3658 locations, 6239 edges
[2020-11-25 09:07:41,540 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 09:07:41 BasicIcfg
[2020-11-25 09:07:41,540 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 09:07:41,540 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 09:07:41,540 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 09:07:41,543 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 09:07:41,543 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:07:41,544 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "XMDDexChain_0xa8b0279acc96efebd09955ad8240b2d30b53055e_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:07:39" (1/6) ...
[2020-11-25 09:07:41,546 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4a3cbfdf and model type XMDDexChain_0xa8b0279acc96efebd09955ad8240b2d30b53055e_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 09:07:41, skipping insertion in model container
[2020-11-25 09:07:41,546 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:07:41,546 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:07:39" (2/6) ...
[2020-11-25 09:07:41,546 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4a3cbfdf and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 09:07:41, skipping insertion in model container
[2020-11-25 09:07:41,546 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:07:41,546 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "XMDDexChain_0xa8b0279acc96efebd09955ad8240b2d30b53055e_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 09:07:40" (3/6) ...
[2020-11-25 09:07:41,546 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4a3cbfdf and model type XMDDexChain_0xa8b0279acc96efebd09955ad8240b2d30b53055e_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 09:07:41, skipping insertion in model container
[2020-11-25 09:07:41,546 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:07:41,547 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 09:07:40" (4/6) ...
[2020-11-25 09:07:41,547 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4a3cbfdf and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 09:07:41, skipping insertion in model container
[2020-11-25 09:07:41,547 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:07:41,547 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 09:07:41" (5/6) ...
[2020-11-25 09:07:41,547 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4a3cbfdf and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 09:07:41, skipping insertion in model container
[2020-11-25 09:07:41,547 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:07:41,547 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 09:07:41" (6/6) ...
[2020-11-25 09:07:41,549 INFO  L404   chiAutomizerObserver]: Analyzing ICFG XMDDexChain_0xa8b0279acc96efebd09955ad8240b2d30b53055e_transfer-self.bpl_BEv2
[2020-11-25 09:07:41,585 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 09:07:41,585 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 09:07:41,585 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 09:07:41,585 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 09:07:41,585 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 09:07:41,585 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 09:07:41,585 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 09:07:41,585 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 09:07:41,585 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 09:07:41,615 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3658 states.
[2020-11-25 09:07:41,666 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:07:41,667 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:07:41,667 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:07:41,676 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:07:41,677 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:07:41,677 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 09:07:41,677 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3658 states.
[2020-11-25 09:07:41,695 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:07:41,695 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:07:41,696 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:07:41,698 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:07:41,698 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_XMDDexChain0 := false;
[L2]                 call_transfer_XMDDexChain0 := false;
[L2]     CALL        call main();
[L4250]              assume null == 0;
[L4251]  CALL        call this := FreshRefGenerator__success();
[L1927]              havoc newRef;
[L1928]              assume Alloc[newRef] == false;
[L1929]              Alloc[newRef] := true;
[L1930]              assume newRef != null;
[L4251]  RET         call this := FreshRefGenerator__success();
[L4252]              assume now >= 0;
[L4253]              assume DType[this] == XMDDexChain;
[L4254]              assume msgvalue_MSG == 0;
[L4255]              gas := gas - 53000;
[L4256]  CALL        call XMDDexChain_XMDDexChain(this, msgsender_MSG, msgvalue_MSG);
[L768]               havoc __exception;
[L769]               revert := false;
[L770]   COND FALSE  !(__exception)
[L793]   CALL        call XMDDexChain_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG);
[L2275]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2063]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2048]              assume msgsender_MSG != null;
[L2049]              Balance[this] := 0;
[L2063]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  COND FALSE  !(revert)
[L2275]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  COND TRUE   revert
[L793]   RET         call XMDDexChain_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG);
[L794]               assume !revert && gas >= 0;
[L4256]  RET         call XMDDexChain_XMDDexChain(this, msgsender_MSG, msgvalue_MSG);
[L4257]              assume !revert && gas >= 0;

Loop:
[L4260]  CALL        call CorralChoice_XMDDexChain(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != XMDDexChain;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND TRUE   choice == 20
[L4110]              gas := gas - 21000;
[L4111]  COND FALSE  !(gas >= 0)
[L4260]  RET         call CorralChoice_XMDDexChain(this);

[2020-11-25 09:07:41,714 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:07:41,715 INFO  L82        PathProgramCache]: Analyzing trace with hash 1493412860, now seen corresponding path program 1 times
[2020-11-25 09:07:41,720 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:07:41,750 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:07:41,788 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 09:07:41,790 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:07:41,790 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 09:07:41,976 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:07:41,988 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 09:07:41,988 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 09:07:41,990 INFO  L87              Difference]: Start difference. First operand 3658 states. Second operand 3 states.
[2020-11-25 09:07:42,194 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:07:42,194 INFO  L93              Difference]: Finished difference Result 2514 states and 2743 transitions.
[2020-11-25 09:07:42,194 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 09:07:42,196 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2514 states and 2743 transitions.
[2020-11-25 09:07:42,215 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:07:42,238 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2514 states to 2514 states and 2743 transitions.
[2020-11-25 09:07:42,239 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 09:07:42,242 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 858
[2020-11-25 09:07:42,242 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2514 states and 2743 transitions.
[2020-11-25 09:07:42,249 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:07:42,249 INFO  L728         BuchiCegarLoop]: Abstraction has 2514 states and 2743 transitions.
[2020-11-25 09:07:42,267 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2514 states and 2743 transitions.
[2020-11-25 09:07:42,318 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2514 to 2514.
[2020-11-25 09:07:42,319 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2514 states.
[2020-11-25 09:07:42,324 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2514 states to 2514 states and 2743 transitions.
[2020-11-25 09:07:42,325 INFO  L751         BuchiCegarLoop]: Abstraction has 2514 states and 2743 transitions.
[2020-11-25 09:07:42,325 INFO  L631         BuchiCegarLoop]: Abstraction has 2514 states and 2743 transitions.
[2020-11-25 09:07:42,325 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 09:07:42,326 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2514 states and 2743 transitions.
[2020-11-25 09:07:42,334 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:07:42,334 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:07:42,334 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:07:42,337 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:07:42,337 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_XMDDexChain0 := false;
[L2]                 call_transfer_XMDDexChain0 := false;
[L2]     CALL        call main();
[L4250]              assume null == 0;
[L4251]  CALL        call this := FreshRefGenerator__success();
[L1927]              havoc newRef;
[L1928]              assume Alloc[newRef] == false;
[L1929]              Alloc[newRef] := true;
[L1930]              assume newRef != null;
[L4251]  RET         call this := FreshRefGenerator__success();
[L4252]              assume now >= 0;
[L4253]              assume DType[this] == XMDDexChain;
[L4254]              assume msgvalue_MSG == 0;
[L4255]              gas := gas - 53000;
[L4256]  CALL        call XMDDexChain_XMDDexChain(this, msgsender_MSG, msgvalue_MSG);
[L768]               havoc __exception;
[L769]               revert := false;
[L770]   COND FALSE  !(__exception)
[L793]   CALL        call XMDDexChain_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG);
[L2275]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2063]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2048]              assume msgsender_MSG != null;
[L2049]              Balance[this] := 0;
[L2063]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  COND FALSE  !(revert)
[L2275]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  COND TRUE   revert
[L793]   RET         call XMDDexChain_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG);
[L794]               assume !revert && gas >= 0;
[L4256]  RET         call XMDDexChain_XMDDexChain(this, msgsender_MSG, msgvalue_MSG);
[L4257]              assume !revert && gas >= 0;
[L4260]  CALL        call CorralChoice_XMDDexChain(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != XMDDexChain;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND FALSE  !(choice == 20)
[L4117]  COND FALSE  !(choice == 19)
[L4125]  COND FALSE  !(choice == 18)
[L4133]  COND FALSE  !(choice == 17)
[L4141]  COND FALSE  !(choice == 16)
[L4147]  COND FALSE  !(choice == 15)
[L4153]  COND FALSE  !(choice == 14)
[L4159]  COND TRUE   choice == 13
[L4160]              gas := gas - 21000;
[L4161]  COND TRUE   gas >= 0
[L4162]              assume tokens_s371 >= 0 && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4163]              assume msgvalue_MSG == 0;
[L4164]  CALL        call success_s371 := transfer~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s371 && tokens_s371 <= balances_XMDDexChain[this][msgsender_MSG]) && tokens_s371 >= 0) && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][to_s371] >= 0) && balances_XMDDexChain[this][to_s371] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][msgsender_MSG] >= 0) && balances_XMDDexChain[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_XMDDexChain0 := true;
[L2]                 call_transfer_XMDDexChain0 := false;
[L2]                 revert := revert_hold;
[L932]               havoc __exception;
[L933]               revert := false;
[L934]   COND FALSE  !(__exception)
[L957]   CALL        call success_s371 := transfer~address~uint256_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2355]  COND TRUE   DType[this] == XMDDexChain
[L2356]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][msgsender_MSG], tokens_s371);
[L1994]  COND TRUE   !(b_s45 <= a_s45)
[L1995]              revert := true;
[L2356]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][msgsender_MSG], tokens_s371);
[L2357]  COND TRUE   revert
[L957]   RET         call success_s371 := transfer~address~uint256_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L958]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((success_s371 == true && _totalSupply_XMDDexChain[this] == old(_totalSupply_XMDDexChain[this])) && balances_XMDDexChain[this] == old(balances_XMDDexChain[this])) && allowed_XMDDexChain[this] == old(allowed_XMDDexChain[this])) && symbol_XMDDexChain[this] == old(symbol_XMDDexChain[this])) && name_XMDDexChain[this] == old(name_XMDDexChain[this])) && decimals_XMDDexChain[this] == old(decimals_XMDDexChain[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L4164]  RET         call success_s371 := transfer~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L4260]  RET         call CorralChoice_XMDDexChain(this);

Loop:
[L4260]  CALL        call CorralChoice_XMDDexChain(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != XMDDexChain;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND FALSE  !(choice == 20)
[L4117]  COND FALSE  !(choice == 19)
[L4125]  COND FALSE  !(choice == 18)
[L4133]  COND FALSE  !(choice == 17)
[L4141]  COND FALSE  !(choice == 16)
[L4147]  COND FALSE  !(choice == 15)
[L4153]  COND FALSE  !(choice == 14)
[L4159]  COND TRUE   choice == 13
[L4160]              gas := gas - 21000;
[L4161]  COND TRUE   gas >= 0
[L4162]              assume tokens_s371 >= 0 && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4163]              assume msgvalue_MSG == 0;
[L4164]  CALL        call success_s371 := transfer~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s371 && tokens_s371 <= balances_XMDDexChain[this][msgsender_MSG]) && tokens_s371 >= 0) && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][to_s371] >= 0) && balances_XMDDexChain[this][to_s371] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][msgsender_MSG] >= 0) && balances_XMDDexChain[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_XMDDexChain0 := true;
[L2]                 call_transfer_XMDDexChain0 := false;
[L2]                 revert := revert_hold;
[L932]               havoc __exception;
[L933]               revert := false;
[L934]   COND FALSE  !(__exception)
[L957]   CALL        call success_s371 := transfer~address~uint256_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2355]  COND TRUE   DType[this] == XMDDexChain
[L2356]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][msgsender_MSG], tokens_s371);
[L1994]  COND TRUE   !(b_s45 <= a_s45)
[L1995]              revert := true;
[L2356]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][msgsender_MSG], tokens_s371);
[L2357]  COND TRUE   revert
[L957]   RET         call success_s371 := transfer~address~uint256_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L958]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((success_s371 == true && _totalSupply_XMDDexChain[this] == old(_totalSupply_XMDDexChain[this])) && balances_XMDDexChain[this] == old(balances_XMDDexChain[this])) && allowed_XMDDexChain[this] == old(allowed_XMDDexChain[this])) && symbol_XMDDexChain[this] == old(symbol_XMDDexChain[this])) && name_XMDDexChain[this] == old(name_XMDDexChain[this])) && decimals_XMDDexChain[this] == old(decimals_XMDDexChain[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L4164]  RET         call success_s371 := transfer~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L4260]  RET         call CorralChoice_XMDDexChain(this);

[2020-11-25 09:07:42,342 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:07:42,342 INFO  L82        PathProgramCache]: Analyzing trace with hash 265300016, now seen corresponding path program 1 times
[2020-11-25 09:07:42,343 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:07:42,355 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:07:42,383 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 09:07:42,383 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:07:42,384 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 09:07:42,385 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:07:42,385 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 09:07:42,385 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 09:07:42,386 INFO  L87              Difference]: Start difference. First operand 2514 states and 2743 transitions. cyclomatic complexity: 231 Second operand 4 states.
[2020-11-25 09:07:42,817 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:07:42,818 INFO  L93              Difference]: Finished difference Result 3734 states and 4235 transitions.
[2020-11-25 09:07:42,818 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 09:07:42,818 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3734 states and 4235 transitions.
[2020-11-25 09:07:42,833 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 09:07:42,848 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3734 states to 3614 states and 4107 transitions.
[2020-11-25 09:07:42,848 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1180
[2020-11-25 09:07:42,849 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1190
[2020-11-25 09:07:42,849 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3614 states and 4107 transitions.
[2020-11-25 09:07:42,855 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:07:42,855 INFO  L728         BuchiCegarLoop]: Abstraction has 3614 states and 4107 transitions.
[2020-11-25 09:07:42,857 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3614 states and 4107 transitions.
[2020-11-25 09:07:42,883 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3614 to 2550.
[2020-11-25 09:07:42,883 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2550 states.
[2020-11-25 09:07:42,887 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2550 states to 2550 states and 2735 transitions.
[2020-11-25 09:07:42,887 INFO  L751         BuchiCegarLoop]: Abstraction has 2550 states and 2735 transitions.
[2020-11-25 09:07:42,887 INFO  L631         BuchiCegarLoop]: Abstraction has 2550 states and 2735 transitions.
[2020-11-25 09:07:42,887 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 09:07:42,887 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2550 states and 2735 transitions.
[2020-11-25 09:07:42,892 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:07:42,892 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:07:42,892 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:07:42,893 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:07:42,893 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_XMDDexChain0 := false;
[L2]                 call_transfer_XMDDexChain0 := false;
[L2]     CALL        call main();
[L4250]              assume null == 0;
[L4251]  CALL        call this := FreshRefGenerator__success();
[L1927]              havoc newRef;
[L1928]              assume Alloc[newRef] == false;
[L1929]              Alloc[newRef] := true;
[L1930]              assume newRef != null;
[L4251]  RET         call this := FreshRefGenerator__success();
[L4252]              assume now >= 0;
[L4253]              assume DType[this] == XMDDexChain;
[L4254]              assume msgvalue_MSG == 0;
[L4255]              gas := gas - 53000;
[L4256]  CALL        call XMDDexChain_XMDDexChain(this, msgsender_MSG, msgvalue_MSG);
[L768]               havoc __exception;
[L769]               revert := false;
[L770]   COND FALSE  !(__exception)
[L793]   CALL        call XMDDexChain_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG);
[L2275]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2063]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2048]              assume msgsender_MSG != null;
[L2049]              Balance[this] := 0;
[L2063]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  COND FALSE  !(revert)
[L2275]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  COND FALSE  !(revert)
[L2279]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2133]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]              assume msgsender_MSG != null;
[L2116]              Balance[this] := 0;
[L2117]              owner_Owned[this] := null;
[L2118]              newOwner_Owned[this] := null;
[L2120]              owner_Owned[this] := msgsender_MSG;
[L2133]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  COND FALSE  !(revert)
[L2279]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2280]  COND FALSE  !(revert)
[L2283]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1959]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1944]              assume msgsender_MSG != null;
[L1945]              Balance[this] := 0;
[L1959]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  COND FALSE  !(revert)
[L2283]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2284]  COND FALSE  !(revert)
[L2287]  CALL        call XMDDexChain_XMDDexChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2232]              assume msgsender_MSG != null;
[L2233]              Balance[this] := 0;
[L2234]              symbol_XMDDexChain[this] := -1282837888;
[L2235]              name_XMDDexChain[this] := -1282837888;
[L2236]              decimals_XMDDexChain[this] := 0;
[L2237]              _totalSupply_XMDDexChain[this] := 0;
[L2238]              balances_XMDDexChain[this] := zeroRefintArr();
[L2239]              sum_balances0[this] := 0;
[L2240]              allowed_XMDDexChain[this] := zeroRefRefintArr();
[L2241]              sum_allowed1[this] := 0;
[L2243]              symbol_XMDDexChain[this] := 542303379;
[L2244]              name_XMDDexChain[this] := -1719409972;
[L2245]              decimals_XMDDexChain[this] := 8;
[L2246]              _totalSupply_XMDDexChain[this] := 2100000000000000000;
[L2247]              sum_balances0[this] := sum_balances0[this] - balances_XMDDexChain[this][-329037191581184949150908255081869838117273532011];
[L2248]              balances_XMDDexChain[this][-329037191581184949150908255081869838117273532011] := _totalSupply_XMDDexChain[this];
[L2249]              sum_balances0[this] := sum_balances0[this] + balances_XMDDexChain[this][-329037191581184949150908255081869838117273532011];
[L2250]              assert { :EventEmitted "Transfer_XMDDexChain" } true;
[L2287]  RET         call XMDDexChain_XMDDexChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2288]  COND FALSE  !(revert)
[L793]   RET         call XMDDexChain_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG);
[L794]               assume !revert && gas >= 0;
[L4256]  RET         call XMDDexChain_XMDDexChain(this, msgsender_MSG, msgvalue_MSG);
[L4257]              assume !revert && gas >= 0;
[L4260]  CALL        call CorralChoice_XMDDexChain(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != XMDDexChain;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND FALSE  !(choice == 20)
[L4117]  COND FALSE  !(choice == 19)
[L4125]  COND FALSE  !(choice == 18)
[L4133]  COND FALSE  !(choice == 17)
[L4141]  COND FALSE  !(choice == 16)
[L4147]  COND FALSE  !(choice == 15)
[L4153]  COND FALSE  !(choice == 14)
[L4159]  COND TRUE   choice == 13
[L4160]              gas := gas - 21000;
[L4161]  COND TRUE   gas >= 0
[L4162]              assume tokens_s371 >= 0 && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4163]              assume msgvalue_MSG == 0;
[L4164]  CALL        call success_s371 := transfer~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s371 && tokens_s371 <= balances_XMDDexChain[this][msgsender_MSG]) && tokens_s371 >= 0) && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][to_s371] >= 0) && balances_XMDDexChain[this][to_s371] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][msgsender_MSG] >= 0) && balances_XMDDexChain[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_XMDDexChain0 := true;
[L2]                 call_transfer_XMDDexChain0 := false;
[L2]                 revert := revert_hold;
[L932]               havoc __exception;
[L933]               revert := false;
[L934]   COND TRUE   __exception
[L935]               __tmp__Balance := Balance;
[L936]               __tmp__DType := DType;
[L937]               __tmp__Alloc := Alloc;
[L938]               __tmp__balance_ADDR := balance_ADDR;
[L939]               __tmp__M_Ref_int := M_Ref_int;
[L940]               __tmp__sum_balances0 := sum_balances0;
[L941]               __tmp__alloc_allowed_XMDDexChain_lvl0 := alloc_allowed_XMDDexChain_lvl0;
[L942]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L943]               __tmp__sum_allowed1 := sum_allowed1;
[L944]               __tmp__Length := Length;
[L945]               __tmp__now := now;
[L946]               __tmp__owner_Owned := owner_Owned;
[L947]               __tmp__newOwner_Owned := newOwner_Owned;
[L948]               __tmp__symbol_XMDDexChain := symbol_XMDDexChain;
[L949]               __tmp__name_XMDDexChain := name_XMDDexChain;
[L950]               __tmp__decimals_XMDDexChain := decimals_XMDDexChain;
[L951]               __tmp___totalSupply_XMDDexChain := _totalSupply_XMDDexChain;
[L952]               __tmp__balances_XMDDexChain := balances_XMDDexChain;
[L953]               __tmp__allowed_XMDDexChain := allowed_XMDDexChain;
[L954]   CALL        call success_s371 := transfer~address~uint256_XMDDexChain__fail(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2325]  COND TRUE   __tmp__DType[this] == XMDDexChain
[L2326]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_XMDDexChain[this][msgsender_MSG], tokens_s371);
[L1985]  COND TRUE   !(b_s45 <= a_s45)
[L1986]              revert := true;
[L2326]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_XMDDexChain[this][msgsender_MSG], tokens_s371);
[L2327]  COND TRUE   revert
[L954]   RET         call success_s371 := transfer~address~uint256_XMDDexChain__fail(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L955]               assume revert || gas < 0;
[L4164]  RET         call success_s371 := transfer~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L4260]  RET         call CorralChoice_XMDDexChain(this);

Loop:
[L4260]  CALL        call CorralChoice_XMDDexChain(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != XMDDexChain;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND FALSE  !(choice == 20)
[L4117]  COND FALSE  !(choice == 19)
[L4125]  COND FALSE  !(choice == 18)
[L4133]  COND FALSE  !(choice == 17)
[L4141]  COND FALSE  !(choice == 16)
[L4147]  COND FALSE  !(choice == 15)
[L4153]  COND FALSE  !(choice == 14)
[L4159]  COND TRUE   choice == 13
[L4160]              gas := gas - 21000;
[L4161]  COND TRUE   gas >= 0
[L4162]              assume tokens_s371 >= 0 && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4163]              assume msgvalue_MSG == 0;
[L4164]  CALL        call success_s371 := transfer~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s371 && tokens_s371 <= balances_XMDDexChain[this][msgsender_MSG]) && tokens_s371 >= 0) && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][to_s371] >= 0) && balances_XMDDexChain[this][to_s371] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][msgsender_MSG] >= 0) && balances_XMDDexChain[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_XMDDexChain0 := true;
[L2]                 call_transfer_XMDDexChain0 := false;
[L2]                 revert := revert_hold;
[L932]               havoc __exception;
[L933]               revert := false;
[L934]   COND TRUE   __exception
[L935]               __tmp__Balance := Balance;
[L936]               __tmp__DType := DType;
[L937]               __tmp__Alloc := Alloc;
[L938]               __tmp__balance_ADDR := balance_ADDR;
[L939]               __tmp__M_Ref_int := M_Ref_int;
[L940]               __tmp__sum_balances0 := sum_balances0;
[L941]               __tmp__alloc_allowed_XMDDexChain_lvl0 := alloc_allowed_XMDDexChain_lvl0;
[L942]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L943]               __tmp__sum_allowed1 := sum_allowed1;
[L944]               __tmp__Length := Length;
[L945]               __tmp__now := now;
[L946]               __tmp__owner_Owned := owner_Owned;
[L947]               __tmp__newOwner_Owned := newOwner_Owned;
[L948]               __tmp__symbol_XMDDexChain := symbol_XMDDexChain;
[L949]               __tmp__name_XMDDexChain := name_XMDDexChain;
[L950]               __tmp__decimals_XMDDexChain := decimals_XMDDexChain;
[L951]               __tmp___totalSupply_XMDDexChain := _totalSupply_XMDDexChain;
[L952]               __tmp__balances_XMDDexChain := balances_XMDDexChain;
[L953]               __tmp__allowed_XMDDexChain := allowed_XMDDexChain;
[L954]   CALL        call success_s371 := transfer~address~uint256_XMDDexChain__fail(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2325]  COND TRUE   __tmp__DType[this] == XMDDexChain
[L2326]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_XMDDexChain[this][msgsender_MSG], tokens_s371);
[L1985]  COND TRUE   !(b_s45 <= a_s45)
[L1986]              revert := true;
[L2326]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_XMDDexChain[this][msgsender_MSG], tokens_s371);
[L2327]  COND TRUE   revert
[L954]   RET         call success_s371 := transfer~address~uint256_XMDDexChain__fail(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L955]               assume revert || gas < 0;
[L4164]  RET         call success_s371 := transfer~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L4260]  RET         call CorralChoice_XMDDexChain(this);

[2020-11-25 09:07:42,897 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:07:42,897 INFO  L82        PathProgramCache]: Analyzing trace with hash -1047308455, now seen corresponding path program 1 times
[2020-11-25 09:07:42,897 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:07:42,911 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:07:43,012 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 09:07:43,013 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:07:43,014 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 09:07:43,015 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:07:43,015 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 09:07:43,016 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 09:07:43,016 INFO  L87              Difference]: Start difference. First operand 2550 states and 2735 transitions. cyclomatic complexity: 187 Second operand 7 states.
[2020-11-25 09:07:43,879 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:07:43,880 INFO  L93              Difference]: Finished difference Result 2758 states and 2961 transitions.
[2020-11-25 09:07:43,880 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 09:07:43,880 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2758 states and 2961 transitions.
[2020-11-25 09:07:43,886 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:07:43,893 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2758 states to 2758 states and 2961 transitions.
[2020-11-25 09:07:43,894 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 958
[2020-11-25 09:07:43,894 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 958
[2020-11-25 09:07:43,894 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2758 states and 2961 transitions.
[2020-11-25 09:07:43,896 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:07:43,896 INFO  L728         BuchiCegarLoop]: Abstraction has 2758 states and 2961 transitions.
[2020-11-25 09:07:43,898 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2758 states and 2961 transitions.
[2020-11-25 09:07:43,916 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2758 to 2606.
[2020-11-25 09:07:43,917 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2606 states.
[2020-11-25 09:07:43,919 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2606 states to 2606 states and 2799 transitions.
[2020-11-25 09:07:43,919 INFO  L751         BuchiCegarLoop]: Abstraction has 2606 states and 2799 transitions.
[2020-11-25 09:07:43,919 INFO  L631         BuchiCegarLoop]: Abstraction has 2606 states and 2799 transitions.
[2020-11-25 09:07:43,919 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 09:07:43,919 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2606 states and 2799 transitions.
[2020-11-25 09:07:43,923 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:07:43,924 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:07:43,924 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:07:43,925 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:07:43,925 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_XMDDexChain0 := false;
[L2]                 call_transfer_XMDDexChain0 := false;
[L2]     CALL        call main();
[L4250]              assume null == 0;
[L4251]  CALL        call this := FreshRefGenerator__success();
[L1927]              havoc newRef;
[L1928]              assume Alloc[newRef] == false;
[L1929]              Alloc[newRef] := true;
[L1930]              assume newRef != null;
[L4251]  RET         call this := FreshRefGenerator__success();
[L4252]              assume now >= 0;
[L4253]              assume DType[this] == XMDDexChain;
[L4254]              assume msgvalue_MSG == 0;
[L4255]              gas := gas - 53000;
[L4256]  CALL        call XMDDexChain_XMDDexChain(this, msgsender_MSG, msgvalue_MSG);
[L768]               havoc __exception;
[L769]               revert := false;
[L770]   COND FALSE  !(__exception)
[L793]   CALL        call XMDDexChain_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG);
[L2275]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2063]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2048]              assume msgsender_MSG != null;
[L2049]              Balance[this] := 0;
[L2063]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  COND FALSE  !(revert)
[L2275]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  COND FALSE  !(revert)
[L2279]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2133]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]              assume msgsender_MSG != null;
[L2116]              Balance[this] := 0;
[L2117]              owner_Owned[this] := null;
[L2118]              newOwner_Owned[this] := null;
[L2120]              owner_Owned[this] := msgsender_MSG;
[L2133]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  COND FALSE  !(revert)
[L2279]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2280]  COND FALSE  !(revert)
[L2283]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1959]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1944]              assume msgsender_MSG != null;
[L1945]              Balance[this] := 0;
[L1959]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  COND FALSE  !(revert)
[L2283]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2284]  COND FALSE  !(revert)
[L2287]  CALL        call XMDDexChain_XMDDexChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2232]              assume msgsender_MSG != null;
[L2233]              Balance[this] := 0;
[L2234]              symbol_XMDDexChain[this] := -1282837888;
[L2235]              name_XMDDexChain[this] := -1282837888;
[L2236]              decimals_XMDDexChain[this] := 0;
[L2237]              _totalSupply_XMDDexChain[this] := 0;
[L2238]              balances_XMDDexChain[this] := zeroRefintArr();
[L2239]              sum_balances0[this] := 0;
[L2240]              allowed_XMDDexChain[this] := zeroRefRefintArr();
[L2241]              sum_allowed1[this] := 0;
[L2243]              symbol_XMDDexChain[this] := 542303379;
[L2244]              name_XMDDexChain[this] := -1719409972;
[L2245]              decimals_XMDDexChain[this] := 8;
[L2246]              _totalSupply_XMDDexChain[this] := 2100000000000000000;
[L2247]              sum_balances0[this] := sum_balances0[this] - balances_XMDDexChain[this][-329037191581184949150908255081869838117273532011];
[L2248]              balances_XMDDexChain[this][-329037191581184949150908255081869838117273532011] := _totalSupply_XMDDexChain[this];
[L2249]              sum_balances0[this] := sum_balances0[this] + balances_XMDDexChain[this][-329037191581184949150908255081869838117273532011];
[L2250]              assert { :EventEmitted "Transfer_XMDDexChain" } true;
[L2287]  RET         call XMDDexChain_XMDDexChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2288]  COND FALSE  !(revert)
[L793]   RET         call XMDDexChain_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG);
[L794]               assume !revert && gas >= 0;
[L4256]  RET         call XMDDexChain_XMDDexChain(this, msgsender_MSG, msgvalue_MSG);
[L4257]              assume !revert && gas >= 0;
[L4260]  CALL        call CorralChoice_XMDDexChain(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != XMDDexChain;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND FALSE  !(choice == 20)
[L4117]  COND FALSE  !(choice == 19)
[L4125]  COND FALSE  !(choice == 18)
[L4133]  COND FALSE  !(choice == 17)
[L4141]  COND FALSE  !(choice == 16)
[L4147]  COND FALSE  !(choice == 15)
[L4153]  COND FALSE  !(choice == 14)
[L4159]  COND TRUE   choice == 13
[L4160]              gas := gas - 21000;
[L4161]  COND TRUE   gas >= 0
[L4162]              assume tokens_s371 >= 0 && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4163]              assume msgvalue_MSG == 0;
[L4164]  CALL        call success_s371 := transfer~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s371 && tokens_s371 <= balances_XMDDexChain[this][msgsender_MSG]) && tokens_s371 >= 0) && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][to_s371] >= 0) && balances_XMDDexChain[this][to_s371] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][msgsender_MSG] >= 0) && balances_XMDDexChain[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_XMDDexChain0 := true;
[L2]                 call_transfer_XMDDexChain0 := false;
[L2]                 revert := revert_hold;
[L932]               havoc __exception;
[L933]               revert := false;
[L934]   COND FALSE  !(__exception)
[L957]   CALL        call success_s371 := transfer~address~uint256_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2355]  COND TRUE   DType[this] == XMDDexChain
[L2356]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][msgsender_MSG], tokens_s371);
[L1994]  COND FALSE  !(!(b_s45 <= a_s45))
[L1998]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2356]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][msgsender_MSG], tokens_s371);
[L2357]  COND FALSE  !(revert)
[L2363]              sum_balances0[this] := sum_balances0[this] - balances_XMDDexChain[this][msgsender_MSG];
[L2364]              balances_XMDDexChain[this][msgsender_MSG] := __var_3;
[L2365]              sum_balances0[this] := sum_balances0[this] + balances_XMDDexChain[this][msgsender_MSG];
[L2366]  COND TRUE   DType[this] == XMDDexChain
[L2367]  CALL        call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][to_s371], tokens_s371);
[L1976]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1977]  COND FALSE  !(!(c_s23 >= a_s23))
[L2367]  RET         call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][to_s371], tokens_s371);
[L2368]  COND FALSE  !(revert)
[L2374]              sum_balances0[this] := sum_balances0[this] - balances_XMDDexChain[this][to_s371];
[L2375]              balances_XMDDexChain[this][to_s371] := __var_4;
[L2376]              sum_balances0[this] := sum_balances0[this] + balances_XMDDexChain[this][to_s371];
[L2377]              assert { :EventEmitted "Transfer_XMDDexChain" } true;
[L2378]              success_s371 := true;
[L957]   RET         call success_s371 := transfer~address~uint256_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L958]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((success_s371 == true && _totalSupply_XMDDexChain[this] == old(_totalSupply_XMDDexChain[this])) && balances_XMDDexChain[this] == old(balances_XMDDexChain[this])) && allowed_XMDDexChain[this] == old(allowed_XMDDexChain[this])) && symbol_XMDDexChain[this] == old(symbol_XMDDexChain[this])) && name_XMDDexChain[this] == old(name_XMDDexChain[this])) && decimals_XMDDexChain[this] == old(decimals_XMDDexChain[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L4164]  RET         call success_s371 := transfer~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L4260]  RET         call CorralChoice_XMDDexChain(this);

Loop:
[L4260]  CALL        call CorralChoice_XMDDexChain(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != XMDDexChain;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND FALSE  !(choice == 20)
[L4117]  COND FALSE  !(choice == 19)
[L4125]  COND FALSE  !(choice == 18)
[L4133]  COND FALSE  !(choice == 17)
[L4141]  COND FALSE  !(choice == 16)
[L4147]  COND FALSE  !(choice == 15)
[L4153]  COND FALSE  !(choice == 14)
[L4159]  COND TRUE   choice == 13
[L4160]              gas := gas - 21000;
[L4161]  COND TRUE   gas >= 0
[L4162]              assume tokens_s371 >= 0 && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4163]              assume msgvalue_MSG == 0;
[L4164]  CALL        call success_s371 := transfer~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s371 && tokens_s371 <= balances_XMDDexChain[this][msgsender_MSG]) && tokens_s371 >= 0) && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][to_s371] >= 0) && balances_XMDDexChain[this][to_s371] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][msgsender_MSG] >= 0) && balances_XMDDexChain[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_XMDDexChain0 := true;
[L2]                 call_transfer_XMDDexChain0 := false;
[L2]                 revert := revert_hold;
[L932]               havoc __exception;
[L933]               revert := false;
[L934]   COND FALSE  !(__exception)
[L957]   CALL        call success_s371 := transfer~address~uint256_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2355]  COND TRUE   DType[this] == XMDDexChain
[L2356]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][msgsender_MSG], tokens_s371);
[L1994]  COND FALSE  !(!(b_s45 <= a_s45))
[L1998]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2356]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][msgsender_MSG], tokens_s371);
[L2357]  COND FALSE  !(revert)
[L2363]              sum_balances0[this] := sum_balances0[this] - balances_XMDDexChain[this][msgsender_MSG];
[L2364]              balances_XMDDexChain[this][msgsender_MSG] := __var_3;
[L2365]              sum_balances0[this] := sum_balances0[this] + balances_XMDDexChain[this][msgsender_MSG];
[L2366]  COND TRUE   DType[this] == XMDDexChain
[L2367]  CALL        call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][to_s371], tokens_s371);
[L1976]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1977]  COND FALSE  !(!(c_s23 >= a_s23))
[L2367]  RET         call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][to_s371], tokens_s371);
[L2368]  COND FALSE  !(revert)
[L2374]              sum_balances0[this] := sum_balances0[this] - balances_XMDDexChain[this][to_s371];
[L2375]              balances_XMDDexChain[this][to_s371] := __var_4;
[L2376]              sum_balances0[this] := sum_balances0[this] + balances_XMDDexChain[this][to_s371];
[L2377]              assert { :EventEmitted "Transfer_XMDDexChain" } true;
[L2378]              success_s371 := true;
[L957]   RET         call success_s371 := transfer~address~uint256_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L958]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((success_s371 == true && _totalSupply_XMDDexChain[this] == old(_totalSupply_XMDDexChain[this])) && balances_XMDDexChain[this] == old(balances_XMDDexChain[this])) && allowed_XMDDexChain[this] == old(allowed_XMDDexChain[this])) && symbol_XMDDexChain[this] == old(symbol_XMDDexChain[this])) && name_XMDDexChain[this] == old(name_XMDDexChain[this])) && decimals_XMDDexChain[this] == old(decimals_XMDDexChain[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L4164]  RET         call success_s371 := transfer~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L4260]  RET         call CorralChoice_XMDDexChain(this);

[2020-11-25 09:07:43,928 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:07:43,928 INFO  L82        PathProgramCache]: Analyzing trace with hash 1245631053, now seen corresponding path program 1 times
[2020-11-25 09:07:43,929 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:07:43,966 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:07:44,541 WARN  L188               SmtUtils]: Spent 110.00 ms on a formula simplification. DAG size of input: 88 DAG size of output: 73
[2020-11-25 09:07:45,229 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 09:07:45,229 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:07:45,230 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [27] imperfect sequences [] total 27
[2020-11-25 09:07:45,230 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:07:45,230 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 28 interpolants.
[2020-11-25 09:07:45,230 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=70, Invalid=686, Unknown=0, NotChecked=0, Total=756
[2020-11-25 09:07:45,230 INFO  L87              Difference]: Start difference. First operand 2606 states and 2799 transitions. cyclomatic complexity: 195 Second operand 28 states.
[2020-11-25 09:07:48,779 WARN  L188               SmtUtils]: Spent 142.00 ms on a formula simplification. DAG size of input: 95 DAG size of output: 89
[2020-11-25 09:07:53,789 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:07:53,789 INFO  L93              Difference]: Finished difference Result 2685 states and 2904 transitions.
[2020-11-25 09:07:53,789 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 30 states. 
[2020-11-25 09:07:53,789 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2685 states and 2904 transitions.
[2020-11-25 09:07:53,794 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 09:07:53,801 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2685 states to 2685 states and 2904 transitions.
[2020-11-25 09:07:53,801 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 920
[2020-11-25 09:07:53,801 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 920
[2020-11-25 09:07:53,801 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2685 states and 2904 transitions.
[2020-11-25 09:07:53,804 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:07:53,804 INFO  L728         BuchiCegarLoop]: Abstraction has 2685 states and 2904 transitions.
[2020-11-25 09:07:53,806 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2685 states and 2904 transitions.
[2020-11-25 09:07:53,822 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2685 to 2670.
[2020-11-25 09:07:53,822 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2670 states.
[2020-11-25 09:07:53,824 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2670 states to 2670 states and 2873 transitions.
[2020-11-25 09:07:53,824 INFO  L751         BuchiCegarLoop]: Abstraction has 2670 states and 2873 transitions.
[2020-11-25 09:07:53,824 INFO  L631         BuchiCegarLoop]: Abstraction has 2670 states and 2873 transitions.
[2020-11-25 09:07:53,824 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 09:07:53,824 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2670 states and 2873 transitions.
[2020-11-25 09:07:53,827 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:07:53,827 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:07:53,827 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:07:53,829 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:07:53,829 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_XMDDexChain0 := false;
[L2]                 call_transfer_XMDDexChain0 := false;
[L2]     CALL        call main();
[L4250]              assume null == 0;
[L4251]  CALL        call this := FreshRefGenerator__success();
[L1927]              havoc newRef;
[L1928]              assume Alloc[newRef] == false;
[L1929]              Alloc[newRef] := true;
[L1930]              assume newRef != null;
[L4251]  RET         call this := FreshRefGenerator__success();
[L4252]              assume now >= 0;
[L4253]              assume DType[this] == XMDDexChain;
[L4254]              assume msgvalue_MSG == 0;
[L4255]              gas := gas - 53000;
[L4256]  CALL        call XMDDexChain_XMDDexChain(this, msgsender_MSG, msgvalue_MSG);
[L768]               havoc __exception;
[L769]               revert := false;
[L770]   COND FALSE  !(__exception)
[L793]   CALL        call XMDDexChain_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG);
[L2275]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2063]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2048]              assume msgsender_MSG != null;
[L2049]              Balance[this] := 0;
[L2063]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  COND FALSE  !(revert)
[L2275]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  COND FALSE  !(revert)
[L2279]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2133]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]              assume msgsender_MSG != null;
[L2116]              Balance[this] := 0;
[L2117]              owner_Owned[this] := null;
[L2118]              newOwner_Owned[this] := null;
[L2120]              owner_Owned[this] := msgsender_MSG;
[L2133]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  COND FALSE  !(revert)
[L2279]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2280]  COND FALSE  !(revert)
[L2283]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1959]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1944]              assume msgsender_MSG != null;
[L1945]              Balance[this] := 0;
[L1959]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  COND FALSE  !(revert)
[L2283]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2284]  COND FALSE  !(revert)
[L2287]  CALL        call XMDDexChain_XMDDexChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2232]              assume msgsender_MSG != null;
[L2233]              Balance[this] := 0;
[L2234]              symbol_XMDDexChain[this] := -1282837888;
[L2235]              name_XMDDexChain[this] := -1282837888;
[L2236]              decimals_XMDDexChain[this] := 0;
[L2237]              _totalSupply_XMDDexChain[this] := 0;
[L2238]              balances_XMDDexChain[this] := zeroRefintArr();
[L2239]              sum_balances0[this] := 0;
[L2240]              allowed_XMDDexChain[this] := zeroRefRefintArr();
[L2241]              sum_allowed1[this] := 0;
[L2243]              symbol_XMDDexChain[this] := 542303379;
[L2244]              name_XMDDexChain[this] := -1719409972;
[L2245]              decimals_XMDDexChain[this] := 8;
[L2246]              _totalSupply_XMDDexChain[this] := 2100000000000000000;
[L2247]              sum_balances0[this] := sum_balances0[this] - balances_XMDDexChain[this][-329037191581184949150908255081869838117273532011];
[L2248]              balances_XMDDexChain[this][-329037191581184949150908255081869838117273532011] := _totalSupply_XMDDexChain[this];
[L2249]              sum_balances0[this] := sum_balances0[this] + balances_XMDDexChain[this][-329037191581184949150908255081869838117273532011];
[L2250]              assert { :EventEmitted "Transfer_XMDDexChain" } true;
[L2287]  RET         call XMDDexChain_XMDDexChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2288]  COND FALSE  !(revert)
[L793]   RET         call XMDDexChain_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG);
[L794]               assume !revert && gas >= 0;
[L4256]  RET         call XMDDexChain_XMDDexChain(this, msgsender_MSG, msgvalue_MSG);
[L4257]              assume !revert && gas >= 0;
[L4260]  CALL        call CorralChoice_XMDDexChain(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != XMDDexChain;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND FALSE  !(choice == 20)
[L4117]  COND FALSE  !(choice == 19)
[L4125]  COND FALSE  !(choice == 18)
[L4133]  COND FALSE  !(choice == 17)
[L4141]  COND FALSE  !(choice == 16)
[L4147]  COND FALSE  !(choice == 15)
[L4153]  COND FALSE  !(choice == 14)
[L4159]  COND TRUE   choice == 13
[L4160]              gas := gas - 21000;
[L4161]  COND TRUE   gas >= 0
[L4162]              assume tokens_s371 >= 0 && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4163]              assume msgvalue_MSG == 0;
[L4164]  CALL        call success_s371 := transfer~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s371 && tokens_s371 <= balances_XMDDexChain[this][msgsender_MSG]) && tokens_s371 >= 0) && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][to_s371] >= 0) && balances_XMDDexChain[this][to_s371] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][msgsender_MSG] >= 0) && balances_XMDDexChain[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_XMDDexChain0 := true;
[L2]                 call_transfer_XMDDexChain0 := false;
[L2]                 revert := revert_hold;
[L932]               havoc __exception;
[L933]               revert := false;
[L934]   COND TRUE   __exception
[L935]               __tmp__Balance := Balance;
[L936]               __tmp__DType := DType;
[L937]               __tmp__Alloc := Alloc;
[L938]               __tmp__balance_ADDR := balance_ADDR;
[L939]               __tmp__M_Ref_int := M_Ref_int;
[L940]               __tmp__sum_balances0 := sum_balances0;
[L941]               __tmp__alloc_allowed_XMDDexChain_lvl0 := alloc_allowed_XMDDexChain_lvl0;
[L942]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L943]               __tmp__sum_allowed1 := sum_allowed1;
[L944]               __tmp__Length := Length;
[L945]               __tmp__now := now;
[L946]               __tmp__owner_Owned := owner_Owned;
[L947]               __tmp__newOwner_Owned := newOwner_Owned;
[L948]               __tmp__symbol_XMDDexChain := symbol_XMDDexChain;
[L949]               __tmp__name_XMDDexChain := name_XMDDexChain;
[L950]               __tmp__decimals_XMDDexChain := decimals_XMDDexChain;
[L951]               __tmp___totalSupply_XMDDexChain := _totalSupply_XMDDexChain;
[L952]               __tmp__balances_XMDDexChain := balances_XMDDexChain;
[L953]               __tmp__allowed_XMDDexChain := allowed_XMDDexChain;
[L954]   CALL        call success_s371 := transfer~address~uint256_XMDDexChain__fail(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2325]  COND TRUE   __tmp__DType[this] == XMDDexChain
[L2326]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_XMDDexChain[this][msgsender_MSG], tokens_s371);
[L1985]  COND FALSE  !(!(b_s45 <= a_s45))
[L1989]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2326]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_XMDDexChain[this][msgsender_MSG], tokens_s371);
[L2327]  COND FALSE  !(revert)
[L2333]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_XMDDexChain[this][msgsender_MSG];
[L2334]              __tmp__balances_XMDDexChain[this][msgsender_MSG] := __var_3;
[L2335]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_XMDDexChain[this][msgsender_MSG];
[L2336]  COND TRUE   __tmp__DType[this] == XMDDexChain
[L2337]  CALL        call __var_4 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_XMDDexChain[this][to_s371], tokens_s371);
[L1967]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1968]  COND TRUE   !(c_s23 >= a_s23)
[L1969]              revert := true;
[L2337]  RET         call __var_4 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_XMDDexChain[this][to_s371], tokens_s371);
[L2338]  COND TRUE   revert
[L954]   RET         call success_s371 := transfer~address~uint256_XMDDexChain__fail(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L955]               assume revert || gas < 0;
[L4164]  RET         call success_s371 := transfer~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L4260]  RET         call CorralChoice_XMDDexChain(this);

Loop:
[L4260]  CALL        call CorralChoice_XMDDexChain(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != XMDDexChain;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND FALSE  !(choice == 20)
[L4117]  COND FALSE  !(choice == 19)
[L4125]  COND FALSE  !(choice == 18)
[L4133]  COND FALSE  !(choice == 17)
[L4141]  COND FALSE  !(choice == 16)
[L4147]  COND FALSE  !(choice == 15)
[L4153]  COND FALSE  !(choice == 14)
[L4159]  COND TRUE   choice == 13
[L4160]              gas := gas - 21000;
[L4161]  COND TRUE   gas >= 0
[L4162]              assume tokens_s371 >= 0 && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4163]              assume msgvalue_MSG == 0;
[L4164]  CALL        call success_s371 := transfer~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s371 && tokens_s371 <= balances_XMDDexChain[this][msgsender_MSG]) && tokens_s371 >= 0) && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][to_s371] >= 0) && balances_XMDDexChain[this][to_s371] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][msgsender_MSG] >= 0) && balances_XMDDexChain[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_XMDDexChain0 := true;
[L2]                 call_transfer_XMDDexChain0 := false;
[L2]                 revert := revert_hold;
[L932]               havoc __exception;
[L933]               revert := false;
[L934]   COND TRUE   __exception
[L935]               __tmp__Balance := Balance;
[L936]               __tmp__DType := DType;
[L937]               __tmp__Alloc := Alloc;
[L938]               __tmp__balance_ADDR := balance_ADDR;
[L939]               __tmp__M_Ref_int := M_Ref_int;
[L940]               __tmp__sum_balances0 := sum_balances0;
[L941]               __tmp__alloc_allowed_XMDDexChain_lvl0 := alloc_allowed_XMDDexChain_lvl0;
[L942]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L943]               __tmp__sum_allowed1 := sum_allowed1;
[L944]               __tmp__Length := Length;
[L945]               __tmp__now := now;
[L946]               __tmp__owner_Owned := owner_Owned;
[L947]               __tmp__newOwner_Owned := newOwner_Owned;
[L948]               __tmp__symbol_XMDDexChain := symbol_XMDDexChain;
[L949]               __tmp__name_XMDDexChain := name_XMDDexChain;
[L950]               __tmp__decimals_XMDDexChain := decimals_XMDDexChain;
[L951]               __tmp___totalSupply_XMDDexChain := _totalSupply_XMDDexChain;
[L952]               __tmp__balances_XMDDexChain := balances_XMDDexChain;
[L953]               __tmp__allowed_XMDDexChain := allowed_XMDDexChain;
[L954]   CALL        call success_s371 := transfer~address~uint256_XMDDexChain__fail(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2325]  COND TRUE   __tmp__DType[this] == XMDDexChain
[L2326]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_XMDDexChain[this][msgsender_MSG], tokens_s371);
[L1985]  COND FALSE  !(!(b_s45 <= a_s45))
[L1989]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2326]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_XMDDexChain[this][msgsender_MSG], tokens_s371);
[L2327]  COND FALSE  !(revert)
[L2333]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_XMDDexChain[this][msgsender_MSG];
[L2334]              __tmp__balances_XMDDexChain[this][msgsender_MSG] := __var_3;
[L2335]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_XMDDexChain[this][msgsender_MSG];
[L2336]  COND TRUE   __tmp__DType[this] == XMDDexChain
[L2337]  CALL        call __var_4 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_XMDDexChain[this][to_s371], tokens_s371);
[L1967]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1968]  COND TRUE   !(c_s23 >= a_s23)
[L1969]              revert := true;
[L2337]  RET         call __var_4 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_XMDDexChain[this][to_s371], tokens_s371);
[L2338]  COND TRUE   revert
[L954]   RET         call success_s371 := transfer~address~uint256_XMDDexChain__fail(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L955]               assume revert || gas < 0;
[L4164]  RET         call success_s371 := transfer~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L4260]  RET         call CorralChoice_XMDDexChain(this);

[2020-11-25 09:07:53,833 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:07:53,833 INFO  L82        PathProgramCache]: Analyzing trace with hash 46933491, now seen corresponding path program 1 times
[2020-11-25 09:07:53,834 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:07:53,843 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:07:53,967 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 09:07:53,967 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:07:53,967 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [21] imperfect sequences [] total 21
[2020-11-25 09:07:53,968 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:07:53,968 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 22 interpolants.
[2020-11-25 09:07:53,968 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=44, Invalid=418, Unknown=0, NotChecked=0, Total=462
[2020-11-25 09:07:53,968 INFO  L87              Difference]: Start difference. First operand 2670 states and 2873 transitions. cyclomatic complexity: 207 Second operand 22 states.
[2020-11-25 09:07:57,752 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:07:57,752 INFO  L93              Difference]: Finished difference Result 2828 states and 3072 transitions.
[2020-11-25 09:07:57,752 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 26 states. 
[2020-11-25 09:07:57,752 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2828 states and 3072 transitions.
[2020-11-25 09:07:57,757 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 09:07:57,764 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2828 states to 2828 states and 3072 transitions.
[2020-11-25 09:07:57,764 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 992
[2020-11-25 09:07:57,765 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 992
[2020-11-25 09:07:57,765 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2828 states and 3072 transitions.
[2020-11-25 09:07:57,767 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:07:57,767 INFO  L728         BuchiCegarLoop]: Abstraction has 2828 states and 3072 transitions.
[2020-11-25 09:07:57,769 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2828 states and 3072 transitions.
[2020-11-25 09:07:57,784 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2828 to 2676.
[2020-11-25 09:07:57,784 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2676 states.
[2020-11-25 09:07:57,786 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2676 states to 2676 states and 2880 transitions.
[2020-11-25 09:07:57,786 INFO  L751         BuchiCegarLoop]: Abstraction has 2676 states and 2880 transitions.
[2020-11-25 09:07:57,786 INFO  L631         BuchiCegarLoop]: Abstraction has 2676 states and 2880 transitions.
[2020-11-25 09:07:57,786 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 09:07:57,786 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2676 states and 2880 transitions.
[2020-11-25 09:07:57,789 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:07:57,789 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:07:57,789 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:07:57,790 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:07:57,790 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_XMDDexChain0 := false;
[L2]                 call_transfer_XMDDexChain0 := false;
[L2]     CALL        call main();
[L4250]              assume null == 0;
[L4251]  CALL        call this := FreshRefGenerator__success();
[L1927]              havoc newRef;
[L1928]              assume Alloc[newRef] == false;
[L1929]              Alloc[newRef] := true;
[L1930]              assume newRef != null;
[L4251]  RET         call this := FreshRefGenerator__success();
[L4252]              assume now >= 0;
[L4253]              assume DType[this] == XMDDexChain;
[L4254]              assume msgvalue_MSG == 0;
[L4255]              gas := gas - 53000;
[L4256]  CALL        call XMDDexChain_XMDDexChain(this, msgsender_MSG, msgvalue_MSG);
[L768]               havoc __exception;
[L769]               revert := false;
[L770]   COND FALSE  !(__exception)
[L793]   CALL        call XMDDexChain_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG);
[L2275]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2063]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2048]              assume msgsender_MSG != null;
[L2049]              Balance[this] := 0;
[L2063]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  COND FALSE  !(revert)
[L2275]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  COND FALSE  !(revert)
[L2279]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2133]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]              assume msgsender_MSG != null;
[L2116]              Balance[this] := 0;
[L2117]              owner_Owned[this] := null;
[L2118]              newOwner_Owned[this] := null;
[L2120]              owner_Owned[this] := msgsender_MSG;
[L2133]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  COND FALSE  !(revert)
[L2279]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2280]  COND FALSE  !(revert)
[L2283]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1959]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1944]              assume msgsender_MSG != null;
[L1945]              Balance[this] := 0;
[L1959]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  COND FALSE  !(revert)
[L2283]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2284]  COND FALSE  !(revert)
[L2287]  CALL        call XMDDexChain_XMDDexChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2232]              assume msgsender_MSG != null;
[L2233]              Balance[this] := 0;
[L2234]              symbol_XMDDexChain[this] := -1282837888;
[L2235]              name_XMDDexChain[this] := -1282837888;
[L2236]              decimals_XMDDexChain[this] := 0;
[L2237]              _totalSupply_XMDDexChain[this] := 0;
[L2238]              balances_XMDDexChain[this] := zeroRefintArr();
[L2239]              sum_balances0[this] := 0;
[L2240]              allowed_XMDDexChain[this] := zeroRefRefintArr();
[L2241]              sum_allowed1[this] := 0;
[L2243]              symbol_XMDDexChain[this] := 542303379;
[L2244]              name_XMDDexChain[this] := -1719409972;
[L2245]              decimals_XMDDexChain[this] := 8;
[L2246]              _totalSupply_XMDDexChain[this] := 2100000000000000000;
[L2247]              sum_balances0[this] := sum_balances0[this] - balances_XMDDexChain[this][-329037191581184949150908255081869838117273532011];
[L2248]              balances_XMDDexChain[this][-329037191581184949150908255081869838117273532011] := _totalSupply_XMDDexChain[this];
[L2249]              sum_balances0[this] := sum_balances0[this] + balances_XMDDexChain[this][-329037191581184949150908255081869838117273532011];
[L2250]              assert { :EventEmitted "Transfer_XMDDexChain" } true;
[L2287]  RET         call XMDDexChain_XMDDexChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2288]  COND FALSE  !(revert)
[L793]   RET         call XMDDexChain_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG);
[L794]               assume !revert && gas >= 0;
[L4256]  RET         call XMDDexChain_XMDDexChain(this, msgsender_MSG, msgvalue_MSG);
[L4257]              assume !revert && gas >= 0;
[L4260]  CALL        call CorralChoice_XMDDexChain(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != XMDDexChain;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND FALSE  !(choice == 20)
[L4117]  COND FALSE  !(choice == 19)
[L4125]  COND FALSE  !(choice == 18)
[L4133]  COND FALSE  !(choice == 17)
[L4141]  COND FALSE  !(choice == 16)
[L4147]  COND FALSE  !(choice == 15)
[L4153]  COND FALSE  !(choice == 14)
[L4159]  COND TRUE   choice == 13
[L4160]              gas := gas - 21000;
[L4161]  COND TRUE   gas >= 0
[L4162]              assume tokens_s371 >= 0 && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4163]              assume msgvalue_MSG == 0;
[L4164]  CALL        call success_s371 := transfer~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s371 && tokens_s371 <= balances_XMDDexChain[this][msgsender_MSG]) && tokens_s371 >= 0) && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][to_s371] >= 0) && balances_XMDDexChain[this][to_s371] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][msgsender_MSG] >= 0) && balances_XMDDexChain[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_XMDDexChain0 := true;
[L2]                 call_transfer_XMDDexChain0 := false;
[L2]                 revert := revert_hold;
[L932]               havoc __exception;
[L933]               revert := false;
[L934]   COND TRUE   __exception
[L935]               __tmp__Balance := Balance;
[L936]               __tmp__DType := DType;
[L937]               __tmp__Alloc := Alloc;
[L938]               __tmp__balance_ADDR := balance_ADDR;
[L939]               __tmp__M_Ref_int := M_Ref_int;
[L940]               __tmp__sum_balances0 := sum_balances0;
[L941]               __tmp__alloc_allowed_XMDDexChain_lvl0 := alloc_allowed_XMDDexChain_lvl0;
[L942]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L943]               __tmp__sum_allowed1 := sum_allowed1;
[L944]               __tmp__Length := Length;
[L945]               __tmp__now := now;
[L946]               __tmp__owner_Owned := owner_Owned;
[L947]               __tmp__newOwner_Owned := newOwner_Owned;
[L948]               __tmp__symbol_XMDDexChain := symbol_XMDDexChain;
[L949]               __tmp__name_XMDDexChain := name_XMDDexChain;
[L950]               __tmp__decimals_XMDDexChain := decimals_XMDDexChain;
[L951]               __tmp___totalSupply_XMDDexChain := _totalSupply_XMDDexChain;
[L952]               __tmp__balances_XMDDexChain := balances_XMDDexChain;
[L953]               __tmp__allowed_XMDDexChain := allowed_XMDDexChain;
[L954]   CALL        call success_s371 := transfer~address~uint256_XMDDexChain__fail(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2325]  COND TRUE   __tmp__DType[this] == XMDDexChain
[L2326]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_XMDDexChain[this][msgsender_MSG], tokens_s371);
[L1985]  COND FALSE  !(!(b_s45 <= a_s45))
[L1989]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2326]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_XMDDexChain[this][msgsender_MSG], tokens_s371);
[L2327]  COND FALSE  !(revert)
[L2333]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_XMDDexChain[this][msgsender_MSG];
[L2334]              __tmp__balances_XMDDexChain[this][msgsender_MSG] := __var_3;
[L2335]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_XMDDexChain[this][msgsender_MSG];
[L2336]  COND TRUE   __tmp__DType[this] == XMDDexChain
[L2337]  CALL        call __var_4 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_XMDDexChain[this][to_s371], tokens_s371);
[L1967]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1968]  COND FALSE  !(!(c_s23 >= a_s23))
[L2337]  RET         call __var_4 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_XMDDexChain[this][to_s371], tokens_s371);
[L2338]  COND FALSE  !(revert)
[L2344]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_XMDDexChain[this][to_s371];
[L2345]              __tmp__balances_XMDDexChain[this][to_s371] := __var_4;
[L2346]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_XMDDexChain[this][to_s371];
[L2347]              success_s371 := true;
[L954]   RET         call success_s371 := transfer~address~uint256_XMDDexChain__fail(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L955]               assume revert || gas < 0;
[L4164]  RET         call success_s371 := transfer~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L4260]  RET         call CorralChoice_XMDDexChain(this);

Loop:
[L4260]  CALL        call CorralChoice_XMDDexChain(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != XMDDexChain;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND TRUE   choice == 20
[L4110]              gas := gas - 21000;
[L4111]  COND FALSE  !(gas >= 0)
[L4260]  RET         call CorralChoice_XMDDexChain(this);

[2020-11-25 09:07:57,793 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:07:57,793 INFO  L82        PathProgramCache]: Analyzing trace with hash -1136664557, now seen corresponding path program 1 times
[2020-11-25 09:07:57,793 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:07:57,800 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:07:57,823 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 09:07:57,823 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:07:57,823 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 09:07:57,823 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:07:57,823 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 09:07:57,824 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=10, Invalid=20, Unknown=0, NotChecked=0, Total=30
[2020-11-25 09:07:57,824 INFO  L87              Difference]: Start difference. First operand 2676 states and 2880 transitions. cyclomatic complexity: 208 Second operand 6 states.
[2020-11-25 09:07:58,150 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:07:58,150 INFO  L93              Difference]: Finished difference Result 3468 states and 3829 transitions.
[2020-11-25 09:07:58,150 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 09:07:58,150 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3468 states and 3829 transitions.
[2020-11-25 09:07:58,157 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 09:07:58,163 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3468 states to 2659 states and 3017 transitions.
[2020-11-25 09:07:58,163 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 747
[2020-11-25 09:07:58,164 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 747
[2020-11-25 09:07:58,164 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2659 states and 3017 transitions.
[2020-11-25 09:07:58,166 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:07:58,166 INFO  L728         BuchiCegarLoop]: Abstraction has 2659 states and 3017 transitions.
[2020-11-25 09:07:58,168 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2659 states and 3017 transitions.
[2020-11-25 09:07:58,178 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2659 to 1905.
[2020-11-25 09:07:58,178 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1905 states.
[2020-11-25 09:07:58,180 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1905 states to 1905 states and 2058 transitions.
[2020-11-25 09:07:58,180 INFO  L751         BuchiCegarLoop]: Abstraction has 1905 states and 2058 transitions.
[2020-11-25 09:07:58,180 INFO  L631         BuchiCegarLoop]: Abstraction has 1905 states and 2058 transitions.
[2020-11-25 09:07:58,180 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 09:07:58,180 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1905 states and 2058 transitions.
[2020-11-25 09:07:58,182 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:07:58,182 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:07:58,182 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:07:58,183 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:07:58,183 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_XMDDexChain0 := false;
[L2]                 call_transfer_XMDDexChain0 := false;
[L2]     CALL        call main();
[L4250]              assume null == 0;
[L4251]  CALL        call this := FreshRefGenerator__success();
[L1927]              havoc newRef;
[L1928]              assume Alloc[newRef] == false;
[L1929]              Alloc[newRef] := true;
[L1930]              assume newRef != null;
[L4251]  RET         call this := FreshRefGenerator__success();
[L4252]              assume now >= 0;
[L4253]              assume DType[this] == XMDDexChain;
[L4254]              assume msgvalue_MSG == 0;
[L4255]              gas := gas - 53000;
[L4256]  CALL        call XMDDexChain_XMDDexChain(this, msgsender_MSG, msgvalue_MSG);
[L768]               havoc __exception;
[L769]               revert := false;
[L770]   COND FALSE  !(__exception)
[L793]   CALL        call XMDDexChain_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG);
[L2275]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2063]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2048]              assume msgsender_MSG != null;
[L2049]              Balance[this] := 0;
[L2063]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  COND FALSE  !(revert)
[L2275]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  COND FALSE  !(revert)
[L2279]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2133]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]              assume msgsender_MSG != null;
[L2116]              Balance[this] := 0;
[L2117]              owner_Owned[this] := null;
[L2118]              newOwner_Owned[this] := null;
[L2120]              owner_Owned[this] := msgsender_MSG;
[L2133]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  COND FALSE  !(revert)
[L2279]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2280]  COND FALSE  !(revert)
[L2283]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1959]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1944]              assume msgsender_MSG != null;
[L1945]              Balance[this] := 0;
[L1959]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  COND FALSE  !(revert)
[L2283]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2284]  COND FALSE  !(revert)
[L2287]  CALL        call XMDDexChain_XMDDexChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2232]              assume msgsender_MSG != null;
[L2233]              Balance[this] := 0;
[L2234]              symbol_XMDDexChain[this] := -1282837888;
[L2235]              name_XMDDexChain[this] := -1282837888;
[L2236]              decimals_XMDDexChain[this] := 0;
[L2237]              _totalSupply_XMDDexChain[this] := 0;
[L2238]              balances_XMDDexChain[this] := zeroRefintArr();
[L2239]              sum_balances0[this] := 0;
[L2240]              allowed_XMDDexChain[this] := zeroRefRefintArr();
[L2241]              sum_allowed1[this] := 0;
[L2243]              symbol_XMDDexChain[this] := 542303379;
[L2244]              name_XMDDexChain[this] := -1719409972;
[L2245]              decimals_XMDDexChain[this] := 8;
[L2246]              _totalSupply_XMDDexChain[this] := 2100000000000000000;
[L2247]              sum_balances0[this] := sum_balances0[this] - balances_XMDDexChain[this][-329037191581184949150908255081869838117273532011];
[L2248]              balances_XMDDexChain[this][-329037191581184949150908255081869838117273532011] := _totalSupply_XMDDexChain[this];
[L2249]              sum_balances0[this] := sum_balances0[this] + balances_XMDDexChain[this][-329037191581184949150908255081869838117273532011];
[L2250]              assert { :EventEmitted "Transfer_XMDDexChain" } true;
[L2287]  RET         call XMDDexChain_XMDDexChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2288]  COND FALSE  !(revert)
[L793]   RET         call XMDDexChain_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG);
[L794]               assume !revert && gas >= 0;
[L4256]  RET         call XMDDexChain_XMDDexChain(this, msgsender_MSG, msgvalue_MSG);
[L4257]              assume !revert && gas >= 0;
[L4260]  CALL        call CorralChoice_XMDDexChain(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != XMDDexChain;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND FALSE  !(choice == 20)
[L4117]  COND FALSE  !(choice == 19)
[L4125]  COND FALSE  !(choice == 18)
[L4133]  COND FALSE  !(choice == 17)
[L4141]  COND FALSE  !(choice == 16)
[L4147]  COND FALSE  !(choice == 15)
[L4153]  COND FALSE  !(choice == 14)
[L4159]  COND TRUE   choice == 13
[L4160]              gas := gas - 21000;
[L4161]  COND TRUE   gas >= 0
[L4162]              assume tokens_s371 >= 0 && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4163]              assume msgvalue_MSG == 0;
[L4164]  CALL        call success_s371 := transfer~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == to_s371 && tokens_s371 <= balances_XMDDexChain[this][msgsender_MSG]) && tokens_s371 >= 0) && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][to_s371] >= 0) && balances_XMDDexChain[this][to_s371] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][msgsender_MSG] >= 0) && balances_XMDDexChain[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L932]               havoc __exception;
[L933]               revert := false;
[L934]   COND FALSE  !(__exception)
[L957]   CALL        call success_s371 := transfer~address~uint256_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2355]  COND TRUE   DType[this] == XMDDexChain
[L2356]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][msgsender_MSG], tokens_s371);
[L1994]  COND FALSE  !(!(b_s45 <= a_s45))
[L1998]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2356]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][msgsender_MSG], tokens_s371);
[L2357]  COND FALSE  !(revert)
[L2363]              sum_balances0[this] := sum_balances0[this] - balances_XMDDexChain[this][msgsender_MSG];
[L2364]              balances_XMDDexChain[this][msgsender_MSG] := __var_3;
[L2365]              sum_balances0[this] := sum_balances0[this] + balances_XMDDexChain[this][msgsender_MSG];
[L2366]  COND TRUE   DType[this] == XMDDexChain
[L2367]  CALL        call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][to_s371], tokens_s371);
[L1976]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1977]  COND FALSE  !(!(c_s23 >= a_s23))
[L2367]  RET         call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][to_s371], tokens_s371);
[L2368]  COND FALSE  !(revert)
[L2374]              sum_balances0[this] := sum_balances0[this] - balances_XMDDexChain[this][to_s371];
[L2375]              balances_XMDDexChain[this][to_s371] := __var_4;
[L2376]              sum_balances0[this] := sum_balances0[this] + balances_XMDDexChain[this][to_s371];
[L2377]              assert { :EventEmitted "Transfer_XMDDexChain" } true;
[L2378]              success_s371 := true;
[L957]   RET         call success_s371 := transfer~address~uint256_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L958]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((success_s371 == true && _totalSupply_XMDDexChain[this] == old(_totalSupply_XMDDexChain[this])) && balances_XMDDexChain[this] == old(balances_XMDDexChain[this])) && allowed_XMDDexChain[this] == old(allowed_XMDDexChain[this])) && symbol_XMDDexChain[this] == old(symbol_XMDDexChain[this])) && name_XMDDexChain[this] == old(name_XMDDexChain[this])) && decimals_XMDDexChain[this] == old(decimals_XMDDexChain[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L4164]  RET         call success_s371 := transfer~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L4260]  RET         call CorralChoice_XMDDexChain(this);
[L4260]  CALL        call CorralChoice_XMDDexChain(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != XMDDexChain;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND FALSE  !(choice == 20)
[L4117]  COND FALSE  !(choice == 19)
[L4125]  COND FALSE  !(choice == 18)
[L4133]  COND FALSE  !(choice == 17)
[L4141]  COND FALSE  !(choice == 16)
[L4147]  COND FALSE  !(choice == 15)
[L4153]  COND FALSE  !(choice == 14)
[L4159]  COND TRUE   choice == 13
[L4160]              gas := gas - 21000;
[L4161]  COND TRUE   gas >= 0
[L4162]              assume tokens_s371 >= 0 && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4163]              assume msgvalue_MSG == 0;
[L4164]  CALL        call success_s371 := transfer~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s371 && tokens_s371 <= balances_XMDDexChain[this][msgsender_MSG]) && tokens_s371 >= 0) && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][to_s371] >= 0) && balances_XMDDexChain[this][to_s371] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][msgsender_MSG] >= 0) && balances_XMDDexChain[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_XMDDexChain0 := true;
[L2]                 call_transfer_XMDDexChain0 := false;
[L2]                 revert := revert_hold;
[L932]               havoc __exception;
[L933]               revert := false;
[L934]   COND FALSE  !(__exception)
[L957]   CALL        call success_s371 := transfer~address~uint256_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2355]  COND TRUE   DType[this] == XMDDexChain
[L2356]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][msgsender_MSG], tokens_s371);
[L1994]  COND FALSE  !(!(b_s45 <= a_s45))
[L1998]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2356]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][msgsender_MSG], tokens_s371);
[L2357]  COND FALSE  !(revert)
[L2363]              sum_balances0[this] := sum_balances0[this] - balances_XMDDexChain[this][msgsender_MSG];
[L2364]              balances_XMDDexChain[this][msgsender_MSG] := __var_3;
[L2365]              sum_balances0[this] := sum_balances0[this] + balances_XMDDexChain[this][msgsender_MSG];
[L2366]  COND TRUE   DType[this] == XMDDexChain
[L2367]  CALL        call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][to_s371], tokens_s371);
[L1976]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1977]  COND FALSE  !(!(c_s23 >= a_s23))
[L2367]  RET         call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][to_s371], tokens_s371);
[L2368]  COND FALSE  !(revert)
[L2374]              sum_balances0[this] := sum_balances0[this] - balances_XMDDexChain[this][to_s371];
[L2375]              balances_XMDDexChain[this][to_s371] := __var_4;
[L2376]              sum_balances0[this] := sum_balances0[this] + balances_XMDDexChain[this][to_s371];
[L2377]              assert { :EventEmitted "Transfer_XMDDexChain" } true;
[L2378]              success_s371 := true;
[L957]   RET         call success_s371 := transfer~address~uint256_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L958]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((success_s371 == true && _totalSupply_XMDDexChain[this] == old(_totalSupply_XMDDexChain[this])) && balances_XMDDexChain[this] == old(balances_XMDDexChain[this])) && allowed_XMDDexChain[this] == old(allowed_XMDDexChain[this])) && symbol_XMDDexChain[this] == old(symbol_XMDDexChain[this])) && name_XMDDexChain[this] == old(name_XMDDexChain[this])) && decimals_XMDDexChain[this] == old(decimals_XMDDexChain[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L4164]  RET         call success_s371 := transfer~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L4260]  RET         call CorralChoice_XMDDexChain(this);

Loop:
[L4260]  CALL        call CorralChoice_XMDDexChain(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != XMDDexChain;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND TRUE   choice == 20
[L4110]              gas := gas - 21000;
[L4111]  COND FALSE  !(gas >= 0)
[L4260]  RET         call CorralChoice_XMDDexChain(this);

[2020-11-25 09:07:58,186 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:07:58,186 INFO  L82        PathProgramCache]: Analyzing trace with hash 1915860254, now seen corresponding path program 1 times
[2020-11-25 09:07:58,187 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:07:58,222 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:07:58,348 INFO  L134       CoverageAnalysis]: Checked inductivity of 77 backedges. 76 proven. 0 refuted. 0 times theorem prover too weak. 1 trivial. 0 not checked.
[2020-11-25 09:07:58,348 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:07:58,348 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [14] imperfect sequences [] total 14
[2020-11-25 09:07:58,348 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:07:58,349 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 09:07:58,349 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=31, Invalid=151, Unknown=0, NotChecked=0, Total=182
[2020-11-25 09:07:58,349 INFO  L87              Difference]: Start difference. First operand 1905 states and 2058 transitions. cyclomatic complexity: 156 Second operand 14 states.
[2020-11-25 09:07:59,874 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:07:59,874 INFO  L93              Difference]: Finished difference Result 1925 states and 2077 transitions.
[2020-11-25 09:07:59,875 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-11-25 09:07:59,875 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1925 states and 2077 transitions.
[2020-11-25 09:07:59,880 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:07:59,884 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1925 states to 1919 states and 2070 transitions.
[2020-11-25 09:07:59,884 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 581
[2020-11-25 09:07:59,885 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 581
[2020-11-25 09:07:59,885 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1919 states and 2070 transitions.
[2020-11-25 09:07:59,886 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:07:59,886 INFO  L728         BuchiCegarLoop]: Abstraction has 1919 states and 2070 transitions.
[2020-11-25 09:07:59,888 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1919 states and 2070 transitions.
[2020-11-25 09:07:59,921 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1919 to 1897.
[2020-11-25 09:07:59,922 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1897 states.
[2020-11-25 09:07:59,923 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1897 states to 1897 states and 2047 transitions.
[2020-11-25 09:07:59,923 INFO  L751         BuchiCegarLoop]: Abstraction has 1897 states and 2047 transitions.
[2020-11-25 09:07:59,923 INFO  L631         BuchiCegarLoop]: Abstraction has 1897 states and 2047 transitions.
[2020-11-25 09:07:59,923 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 09:07:59,924 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1897 states and 2047 transitions.
[2020-11-25 09:07:59,925 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:07:59,926 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:07:59,926 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:07:59,927 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:07:59,927 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_XMDDexChain0 := false;
[L2]                 call_transfer_XMDDexChain0 := false;
[L2]     CALL        call main();
[L4250]              assume null == 0;
[L4251]  CALL        call this := FreshRefGenerator__success();
[L1927]              havoc newRef;
[L1928]              assume Alloc[newRef] == false;
[L1929]              Alloc[newRef] := true;
[L1930]              assume newRef != null;
[L4251]  RET         call this := FreshRefGenerator__success();
[L4252]              assume now >= 0;
[L4253]              assume DType[this] == XMDDexChain;
[L4254]              assume msgvalue_MSG == 0;
[L4255]              gas := gas - 53000;
[L4256]  CALL        call XMDDexChain_XMDDexChain(this, msgsender_MSG, msgvalue_MSG);
[L768]               havoc __exception;
[L769]               revert := false;
[L770]   COND FALSE  !(__exception)
[L793]   CALL        call XMDDexChain_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG);
[L2275]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2063]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2048]              assume msgsender_MSG != null;
[L2049]              Balance[this] := 0;
[L2063]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  COND FALSE  !(revert)
[L2275]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  COND FALSE  !(revert)
[L2279]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2133]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]              assume msgsender_MSG != null;
[L2116]              Balance[this] := 0;
[L2117]              owner_Owned[this] := null;
[L2118]              newOwner_Owned[this] := null;
[L2120]              owner_Owned[this] := msgsender_MSG;
[L2133]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  COND FALSE  !(revert)
[L2279]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2280]  COND FALSE  !(revert)
[L2283]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1959]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1944]              assume msgsender_MSG != null;
[L1945]              Balance[this] := 0;
[L1959]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  COND FALSE  !(revert)
[L2283]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2284]  COND FALSE  !(revert)
[L2287]  CALL        call XMDDexChain_XMDDexChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2232]              assume msgsender_MSG != null;
[L2233]              Balance[this] := 0;
[L2234]              symbol_XMDDexChain[this] := -1282837888;
[L2235]              name_XMDDexChain[this] := -1282837888;
[L2236]              decimals_XMDDexChain[this] := 0;
[L2237]              _totalSupply_XMDDexChain[this] := 0;
[L2238]              balances_XMDDexChain[this] := zeroRefintArr();
[L2239]              sum_balances0[this] := 0;
[L2240]              allowed_XMDDexChain[this] := zeroRefRefintArr();
[L2241]              sum_allowed1[this] := 0;
[L2243]              symbol_XMDDexChain[this] := 542303379;
[L2244]              name_XMDDexChain[this] := -1719409972;
[L2245]              decimals_XMDDexChain[this] := 8;
[L2246]              _totalSupply_XMDDexChain[this] := 2100000000000000000;
[L2247]              sum_balances0[this] := sum_balances0[this] - balances_XMDDexChain[this][-329037191581184949150908255081869838117273532011];
[L2248]              balances_XMDDexChain[this][-329037191581184949150908255081869838117273532011] := _totalSupply_XMDDexChain[this];
[L2249]              sum_balances0[this] := sum_balances0[this] + balances_XMDDexChain[this][-329037191581184949150908255081869838117273532011];
[L2250]              assert { :EventEmitted "Transfer_XMDDexChain" } true;
[L2287]  RET         call XMDDexChain_XMDDexChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2288]  COND FALSE  !(revert)
[L793]   RET         call XMDDexChain_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG);
[L794]               assume !revert && gas >= 0;
[L4256]  RET         call XMDDexChain_XMDDexChain(this, msgsender_MSG, msgvalue_MSG);
[L4257]              assume !revert && gas >= 0;
[L4260]  CALL        call CorralChoice_XMDDexChain(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != XMDDexChain;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND FALSE  !(choice == 20)
[L4117]  COND FALSE  !(choice == 19)
[L4125]  COND FALSE  !(choice == 18)
[L4133]  COND FALSE  !(choice == 17)
[L4141]  COND FALSE  !(choice == 16)
[L4147]  COND FALSE  !(choice == 15)
[L4153]  COND FALSE  !(choice == 14)
[L4159]  COND TRUE   choice == 13
[L4160]              gas := gas - 21000;
[L4161]  COND TRUE   gas >= 0
[L4162]              assume tokens_s371 >= 0 && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4163]              assume msgvalue_MSG == 0;
[L4164]  CALL        call success_s371 := transfer~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == to_s371 && tokens_s371 <= balances_XMDDexChain[this][msgsender_MSG]) && tokens_s371 >= 0) && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][to_s371] >= 0) && balances_XMDDexChain[this][to_s371] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][msgsender_MSG] >= 0) && balances_XMDDexChain[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L932]               havoc __exception;
[L933]               revert := false;
[L934]   COND FALSE  !(__exception)
[L957]   CALL        call success_s371 := transfer~address~uint256_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2355]  COND TRUE   DType[this] == XMDDexChain
[L2356]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][msgsender_MSG], tokens_s371);
[L1994]  COND FALSE  !(!(b_s45 <= a_s45))
[L1998]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2356]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][msgsender_MSG], tokens_s371);
[L2357]  COND FALSE  !(revert)
[L2363]              sum_balances0[this] := sum_balances0[this] - balances_XMDDexChain[this][msgsender_MSG];
[L2364]              balances_XMDDexChain[this][msgsender_MSG] := __var_3;
[L2365]              sum_balances0[this] := sum_balances0[this] + balances_XMDDexChain[this][msgsender_MSG];
[L2366]  COND TRUE   DType[this] == XMDDexChain
[L2367]  CALL        call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][to_s371], tokens_s371);
[L1976]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1977]  COND FALSE  !(!(c_s23 >= a_s23))
[L2367]  RET         call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][to_s371], tokens_s371);
[L2368]  COND FALSE  !(revert)
[L2374]              sum_balances0[this] := sum_balances0[this] - balances_XMDDexChain[this][to_s371];
[L2375]              balances_XMDDexChain[this][to_s371] := __var_4;
[L2376]              sum_balances0[this] := sum_balances0[this] + balances_XMDDexChain[this][to_s371];
[L2377]              assert { :EventEmitted "Transfer_XMDDexChain" } true;
[L2378]              success_s371 := true;
[L957]   RET         call success_s371 := transfer~address~uint256_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L958]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((success_s371 == true && _totalSupply_XMDDexChain[this] == old(_totalSupply_XMDDexChain[this])) && balances_XMDDexChain[this] == old(balances_XMDDexChain[this])) && allowed_XMDDexChain[this] == old(allowed_XMDDexChain[this])) && symbol_XMDDexChain[this] == old(symbol_XMDDexChain[this])) && name_XMDDexChain[this] == old(name_XMDDexChain[this])) && decimals_XMDDexChain[this] == old(decimals_XMDDexChain[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L4164]  RET         call success_s371 := transfer~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L4260]  RET         call CorralChoice_XMDDexChain(this);
[L4260]  CALL        call CorralChoice_XMDDexChain(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != XMDDexChain;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND FALSE  !(choice == 20)
[L4117]  COND FALSE  !(choice == 19)
[L4125]  COND FALSE  !(choice == 18)
[L4133]  COND FALSE  !(choice == 17)
[L4141]  COND FALSE  !(choice == 16)
[L4147]  COND FALSE  !(choice == 15)
[L4153]  COND FALSE  !(choice == 14)
[L4159]  COND TRUE   choice == 13
[L4160]              gas := gas - 21000;
[L4161]  COND TRUE   gas >= 0
[L4162]              assume tokens_s371 >= 0 && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4163]              assume msgvalue_MSG == 0;
[L4164]  CALL        call success_s371 := transfer~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s371 && tokens_s371 <= balances_XMDDexChain[this][msgsender_MSG]) && tokens_s371 >= 0) && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][to_s371] >= 0) && balances_XMDDexChain[this][to_s371] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][msgsender_MSG] >= 0) && balances_XMDDexChain[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_XMDDexChain0 := true;
[L2]                 call_transfer_XMDDexChain0 := false;
[L2]                 revert := revert_hold;
[L932]               havoc __exception;
[L933]               revert := false;
[L934]   COND TRUE   __exception
[L935]               __tmp__Balance := Balance;
[L936]               __tmp__DType := DType;
[L937]               __tmp__Alloc := Alloc;
[L938]               __tmp__balance_ADDR := balance_ADDR;
[L939]               __tmp__M_Ref_int := M_Ref_int;
[L940]               __tmp__sum_balances0 := sum_balances0;
[L941]               __tmp__alloc_allowed_XMDDexChain_lvl0 := alloc_allowed_XMDDexChain_lvl0;
[L942]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L943]               __tmp__sum_allowed1 := sum_allowed1;
[L944]               __tmp__Length := Length;
[L945]               __tmp__now := now;
[L946]               __tmp__owner_Owned := owner_Owned;
[L947]               __tmp__newOwner_Owned := newOwner_Owned;
[L948]               __tmp__symbol_XMDDexChain := symbol_XMDDexChain;
[L949]               __tmp__name_XMDDexChain := name_XMDDexChain;
[L950]               __tmp__decimals_XMDDexChain := decimals_XMDDexChain;
[L951]               __tmp___totalSupply_XMDDexChain := _totalSupply_XMDDexChain;
[L952]               __tmp__balances_XMDDexChain := balances_XMDDexChain;
[L953]               __tmp__allowed_XMDDexChain := allowed_XMDDexChain;
[L954]   CALL        call success_s371 := transfer~address~uint256_XMDDexChain__fail(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2325]  COND TRUE   __tmp__DType[this] == XMDDexChain
[L2326]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_XMDDexChain[this][msgsender_MSG], tokens_s371);
[L1985]  COND FALSE  !(!(b_s45 <= a_s45))
[L1989]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2326]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_XMDDexChain[this][msgsender_MSG], tokens_s371);
[L2327]  COND FALSE  !(revert)
[L2333]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_XMDDexChain[this][msgsender_MSG];
[L2334]              __tmp__balances_XMDDexChain[this][msgsender_MSG] := __var_3;
[L2335]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_XMDDexChain[this][msgsender_MSG];
[L2336]  COND TRUE   __tmp__DType[this] == XMDDexChain
[L2337]  CALL        call __var_4 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_XMDDexChain[this][to_s371], tokens_s371);
[L1967]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1968]  COND TRUE   !(c_s23 >= a_s23)
[L1969]              revert := true;
[L2337]  RET         call __var_4 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_XMDDexChain[this][to_s371], tokens_s371);
[L2338]  COND TRUE   revert
[L954]   RET         call success_s371 := transfer~address~uint256_XMDDexChain__fail(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L955]               assume revert || gas < 0;
[L4164]  RET         call success_s371 := transfer~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L4260]  RET         call CorralChoice_XMDDexChain(this);

Loop:
[L4260]  CALL        call CorralChoice_XMDDexChain(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != XMDDexChain;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND TRUE   choice == 20
[L4110]              gas := gas - 21000;
[L4111]  COND FALSE  !(gas >= 0)
[L4260]  RET         call CorralChoice_XMDDexChain(this);

[2020-11-25 09:07:59,953 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:07:59,953 INFO  L82        PathProgramCache]: Analyzing trace with hash -341834110, now seen corresponding path program 1 times
[2020-11-25 09:07:59,954 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:07:59,967 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:08:00,046 INFO  L134       CoverageAnalysis]: Checked inductivity of 77 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 77 trivial. 0 not checked.
[2020-11-25 09:08:00,046 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:08:00,046 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [12] imperfect sequences [] total 12
[2020-11-25 09:08:00,047 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:08:00,047 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-25 09:08:00,047 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=23, Invalid=109, Unknown=0, NotChecked=0, Total=132
[2020-11-25 09:08:00,047 INFO  L87              Difference]: Start difference. First operand 1897 states and 2047 transitions. cyclomatic complexity: 153 Second operand 12 states.
[2020-11-25 09:08:00,362 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:08:00,362 INFO  L93              Difference]: Finished difference Result 1095 states and 1177 transitions.
[2020-11-25 09:08:00,363 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-11-25 09:08:00,363 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1095 states and 1177 transitions.
[2020-11-25 09:08:00,365 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 09:08:00,365 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1095 states to 0 states and 0 transitions.
[2020-11-25 09:08:00,365 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 09:08:00,365 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 09:08:00,365 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 09:08:00,365 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:08:00,365 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 09:08:00,365 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 09:08:00,365 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 09:08:00,365 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 09:08:00,365 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 09:08:00,365 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 09:08:00,365 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 09:08:00,368 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 09:08:00 BasicIcfg
[2020-11-25 09:08:00,368 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 09:08:00,368 INFO  L168              Benchmark]: Toolchain (without parser) took 21271.20 ms. Allocated memory was 1.0 GB in the beginning and 2.4 GB in the end (delta: 1.3 GB). Free memory was 940.6 MB in the beginning and 1.8 GB in the end (delta: -855.3 MB). Peak memory consumption was 465.9 MB. Max. memory is 15.3 GB.
[2020-11-25 09:08:00,369 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 09:08:00,369 INFO  L168              Benchmark]: Boogie Preprocessor took 102.54 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 929.8 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 09:08:00,370 INFO  L168              Benchmark]: UtopiaSpecLang took 64.49 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.5 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 09:08:00,370 INFO  L168              Benchmark]: Boogie Printer took 18.43 ms. Allocated memory is still 1.0 GB. Free memory is still 924.5 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 09:08:00,370 INFO  L168              Benchmark]: RCFGBuilder took 745.33 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 811.5 MB in the end (delta: 112.9 MB). Peak memory consumption was 112.9 MB. Max. memory is 15.3 GB.
[2020-11-25 09:08:00,370 INFO  L168              Benchmark]: UtopiaLTL2Aut took 45.37 ms. Allocated memory is still 1.0 GB. Free memory was 811.5 MB in the beginning and 807.9 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-25 09:08:00,370 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1338.80 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 199.2 MB). Free memory was 807.9 MB in the beginning and 1.0 GB in the end (delta: -203.9 MB). Peak memory consumption was 185.0 MB. Max. memory is 15.3 GB.
[2020-11-25 09:08:00,371 INFO  L168              Benchmark]: BlockEncodingV2 took 125.14 ms. Allocated memory is still 1.2 GB. Free memory was 1.0 GB in the beginning and 950.0 MB in the end (delta: 61.8 MB). Peak memory consumption was 61.8 MB. Max. memory is 15.3 GB.
[2020-11-25 09:08:00,371 INFO  L168              Benchmark]: BuchiAutomizer took 18827.91 ms. Allocated memory was 1.2 GB in the beginning and 2.4 GB in the end (delta: 1.1 GB). Free memory was 947.0 MB in the beginning and 1.8 GB in the end (delta: -848.9 MB). Peak memory consumption was 273.1 MB. Max. memory is 15.3 GB.
[2020-11-25 09:08:00,374 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    3718 locations, 6399 edges
  - StatisticsResult: Encoded RCFG
    3658 locations, 6239 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 102.54 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 929.8 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 64.49 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.5 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 18.43 ms. Allocated memory is still 1.0 GB. Free memory is still 924.5 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 745.33 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 811.5 MB in the end (delta: 112.9 MB). Peak memory consumption was 112.9 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 45.37 ms. Allocated memory is still 1.0 GB. Free memory was 811.5 MB in the beginning and 807.9 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1338.80 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 199.2 MB). Free memory was 807.9 MB in the beginning and 1.0 GB in the end (delta: -203.9 MB). Peak memory consumption was 185.0 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 125.14 ms. Allocated memory is still 1.2 GB. Free memory was 1.0 GB in the beginning and 950.0 MB in the end (delta: 61.8 MB). Peak memory consumption was 61.8 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 18827.91 ms. Allocated memory was 1.2 GB in the beginning and 2.4 GB in the end (delta: 1.1 GB). Free memory was 947.0 MB in the beginning and 1.8 GB in the end (delta: -848.9 MB). Peak memory consumption was 273.1 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1563 locations, 1975 edges
  - StatisticsResult: BuchiProgram size
    3718 locations, 6399 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 8 terminating modules (8 trivial, 0 deterministic, 0 nondeterministic). 8 modules have a trivial ranking function, the largest among these consists of 28 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 18.7s and 9 iterations.  TraceHistogramMax:2. Analysis of lassos took 2.2s. Construction of modules took 12.9s. BÃ¼chi inclusion checks took 3.0s. Highest rank in rank-based complementation 0. Minimization of det autom 8. Minimization of nondet autom 0. Automata minimization 0.2s AutomataMinimizationTime, 7 MinimizatonAttempts, 2159 StatesRemovedByMinimization, 6 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 2676 states and ocurred in iteration 5.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 19574 SDtfs, 23616 SDslu, 56320 SDs, 0 SdLazy, 93770 SolverSat, 4052 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 12.9s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU8 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transfer_XMDDexChain0) ==> ( <>(success_transfer_XMDDexChain0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
