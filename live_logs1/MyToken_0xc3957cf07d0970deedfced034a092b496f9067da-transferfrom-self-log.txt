This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 01:55:37,717 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 01:55:37,718 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 01:55:37,730 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 01:55:37,730 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 01:55:37,732 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 01:55:37,733 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 01:55:37,734 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 01:55:37,736 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 01:55:37,737 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 01:55:37,738 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 01:55:37,738 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 01:55:37,739 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 01:55:37,740 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 01:55:37,741 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 01:55:37,741 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 01:55:37,742 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 01:55:37,743 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 01:55:37,744 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 01:55:37,745 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 01:55:37,746 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 01:55:37,747 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 01:55:37,749 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 01:55:37,749 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 01:55:37,749 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 01:55:37,750 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 01:55:37,750 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 01:55:37,751 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 01:55:37,751 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 01:55:37,751 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 01:55:37,751 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 01:55:37,752 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 01:55:37,753 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 01:55:37,753 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 01:55:37,754 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 01:55:37,754 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 01:55:37,755 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 01:55:37,755 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 01:55:37,755 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 01:55:37,756 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 01:55:37,756 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 01:55:37,756 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 01:55:37,765 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 01:55:37,765 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 01:55:37,767 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 01:55:37,768 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 01:55:37,768 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 01:55:37,768 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 01:55:37,769 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 01:55:37,769 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 01:55:37,769 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 01:55:37,770 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 01:55:37,770 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 01:55:37,770 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 01:55:37,771 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 01:55:37,771 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 01:55:37,771 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 01:55:37,772 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 01:55:37,772 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 01:55:37,772 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 01:55:37,772 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 01:55:37,773 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 01:55:37,773 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 01:55:37,773 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 01:55:37,774 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 01:55:37,774 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 01:55:37,774 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 01:55:37,774 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 01:55:37,797 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 01:55:37,810 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 01:55:37,814 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 01:55:37,816 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 01:55:37,816 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 01:55:37,817 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transferfrom-self.bpl
[2020-11-25 01:55:37,817 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transferfrom-self.bpl'
[2020-11-25 01:55:37,904 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 01:55:37,905 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 01:55:37,906 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 01:55:37,906 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 01:55:37,906 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 01:55:37,917 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:55:37" (1/1) ...
[2020-11-25 01:55:37,918 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:55:37" (1/1) ...
[2020-11-25 01:55:37,946 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:55:37" (1/1) ...
[2020-11-25 01:55:37,946 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:55:37" (1/1) ...
[2020-11-25 01:55:37,962 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:55:37" (1/1) ...
[2020-11-25 01:55:37,971 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:55:37" (1/1) ...
[2020-11-25 01:55:37,978 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:55:37" (1/1) ...
[2020-11-25 01:55:37,985 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 01:55:37,986 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 01:55:37,986 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 01:55:37,987 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 01:55:37,989 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:55:37" (1/1) ...
[2020-11-25 01:55:38,006 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(MyToken.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= balances_MyToken[this][from] && value <= allowed_MyToken[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_MyToken[this][to] >= 0 && balances_MyToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_MyToken[this][from] >= 0 &&  balances_MyToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_MyToken[this][from][msg.sender] >= 0 && allowed_MyToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(MyToken.transferFrom(from, to, value), return == true && allowed_MyToken[this][from][msg.sender] == old(allowed_MyToken[this][from][msg.sender]) - value && _totalSupply_MyToken[this] == old(_totalSupply_MyToken[this]) && balances_MyToken[this] == old(balances_MyToken[this]) && allowed_MyToken[this][p1][p2] == old(allowed_MyToken[this][p1][p2]) && symbol_MyToken[this] == old(symbol_MyToken[this]) && name_MyToken[this] == old(name_MyToken[this]) && decimals_MyToken[this] == old(decimals_MyToken[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 01:55:38,010 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(MyToken.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= balances_MyToken[this][from] && value <= allowed_MyToken[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_MyToken[this][to] >= 0 && balances_MyToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_MyToken[this][from] >= 0 &&  balances_MyToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_MyToken[this][from][msg.sender] >= 0 && allowed_MyToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(MyToken.transferFrom(from, to, value), return == true && allowed_MyToken[this][from][msg.sender] == old(allowed_MyToken[this][from][msg.sender]) - value && _totalSupply_MyToken[this] == old(_totalSupply_MyToken[this]) && balances_MyToken[this] == old(balances_MyToken[this]) && allowed_MyToken[this][p1][p2] == old(allowed_MyToken[this][p1][p2]) && symbol_MyToken[this] == old(symbol_MyToken[this]) && name_MyToken[this] == old(name_MyToken[this]) && decimals_MyToken[this] == old(decimals_MyToken[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 01:55:38,017 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(MyToken.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= balances_MyToken[this][from] && value <= allowed_MyToken[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_MyToken[this][to] >= 0 && balances_MyToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_MyToken[this][from] >= 0 &&  balances_MyToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_MyToken[this][from][msg.sender] >= 0 && allowed_MyToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(MyToken.transferFrom(from, to, value), return == true && allowed_MyToken[this][from][msg.sender] == old(allowed_MyToken[this][from][msg.sender]) - value && _totalSupply_MyToken[this] == old(_totalSupply_MyToken[this]) && balances_MyToken[this] == old(balances_MyToken[this]) && allowed_MyToken[this][p1][p2] == old(allowed_MyToken[this][p1][p2]) && symbol_MyToken[this] == old(symbol_MyToken[this]) && name_MyToken[this] == old(name_MyToken[this]) && decimals_MyToken[this] == old(decimals_MyToken[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 01:55:38,025 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( p1!=from_s474 || p2!=msg.sender ) && from_s474==to_s474 ) && tokens_s474<=balances_MyToken[this][from_s474] ) && tokens_s474<=allowed_MyToken[this][from_s474][msg.sender] ) && tokens_s474>=0 ) && tokens_s474<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_MyToken[this][to_s474]>=0 ) && balances_MyToken[this][to_s474]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_MyToken[this][from_s474]>=0 ) && balances_MyToken[this][from_s474]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && allowed_MyToken[this][from_s474][msg.sender]>=0 ) && allowed_MyToken[this][from_s474][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[from_s474,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]],BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],BinaryExpression[COMPEQ,IdentifierExpression[from_s474,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>],IdentifierExpression[to_s474,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],BinaryExpression[COMPLEQ,IdentifierExpression[tokens_s474,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],[IdentifierExpression[from_s474,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]]]],BinaryExpression[COMPLEQ,IdentifierExpression[tokens_s474,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],[IdentifierExpression[from_s474,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[tokens_s474,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[tokens_s474,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],[IdentifierExpression[to_s474,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],[IdentifierExpression[to_s474,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],[IdentifierExpression[from_s474,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],[IdentifierExpression[from_s474,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],[IdentifierExpression[from_s474,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],[IdentifierExpression[from_s474,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 01:55:38,028 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( success_s474==true && allowed_MyToken[this][from_s474][msg.sender]==( ( old(allowed_MyToken[this][from_s474][msg.sender]) ) - tokens_s474 ) ) && _totalSupply_MyToken[this]==( old(_totalSupply_MyToken[this]) ) ) && balances_MyToken[this]==( old(balances_MyToken[this]) ) ) && allowed_MyToken[this][p1][p2]==( old(allowed_MyToken[this][p1][p2]) ) ) && symbol_MyToken[this]==( old(symbol_MyToken[this]) ) ) && name_MyToken[this]==( old(name_MyToken[this]) ) ) && decimals_MyToken[this]==( old(decimals_MyToken[this]) ) ) && owner_Owned[this]==( old(owner_Owned[this]) ) ) && newOwner_Owned[this]==( old(newOwner_Owned[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[success_s474,<IMPLEMENTATION_OUTPARAM,transferFrom~address~address~uint256_MyToken>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],[IdentifierExpression[from_s474,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],[IdentifierExpression[from_s474,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]]],IdentifierExpression[tokens_s474,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[balances_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[balances_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[newOwner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[newOwner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]]]]]
[2020-11-25 01:55:38,031 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(MyToken.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= balances_MyToken[this][from] && value <= allowed_MyToken[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_MyToken[this][to] >= 0 && balances_MyToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_MyToken[this][from] >= 0 &&  balances_MyToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_MyToken[this][from][msg.sender] >= 0 && allowed_MyToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(MyToken.transferFrom(from, to, value), return == true && allowed_MyToken[this][from][msg.sender] == old(allowed_MyToken[this][from][msg.sender]) - value && _totalSupply_MyToken[this] == old(_totalSupply_MyToken[this]) && balances_MyToken[this] == old(balances_MyToken[this]) && allowed_MyToken[this][p1][p2] == old(allowed_MyToken[this][p1][p2]) && symbol_MyToken[this] == old(symbol_MyToken[this]) && name_MyToken[this] == old(name_MyToken[this]) && decimals_MyToken[this] == old(decimals_MyToken[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 01:55:38,031 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_MyToken0) ==> ( <>AP(success_transferFrom_MyToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 01:55:38,037 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:55:38 PropertyContainer
[2020-11-25 01:55:38,037 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 01:55:38,038 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 01:55:38,038 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 01:55:38,038 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 01:55:38,038 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:55:37" (1/2) ...
[2020-11-25 01:55:38,039 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 01:55:38,039 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 01:55:38,051 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:55:38" (2/2) ...
[2020-11-25 01:55:38,051 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 01:55:38,051 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 01:55:38,051 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 01:55:38,051 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 01:55:38,052 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:55:37" (1/2) ...
[2020-11-25 01:55:38,086 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 01:55:38,086 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 01:55:38,086 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 01:55:38,086 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 01:55:38,086 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath
[2020-11-25 01:55:38,086 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath
[2020-11-25 01:55:38,086 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath
[2020-11-25 01:55:38,086 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath
[2020-11-25 01:55:38,086 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath
[2020-11-25 01:55:38,087 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath
[2020-11-25 01:55:38,087 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath
[2020-11-25 01:55:38,087 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath
[2020-11-25 01:55:38,087 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 01:55:38,087 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface
[2020-11-25 01:55:38,087 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface
[2020-11-25 01:55:38,087 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Interface
[2020-11-25 01:55:38,087 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Interface
[2020-11-25 01:55:38,087 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20Interface
[2020-11-25 01:55:38,087 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Interface
[2020-11-25 01:55:38,087 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Interface
[2020-11-25 01:55:38,088 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Interface
[2020-11-25 01:55:38,088 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__success
[2020-11-25 01:55:38,088 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack
[2020-11-25 01:55:38,088 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack
[2020-11-25 01:55:38,088 INFO  L130     BoogieDeclarations]: Found specification of procedure receiveApproval~address~uint256~address~bytes_ApproveAndCallFallBack
[2020-11-25 01:55:38,088 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 01:55:38,088 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned
[2020-11-25 01:55:38,088 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned
[2020-11-25 01:55:38,088 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned
[2020-11-25 01:55:38,088 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned
[2020-11-25 01:55:38,088 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned
[2020-11-25 01:55:38,088 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned
[2020-11-25 01:55:38,088 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned
[2020-11-25 01:55:38,088 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned
[2020-11-25 01:55:38,089 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned
[2020-11-25 01:55:38,089 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned
[2020-11-25 01:55:38,089 INFO  L130     BoogieDeclarations]: Found specification of procedure MyToken_MyToken_NoBaseCtor__success
[2020-11-25 01:55:38,089 INFO  L130     BoogieDeclarations]: Found specification of procedure MyToken_MyToken
[2020-11-25 01:55:38,089 INFO  L138     BoogieDeclarations]: Found implementation of procedure MyToken_MyToken
[2020-11-25 01:55:38,089 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_MyToken
[2020-11-25 01:55:38,089 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_MyToken
[2020-11-25 01:55:38,089 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_MyToken
[2020-11-25 01:55:38,089 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_MyToken
[2020-11-25 01:55:38,089 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MyToken
[2020-11-25 01:55:38,089 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MyToken
[2020-11-25 01:55:38,089 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_MyToken
[2020-11-25 01:55:38,089 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_MyToken
[2020-11-25 01:55:38,089 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MyToken
[2020-11-25 01:55:38,089 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MyToken
[2020-11-25 01:55:38,089 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_MyToken
[2020-11-25 01:55:38,090 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_MyToken
[2020-11-25 01:55:38,090 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_MyToken
[2020-11-25 01:55:38,090 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_MyToken
[2020-11-25 01:55:38,090 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_MyToken__success
[2020-11-25 01:55:38,090 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MyToken
[2020-11-25 01:55:38,090 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MyToken
[2020-11-25 01:55:38,090 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MyToken
[2020-11-25 01:55:38,090 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MyToken
[2020-11-25 01:55:38,090 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MyToken
[2020-11-25 01:55:38,090 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MyToken
[2020-11-25 01:55:38,090 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_MyToken
[2020-11-25 01:55:38,090 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_MyToken
[2020-11-25 01:55:38,090 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 01:55:38,090 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 01:55:38,090 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 01:55:38,090 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 01:55:38,091 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 01:55:38,091 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 01:55:38,091 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Interface
[2020-11-25 01:55:38,091 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Interface
[2020-11-25 01:55:38,091 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-25 01:55:38,091 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-25 01:55:38,091 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Owned
[2020-11-25 01:55:38,091 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Owned
[2020-11-25 01:55:38,091 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MyToken
[2020-11-25 01:55:38,091 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 01:55:38,091 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 01:55:38,091 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 01:55:38,091 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 01:55:38,091 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 01:55:38,092 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath__success
[2020-11-25 01:55:38,092 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath__fail
[2020-11-25 01:55:38,092 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath__success
[2020-11-25 01:55:38,092 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath__fail
[2020-11-25 01:55:38,092 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath__success
[2020-11-25 01:55:38,092 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath__fail
[2020-11-25 01:55:38,092 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath__success
[2020-11-25 01:55:38,092 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath__fail
[2020-11-25 01:55:38,092 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 01:55:38,092 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 01:55:38,092 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 01:55:38,092 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__fail
[2020-11-25 01:55:38,092 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__success
[2020-11-25 01:55:38,092 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__fail
[2020-11-25 01:55:38,093 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 01:55:38,093 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__success
[2020-11-25 01:55:38,093 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__fail
[2020-11-25 01:55:38,093 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__success
[2020-11-25 01:55:38,093 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__fail
[2020-11-25 01:55:38,093 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__success
[2020-11-25 01:55:38,093 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__fail
[2020-11-25 01:55:38,093 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__success
[2020-11-25 01:55:38,093 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__fail
[2020-11-25 01:55:38,093 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__success
[2020-11-25 01:55:38,093 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__fail
[2020-11-25 01:55:38,093 INFO  L130     BoogieDeclarations]: Found specification of procedure MyToken_MyToken_NoBaseCtor__fail
[2020-11-25 01:55:38,093 INFO  L130     BoogieDeclarations]: Found specification of procedure MyToken_MyToken__success
[2020-11-25 01:55:38,093 INFO  L130     BoogieDeclarations]: Found specification of procedure MyToken_MyToken__fail
[2020-11-25 01:55:38,093 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_MyToken__success
[2020-11-25 01:55:38,094 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_MyToken__fail
[2020-11-25 01:55:38,094 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_MyToken__success
[2020-11-25 01:55:38,094 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_MyToken__fail
[2020-11-25 01:55:38,094 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MyToken__success
[2020-11-25 01:55:38,094 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MyToken__fail
[2020-11-25 01:55:38,094 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_MyToken__success
[2020-11-25 01:55:38,094 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_MyToken__fail
[2020-11-25 01:55:38,094 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MyToken__success
[2020-11-25 01:55:38,094 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MyToken__fail
[2020-11-25 01:55:38,094 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_MyToken__success
[2020-11-25 01:55:38,094 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_MyToken__fail
[2020-11-25 01:55:38,094 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_MyToken__success
[2020-11-25 01:55:38,094 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_MyToken__fail
[2020-11-25 01:55:38,094 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_MyToken__fail
[2020-11-25 01:55:38,095 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MyToken__success
[2020-11-25 01:55:38,095 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MyToken__fail
[2020-11-25 01:55:38,095 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MyToken__success
[2020-11-25 01:55:38,095 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MyToken__fail
[2020-11-25 01:55:38,095 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MyToken__success
[2020-11-25 01:55:38,095 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MyToken__fail
[2020-11-25 01:55:38,095 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_MyToken__success
[2020-11-25 01:55:38,095 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_MyToken__fail
[2020-11-25 01:55:38,095 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 01:55:38,095 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 01:55:38,095 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 01:55:38,095 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 01:55:38,095 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 01:55:38,095 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 01:55:38,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 01:55:38,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 01:55:38,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 01:55:38,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 01:55:38,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath__fail
[2020-11-25 01:55:38,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath__success
[2020-11-25 01:55:38,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath__fail
[2020-11-25 01:55:38,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath__success
[2020-11-25 01:55:38,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath__fail
[2020-11-25 01:55:38,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath__success
[2020-11-25 01:55:38,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath__fail
[2020-11-25 01:55:38,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath__success
[2020-11-25 01:55:38,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 01:55:38,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 01:55:38,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 01:55:38,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 01:55:38,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__fail
[2020-11-25 01:55:38,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__success
[2020-11-25 01:55:38,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__fail
[2020-11-25 01:55:38,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__success
[2020-11-25 01:55:38,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 01:55:38,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 01:55:38,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__fail
[2020-11-25 01:55:38,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__success
[2020-11-25 01:55:38,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__fail
[2020-11-25 01:55:38,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__success
[2020-11-25 01:55:38,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__fail
[2020-11-25 01:55:38,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__success
[2020-11-25 01:55:38,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__fail
[2020-11-25 01:55:38,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__success
[2020-11-25 01:55:38,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__fail
[2020-11-25 01:55:38,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__success
[2020-11-25 01:55:38,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure MyToken_MyToken_NoBaseCtor__fail
[2020-11-25 01:55:38,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure MyToken_MyToken_NoBaseCtor__success
[2020-11-25 01:55:38,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure MyToken_MyToken__fail
[2020-11-25 01:55:38,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure MyToken_MyToken__success
[2020-11-25 01:55:38,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_MyToken__fail
[2020-11-25 01:55:38,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_MyToken__success
[2020-11-25 01:55:38,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_MyToken__fail
[2020-11-25 01:55:38,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_MyToken__success
[2020-11-25 01:55:38,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MyToken__fail
[2020-11-25 01:55:38,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MyToken__success
[2020-11-25 01:55:38,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_MyToken__fail
[2020-11-25 01:55:38,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_MyToken__success
[2020-11-25 01:55:38,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MyToken__fail
[2020-11-25 01:55:38,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MyToken__success
[2020-11-25 01:55:38,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_MyToken__fail
[2020-11-25 01:55:38,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_MyToken__success
[2020-11-25 01:55:38,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_MyToken__fail
[2020-11-25 01:55:38,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_MyToken__success
[2020-11-25 01:55:38,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_MyToken__fail
[2020-11-25 01:55:38,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_MyToken__success
[2020-11-25 01:55:38,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MyToken__fail
[2020-11-25 01:55:38,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MyToken__success
[2020-11-25 01:55:38,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MyToken__fail
[2020-11-25 01:55:38,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MyToken__success
[2020-11-25 01:55:38,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MyToken__fail
[2020-11-25 01:55:38,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MyToken__success
[2020-11-25 01:55:38,099 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_MyToken__fail
[2020-11-25 01:55:38,099 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_MyToken__success
[2020-11-25 01:55:38,099 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 01:55:38,099 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 01:55:38,099 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 01:55:38,099 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 01:55:38,099 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 01:55:38,099 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 01:55:38,099 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 01:55:38,099 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 01:55:38,099 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 01:55:38,099 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 01:55:38,099 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Interface
[2020-11-25 01:55:38,099 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Interface
[2020-11-25 01:55:38,099 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-25 01:55:38,099 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-25 01:55:38,099 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Owned
[2020-11-25 01:55:38,100 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Owned
[2020-11-25 01:55:38,100 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MyToken
[2020-11-25 01:55:38,100 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 01:55:38,100 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 01:55:38,100 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 01:55:38,412 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 01:55:38,461 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 01:55:38,462 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 01:55:38,462 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 01:55:38,683 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 01:55:38,684 INFO  L286             CfgBuilder]: Removed 5 assue(true) statements.
[2020-11-25 01:55:38,687 INFO  L202        PluginConnector]: Adding new model MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:55:38 BoogieIcfgContainer
[2020-11-25 01:55:38,687 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:55:38" (2/2) ...
[2020-11-25 01:55:38,687 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 01:55:38,688 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@20b0efaf and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:55:38, skipping insertion in model container
[2020-11-25 01:55:38,688 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 01:55:38,688 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 01:55:38,688 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 01:55:38,689 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 01:55:38,690 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:55:37" (1/3) ...
[2020-11-25 01:55:38,690 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@712288c7 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:55:38, skipping insertion in model container
[2020-11-25 01:55:38,690 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:55:38" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 01:55:38,727 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:55:38 NWAContainer
[2020-11-25 01:55:38,727 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 01:55:38,727 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 01:55:38,727 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 01:55:38,728 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 01:55:38,729 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:55:38" (3/4) ...
[2020-11-25 01:55:38,730 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@2fd7fc16 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:55:38, skipping insertion in model container
[2020-11-25 01:55:38,730 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:55:38" (4/4) ...
[2020-11-25 01:55:38,733 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 01:55:38,737 INFO  L110   BuchiProductObserver]: Initial RCFG 1506 locations, 1892 edges
[2020-11-25 01:55:38,737 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 01:55:38,748 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 01:55:40,173 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 01:55:40,177 INFO  L110   BuchiProductObserver]: BuchiProgram size 3572 locations, 6130 edges
[2020-11-25 01:55:40,177 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:55:40 BoogieIcfgContainer
[2020-11-25 01:55:40,177 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 01:55:40,178 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 01:55:40,178 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 01:55:40,179 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 01:55:40,179 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:55:40" (1/1) ...
[2020-11-25 01:55:40,255 INFO  L313           BlockEncoder]: Initial Icfg 3572 locations, 6130 edges
[2020-11-25 01:55:40,255 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 01:55:40,256 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 01:55:40,256 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 01:55:40,256 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 01:55:40,267 INFO  L70    emoveInfeasibleEdges]: Removed 84 edges and 13 locations because of local infeasibility
[2020-11-25 01:55:40,275 INFO  L70        RemoveSinkStates]: Removed 32 edges and 21 locations by removing sink states
[2020-11-25 01:55:40,284 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 01:55:40,289 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 01:55:40,291 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 01:55:40,291 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 01:55:40,295 INFO  L313           BlockEncoder]: Encoded RCFG 3516 locations, 5982 edges
[2020-11-25 01:55:40,295 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 01:55:40 BasicIcfg
[2020-11-25 01:55:40,295 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 01:55:40,296 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 01:55:40,296 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 01:55:40,297 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 01:55:40,298 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:55:40,298 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:55:37" (1/6) ...
[2020-11-25 01:55:40,299 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7578d080 and model type MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:55:40, skipping insertion in model container
[2020-11-25 01:55:40,299 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:55:40,300 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:55:38" (2/6) ...
[2020-11-25 01:55:40,300 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7578d080 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:55:40, skipping insertion in model container
[2020-11-25 01:55:40,300 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:55:40,300 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:55:38" (3/6) ...
[2020-11-25 01:55:40,300 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7578d080 and model type MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 01:55:40, skipping insertion in model container
[2020-11-25 01:55:40,300 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:55:40,300 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:55:38" (4/6) ...
[2020-11-25 01:55:40,300 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7578d080 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:55:40, skipping insertion in model container
[2020-11-25 01:55:40,300 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:55:40,300 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:55:40" (5/6) ...
[2020-11-25 01:55:40,301 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7578d080 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 01:55:40, skipping insertion in model container
[2020-11-25 01:55:40,301 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:55:40,301 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 01:55:40" (6/6) ...
[2020-11-25 01:55:40,302 INFO  L404   chiAutomizerObserver]: Analyzing ICFG MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transferfrom-self.bpl_BEv2
[2020-11-25 01:55:40,329 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 01:55:40,329 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 01:55:40,329 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 01:55:40,329 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 01:55:40,329 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 01:55:40,329 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 01:55:40,329 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 01:55:40,329 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 01:55:40,329 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 01:55:40,357 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3516 states.
[2020-11-25 01:55:40,407 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:55:40,408 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:55:40,408 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:55:40,417 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:55:40,417 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:55:40,417 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 01:55:40,417 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3516 states.
[2020-11-25 01:55:40,437 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:55:40,437 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:55:40,437 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:55:40,439 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:55:40,439 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_MyToken0 := false;
[L3]                 call_transferFrom_MyToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4124]              assume null == 0;
[L4125]  CALL        call this := FreshRefGenerator__success();
[L1864]              havoc newRef;
[L1865]              assume Alloc[newRef] == false;
[L1866]              Alloc[newRef] := true;
[L1867]              assume newRef != null;
[L4125]  RET         call this := FreshRefGenerator__success();
[L4126]              assume now >= 0;
[L4127]              assume DType[this] == MyToken;
[L4128]              assume msgvalue_MSG == 0;
[L4129]              gas := gas - 53000;
[L4130]  CALL        call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2218]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2000]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1985]              assume msgsender_MSG != null;
[L1986]              Balance[this] := 0;
[L2000]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2001]  COND FALSE  !(revert)
[L2218]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2219]  COND TRUE   revert
[L794]   RET         call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L795]               assume !revert && gas >= 0;
[L4130]  RET         call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L4131]              assume !revert && gas >= 0;

Loop:
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND TRUE   choice == 19
[L3987]              gas := gas - 21000;
[L3988]  COND FALSE  !(gas >= 0)
[L4134]  RET         call CorralChoice_MyToken(this);

[2020-11-25 01:55:40,456 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:55:40,457 INFO  L82        PathProgramCache]: Analyzing trace with hash -72020524, now seen corresponding path program 1 times
[2020-11-25 01:55:40,461 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:55:40,485 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:55:40,528 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 01:55:40,530 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:55:40,530 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 01:55:40,534 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:55:40,716 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 01:55:40,716 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 01:55:40,718 INFO  L87              Difference]: Start difference. First operand 3516 states. Second operand 4 states.
[2020-11-25 01:55:41,457 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:55:41,457 INFO  L93              Difference]: Finished difference Result 3720 states and 5987 transitions.
[2020-11-25 01:55:41,457 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 01:55:41,459 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3720 states and 5987 transitions.
[2020-11-25 01:55:41,483 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 01:55:41,515 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3720 states to 3616 states and 5836 transitions.
[2020-11-25 01:55:41,516 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 15
[2020-11-25 01:55:41,520 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1440
[2020-11-25 01:55:41,521 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3616 states and 5836 transitions.
[2020-11-25 01:55:41,533 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:55:41,534 INFO  L728         BuchiCegarLoop]: Abstraction has 3616 states and 5836 transitions.
[2020-11-25 01:55:41,548 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3616 states and 5836 transitions.
[2020-11-25 01:55:41,613 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3616 to 2594.
[2020-11-25 01:55:41,614 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2594 states.
[2020-11-25 01:55:41,622 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2594 states to 2594 states and 3948 transitions.
[2020-11-25 01:55:41,624 INFO  L751         BuchiCegarLoop]: Abstraction has 2594 states and 3948 transitions.
[2020-11-25 01:55:41,624 INFO  L631         BuchiCegarLoop]: Abstraction has 2594 states and 3948 transitions.
[2020-11-25 01:55:41,624 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 01:55:41,624 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2594 states and 3948 transitions.
[2020-11-25 01:55:41,632 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:55:41,632 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:55:41,632 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:55:41,633 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:55:41,634 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_MyToken0 := false;
[L3]                 call_transferFrom_MyToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4124]              assume null == 0;
[L4125]  CALL        call this := FreshRefGenerator__success();
[L1864]              havoc newRef;
[L1865]              assume Alloc[newRef] == false;
[L1866]              Alloc[newRef] := true;
[L1867]              assume newRef != null;
[L4125]  RET         call this := FreshRefGenerator__success();
[L4126]              assume now >= 0;
[L4127]              assume DType[this] == MyToken;
[L4128]              assume msgvalue_MSG == 0;
[L4129]              gas := gas - 53000;
[L4130]  CALL        call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2218]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2000]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1985]              assume msgsender_MSG != null;
[L1986]              Balance[this] := 0;
[L2000]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2001]  COND FALSE  !(revert)
[L2218]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2219]  COND FALSE  !(revert)
[L2222]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2070]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2052]              assume msgsender_MSG != null;
[L2053]              Balance[this] := 0;
[L2054]              owner_Owned[this] := null;
[L2055]              newOwner_Owned[this] := null;
[L2057]              owner_Owned[this] := msgsender_MSG;
[L2070]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2071]  COND FALSE  !(revert)
[L2222]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2223]  COND FALSE  !(revert)
[L2226]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]              assume msgsender_MSG != null;
[L1882]              Balance[this] := 0;
[L1896]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1897]  COND FALSE  !(revert)
[L2226]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2227]  COND FALSE  !(revert)
[L2230]  CALL        call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2172]              assume msgsender_MSG != null;
[L2173]              Balance[this] := 0;
[L2174]              symbol_MyToken[this] := -1251229519;
[L2175]              name_MyToken[this] := -1251229519;
[L2176]              decimals_MyToken[this] := 0;
[L2177]              _totalSupply_MyToken[this] := 0;
[L2178]              balances_MyToken[this] := zeroRefintArr();
[L2179]              sum_balances0[this] := 0;
[L2180]              allowed_MyToken[this] := zeroRefRefintArr();
[L2181]              sum_allowed1[this] := 0;
[L2183]              name_MyToken[this] := tokenName_s318;
[L2184]              symbol_MyToken[this] := tokenSymbol_s318;
[L2185]              decimals_MyToken[this] := tokenDecimals_s318;
[L2186]              __var_2 := tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2187]              _totalSupply_MyToken[this] := nonlinearMul(initialSupply_s318, nonlinearPow(10, tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2188]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][msgsender_MSG];
[L2189]              balances_MyToken[this][msgsender_MSG] := _totalSupply_MyToken[this];
[L2190]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][msgsender_MSG];
[L2191]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2230]  RET         call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2231]  COND FALSE  !(revert)
[L794]   RET         call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L795]               assume !revert && gas >= 0;
[L4130]  RET         call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L4131]              assume !revert && gas >= 0;

Loop:
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND TRUE   choice == 19
[L3987]              gas := gas - 21000;
[L3988]  COND FALSE  !(gas >= 0)
[L4134]  RET         call CorralChoice_MyToken(this);

[2020-11-25 01:55:41,637 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:55:41,637 INFO  L82        PathProgramCache]: Analyzing trace with hash 1271751552, now seen corresponding path program 1 times
[2020-11-25 01:55:41,637 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:55:41,646 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:55:41,665 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 01:55:41,665 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:55:41,666 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 01:55:41,667 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:55:41,667 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 01:55:41,667 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 01:55:41,668 INFO  L87              Difference]: Start difference. First operand 2594 states and 3948 transitions. cyclomatic complexity: 1356 Second operand 4 states.
[2020-11-25 01:55:42,144 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:55:42,144 INFO  L93              Difference]: Finished difference Result 2400 states and 2563 transitions.
[2020-11-25 01:55:42,144 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 01:55:42,144 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2400 states and 2563 transitions.
[2020-11-25 01:55:42,151 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:55:42,157 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2400 states to 2400 states and 2563 transitions.
[2020-11-25 01:55:42,157 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 905
[2020-11-25 01:55:42,158 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 905
[2020-11-25 01:55:42,158 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2400 states and 2563 transitions.
[2020-11-25 01:55:42,159 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:55:42,159 INFO  L728         BuchiCegarLoop]: Abstraction has 2400 states and 2563 transitions.
[2020-11-25 01:55:42,162 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2400 states and 2563 transitions.
[2020-11-25 01:55:42,178 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2400 to 2400.
[2020-11-25 01:55:42,178 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2400 states.
[2020-11-25 01:55:42,180 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2400 states to 2400 states and 2563 transitions.
[2020-11-25 01:55:42,181 INFO  L751         BuchiCegarLoop]: Abstraction has 2400 states and 2563 transitions.
[2020-11-25 01:55:42,181 INFO  L631         BuchiCegarLoop]: Abstraction has 2400 states and 2563 transitions.
[2020-11-25 01:55:42,181 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 01:55:42,181 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2400 states and 2563 transitions.
[2020-11-25 01:55:42,186 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:55:42,186 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:55:42,186 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:55:42,189 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:55:42,189 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_MyToken0 := false;
[L3]                 call_transferFrom_MyToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4124]              assume null == 0;
[L4125]  CALL        call this := FreshRefGenerator__success();
[L1864]              havoc newRef;
[L1865]              assume Alloc[newRef] == false;
[L1866]              Alloc[newRef] := true;
[L1867]              assume newRef != null;
[L4125]  RET         call this := FreshRefGenerator__success();
[L4126]              assume now >= 0;
[L4127]              assume DType[this] == MyToken;
[L4128]              assume msgvalue_MSG == 0;
[L4129]              gas := gas - 53000;
[L4130]  CALL        call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2218]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2000]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1985]              assume msgsender_MSG != null;
[L1986]              Balance[this] := 0;
[L2000]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2001]  COND FALSE  !(revert)
[L2218]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2219]  COND FALSE  !(revert)
[L2222]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2070]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2052]              assume msgsender_MSG != null;
[L2053]              Balance[this] := 0;
[L2054]              owner_Owned[this] := null;
[L2055]              newOwner_Owned[this] := null;
[L2057]              owner_Owned[this] := msgsender_MSG;
[L2070]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2071]  COND FALSE  !(revert)
[L2222]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2223]  COND FALSE  !(revert)
[L2226]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]              assume msgsender_MSG != null;
[L1882]              Balance[this] := 0;
[L1896]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1897]  COND FALSE  !(revert)
[L2226]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2227]  COND FALSE  !(revert)
[L2230]  CALL        call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2172]              assume msgsender_MSG != null;
[L2173]              Balance[this] := 0;
[L2174]              symbol_MyToken[this] := -1251229519;
[L2175]              name_MyToken[this] := -1251229519;
[L2176]              decimals_MyToken[this] := 0;
[L2177]              _totalSupply_MyToken[this] := 0;
[L2178]              balances_MyToken[this] := zeroRefintArr();
[L2179]              sum_balances0[this] := 0;
[L2180]              allowed_MyToken[this] := zeroRefRefintArr();
[L2181]              sum_allowed1[this] := 0;
[L2183]              name_MyToken[this] := tokenName_s318;
[L2184]              symbol_MyToken[this] := tokenSymbol_s318;
[L2185]              decimals_MyToken[this] := tokenDecimals_s318;
[L2186]              __var_2 := tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2187]              _totalSupply_MyToken[this] := nonlinearMul(initialSupply_s318, nonlinearPow(10, tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2188]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][msgsender_MSG];
[L2189]              balances_MyToken[this][msgsender_MSG] := _totalSupply_MyToken[this];
[L2190]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][msgsender_MSG];
[L2191]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2230]  RET         call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2231]  COND FALSE  !(revert)
[L794]   RET         call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L795]               assume !revert && gas >= 0;
[L4130]  RET         call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L4131]              assume !revert && gas >= 0;
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND FALSE  !(choice == 12)
[L4043]  COND FALSE  !(choice == 11)
[L4050]  COND TRUE   choice == 10
[L4051]              gas := gas - 21000;
[L4052]  COND TRUE   gas >= 0
[L4053]              assume tokens_s474 >= 0 && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4054]              assume msgvalue_MSG == 0;
[L4055]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s474 || p2 != msgsender_MSG) && from_s474 == to_s474) && tokens_s474 <= balances_MyToken[this][from_s474]) && tokens_s474 <= allowed_MyToken[this][from_s474][msgsender_MSG]) && tokens_s474 >= 0) && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][to_s474] >= 0) && balances_MyToken[this][to_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][from_s474] >= 0) && balances_MyToken[this][from_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_MyToken[this][from_s474][msgsender_MSG] >= 0) && allowed_MyToken[this][from_s474][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_MyToken0 := true;
[L3]                 call_transferFrom_MyToken0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND TRUE   __exception
[L1050]              __tmp__Balance := Balance;
[L1051]              __tmp__DType := DType;
[L1052]              __tmp__Alloc := Alloc;
[L1053]              __tmp__balance_ADDR := balance_ADDR;
[L1054]              __tmp__M_Ref_int := M_Ref_int;
[L1055]              __tmp__sum_balances0 := sum_balances0;
[L1056]              __tmp__alloc_allowed_MyToken_lvl0 := alloc_allowed_MyToken_lvl0;
[L1057]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1058]              __tmp__sum_allowed1 := sum_allowed1;
[L1059]              __tmp__Length := Length;
[L1060]              __tmp__now := now;
[L1061]              __tmp__owner_Owned := owner_Owned;
[L1062]              __tmp__newOwner_Owned := newOwner_Owned;
[L1063]              __tmp__symbol_MyToken := symbol_MyToken;
[L1064]              __tmp__name_MyToken := name_MyToken;
[L1065]              __tmp__decimals_MyToken := decimals_MyToken;
[L1066]              __tmp___totalSupply_MyToken := _totalSupply_MyToken;
[L1067]              __tmp__balances_MyToken := balances_MyToken;
[L1068]              __tmp__allowed_MyToken := allowed_MyToken;
[L1069]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L2349]  COND TRUE   __tmp__DType[this] == MyToken
[L2350]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][from_s474], tokens_s474);
[L1922]  COND TRUE   !(b_s45 <= a_s45)
[L1923]              revert := true;
[L2350]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][from_s474], tokens_s474);
[L2351]  COND TRUE   revert
[L1069]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L1070]              assume revert || gas < 0;
[L4055]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L4134]  RET         call CorralChoice_MyToken(this);

Loop:
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND FALSE  !(choice == 12)
[L4043]  COND FALSE  !(choice == 11)
[L4050]  COND TRUE   choice == 10
[L4051]              gas := gas - 21000;
[L4052]  COND TRUE   gas >= 0
[L4053]              assume tokens_s474 >= 0 && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4054]              assume msgvalue_MSG == 0;
[L4055]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s474 || p2 != msgsender_MSG) && from_s474 == to_s474) && tokens_s474 <= balances_MyToken[this][from_s474]) && tokens_s474 <= allowed_MyToken[this][from_s474][msgsender_MSG]) && tokens_s474 >= 0) && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][to_s474] >= 0) && balances_MyToken[this][to_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][from_s474] >= 0) && balances_MyToken[this][from_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_MyToken[this][from_s474][msgsender_MSG] >= 0) && allowed_MyToken[this][from_s474][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_MyToken0 := true;
[L3]                 call_transferFrom_MyToken0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND TRUE   __exception
[L1050]              __tmp__Balance := Balance;
[L1051]              __tmp__DType := DType;
[L1052]              __tmp__Alloc := Alloc;
[L1053]              __tmp__balance_ADDR := balance_ADDR;
[L1054]              __tmp__M_Ref_int := M_Ref_int;
[L1055]              __tmp__sum_balances0 := sum_balances0;
[L1056]              __tmp__alloc_allowed_MyToken_lvl0 := alloc_allowed_MyToken_lvl0;
[L1057]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1058]              __tmp__sum_allowed1 := sum_allowed1;
[L1059]              __tmp__Length := Length;
[L1060]              __tmp__now := now;
[L1061]              __tmp__owner_Owned := owner_Owned;
[L1062]              __tmp__newOwner_Owned := newOwner_Owned;
[L1063]              __tmp__symbol_MyToken := symbol_MyToken;
[L1064]              __tmp__name_MyToken := name_MyToken;
[L1065]              __tmp__decimals_MyToken := decimals_MyToken;
[L1066]              __tmp___totalSupply_MyToken := _totalSupply_MyToken;
[L1067]              __tmp__balances_MyToken := balances_MyToken;
[L1068]              __tmp__allowed_MyToken := allowed_MyToken;
[L1069]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L2349]  COND TRUE   __tmp__DType[this] == MyToken
[L2350]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][from_s474], tokens_s474);
[L1922]  COND TRUE   !(b_s45 <= a_s45)
[L1923]              revert := true;
[L2350]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][from_s474], tokens_s474);
[L2351]  COND TRUE   revert
[L1069]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L1070]              assume revert || gas < 0;
[L4055]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L4134]  RET         call CorralChoice_MyToken(this);

[2020-11-25 01:55:42,194 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:55:42,195 INFO  L82        PathProgramCache]: Analyzing trace with hash -1818221437, now seen corresponding path program 1 times
[2020-11-25 01:55:42,196 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:55:42,216 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:55:42,386 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 01:55:42,386 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:55:42,386 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [14] imperfect sequences [] total 14
[2020-11-25 01:55:42,386 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:55:42,386 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 15 interpolants.
[2020-11-25 01:55:42,387 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=29, Invalid=181, Unknown=0, NotChecked=0, Total=210
[2020-11-25 01:55:42,387 INFO  L87              Difference]: Start difference. First operand 2400 states and 2563 transitions. cyclomatic complexity: 165 Second operand 15 states.
[2020-11-25 01:55:44,202 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:55:44,202 INFO  L93              Difference]: Finished difference Result 2620 states and 2830 transitions.
[2020-11-25 01:55:44,202 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 01:55:44,203 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2620 states and 2830 transitions.
[2020-11-25 01:55:44,210 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 01:55:44,217 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2620 states to 2620 states and 2830 transitions.
[2020-11-25 01:55:44,217 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 988
[2020-11-25 01:55:44,217 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 988
[2020-11-25 01:55:44,218 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2620 states and 2830 transitions.
[2020-11-25 01:55:44,220 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:55:44,220 INFO  L728         BuchiCegarLoop]: Abstraction has 2620 states and 2830 transitions.
[2020-11-25 01:55:44,222 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2620 states and 2830 transitions.
[2020-11-25 01:55:44,241 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2620 to 2550.
[2020-11-25 01:55:44,241 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2550 states.
[2020-11-25 01:55:44,243 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2550 states to 2550 states and 2730 transitions.
[2020-11-25 01:55:44,243 INFO  L751         BuchiCegarLoop]: Abstraction has 2550 states and 2730 transitions.
[2020-11-25 01:55:44,243 INFO  L631         BuchiCegarLoop]: Abstraction has 2550 states and 2730 transitions.
[2020-11-25 01:55:44,243 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 01:55:44,244 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2550 states and 2730 transitions.
[2020-11-25 01:55:44,248 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:55:44,248 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:55:44,248 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:55:44,250 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:55:44,250 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_MyToken0 := false;
[L3]                 call_transferFrom_MyToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4124]              assume null == 0;
[L4125]  CALL        call this := FreshRefGenerator__success();
[L1864]              havoc newRef;
[L1865]              assume Alloc[newRef] == false;
[L1866]              Alloc[newRef] := true;
[L1867]              assume newRef != null;
[L4125]  RET         call this := FreshRefGenerator__success();
[L4126]              assume now >= 0;
[L4127]              assume DType[this] == MyToken;
[L4128]              assume msgvalue_MSG == 0;
[L4129]              gas := gas - 53000;
[L4130]  CALL        call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2218]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2000]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1985]              assume msgsender_MSG != null;
[L1986]              Balance[this] := 0;
[L2000]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2001]  COND FALSE  !(revert)
[L2218]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2219]  COND FALSE  !(revert)
[L2222]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2070]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2052]              assume msgsender_MSG != null;
[L2053]              Balance[this] := 0;
[L2054]              owner_Owned[this] := null;
[L2055]              newOwner_Owned[this] := null;
[L2057]              owner_Owned[this] := msgsender_MSG;
[L2070]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2071]  COND FALSE  !(revert)
[L2222]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2223]  COND FALSE  !(revert)
[L2226]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]              assume msgsender_MSG != null;
[L1882]              Balance[this] := 0;
[L1896]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1897]  COND FALSE  !(revert)
[L2226]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2227]  COND FALSE  !(revert)
[L2230]  CALL        call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2172]              assume msgsender_MSG != null;
[L2173]              Balance[this] := 0;
[L2174]              symbol_MyToken[this] := -1251229519;
[L2175]              name_MyToken[this] := -1251229519;
[L2176]              decimals_MyToken[this] := 0;
[L2177]              _totalSupply_MyToken[this] := 0;
[L2178]              balances_MyToken[this] := zeroRefintArr();
[L2179]              sum_balances0[this] := 0;
[L2180]              allowed_MyToken[this] := zeroRefRefintArr();
[L2181]              sum_allowed1[this] := 0;
[L2183]              name_MyToken[this] := tokenName_s318;
[L2184]              symbol_MyToken[this] := tokenSymbol_s318;
[L2185]              decimals_MyToken[this] := tokenDecimals_s318;
[L2186]              __var_2 := tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2187]              _totalSupply_MyToken[this] := nonlinearMul(initialSupply_s318, nonlinearPow(10, tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2188]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][msgsender_MSG];
[L2189]              balances_MyToken[this][msgsender_MSG] := _totalSupply_MyToken[this];
[L2190]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][msgsender_MSG];
[L2191]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2230]  RET         call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2231]  COND FALSE  !(revert)
[L794]   RET         call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L795]               assume !revert && gas >= 0;
[L4130]  RET         call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L4131]              assume !revert && gas >= 0;
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND FALSE  !(choice == 12)
[L4043]  COND FALSE  !(choice == 11)
[L4050]  COND TRUE   choice == 10
[L4051]              gas := gas - 21000;
[L4052]  COND TRUE   gas >= 0
[L4053]              assume tokens_s474 >= 0 && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4054]              assume msgvalue_MSG == 0;
[L4055]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s474 || p2 != msgsender_MSG) && from_s474 == to_s474) && tokens_s474 <= balances_MyToken[this][from_s474]) && tokens_s474 <= allowed_MyToken[this][from_s474][msgsender_MSG]) && tokens_s474 >= 0) && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][to_s474] >= 0) && balances_MyToken[this][to_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][from_s474] >= 0) && balances_MyToken[this][from_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_MyToken[this][from_s474][msgsender_MSG] >= 0) && allowed_MyToken[this][from_s474][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_MyToken0 := true;
[L3]                 call_transferFrom_MyToken0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L2391]  COND TRUE   DType[this] == MyToken
[L2392]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][from_s474], tokens_s474);
[L1931]  COND FALSE  !(!(b_s45 <= a_s45))
[L1935]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2392]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][from_s474], tokens_s474);
[L2393]  COND FALSE  !(revert)
[L2399]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][from_s474];
[L2400]              balances_MyToken[this][from_s474] := __var_6;
[L2401]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][from_s474];
[L2402]  COND TRUE   DType[this] == MyToken
[L2403]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L1931]  COND FALSE  !(!(b_s45 <= a_s45))
[L1935]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2403]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L2404]  COND FALSE  !(revert)
[L2410]              sum_allowed1[from_s474] := sum_allowed1[from_s474] - allowed_MyToken[this][from_s474][msgsender_MSG];
[L2411]              allowed_MyToken[this][from_s474][msgsender_MSG] := __var_7;
[L2412]              sum_allowed1[from_s474] := sum_allowed1[from_s474] + allowed_MyToken[this][from_s474][msgsender_MSG];
[L2413]  COND TRUE   DType[this] == MyToken
[L2414]  CALL        call __var_8 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s474], tokens_s474);
[L1913]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1914]  COND FALSE  !(!(c_s23 >= a_s23))
[L2414]  RET         call __var_8 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s474], tokens_s474);
[L2415]  COND FALSE  !(revert)
[L2421]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][to_s474];
[L2422]              balances_MyToken[this][to_s474] := __var_8;
[L2423]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][to_s474];
[L2424]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2425]              success_s474 := true;
[L1072]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s474 == true && allowed_MyToken[this][from_s474][msgsender_MSG] == old(allowed_MyToken[this][from_s474][msgsender_MSG]) - tokens_s474) && _totalSupply_MyToken[this] == old(_totalSupply_MyToken[this])) && balances_MyToken[this] == old(balances_MyToken[this])) && allowed_MyToken[this][p1][p2] == old(allowed_MyToken[this][p1][p2])) && symbol_MyToken[this] == old(symbol_MyToken[this])) && name_MyToken[this] == old(name_MyToken[this])) && decimals_MyToken[this] == old(decimals_MyToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4055]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L4134]  RET         call CorralChoice_MyToken(this);

Loop:
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND FALSE  !(choice == 12)
[L4043]  COND FALSE  !(choice == 11)
[L4050]  COND TRUE   choice == 10
[L4051]              gas := gas - 21000;
[L4052]  COND TRUE   gas >= 0
[L4053]              assume tokens_s474 >= 0 && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4054]              assume msgvalue_MSG == 0;
[L4055]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s474 || p2 != msgsender_MSG) && from_s474 == to_s474) && tokens_s474 <= balances_MyToken[this][from_s474]) && tokens_s474 <= allowed_MyToken[this][from_s474][msgsender_MSG]) && tokens_s474 >= 0) && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][to_s474] >= 0) && balances_MyToken[this][to_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][from_s474] >= 0) && balances_MyToken[this][from_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_MyToken[this][from_s474][msgsender_MSG] >= 0) && allowed_MyToken[this][from_s474][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_MyToken0 := true;
[L3]                 call_transferFrom_MyToken0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L2391]  COND TRUE   DType[this] == MyToken
[L2392]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][from_s474], tokens_s474);
[L1931]  COND FALSE  !(!(b_s45 <= a_s45))
[L1935]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2392]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][from_s474], tokens_s474);
[L2393]  COND FALSE  !(revert)
[L2399]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][from_s474];
[L2400]              balances_MyToken[this][from_s474] := __var_6;
[L2401]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][from_s474];
[L2402]  COND TRUE   DType[this] == MyToken
[L2403]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L1931]  COND FALSE  !(!(b_s45 <= a_s45))
[L1935]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2403]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L2404]  COND FALSE  !(revert)
[L2410]              sum_allowed1[from_s474] := sum_allowed1[from_s474] - allowed_MyToken[this][from_s474][msgsender_MSG];
[L2411]              allowed_MyToken[this][from_s474][msgsender_MSG] := __var_7;
[L2412]              sum_allowed1[from_s474] := sum_allowed1[from_s474] + allowed_MyToken[this][from_s474][msgsender_MSG];
[L2413]  COND TRUE   DType[this] == MyToken
[L2414]  CALL        call __var_8 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s474], tokens_s474);
[L1913]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1914]  COND FALSE  !(!(c_s23 >= a_s23))
[L2414]  RET         call __var_8 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s474], tokens_s474);
[L2415]  COND FALSE  !(revert)
[L2421]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][to_s474];
[L2422]              balances_MyToken[this][to_s474] := __var_8;
[L2423]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][to_s474];
[L2424]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2425]              success_s474 := true;
[L1072]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s474 == true && allowed_MyToken[this][from_s474][msgsender_MSG] == old(allowed_MyToken[this][from_s474][msgsender_MSG]) - tokens_s474) && _totalSupply_MyToken[this] == old(_totalSupply_MyToken[this])) && balances_MyToken[this] == old(balances_MyToken[this])) && allowed_MyToken[this][p1][p2] == old(allowed_MyToken[this][p1][p2])) && symbol_MyToken[this] == old(symbol_MyToken[this])) && name_MyToken[this] == old(name_MyToken[this])) && decimals_MyToken[this] == old(decimals_MyToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4055]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L4134]  RET         call CorralChoice_MyToken(this);

[2020-11-25 01:55:44,253 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:55:44,254 INFO  L82        PathProgramCache]: Analyzing trace with hash -822090863, now seen corresponding path program 1 times
[2020-11-25 01:55:44,254 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:55:44,310 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:55:45,576 INFO  L134       CoverageAnalysis]: Checked inductivity of 4 backedges. 1 proven. 2 refuted. 0 times theorem prover too weak. 1 trivial. 0 not checked.
[2020-11-25 01:55:45,576 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:55:45,577 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [26] total 26
[2020-11-25 01:55:45,577 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:55:45,578 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 27 interpolants.
[2020-11-25 01:55:45,578 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=62, Invalid=640, Unknown=0, NotChecked=0, Total=702
[2020-11-25 01:55:45,578 INFO  L87              Difference]: Start difference. First operand 2550 states and 2730 transitions. cyclomatic complexity: 184 Second operand 27 states.
[2020-11-25 01:55:52,616 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:55:52,617 INFO  L93              Difference]: Finished difference Result 2602 states and 2825 transitions.
[2020-11-25 01:55:52,617 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 27 states. 
[2020-11-25 01:55:52,617 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2602 states and 2825 transitions.
[2020-11-25 01:55:52,622 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 10
[2020-11-25 01:55:52,628 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2602 states to 2602 states and 2825 transitions.
[2020-11-25 01:55:52,628 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1001
[2020-11-25 01:55:52,629 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1001
[2020-11-25 01:55:52,629 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2602 states and 2825 transitions.
[2020-11-25 01:55:52,631 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:55:52,631 INFO  L728         BuchiCegarLoop]: Abstraction has 2602 states and 2825 transitions.
[2020-11-25 01:55:52,633 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2602 states and 2825 transitions.
[2020-11-25 01:55:52,649 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2602 to 2585.
[2020-11-25 01:55:52,649 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2585 states.
[2020-11-25 01:55:52,651 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2585 states to 2585 states and 2780 transitions.
[2020-11-25 01:55:52,651 INFO  L751         BuchiCegarLoop]: Abstraction has 2585 states and 2780 transitions.
[2020-11-25 01:55:52,651 INFO  L631         BuchiCegarLoop]: Abstraction has 2585 states and 2780 transitions.
[2020-11-25 01:55:52,651 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 01:55:52,651 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2585 states and 2780 transitions.
[2020-11-25 01:55:52,654 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 01:55:52,655 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:55:52,655 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:55:52,656 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:55:52,656 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_MyToken0 := false;
[L3]                 call_transferFrom_MyToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4124]              assume null == 0;
[L4125]  CALL        call this := FreshRefGenerator__success();
[L1864]              havoc newRef;
[L1865]              assume Alloc[newRef] == false;
[L1866]              Alloc[newRef] := true;
[L1867]              assume newRef != null;
[L4125]  RET         call this := FreshRefGenerator__success();
[L4126]              assume now >= 0;
[L4127]              assume DType[this] == MyToken;
[L4128]              assume msgvalue_MSG == 0;
[L4129]              gas := gas - 53000;
[L4130]  CALL        call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2218]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2000]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1985]              assume msgsender_MSG != null;
[L1986]              Balance[this] := 0;
[L2000]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2001]  COND FALSE  !(revert)
[L2218]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2219]  COND FALSE  !(revert)
[L2222]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2070]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2052]              assume msgsender_MSG != null;
[L2053]              Balance[this] := 0;
[L2054]              owner_Owned[this] := null;
[L2055]              newOwner_Owned[this] := null;
[L2057]              owner_Owned[this] := msgsender_MSG;
[L2070]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2071]  COND FALSE  !(revert)
[L2222]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2223]  COND FALSE  !(revert)
[L2226]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]              assume msgsender_MSG != null;
[L1882]              Balance[this] := 0;
[L1896]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1897]  COND FALSE  !(revert)
[L2226]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2227]  COND FALSE  !(revert)
[L2230]  CALL        call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2172]              assume msgsender_MSG != null;
[L2173]              Balance[this] := 0;
[L2174]              symbol_MyToken[this] := -1251229519;
[L2175]              name_MyToken[this] := -1251229519;
[L2176]              decimals_MyToken[this] := 0;
[L2177]              _totalSupply_MyToken[this] := 0;
[L2178]              balances_MyToken[this] := zeroRefintArr();
[L2179]              sum_balances0[this] := 0;
[L2180]              allowed_MyToken[this] := zeroRefRefintArr();
[L2181]              sum_allowed1[this] := 0;
[L2183]              name_MyToken[this] := tokenName_s318;
[L2184]              symbol_MyToken[this] := tokenSymbol_s318;
[L2185]              decimals_MyToken[this] := tokenDecimals_s318;
[L2186]              __var_2 := tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2187]              _totalSupply_MyToken[this] := nonlinearMul(initialSupply_s318, nonlinearPow(10, tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2188]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][msgsender_MSG];
[L2189]              balances_MyToken[this][msgsender_MSG] := _totalSupply_MyToken[this];
[L2190]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][msgsender_MSG];
[L2191]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2230]  RET         call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2231]  COND FALSE  !(revert)
[L794]   RET         call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L795]               assume !revert && gas >= 0;
[L4130]  RET         call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L4131]              assume !revert && gas >= 0;
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND FALSE  !(choice == 12)
[L4043]  COND FALSE  !(choice == 11)
[L4050]  COND TRUE   choice == 10
[L4051]              gas := gas - 21000;
[L4052]  COND TRUE   gas >= 0
[L4053]              assume tokens_s474 >= 0 && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4054]              assume msgvalue_MSG == 0;
[L4055]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s474 || p2 != msgsender_MSG) && from_s474 == to_s474) && tokens_s474 <= balances_MyToken[this][from_s474]) && tokens_s474 <= allowed_MyToken[this][from_s474][msgsender_MSG]) && tokens_s474 >= 0) && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][to_s474] >= 0) && balances_MyToken[this][to_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][from_s474] >= 0) && balances_MyToken[this][from_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_MyToken[this][from_s474][msgsender_MSG] >= 0) && allowed_MyToken[this][from_s474][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_MyToken0 := true;
[L3]                 call_transferFrom_MyToken0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND TRUE   __exception
[L1050]              __tmp__Balance := Balance;
[L1051]              __tmp__DType := DType;
[L1052]              __tmp__Alloc := Alloc;
[L1053]              __tmp__balance_ADDR := balance_ADDR;
[L1054]              __tmp__M_Ref_int := M_Ref_int;
[L1055]              __tmp__sum_balances0 := sum_balances0;
[L1056]              __tmp__alloc_allowed_MyToken_lvl0 := alloc_allowed_MyToken_lvl0;
[L1057]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1058]              __tmp__sum_allowed1 := sum_allowed1;
[L1059]              __tmp__Length := Length;
[L1060]              __tmp__now := now;
[L1061]              __tmp__owner_Owned := owner_Owned;
[L1062]              __tmp__newOwner_Owned := newOwner_Owned;
[L1063]              __tmp__symbol_MyToken := symbol_MyToken;
[L1064]              __tmp__name_MyToken := name_MyToken;
[L1065]              __tmp__decimals_MyToken := decimals_MyToken;
[L1066]              __tmp___totalSupply_MyToken := _totalSupply_MyToken;
[L1067]              __tmp__balances_MyToken := balances_MyToken;
[L1068]              __tmp__allowed_MyToken := allowed_MyToken;
[L1069]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L2349]  COND TRUE   __tmp__DType[this] == MyToken
[L2350]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][from_s474], tokens_s474);
[L1922]  COND FALSE  !(!(b_s45 <= a_s45))
[L1926]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2350]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][from_s474], tokens_s474);
[L2351]  COND FALSE  !(revert)
[L2357]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_MyToken[this][from_s474];
[L2358]              __tmp__balances_MyToken[this][from_s474] := __var_6;
[L2359]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_MyToken[this][from_s474];
[L2360]  COND TRUE   __tmp__DType[this] == MyToken
[L2361]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L1922]  COND TRUE   !(b_s45 <= a_s45)
[L1923]              revert := true;
[L2361]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L2362]  COND TRUE   revert
[L1069]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L1070]              assume revert || gas < 0;
[L4055]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L4134]  RET         call CorralChoice_MyToken(this);

Loop:
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND TRUE   choice == 19
[L3987]              gas := gas - 21000;
[L3988]  COND FALSE  !(gas >= 0)
[L4134]  RET         call CorralChoice_MyToken(this);

[2020-11-25 01:55:52,658 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:55:52,658 INFO  L82        PathProgramCache]: Analyzing trace with hash 874665051, now seen corresponding path program 1 times
[2020-11-25 01:55:52,659 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:55:52,667 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:55:52,728 INFO  L134       CoverageAnalysis]: Checked inductivity of 3 backedges. 2 proven. 0 refuted. 0 times theorem prover too weak. 1 trivial. 0 not checked.
[2020-11-25 01:55:52,728 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:55:52,728 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-11-25 01:55:52,728 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:55:52,728 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 01:55:52,729 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=26, Invalid=156, Unknown=0, NotChecked=0, Total=182
[2020-11-25 01:55:52,729 INFO  L87              Difference]: Start difference. First operand 2585 states and 2780 transitions. cyclomatic complexity: 201 Second operand 14 states.
[2020-11-25 01:55:53,921 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:55:53,921 INFO  L93              Difference]: Finished difference Result 2666 states and 2915 transitions.
[2020-11-25 01:55:53,921 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 01:55:53,921 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2666 states and 2915 transitions.
[2020-11-25 01:55:53,926 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 10
[2020-11-25 01:55:53,932 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2666 states to 2666 states and 2915 transitions.
[2020-11-25 01:55:53,932 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1010
[2020-11-25 01:55:53,932 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1010
[2020-11-25 01:55:53,933 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2666 states and 2915 transitions.
[2020-11-25 01:55:53,935 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:55:53,935 INFO  L728         BuchiCegarLoop]: Abstraction has 2666 states and 2915 transitions.
[2020-11-25 01:55:53,937 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2666 states and 2915 transitions.
[2020-11-25 01:55:53,952 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2666 to 2585.
[2020-11-25 01:55:53,952 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2585 states.
[2020-11-25 01:55:53,954 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2585 states to 2585 states and 2780 transitions.
[2020-11-25 01:55:53,954 INFO  L751         BuchiCegarLoop]: Abstraction has 2585 states and 2780 transitions.
[2020-11-25 01:55:53,954 INFO  L631         BuchiCegarLoop]: Abstraction has 2585 states and 2780 transitions.
[2020-11-25 01:55:53,954 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 01:55:53,955 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2585 states and 2780 transitions.
[2020-11-25 01:55:53,957 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 01:55:53,958 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:55:53,958 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:55:53,958 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:55:53,958 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_MyToken0 := false;
[L3]                 call_transferFrom_MyToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4124]              assume null == 0;
[L4125]  CALL        call this := FreshRefGenerator__success();
[L1864]              havoc newRef;
[L1865]              assume Alloc[newRef] == false;
[L1866]              Alloc[newRef] := true;
[L1867]              assume newRef != null;
[L4125]  RET         call this := FreshRefGenerator__success();
[L4126]              assume now >= 0;
[L4127]              assume DType[this] == MyToken;
[L4128]              assume msgvalue_MSG == 0;
[L4129]              gas := gas - 53000;
[L4130]  CALL        call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2218]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2000]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1985]              assume msgsender_MSG != null;
[L1986]              Balance[this] := 0;
[L2000]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2001]  COND FALSE  !(revert)
[L2218]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2219]  COND FALSE  !(revert)
[L2222]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2070]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2052]              assume msgsender_MSG != null;
[L2053]              Balance[this] := 0;
[L2054]              owner_Owned[this] := null;
[L2055]              newOwner_Owned[this] := null;
[L2057]              owner_Owned[this] := msgsender_MSG;
[L2070]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2071]  COND FALSE  !(revert)
[L2222]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2223]  COND FALSE  !(revert)
[L2226]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]              assume msgsender_MSG != null;
[L1882]              Balance[this] := 0;
[L1896]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1897]  COND FALSE  !(revert)
[L2226]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2227]  COND FALSE  !(revert)
[L2230]  CALL        call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2172]              assume msgsender_MSG != null;
[L2173]              Balance[this] := 0;
[L2174]              symbol_MyToken[this] := -1251229519;
[L2175]              name_MyToken[this] := -1251229519;
[L2176]              decimals_MyToken[this] := 0;
[L2177]              _totalSupply_MyToken[this] := 0;
[L2178]              balances_MyToken[this] := zeroRefintArr();
[L2179]              sum_balances0[this] := 0;
[L2180]              allowed_MyToken[this] := zeroRefRefintArr();
[L2181]              sum_allowed1[this] := 0;
[L2183]              name_MyToken[this] := tokenName_s318;
[L2184]              symbol_MyToken[this] := tokenSymbol_s318;
[L2185]              decimals_MyToken[this] := tokenDecimals_s318;
[L2186]              __var_2 := tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2187]              _totalSupply_MyToken[this] := nonlinearMul(initialSupply_s318, nonlinearPow(10, tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2188]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][msgsender_MSG];
[L2189]              balances_MyToken[this][msgsender_MSG] := _totalSupply_MyToken[this];
[L2190]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][msgsender_MSG];
[L2191]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2230]  RET         call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2231]  COND FALSE  !(revert)
[L794]   RET         call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L795]               assume !revert && gas >= 0;
[L4130]  RET         call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L4131]              assume !revert && gas >= 0;
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND FALSE  !(choice == 12)
[L4043]  COND FALSE  !(choice == 11)
[L4050]  COND TRUE   choice == 10
[L4051]              gas := gas - 21000;
[L4052]  COND TRUE   gas >= 0
[L4053]              assume tokens_s474 >= 0 && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4054]              assume msgvalue_MSG == 0;
[L4055]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s474 || p2 != msgsender_MSG) && from_s474 == to_s474) && tokens_s474 <= balances_MyToken[this][from_s474]) && tokens_s474 <= allowed_MyToken[this][from_s474][msgsender_MSG]) && tokens_s474 >= 0) && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][to_s474] >= 0) && balances_MyToken[this][to_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][from_s474] >= 0) && balances_MyToken[this][from_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_MyToken[this][from_s474][msgsender_MSG] >= 0) && allowed_MyToken[this][from_s474][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_MyToken0 := true;
[L3]                 call_transferFrom_MyToken0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND TRUE   __exception
[L1050]              __tmp__Balance := Balance;
[L1051]              __tmp__DType := DType;
[L1052]              __tmp__Alloc := Alloc;
[L1053]              __tmp__balance_ADDR := balance_ADDR;
[L1054]              __tmp__M_Ref_int := M_Ref_int;
[L1055]              __tmp__sum_balances0 := sum_balances0;
[L1056]              __tmp__alloc_allowed_MyToken_lvl0 := alloc_allowed_MyToken_lvl0;
[L1057]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1058]              __tmp__sum_allowed1 := sum_allowed1;
[L1059]              __tmp__Length := Length;
[L1060]              __tmp__now := now;
[L1061]              __tmp__owner_Owned := owner_Owned;
[L1062]              __tmp__newOwner_Owned := newOwner_Owned;
[L1063]              __tmp__symbol_MyToken := symbol_MyToken;
[L1064]              __tmp__name_MyToken := name_MyToken;
[L1065]              __tmp__decimals_MyToken := decimals_MyToken;
[L1066]              __tmp___totalSupply_MyToken := _totalSupply_MyToken;
[L1067]              __tmp__balances_MyToken := balances_MyToken;
[L1068]              __tmp__allowed_MyToken := allowed_MyToken;
[L1069]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L2349]  COND TRUE   __tmp__DType[this] == MyToken
[L2350]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][from_s474], tokens_s474);
[L1922]  COND FALSE  !(!(b_s45 <= a_s45))
[L1926]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2350]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][from_s474], tokens_s474);
[L2351]  COND FALSE  !(revert)
[L2357]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_MyToken[this][from_s474];
[L2358]              __tmp__balances_MyToken[this][from_s474] := __var_6;
[L2359]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_MyToken[this][from_s474];
[L2360]  COND TRUE   __tmp__DType[this] == MyToken
[L2361]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L1922]  COND FALSE  !(!(b_s45 <= a_s45))
[L1926]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2361]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L2362]  COND FALSE  !(revert)
[L2368]              __tmp__sum_allowed1[from_s474] := __tmp__sum_allowed1[from_s474] - __tmp__allowed_MyToken[this][from_s474][msgsender_MSG];
[L2369]              __tmp__allowed_MyToken[this][from_s474][msgsender_MSG] := __var_7;
[L2370]              __tmp__sum_allowed1[from_s474] := __tmp__sum_allowed1[from_s474] + __tmp__allowed_MyToken[this][from_s474][msgsender_MSG];
[L2371]  COND TRUE   __tmp__DType[this] == MyToken
[L2372]  CALL        call __var_8 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][to_s474], tokens_s474);
[L1904]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1905]  COND TRUE   !(c_s23 >= a_s23)
[L1906]              revert := true;
[L2372]  RET         call __var_8 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][to_s474], tokens_s474);
[L2373]  COND TRUE   revert
[L1069]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L1070]              assume revert || gas < 0;
[L4055]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L4134]  RET         call CorralChoice_MyToken(this);

Loop:
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND TRUE   choice == 19
[L3987]              gas := gas - 21000;
[L3988]  COND FALSE  !(gas >= 0)
[L4134]  RET         call CorralChoice_MyToken(this);

[2020-11-25 01:55:53,961 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:55:53,961 INFO  L82        PathProgramCache]: Analyzing trace with hash -1508511596, now seen corresponding path program 1 times
[2020-11-25 01:55:53,962 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:55:53,971 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:55:54,043 INFO  L134       CoverageAnalysis]: Checked inductivity of 4 backedges. 0 proven. 2 refuted. 0 times theorem prover too weak. 2 trivial. 0 not checked.
[2020-11-25 01:55:54,044 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:55:54,044 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [16] total 16
[2020-11-25 01:55:54,044 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:55:54,044 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 17 interpolants.
[2020-11-25 01:55:54,044 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=32, Invalid=240, Unknown=0, NotChecked=0, Total=272
[2020-11-25 01:55:54,044 INFO  L87              Difference]: Start difference. First operand 2585 states and 2780 transitions. cyclomatic complexity: 201 Second operand 17 states.
[2020-11-25 01:55:55,693 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:55:55,694 INFO  L93              Difference]: Finished difference Result 2620 states and 2838 transitions.
[2020-11-25 01:55:55,694 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 01:55:55,694 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2620 states and 2838 transitions.
[2020-11-25 01:55:55,698 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 01:55:55,703 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2620 states to 2620 states and 2838 transitions.
[2020-11-25 01:55:55,703 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1010
[2020-11-25 01:55:55,704 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1010
[2020-11-25 01:55:55,704 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2620 states and 2838 transitions.
[2020-11-25 01:55:55,706 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:55:55,706 INFO  L728         BuchiCegarLoop]: Abstraction has 2620 states and 2838 transitions.
[2020-11-25 01:55:55,708 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2620 states and 2838 transitions.
[2020-11-25 01:55:55,721 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2620 to 2585.
[2020-11-25 01:55:55,721 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2585 states.
[2020-11-25 01:55:55,724 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2585 states to 2585 states and 2780 transitions.
[2020-11-25 01:55:55,724 INFO  L751         BuchiCegarLoop]: Abstraction has 2585 states and 2780 transitions.
[2020-11-25 01:55:55,724 INFO  L631         BuchiCegarLoop]: Abstraction has 2585 states and 2780 transitions.
[2020-11-25 01:55:55,724 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 01:55:55,724 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2585 states and 2780 transitions.
[2020-11-25 01:55:55,727 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 01:55:55,727 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:55:55,727 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:55:55,728 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:55:55,728 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_MyToken0 := false;
[L3]                 call_transferFrom_MyToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4124]              assume null == 0;
[L4125]  CALL        call this := FreshRefGenerator__success();
[L1864]              havoc newRef;
[L1865]              assume Alloc[newRef] == false;
[L1866]              Alloc[newRef] := true;
[L1867]              assume newRef != null;
[L4125]  RET         call this := FreshRefGenerator__success();
[L4126]              assume now >= 0;
[L4127]              assume DType[this] == MyToken;
[L4128]              assume msgvalue_MSG == 0;
[L4129]              gas := gas - 53000;
[L4130]  CALL        call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2218]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2000]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1985]              assume msgsender_MSG != null;
[L1986]              Balance[this] := 0;
[L2000]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2001]  COND FALSE  !(revert)
[L2218]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2219]  COND FALSE  !(revert)
[L2222]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2070]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2052]              assume msgsender_MSG != null;
[L2053]              Balance[this] := 0;
[L2054]              owner_Owned[this] := null;
[L2055]              newOwner_Owned[this] := null;
[L2057]              owner_Owned[this] := msgsender_MSG;
[L2070]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2071]  COND FALSE  !(revert)
[L2222]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2223]  COND FALSE  !(revert)
[L2226]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]              assume msgsender_MSG != null;
[L1882]              Balance[this] := 0;
[L1896]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1897]  COND FALSE  !(revert)
[L2226]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2227]  COND FALSE  !(revert)
[L2230]  CALL        call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2172]              assume msgsender_MSG != null;
[L2173]              Balance[this] := 0;
[L2174]              symbol_MyToken[this] := -1251229519;
[L2175]              name_MyToken[this] := -1251229519;
[L2176]              decimals_MyToken[this] := 0;
[L2177]              _totalSupply_MyToken[this] := 0;
[L2178]              balances_MyToken[this] := zeroRefintArr();
[L2179]              sum_balances0[this] := 0;
[L2180]              allowed_MyToken[this] := zeroRefRefintArr();
[L2181]              sum_allowed1[this] := 0;
[L2183]              name_MyToken[this] := tokenName_s318;
[L2184]              symbol_MyToken[this] := tokenSymbol_s318;
[L2185]              decimals_MyToken[this] := tokenDecimals_s318;
[L2186]              __var_2 := tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2187]              _totalSupply_MyToken[this] := nonlinearMul(initialSupply_s318, nonlinearPow(10, tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2188]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][msgsender_MSG];
[L2189]              balances_MyToken[this][msgsender_MSG] := _totalSupply_MyToken[this];
[L2190]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][msgsender_MSG];
[L2191]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2230]  RET         call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2231]  COND FALSE  !(revert)
[L794]   RET         call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L795]               assume !revert && gas >= 0;
[L4130]  RET         call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L4131]              assume !revert && gas >= 0;
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND FALSE  !(choice == 12)
[L4043]  COND FALSE  !(choice == 11)
[L4050]  COND TRUE   choice == 10
[L4051]              gas := gas - 21000;
[L4052]  COND TRUE   gas >= 0
[L4053]              assume tokens_s474 >= 0 && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4054]              assume msgvalue_MSG == 0;
[L4055]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s474 || p2 != msgsender_MSG) && from_s474 == to_s474) && tokens_s474 <= balances_MyToken[this][from_s474]) && tokens_s474 <= allowed_MyToken[this][from_s474][msgsender_MSG]) && tokens_s474 >= 0) && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][to_s474] >= 0) && balances_MyToken[this][to_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][from_s474] >= 0) && balances_MyToken[this][from_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_MyToken[this][from_s474][msgsender_MSG] >= 0) && allowed_MyToken[this][from_s474][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_MyToken0 := true;
[L3]                 call_transferFrom_MyToken0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND TRUE   __exception
[L1050]              __tmp__Balance := Balance;
[L1051]              __tmp__DType := DType;
[L1052]              __tmp__Alloc := Alloc;
[L1053]              __tmp__balance_ADDR := balance_ADDR;
[L1054]              __tmp__M_Ref_int := M_Ref_int;
[L1055]              __tmp__sum_balances0 := sum_balances0;
[L1056]              __tmp__alloc_allowed_MyToken_lvl0 := alloc_allowed_MyToken_lvl0;
[L1057]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1058]              __tmp__sum_allowed1 := sum_allowed1;
[L1059]              __tmp__Length := Length;
[L1060]              __tmp__now := now;
[L1061]              __tmp__owner_Owned := owner_Owned;
[L1062]              __tmp__newOwner_Owned := newOwner_Owned;
[L1063]              __tmp__symbol_MyToken := symbol_MyToken;
[L1064]              __tmp__name_MyToken := name_MyToken;
[L1065]              __tmp__decimals_MyToken := decimals_MyToken;
[L1066]              __tmp___totalSupply_MyToken := _totalSupply_MyToken;
[L1067]              __tmp__balances_MyToken := balances_MyToken;
[L1068]              __tmp__allowed_MyToken := allowed_MyToken;
[L1069]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L2349]  COND TRUE   __tmp__DType[this] == MyToken
[L2350]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][from_s474], tokens_s474);
[L1922]  COND FALSE  !(!(b_s45 <= a_s45))
[L1926]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2350]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][from_s474], tokens_s474);
[L2351]  COND FALSE  !(revert)
[L2357]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_MyToken[this][from_s474];
[L2358]              __tmp__balances_MyToken[this][from_s474] := __var_6;
[L2359]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_MyToken[this][from_s474];
[L2360]  COND TRUE   __tmp__DType[this] == MyToken
[L2361]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L1922]  COND FALSE  !(!(b_s45 <= a_s45))
[L1926]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2361]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L2362]  COND FALSE  !(revert)
[L2368]              __tmp__sum_allowed1[from_s474] := __tmp__sum_allowed1[from_s474] - __tmp__allowed_MyToken[this][from_s474][msgsender_MSG];
[L2369]              __tmp__allowed_MyToken[this][from_s474][msgsender_MSG] := __var_7;
[L2370]              __tmp__sum_allowed1[from_s474] := __tmp__sum_allowed1[from_s474] + __tmp__allowed_MyToken[this][from_s474][msgsender_MSG];
[L2371]  COND TRUE   __tmp__DType[this] == MyToken
[L2372]  CALL        call __var_8 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][to_s474], tokens_s474);
[L1904]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1905]  COND FALSE  !(!(c_s23 >= a_s23))
[L2372]  RET         call __var_8 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][to_s474], tokens_s474);
[L2373]  COND FALSE  !(revert)
[L2379]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_MyToken[this][to_s474];
[L2380]              __tmp__balances_MyToken[this][to_s474] := __var_8;
[L2381]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_MyToken[this][to_s474];
[L2382]              success_s474 := true;
[L1069]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L1070]              assume revert || gas < 0;
[L4055]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L4134]  RET         call CorralChoice_MyToken(this);

Loop:
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND FALSE  !(choice == 12)
[L4043]  COND FALSE  !(choice == 11)
[L4050]  COND TRUE   choice == 10
[L4051]              gas := gas - 21000;
[L4052]  COND TRUE   gas >= 0
[L4053]              assume tokens_s474 >= 0 && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4054]              assume msgvalue_MSG == 0;
[L4055]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s474 || p2 != msgsender_MSG) && from_s474 == to_s474) && tokens_s474 <= balances_MyToken[this][from_s474]) && tokens_s474 <= allowed_MyToken[this][from_s474][msgsender_MSG]) && tokens_s474 >= 0) && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][to_s474] >= 0) && balances_MyToken[this][to_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][from_s474] >= 0) && balances_MyToken[this][from_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_MyToken[this][from_s474][msgsender_MSG] >= 0) && allowed_MyToken[this][from_s474][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_MyToken0 := true;
[L3]                 call_transferFrom_MyToken0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND TRUE   __exception
[L1050]              __tmp__Balance := Balance;
[L1051]              __tmp__DType := DType;
[L1052]              __tmp__Alloc := Alloc;
[L1053]              __tmp__balance_ADDR := balance_ADDR;
[L1054]              __tmp__M_Ref_int := M_Ref_int;
[L1055]              __tmp__sum_balances0 := sum_balances0;
[L1056]              __tmp__alloc_allowed_MyToken_lvl0 := alloc_allowed_MyToken_lvl0;
[L1057]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1058]              __tmp__sum_allowed1 := sum_allowed1;
[L1059]              __tmp__Length := Length;
[L1060]              __tmp__now := now;
[L1061]              __tmp__owner_Owned := owner_Owned;
[L1062]              __tmp__newOwner_Owned := newOwner_Owned;
[L1063]              __tmp__symbol_MyToken := symbol_MyToken;
[L1064]              __tmp__name_MyToken := name_MyToken;
[L1065]              __tmp__decimals_MyToken := decimals_MyToken;
[L1066]              __tmp___totalSupply_MyToken := _totalSupply_MyToken;
[L1067]              __tmp__balances_MyToken := balances_MyToken;
[L1068]              __tmp__allowed_MyToken := allowed_MyToken;
[L1069]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L2349]  COND TRUE   __tmp__DType[this] == MyToken
[L2350]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][from_s474], tokens_s474);
[L1922]  COND FALSE  !(!(b_s45 <= a_s45))
[L1926]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2350]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][from_s474], tokens_s474);
[L2351]  COND FALSE  !(revert)
[L2357]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_MyToken[this][from_s474];
[L2358]              __tmp__balances_MyToken[this][from_s474] := __var_6;
[L2359]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_MyToken[this][from_s474];
[L2360]  COND TRUE   __tmp__DType[this] == MyToken
[L2361]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L1922]  COND FALSE  !(!(b_s45 <= a_s45))
[L1926]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2361]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L2362]  COND FALSE  !(revert)
[L2368]              __tmp__sum_allowed1[from_s474] := __tmp__sum_allowed1[from_s474] - __tmp__allowed_MyToken[this][from_s474][msgsender_MSG];
[L2369]              __tmp__allowed_MyToken[this][from_s474][msgsender_MSG] := __var_7;
[L2370]              __tmp__sum_allowed1[from_s474] := __tmp__sum_allowed1[from_s474] + __tmp__allowed_MyToken[this][from_s474][msgsender_MSG];
[L2371]  COND TRUE   __tmp__DType[this] == MyToken
[L2372]  CALL        call __var_8 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][to_s474], tokens_s474);
[L1904]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1905]  COND FALSE  !(!(c_s23 >= a_s23))
[L2372]  RET         call __var_8 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][to_s474], tokens_s474);
[L2373]  COND FALSE  !(revert)
[L2379]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_MyToken[this][to_s474];
[L2380]              __tmp__balances_MyToken[this][to_s474] := __var_8;
[L2381]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_MyToken[this][to_s474];
[L2382]              success_s474 := true;
[L1069]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L1070]              assume revert || gas < 0;
[L4055]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L4134]  RET         call CorralChoice_MyToken(this);

[2020-11-25 01:55:55,731 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:55:55,731 INFO  L82        PathProgramCache]: Analyzing trace with hash 1717957729, now seen corresponding path program 1 times
[2020-11-25 01:55:55,732 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:55:55,740 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:55:55,765 INFO  L134       CoverageAnalysis]: Checked inductivity of 4 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 4 trivial. 0 not checked.
[2020-11-25 01:55:55,766 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:55:55,766 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 01:55:55,766 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:55:55,766 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 01:55:55,766 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 01:55:55,766 INFO  L87              Difference]: Start difference. First operand 2585 states and 2780 transitions. cyclomatic complexity: 201 Second operand 5 states.
[2020-11-25 01:55:55,981 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:55:55,981 INFO  L93              Difference]: Finished difference Result 3294 states and 3673 transitions.
[2020-11-25 01:55:55,982 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 01:55:55,982 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3294 states and 3673 transitions.
[2020-11-25 01:55:55,989 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 01:55:55,995 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3294 states to 2498 states and 2876 transitions.
[2020-11-25 01:55:55,995 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 787
[2020-11-25 01:55:55,995 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 787
[2020-11-25 01:55:55,995 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2498 states and 2876 transitions.
[2020-11-25 01:55:55,997 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:55:55,997 INFO  L728         BuchiCegarLoop]: Abstraction has 2498 states and 2876 transitions.
[2020-11-25 01:55:55,999 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2498 states and 2876 transitions.
[2020-11-25 01:55:56,011 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2498 to 1766.
[2020-11-25 01:55:56,011 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1766 states.
[2020-11-25 01:55:56,012 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1766 states to 1766 states and 1907 transitions.
[2020-11-25 01:55:56,013 INFO  L751         BuchiCegarLoop]: Abstraction has 1766 states and 1907 transitions.
[2020-11-25 01:55:56,013 INFO  L631         BuchiCegarLoop]: Abstraction has 1766 states and 1907 transitions.
[2020-11-25 01:55:56,013 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 01:55:56,013 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1766 states and 1907 transitions.
[2020-11-25 01:55:56,015 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:55:56,015 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:55:56,015 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:55:56,016 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:55:56,016 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_MyToken0 := false;
[L3]                 call_transferFrom_MyToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4124]              assume null == 0;
[L4125]  CALL        call this := FreshRefGenerator__success();
[L1864]              havoc newRef;
[L1865]              assume Alloc[newRef] == false;
[L1866]              Alloc[newRef] := true;
[L1867]              assume newRef != null;
[L4125]  RET         call this := FreshRefGenerator__success();
[L4126]              assume now >= 0;
[L4127]              assume DType[this] == MyToken;
[L4128]              assume msgvalue_MSG == 0;
[L4129]              gas := gas - 53000;
[L4130]  CALL        call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2218]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2000]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1985]              assume msgsender_MSG != null;
[L1986]              Balance[this] := 0;
[L2000]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2001]  COND FALSE  !(revert)
[L2218]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2219]  COND FALSE  !(revert)
[L2222]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2070]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2052]              assume msgsender_MSG != null;
[L2053]              Balance[this] := 0;
[L2054]              owner_Owned[this] := null;
[L2055]              newOwner_Owned[this] := null;
[L2057]              owner_Owned[this] := msgsender_MSG;
[L2070]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2071]  COND FALSE  !(revert)
[L2222]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2223]  COND FALSE  !(revert)
[L2226]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]              assume msgsender_MSG != null;
[L1882]              Balance[this] := 0;
[L1896]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1897]  COND FALSE  !(revert)
[L2226]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2227]  COND FALSE  !(revert)
[L2230]  CALL        call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2172]              assume msgsender_MSG != null;
[L2173]              Balance[this] := 0;
[L2174]              symbol_MyToken[this] := -1251229519;
[L2175]              name_MyToken[this] := -1251229519;
[L2176]              decimals_MyToken[this] := 0;
[L2177]              _totalSupply_MyToken[this] := 0;
[L2178]              balances_MyToken[this] := zeroRefintArr();
[L2179]              sum_balances0[this] := 0;
[L2180]              allowed_MyToken[this] := zeroRefRefintArr();
[L2181]              sum_allowed1[this] := 0;
[L2183]              name_MyToken[this] := tokenName_s318;
[L2184]              symbol_MyToken[this] := tokenSymbol_s318;
[L2185]              decimals_MyToken[this] := tokenDecimals_s318;
[L2186]              __var_2 := tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2187]              _totalSupply_MyToken[this] := nonlinearMul(initialSupply_s318, nonlinearPow(10, tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2188]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][msgsender_MSG];
[L2189]              balances_MyToken[this][msgsender_MSG] := _totalSupply_MyToken[this];
[L2190]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][msgsender_MSG];
[L2191]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2230]  RET         call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2231]  COND FALSE  !(revert)
[L794]   RET         call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L795]               assume !revert && gas >= 0;
[L4130]  RET         call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L4131]              assume !revert && gas >= 0;
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND FALSE  !(choice == 12)
[L4043]  COND TRUE   choice == 11
[L4044]              gas := gas - 21000;
[L4045]  COND TRUE   gas >= 0
[L4046]              assume tokens_s415 >= 0 && tokens_s415 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4047]              assume msgvalue_MSG == 0;
[L4048]  CALL        call success_s415 := approve~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L989]               havoc __exception;
[L990]               revert := false;
[L991]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s415 := approve~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L2336]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_MyToken[this][msgsender_MSG][spender_s415];
[L2337]              allowed_MyToken[this][msgsender_MSG][spender_s415] := tokens_s415;
[L2338]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_MyToken[this][msgsender_MSG][spender_s415];
[L2339]              assert { :EventEmitted "Approval_MyToken" } true;
[L2340]              success_s415 := true;
[L1014]  RET         call success_s415 := approve~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L1015]              assume !revert && gas >= 0;
[L4048]  RET         call success_s415 := approve~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L4134]  RET         call CorralChoice_MyToken(this);
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND FALSE  !(choice == 12)
[L4043]  COND FALSE  !(choice == 11)
[L4050]  COND TRUE   choice == 10
[L4051]              gas := gas - 21000;
[L4052]  COND TRUE   gas >= 0
[L4053]              assume tokens_s474 >= 0 && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4054]              assume msgvalue_MSG == 0;
[L4055]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s474 || p2 != msgsender_MSG) && from_s474 == to_s474) && tokens_s474 <= balances_MyToken[this][from_s474]) && tokens_s474 <= allowed_MyToken[this][from_s474][msgsender_MSG]) && tokens_s474 >= 0) && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][to_s474] >= 0) && balances_MyToken[this][to_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][from_s474] >= 0) && balances_MyToken[this][from_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_MyToken[this][from_s474][msgsender_MSG] >= 0) && allowed_MyToken[this][from_s474][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_MyToken0 := true;
[L3]                 call_transferFrom_MyToken0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND TRUE   __exception
[L1050]              __tmp__Balance := Balance;
[L1051]              __tmp__DType := DType;
[L1052]              __tmp__Alloc := Alloc;
[L1053]              __tmp__balance_ADDR := balance_ADDR;
[L1054]              __tmp__M_Ref_int := M_Ref_int;
[L1055]              __tmp__sum_balances0 := sum_balances0;
[L1056]              __tmp__alloc_allowed_MyToken_lvl0 := alloc_allowed_MyToken_lvl0;
[L1057]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1058]              __tmp__sum_allowed1 := sum_allowed1;
[L1059]              __tmp__Length := Length;
[L1060]              __tmp__now := now;
[L1061]              __tmp__owner_Owned := owner_Owned;
[L1062]              __tmp__newOwner_Owned := newOwner_Owned;
[L1063]              __tmp__symbol_MyToken := symbol_MyToken;
[L1064]              __tmp__name_MyToken := name_MyToken;
[L1065]              __tmp__decimals_MyToken := decimals_MyToken;
[L1066]              __tmp___totalSupply_MyToken := _totalSupply_MyToken;
[L1067]              __tmp__balances_MyToken := balances_MyToken;
[L1068]              __tmp__allowed_MyToken := allowed_MyToken;
[L1069]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L2349]  COND TRUE   __tmp__DType[this] == MyToken
[L2350]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][from_s474], tokens_s474);
[L1922]  COND TRUE   !(b_s45 <= a_s45)
[L1923]              revert := true;
[L2350]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][from_s474], tokens_s474);
[L2351]  COND TRUE   revert
[L1069]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L1070]              assume revert || gas < 0;
[L4055]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L4134]  RET         call CorralChoice_MyToken(this);

Loop:
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND TRUE   choice == 19
[L3987]              gas := gas - 21000;
[L3988]  COND FALSE  !(gas >= 0)
[L4134]  RET         call CorralChoice_MyToken(this);

[2020-11-25 01:55:56,019 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:55:56,019 INFO  L82        PathProgramCache]: Analyzing trace with hash 1577570942, now seen corresponding path program 1 times
[2020-11-25 01:55:56,020 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:55:56,028 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:55:56,077 INFO  L134       CoverageAnalysis]: Checked inductivity of 70 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 70 trivial. 0 not checked.
[2020-11-25 01:55:56,077 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:55:56,077 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 01:55:56,078 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:55:56,078 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 01:55:56,078 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 01:55:56,078 INFO  L87              Difference]: Start difference. First operand 1766 states and 1907 transitions. cyclomatic complexity: 145 Second operand 7 states.
[2020-11-25 01:55:56,416 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:55:56,416 INFO  L93              Difference]: Finished difference Result 1828 states and 1993 transitions.
[2020-11-25 01:55:56,417 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 01:55:56,417 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1828 states and 1993 transitions.
[2020-11-25 01:55:56,420 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:55:56,424 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1828 states to 1828 states and 1993 transitions.
[2020-11-25 01:55:56,424 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 636
[2020-11-25 01:55:56,425 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 636
[2020-11-25 01:55:56,425 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1828 states and 1993 transitions.
[2020-11-25 01:55:56,427 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:55:56,427 INFO  L728         BuchiCegarLoop]: Abstraction has 1828 states and 1993 transitions.
[2020-11-25 01:55:56,428 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1828 states and 1993 transitions.
[2020-11-25 01:55:56,436 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1828 to 1770.
[2020-11-25 01:55:56,436 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1770 states.
[2020-11-25 01:55:56,437 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1770 states to 1770 states and 1911 transitions.
[2020-11-25 01:55:56,437 INFO  L751         BuchiCegarLoop]: Abstraction has 1770 states and 1911 transitions.
[2020-11-25 01:55:56,437 INFO  L631         BuchiCegarLoop]: Abstraction has 1770 states and 1911 transitions.
[2020-11-25 01:55:56,438 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 01:55:56,438 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1770 states and 1911 transitions.
[2020-11-25 01:55:56,440 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:55:56,440 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:55:56,440 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:55:56,441 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:55:56,441 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_MyToken0 := false;
[L3]                 call_transferFrom_MyToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4124]              assume null == 0;
[L4125]  CALL        call this := FreshRefGenerator__success();
[L1864]              havoc newRef;
[L1865]              assume Alloc[newRef] == false;
[L1866]              Alloc[newRef] := true;
[L1867]              assume newRef != null;
[L4125]  RET         call this := FreshRefGenerator__success();
[L4126]              assume now >= 0;
[L4127]              assume DType[this] == MyToken;
[L4128]              assume msgvalue_MSG == 0;
[L4129]              gas := gas - 53000;
[L4130]  CALL        call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2218]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2000]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1985]              assume msgsender_MSG != null;
[L1986]              Balance[this] := 0;
[L2000]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2001]  COND FALSE  !(revert)
[L2218]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2219]  COND FALSE  !(revert)
[L2222]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2070]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2052]              assume msgsender_MSG != null;
[L2053]              Balance[this] := 0;
[L2054]              owner_Owned[this] := null;
[L2055]              newOwner_Owned[this] := null;
[L2057]              owner_Owned[this] := msgsender_MSG;
[L2070]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2071]  COND FALSE  !(revert)
[L2222]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2223]  COND FALSE  !(revert)
[L2226]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]              assume msgsender_MSG != null;
[L1882]              Balance[this] := 0;
[L1896]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1897]  COND FALSE  !(revert)
[L2226]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2227]  COND FALSE  !(revert)
[L2230]  CALL        call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2172]              assume msgsender_MSG != null;
[L2173]              Balance[this] := 0;
[L2174]              symbol_MyToken[this] := -1251229519;
[L2175]              name_MyToken[this] := -1251229519;
[L2176]              decimals_MyToken[this] := 0;
[L2177]              _totalSupply_MyToken[this] := 0;
[L2178]              balances_MyToken[this] := zeroRefintArr();
[L2179]              sum_balances0[this] := 0;
[L2180]              allowed_MyToken[this] := zeroRefRefintArr();
[L2181]              sum_allowed1[this] := 0;
[L2183]              name_MyToken[this] := tokenName_s318;
[L2184]              symbol_MyToken[this] := tokenSymbol_s318;
[L2185]              decimals_MyToken[this] := tokenDecimals_s318;
[L2186]              __var_2 := tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2187]              _totalSupply_MyToken[this] := nonlinearMul(initialSupply_s318, nonlinearPow(10, tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2188]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][msgsender_MSG];
[L2189]              balances_MyToken[this][msgsender_MSG] := _totalSupply_MyToken[this];
[L2190]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][msgsender_MSG];
[L2191]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2230]  RET         call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2231]  COND FALSE  !(revert)
[L794]   RET         call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L795]               assume !revert && gas >= 0;
[L4130]  RET         call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L4131]              assume !revert && gas >= 0;
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND FALSE  !(choice == 12)
[L4043]  COND TRUE   choice == 11
[L4044]              gas := gas - 21000;
[L4045]  COND TRUE   gas >= 0
[L4046]              assume tokens_s415 >= 0 && tokens_s415 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4047]              assume msgvalue_MSG == 0;
[L4048]  CALL        call success_s415 := approve~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L989]               havoc __exception;
[L990]               revert := false;
[L991]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s415 := approve~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L2336]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_MyToken[this][msgsender_MSG][spender_s415];
[L2337]              allowed_MyToken[this][msgsender_MSG][spender_s415] := tokens_s415;
[L2338]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_MyToken[this][msgsender_MSG][spender_s415];
[L2339]              assert { :EventEmitted "Approval_MyToken" } true;
[L2340]              success_s415 := true;
[L1014]  RET         call success_s415 := approve~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L1015]              assume !revert && gas >= 0;
[L4048]  RET         call success_s415 := approve~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L4134]  RET         call CorralChoice_MyToken(this);
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND FALSE  !(choice == 12)
[L4043]  COND FALSE  !(choice == 11)
[L4050]  COND TRUE   choice == 10
[L4051]              gas := gas - 21000;
[L4052]  COND TRUE   gas >= 0
[L4053]              assume tokens_s474 >= 0 && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4054]              assume msgvalue_MSG == 0;
[L4055]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s474 || p2 != msgsender_MSG) && from_s474 == to_s474) && tokens_s474 <= balances_MyToken[this][from_s474]) && tokens_s474 <= allowed_MyToken[this][from_s474][msgsender_MSG]) && tokens_s474 >= 0) && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][to_s474] >= 0) && balances_MyToken[this][to_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][from_s474] >= 0) && balances_MyToken[this][from_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_MyToken[this][from_s474][msgsender_MSG] >= 0) && allowed_MyToken[this][from_s474][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_MyToken0 := true;
[L3]                 call_transferFrom_MyToken0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L2391]  COND TRUE   DType[this] == MyToken
[L2392]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][from_s474], tokens_s474);
[L1931]  COND FALSE  !(!(b_s45 <= a_s45))
[L1935]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2392]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][from_s474], tokens_s474);
[L2393]  COND FALSE  !(revert)
[L2399]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][from_s474];
[L2400]              balances_MyToken[this][from_s474] := __var_6;
[L2401]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][from_s474];
[L2402]  COND TRUE   DType[this] == MyToken
[L2403]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L1931]  COND FALSE  !(!(b_s45 <= a_s45))
[L1935]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2403]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L2404]  COND FALSE  !(revert)
[L2410]              sum_allowed1[from_s474] := sum_allowed1[from_s474] - allowed_MyToken[this][from_s474][msgsender_MSG];
[L2411]              allowed_MyToken[this][from_s474][msgsender_MSG] := __var_7;
[L2412]              sum_allowed1[from_s474] := sum_allowed1[from_s474] + allowed_MyToken[this][from_s474][msgsender_MSG];
[L2413]  COND TRUE   DType[this] == MyToken
[L2414]  CALL        call __var_8 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s474], tokens_s474);
[L1913]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1914]  COND FALSE  !(!(c_s23 >= a_s23))
[L2414]  RET         call __var_8 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s474], tokens_s474);
[L2415]  COND FALSE  !(revert)
[L2421]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][to_s474];
[L2422]              balances_MyToken[this][to_s474] := __var_8;
[L2423]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][to_s474];
[L2424]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2425]              success_s474 := true;
[L1072]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s474 == true && allowed_MyToken[this][from_s474][msgsender_MSG] == old(allowed_MyToken[this][from_s474][msgsender_MSG]) - tokens_s474) && _totalSupply_MyToken[this] == old(_totalSupply_MyToken[this])) && balances_MyToken[this] == old(balances_MyToken[this])) && allowed_MyToken[this][p1][p2] == old(allowed_MyToken[this][p1][p2])) && symbol_MyToken[this] == old(symbol_MyToken[this])) && name_MyToken[this] == old(name_MyToken[this])) && decimals_MyToken[this] == old(decimals_MyToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4055]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L4134]  RET         call CorralChoice_MyToken(this);

Loop:
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND FALSE  !(choice == 12)
[L4043]  COND FALSE  !(choice == 11)
[L4050]  COND TRUE   choice == 10
[L4051]              gas := gas - 21000;
[L4052]  COND TRUE   gas >= 0
[L4053]              assume tokens_s474 >= 0 && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4054]              assume msgvalue_MSG == 0;
[L4055]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s474 || p2 != msgsender_MSG) && from_s474 == to_s474) && tokens_s474 <= balances_MyToken[this][from_s474]) && tokens_s474 <= allowed_MyToken[this][from_s474][msgsender_MSG]) && tokens_s474 >= 0) && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][to_s474] >= 0) && balances_MyToken[this][to_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][from_s474] >= 0) && balances_MyToken[this][from_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_MyToken[this][from_s474][msgsender_MSG] >= 0) && allowed_MyToken[this][from_s474][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_MyToken0 := true;
[L3]                 call_transferFrom_MyToken0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND TRUE   __exception
[L1050]              __tmp__Balance := Balance;
[L1051]              __tmp__DType := DType;
[L1052]              __tmp__Alloc := Alloc;
[L1053]              __tmp__balance_ADDR := balance_ADDR;
[L1054]              __tmp__M_Ref_int := M_Ref_int;
[L1055]              __tmp__sum_balances0 := sum_balances0;
[L1056]              __tmp__alloc_allowed_MyToken_lvl0 := alloc_allowed_MyToken_lvl0;
[L1057]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1058]              __tmp__sum_allowed1 := sum_allowed1;
[L1059]              __tmp__Length := Length;
[L1060]              __tmp__now := now;
[L1061]              __tmp__owner_Owned := owner_Owned;
[L1062]              __tmp__newOwner_Owned := newOwner_Owned;
[L1063]              __tmp__symbol_MyToken := symbol_MyToken;
[L1064]              __tmp__name_MyToken := name_MyToken;
[L1065]              __tmp__decimals_MyToken := decimals_MyToken;
[L1066]              __tmp___totalSupply_MyToken := _totalSupply_MyToken;
[L1067]              __tmp__balances_MyToken := balances_MyToken;
[L1068]              __tmp__allowed_MyToken := allowed_MyToken;
[L1069]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L2349]  COND TRUE   __tmp__DType[this] == MyToken
[L2350]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][from_s474], tokens_s474);
[L1922]  COND FALSE  !(!(b_s45 <= a_s45))
[L1926]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2350]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][from_s474], tokens_s474);
[L2351]  COND FALSE  !(revert)
[L2357]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_MyToken[this][from_s474];
[L2358]              __tmp__balances_MyToken[this][from_s474] := __var_6;
[L2359]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_MyToken[this][from_s474];
[L2360]  COND TRUE   __tmp__DType[this] == MyToken
[L2361]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L1922]  COND TRUE   !(b_s45 <= a_s45)
[L1923]              revert := true;
[L2361]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L2362]  COND TRUE   revert
[L1069]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L1070]              assume revert || gas < 0;
[L4055]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L4134]  RET         call CorralChoice_MyToken(this);

[2020-11-25 01:55:56,444 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:55:56,444 INFO  L82        PathProgramCache]: Analyzing trace with hash 974519884, now seen corresponding path program 1 times
[2020-11-25 01:55:56,445 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:55:56,485 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:55:56,951 INFO  L134       CoverageAnalysis]: Checked inductivity of 74 backedges. 0 proven. 3 refuted. 0 times theorem prover too weak. 71 trivial. 0 not checked.
[2020-11-25 01:55:56,951 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:55:56,951 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [25] total 25
[2020-11-25 01:55:56,951 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:55:56,951 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 26 interpolants.
[2020-11-25 01:55:56,952 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=59, Invalid=591, Unknown=0, NotChecked=0, Total=650
[2020-11-25 01:55:56,952 INFO  L87              Difference]: Start difference. First operand 1770 states and 1911 transitions. cyclomatic complexity: 145 Second operand 26 states.
[2020-11-25 01:56:00,014 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:56:00,014 INFO  L93              Difference]: Finished difference Result 1789 states and 1942 transitions.
[2020-11-25 01:56:00,014 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-11-25 01:56:00,014 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1789 states and 1942 transitions.
[2020-11-25 01:56:00,017 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:56:00,021 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1789 states to 1789 states and 1942 transitions.
[2020-11-25 01:56:00,021 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 618
[2020-11-25 01:56:00,021 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 618
[2020-11-25 01:56:00,021 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1789 states and 1942 transitions.
[2020-11-25 01:56:00,023 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:56:00,023 INFO  L728         BuchiCegarLoop]: Abstraction has 1789 states and 1942 transitions.
[2020-11-25 01:56:00,025 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1789 states and 1942 transitions.
[2020-11-25 01:56:00,032 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1789 to 1784.
[2020-11-25 01:56:00,032 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1784 states.
[2020-11-25 01:56:00,034 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1784 states to 1784 states and 1936 transitions.
[2020-11-25 01:56:00,034 INFO  L751         BuchiCegarLoop]: Abstraction has 1784 states and 1936 transitions.
[2020-11-25 01:56:00,034 INFO  L631         BuchiCegarLoop]: Abstraction has 1784 states and 1936 transitions.
[2020-11-25 01:56:00,034 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 01:56:00,034 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1784 states and 1936 transitions.
[2020-11-25 01:56:00,036 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:56:00,036 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:56:00,036 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:56:00,037 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:56:00,037 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_MyToken0 := false;
[L3]                 call_transferFrom_MyToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4124]              assume null == 0;
[L4125]  CALL        call this := FreshRefGenerator__success();
[L1864]              havoc newRef;
[L1865]              assume Alloc[newRef] == false;
[L1866]              Alloc[newRef] := true;
[L1867]              assume newRef != null;
[L4125]  RET         call this := FreshRefGenerator__success();
[L4126]              assume now >= 0;
[L4127]              assume DType[this] == MyToken;
[L4128]              assume msgvalue_MSG == 0;
[L4129]              gas := gas - 53000;
[L4130]  CALL        call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2218]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2000]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1985]              assume msgsender_MSG != null;
[L1986]              Balance[this] := 0;
[L2000]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2001]  COND FALSE  !(revert)
[L2218]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2219]  COND FALSE  !(revert)
[L2222]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2070]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2052]              assume msgsender_MSG != null;
[L2053]              Balance[this] := 0;
[L2054]              owner_Owned[this] := null;
[L2055]              newOwner_Owned[this] := null;
[L2057]              owner_Owned[this] := msgsender_MSG;
[L2070]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2071]  COND FALSE  !(revert)
[L2222]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2223]  COND FALSE  !(revert)
[L2226]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]              assume msgsender_MSG != null;
[L1882]              Balance[this] := 0;
[L1896]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1897]  COND FALSE  !(revert)
[L2226]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2227]  COND FALSE  !(revert)
[L2230]  CALL        call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2172]              assume msgsender_MSG != null;
[L2173]              Balance[this] := 0;
[L2174]              symbol_MyToken[this] := -1251229519;
[L2175]              name_MyToken[this] := -1251229519;
[L2176]              decimals_MyToken[this] := 0;
[L2177]              _totalSupply_MyToken[this] := 0;
[L2178]              balances_MyToken[this] := zeroRefintArr();
[L2179]              sum_balances0[this] := 0;
[L2180]              allowed_MyToken[this] := zeroRefRefintArr();
[L2181]              sum_allowed1[this] := 0;
[L2183]              name_MyToken[this] := tokenName_s318;
[L2184]              symbol_MyToken[this] := tokenSymbol_s318;
[L2185]              decimals_MyToken[this] := tokenDecimals_s318;
[L2186]              __var_2 := tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2187]              _totalSupply_MyToken[this] := nonlinearMul(initialSupply_s318, nonlinearPow(10, tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2188]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][msgsender_MSG];
[L2189]              balances_MyToken[this][msgsender_MSG] := _totalSupply_MyToken[this];
[L2190]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][msgsender_MSG];
[L2191]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2230]  RET         call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2231]  COND FALSE  !(revert)
[L794]   RET         call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L795]               assume !revert && gas >= 0;
[L4130]  RET         call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L4131]              assume !revert && gas >= 0;
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND FALSE  !(choice == 12)
[L4043]  COND TRUE   choice == 11
[L4044]              gas := gas - 21000;
[L4045]  COND TRUE   gas >= 0
[L4046]              assume tokens_s415 >= 0 && tokens_s415 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4047]              assume msgvalue_MSG == 0;
[L4048]  CALL        call success_s415 := approve~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L989]               havoc __exception;
[L990]               revert := false;
[L991]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s415 := approve~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L2336]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_MyToken[this][msgsender_MSG][spender_s415];
[L2337]              allowed_MyToken[this][msgsender_MSG][spender_s415] := tokens_s415;
[L2338]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_MyToken[this][msgsender_MSG][spender_s415];
[L2339]              assert { :EventEmitted "Approval_MyToken" } true;
[L2340]              success_s415 := true;
[L1014]  RET         call success_s415 := approve~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L1015]              assume !revert && gas >= 0;
[L4048]  RET         call success_s415 := approve~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L4134]  RET         call CorralChoice_MyToken(this);
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND FALSE  !(choice == 12)
[L4043]  COND FALSE  !(choice == 11)
[L4050]  COND TRUE   choice == 10
[L4051]              gas := gas - 21000;
[L4052]  COND TRUE   gas >= 0
[L4053]              assume tokens_s474 >= 0 && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4054]              assume msgvalue_MSG == 0;
[L4055]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s474 || p2 != msgsender_MSG) && from_s474 == to_s474) && tokens_s474 <= balances_MyToken[this][from_s474]) && tokens_s474 <= allowed_MyToken[this][from_s474][msgsender_MSG]) && tokens_s474 >= 0) && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][to_s474] >= 0) && balances_MyToken[this][to_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][from_s474] >= 0) && balances_MyToken[this][from_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_MyToken[this][from_s474][msgsender_MSG] >= 0) && allowed_MyToken[this][from_s474][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_MyToken0 := true;
[L3]                 call_transferFrom_MyToken0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND TRUE   __exception
[L1050]              __tmp__Balance := Balance;
[L1051]              __tmp__DType := DType;
[L1052]              __tmp__Alloc := Alloc;
[L1053]              __tmp__balance_ADDR := balance_ADDR;
[L1054]              __tmp__M_Ref_int := M_Ref_int;
[L1055]              __tmp__sum_balances0 := sum_balances0;
[L1056]              __tmp__alloc_allowed_MyToken_lvl0 := alloc_allowed_MyToken_lvl0;
[L1057]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1058]              __tmp__sum_allowed1 := sum_allowed1;
[L1059]              __tmp__Length := Length;
[L1060]              __tmp__now := now;
[L1061]              __tmp__owner_Owned := owner_Owned;
[L1062]              __tmp__newOwner_Owned := newOwner_Owned;
[L1063]              __tmp__symbol_MyToken := symbol_MyToken;
[L1064]              __tmp__name_MyToken := name_MyToken;
[L1065]              __tmp__decimals_MyToken := decimals_MyToken;
[L1066]              __tmp___totalSupply_MyToken := _totalSupply_MyToken;
[L1067]              __tmp__balances_MyToken := balances_MyToken;
[L1068]              __tmp__allowed_MyToken := allowed_MyToken;
[L1069]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L2349]  COND TRUE   __tmp__DType[this] == MyToken
[L2350]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][from_s474], tokens_s474);
[L1922]  COND FALSE  !(!(b_s45 <= a_s45))
[L1926]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2350]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][from_s474], tokens_s474);
[L2351]  COND FALSE  !(revert)
[L2357]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_MyToken[this][from_s474];
[L2358]              __tmp__balances_MyToken[this][from_s474] := __var_6;
[L2359]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_MyToken[this][from_s474];
[L2360]  COND TRUE   __tmp__DType[this] == MyToken
[L2361]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L1922]  COND TRUE   !(b_s45 <= a_s45)
[L1923]              revert := true;
[L2361]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L2362]  COND TRUE   revert
[L1069]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L1070]              assume revert || gas < 0;
[L4055]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L4134]  RET         call CorralChoice_MyToken(this);

Loop:
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND FALSE  !(choice == 12)
[L4043]  COND FALSE  !(choice == 11)
[L4050]  COND TRUE   choice == 10
[L4051]              gas := gas - 21000;
[L4052]  COND TRUE   gas >= 0
[L4053]              assume tokens_s474 >= 0 && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4054]              assume msgvalue_MSG == 0;
[L4055]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s474 || p2 != msgsender_MSG) && from_s474 == to_s474) && tokens_s474 <= balances_MyToken[this][from_s474]) && tokens_s474 <= allowed_MyToken[this][from_s474][msgsender_MSG]) && tokens_s474 >= 0) && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][to_s474] >= 0) && balances_MyToken[this][to_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][from_s474] >= 0) && balances_MyToken[this][from_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_MyToken[this][from_s474][msgsender_MSG] >= 0) && allowed_MyToken[this][from_s474][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_MyToken0 := true;
[L3]                 call_transferFrom_MyToken0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND TRUE   __exception
[L1050]              __tmp__Balance := Balance;
[L1051]              __tmp__DType := DType;
[L1052]              __tmp__Alloc := Alloc;
[L1053]              __tmp__balance_ADDR := balance_ADDR;
[L1054]              __tmp__M_Ref_int := M_Ref_int;
[L1055]              __tmp__sum_balances0 := sum_balances0;
[L1056]              __tmp__alloc_allowed_MyToken_lvl0 := alloc_allowed_MyToken_lvl0;
[L1057]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1058]              __tmp__sum_allowed1 := sum_allowed1;
[L1059]              __tmp__Length := Length;
[L1060]              __tmp__now := now;
[L1061]              __tmp__owner_Owned := owner_Owned;
[L1062]              __tmp__newOwner_Owned := newOwner_Owned;
[L1063]              __tmp__symbol_MyToken := symbol_MyToken;
[L1064]              __tmp__name_MyToken := name_MyToken;
[L1065]              __tmp__decimals_MyToken := decimals_MyToken;
[L1066]              __tmp___totalSupply_MyToken := _totalSupply_MyToken;
[L1067]              __tmp__balances_MyToken := balances_MyToken;
[L1068]              __tmp__allowed_MyToken := allowed_MyToken;
[L1069]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L2349]  COND TRUE   __tmp__DType[this] == MyToken
[L2350]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][from_s474], tokens_s474);
[L1922]  COND FALSE  !(!(b_s45 <= a_s45))
[L1926]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2350]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][from_s474], tokens_s474);
[L2351]  COND FALSE  !(revert)
[L2357]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_MyToken[this][from_s474];
[L2358]              __tmp__balances_MyToken[this][from_s474] := __var_6;
[L2359]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_MyToken[this][from_s474];
[L2360]  COND TRUE   __tmp__DType[this] == MyToken
[L2361]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L1922]  COND TRUE   !(b_s45 <= a_s45)
[L1923]              revert := true;
[L2361]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L2362]  COND TRUE   revert
[L1069]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L1070]              assume revert || gas < 0;
[L4055]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L4134]  RET         call CorralChoice_MyToken(this);

[2020-11-25 01:56:00,040 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:56:00,041 INFO  L82        PathProgramCache]: Analyzing trace with hash 31842774, now seen corresponding path program 1 times
[2020-11-25 01:56:00,041 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:56:00,050 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:56:00,095 INFO  L134       CoverageAnalysis]: Checked inductivity of 73 backedges. 2 proven. 0 refuted. 0 times theorem prover too weak. 71 trivial. 0 not checked.
[2020-11-25 01:56:00,095 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:56:00,095 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 01:56:00,095 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:56:00,095 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 01:56:00,096 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 01:56:00,096 INFO  L87              Difference]: Start difference. First operand 1784 states and 1936 transitions. cyclomatic complexity: 158 Second operand 7 states.
[2020-11-25 01:56:00,374 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:56:00,375 INFO  L93              Difference]: Finished difference Result 1838 states and 2027 transitions.
[2020-11-25 01:56:00,375 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 01:56:00,375 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1838 states and 2027 transitions.
[2020-11-25 01:56:00,378 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 01:56:00,383 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1838 states to 1838 states and 2027 transitions.
[2020-11-25 01:56:00,383 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 640
[2020-11-25 01:56:00,383 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 640
[2020-11-25 01:56:00,383 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1838 states and 2027 transitions.
[2020-11-25 01:56:00,385 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:56:00,385 INFO  L728         BuchiCegarLoop]: Abstraction has 1838 states and 2027 transitions.
[2020-11-25 01:56:00,386 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1838 states and 2027 transitions.
[2020-11-25 01:56:00,395 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1838 to 1784.
[2020-11-25 01:56:00,395 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1784 states.
[2020-11-25 01:56:00,397 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1784 states to 1784 states and 1936 transitions.
[2020-11-25 01:56:00,397 INFO  L751         BuchiCegarLoop]: Abstraction has 1784 states and 1936 transitions.
[2020-11-25 01:56:00,397 INFO  L631         BuchiCegarLoop]: Abstraction has 1784 states and 1936 transitions.
[2020-11-25 01:56:00,397 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 01:56:00,397 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1784 states and 1936 transitions.
[2020-11-25 01:56:00,399 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:56:00,399 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:56:00,399 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:56:00,399 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:56:00,400 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_MyToken0 := false;
[L3]                 call_transferFrom_MyToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4124]              assume null == 0;
[L4125]  CALL        call this := FreshRefGenerator__success();
[L1864]              havoc newRef;
[L1865]              assume Alloc[newRef] == false;
[L1866]              Alloc[newRef] := true;
[L1867]              assume newRef != null;
[L4125]  RET         call this := FreshRefGenerator__success();
[L4126]              assume now >= 0;
[L4127]              assume DType[this] == MyToken;
[L4128]              assume msgvalue_MSG == 0;
[L4129]              gas := gas - 53000;
[L4130]  CALL        call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2218]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2000]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1985]              assume msgsender_MSG != null;
[L1986]              Balance[this] := 0;
[L2000]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2001]  COND FALSE  !(revert)
[L2218]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2219]  COND FALSE  !(revert)
[L2222]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2070]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2052]              assume msgsender_MSG != null;
[L2053]              Balance[this] := 0;
[L2054]              owner_Owned[this] := null;
[L2055]              newOwner_Owned[this] := null;
[L2057]              owner_Owned[this] := msgsender_MSG;
[L2070]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2071]  COND FALSE  !(revert)
[L2222]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2223]  COND FALSE  !(revert)
[L2226]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]              assume msgsender_MSG != null;
[L1882]              Balance[this] := 0;
[L1896]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1897]  COND FALSE  !(revert)
[L2226]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2227]  COND FALSE  !(revert)
[L2230]  CALL        call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2172]              assume msgsender_MSG != null;
[L2173]              Balance[this] := 0;
[L2174]              symbol_MyToken[this] := -1251229519;
[L2175]              name_MyToken[this] := -1251229519;
[L2176]              decimals_MyToken[this] := 0;
[L2177]              _totalSupply_MyToken[this] := 0;
[L2178]              balances_MyToken[this] := zeroRefintArr();
[L2179]              sum_balances0[this] := 0;
[L2180]              allowed_MyToken[this] := zeroRefRefintArr();
[L2181]              sum_allowed1[this] := 0;
[L2183]              name_MyToken[this] := tokenName_s318;
[L2184]              symbol_MyToken[this] := tokenSymbol_s318;
[L2185]              decimals_MyToken[this] := tokenDecimals_s318;
[L2186]              __var_2 := tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2187]              _totalSupply_MyToken[this] := nonlinearMul(initialSupply_s318, nonlinearPow(10, tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2188]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][msgsender_MSG];
[L2189]              balances_MyToken[this][msgsender_MSG] := _totalSupply_MyToken[this];
[L2190]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][msgsender_MSG];
[L2191]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2230]  RET         call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2231]  COND FALSE  !(revert)
[L794]   RET         call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L795]               assume !revert && gas >= 0;
[L4130]  RET         call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L4131]              assume !revert && gas >= 0;
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND FALSE  !(choice == 12)
[L4043]  COND TRUE   choice == 11
[L4044]              gas := gas - 21000;
[L4045]  COND TRUE   gas >= 0
[L4046]              assume tokens_s415 >= 0 && tokens_s415 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4047]              assume msgvalue_MSG == 0;
[L4048]  CALL        call success_s415 := approve~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L989]               havoc __exception;
[L990]               revert := false;
[L991]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s415 := approve~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L2336]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_MyToken[this][msgsender_MSG][spender_s415];
[L2337]              allowed_MyToken[this][msgsender_MSG][spender_s415] := tokens_s415;
[L2338]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_MyToken[this][msgsender_MSG][spender_s415];
[L2339]              assert { :EventEmitted "Approval_MyToken" } true;
[L2340]              success_s415 := true;
[L1014]  RET         call success_s415 := approve~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L1015]              assume !revert && gas >= 0;
[L4048]  RET         call success_s415 := approve~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L4134]  RET         call CorralChoice_MyToken(this);
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND FALSE  !(choice == 12)
[L4043]  COND FALSE  !(choice == 11)
[L4050]  COND TRUE   choice == 10
[L4051]              gas := gas - 21000;
[L4052]  COND TRUE   gas >= 0
[L4053]              assume tokens_s474 >= 0 && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4054]              assume msgvalue_MSG == 0;
[L4055]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s474 || p2 != msgsender_MSG) && from_s474 == to_s474) && tokens_s474 <= balances_MyToken[this][from_s474]) && tokens_s474 <= allowed_MyToken[this][from_s474][msgsender_MSG]) && tokens_s474 >= 0) && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][to_s474] >= 0) && balances_MyToken[this][to_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][from_s474] >= 0) && balances_MyToken[this][from_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_MyToken[this][from_s474][msgsender_MSG] >= 0) && allowed_MyToken[this][from_s474][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_MyToken0 := true;
[L3]                 call_transferFrom_MyToken0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND TRUE   __exception
[L1050]              __tmp__Balance := Balance;
[L1051]              __tmp__DType := DType;
[L1052]              __tmp__Alloc := Alloc;
[L1053]              __tmp__balance_ADDR := balance_ADDR;
[L1054]              __tmp__M_Ref_int := M_Ref_int;
[L1055]              __tmp__sum_balances0 := sum_balances0;
[L1056]              __tmp__alloc_allowed_MyToken_lvl0 := alloc_allowed_MyToken_lvl0;
[L1057]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1058]              __tmp__sum_allowed1 := sum_allowed1;
[L1059]              __tmp__Length := Length;
[L1060]              __tmp__now := now;
[L1061]              __tmp__owner_Owned := owner_Owned;
[L1062]              __tmp__newOwner_Owned := newOwner_Owned;
[L1063]              __tmp__symbol_MyToken := symbol_MyToken;
[L1064]              __tmp__name_MyToken := name_MyToken;
[L1065]              __tmp__decimals_MyToken := decimals_MyToken;
[L1066]              __tmp___totalSupply_MyToken := _totalSupply_MyToken;
[L1067]              __tmp__balances_MyToken := balances_MyToken;
[L1068]              __tmp__allowed_MyToken := allowed_MyToken;
[L1069]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L2349]  COND TRUE   __tmp__DType[this] == MyToken
[L2350]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][from_s474], tokens_s474);
[L1922]  COND FALSE  !(!(b_s45 <= a_s45))
[L1926]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2350]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][from_s474], tokens_s474);
[L2351]  COND FALSE  !(revert)
[L2357]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_MyToken[this][from_s474];
[L2358]              __tmp__balances_MyToken[this][from_s474] := __var_6;
[L2359]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_MyToken[this][from_s474];
[L2360]  COND TRUE   __tmp__DType[this] == MyToken
[L2361]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L1922]  COND FALSE  !(!(b_s45 <= a_s45))
[L1926]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2361]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L2362]  COND FALSE  !(revert)
[L2368]              __tmp__sum_allowed1[from_s474] := __tmp__sum_allowed1[from_s474] - __tmp__allowed_MyToken[this][from_s474][msgsender_MSG];
[L2369]              __tmp__allowed_MyToken[this][from_s474][msgsender_MSG] := __var_7;
[L2370]              __tmp__sum_allowed1[from_s474] := __tmp__sum_allowed1[from_s474] + __tmp__allowed_MyToken[this][from_s474][msgsender_MSG];
[L2371]  COND TRUE   __tmp__DType[this] == MyToken
[L2372]  CALL        call __var_8 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][to_s474], tokens_s474);
[L1904]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1905]  COND TRUE   !(c_s23 >= a_s23)
[L1906]              revert := true;
[L2372]  RET         call __var_8 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][to_s474], tokens_s474);
[L2373]  COND TRUE   revert
[L1069]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L1070]              assume revert || gas < 0;
[L4055]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L4134]  RET         call CorralChoice_MyToken(this);

Loop:
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND TRUE   choice == 19
[L3987]              gas := gas - 21000;
[L3988]  COND FALSE  !(gas >= 0)
[L4134]  RET         call CorralChoice_MyToken(this);

[2020-11-25 01:56:00,403 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:56:00,403 INFO  L82        PathProgramCache]: Analyzing trace with hash 986669817, now seen corresponding path program 1 times
[2020-11-25 01:56:00,403 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:56:00,415 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:56:00,545 INFO  L134       CoverageAnalysis]: Checked inductivity of 74 backedges. 0 proven. 3 refuted. 0 times theorem prover too weak. 71 trivial. 0 not checked.
[2020-11-25 01:56:00,546 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:56:00,546 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [21] total 21
[2020-11-25 01:56:00,546 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:56:00,546 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 22 interpolants.
[2020-11-25 01:56:00,546 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=48, Invalid=414, Unknown=0, NotChecked=0, Total=462
[2020-11-25 01:56:00,546 INFO  L87              Difference]: Start difference. First operand 1784 states and 1936 transitions. cyclomatic complexity: 158 Second operand 22 states.
[2020-11-25 01:56:02,495 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:56:02,495 INFO  L93              Difference]: Finished difference Result 1844 states and 2033 transitions.
[2020-11-25 01:56:02,495 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-11-25 01:56:02,495 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1844 states and 2033 transitions.
[2020-11-25 01:56:02,499 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:56:02,503 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1844 states to 1844 states and 2033 transitions.
[2020-11-25 01:56:02,503 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 642
[2020-11-25 01:56:02,503 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 642
[2020-11-25 01:56:02,503 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1844 states and 2033 transitions.
[2020-11-25 01:56:02,505 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:56:02,505 INFO  L728         BuchiCegarLoop]: Abstraction has 1844 states and 2033 transitions.
[2020-11-25 01:56:02,506 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1844 states and 2033 transitions.
[2020-11-25 01:56:02,515 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1844 to 1774.
[2020-11-25 01:56:02,515 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1774 states.
[2020-11-25 01:56:02,516 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1774 states to 1774 states and 1921 transitions.
[2020-11-25 01:56:02,516 INFO  L751         BuchiCegarLoop]: Abstraction has 1774 states and 1921 transitions.
[2020-11-25 01:56:02,516 INFO  L631         BuchiCegarLoop]: Abstraction has 1774 states and 1921 transitions.
[2020-11-25 01:56:02,516 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 01:56:02,517 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1774 states and 1921 transitions.
[2020-11-25 01:56:02,518 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:56:02,518 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:56:02,518 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:56:02,519 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:56:02,519 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_MyToken0 := false;
[L3]                 call_transferFrom_MyToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4124]              assume null == 0;
[L4125]  CALL        call this := FreshRefGenerator__success();
[L1864]              havoc newRef;
[L1865]              assume Alloc[newRef] == false;
[L1866]              Alloc[newRef] := true;
[L1867]              assume newRef != null;
[L4125]  RET         call this := FreshRefGenerator__success();
[L4126]              assume now >= 0;
[L4127]              assume DType[this] == MyToken;
[L4128]              assume msgvalue_MSG == 0;
[L4129]              gas := gas - 53000;
[L4130]  CALL        call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2218]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2000]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1985]              assume msgsender_MSG != null;
[L1986]              Balance[this] := 0;
[L2000]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2001]  COND FALSE  !(revert)
[L2218]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2219]  COND FALSE  !(revert)
[L2222]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2070]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2052]              assume msgsender_MSG != null;
[L2053]              Balance[this] := 0;
[L2054]              owner_Owned[this] := null;
[L2055]              newOwner_Owned[this] := null;
[L2057]              owner_Owned[this] := msgsender_MSG;
[L2070]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2071]  COND FALSE  !(revert)
[L2222]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2223]  COND FALSE  !(revert)
[L2226]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]              assume msgsender_MSG != null;
[L1882]              Balance[this] := 0;
[L1896]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1897]  COND FALSE  !(revert)
[L2226]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2227]  COND FALSE  !(revert)
[L2230]  CALL        call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2172]              assume msgsender_MSG != null;
[L2173]              Balance[this] := 0;
[L2174]              symbol_MyToken[this] := -1251229519;
[L2175]              name_MyToken[this] := -1251229519;
[L2176]              decimals_MyToken[this] := 0;
[L2177]              _totalSupply_MyToken[this] := 0;
[L2178]              balances_MyToken[this] := zeroRefintArr();
[L2179]              sum_balances0[this] := 0;
[L2180]              allowed_MyToken[this] := zeroRefRefintArr();
[L2181]              sum_allowed1[this] := 0;
[L2183]              name_MyToken[this] := tokenName_s318;
[L2184]              symbol_MyToken[this] := tokenSymbol_s318;
[L2185]              decimals_MyToken[this] := tokenDecimals_s318;
[L2186]              __var_2 := tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2187]              _totalSupply_MyToken[this] := nonlinearMul(initialSupply_s318, nonlinearPow(10, tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2188]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][msgsender_MSG];
[L2189]              balances_MyToken[this][msgsender_MSG] := _totalSupply_MyToken[this];
[L2190]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][msgsender_MSG];
[L2191]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2230]  RET         call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2231]  COND FALSE  !(revert)
[L794]   RET         call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L795]               assume !revert && gas >= 0;
[L4130]  RET         call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L4131]              assume !revert && gas >= 0;
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND TRUE   choice == 12
[L4037]              gas := gas - 21000;
[L4038]  COND TRUE   gas >= 0
[L4039]              assume tokens_s387 >= 0 && tokens_s387 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4040]              assume msgvalue_MSG == 0;
[L4041]  CALL        call success_s387 := transfer~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L933]               havoc __exception;
[L934]               revert := false;
[L935]   COND FALSE  !(__exception)
[L958]   CALL        call success_s387 := transfer~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L2298]  COND TRUE   DType[this] == MyToken
[L2299]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][msgsender_MSG], tokens_s387);
[L1931]  COND FALSE  !(!(b_s45 <= a_s45))
[L1935]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2299]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][msgsender_MSG], tokens_s387);
[L2300]  COND FALSE  !(revert)
[L2306]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][msgsender_MSG];
[L2307]              balances_MyToken[this][msgsender_MSG] := __var_4;
[L2308]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][msgsender_MSG];
[L2309]  COND TRUE   DType[this] == MyToken
[L2310]  CALL        call __var_5 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s387], tokens_s387);
[L1913]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1914]  COND FALSE  !(!(c_s23 >= a_s23))
[L2310]  RET         call __var_5 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s387], tokens_s387);
[L2311]  COND FALSE  !(revert)
[L2317]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][to_s387];
[L2318]              balances_MyToken[this][to_s387] := __var_5;
[L2319]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][to_s387];
[L2320]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2321]              success_s387 := true;
[L958]   RET         call success_s387 := transfer~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L959]               assume !revert && gas >= 0;
[L4041]  RET         call success_s387 := transfer~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L4134]  RET         call CorralChoice_MyToken(this);
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND FALSE  !(choice == 12)
[L4043]  COND FALSE  !(choice == 11)
[L4050]  COND TRUE   choice == 10
[L4051]              gas := gas - 21000;
[L4052]  COND TRUE   gas >= 0
[L4053]              assume tokens_s474 >= 0 && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4054]              assume msgvalue_MSG == 0;
[L4055]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s474 || p2 != msgsender_MSG) && from_s474 == to_s474) && tokens_s474 <= balances_MyToken[this][from_s474]) && tokens_s474 <= allowed_MyToken[this][from_s474][msgsender_MSG]) && tokens_s474 >= 0) && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][to_s474] >= 0) && balances_MyToken[this][to_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][from_s474] >= 0) && balances_MyToken[this][from_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_MyToken[this][from_s474][msgsender_MSG] >= 0) && allowed_MyToken[this][from_s474][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_MyToken0 := true;
[L3]                 call_transferFrom_MyToken0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L2391]  COND TRUE   DType[this] == MyToken
[L2392]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][from_s474], tokens_s474);
[L1931]  COND FALSE  !(!(b_s45 <= a_s45))
[L1935]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2392]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][from_s474], tokens_s474);
[L2393]  COND FALSE  !(revert)
[L2399]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][from_s474];
[L2400]              balances_MyToken[this][from_s474] := __var_6;
[L2401]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][from_s474];
[L2402]  COND TRUE   DType[this] == MyToken
[L2403]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L1931]  COND FALSE  !(!(b_s45 <= a_s45))
[L1935]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2403]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L2404]  COND FALSE  !(revert)
[L2410]              sum_allowed1[from_s474] := sum_allowed1[from_s474] - allowed_MyToken[this][from_s474][msgsender_MSG];
[L2411]              allowed_MyToken[this][from_s474][msgsender_MSG] := __var_7;
[L2412]              sum_allowed1[from_s474] := sum_allowed1[from_s474] + allowed_MyToken[this][from_s474][msgsender_MSG];
[L2413]  COND TRUE   DType[this] == MyToken
[L2414]  CALL        call __var_8 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s474], tokens_s474);
[L1913]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1914]  COND FALSE  !(!(c_s23 >= a_s23))
[L2414]  RET         call __var_8 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s474], tokens_s474);
[L2415]  COND FALSE  !(revert)
[L2421]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][to_s474];
[L2422]              balances_MyToken[this][to_s474] := __var_8;
[L2423]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][to_s474];
[L2424]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2425]              success_s474 := true;
[L1072]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s474 == true && allowed_MyToken[this][from_s474][msgsender_MSG] == old(allowed_MyToken[this][from_s474][msgsender_MSG]) - tokens_s474) && _totalSupply_MyToken[this] == old(_totalSupply_MyToken[this])) && balances_MyToken[this] == old(balances_MyToken[this])) && allowed_MyToken[this][p1][p2] == old(allowed_MyToken[this][p1][p2])) && symbol_MyToken[this] == old(symbol_MyToken[this])) && name_MyToken[this] == old(name_MyToken[this])) && decimals_MyToken[this] == old(decimals_MyToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4055]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L4134]  RET         call CorralChoice_MyToken(this);

Loop:
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND FALSE  !(choice == 12)
[L4043]  COND FALSE  !(choice == 11)
[L4050]  COND TRUE   choice == 10
[L4051]              gas := gas - 21000;
[L4052]  COND TRUE   gas >= 0
[L4053]              assume tokens_s474 >= 0 && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4054]              assume msgvalue_MSG == 0;
[L4055]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s474 || p2 != msgsender_MSG) && from_s474 == to_s474) && tokens_s474 <= balances_MyToken[this][from_s474]) && tokens_s474 <= allowed_MyToken[this][from_s474][msgsender_MSG]) && tokens_s474 >= 0) && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][to_s474] >= 0) && balances_MyToken[this][to_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][from_s474] >= 0) && balances_MyToken[this][from_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_MyToken[this][from_s474][msgsender_MSG] >= 0) && allowed_MyToken[this][from_s474][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_MyToken0 := true;
[L3]                 call_transferFrom_MyToken0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND TRUE   __exception
[L1050]              __tmp__Balance := Balance;
[L1051]              __tmp__DType := DType;
[L1052]              __tmp__Alloc := Alloc;
[L1053]              __tmp__balance_ADDR := balance_ADDR;
[L1054]              __tmp__M_Ref_int := M_Ref_int;
[L1055]              __tmp__sum_balances0 := sum_balances0;
[L1056]              __tmp__alloc_allowed_MyToken_lvl0 := alloc_allowed_MyToken_lvl0;
[L1057]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1058]              __tmp__sum_allowed1 := sum_allowed1;
[L1059]              __tmp__Length := Length;
[L1060]              __tmp__now := now;
[L1061]              __tmp__owner_Owned := owner_Owned;
[L1062]              __tmp__newOwner_Owned := newOwner_Owned;
[L1063]              __tmp__symbol_MyToken := symbol_MyToken;
[L1064]              __tmp__name_MyToken := name_MyToken;
[L1065]              __tmp__decimals_MyToken := decimals_MyToken;
[L1066]              __tmp___totalSupply_MyToken := _totalSupply_MyToken;
[L1067]              __tmp__balances_MyToken := balances_MyToken;
[L1068]              __tmp__allowed_MyToken := allowed_MyToken;
[L1069]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L2349]  COND TRUE   __tmp__DType[this] == MyToken
[L2350]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][from_s474], tokens_s474);
[L1922]  COND FALSE  !(!(b_s45 <= a_s45))
[L1926]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2350]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][from_s474], tokens_s474);
[L2351]  COND FALSE  !(revert)
[L2357]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_MyToken[this][from_s474];
[L2358]              __tmp__balances_MyToken[this][from_s474] := __var_6;
[L2359]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_MyToken[this][from_s474];
[L2360]  COND TRUE   __tmp__DType[this] == MyToken
[L2361]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L1922]  COND FALSE  !(!(b_s45 <= a_s45))
[L1926]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2361]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L2362]  COND FALSE  !(revert)
[L2368]              __tmp__sum_allowed1[from_s474] := __tmp__sum_allowed1[from_s474] - __tmp__allowed_MyToken[this][from_s474][msgsender_MSG];
[L2369]              __tmp__allowed_MyToken[this][from_s474][msgsender_MSG] := __var_7;
[L2370]              __tmp__sum_allowed1[from_s474] := __tmp__sum_allowed1[from_s474] + __tmp__allowed_MyToken[this][from_s474][msgsender_MSG];
[L2371]  COND TRUE   __tmp__DType[this] == MyToken
[L2372]  CALL        call __var_8 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][to_s474], tokens_s474);
[L1904]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1905]  COND TRUE   !(c_s23 >= a_s23)
[L1906]              revert := true;
[L2372]  RET         call __var_8 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][to_s474], tokens_s474);
[L2373]  COND TRUE   revert
[L1069]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L1070]              assume revert || gas < 0;
[L4055]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L4134]  RET         call CorralChoice_MyToken(this);

[2020-11-25 01:56:02,522 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:56:02,522 INFO  L82        PathProgramCache]: Analyzing trace with hash 1171595443, now seen corresponding path program 1 times
[2020-11-25 01:56:02,523 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:56:02,571 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
Received shutdown request...
[2020-11-25 02:10:36,587 FATAL L265        ToolchainWalker]: An unrecoverable error occured during an interaction with an SMT solver:
de.uni_freiburg.informatik.ultimate.logic.SMTLIBException: Timeout exceeded
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$IntegerInterpolator.interpolate(Interpolator.java:1432)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$MixedLAInterpolator.convert(Interpolator.java:1288)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer.cacheConvert(TermTransformer.java:131)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer.access$0(TermTransformer.java:127)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer$Convert.walk(TermTransformer.java:79)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:122)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:113)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer.transform(TermTransformer.java:253)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.mixedPivotLA(Interpolator.java:1478)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.combine(Interpolator.java:359)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.access$2(Interpolator.java:328)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$CombineInterpolants.walk(Interpolator.java:153)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:122)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:113)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.interpolate(Interpolator.java:220)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.getInterpolants(Interpolator.java:201)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.smtlib2.SMTInterpol.getInterpolants(SMTInterpol.java:919)
	at de.uni_freiburg.informatik.ultimate.modelcheckerutils.smt.managedscript.ManagedScript.getInterpolants(ManagedScript.java:200)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.NestedInterpolantsBuilder.computeCraigInterpolants(NestedInterpolantsBuilder.java:303)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.NestedInterpolantsBuilder.<init>(NestedInterpolantsBuilder.java:167)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.NestedInterpolantsBuilder.<init>(NestedInterpolantsBuilder.java:182)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.InterpolatingTraceCheckCraig.computeInterpolantsTree(InterpolatingTraceCheckCraig.java:271)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.InterpolatingTraceCheckCraig.computeInterpolants(InterpolatingTraceCheckCraig.java:207)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.InterpolatingTraceCheckCraig.<init>(InterpolatingTraceCheckCraig.java:109)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceCheckConstructor.constructCraig(TraceCheckConstructor.java:211)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceCheckConstructor.constructTraceCheck(TraceCheckConstructor.java:183)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceCheckConstructor.get(TraceCheckConstructor.java:165)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.FixedRefinementStrategy.getTraceCheck(FixedRefinementStrategy.java:134)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.BaseRefinementStrategy.checkFeasibility(BaseRefinementStrategy.java:223)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.BaseRefinementStrategy.executeStrategy(BaseRefinementStrategy.java:197)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceAbstractionRefinementEngine.<init>(TraceAbstractionRefinementEngine.java:70)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.checkFeasibilityAndComputeInterpolants(LassoCheck.java:1126)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.checkStemFeasibility(LassoCheck.java:1080)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.<init>(LassoCheck.java:994)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck.<init>(LassoCheck.java:276)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiCegarLoop.iterate(BuchiCegarLoop.java:479)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver.doTerminationAnalysis(BuchiAutomizerObserver.java:153)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver.finish(BuchiAutomizerObserver.java:413)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.runObserver(PluginConnector.java:168)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.runTool(PluginConnector.java:151)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.run(PluginConnector.java:128)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.executePluginConnector(ToolchainWalker.java:232)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.processPlugin(ToolchainWalker.java:226)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.walkUnprotected(ToolchainWalker.java:142)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.walk(ToolchainWalker.java:104)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainManager$Toolchain.processToolchain(ToolchainManager.java:317)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.toolchain.DefaultToolchainJob.run(DefaultToolchainJob.java:145)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)
[2020-11-25 02:10:36,588 INFO  L168              Benchmark]: Toolchain (without parser) took 898682.89 ms. Allocated memory was 1.0 GB in the beginning and 6.5 GB in the end (delta: 5.5 GB). Free memory was 935.2 MB in the beginning and 5.8 GB in the end (delta: -4.9 GB). Peak memory consumption was 6.1 GB. Max. memory is 15.3 GB.
[2020-11-25 02:10:36,589 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.17 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 02:10:36,589 INFO  L168              Benchmark]: Boogie Preprocessor took 79.80 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 02:10:36,589 INFO  L168              Benchmark]: UtopiaSpecLang took 51.98 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 913.7 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 02:10:36,589 INFO  L168              Benchmark]: Boogie Printer took 13.43 ms. Allocated memory is still 1.0 GB. Free memory is still 913.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 02:10:36,590 INFO  L168              Benchmark]: RCFGBuilder took 636.57 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 795.6 MB in the end (delta: 112.8 MB). Peak memory consumption was 112.8 MB. Max. memory is 15.3 GB.
[2020-11-25 02:10:36,590 INFO  L168              Benchmark]: UtopiaLTL2Aut took 39.05 ms. Allocated memory is still 1.0 GB. Free memory was 795.6 MB in the beginning and 786.6 MB in the end (delta: 9.0 MB). Peak memory consumption was 9.0 MB. Max. memory is 15.3 GB.
[2020-11-25 02:10:36,590 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1450.15 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 203.9 MB). Free memory was 786.6 MB in the beginning and 1.0 GB in the end (delta: -228.8 MB). Peak memory consumption was 168.6 MB. Max. memory is 15.3 GB.
[2020-11-25 02:10:36,591 INFO  L168              Benchmark]: BlockEncodingV2 took 117.79 ms. Allocated memory is still 1.2 GB. Free memory was 1.0 GB in the beginning and 953.6 MB in the end (delta: 61.8 MB). Peak memory consumption was 61.8 MB. Max. memory is 15.3 GB.
[2020-11-25 02:10:36,591 INFO  L168              Benchmark]: BuchiAutomizer took 896291.70 ms. Allocated memory was 1.2 GB in the beginning and 6.5 GB in the end (delta: 5.3 GB). Free memory was 953.6 MB in the beginning and 5.8 GB in the end (delta: -4.9 GB). Peak memory consumption was 6.0 GB. Max. memory is 15.3 GB.
[2020-11-25 02:10:36,594 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    3572 locations, 6130 edges
  - StatisticsResult: Encoded RCFG
    3516 locations, 5982 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.17 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 79.80 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 51.98 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 913.7 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 13.43 ms. Allocated memory is still 1.0 GB. Free memory is still 913.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 636.57 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 795.6 MB in the end (delta: 112.8 MB). Peak memory consumption was 112.8 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 39.05 ms. Allocated memory is still 1.0 GB. Free memory was 795.6 MB in the beginning and 786.6 MB in the end (delta: 9.0 MB). Peak memory consumption was 9.0 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1450.15 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 203.9 MB). Free memory was 786.6 MB in the beginning and 1.0 GB in the end (delta: -228.8 MB). Peak memory consumption was 168.6 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 117.79 ms. Allocated memory is still 1.2 GB. Free memory was 1.0 GB in the beginning and 953.6 MB in the end (delta: 61.8 MB). Peak memory consumption was 61.8 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 896291.70 ms. Allocated memory was 1.2 GB in the beginning and 6.5 GB in the end (delta: 5.3 GB). Free memory was 953.6 MB in the beginning and 5.8 GB in the end (delta: -4.9 GB). Peak memory consumption was 6.0 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1506 locations, 1892 edges
  - StatisticsResult: BuchiProgram size
    3572 locations, 6130 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer:
  - ExceptionOrErrorResult: SMTLIBException: Timeout exceeded
    de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer: SMTLIBException: Timeout exceeded: de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$IntegerInterpolator.interpolate(Interpolator.java:1432)
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Completed graceful shutdown
