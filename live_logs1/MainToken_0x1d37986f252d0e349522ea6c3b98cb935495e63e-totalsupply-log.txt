This is Ultimate 0.1.24-f1553f5-m
[2020-11-24 21:25:18,876 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-24 21:25:18,877 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-24 21:25:18,889 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-24 21:25:18,890 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-24 21:25:18,891 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-24 21:25:18,892 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-24 21:25:18,893 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-24 21:25:18,895 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-24 21:25:18,895 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-24 21:25:18,896 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-24 21:25:18,896 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-24 21:25:18,897 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-24 21:25:18,898 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-24 21:25:18,899 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-24 21:25:18,900 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-24 21:25:18,900 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-24 21:25:18,902 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-24 21:25:18,903 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-24 21:25:18,905 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-24 21:25:18,906 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-24 21:25:18,907 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-24 21:25:18,909 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-24 21:25:18,909 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-24 21:25:18,909 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-24 21:25:18,909 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-24 21:25:18,910 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-24 21:25:18,910 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-24 21:25:18,911 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-24 21:25:18,911 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-24 21:25:18,911 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-24 21:25:18,912 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-24 21:25:18,912 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-24 21:25:18,913 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-24 21:25:18,914 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-24 21:25:18,914 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-24 21:25:18,914 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-24 21:25:18,914 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-24 21:25:18,915 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-24 21:25:18,916 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-24 21:25:18,916 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-24 21:25:18,916 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-24 21:25:18,931 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-24 21:25:18,931 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-24 21:25:18,932 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-24 21:25:18,932 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-24 21:25:18,933 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-24 21:25:18,933 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-24 21:25:18,933 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-24 21:25:18,933 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-24 21:25:18,933 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-24 21:25:18,933 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-24 21:25:18,933 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-24 21:25:18,933 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-24 21:25:18,933 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-24 21:25:18,934 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-24 21:25:18,934 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-24 21:25:18,934 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-24 21:25:18,934 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-24 21:25:18,934 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-24 21:25:18,934 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-24 21:25:18,934 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-24 21:25:18,934 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-24 21:25:18,934 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-24 21:25:18,934 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-24 21:25:18,935 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-24 21:25:18,935 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-24 21:25:18,935 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-24 21:25:18,962 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-24 21:25:18,981 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-24 21:25:18,987 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-24 21:25:18,990 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-24 21:25:18,990 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-24 21:25:18,992 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_totalsupply.bpl
[2020-11-24 21:25:18,992 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_totalsupply.bpl'
[2020-11-24 21:25:19,133 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-24 21:25:19,135 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-24 21:25:19,135 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-24 21:25:19,135 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-24 21:25:19,135 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-24 21:25:19,152 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:25:19" (1/1) ...
[2020-11-24 21:25:19,154 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:25:19" (1/1) ...
[2020-11-24 21:25:19,206 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:25:19" (1/1) ...
[2020-11-24 21:25:19,207 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:25:19" (1/1) ...
[2020-11-24 21:25:19,248 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:25:19" (1/1) ...
[2020-11-24 21:25:19,277 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:25:19" (1/1) ...
[2020-11-24 21:25:19,296 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:25:19" (1/1) ...
[2020-11-24 21:25:19,321 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-24 21:25:19,322 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-24 21:25:19,322 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-24 21:25:19,325 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-24 21:25:19,328 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:25:19" (1/1) ...
[2020-11-24 21:25:19,359 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(BasicToken.totalSupply, totalSupply__BasicToken[this] >= 0 && totalSupply__BasicToken[this] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(BasicToken.totalSupply, return == totalSupply__BasicToken[this] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && initialized_MainToken[this] == old(initialized_MainToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && chains_FreezableToken[this] == old(chains_FreezableToken[this]) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this]) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]))))
[2020-11-24 21:25:19,364 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(BasicToken.totalSupply, totalSupply__BasicToken[this] >= 0 && totalSupply__BasicToken[this] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(BasicToken.totalSupply, return == totalSupply__BasicToken[this] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && initialized_MainToken[this] == old(initialized_MainToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && chains_FreezableToken[this] == old(chains_FreezableToken[this]) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this]) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]))))
[2020-11-24 21:25:19,372 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(BasicToken.totalSupply, totalSupply__BasicToken[this] >= 0 && totalSupply__BasicToken[this] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(BasicToken.totalSupply, return == totalSupply__BasicToken[this] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && initialized_MainToken[this] == old(initialized_MainToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && chains_FreezableToken[this] == old(chains_FreezableToken[this]) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this]) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]))))
[2020-11-24 21:25:19,378 INFO  L636   opiaSpecLangObserver]: Parsed ( totalSupply__BasicToken[this]>=0 && totalSupply__BasicToken[this]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[COMPGEQ,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]],IntegerLiteral[0]],BinaryExpression[COMPLT,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-24 21:25:19,381 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( __ret_0_==totalSupply__BasicToken[this] && totalSupply__BasicToken[this]==( old(totalSupply__BasicToken[this]) ) ) && balances_BasicToken[this]==( old(balances_BasicToken[this]) ) ) && allowed_StandardToken[this]==( old(allowed_StandardToken[this]) ) ) && initialized_MainToken[this]==( old(initialized_MainToken[this]) ) ) && paused_Pausable[this]==( old(paused_Pausable[this]) ) ) && mintingFinished_MintableToken[this]==( old(mintingFinished_MintableToken[this]) ) ) && owner_Ownable[this]==( old(owner_Ownable[this]) ) ) && chains_FreezableToken[this]==( old(chains_FreezableToken[this]) ) ) && freezings_FreezableToken[this]==( old(freezings_FreezableToken[this]) ) ) && freezingBalance_FreezableToken[this]==( old(freezingBalance_FreezableToken[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,totalSupply_BasicToken>],ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[initialized_MainToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[initialized_MainToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[mintingFinished_MintableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[mintingFinished_MintableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[chains_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[chains_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[freezings_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[freezings_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[freezingBalance_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[freezingBalance_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]]]]]
[2020-11-24 21:25:19,390 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(BasicToken.totalSupply, totalSupply__BasicToken[this] >= 0 && totalSupply__BasicToken[this] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(BasicToken.totalSupply, return == totalSupply__BasicToken[this] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && initialized_MainToken[this] == old(initialized_MainToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && chains_FreezableToken[this] == old(chains_FreezableToken[this]) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this]) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]))))
[2020-11-24 21:25:19,391 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_totalSupply_BasicToken0) ==> ( <>AP(success_totalSupply_BasicToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-24 21:25:19,417 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:25:19 PropertyContainer
[2020-11-24 21:25:19,417 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-24 21:25:19,417 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-24 21:25:19,418 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-24 21:25:19,418 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-24 21:25:19,419 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:25:19" (1/2) ...
[2020-11-24 21:25:19,419 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-24 21:25:19,419 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-24 21:25:19,450 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:25:19" (2/2) ...
[2020-11-24 21:25:19,451 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-24 21:25:19,451 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-24 21:25:19,451 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-24 21:25:19,451 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-24 21:25:19,452 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:25:19" (1/2) ...
[2020-11-24 21:25:19,509 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-24 21:25:19,509 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-24 21:25:19,509 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic
[2020-11-24 21:25:19,509 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic
[2020-11-24 21:25:19,509 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Basic
[2020-11-24 21:25:19,510 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Basic
[2020-11-24 21:25:19,510 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Basic
[2020-11-24 21:25:19,510 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 21:25:19,510 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-24 21:25:19,510 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-24 21:25:19,510 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 21:25:19,510 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 21:25:19,510 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 21:25:19,511 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 21:25:19,511 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-24 21:25:19,511 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken
[2020-11-24 21:25:19,511 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken
[2020-11-24 21:25:19,511 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken
[2020-11-24 21:25:19,511 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken
[2020-11-24 21:25:19,511 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken
[2020-11-24 21:25:19,512 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken
[2020-11-24 21:25:19,512 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken
[2020-11-24 21:25:19,512 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken
[2020-11-24 21:25:19,512 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-24 21:25:19,512 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-24 21:25:19,512 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-24 21:25:19,512 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-24 21:25:19,512 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-24 21:25:19,512 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-24 21:25:19,513 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-24 21:25:19,513 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken
[2020-11-24 21:25:19,513 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken
[2020-11-24 21:25:19,513 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-24 21:25:19,513 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-24 21:25:19,513 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken
[2020-11-24 21:25:19,513 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken
[2020-11-24 21:25:19,513 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken
[2020-11-24 21:25:19,513 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken
[2020-11-24 21:25:19,514 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken
[2020-11-24 21:25:19,514 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken
[2020-11-24 21:25:19,514 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-24 21:25:19,514 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-24 21:25:19,514 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-24 21:25:19,514 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-24 21:25:19,514 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-24 21:25:19,514 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable
[2020-11-24 21:25:19,514 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable
[2020-11-24 21:25:19,514 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-24 21:25:19,514 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-24 21:25:19,515 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__success
[2020-11-24 21:25:19,515 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-24 21:25:19,515 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-24 21:25:19,515 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-24 21:25:19,515 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken
[2020-11-24 21:25:19,515 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken
[2020-11-24 21:25:19,515 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken
[2020-11-24 21:25:19,515 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken
[2020-11-24 21:25:19,515 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken
[2020-11-24 21:25:19,515 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken
[2020-11-24 21:25:19,516 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken
[2020-11-24 21:25:19,516 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken
[2020-11-24 21:25:19,516 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken_NoBaseCtor__success
[2020-11-24 21:25:19,516 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken
[2020-11-24 21:25:19,516 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken
[2020-11-24 21:25:19,516 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FreezableToken
[2020-11-24 21:25:19,516 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FreezableToken
[2020-11-24 21:25:19,516 INFO  L130     BoogieDeclarations]: Found specification of procedure actualBalanceOf~address_FreezableToken
[2020-11-24 21:25:19,516 INFO  L138     BoogieDeclarations]: Found implementation of procedure actualBalanceOf~address_FreezableToken
[2020-11-24 21:25:19,516 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingBalanceOf~address_FreezableToken
[2020-11-24 21:25:19,516 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingBalanceOf~address_FreezableToken
[2020-11-24 21:25:19,517 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingCount~address_FreezableToken
[2020-11-24 21:25:19,517 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingCount~address_FreezableToken
[2020-11-24 21:25:19,517 INFO  L130     BoogieDeclarations]: Found specification of procedure getFreezing~address~uint256_FreezableToken
[2020-11-24 21:25:19,517 INFO  L138     BoogieDeclarations]: Found implementation of procedure getFreezing~address~uint256_FreezableToken
[2020-11-24 21:25:19,517 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeTo~address~uint256~uint64_FreezableToken
[2020-11-24 21:25:19,517 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeTo~address~uint256~uint64_FreezableToken
[2020-11-24 21:25:19,517 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseOnce_FreezableToken
[2020-11-24 21:25:19,517 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseOnce_FreezableToken
[2020-11-24 21:25:19,517 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseAll_FreezableToken
[2020-11-24 21:25:19,517 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseAll_FreezableToken
[2020-11-24 21:25:19,518 INFO  L130     BoogieDeclarations]: Found specification of procedure toKey~address~uint256_FreezableToken__success
[2020-11-24 21:25:19,518 INFO  L130     BoogieDeclarations]: Found specification of procedure freeze~address~uint64_FreezableToken__success
[2020-11-24 21:25:19,518 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken_NoBaseCtor__success
[2020-11-24 21:25:19,518 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken
[2020-11-24 21:25:19,518 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken
[2020-11-24 21:25:19,518 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken
[2020-11-24 21:25:19,518 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken
[2020-11-24 21:25:19,518 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_BurnableToken__success
[2020-11-24 21:25:19,518 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-24 21:25:19,518 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable
[2020-11-24 21:25:19,518 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable
[2020-11-24 21:25:19,519 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable
[2020-11-24 21:25:19,519 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable
[2020-11-24 21:25:19,519 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable
[2020-11-24 21:25:19,519 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable
[2020-11-24 21:25:19,519 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable
[2020-11-24 21:25:19,519 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable
[2020-11-24 21:25:19,519 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success
[2020-11-24 21:25:19,519 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken
[2020-11-24 21:25:19,519 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken
[2020-11-24 21:25:19,519 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken
[2020-11-24 21:25:19,519 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken
[2020-11-24 21:25:19,520 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts_NoBaseCtor__success
[2020-11-24 21:25:19,520 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts
[2020-11-24 21:25:19,520 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts
[2020-11-24 21:25:19,520 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_Consts
[2020-11-24 21:25:19,520 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_Consts
[2020-11-24 21:25:19,520 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_UINT8_Consts
[2020-11-24 21:25:19,520 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_UINT8_Consts
[2020-11-24 21:25:19,520 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMAL_MULTIPLIER_Consts
[2020-11-24 21:25:19,520 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMAL_MULTIPLIER_Consts
[2020-11-24 21:25:19,520 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_NAME_Consts
[2020-11-24 21:25:19,521 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_NAME_Consts
[2020-11-24 21:25:19,521 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_SYMBOL_Consts
[2020-11-24 21:25:19,521 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_SYMBOL_Consts
[2020-11-24 21:25:19,521 INFO  L130     BoogieDeclarations]: Found specification of procedure PAUSED_Consts
[2020-11-24 21:25:19,521 INFO  L138     BoogieDeclarations]: Found implementation of procedure PAUSED_Consts
[2020-11-24 21:25:19,521 INFO  L130     BoogieDeclarations]: Found specification of procedure TARGET_USER_Consts
[2020-11-24 21:25:19,521 INFO  L138     BoogieDeclarations]: Found implementation of procedure TARGET_USER_Consts
[2020-11-24 21:25:19,521 INFO  L130     BoogieDeclarations]: Found specification of procedure CONTINUE_MINTING_Consts
[2020-11-24 21:25:19,521 INFO  L138     BoogieDeclarations]: Found implementation of procedure CONTINUE_MINTING_Consts
[2020-11-24 21:25:19,521 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken_NoBaseCtor__success
[2020-11-24 21:25:19,522 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken
[2020-11-24 21:25:19,522 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken
[2020-11-24 21:25:19,522 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MainToken
[2020-11-24 21:25:19,522 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MainToken
[2020-11-24 21:25:19,522 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MainToken
[2020-11-24 21:25:19,522 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MainToken
[2020-11-24 21:25:19,522 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MainToken
[2020-11-24 21:25:19,522 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MainToken
[2020-11-24 21:25:19,522 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MainToken
[2020-11-24 21:25:19,523 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MainToken
[2020-11-24 21:25:19,523 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MainToken
[2020-11-24 21:25:19,523 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MainToken
[2020-11-24 21:25:19,523 INFO  L130     BoogieDeclarations]: Found specification of procedure init_MainToken__success
[2020-11-24 21:25:19,523 INFO  L130     BoogieDeclarations]: Found specification of procedure initialized_MainToken
[2020-11-24 21:25:19,523 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialized_MainToken
[2020-11-24 21:25:19,523 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-24 21:25:19,523 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-24 21:25:19,523 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-24 21:25:19,524 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-24 21:25:19,524 INFO  L130     BoogieDeclarations]: Found specification of procedure canMint_pre__success
[2020-11-24 21:25:19,524 INFO  L130     BoogieDeclarations]: Found specification of procedure hasMintPermission_pre__success
[2020-11-24 21:25:19,524 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__success
[2020-11-24 21:25:19,524 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__success
[2020-11-24 21:25:19,524 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Basic
[2020-11-24 21:25:19,524 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Basic
[2020-11-24 21:25:19,524 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-24 21:25:19,524 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-24 21:25:19,525 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BasicToken
[2020-11-24 21:25:19,525 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BasicToken
[2020-11-24 21:25:19,525 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-24 21:25:19,525 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-24 21:25:19,525 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_StandardToken
[2020-11-24 21:25:19,525 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_StandardToken
[2020-11-24 21:25:19,525 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-24 21:25:19,525 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-24 21:25:19,525 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MintableToken
[2020-11-24 21:25:19,525 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MintableToken
[2020-11-24 21:25:19,526 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_FreezableToken
[2020-11-24 21:25:19,526 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_FreezableToken
[2020-11-24 21:25:19,526 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BurnableToken
[2020-11-24 21:25:19,526 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BurnableToken
[2020-11-24 21:25:19,526 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Pausable
[2020-11-24 21:25:19,526 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Pausable
[2020-11-24 21:25:19,526 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_FreezableMintableToken
[2020-11-24 21:25:19,526 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_FreezableMintableToken
[2020-11-24 21:25:19,526 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Consts
[2020-11-24 21:25:19,526 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Consts
[2020-11-24 21:25:19,526 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MainToken
[2020-11-24 21:25:19,527 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-24 21:25:19,527 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-24 21:25:19,527 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-24 21:25:19,527 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__success
[2020-11-24 21:25:19,527 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__fail
[2020-11-24 21:25:19,527 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 21:25:19,527 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-24 21:25:19,527 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-24 21:25:19,527 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 21:25:19,527 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 21:25:19,528 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 21:25:19,528 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 21:25:19,528 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-24 21:25:19,528 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__success
[2020-11-24 21:25:19,528 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__fail
[2020-11-24 21:25:19,528 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__success
[2020-11-24 21:25:19,528 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__fail
[2020-11-24 21:25:19,528 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__success
[2020-11-24 21:25:19,528 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__fail
[2020-11-24 21:25:19,528 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__success
[2020-11-24 21:25:19,528 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__fail
[2020-11-24 21:25:19,529 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-24 21:25:19,529 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-24 21:25:19,529 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-24 21:25:19,529 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-24 21:25:19,529 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__success
[2020-11-24 21:25:19,529 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__fail
[2020-11-24 21:25:19,529 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-24 21:25:19,529 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-24 21:25:19,529 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__success
[2020-11-24 21:25:19,529 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__fail
[2020-11-24 21:25:19,529 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__success
[2020-11-24 21:25:19,529 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__fail
[2020-11-24 21:25:19,529 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-24 21:25:19,530 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-24 21:25:19,530 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-24 21:25:19,530 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-24 21:25:19,530 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-24 21:25:19,530 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-24 21:25:19,530 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-24 21:25:19,530 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__success
[2020-11-24 21:25:19,530 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__fail
[2020-11-24 21:25:19,530 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-24 21:25:19,530 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-24 21:25:19,530 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__fail
[2020-11-24 21:25:19,530 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-24 21:25:19,531 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-24 21:25:19,531 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-24 21:25:19,531 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__success
[2020-11-24 21:25:19,531 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__fail
[2020-11-24 21:25:19,531 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__success
[2020-11-24 21:25:19,531 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__fail
[2020-11-24 21:25:19,531 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken__success
[2020-11-24 21:25:19,531 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken__fail
[2020-11-24 21:25:19,531 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken__success
[2020-11-24 21:25:19,531 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken__fail
[2020-11-24 21:25:19,531 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken_NoBaseCtor__fail
[2020-11-24 21:25:19,531 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken__success
[2020-11-24 21:25:19,532 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken__fail
[2020-11-24 21:25:19,532 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FreezableToken__success
[2020-11-24 21:25:19,532 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FreezableToken__fail
[2020-11-24 21:25:19,532 INFO  L130     BoogieDeclarations]: Found specification of procedure actualBalanceOf~address_FreezableToken__success
[2020-11-24 21:25:19,532 INFO  L130     BoogieDeclarations]: Found specification of procedure actualBalanceOf~address_FreezableToken__fail
[2020-11-24 21:25:19,532 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingBalanceOf~address_FreezableToken__success
[2020-11-24 21:25:19,532 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingBalanceOf~address_FreezableToken__fail
[2020-11-24 21:25:19,532 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingCount~address_FreezableToken__success
[2020-11-24 21:25:19,532 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingCount~address_FreezableToken__fail
[2020-11-24 21:25:19,532 INFO  L130     BoogieDeclarations]: Found specification of procedure getFreezing~address~uint256_FreezableToken__success
[2020-11-24 21:25:19,532 INFO  L130     BoogieDeclarations]: Found specification of procedure getFreezing~address~uint256_FreezableToken__fail
[2020-11-24 21:25:19,532 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeTo~address~uint256~uint64_FreezableToken__success
[2020-11-24 21:25:19,533 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeTo~address~uint256~uint64_FreezableToken__fail
[2020-11-24 21:25:19,533 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseOnce_FreezableToken__success
[2020-11-24 21:25:19,533 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseOnce_FreezableToken__fail
[2020-11-24 21:25:19,533 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseAll_FreezableToken__success
[2020-11-24 21:25:19,533 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseAll_FreezableToken__fail
[2020-11-24 21:25:19,533 INFO  L130     BoogieDeclarations]: Found specification of procedure toKey~address~uint256_FreezableToken__fail
[2020-11-24 21:25:19,533 INFO  L130     BoogieDeclarations]: Found specification of procedure freeze~address~uint64_FreezableToken__fail
[2020-11-24 21:25:19,533 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken_NoBaseCtor__fail
[2020-11-24 21:25:19,533 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken__success
[2020-11-24 21:25:19,533 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken__fail
[2020-11-24 21:25:19,533 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken__success
[2020-11-24 21:25:19,533 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken__fail
[2020-11-24 21:25:19,534 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_BurnableToken__fail
[2020-11-24 21:25:19,534 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-24 21:25:19,534 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__success
[2020-11-24 21:25:19,534 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__fail
[2020-11-24 21:25:19,534 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__success
[2020-11-24 21:25:19,534 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__fail
[2020-11-24 21:25:19,534 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__success
[2020-11-24 21:25:19,534 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__fail
[2020-11-24 21:25:19,534 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__success
[2020-11-24 21:25:19,534 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__fail
[2020-11-24 21:25:19,534 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__fail
[2020-11-24 21:25:19,534 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken__success
[2020-11-24 21:25:19,535 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken__fail
[2020-11-24 21:25:19,535 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success
[2020-11-24 21:25:19,535 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__fail
[2020-11-24 21:25:19,535 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts_NoBaseCtor__fail
[2020-11-24 21:25:19,535 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts__success
[2020-11-24 21:25:19,535 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts__fail
[2020-11-24 21:25:19,535 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_Consts__success
[2020-11-24 21:25:19,535 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_Consts__fail
[2020-11-24 21:25:19,536 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_UINT8_Consts__success
[2020-11-24 21:25:19,536 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_UINT8_Consts__fail
[2020-11-24 21:25:19,536 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__success
[2020-11-24 21:25:19,536 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__fail
[2020-11-24 21:25:19,536 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_NAME_Consts__success
[2020-11-24 21:25:19,536 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_NAME_Consts__fail
[2020-11-24 21:25:19,536 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_SYMBOL_Consts__success
[2020-11-24 21:25:19,536 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_SYMBOL_Consts__fail
[2020-11-24 21:25:19,537 INFO  L130     BoogieDeclarations]: Found specification of procedure PAUSED_Consts__success
[2020-11-24 21:25:19,537 INFO  L130     BoogieDeclarations]: Found specification of procedure PAUSED_Consts__fail
[2020-11-24 21:25:19,537 INFO  L130     BoogieDeclarations]: Found specification of procedure TARGET_USER_Consts__success
[2020-11-24 21:25:19,537 INFO  L130     BoogieDeclarations]: Found specification of procedure TARGET_USER_Consts__fail
[2020-11-24 21:25:19,537 INFO  L130     BoogieDeclarations]: Found specification of procedure CONTINUE_MINTING_Consts__success
[2020-11-24 21:25:19,537 INFO  L130     BoogieDeclarations]: Found specification of procedure CONTINUE_MINTING_Consts__fail
[2020-11-24 21:25:19,537 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken_NoBaseCtor__fail
[2020-11-24 21:25:19,537 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken__success
[2020-11-24 21:25:19,537 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken__fail
[2020-11-24 21:25:19,537 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MainToken__success
[2020-11-24 21:25:19,537 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MainToken__fail
[2020-11-24 21:25:19,537 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MainToken__success
[2020-11-24 21:25:19,538 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MainToken__fail
[2020-11-24 21:25:19,538 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MainToken__success
[2020-11-24 21:25:19,538 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MainToken__fail
[2020-11-24 21:25:19,538 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MainToken__success
[2020-11-24 21:25:19,538 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MainToken__fail
[2020-11-24 21:25:19,538 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MainToken__success
[2020-11-24 21:25:19,538 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MainToken__fail
[2020-11-24 21:25:19,538 INFO  L130     BoogieDeclarations]: Found specification of procedure init_MainToken__fail
[2020-11-24 21:25:19,538 INFO  L130     BoogieDeclarations]: Found specification of procedure initialized_MainToken__success
[2020-11-24 21:25:19,538 INFO  L130     BoogieDeclarations]: Found specification of procedure initialized_MainToken__fail
[2020-11-24 21:25:19,538 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-24 21:25:19,538 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-24 21:25:19,539 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-24 21:25:19,539 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-24 21:25:19,539 INFO  L130     BoogieDeclarations]: Found specification of procedure canMint_pre__fail
[2020-11-24 21:25:19,539 INFO  L130     BoogieDeclarations]: Found specification of procedure hasMintPermission_pre__fail
[2020-11-24 21:25:19,539 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__fail
[2020-11-24 21:25:19,539 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__fail
[2020-11-24 21:25:19,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-24 21:25:19,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-24 21:25:19,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-24 21:25:19,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-24 21:25:19,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__fail
[2020-11-24 21:25:19,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__success
[2020-11-24 21:25:19,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 21:25:19,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 21:25:19,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-24 21:25:19,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-24 21:25:19,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 21:25:19,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 21:25:19,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 21:25:19,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 21:25:19,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 21:25:19,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 21:25:19,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 21:25:19,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 21:25:19,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-24 21:25:19,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-24 21:25:19,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__fail
[2020-11-24 21:25:19,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__success
[2020-11-24 21:25:19,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__fail
[2020-11-24 21:25:19,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__success
[2020-11-24 21:25:19,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__fail
[2020-11-24 21:25:19,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__success
[2020-11-24 21:25:19,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__fail
[2020-11-24 21:25:19,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__success
[2020-11-24 21:25:19,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-24 21:25:19,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-24 21:25:19,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-24 21:25:19,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-24 21:25:19,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-24 21:25:19,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-24 21:25:19,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__fail
[2020-11-24 21:25:19,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__success
[2020-11-24 21:25:19,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-24 21:25:19,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-24 21:25:19,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__fail
[2020-11-24 21:25:19,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__success
[2020-11-24 21:25:19,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__fail
[2020-11-24 21:25:19,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__success
[2020-11-24 21:25:19,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-24 21:25:19,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-24 21:25:19,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-24 21:25:19,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-24 21:25:19,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-24 21:25:19,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-24 21:25:19,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-24 21:25:19,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-24 21:25:19,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__fail
[2020-11-24 21:25:19,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__success
[2020-11-24 21:25:19,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-24 21:25:19,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-24 21:25:19,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__fail
[2020-11-24 21:25:19,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__success
[2020-11-24 21:25:19,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-24 21:25:19,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-24 21:25:19,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-24 21:25:19,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-24 21:25:19,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__fail
[2020-11-24 21:25:19,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__success
[2020-11-24 21:25:19,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__fail
[2020-11-24 21:25:19,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__success
[2020-11-24 21:25:19,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken__fail
[2020-11-24 21:25:19,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken__success
[2020-11-24 21:25:19,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken__fail
[2020-11-24 21:25:19,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken__success
[2020-11-24 21:25:19,545 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken_NoBaseCtor__fail
[2020-11-24 21:25:19,545 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken_NoBaseCtor__success
[2020-11-24 21:25:19,545 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken__fail
[2020-11-24 21:25:19,545 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken__success
[2020-11-24 21:25:19,545 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FreezableToken__fail
[2020-11-24 21:25:19,545 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FreezableToken__success
[2020-11-24 21:25:19,545 INFO  L138     BoogieDeclarations]: Found implementation of procedure actualBalanceOf~address_FreezableToken__fail
[2020-11-24 21:25:19,545 INFO  L138     BoogieDeclarations]: Found implementation of procedure actualBalanceOf~address_FreezableToken__success
[2020-11-24 21:25:19,545 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingBalanceOf~address_FreezableToken__fail
[2020-11-24 21:25:19,545 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingBalanceOf~address_FreezableToken__success
[2020-11-24 21:25:19,545 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingCount~address_FreezableToken__fail
[2020-11-24 21:25:19,545 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingCount~address_FreezableToken__success
[2020-11-24 21:25:19,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure getFreezing~address~uint256_FreezableToken__fail
[2020-11-24 21:25:19,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure getFreezing~address~uint256_FreezableToken__success
[2020-11-24 21:25:19,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeTo~address~uint256~uint64_FreezableToken__fail
[2020-11-24 21:25:19,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeTo~address~uint256~uint64_FreezableToken__success
[2020-11-24 21:25:19,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseOnce_FreezableToken__fail
[2020-11-24 21:25:19,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseOnce_FreezableToken__success
[2020-11-24 21:25:19,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseAll_FreezableToken__fail
[2020-11-24 21:25:19,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseAll_FreezableToken__success
[2020-11-24 21:25:19,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure toKey~address~uint256_FreezableToken__fail
[2020-11-24 21:25:19,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure toKey~address~uint256_FreezableToken__success
[2020-11-24 21:25:19,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure freeze~address~uint64_FreezableToken__fail
[2020-11-24 21:25:19,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure freeze~address~uint64_FreezableToken__success
[2020-11-24 21:25:19,547 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken_NoBaseCtor__fail
[2020-11-24 21:25:19,547 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken_NoBaseCtor__success
[2020-11-24 21:25:19,547 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken__fail
[2020-11-24 21:25:19,547 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken__success
[2020-11-24 21:25:19,547 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken__fail
[2020-11-24 21:25:19,547 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken__success
[2020-11-24 21:25:19,547 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_BurnableToken__fail
[2020-11-24 21:25:19,547 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_BurnableToken__success
[2020-11-24 21:25:19,547 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-24 21:25:19,547 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-24 21:25:19,547 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__fail
[2020-11-24 21:25:19,547 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__success
[2020-11-24 21:25:19,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__fail
[2020-11-24 21:25:19,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__success
[2020-11-24 21:25:19,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__fail
[2020-11-24 21:25:19,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__success
[2020-11-24 21:25:19,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__fail
[2020-11-24 21:25:19,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__success
[2020-11-24 21:25:19,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__fail
[2020-11-24 21:25:19,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success
[2020-11-24 21:25:19,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken__fail
[2020-11-24 21:25:19,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken__success
[2020-11-24 21:25:19,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__fail
[2020-11-24 21:25:19,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success
[2020-11-24 21:25:19,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts_NoBaseCtor__fail
[2020-11-24 21:25:19,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts_NoBaseCtor__success
[2020-11-24 21:25:19,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts__fail
[2020-11-24 21:25:19,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts__success
[2020-11-24 21:25:19,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_Consts__fail
[2020-11-24 21:25:19,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_Consts__success
[2020-11-24 21:25:19,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_UINT8_Consts__fail
[2020-11-24 21:25:19,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_UINT8_Consts__success
[2020-11-24 21:25:19,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__fail
[2020-11-24 21:25:19,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__success
[2020-11-24 21:25:19,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_NAME_Consts__fail
[2020-11-24 21:25:19,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_NAME_Consts__success
[2020-11-24 21:25:19,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_SYMBOL_Consts__fail
[2020-11-24 21:25:19,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_SYMBOL_Consts__success
[2020-11-24 21:25:19,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure PAUSED_Consts__fail
[2020-11-24 21:25:19,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure PAUSED_Consts__success
[2020-11-24 21:25:19,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure TARGET_USER_Consts__fail
[2020-11-24 21:25:19,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure TARGET_USER_Consts__success
[2020-11-24 21:25:19,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure CONTINUE_MINTING_Consts__fail
[2020-11-24 21:25:19,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure CONTINUE_MINTING_Consts__success
[2020-11-24 21:25:19,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken_NoBaseCtor__fail
[2020-11-24 21:25:19,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken_NoBaseCtor__success
[2020-11-24 21:25:19,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken__fail
[2020-11-24 21:25:19,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken__success
[2020-11-24 21:25:19,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MainToken__fail
[2020-11-24 21:25:19,551 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MainToken__success
[2020-11-24 21:25:19,551 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MainToken__fail
[2020-11-24 21:25:19,551 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MainToken__success
[2020-11-24 21:25:19,551 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MainToken__fail
[2020-11-24 21:25:19,551 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MainToken__success
[2020-11-24 21:25:19,551 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MainToken__fail
[2020-11-24 21:25:19,551 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MainToken__success
[2020-11-24 21:25:19,551 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MainToken__fail
[2020-11-24 21:25:19,551 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MainToken__success
[2020-11-24 21:25:19,551 INFO  L138     BoogieDeclarations]: Found implementation of procedure init_MainToken__fail
[2020-11-24 21:25:19,551 INFO  L138     BoogieDeclarations]: Found implementation of procedure init_MainToken__success
[2020-11-24 21:25:19,551 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialized_MainToken__fail
[2020-11-24 21:25:19,551 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialized_MainToken__success
[2020-11-24 21:25:19,551 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-24 21:25:19,552 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-24 21:25:19,552 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-24 21:25:19,552 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-24 21:25:19,552 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-24 21:25:19,552 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-24 21:25:19,552 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-24 21:25:19,552 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-24 21:25:19,552 INFO  L138     BoogieDeclarations]: Found implementation of procedure canMint_pre__fail
[2020-11-24 21:25:19,552 INFO  L138     BoogieDeclarations]: Found implementation of procedure canMint_pre__success
[2020-11-24 21:25:19,552 INFO  L138     BoogieDeclarations]: Found implementation of procedure hasMintPermission_pre__fail
[2020-11-24 21:25:19,552 INFO  L138     BoogieDeclarations]: Found implementation of procedure hasMintPermission_pre__success
[2020-11-24 21:25:19,552 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__fail
[2020-11-24 21:25:19,552 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__success
[2020-11-24 21:25:19,553 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__fail
[2020-11-24 21:25:19,553 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__success
[2020-11-24 21:25:19,553 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Basic
[2020-11-24 21:25:19,553 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Basic
[2020-11-24 21:25:19,553 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-24 21:25:19,553 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-24 21:25:19,553 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BasicToken
[2020-11-24 21:25:19,553 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BasicToken
[2020-11-24 21:25:19,553 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-24 21:25:19,553 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-24 21:25:19,553 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_StandardToken
[2020-11-24 21:25:19,553 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_StandardToken
[2020-11-24 21:25:19,553 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-24 21:25:19,554 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-24 21:25:19,554 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MintableToken
[2020-11-24 21:25:19,554 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MintableToken
[2020-11-24 21:25:19,554 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_FreezableToken
[2020-11-24 21:25:19,554 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_FreezableToken
[2020-11-24 21:25:19,554 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BurnableToken
[2020-11-24 21:25:19,554 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BurnableToken
[2020-11-24 21:25:19,554 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Pausable
[2020-11-24 21:25:19,554 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Pausable
[2020-11-24 21:25:19,554 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_FreezableMintableToken
[2020-11-24 21:25:19,554 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_FreezableMintableToken
[2020-11-24 21:25:19,554 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Consts
[2020-11-24 21:25:19,554 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Consts
[2020-11-24 21:25:19,554 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MainToken
[2020-11-24 21:25:19,555 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-24 21:25:19,555 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-24 21:25:19,555 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-24 21:25:20,764 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 21:25:20,765 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 21:25:20,765 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 21:25:21,159 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-24 21:25:21,159 INFO  L286             CfgBuilder]: Removed 13 assue(true) statements.
[2020-11-24 21:25:21,162 INFO  L202        PluginConnector]: Adding new model MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_totalsupply.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 09:25:21 BoogieIcfgContainer
[2020-11-24 21:25:21,162 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:25:19" (2/2) ...
[2020-11-24 21:25:21,162 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-24 21:25:21,163 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@220bbd69 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 09:25:21, skipping insertion in model container
[2020-11-24 21:25:21,163 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-24 21:25:21,163 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-24 21:25:21,163 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-24 21:25:21,164 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-24 21:25:21,164 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:25:19" (1/3) ...
[2020-11-24 21:25:21,164 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@7f775f2 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 09:25:21, skipping insertion in model container
[2020-11-24 21:25:21,164 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:25:19" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-24 21:25:21,196 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 09:25:21 NWAContainer
[2020-11-24 21:25:21,196 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-24 21:25:21,196 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-24 21:25:21,196 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-24 21:25:21,197 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-24 21:25:21,197 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_totalsupply.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 09:25:21" (3/4) ...
[2020-11-24 21:25:21,198 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@5b0bbc2a and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 09:25:21, skipping insertion in model container
[2020-11-24 21:25:21,198 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 09:25:21" (4/4) ...
[2020-11-24 21:25:21,201 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-24 21:25:21,210 INFO  L110   BuchiProductObserver]: Initial RCFG 5258 locations, 7412 edges
[2020-11-24 21:25:21,210 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-24 21:25:21,223 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-24 21:25:25,273 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-24 21:25:25,287 INFO  L110   BuchiProductObserver]: BuchiProgram size 13180 locations, 24265 edges
[2020-11-24 21:25:25,287 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 09:25:25 BoogieIcfgContainer
[2020-11-24 21:25:25,287 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-24 21:25:25,287 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-24 21:25:25,287 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-24 21:25:25,289 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-24 21:25:25,289 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 09:25:25" (1/1) ...
[2020-11-24 21:25:25,506 INFO  L313           BlockEncoder]: Initial Icfg 13180 locations, 24265 edges
[2020-11-24 21:25:25,506 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-24 21:25:25,506 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-24 21:25:25,507 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-24 21:25:25,507 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-24 21:25:25,529 INFO  L70    emoveInfeasibleEdges]: Removed 303 edges and 29 locations because of local infeasibility
[2020-11-24 21:25:25,551 INFO  L70        RemoveSinkStates]: Removed 158 edges and 105 locations by removing sink states
[2020-11-24 21:25:25,574 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-24 21:25:25,581 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-24 21:25:25,588 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-24 21:25:25,588 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-24 21:25:25,595 INFO  L313           BlockEncoder]: Encoded RCFG 12978 locations, 23703 edges
[2020-11-24 21:25:25,595 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 09:25:25 BasicIcfg
[2020-11-24 21:25:25,595 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-24 21:25:25,595 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-24 21:25:25,596 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-24 21:25:25,597 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-24 21:25:25,597 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:25:25,597 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:25:19" (1/6) ...
[2020-11-24 21:25:25,599 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2c54a170 and model type MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_totalsupply.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 09:25:25, skipping insertion in model container
[2020-11-24 21:25:25,599 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:25:25,599 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:25:19" (2/6) ...
[2020-11-24 21:25:25,599 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2c54a170 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 09:25:25, skipping insertion in model container
[2020-11-24 21:25:25,599 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:25:25,599 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_totalsupply.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 09:25:21" (3/6) ...
[2020-11-24 21:25:25,599 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2c54a170 and model type MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_totalsupply.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 09:25:25, skipping insertion in model container
[2020-11-24 21:25:25,599 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:25:25,599 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 09:25:21" (4/6) ...
[2020-11-24 21:25:25,599 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2c54a170 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 09:25:25, skipping insertion in model container
[2020-11-24 21:25:25,599 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:25:25,599 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 09:25:25" (5/6) ...
[2020-11-24 21:25:25,600 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2c54a170 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 24.11 09:25:25, skipping insertion in model container
[2020-11-24 21:25:25,600 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:25:25,600 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 09:25:25" (6/6) ...
[2020-11-24 21:25:25,601 INFO  L404   chiAutomizerObserver]: Analyzing ICFG MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_totalsupply.bpl_BEv2
[2020-11-24 21:25:25,632 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-24 21:25:25,632 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-24 21:25:25,632 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-24 21:25:25,632 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-24 21:25:25,632 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-24 21:25:25,632 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-24 21:25:25,632 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-24 21:25:25,632 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-24 21:25:25,632 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-24 21:25:25,717 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 12978 states.
[2020-11-24 21:25:25,848 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:25:25,848 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:25:25,848 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:25:25,856 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:25:25,856 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:25:25,856 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-24 21:25:25,856 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 12978 states.
[2020-11-24 21:25:25,902 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:25:25,902 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:25:25,902 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:25:25,904 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:25:25,904 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_totalSupply_BasicToken0 := false;
[L2]                  call_totalSupply_BasicToken0 := false;
[L2]      CALL        call main();
[L14378]              assume null == 0;
[L14379]  CALL        call this := FreshRefGenerator__success();
[L6396]               havoc newRef;
[L6397]               assume Alloc[newRef] == false;
[L6398]               Alloc[newRef] := true;
[L6399]               assume newRef != null;
[L14379]  RET         call this := FreshRefGenerator__success();
[L14380]              assume now >= 0;
[L14381]              assume DType[this] == MainToken;
[L14382]              assume msgvalue_MSG == 0;
[L14383]              gas := gas - 53000;
[L14384]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4183]               havoc __exception;
[L4184]               revert := false;
[L4185]   COND FALSE  !(__exception)
[L4222]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9205]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9007]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8983]               assume msgsender_MSG != null;
[L8984]               Balance[this] := 0;
[L8985]               TOKEN_DECIMALS_Consts[this] := 18;
[L8986]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L8987]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8988]               TOKEN_NAME_Consts[this] := -1051245219;
[L8989]               TOKEN_SYMBOL_Consts[this] := -1804535220;
[L8990]               PAUSED_Consts[this] := false;
[L8991]               __var_52 := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8992]               TARGET_USER_Consts[this] := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8993]               CONTINUE_MINTING_Consts[this] := true;
[L9007]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9008]   COND TRUE   revert
[L9205]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9206]   COND TRUE   revert
[L4222]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4223]               assume !revert && gas >= 0;
[L14384]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14385]              assume !revert && gas >= 0;

Loop:
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND TRUE   choice == 38
[L14131]              gas := gas - 21000;
[L14132]  COND FALSE  !(gas >= 0)
[L14388]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:25:25,919 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:25:25,920 INFO  L82        PathProgramCache]: Analyzing trace with hash -1444099910, now seen corresponding path program 1 times
[2020-11-24 21:25:25,924 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:25:25,949 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:25:25,986 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 21:25:25,987 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:25:25,987 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 21:25:26,433 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:25:26,443 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 21:25:26,443 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-24 21:25:26,445 INFO  L87              Difference]: Start difference. First operand 12978 states. Second operand 4 states.
[2020-11-24 21:25:27,646 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:25:27,646 INFO  L93              Difference]: Finished difference Result 8080 states and 9481 transitions.
[2020-11-24 21:25:27,646 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 21:25:27,647 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8080 states and 9481 transitions.
[2020-11-24 21:25:27,683 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:25:27,726 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8080 states to 8076 states and 9473 transitions.
[2020-11-24 21:25:27,726 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-24 21:25:27,730 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1815
[2020-11-24 21:25:27,730 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8076 states and 9473 transitions.
[2020-11-24 21:25:27,756 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:25:27,756 INFO  L728         BuchiCegarLoop]: Abstraction has 8076 states and 9473 transitions.
[2020-11-24 21:25:27,777 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8076 states and 9473 transitions.
[2020-11-24 21:25:27,885 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8076 to 8076.
[2020-11-24 21:25:27,885 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8076 states.
[2020-11-24 21:25:27,899 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8076 states to 8076 states and 9473 transitions.
[2020-11-24 21:25:27,900 INFO  L751         BuchiCegarLoop]: Abstraction has 8076 states and 9473 transitions.
[2020-11-24 21:25:27,900 INFO  L631         BuchiCegarLoop]: Abstraction has 8076 states and 9473 transitions.
[2020-11-24 21:25:27,900 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-24 21:25:27,900 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8076 states and 9473 transitions.
[2020-11-24 21:25:27,913 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:25:27,913 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:25:27,913 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:25:27,915 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:25:27,915 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_totalSupply_BasicToken0 := false;
[L2]                  call_totalSupply_BasicToken0 := false;
[L2]      CALL        call main();
[L14378]              assume null == 0;
[L14379]  CALL        call this := FreshRefGenerator__success();
[L6396]               havoc newRef;
[L6397]               assume Alloc[newRef] == false;
[L6398]               Alloc[newRef] := true;
[L6399]               assume newRef != null;
[L14379]  RET         call this := FreshRefGenerator__success();
[L14380]              assume now >= 0;
[L14381]              assume DType[this] == MainToken;
[L14382]              assume msgvalue_MSG == 0;
[L14383]              gas := gas - 53000;
[L14384]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4183]               havoc __exception;
[L4184]               revert := false;
[L4185]   COND FALSE  !(__exception)
[L4222]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9205]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9007]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8983]               assume msgsender_MSG != null;
[L8984]               Balance[this] := 0;
[L8985]               TOKEN_DECIMALS_Consts[this] := 18;
[L8986]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L8987]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8988]               TOKEN_NAME_Consts[this] := -1051245219;
[L8989]               TOKEN_SYMBOL_Consts[this] := -1804535220;
[L8990]               PAUSED_Consts[this] := false;
[L8991]               __var_52 := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8992]               TARGET_USER_Consts[this] := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8993]               CONTINUE_MINTING_Consts[this] := true;
[L9007]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9008]   COND TRUE   revert
[L9205]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9206]   COND TRUE   revert
[L4222]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4223]               assume !revert && gas >= 0;
[L14384]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14385]              assume !revert && gas >= 0;
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND TRUE   choice == 38
[L14131]              gas := gas - 21000;
[L14132]  COND TRUE   gas >= 0
[L14133]              assume msgvalue_MSG == 0;
[L14134]  CALL        call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume totalSupply__BasicToken[this] >= 0 && totalSupply__BasicToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_totalSupply_BasicToken0 := true;
[L2]                  call_totalSupply_BasicToken0 := false;
[L2]                  revert := revert_hold;
[L362]                havoc __exception;
[L363]                revert := false;
[L364]    COND FALSE  !(__exception)
[L401]    CALL        call __ret_0_ := totalSupply_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6583]               __ret_0_ := totalSupply__BasicToken[this];
[L401]    RET         call __ret_0_ := totalSupply_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L402]                assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((__ret_0_ == totalSupply__BasicToken[this] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14134]  RET         call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L14388]  RET         call CorralChoice_MainToken(this);

Loop:
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND TRUE   choice == 38
[L14131]              gas := gas - 21000;
[L14132]  COND TRUE   gas >= 0
[L14133]              assume msgvalue_MSG == 0;
[L14134]  CALL        call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume totalSupply__BasicToken[this] >= 0 && totalSupply__BasicToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_totalSupply_BasicToken0 := true;
[L2]                  call_totalSupply_BasicToken0 := false;
[L2]                  revert := revert_hold;
[L362]                havoc __exception;
[L363]                revert := false;
[L364]    COND FALSE  !(__exception)
[L401]    CALL        call __ret_0_ := totalSupply_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6583]               __ret_0_ := totalSupply__BasicToken[this];
[L401]    RET         call __ret_0_ := totalSupply_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L402]                assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((__ret_0_ == totalSupply__BasicToken[this] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14134]  RET         call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L14388]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:25:27,919 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:25:27,920 INFO  L82        PathProgramCache]: Analyzing trace with hash -363945506, now seen corresponding path program 1 times
[2020-11-24 21:25:27,921 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:25:27,933 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:25:27,964 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 21:25:27,964 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:25:27,964 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-24 21:25:27,965 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:25:27,965 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-24 21:25:27,965 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=19, Unknown=0, NotChecked=0, Total=30
[2020-11-24 21:25:27,966 INFO  L87              Difference]: Start difference. First operand 8076 states and 9473 transitions. cyclomatic complexity: 1415 Second operand 6 states.
[2020-11-24 21:25:31,841 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:25:31,841 INFO  L93              Difference]: Finished difference Result 13838 states and 15489 transitions.
[2020-11-24 21:25:31,841 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-24 21:25:31,842 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 13838 states and 15489 transitions.
[2020-11-24 21:25:31,870 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-24 21:25:31,912 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 13838 states to 13446 states and 15041 transitions.
[2020-11-24 21:25:31,913 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3385
[2020-11-24 21:25:31,915 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 3414
[2020-11-24 21:25:31,915 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 13446 states and 15041 transitions.
[2020-11-24 21:25:31,927 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:25:31,927 INFO  L728         BuchiCegarLoop]: Abstraction has 13446 states and 15041 transitions.
[2020-11-24 21:25:31,935 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 13446 states and 15041 transitions.
[2020-11-24 21:25:32,057 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 13446 to 12828.
[2020-11-24 21:25:32,057 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 12828 states.
[2020-11-24 21:25:32,072 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 12828 states to 12828 states and 14236 transitions.
[2020-11-24 21:25:32,073 INFO  L751         BuchiCegarLoop]: Abstraction has 12828 states and 14236 transitions.
[2020-11-24 21:25:32,073 INFO  L631         BuchiCegarLoop]: Abstraction has 12828 states and 14236 transitions.
[2020-11-24 21:25:32,073 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-24 21:25:32,073 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 12828 states and 14236 transitions.
[2020-11-24 21:25:32,089 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-24 21:25:32,089 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:25:32,089 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:25:32,095 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:25:32,095 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_totalSupply_BasicToken0 := false;
[L2]                  call_totalSupply_BasicToken0 := false;
[L2]      CALL        call main();
[L14378]              assume null == 0;
[L14379]  CALL        call this := FreshRefGenerator__success();
[L6396]               havoc newRef;
[L6397]               assume Alloc[newRef] == false;
[L6398]               Alloc[newRef] := true;
[L6399]               assume newRef != null;
[L14379]  RET         call this := FreshRefGenerator__success();
[L14380]              assume now >= 0;
[L14381]              assume DType[this] == MainToken;
[L14382]              assume msgvalue_MSG == 0;
[L14383]              gas := gas - 53000;
[L14384]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4183]               havoc __exception;
[L4184]               revert := false;
[L4185]   COND FALSE  !(__exception)
[L4222]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9205]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9007]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8983]               assume msgsender_MSG != null;
[L8984]               Balance[this] := 0;
[L8985]               TOKEN_DECIMALS_Consts[this] := 18;
[L8986]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L8987]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8988]               TOKEN_NAME_Consts[this] := -1051245219;
[L8989]               TOKEN_SYMBOL_Consts[this] := -1804535220;
[L8990]               PAUSED_Consts[this] := false;
[L8991]               __var_52 := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8992]               TARGET_USER_Consts[this] := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8993]               CONTINUE_MINTING_Consts[this] := true;
[L9007]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9008]   COND FALSE  !(revert)
[L9205]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9206]   COND FALSE  !(revert)
[L9209]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L9209]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9210]   COND FALSE  !(revert)
[L9213]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L9213]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9214]   COND FALSE  !(revert)
[L9217]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L9217]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9218]   COND FALSE  !(revert)
[L9221]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L9221]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9222]   COND FALSE  !(revert)
[L9225]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L9225]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9226]   COND FALSE  !(revert)
[L9229]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L9229]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9230]   COND FALSE  !(revert)
[L9233]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L9233]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9234]   COND FALSE  !(revert)
[L9237]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8792]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8792]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8793]   COND FALSE  !(revert)
[L8796]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L8796]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L8797]   COND FALSE  !(revert)
[L8800]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8800]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8801]   COND FALSE  !(revert)
[L8804]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L8804]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8805]   COND FALSE  !(revert)
[L8808]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L8808]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8809]   COND FALSE  !(revert)
[L8812]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8812]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8813]   COND FALSE  !(revert)
[L8816]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L8816]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8817]   COND FALSE  !(revert)
[L8820]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8749]               assume msgsender_MSG != null;
[L8750]               Balance[this] := 0;
[L8820]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8821]   COND FALSE  !(revert)
[L9237]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9238]   COND FALSE  !(revert)
[L9241]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8536]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8536]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8537]   COND FALSE  !(revert)
[L8540]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8540]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8541]   COND FALSE  !(revert)
[L8544]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8513]               assume msgsender_MSG != null;
[L8514]               Balance[this] := 0;
[L8544]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8545]   COND FALSE  !(revert)
[L9241]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9242]   COND FALSE  !(revert)
[L9245]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8662]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8662]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8663]   COND FALSE  !(revert)
[L8666]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8642]               assume msgsender_MSG != null;
[L8643]               Balance[this] := 0;
[L8644]               paused_Pausable[this] := false;
[L8666]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8667]   COND FALSE  !(revert)
[L9245]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9249]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9133]               assume msgsender_MSG != null;
[L9134]               Balance[this] := 0;
[L9135]               initialized_MainToken[this] := false;
[L9137]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9404]   COND FALSE  !(!!initialized_MainToken[this])
[L9408]               initialized_MainToken[this] := true;
[L9409]   COND FALSE  !(PAUSED_Consts[this])
[L9419]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9429]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9137]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   COND TRUE   DType[this] == MainToken
[L9142]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7055]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12332]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7055]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   COND TRUE   DType[this] == MainToken
[L7060]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7103]               __var_11 := null;
[L7104]   COND FALSE  !(!(_newOwner_s581 != null))
[L7108]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7109]               owner_Ownable[this] := _newOwner_s581;
[L7060]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7061]   COND FALSE  !(revert)
[L9142]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9143]   COND FALSE  !(revert)
[L9249]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9250]   COND FALSE  !(revert)
[L4222]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4223]               assume !revert && gas >= 0;
[L14384]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14385]              assume !revert && gas >= 0;
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND TRUE   choice == 38
[L14131]              gas := gas - 21000;
[L14132]  COND TRUE   gas >= 0
[L14133]              assume msgvalue_MSG == 0;
[L14134]  CALL        call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume totalSupply__BasicToken[this] >= 0 && totalSupply__BasicToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_totalSupply_BasicToken0 := true;
[L2]                  call_totalSupply_BasicToken0 := false;
[L2]                  revert := revert_hold;
[L362]                havoc __exception;
[L363]                revert := false;
[L364]    COND FALSE  !(__exception)
[L401]    CALL        call __ret_0_ := totalSupply_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6583]               __ret_0_ := totalSupply__BasicToken[this];
[L401]    RET         call __ret_0_ := totalSupply_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L402]                assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((__ret_0_ == totalSupply__BasicToken[this] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14134]  RET         call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L14388]  RET         call CorralChoice_MainToken(this);

Loop:
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND TRUE   choice == 38
[L14131]              gas := gas - 21000;
[L14132]  COND FALSE  !(gas >= 0)
[L14388]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:25:32,106 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:25:32,106 INFO  L82        PathProgramCache]: Analyzing trace with hash 1223912770, now seen corresponding path program 1 times
[2020-11-24 21:25:32,107 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:25:32,142 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:25:32,653 INFO  L134       CoverageAnalysis]: Checked inductivity of 9823 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9823 trivial. 0 not checked.
[2020-11-24 21:25:32,653 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:25:32,653 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 21:25:32,654 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:25:32,654 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 21:25:32,654 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-24 21:25:32,654 INFO  L87              Difference]: Start difference. First operand 12828 states and 14236 transitions. cyclomatic complexity: 1426 Second operand 4 states.
[2020-11-24 21:25:32,745 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:25:32,745 INFO  L93              Difference]: Finished difference Result 12616 states and 13937 transitions.
[2020-11-24 21:25:32,745 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 21:25:32,745 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 12616 states and 13937 transitions.
[2020-11-24 21:25:32,771 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 21:25:32,807 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 12616 states to 12600 states and 13920 transitions.
[2020-11-24 21:25:32,807 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3222
[2020-11-24 21:25:32,808 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 3222
[2020-11-24 21:25:32,809 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 12600 states and 13920 transitions.
[2020-11-24 21:25:32,817 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:25:32,817 INFO  L728         BuchiCegarLoop]: Abstraction has 12600 states and 13920 transitions.
[2020-11-24 21:25:32,826 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 12600 states and 13920 transitions.
[2020-11-24 21:25:32,910 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 12600 to 12596.
[2020-11-24 21:25:32,910 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 12596 states.
[2020-11-24 21:25:32,924 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 12596 states to 12596 states and 13916 transitions.
[2020-11-24 21:25:32,924 INFO  L751         BuchiCegarLoop]: Abstraction has 12596 states and 13916 transitions.
[2020-11-24 21:25:32,924 INFO  L631         BuchiCegarLoop]: Abstraction has 12596 states and 13916 transitions.
[2020-11-24 21:25:32,924 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-24 21:25:32,925 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 12596 states and 13916 transitions.
[2020-11-24 21:25:32,938 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 21:25:32,939 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:25:32,939 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:25:32,943 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:25:32,943 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_totalSupply_BasicToken0 := false;
[L2]                  call_totalSupply_BasicToken0 := false;
[L2]      CALL        call main();
[L14378]              assume null == 0;
[L14379]  CALL        call this := FreshRefGenerator__success();
[L6396]               havoc newRef;
[L6397]               assume Alloc[newRef] == false;
[L6398]               Alloc[newRef] := true;
[L6399]               assume newRef != null;
[L14379]  RET         call this := FreshRefGenerator__success();
[L14380]              assume now >= 0;
[L14381]              assume DType[this] == MainToken;
[L14382]              assume msgvalue_MSG == 0;
[L14383]              gas := gas - 53000;
[L14384]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4183]               havoc __exception;
[L4184]               revert := false;
[L4185]   COND FALSE  !(__exception)
[L4222]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9205]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9007]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8983]               assume msgsender_MSG != null;
[L8984]               Balance[this] := 0;
[L8985]               TOKEN_DECIMALS_Consts[this] := 18;
[L8986]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L8987]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8988]               TOKEN_NAME_Consts[this] := -1051245219;
[L8989]               TOKEN_SYMBOL_Consts[this] := -1804535220;
[L8990]               PAUSED_Consts[this] := false;
[L8991]               __var_52 := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8992]               TARGET_USER_Consts[this] := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8993]               CONTINUE_MINTING_Consts[this] := true;
[L9007]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9008]   COND FALSE  !(revert)
[L9205]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9206]   COND FALSE  !(revert)
[L9209]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L9209]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9210]   COND FALSE  !(revert)
[L9213]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L9213]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9214]   COND FALSE  !(revert)
[L9217]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L9217]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9218]   COND FALSE  !(revert)
[L9221]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L9221]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9222]   COND FALSE  !(revert)
[L9225]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L9225]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9226]   COND FALSE  !(revert)
[L9229]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L9229]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9230]   COND FALSE  !(revert)
[L9233]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L9233]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9234]   COND FALSE  !(revert)
[L9237]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8792]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8792]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8793]   COND FALSE  !(revert)
[L8796]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L8796]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L8797]   COND FALSE  !(revert)
[L8800]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8800]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8801]   COND FALSE  !(revert)
[L8804]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L8804]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8805]   COND FALSE  !(revert)
[L8808]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L8808]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8809]   COND FALSE  !(revert)
[L8812]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8812]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8813]   COND FALSE  !(revert)
[L8816]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L8816]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8817]   COND FALSE  !(revert)
[L8820]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8749]               assume msgsender_MSG != null;
[L8750]               Balance[this] := 0;
[L8820]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8821]   COND FALSE  !(revert)
[L9237]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9238]   COND FALSE  !(revert)
[L9241]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8536]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8536]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8537]   COND FALSE  !(revert)
[L8540]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8540]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8541]   COND FALSE  !(revert)
[L8544]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8513]               assume msgsender_MSG != null;
[L8514]               Balance[this] := 0;
[L8544]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8545]   COND FALSE  !(revert)
[L9241]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9242]   COND FALSE  !(revert)
[L9245]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8662]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8662]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8663]   COND FALSE  !(revert)
[L8666]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8642]               assume msgsender_MSG != null;
[L8643]               Balance[this] := 0;
[L8644]               paused_Pausable[this] := false;
[L8666]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8667]   COND FALSE  !(revert)
[L9245]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9249]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9133]               assume msgsender_MSG != null;
[L9134]               Balance[this] := 0;
[L9135]               initialized_MainToken[this] := false;
[L9137]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9404]   COND FALSE  !(!!initialized_MainToken[this])
[L9408]               initialized_MainToken[this] := true;
[L9409]   COND FALSE  !(PAUSED_Consts[this])
[L9419]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9429]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9137]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   COND TRUE   DType[this] == MainToken
[L9142]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7055]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12332]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7055]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   COND TRUE   DType[this] == MainToken
[L7060]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7103]               __var_11 := null;
[L7104]   COND FALSE  !(!(_newOwner_s581 != null))
[L7108]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7109]               owner_Ownable[this] := _newOwner_s581;
[L7060]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7061]   COND FALSE  !(revert)
[L9142]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9143]   COND FALSE  !(revert)
[L9249]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9250]   COND FALSE  !(revert)
[L4222]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4223]               assume !revert && gas >= 0;
[L14384]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14385]              assume !revert && gas >= 0;
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND TRUE   choice == 38
[L14131]              gas := gas - 21000;
[L14132]  COND TRUE   gas >= 0
[L14133]              assume msgvalue_MSG == 0;
[L14134]  CALL        call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume totalSupply__BasicToken[this] >= 0 && totalSupply__BasicToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_totalSupply_BasicToken0 := true;
[L2]                  call_totalSupply_BasicToken0 := false;
[L2]                  revert := revert_hold;
[L362]                havoc __exception;
[L363]                revert := false;
[L364]    COND TRUE   __exception
[L365]                __tmp__Balance := Balance;
[L366]                __tmp__DType := DType;
[L367]                __tmp__Alloc := Alloc;
[L368]                __tmp__balance_ADDR := balance_ADDR;
[L369]                __tmp__M_Ref_int := M_Ref_int;
[L370]                __tmp__sum_balances0 := sum_balances0;
[L371]                __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L372]                __tmp__M_Ref_Ref := M_Ref_Ref;
[L373]                __tmp__sum_allowed1 := sum_allowed1;
[L374]                __tmp__M_int_int := M_int_int;
[L375]                __tmp__sum_chains2 := sum_chains2;
[L376]                __tmp__sum_freezings3 := sum_freezings3;
[L377]                __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L378]                __tmp__Length := Length;
[L379]                __tmp__now := now;
[L380]                __tmp__balances_BasicToken := balances_BasicToken;
[L381]                __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L382]                __tmp__allowed_StandardToken := allowed_StandardToken;
[L383]                __tmp__owner_Ownable := owner_Ownable;
[L384]                __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L385]                __tmp__chains_FreezableToken := chains_FreezableToken;
[L386]                __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L387]                __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L388]                __tmp__paused_Pausable := paused_Pausable;
[L389]                __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L390]                __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L391]                __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L392]                __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L393]                __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L394]                __tmp__PAUSED_Consts := PAUSED_Consts;
[L395]                __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L396]                __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L397]                __tmp__initialized_MainToken := initialized_MainToken;
[L398]    CALL        call __ret_0_ := totalSupply_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6577]               __ret_0_ := __tmp__totalSupply__BasicToken[this];
[L398]    RET         call __ret_0_ := totalSupply_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L399]                assume revert || gas < 0;
[L14134]  RET         call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L14388]  RET         call CorralChoice_MainToken(this);

Loop:
[L14388]  CALL       call CorralChoice_MainToken(this);
[L14045]             havoc msgsender_MSG;
[L14046]             havoc msgvalue_MSG;
[L14047]             havoc choice;
[L14048]             havoc __ret_0_totalSupply;
[L14049]             havoc _owner_s729;
[L14050]             havoc balance_s729;
[L14051]             havoc _to_s1572;
[L14052]             havoc _value_s1572;
[L14053]             havoc _success_s1572;
[L14054]             havoc _owner_s395;
[L14055]             havoc _spender_s395;
[L14056]             havoc __ret_0_allowance;
[L14057]             havoc _from_s1551;
[L14058]             havoc _to_s1551;
[L14059]             havoc _value_s1551;
[L14060]             havoc _success_s1551;
[L14061]             havoc _spender_s379;
[L14062]             havoc _value_s379;
[L14063]             havoc __ret_0_approve;
[L14064]             havoc _spender_s437;
[L14065]             havoc _addedValue_s437;
[L14066]             havoc __ret_0_increaseApproval;
[L14067]             havoc _spender_s497;
[L14068]             havoc _subtractedValue_s497;
[L14069]             havoc __ret_0_decreaseApproval;
[L14070]             havoc __ret_0_owner;
[L14071]             havoc _newOwner_s558;
[L14072]             havoc __ret_0_mintingFinished;
[L14073]             havoc _to_s664;
[L14074]             havoc _amount_s664;
[L14075]             havoc __ret_0_mint;
[L14076]             havoc __ret_0_finishMinting;
[L14077]             havoc _owner_s742;
[L14078]             havoc balance_s742;
[L14079]             havoc _owner_s754;
[L14080]             havoc balance_s754;
[L14081]             havoc _addr_s792;
[L14082]             havoc count_s792;
[L14083]             havoc _addr_s849;
[L14084]             havoc _index_s849;
[L14085]             havoc _release_s849;
[L14086]             havoc _balance_s849;
[L14087]             havoc _to_s938;
[L14088]             havoc _amount_s938;
[L14089]             havoc _until_s938;
[L14090]             havoc tokens_s1107;
[L14091]             havoc _value_s1261;
[L14092]             havoc __ret_0_paused;
[L14093]             havoc _to_s1449;
[L14094]             havoc _amount_s1449;
[L14095]             havoc _until_s1449;
[L14096]             havoc __ret_0_mintAndFreeze;
[L14097]             havoc __ret_0_TOKEN_DECIMALS;
[L14098]             havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]             havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]             havoc __ret_0_TOKEN_NAME;
[L14101]             havoc __ret_0_TOKEN_SYMBOL;
[L14102]             havoc __ret_0_PAUSED;
[L14103]             havoc __ret_0_TARGET_USER;
[L14104]             havoc __ret_0_CONTINUE_MINTING;
[L14105]             havoc __ret_0_initialized;
[L14106]             havoc _name_s1511;
[L14107]             havoc _symbol_s1519;
[L14108]             havoc _decimals_s1527;
[L14109]             havoc tmpNow;
[L14110]             havoc gas;
[L14111]             assume gas > 4000000 && gas <= 8000000;
[L14112]             tmpNow := now;
[L14113]             havoc now;
[L14114]             assume now > tmpNow;
[L14115]             assume msgsender_MSG != null;
[L14116]             assume DType[msgsender_MSG] != ERC20Basic;
[L14117]             assume DType[msgsender_MSG] != SafeMath;
[L14118]             assume DType[msgsender_MSG] != BasicToken;
[L14119]             assume DType[msgsender_MSG] != ERC20;
[L14120]             assume DType[msgsender_MSG] != StandardToken;
[L14121]             assume DType[msgsender_MSG] != Ownable;
[L14122]             assume DType[msgsender_MSG] != MintableToken;
[L14123]             assume DType[msgsender_MSG] != FreezableToken;
[L14124]             assume DType[msgsender_MSG] != BurnableToken;
[L14125]             assume DType[msgsender_MSG] != Pausable;
[L14126]             assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]             assume DType[msgsender_MSG] != Consts;
[L14128]             assume DType[msgsender_MSG] != MainToken;
[L14129]             Alloc[msgsender_MSG] := true;
[L14130]  COND TRUE  choice == 38
[L14131]             gas := gas - 21000;
[L14132]  COND TRUE  gas >= 0
[L14133]             assume msgvalue_MSG == 0;
[L14134]  CALL       call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume totalSupply__BasicToken[this] >= 0 && totalSupply__BasicToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_BasicToken0 := true;
[L2]                 call_totalSupply_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L362]               havoc __exception;
[L363]               revert := false;
[L364]    COND TRUE  __exception
[L365]               __tmp__Balance := Balance;
[L366]               __tmp__DType := DType;
[L367]               __tmp__Alloc := Alloc;
[L368]               __tmp__balance_ADDR := balance_ADDR;
[L369]               __tmp__M_Ref_int := M_Ref_int;
[L370]               __tmp__sum_balances0 := sum_balances0;
[L371]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L372]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L373]               __tmp__sum_allowed1 := sum_allowed1;
[L374]               __tmp__M_int_int := M_int_int;
[L375]               __tmp__sum_chains2 := sum_chains2;
[L376]               __tmp__sum_freezings3 := sum_freezings3;
[L377]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L378]               __tmp__Length := Length;
[L379]               __tmp__now := now;
[L380]               __tmp__balances_BasicToken := balances_BasicToken;
[L381]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L382]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L383]               __tmp__owner_Ownable := owner_Ownable;
[L384]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L385]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L386]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L387]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L388]               __tmp__paused_Pausable := paused_Pausable;
[L389]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L390]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L391]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L392]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L393]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L394]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L395]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L396]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L397]               __tmp__initialized_MainToken := initialized_MainToken;
[L398]    CALL       call __ret_0_ := totalSupply_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6577]              __ret_0_ := __tmp__totalSupply__BasicToken[this];
[L398]    RET        call __ret_0_ := totalSupply_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L399]               assume revert || gas < 0;
[L14134]  RET        call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L14388]  RET        call CorralChoice_MainToken(this);

[2020-11-24 21:25:32,952 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:25:32,952 INFO  L82        PathProgramCache]: Analyzing trace with hash -1764744617, now seen corresponding path program 1 times
[2020-11-24 21:25:32,953 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:25:32,986 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:25:33,534 INFO  L134       CoverageAnalysis]: Checked inductivity of 9823 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9823 trivial. 0 not checked.
[2020-11-24 21:25:33,534 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:25:33,535 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-24 21:25:33,536 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:25:33,536 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-24 21:25:33,536 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-24 21:25:33,536 INFO  L87              Difference]: Start difference. First operand 12596 states and 13916 transitions. cyclomatic complexity: 1338 Second operand 5 states.
[2020-11-24 21:25:34,068 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:25:34,068 INFO  L93              Difference]: Finished difference Result 7541 states and 8308 transitions.
[2020-11-24 21:25:34,068 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 21:25:34,068 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7541 states and 8308 transitions.
[2020-11-24 21:25:34,082 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-24 21:25:34,082 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7541 states to 0 states and 0 transitions.
[2020-11-24 21:25:34,082 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-24 21:25:34,082 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-24 21:25:34,082 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-24 21:25:34,082 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:25:34,082 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 21:25:34,082 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 21:25:34,082 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 21:25:34,082 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-24 21:25:34,082 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-24 21:25:34,082 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-24 21:25:34,083 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-24 21:25:34,086 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 09:25:34 BasicIcfg
[2020-11-24 21:25:34,086 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-24 21:25:34,086 INFO  L168              Benchmark]: Toolchain (without parser) took 14952.35 ms. Allocated memory was 1.0 GB in the beginning and 3.1 GB in the end (delta: 2.0 GB). Free memory was 919.1 MB in the beginning and 2.2 GB in the end (delta: -1.3 GB). Peak memory consumption was 727.9 MB. Max. memory is 15.3 GB.
[2020-11-24 21:25:34,087 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.18 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-24 21:25:34,087 INFO  L168              Benchmark]: Boogie Preprocessor took 186.88 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 892.2 MB in the end (delta: 26.8 MB). Peak memory consumption was 26.8 MB. Max. memory is 15.3 GB.
[2020-11-24 21:25:34,087 INFO  L168              Benchmark]: UtopiaSpecLang took 94.97 ms. Allocated memory is still 1.0 GB. Free memory was 892.2 MB in the beginning and 876.1 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-24 21:25:34,088 INFO  L168              Benchmark]: Boogie Printer took 33.23 ms. Allocated memory is still 1.0 GB. Free memory was 876.1 MB in the beginning and 870.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-24 21:25:34,088 INFO  L168              Benchmark]: RCFGBuilder took 1711.71 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 163.6 MB). Free memory was 870.8 MB in the beginning and 1.1 GB in the end (delta: -195.8 MB). Peak memory consumption was 247.7 MB. Max. memory is 15.3 GB.
[2020-11-24 21:25:34,088 INFO  L168              Benchmark]: UtopiaLTL2Aut took 33.13 ms. Allocated memory is still 1.2 GB. Free memory was 1.1 GB in the beginning and 1.1 GB in the end (delta: 7.7 MB). Peak memory consumption was 7.7 MB. Max. memory is 15.3 GB.
[2020-11-24 21:25:34,088 INFO  L168              Benchmark]: BÃ¼chi Program Product took 4091.12 ms. Allocated memory was 1.2 GB in the beginning and 1.6 GB in the end (delta: 382.7 MB). Free memory was 1.1 GB in the beginning and 860.4 MB in the end (delta: 198.4 MB). Peak memory consumption was 819.3 MB. Max. memory is 15.3 GB.
[2020-11-24 21:25:34,089 INFO  L168              Benchmark]: BlockEncodingV2 took 307.83 ms. Allocated memory is still 1.6 GB. Free memory was 860.4 MB in the beginning and 669.5 MB in the end (delta: 190.9 MB). Peak memory consumption was 190.9 MB. Max. memory is 15.3 GB.
[2020-11-24 21:25:34,089 INFO  L168              Benchmark]: BuchiAutomizer took 8490.42 ms. Allocated memory was 1.6 GB in the beginning and 3.1 GB in the end (delta: 1.5 GB). Free memory was 669.5 MB in the beginning and 2.2 GB in the end (delta: -1.5 GB). There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-24 21:25:34,092 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    13180 locations, 24265 edges
  - StatisticsResult: Encoded RCFG
    12978 locations, 23703 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.18 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 186.88 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 892.2 MB in the end (delta: 26.8 MB). Peak memory consumption was 26.8 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 94.97 ms. Allocated memory is still 1.0 GB. Free memory was 892.2 MB in the beginning and 876.1 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 33.23 ms. Allocated memory is still 1.0 GB. Free memory was 876.1 MB in the beginning and 870.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1711.71 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 163.6 MB). Free memory was 870.8 MB in the beginning and 1.1 GB in the end (delta: -195.8 MB). Peak memory consumption was 247.7 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 33.13 ms. Allocated memory is still 1.2 GB. Free memory was 1.1 GB in the beginning and 1.1 GB in the end (delta: 7.7 MB). Peak memory consumption was 7.7 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 4091.12 ms. Allocated memory was 1.2 GB in the beginning and 1.6 GB in the end (delta: 382.7 MB). Free memory was 1.1 GB in the beginning and 860.4 MB in the end (delta: 198.4 MB). Peak memory consumption was 819.3 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 307.83 ms. Allocated memory is still 1.6 GB. Free memory was 860.4 MB in the beginning and 669.5 MB in the end (delta: 190.9 MB). Peak memory consumption was 190.9 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 8490.42 ms. Allocated memory was 1.6 GB in the beginning and 3.1 GB in the end (delta: 1.5 GB). Free memory was 669.5 MB in the beginning and 2.2 GB in the end (delta: -1.5 GB). There was no memory consumed. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    5258 locations, 7412 edges
  - StatisticsResult: BuchiProgram size
    13180 locations, 24265 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 4 terminating modules (4 trivial, 0 deterministic, 0 nondeterministic). 4 modules have a trivial ranking function, the largest among these consists of 6 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 8.4s and 5 iterations.  TraceHistogramMax:38. Analysis of lassos took 1.7s. Construction of modules took 4.7s. BÃ¼chi inclusion checks took 0.9s. Highest rank in rank-based complementation 0. Minimization of det autom 4. Minimization of nondet autom 0. Automata minimization 0.3s AutomataMinimizationTime, 3 MinimizatonAttempts, 622 StatesRemovedByMinimization, 2 NontrivialMinimizations. Non-live state removal took 0.2s Buchi closure took 0.0s. Biggest automaton had 12828 states and ocurred in iteration 2.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 37016 SDtfs, 33475 SDslu, 50526 SDs, 0 SdLazy, 11850 SolverSat, 7039 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 4.7s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU4 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_totalSupply_(success_totalSupply_BasicToken0)asicToken0) ==> ( <>(success_totalSupply_BasicToken0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
