This is Ultimate 0.1.24-f1553f5-m
[2020-11-24 20:35:22,764 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-24 20:35:22,766 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-24 20:35:22,776 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-24 20:35:22,776 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-24 20:35:22,777 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-24 20:35:22,778 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-24 20:35:22,780 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-24 20:35:22,782 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-24 20:35:22,783 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-24 20:35:22,784 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-24 20:35:22,784 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-24 20:35:22,785 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-24 20:35:22,785 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-24 20:35:22,786 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-24 20:35:22,787 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-24 20:35:22,787 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-24 20:35:22,789 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-24 20:35:22,790 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-24 20:35:22,791 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-24 20:35:22,792 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-24 20:35:22,793 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-24 20:35:22,794 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-24 20:35:22,795 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-24 20:35:22,795 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-24 20:35:22,795 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-24 20:35:22,796 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-24 20:35:22,796 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-24 20:35:22,797 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-24 20:35:22,797 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-24 20:35:22,797 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-24 20:35:22,798 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-24 20:35:22,798 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-24 20:35:22,799 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-24 20:35:22,800 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-24 20:35:22,800 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-24 20:35:22,800 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-24 20:35:22,800 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-24 20:35:22,800 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-24 20:35:22,801 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-24 20:35:22,802 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-24 20:35:22,802 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-24 20:35:22,810 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-24 20:35:22,810 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-24 20:35:22,811 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-24 20:35:22,811 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-24 20:35:22,811 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-24 20:35:22,811 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-24 20:35:22,811 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-24 20:35:22,811 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-24 20:35:22,812 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-24 20:35:22,812 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-24 20:35:22,812 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-24 20:35:22,813 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-24 20:35:22,813 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-24 20:35:22,813 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-24 20:35:22,813 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-24 20:35:22,813 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-24 20:35:22,813 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-24 20:35:22,813 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-24 20:35:22,813 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-24 20:35:22,814 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-24 20:35:22,814 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-24 20:35:22,814 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-24 20:35:22,814 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-24 20:35:22,814 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-24 20:35:22,814 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-24 20:35:22,814 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-24 20:35:22,836 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-24 20:35:22,846 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-24 20:35:22,848 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-24 20:35:22,849 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-24 20:35:22,850 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-24 20:35:22,850 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/Litecoin_SV_0xee059f0ca1507e4e20c689b20cff71b5e924f7bd_transferfrom-normal.bpl
[2020-11-24 20:35:22,850 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/Litecoin_SV_0xee059f0ca1507e4e20c689b20cff71b5e924f7bd_transferfrom-normal.bpl'
[2020-11-24 20:35:22,932 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-24 20:35:22,934 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-24 20:35:22,934 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-24 20:35:22,934 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-24 20:35:22,934 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-24 20:35:22,951 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "Litecoin_SV_0xee059f0ca1507e4e20c689b20cff71b5e924f7bd_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:35:22" (1/1) ...
[2020-11-24 20:35:22,953 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "Litecoin_SV_0xee059f0ca1507e4e20c689b20cff71b5e924f7bd_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:35:22" (1/1) ...
[2020-11-24 20:35:22,989 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "Litecoin_SV_0xee059f0ca1507e4e20c689b20cff71b5e924f7bd_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:35:22" (1/1) ...
[2020-11-24 20:35:22,989 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "Litecoin_SV_0xee059f0ca1507e4e20c689b20cff71b5e924f7bd_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:35:22" (1/1) ...
[2020-11-24 20:35:23,014 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "Litecoin_SV_0xee059f0ca1507e4e20c689b20cff71b5e924f7bd_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:35:22" (1/1) ...
[2020-11-24 20:35:23,025 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "Litecoin_SV_0xee059f0ca1507e4e20c689b20cff71b5e924f7bd_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:35:22" (1/1) ...
[2020-11-24 20:35:23,033 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "Litecoin_SV_0xee059f0ca1507e4e20c689b20cff71b5e924f7bd_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:35:22" (1/1) ...
[2020-11-24 20:35:23,043 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-24 20:35:23,044 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-24 20:35:23,044 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-24 20:35:23,046 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-24 20:35:23,049 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "Litecoin_SV_0xee059f0ca1507e4e20c689b20cff71b5e924f7bd_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:35:22" (1/1) ...
[2020-11-24 20:35:23,067 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(Litecoin_SV.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balances_Litecoin_SV[this][from] && value <= allowed_Litecoin_SV[this][from][msg.sender] && balances_Litecoin_SV[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Litecoin_SV[this][to] >= 0 && balances_Litecoin_SV[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Litecoin_SV[this][from] >= 0 &&  balances_Litecoin_SV[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_Litecoin_SV[this][from][msg.sender] >= 0 && allowed_Litecoin_SV[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(Litecoin_SV.transferFrom(from, to, value), return == true && balances_Litecoin_SV[this][from] == old(balances_Litecoin_SV[this][from]) - value && balances_Litecoin_SV[this][to] == old(balances_Litecoin_SV[this][to]) + value && allowed_Litecoin_SV[this][from][msg.sender] == old(allowed_Litecoin_SV[this][from][msg.sender]) - value && _totalSupply_Litecoin_SV[this] == old(_totalSupply_Litecoin_SV[this]) && balances_Litecoin_SV[this][p1] == old(balances_Litecoin_SV[this][p1]) && allowed_Litecoin_SV[this][p2][p3] == old(allowed_Litecoin_SV[this][p2][p3]) && businessName_Litecoin_SV[this] == old(businessName_Litecoin_SV[this]) && businessCountry_Litecoin_SV[this] == old(businessCountry_Litecoin_SV[this]) && symbol_Litecoin_SV[this] == old(symbol_Litecoin_SV[this]) && name_Litecoin_SV[this] == old(name_Litecoin_SV[this]) && decimals_Litecoin_SV[this] == old(decimals_Litecoin_SV[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-24 20:35:23,073 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(Litecoin_SV.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balances_Litecoin_SV[this][from] && value <= allowed_Litecoin_SV[this][from][msg.sender] && balances_Litecoin_SV[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Litecoin_SV[this][to] >= 0 && balances_Litecoin_SV[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Litecoin_SV[this][from] >= 0 &&  balances_Litecoin_SV[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_Litecoin_SV[this][from][msg.sender] >= 0 && allowed_Litecoin_SV[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(Litecoin_SV.transferFrom(from, to, value), return == true && balances_Litecoin_SV[this][from] == old(balances_Litecoin_SV[this][from]) - value && balances_Litecoin_SV[this][to] == old(balances_Litecoin_SV[this][to]) + value && allowed_Litecoin_SV[this][from][msg.sender] == old(allowed_Litecoin_SV[this][from][msg.sender]) - value && _totalSupply_Litecoin_SV[this] == old(_totalSupply_Litecoin_SV[this]) && balances_Litecoin_SV[this][p1] == old(balances_Litecoin_SV[this][p1]) && allowed_Litecoin_SV[this][p2][p3] == old(allowed_Litecoin_SV[this][p2][p3]) && businessName_Litecoin_SV[this] == old(businessName_Litecoin_SV[this]) && businessCountry_Litecoin_SV[this] == old(businessCountry_Litecoin_SV[this]) && symbol_Litecoin_SV[this] == old(symbol_Litecoin_SV[this]) && name_Litecoin_SV[this] == old(name_Litecoin_SV[this]) && decimals_Litecoin_SV[this] == old(decimals_Litecoin_SV[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-24 20:35:23,081 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(Litecoin_SV.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balances_Litecoin_SV[this][from] && value <= allowed_Litecoin_SV[this][from][msg.sender] && balances_Litecoin_SV[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Litecoin_SV[this][to] >= 0 && balances_Litecoin_SV[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Litecoin_SV[this][from] >= 0 &&  balances_Litecoin_SV[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_Litecoin_SV[this][from][msg.sender] >= 0 && allowed_Litecoin_SV[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(Litecoin_SV.transferFrom(from, to, value), return == true && balances_Litecoin_SV[this][from] == old(balances_Litecoin_SV[this][from]) - value && balances_Litecoin_SV[this][to] == old(balances_Litecoin_SV[this][to]) + value && allowed_Litecoin_SV[this][from][msg.sender] == old(allowed_Litecoin_SV[this][from][msg.sender]) - value && _totalSupply_Litecoin_SV[this] == old(_totalSupply_Litecoin_SV[this]) && balances_Litecoin_SV[this][p1] == old(balances_Litecoin_SV[this][p1]) && allowed_Litecoin_SV[this][p2][p3] == old(allowed_Litecoin_SV[this][p2][p3]) && businessName_Litecoin_SV[this] == old(businessName_Litecoin_SV[this]) && businessCountry_Litecoin_SV[this] == old(businessCountry_Litecoin_SV[this]) && symbol_Litecoin_SV[this] == old(symbol_Litecoin_SV[this]) && name_Litecoin_SV[this] == old(name_Litecoin_SV[this]) && decimals_Litecoin_SV[this] == old(decimals_Litecoin_SV[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-24 20:35:23,090 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( ( ( p1!=from_s470 && p1!=to_s470 ) && ( p2!=from_s470 || p3!=msg.sender ) ) && from_s470!=to_s470 ) && tokens_s470<=balances_Litecoin_SV[this][from_s470] ) && tokens_s470<=allowed_Litecoin_SV[this][from_s470][msg.sender] ) && ( balances_Litecoin_SV[this][to_s470] + tokens_s470 )<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && tokens_s470>=0 ) && tokens_s470<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_Litecoin_SV[this][to_s470]>=0 ) && balances_Litecoin_SV[this][to_s470]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_Litecoin_SV[this][from_s470]>=0 ) && balances_Litecoin_SV[this][from_s470]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && allowed_Litecoin_SV[this][from_s470][msg.sender]>=0 ) && allowed_Litecoin_SV[this][from_s470][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[from_s470,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]],BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[to_s470,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[from_s470,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]],BinaryExpression[COMPNEQ,IdentifierExpression[p3,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]]],BinaryExpression[COMPNEQ,IdentifierExpression[from_s470,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>],IdentifierExpression[to_s470,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],BinaryExpression[COMPLEQ,IdentifierExpression[tokens_s470,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],[IdentifierExpression[from_s470,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]]]],BinaryExpression[COMPLEQ,IdentifierExpression[tokens_s470,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],[IdentifierExpression[from_s470,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]]]],BinaryExpression[COMPLT,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],[IdentifierExpression[to_s470,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],IdentifierExpression[tokens_s470,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,IdentifierExpression[tokens_s470,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[tokens_s470,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],[IdentifierExpression[to_s470,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],[IdentifierExpression[to_s470,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],[IdentifierExpression[from_s470,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],[IdentifierExpression[from_s470,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],[IdentifierExpression[from_s470,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],[IdentifierExpression[from_s470,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-24 20:35:23,093 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( ( success_s470==true && balances_Litecoin_SV[this][from_s470]==( ( old(balances_Litecoin_SV[this][from_s470]) ) - tokens_s470 ) ) && balances_Litecoin_SV[this][to_s470]==( ( old(balances_Litecoin_SV[this][to_s470]) ) + tokens_s470 ) ) && allowed_Litecoin_SV[this][from_s470][msg.sender]==( ( old(allowed_Litecoin_SV[this][from_s470][msg.sender]) ) - tokens_s470 ) ) && _totalSupply_Litecoin_SV[this]==( old(_totalSupply_Litecoin_SV[this]) ) ) && balances_Litecoin_SV[this][p1]==( old(balances_Litecoin_SV[this][p1]) ) ) && allowed_Litecoin_SV[this][p2][p3]==( old(allowed_Litecoin_SV[this][p2][p3]) ) ) && businessName_Litecoin_SV[this]==( old(businessName_Litecoin_SV[this]) ) ) && businessCountry_Litecoin_SV[this]==( old(businessCountry_Litecoin_SV[this]) ) ) && symbol_Litecoin_SV[this]==( old(symbol_Litecoin_SV[this]) ) ) && name_Litecoin_SV[this]==( old(name_Litecoin_SV[this]) ) ) && decimals_Litecoin_SV[this]==( old(decimals_Litecoin_SV[this]) ) ) && owner_Owned[this]==( old(owner_Owned[this]) ) ) && newOwner_Owned[this]==( old(newOwner_Owned[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[success_s470,<IMPLEMENTATION_OUTPARAM,transferFrom~address~address~uint256_Litecoin_SV>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],[IdentifierExpression[from_s470,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],[IdentifierExpression[from_s470,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]]],IdentifierExpression[tokens_s470,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],[IdentifierExpression[to_s470,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],BinaryExpression[ARITHPLUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],[IdentifierExpression[to_s470,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]]],IdentifierExpression[tokens_s470,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],[IdentifierExpression[from_s470,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],[IdentifierExpression[from_s470,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]]],IdentifierExpression[tokens_s470,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],[IdentifierExpression[p1,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],[IdentifierExpression[p1,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],[IdentifierExpression[p2,GLOBAL]]],[IdentifierExpression[p3,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],[IdentifierExpression[p2,GLOBAL]]],[IdentifierExpression[p3,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[businessName_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[businessName_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[businessCountry_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[businessCountry_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[newOwner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[newOwner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]]]]]
[2020-11-24 20:35:23,098 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(Litecoin_SV.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balances_Litecoin_SV[this][from] && value <= allowed_Litecoin_SV[this][from][msg.sender] && balances_Litecoin_SV[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Litecoin_SV[this][to] >= 0 && balances_Litecoin_SV[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Litecoin_SV[this][from] >= 0 &&  balances_Litecoin_SV[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_Litecoin_SV[this][from][msg.sender] >= 0 && allowed_Litecoin_SV[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(Litecoin_SV.transferFrom(from, to, value), return == true && balances_Litecoin_SV[this][from] == old(balances_Litecoin_SV[this][from]) - value && balances_Litecoin_SV[this][to] == old(balances_Litecoin_SV[this][to]) + value && allowed_Litecoin_SV[this][from][msg.sender] == old(allowed_Litecoin_SV[this][from][msg.sender]) - value && _totalSupply_Litecoin_SV[this] == old(_totalSupply_Litecoin_SV[this]) && balances_Litecoin_SV[this][p1] == old(balances_Litecoin_SV[this][p1]) && allowed_Litecoin_SV[this][p2][p3] == old(allowed_Litecoin_SV[this][p2][p3]) && businessName_Litecoin_SV[this] == old(businessName_Litecoin_SV[this]) && businessCountry_Litecoin_SV[this] == old(businessCountry_Litecoin_SV[this]) && symbol_Litecoin_SV[this] == old(symbol_Litecoin_SV[this]) && name_Litecoin_SV[this] == old(name_Litecoin_SV[this]) && decimals_Litecoin_SV[this] == old(decimals_Litecoin_SV[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-24 20:35:23,099 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_Litecoin_SV0) ==> ( <>AP(success_transferFrom_Litecoin_SV0) ) ) )
Executed UtopiaSpecLang
[2020-11-24 20:35:23,111 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:35:23 PropertyContainer
[2020-11-24 20:35:23,111 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-24 20:35:23,112 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-24 20:35:23,112 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-24 20:35:23,112 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-24 20:35:23,113 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Litecoin_SV_0xee059f0ca1507e4e20c689b20cff71b5e924f7bd_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:35:22" (1/2) ...
[2020-11-24 20:35:23,114 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-24 20:35:23,114 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-24 20:35:23,137 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:35:23" (2/2) ...
[2020-11-24 20:35:23,137 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-24 20:35:23,137 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-24 20:35:23,138 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-24 20:35:23,138 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-24 20:35:23,138 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Litecoin_SV_0xee059f0ca1507e4e20c689b20cff71b5e924f7bd_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:35:22" (1/2) ...
[2020-11-24 20:35:23,195 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-24 20:35:23,196 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 20:35:23,196 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-24 20:35:23,196 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-24 20:35:23,196 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath
[2020-11-24 20:35:23,196 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath
[2020-11-24 20:35:23,196 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath
[2020-11-24 20:35:23,196 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath
[2020-11-24 20:35:23,197 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath
[2020-11-24 20:35:23,197 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath
[2020-11-24 20:35:23,197 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath
[2020-11-24 20:35:23,197 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath
[2020-11-24 20:35:23,197 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-24 20:35:23,197 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface
[2020-11-24 20:35:23,197 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface
[2020-11-24 20:35:23,198 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Interface
[2020-11-24 20:35:23,198 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Interface
[2020-11-24 20:35:23,198 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20Interface
[2020-11-24 20:35:23,198 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Interface
[2020-11-24 20:35:23,198 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Interface
[2020-11-24 20:35:23,198 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Interface
[2020-11-24 20:35:23,199 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__success
[2020-11-24 20:35:23,199 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack
[2020-11-24 20:35:23,199 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack
[2020-11-24 20:35:23,199 INFO  L130     BoogieDeclarations]: Found specification of procedure receiveApproval~address~uint256~address~bytes_ApproveAndCallFallBack
[2020-11-24 20:35:23,199 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__success
[2020-11-24 20:35:23,199 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned
[2020-11-24 20:35:23,199 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned
[2020-11-24 20:35:23,199 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned
[2020-11-24 20:35:23,199 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned
[2020-11-24 20:35:23,199 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned
[2020-11-24 20:35:23,200 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned
[2020-11-24 20:35:23,200 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned
[2020-11-24 20:35:23,200 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned
[2020-11-24 20:35:23,200 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned
[2020-11-24 20:35:23,200 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned
[2020-11-24 20:35:23,200 INFO  L130     BoogieDeclarations]: Found specification of procedure Litecoin_SV_Litecoin_SV_NoBaseCtor__success
[2020-11-24 20:35:23,200 INFO  L130     BoogieDeclarations]: Found specification of procedure Litecoin_SV_Litecoin_SV
[2020-11-24 20:35:23,200 INFO  L138     BoogieDeclarations]: Found implementation of procedure Litecoin_SV_Litecoin_SV
[2020-11-24 20:35:23,200 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_Litecoin_SV
[2020-11-24 20:35:23,200 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_Litecoin_SV
[2020-11-24 20:35:23,201 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_Litecoin_SV
[2020-11-24 20:35:23,201 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_Litecoin_SV
[2020-11-24 20:35:23,201 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_Litecoin_SV
[2020-11-24 20:35:23,201 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_Litecoin_SV
[2020-11-24 20:35:23,201 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_Litecoin_SV
[2020-11-24 20:35:23,201 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_Litecoin_SV
[2020-11-24 20:35:23,201 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_Litecoin_SV
[2020-11-24 20:35:23,201 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_Litecoin_SV
[2020-11-24 20:35:23,201 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_Litecoin_SV
[2020-11-24 20:35:23,201 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_Litecoin_SV
[2020-11-24 20:35:23,202 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_Litecoin_SV
[2020-11-24 20:35:23,202 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_Litecoin_SV
[2020-11-24 20:35:23,202 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_Litecoin_SV__success
[2020-11-24 20:35:23,202 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~uint256_Litecoin_SV
[2020-11-24 20:35:23,202 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~uint256_Litecoin_SV
[2020-11-24 20:35:23,202 INFO  L130     BoogieDeclarations]: Found specification of procedure businessName_Litecoin_SV
[2020-11-24 20:35:23,202 INFO  L138     BoogieDeclarations]: Found implementation of procedure businessName_Litecoin_SV
[2020-11-24 20:35:23,202 INFO  L130     BoogieDeclarations]: Found specification of procedure businessCountry_Litecoin_SV
[2020-11-24 20:35:23,202 INFO  L138     BoogieDeclarations]: Found implementation of procedure businessCountry_Litecoin_SV
[2020-11-24 20:35:23,202 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_Litecoin_SV
[2020-11-24 20:35:23,202 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_Litecoin_SV
[2020-11-24 20:35:23,203 INFO  L130     BoogieDeclarations]: Found specification of procedure name_Litecoin_SV
[2020-11-24 20:35:23,203 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_Litecoin_SV
[2020-11-24 20:35:23,203 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_Litecoin_SV
[2020-11-24 20:35:23,203 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_Litecoin_SV
[2020-11-24 20:35:23,203 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_Litecoin_SV
[2020-11-24 20:35:23,203 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_Litecoin_SV
[2020-11-24 20:35:23,203 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-24 20:35:23,203 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-24 20:35:23,203 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-24 20:35:23,203 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-24 20:35:23,204 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-24 20:35:23,204 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-24 20:35:23,204 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Interface
[2020-11-24 20:35:23,204 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Interface
[2020-11-24 20:35:23,204 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-24 20:35:23,204 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-24 20:35:23,204 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Owned
[2020-11-24 20:35:23,204 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Owned
[2020-11-24 20:35:23,204 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Litecoin_SV
[2020-11-24 20:35:23,204 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-24 20:35:23,205 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-24 20:35:23,205 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 20:35:23,205 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-24 20:35:23,205 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-24 20:35:23,205 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath__success
[2020-11-24 20:35:23,205 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath__fail
[2020-11-24 20:35:23,205 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath__success
[2020-11-24 20:35:23,205 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath__fail
[2020-11-24 20:35:23,205 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath__success
[2020-11-24 20:35:23,205 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath__fail
[2020-11-24 20:35:23,205 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath__success
[2020-11-24 20:35:23,205 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath__fail
[2020-11-24 20:35:23,205 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-24 20:35:23,206 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__success
[2020-11-24 20:35:23,206 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__fail
[2020-11-24 20:35:23,206 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__fail
[2020-11-24 20:35:23,206 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__success
[2020-11-24 20:35:23,206 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__fail
[2020-11-24 20:35:23,206 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-24 20:35:23,206 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__success
[2020-11-24 20:35:23,206 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__fail
[2020-11-24 20:35:23,206 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__success
[2020-11-24 20:35:23,206 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__fail
[2020-11-24 20:35:23,206 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__success
[2020-11-24 20:35:23,206 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__fail
[2020-11-24 20:35:23,206 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__success
[2020-11-24 20:35:23,207 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__fail
[2020-11-24 20:35:23,207 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__success
[2020-11-24 20:35:23,207 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__fail
[2020-11-24 20:35:23,207 INFO  L130     BoogieDeclarations]: Found specification of procedure Litecoin_SV_Litecoin_SV_NoBaseCtor__fail
[2020-11-24 20:35:23,207 INFO  L130     BoogieDeclarations]: Found specification of procedure Litecoin_SV_Litecoin_SV__success
[2020-11-24 20:35:23,207 INFO  L130     BoogieDeclarations]: Found specification of procedure Litecoin_SV_Litecoin_SV__fail
[2020-11-24 20:35:23,207 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_Litecoin_SV__success
[2020-11-24 20:35:23,207 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_Litecoin_SV__fail
[2020-11-24 20:35:23,207 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_Litecoin_SV__success
[2020-11-24 20:35:23,207 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_Litecoin_SV__fail
[2020-11-24 20:35:23,207 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_Litecoin_SV__success
[2020-11-24 20:35:23,207 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_Litecoin_SV__fail
[2020-11-24 20:35:23,207 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_Litecoin_SV__success
[2020-11-24 20:35:23,207 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_Litecoin_SV__fail
[2020-11-24 20:35:23,208 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_Litecoin_SV__success
[2020-11-24 20:35:23,208 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_Litecoin_SV__fail
[2020-11-24 20:35:23,208 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_Litecoin_SV__success
[2020-11-24 20:35:23,208 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_Litecoin_SV__fail
[2020-11-24 20:35:23,208 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_Litecoin_SV__success
[2020-11-24 20:35:23,208 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_Litecoin_SV__fail
[2020-11-24 20:35:23,208 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_Litecoin_SV__fail
[2020-11-24 20:35:23,208 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~uint256_Litecoin_SV__success
[2020-11-24 20:35:23,208 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~uint256_Litecoin_SV__fail
[2020-11-24 20:35:23,208 INFO  L130     BoogieDeclarations]: Found specification of procedure businessName_Litecoin_SV__success
[2020-11-24 20:35:23,208 INFO  L130     BoogieDeclarations]: Found specification of procedure businessName_Litecoin_SV__fail
[2020-11-24 20:35:23,209 INFO  L130     BoogieDeclarations]: Found specification of procedure businessCountry_Litecoin_SV__success
[2020-11-24 20:35:23,209 INFO  L130     BoogieDeclarations]: Found specification of procedure businessCountry_Litecoin_SV__fail
[2020-11-24 20:35:23,209 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_Litecoin_SV__success
[2020-11-24 20:35:23,209 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_Litecoin_SV__fail
[2020-11-24 20:35:23,209 INFO  L130     BoogieDeclarations]: Found specification of procedure name_Litecoin_SV__success
[2020-11-24 20:35:23,209 INFO  L130     BoogieDeclarations]: Found specification of procedure name_Litecoin_SV__fail
[2020-11-24 20:35:23,209 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_Litecoin_SV__success
[2020-11-24 20:35:23,209 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_Litecoin_SV__fail
[2020-11-24 20:35:23,209 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_Litecoin_SV__success
[2020-11-24 20:35:23,209 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_Litecoin_SV__fail
[2020-11-24 20:35:23,209 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-24 20:35:23,210 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-24 20:35:23,210 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-24 20:35:23,210 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-24 20:35:23,210 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-24 20:35:23,210 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-24 20:35:23,210 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 20:35:23,210 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 20:35:23,210 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-24 20:35:23,210 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-24 20:35:23,211 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath__fail
[2020-11-24 20:35:23,211 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath__success
[2020-11-24 20:35:23,211 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath__fail
[2020-11-24 20:35:23,211 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath__success
[2020-11-24 20:35:23,211 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath__fail
[2020-11-24 20:35:23,211 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath__success
[2020-11-24 20:35:23,211 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath__fail
[2020-11-24 20:35:23,211 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath__success
[2020-11-24 20:35:23,211 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-24 20:35:23,211 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-24 20:35:23,212 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__fail
[2020-11-24 20:35:23,212 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__success
[2020-11-24 20:35:23,212 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__fail
[2020-11-24 20:35:23,212 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__success
[2020-11-24 20:35:23,212 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__fail
[2020-11-24 20:35:23,212 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__success
[2020-11-24 20:35:23,212 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-24 20:35:23,212 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__success
[2020-11-24 20:35:23,212 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__fail
[2020-11-24 20:35:23,212 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__success
[2020-11-24 20:35:23,212 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__fail
[2020-11-24 20:35:23,213 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__success
[2020-11-24 20:35:23,213 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__fail
[2020-11-24 20:35:23,213 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__success
[2020-11-24 20:35:23,213 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__fail
[2020-11-24 20:35:23,213 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__success
[2020-11-24 20:35:23,213 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__fail
[2020-11-24 20:35:23,213 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__success
[2020-11-24 20:35:23,213 INFO  L138     BoogieDeclarations]: Found implementation of procedure Litecoin_SV_Litecoin_SV_NoBaseCtor__fail
[2020-11-24 20:35:23,213 INFO  L138     BoogieDeclarations]: Found implementation of procedure Litecoin_SV_Litecoin_SV_NoBaseCtor__success
[2020-11-24 20:35:23,213 INFO  L138     BoogieDeclarations]: Found implementation of procedure Litecoin_SV_Litecoin_SV__fail
[2020-11-24 20:35:23,214 INFO  L138     BoogieDeclarations]: Found implementation of procedure Litecoin_SV_Litecoin_SV__success
[2020-11-24 20:35:23,214 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_Litecoin_SV__fail
[2020-11-24 20:35:23,214 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_Litecoin_SV__success
[2020-11-24 20:35:23,214 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_Litecoin_SV__fail
[2020-11-24 20:35:23,214 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_Litecoin_SV__success
[2020-11-24 20:35:23,214 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_Litecoin_SV__fail
[2020-11-24 20:35:23,214 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_Litecoin_SV__success
[2020-11-24 20:35:23,214 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_Litecoin_SV__fail
[2020-11-24 20:35:23,214 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_Litecoin_SV__success
[2020-11-24 20:35:23,214 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_Litecoin_SV__fail
[2020-11-24 20:35:23,214 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_Litecoin_SV__success
[2020-11-24 20:35:23,215 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_Litecoin_SV__fail
[2020-11-24 20:35:23,215 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_Litecoin_SV__success
[2020-11-24 20:35:23,215 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_Litecoin_SV__fail
[2020-11-24 20:35:23,215 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_Litecoin_SV__success
[2020-11-24 20:35:23,215 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_Litecoin_SV__fail
[2020-11-24 20:35:23,215 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_Litecoin_SV__success
[2020-11-24 20:35:23,215 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~uint256_Litecoin_SV__fail
[2020-11-24 20:35:23,215 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~uint256_Litecoin_SV__success
[2020-11-24 20:35:23,215 INFO  L138     BoogieDeclarations]: Found implementation of procedure businessName_Litecoin_SV__fail
[2020-11-24 20:35:23,215 INFO  L138     BoogieDeclarations]: Found implementation of procedure businessName_Litecoin_SV__success
[2020-11-24 20:35:23,215 INFO  L138     BoogieDeclarations]: Found implementation of procedure businessCountry_Litecoin_SV__fail
[2020-11-24 20:35:23,215 INFO  L138     BoogieDeclarations]: Found implementation of procedure businessCountry_Litecoin_SV__success
[2020-11-24 20:35:23,216 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_Litecoin_SV__fail
[2020-11-24 20:35:23,216 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_Litecoin_SV__success
[2020-11-24 20:35:23,216 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_Litecoin_SV__fail
[2020-11-24 20:35:23,216 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_Litecoin_SV__success
[2020-11-24 20:35:23,216 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_Litecoin_SV__fail
[2020-11-24 20:35:23,216 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_Litecoin_SV__success
[2020-11-24 20:35:23,216 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_Litecoin_SV__fail
[2020-11-24 20:35:23,216 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_Litecoin_SV__success
[2020-11-24 20:35:23,216 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-24 20:35:23,216 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-24 20:35:23,216 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-24 20:35:23,217 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-24 20:35:23,217 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-24 20:35:23,217 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-24 20:35:23,217 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-24 20:35:23,217 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-24 20:35:23,217 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-24 20:35:23,217 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-24 20:35:23,217 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Interface
[2020-11-24 20:35:23,217 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Interface
[2020-11-24 20:35:23,217 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-24 20:35:23,217 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-24 20:35:23,217 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Owned
[2020-11-24 20:35:23,218 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Owned
[2020-11-24 20:35:23,218 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Litecoin_SV
[2020-11-24 20:35:23,218 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-24 20:35:23,218 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-24 20:35:23,218 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-24 20:35:23,691 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 20:35:23,701 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 20:35:23,701 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 20:35:23,701 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 20:35:23,954 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-24 20:35:23,954 INFO  L286             CfgBuilder]: Removed 5 assue(true) statements.
[2020-11-24 20:35:23,959 INFO  L202        PluginConnector]: Adding new model Litecoin_SV_0xee059f0ca1507e4e20c689b20cff71b5e924f7bd_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:35:23 BoogieIcfgContainer
[2020-11-24 20:35:23,959 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:35:23" (2/2) ...
[2020-11-24 20:35:23,959 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-24 20:35:23,960 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@7503dbf1 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:35:23, skipping insertion in model container
[2020-11-24 20:35:23,960 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-24 20:35:23,961 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-24 20:35:23,961 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-24 20:35:23,963 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-24 20:35:23,964 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Litecoin_SV_0xee059f0ca1507e4e20c689b20cff71b5e924f7bd_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:35:22" (1/3) ...
[2020-11-24 20:35:23,965 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@5c69c878 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:35:23, skipping insertion in model container
[2020-11-24 20:35:23,965 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:35:23" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-24 20:35:24,007 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:35:24 NWAContainer
[2020-11-24 20:35:24,008 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-24 20:35:24,008 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-24 20:35:24,008 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-24 20:35:24,009 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-24 20:35:24,010 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Litecoin_SV_0xee059f0ca1507e4e20c689b20cff71b5e924f7bd_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:35:23" (3/4) ...
[2020-11-24 20:35:24,011 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@373ec14c and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:35:24, skipping insertion in model container
[2020-11-24 20:35:24,011 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:35:24" (4/4) ...
[2020-11-24 20:35:24,014 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-24 20:35:24,018 INFO  L110   BuchiProductObserver]: Initial RCFG 1708 locations, 2140 edges
[2020-11-24 20:35:24,018 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-24 20:35:24,029 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-24 20:35:25,359 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-24 20:35:25,364 INFO  L110   BuchiProductObserver]: BuchiProgram size 4040 locations, 6918 edges
[2020-11-24 20:35:25,364 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:35:25 BoogieIcfgContainer
[2020-11-24 20:35:25,364 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-24 20:35:25,365 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-24 20:35:25,365 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-24 20:35:25,366 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-24 20:35:25,367 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:35:25" (1/1) ...
[2020-11-24 20:35:25,455 INFO  L313           BlockEncoder]: Initial Icfg 4040 locations, 6918 edges
[2020-11-24 20:35:25,455 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-24 20:35:25,456 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-24 20:35:25,456 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-24 20:35:25,456 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-24 20:35:25,468 INFO  L70    emoveInfeasibleEdges]: Removed 90 edges and 13 locations because of local infeasibility
[2020-11-24 20:35:25,478 INFO  L70        RemoveSinkStates]: Removed 38 edges and 25 locations by removing sink states
[2020-11-24 20:35:25,492 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-24 20:35:25,497 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-24 20:35:25,502 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-24 20:35:25,503 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-24 20:35:25,508 INFO  L313           BlockEncoder]: Encoded RCFG 3980 locations, 6758 edges
[2020-11-24 20:35:25,508 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 08:35:25 BasicIcfg
[2020-11-24 20:35:25,508 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-24 20:35:25,508 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-24 20:35:25,508 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-24 20:35:25,510 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-24 20:35:25,510 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:35:25,510 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Litecoin_SV_0xee059f0ca1507e4e20c689b20cff71b5e924f7bd_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:35:22" (1/6) ...
[2020-11-24 20:35:25,512 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4e3e475 and model type Litecoin_SV_0xee059f0ca1507e4e20c689b20cff71b5e924f7bd_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 08:35:25, skipping insertion in model container
[2020-11-24 20:35:25,512 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:35:25,512 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:35:23" (2/6) ...
[2020-11-24 20:35:25,512 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4e3e475 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 08:35:25, skipping insertion in model container
[2020-11-24 20:35:25,512 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:35:25,512 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Litecoin_SV_0xee059f0ca1507e4e20c689b20cff71b5e924f7bd_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:35:23" (3/6) ...
[2020-11-24 20:35:25,513 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4e3e475 and model type Litecoin_SV_0xee059f0ca1507e4e20c689b20cff71b5e924f7bd_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 08:35:25, skipping insertion in model container
[2020-11-24 20:35:25,513 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:35:25,513 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:35:24" (4/6) ...
[2020-11-24 20:35:25,513 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4e3e475 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 08:35:25, skipping insertion in model container
[2020-11-24 20:35:25,513 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:35:25,513 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:35:25" (5/6) ...
[2020-11-24 20:35:25,513 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4e3e475 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 24.11 08:35:25, skipping insertion in model container
[2020-11-24 20:35:25,513 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:35:25,513 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 08:35:25" (6/6) ...
[2020-11-24 20:35:25,514 INFO  L404   chiAutomizerObserver]: Analyzing ICFG Litecoin_SV_0xee059f0ca1507e4e20c689b20cff71b5e924f7bd_transferfrom-normal.bpl_BEv2
[2020-11-24 20:35:25,549 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-24 20:35:25,549 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-24 20:35:25,549 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-24 20:35:25,549 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-24 20:35:25,549 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-24 20:35:25,549 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-24 20:35:25,549 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-24 20:35:25,549 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-24 20:35:25,549 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-24 20:35:25,583 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3980 states.
[2020-11-24 20:35:25,634 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:35:25,634 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:35:25,634 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:35:25,641 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:35:25,641 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:35:25,641 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-24 20:35:25,641 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3980 states.
[2020-11-24 20:35:25,658 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:35:25,659 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:35:25,659 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:35:25,660 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:35:25,660 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_Litecoin_SV0 := false;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4599]              assume null == 0;
[L4600]  CALL        call this := FreshRefGenerator__success();
[L2180]              havoc newRef;
[L2181]              assume Alloc[newRef] == false;
[L2182]              Alloc[newRef] := true;
[L2183]              assume newRef != null;
[L4600]  RET         call this := FreshRefGenerator__success();
[L4601]              assume now >= 0;
[L4602]              assume DType[this] == Litecoin_SV;
[L4603]              assume msgvalue_MSG == 0;
[L4604]              gas := gas - 53000;
[L4605]  CALL        call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L825]               havoc __exception;
[L826]               revert := false;
[L827]   COND FALSE  !(__exception)
[L852]   CALL        call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L2536]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2301]              assume msgsender_MSG != null;
[L2302]              Balance[this] := 0;
[L2316]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2317]  COND FALSE  !(revert)
[L2536]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2537]  COND TRUE   revert
[L852]   RET         call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L853]               assume !revert && gas >= 0;
[L4605]  RET         call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume !revert && gas >= 0;

Loop:
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND TRUE   choice == 22
[L4447]              gas := gas - 21000;
[L4448]  COND FALSE  !(gas >= 0)
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

[2020-11-24 20:35:25,673 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:35:25,673 INFO  L82        PathProgramCache]: Analyzing trace with hash 118210760, now seen corresponding path program 1 times
[2020-11-24 20:35:25,676 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:35:25,698 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:35:25,736 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 20:35:25,739 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:35:25,739 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 20:35:25,930 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:35:25,939 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 20:35:25,940 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-24 20:35:25,941 INFO  L87              Difference]: Start difference. First operand 3980 states. Second operand 4 states.
[2020-11-24 20:35:26,238 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:35:26,238 INFO  L93              Difference]: Finished difference Result 2799 states and 3040 transitions.
[2020-11-24 20:35:26,239 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 20:35:26,240 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2799 states and 3040 transitions.
[2020-11-24 20:35:26,252 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:35:26,269 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2799 states to 2799 states and 3040 transitions.
[2020-11-24 20:35:26,269 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-24 20:35:26,272 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 980
[2020-11-24 20:35:26,272 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2799 states and 3040 transitions.
[2020-11-24 20:35:26,278 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:35:26,278 INFO  L728         BuchiCegarLoop]: Abstraction has 2799 states and 3040 transitions.
[2020-11-24 20:35:26,292 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2799 states and 3040 transitions.
[2020-11-24 20:35:26,336 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2799 to 2799.
[2020-11-24 20:35:26,336 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2799 states.
[2020-11-24 20:35:26,341 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2799 states to 2799 states and 3040 transitions.
[2020-11-24 20:35:26,342 INFO  L751         BuchiCegarLoop]: Abstraction has 2799 states and 3040 transitions.
[2020-11-24 20:35:26,342 INFO  L631         BuchiCegarLoop]: Abstraction has 2799 states and 3040 transitions.
[2020-11-24 20:35:26,342 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-24 20:35:26,342 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2799 states and 3040 transitions.
[2020-11-24 20:35:26,349 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:35:26,349 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:35:26,349 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:35:26,351 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:35:26,351 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_Litecoin_SV0 := false;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4599]              assume null == 0;
[L4600]  CALL        call this := FreshRefGenerator__success();
[L2180]              havoc newRef;
[L2181]              assume Alloc[newRef] == false;
[L2182]              Alloc[newRef] := true;
[L2183]              assume newRef != null;
[L4600]  RET         call this := FreshRefGenerator__success();
[L4601]              assume now >= 0;
[L4602]              assume DType[this] == Litecoin_SV;
[L4603]              assume msgvalue_MSG == 0;
[L4604]              gas := gas - 53000;
[L4605]  CALL        call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L825]               havoc __exception;
[L826]               revert := false;
[L827]   COND FALSE  !(__exception)
[L852]   CALL        call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L2536]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2301]              assume msgsender_MSG != null;
[L2302]              Balance[this] := 0;
[L2316]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2317]  COND FALSE  !(revert)
[L2536]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2537]  COND TRUE   revert
[L852]   RET         call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L853]               assume !revert && gas >= 0;
[L4605]  RET         call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume !revert && gas >= 0;
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND FALSE  !(choice == 14)
[L4510]  COND TRUE   choice == 13
[L4511]              gas := gas - 21000;
[L4512]  COND TRUE   gas >= 0
[L4513]              assume tokens_s470 >= 0 && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4514]              assume msgvalue_MSG == 0;
[L4515]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s470 && p1 != to_s470) && (p2 != from_s470 || p3 != msgsender_MSG)) && from_s470 != to_s470) && tokens_s470 <= balances_Litecoin_SV[this][from_s470]) && tokens_s470 <= allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) && balances_Litecoin_SV[this][to_s470] + tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s470 >= 0) && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s470] >= 0) && balances_Litecoin_SV[this][to_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][from_s470] >= 0) && balances_Litecoin_SV[this][from_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] >= 0) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Litecoin_SV0 := true;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]                 revert := revert_hold;
[L1123]              havoc __exception;
[L1124]              revert := false;
[L1125]  COND FALSE  !(__exception)
[L1150]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L2709]  COND TRUE   DType[this] == Litecoin_SV
[L2710]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2247]  COND TRUE   !(b_s45 <= a_s45)
[L2248]              revert := true;
[L2710]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2711]  COND TRUE   revert
[L1150]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L1151]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((((success_s470 == true && balances_Litecoin_SV[this][from_s470] == old(balances_Litecoin_SV[this][from_s470]) - tokens_s470) && balances_Litecoin_SV[this][to_s470] == old(balances_Litecoin_SV[this][to_s470]) + tokens_s470) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] == old(allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) - tokens_s470) && _totalSupply_Litecoin_SV[this] == old(_totalSupply_Litecoin_SV[this])) && balances_Litecoin_SV[this][p1] == old(balances_Litecoin_SV[this][p1])) && allowed_Litecoin_SV[this][p2][p3] == old(allowed_Litecoin_SV[this][p2][p3])) && businessName_Litecoin_SV[this] == old(businessName_Litecoin_SV[this])) && businessCountry_Litecoin_SV[this] == old(businessCountry_Litecoin_SV[this])) && symbol_Litecoin_SV[this] == old(symbol_Litecoin_SV[this])) && name_Litecoin_SV[this] == old(name_Litecoin_SV[this])) && decimals_Litecoin_SV[this] == old(decimals_Litecoin_SV[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4515]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

Loop:
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND FALSE  !(choice == 14)
[L4510]  COND TRUE   choice == 13
[L4511]              gas := gas - 21000;
[L4512]  COND TRUE   gas >= 0
[L4513]              assume tokens_s470 >= 0 && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4514]              assume msgvalue_MSG == 0;
[L4515]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s470 && p1 != to_s470) && (p2 != from_s470 || p3 != msgsender_MSG)) && from_s470 != to_s470) && tokens_s470 <= balances_Litecoin_SV[this][from_s470]) && tokens_s470 <= allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) && balances_Litecoin_SV[this][to_s470] + tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s470 >= 0) && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s470] >= 0) && balances_Litecoin_SV[this][to_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][from_s470] >= 0) && balances_Litecoin_SV[this][from_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] >= 0) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Litecoin_SV0 := true;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]                 revert := revert_hold;
[L1123]              havoc __exception;
[L1124]              revert := false;
[L1125]  COND FALSE  !(__exception)
[L1150]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L2709]  COND TRUE   DType[this] == Litecoin_SV
[L2710]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2247]  COND TRUE   !(b_s45 <= a_s45)
[L2248]              revert := true;
[L2710]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2711]  COND TRUE   revert
[L1150]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L1151]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((((success_s470 == true && balances_Litecoin_SV[this][from_s470] == old(balances_Litecoin_SV[this][from_s470]) - tokens_s470) && balances_Litecoin_SV[this][to_s470] == old(balances_Litecoin_SV[this][to_s470]) + tokens_s470) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] == old(allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) - tokens_s470) && _totalSupply_Litecoin_SV[this] == old(_totalSupply_Litecoin_SV[this])) && balances_Litecoin_SV[this][p1] == old(balances_Litecoin_SV[this][p1])) && allowed_Litecoin_SV[this][p2][p3] == old(allowed_Litecoin_SV[this][p2][p3])) && businessName_Litecoin_SV[this] == old(businessName_Litecoin_SV[this])) && businessCountry_Litecoin_SV[this] == old(businessCountry_Litecoin_SV[this])) && symbol_Litecoin_SV[this] == old(symbol_Litecoin_SV[this])) && name_Litecoin_SV[this] == old(name_Litecoin_SV[this])) && decimals_Litecoin_SV[this] == old(decimals_Litecoin_SV[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4515]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

[2020-11-24 20:35:26,355 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:35:26,355 INFO  L82        PathProgramCache]: Analyzing trace with hash -944186549, now seen corresponding path program 1 times
[2020-11-24 20:35:26,356 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:35:26,366 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:35:26,386 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 20:35:26,386 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:35:26,386 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 20:35:26,387 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:35:26,387 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 20:35:26,388 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-24 20:35:26,388 INFO  L87              Difference]: Start difference. First operand 2799 states and 3040 transitions. cyclomatic complexity: 243 Second operand 4 states.
[2020-11-24 20:35:26,965 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:35:26,965 INFO  L93              Difference]: Finished difference Result 4091 states and 4628 transitions.
[2020-11-24 20:35:26,965 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 20:35:26,966 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4091 states and 4628 transitions.
[2020-11-24 20:35:26,983 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-24 20:35:27,004 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4091 states to 3971 states and 4500 transitions.
[2020-11-24 20:35:27,004 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1330
[2020-11-24 20:35:27,006 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1340
[2020-11-24 20:35:27,006 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3971 states and 4500 transitions.
[2020-11-24 20:35:27,012 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:35:27,012 INFO  L728         BuchiCegarLoop]: Abstraction has 3971 states and 4500 transitions.
[2020-11-24 20:35:27,015 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3971 states and 4500 transitions.
[2020-11-24 20:35:27,042 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3971 to 2835.
[2020-11-24 20:35:27,042 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2835 states.
[2020-11-24 20:35:27,045 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2835 states to 2835 states and 3032 transitions.
[2020-11-24 20:35:27,046 INFO  L751         BuchiCegarLoop]: Abstraction has 2835 states and 3032 transitions.
[2020-11-24 20:35:27,046 INFO  L631         BuchiCegarLoop]: Abstraction has 2835 states and 3032 transitions.
[2020-11-24 20:35:27,046 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-24 20:35:27,046 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2835 states and 3032 transitions.
[2020-11-24 20:35:27,052 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:35:27,052 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:35:27,052 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:35:27,054 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:35:27,054 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_Litecoin_SV0 := false;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4599]              assume null == 0;
[L4600]  CALL        call this := FreshRefGenerator__success();
[L2180]              havoc newRef;
[L2181]              assume Alloc[newRef] == false;
[L2182]              Alloc[newRef] := true;
[L2183]              assume newRef != null;
[L4600]  RET         call this := FreshRefGenerator__success();
[L4601]              assume now >= 0;
[L4602]              assume DType[this] == Litecoin_SV;
[L4603]              assume msgvalue_MSG == 0;
[L4604]              gas := gas - 53000;
[L4605]  CALL        call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L825]               havoc __exception;
[L826]               revert := false;
[L827]   COND FALSE  !(__exception)
[L852]   CALL        call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L2536]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2301]              assume msgsender_MSG != null;
[L2302]              Balance[this] := 0;
[L2316]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2317]  COND FALSE  !(revert)
[L2536]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2537]  COND FALSE  !(revert)
[L2540]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2386]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2368]              assume msgsender_MSG != null;
[L2369]              Balance[this] := 0;
[L2370]              owner_Owned[this] := null;
[L2371]              newOwner_Owned[this] := null;
[L2373]              owner_Owned[this] := msgsender_MSG;
[L2386]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2387]  COND FALSE  !(revert)
[L2540]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2541]  COND FALSE  !(revert)
[L2544]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2212]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2197]              assume msgsender_MSG != null;
[L2198]              Balance[this] := 0;
[L2212]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2213]  COND FALSE  !(revert)
[L2544]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2545]  COND FALSE  !(revert)
[L2548]  CALL        call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2489]              assume msgsender_MSG != null;
[L2490]              Balance[this] := 0;
[L2491]              businessName_Litecoin_SV[this] := 1031794244;
[L2492]              businessCountry_Litecoin_SV[this] := 1031794244;
[L2493]              symbol_Litecoin_SV[this] := 1031794244;
[L2494]              name_Litecoin_SV[this] := 1031794244;
[L2495]              decimals_Litecoin_SV[this] := 0;
[L2496]              _totalSupply_Litecoin_SV[this] := 0;
[L2497]              balances_Litecoin_SV[this] := zeroRefintArr();
[L2498]              sum_balances0[this] := 0;
[L2499]              allowed_Litecoin_SV[this] := zeroRefRefintArr();
[L2500]              sum_allowed1[this] := 0;
[L2502]              businessName_Litecoin_SV[this] := -1948412360;
[L2503]              businessCountry_Litecoin_SV[this] := 1439465232;
[L2504]              symbol_Litecoin_SV[this] := -803338840;
[L2505]              name_Litecoin_SV[this] := 1836794956;
[L2506]              decimals_Litecoin_SV[this] := 18;
[L2507]              _totalSupply_Litecoin_SV[this] := 25000000000000000000000000;
[L2508]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2509]              balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131] := _totalSupply_Litecoin_SV[this];
[L2510]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2511]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2548]  RET         call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2549]  COND FALSE  !(revert)
[L852]   RET         call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L853]               assume !revert && gas >= 0;
[L4605]  RET         call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume !revert && gas >= 0;
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND FALSE  !(choice == 14)
[L4510]  COND TRUE   choice == 13
[L4511]              gas := gas - 21000;
[L4512]  COND TRUE   gas >= 0
[L4513]              assume tokens_s470 >= 0 && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4514]              assume msgvalue_MSG == 0;
[L4515]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s470 && p1 != to_s470) && (p2 != from_s470 || p3 != msgsender_MSG)) && from_s470 != to_s470) && tokens_s470 <= balances_Litecoin_SV[this][from_s470]) && tokens_s470 <= allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) && balances_Litecoin_SV[this][to_s470] + tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s470 >= 0) && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s470] >= 0) && balances_Litecoin_SV[this][to_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][from_s470] >= 0) && balances_Litecoin_SV[this][from_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] >= 0) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Litecoin_SV0 := true;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]                 revert := revert_hold;
[L1123]              havoc __exception;
[L1124]              revert := false;
[L1125]  COND TRUE   __exception
[L1126]              __tmp__Balance := Balance;
[L1127]              __tmp__DType := DType;
[L1128]              __tmp__Alloc := Alloc;
[L1129]              __tmp__balance_ADDR := balance_ADDR;
[L1130]              __tmp__M_Ref_int := M_Ref_int;
[L1131]              __tmp__sum_balances0 := sum_balances0;
[L1132]              __tmp__alloc_allowed_Litecoin_SV_lvl0 := alloc_allowed_Litecoin_SV_lvl0;
[L1133]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1134]              __tmp__sum_allowed1 := sum_allowed1;
[L1135]              __tmp__Length := Length;
[L1136]              __tmp__now := now;
[L1137]              __tmp__owner_Owned := owner_Owned;
[L1138]              __tmp__newOwner_Owned := newOwner_Owned;
[L1139]              __tmp__businessName_Litecoin_SV := businessName_Litecoin_SV;
[L1140]              __tmp__businessCountry_Litecoin_SV := businessCountry_Litecoin_SV;
[L1141]              __tmp__symbol_Litecoin_SV := symbol_Litecoin_SV;
[L1142]              __tmp__name_Litecoin_SV := name_Litecoin_SV;
[L1143]              __tmp__decimals_Litecoin_SV := decimals_Litecoin_SV;
[L1144]              __tmp___totalSupply_Litecoin_SV := _totalSupply_Litecoin_SV;
[L1145]              __tmp__balances_Litecoin_SV := balances_Litecoin_SV;
[L1146]              __tmp__allowed_Litecoin_SV := allowed_Litecoin_SV;
[L1147]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__fail(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L2667]  COND TRUE   __tmp__DType[this] == Litecoin_SV
[L2668]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2238]  COND TRUE   !(b_s45 <= a_s45)
[L2239]              revert := true;
[L2668]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2669]  COND TRUE   revert
[L1147]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__fail(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L1148]              assume revert || gas < 0;
[L4515]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

Loop:
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND FALSE  !(choice == 14)
[L4510]  COND TRUE   choice == 13
[L4511]              gas := gas - 21000;
[L4512]  COND TRUE   gas >= 0
[L4513]              assume tokens_s470 >= 0 && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4514]              assume msgvalue_MSG == 0;
[L4515]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s470 && p1 != to_s470) && (p2 != from_s470 || p3 != msgsender_MSG)) && from_s470 != to_s470) && tokens_s470 <= balances_Litecoin_SV[this][from_s470]) && tokens_s470 <= allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) && balances_Litecoin_SV[this][to_s470] + tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s470 >= 0) && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s470] >= 0) && balances_Litecoin_SV[this][to_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][from_s470] >= 0) && balances_Litecoin_SV[this][from_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] >= 0) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Litecoin_SV0 := true;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]                 revert := revert_hold;
[L1123]              havoc __exception;
[L1124]              revert := false;
[L1125]  COND TRUE   __exception
[L1126]              __tmp__Balance := Balance;
[L1127]              __tmp__DType := DType;
[L1128]              __tmp__Alloc := Alloc;
[L1129]              __tmp__balance_ADDR := balance_ADDR;
[L1130]              __tmp__M_Ref_int := M_Ref_int;
[L1131]              __tmp__sum_balances0 := sum_balances0;
[L1132]              __tmp__alloc_allowed_Litecoin_SV_lvl0 := alloc_allowed_Litecoin_SV_lvl0;
[L1133]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1134]              __tmp__sum_allowed1 := sum_allowed1;
[L1135]              __tmp__Length := Length;
[L1136]              __tmp__now := now;
[L1137]              __tmp__owner_Owned := owner_Owned;
[L1138]              __tmp__newOwner_Owned := newOwner_Owned;
[L1139]              __tmp__businessName_Litecoin_SV := businessName_Litecoin_SV;
[L1140]              __tmp__businessCountry_Litecoin_SV := businessCountry_Litecoin_SV;
[L1141]              __tmp__symbol_Litecoin_SV := symbol_Litecoin_SV;
[L1142]              __tmp__name_Litecoin_SV := name_Litecoin_SV;
[L1143]              __tmp__decimals_Litecoin_SV := decimals_Litecoin_SV;
[L1144]              __tmp___totalSupply_Litecoin_SV := _totalSupply_Litecoin_SV;
[L1145]              __tmp__balances_Litecoin_SV := balances_Litecoin_SV;
[L1146]              __tmp__allowed_Litecoin_SV := allowed_Litecoin_SV;
[L1147]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__fail(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L2667]  COND TRUE   __tmp__DType[this] == Litecoin_SV
[L2668]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2238]  COND TRUE   !(b_s45 <= a_s45)
[L2239]              revert := true;
[L2668]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2669]  COND TRUE   revert
[L1147]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__fail(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L1148]              assume revert || gas < 0;
[L4515]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

[2020-11-24 20:35:27,058 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:35:27,058 INFO  L82        PathProgramCache]: Analyzing trace with hash 1169555953, now seen corresponding path program 1 times
[2020-11-24 20:35:27,059 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:35:27,073 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:35:27,275 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 20:35:27,275 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:35:27,275 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [14] imperfect sequences [] total 14
[2020-11-24 20:35:27,275 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:35:27,275 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 15 interpolants.
[2020-11-24 20:35:27,276 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=29, Invalid=181, Unknown=0, NotChecked=0, Total=210
[2020-11-24 20:35:27,276 INFO  L87              Difference]: Start difference. First operand 2835 states and 3032 transitions. cyclomatic complexity: 199 Second operand 15 states.
[2020-11-24 20:35:29,101 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:35:29,101 INFO  L93              Difference]: Finished difference Result 3087 states and 3333 transitions.
[2020-11-24 20:35:29,101 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-24 20:35:29,101 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3087 states and 3333 transitions.
[2020-11-24 20:35:29,110 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-24 20:35:29,118 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3087 states to 3087 states and 3333 transitions.
[2020-11-24 20:35:29,118 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1099
[2020-11-24 20:35:29,119 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1099
[2020-11-24 20:35:29,119 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3087 states and 3333 transitions.
[2020-11-24 20:35:29,122 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:35:29,122 INFO  L728         BuchiCegarLoop]: Abstraction has 3087 states and 3333 transitions.
[2020-11-24 20:35:29,125 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3087 states and 3333 transitions.
[2020-11-24 20:35:29,147 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3087 to 2998.
[2020-11-24 20:35:29,147 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2998 states.
[2020-11-24 20:35:29,151 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2998 states to 2998 states and 3212 transitions.
[2020-11-24 20:35:29,151 INFO  L751         BuchiCegarLoop]: Abstraction has 2998 states and 3212 transitions.
[2020-11-24 20:35:29,151 INFO  L631         BuchiCegarLoop]: Abstraction has 2998 states and 3212 transitions.
[2020-11-24 20:35:29,151 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-24 20:35:29,151 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2998 states and 3212 transitions.
[2020-11-24 20:35:29,156 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 20:35:29,156 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:35:29,156 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:35:29,158 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:35:29,158 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_Litecoin_SV0 := false;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4599]              assume null == 0;
[L4600]  CALL        call this := FreshRefGenerator__success();
[L2180]              havoc newRef;
[L2181]              assume Alloc[newRef] == false;
[L2182]              Alloc[newRef] := true;
[L2183]              assume newRef != null;
[L4600]  RET         call this := FreshRefGenerator__success();
[L4601]              assume now >= 0;
[L4602]              assume DType[this] == Litecoin_SV;
[L4603]              assume msgvalue_MSG == 0;
[L4604]              gas := gas - 53000;
[L4605]  CALL        call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L825]               havoc __exception;
[L826]               revert := false;
[L827]   COND FALSE  !(__exception)
[L852]   CALL        call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L2536]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2301]              assume msgsender_MSG != null;
[L2302]              Balance[this] := 0;
[L2316]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2317]  COND FALSE  !(revert)
[L2536]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2537]  COND FALSE  !(revert)
[L2540]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2386]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2368]              assume msgsender_MSG != null;
[L2369]              Balance[this] := 0;
[L2370]              owner_Owned[this] := null;
[L2371]              newOwner_Owned[this] := null;
[L2373]              owner_Owned[this] := msgsender_MSG;
[L2386]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2387]  COND FALSE  !(revert)
[L2540]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2541]  COND FALSE  !(revert)
[L2544]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2212]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2197]              assume msgsender_MSG != null;
[L2198]              Balance[this] := 0;
[L2212]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2213]  COND FALSE  !(revert)
[L2544]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2545]  COND FALSE  !(revert)
[L2548]  CALL        call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2489]              assume msgsender_MSG != null;
[L2490]              Balance[this] := 0;
[L2491]              businessName_Litecoin_SV[this] := 1031794244;
[L2492]              businessCountry_Litecoin_SV[this] := 1031794244;
[L2493]              symbol_Litecoin_SV[this] := 1031794244;
[L2494]              name_Litecoin_SV[this] := 1031794244;
[L2495]              decimals_Litecoin_SV[this] := 0;
[L2496]              _totalSupply_Litecoin_SV[this] := 0;
[L2497]              balances_Litecoin_SV[this] := zeroRefintArr();
[L2498]              sum_balances0[this] := 0;
[L2499]              allowed_Litecoin_SV[this] := zeroRefRefintArr();
[L2500]              sum_allowed1[this] := 0;
[L2502]              businessName_Litecoin_SV[this] := -1948412360;
[L2503]              businessCountry_Litecoin_SV[this] := 1439465232;
[L2504]              symbol_Litecoin_SV[this] := -803338840;
[L2505]              name_Litecoin_SV[this] := 1836794956;
[L2506]              decimals_Litecoin_SV[this] := 18;
[L2507]              _totalSupply_Litecoin_SV[this] := 25000000000000000000000000;
[L2508]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2509]              balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131] := _totalSupply_Litecoin_SV[this];
[L2510]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2511]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2548]  RET         call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2549]  COND FALSE  !(revert)
[L852]   RET         call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L853]               assume !revert && gas >= 0;
[L4605]  RET         call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume !revert && gas >= 0;
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND FALSE  !(choice == 14)
[L4510]  COND TRUE   choice == 13
[L4511]              gas := gas - 21000;
[L4512]  COND TRUE   gas >= 0
[L4513]              assume tokens_s470 >= 0 && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4514]              assume msgvalue_MSG == 0;
[L4515]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s470 && p1 != to_s470) && (p2 != from_s470 || p3 != msgsender_MSG)) && from_s470 != to_s470) && tokens_s470 <= balances_Litecoin_SV[this][from_s470]) && tokens_s470 <= allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) && balances_Litecoin_SV[this][to_s470] + tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s470 >= 0) && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s470] >= 0) && balances_Litecoin_SV[this][to_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][from_s470] >= 0) && balances_Litecoin_SV[this][from_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] >= 0) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Litecoin_SV0 := true;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]                 revert := revert_hold;
[L1123]              havoc __exception;
[L1124]              revert := false;
[L1125]  COND FALSE  !(__exception)
[L1150]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L2709]  COND TRUE   DType[this] == Litecoin_SV
[L2710]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2710]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2711]  COND FALSE  !(revert)
[L2717]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][from_s470];
[L2718]              balances_Litecoin_SV[this][from_s470] := __var_5;
[L2719]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][from_s470];
[L2720]  COND TRUE   DType[this] == Litecoin_SV
[L2721]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2721]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2722]  COND FALSE  !(revert)
[L2728]              sum_allowed1[from_s470] := sum_allowed1[from_s470] - allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2729]              allowed_Litecoin_SV[this][from_s470][msgsender_MSG] := __var_6;
[L2730]              sum_allowed1[from_s470] := sum_allowed1[from_s470] + allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2731]  COND TRUE   DType[this] == Litecoin_SV
[L2732]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2229]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2230]  COND FALSE  !(!(c_s23 >= a_s23))
[L2732]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2733]  COND FALSE  !(revert)
[L2739]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][to_s470];
[L2740]              balances_Litecoin_SV[this][to_s470] := __var_7;
[L2741]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][to_s470];
[L2742]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2743]              success_s470 := true;
[L1150]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L1151]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((((success_s470 == true && balances_Litecoin_SV[this][from_s470] == old(balances_Litecoin_SV[this][from_s470]) - tokens_s470) && balances_Litecoin_SV[this][to_s470] == old(balances_Litecoin_SV[this][to_s470]) + tokens_s470) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] == old(allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) - tokens_s470) && _totalSupply_Litecoin_SV[this] == old(_totalSupply_Litecoin_SV[this])) && balances_Litecoin_SV[this][p1] == old(balances_Litecoin_SV[this][p1])) && allowed_Litecoin_SV[this][p2][p3] == old(allowed_Litecoin_SV[this][p2][p3])) && businessName_Litecoin_SV[this] == old(businessName_Litecoin_SV[this])) && businessCountry_Litecoin_SV[this] == old(businessCountry_Litecoin_SV[this])) && symbol_Litecoin_SV[this] == old(symbol_Litecoin_SV[this])) && name_Litecoin_SV[this] == old(name_Litecoin_SV[this])) && decimals_Litecoin_SV[this] == old(decimals_Litecoin_SV[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4515]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

Loop:
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND TRUE   choice == 22
[L4447]              gas := gas - 21000;
[L4448]  COND FALSE  !(gas >= 0)
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

[2020-11-24 20:35:29,161 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:35:29,161 INFO  L82        PathProgramCache]: Analyzing trace with hash -1844029801, now seen corresponding path program 1 times
[2020-11-24 20:35:29,162 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:35:29,243 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:35:30,453 WARN  L188               SmtUtils]: Spent 116.00 ms on a formula simplification. DAG size of input: 147 DAG size of output: 96
[2020-11-24 20:35:30,668 WARN  L188               SmtUtils]: Spent 166.00 ms on a formula simplification. DAG size of input: 147 DAG size of output: 96
[2020-11-24 20:35:30,861 WARN  L188               SmtUtils]: Spent 143.00 ms on a formula simplification. DAG size of input: 140 DAG size of output: 105
[2020-11-24 20:35:31,562 INFO  L134       CoverageAnalysis]: Checked inductivity of 4 backedges. 1 proven. 2 refuted. 0 times theorem prover too weak. 1 trivial. 0 not checked.
[2020-11-24 20:35:31,562 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-24 20:35:31,562 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [32] total 32
[2020-11-24 20:35:31,563 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:35:31,563 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 33 interpolants.
[2020-11-24 20:35:31,563 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=84, Invalid=972, Unknown=0, NotChecked=0, Total=1056
[2020-11-24 20:35:31,563 INFO  L87              Difference]: Start difference. First operand 2998 states and 3212 transitions. cyclomatic complexity: 218 Second operand 33 states.
[2020-11-24 20:35:44,706 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:35:44,706 INFO  L93              Difference]: Finished difference Result 3066 states and 3323 transitions.
[2020-11-24 20:35:44,706 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 32 states. 
[2020-11-24 20:35:44,707 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3066 states and 3323 transitions.
[2020-11-24 20:35:44,712 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 10
[2020-11-24 20:35:44,720 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3066 states to 3066 states and 3323 transitions.
[2020-11-24 20:35:44,720 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1115
[2020-11-24 20:35:44,720 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1115
[2020-11-24 20:35:44,721 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3066 states and 3323 transitions.
[2020-11-24 20:35:44,723 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:35:44,723 INFO  L728         BuchiCegarLoop]: Abstraction has 3066 states and 3323 transitions.
[2020-11-24 20:35:44,726 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3066 states and 3323 transitions.
[2020-11-24 20:35:44,746 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3066 to 3049.
[2020-11-24 20:35:44,746 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3049 states.
[2020-11-24 20:35:44,749 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3049 states to 3049 states and 3278 transitions.
[2020-11-24 20:35:44,749 INFO  L751         BuchiCegarLoop]: Abstraction has 3049 states and 3278 transitions.
[2020-11-24 20:35:44,749 INFO  L631         BuchiCegarLoop]: Abstraction has 3049 states and 3278 transitions.
[2020-11-24 20:35:44,749 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-24 20:35:44,749 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3049 states and 3278 transitions.
[2020-11-24 20:35:44,753 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-24 20:35:44,753 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:35:44,753 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:35:44,754 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:35:44,754 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_Litecoin_SV0 := false;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4599]              assume null == 0;
[L4600]  CALL        call this := FreshRefGenerator__success();
[L2180]              havoc newRef;
[L2181]              assume Alloc[newRef] == false;
[L2182]              Alloc[newRef] := true;
[L2183]              assume newRef != null;
[L4600]  RET         call this := FreshRefGenerator__success();
[L4601]              assume now >= 0;
[L4602]              assume DType[this] == Litecoin_SV;
[L4603]              assume msgvalue_MSG == 0;
[L4604]              gas := gas - 53000;
[L4605]  CALL        call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L825]               havoc __exception;
[L826]               revert := false;
[L827]   COND FALSE  !(__exception)
[L852]   CALL        call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L2536]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2301]              assume msgsender_MSG != null;
[L2302]              Balance[this] := 0;
[L2316]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2317]  COND FALSE  !(revert)
[L2536]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2537]  COND FALSE  !(revert)
[L2540]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2386]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2368]              assume msgsender_MSG != null;
[L2369]              Balance[this] := 0;
[L2370]              owner_Owned[this] := null;
[L2371]              newOwner_Owned[this] := null;
[L2373]              owner_Owned[this] := msgsender_MSG;
[L2386]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2387]  COND FALSE  !(revert)
[L2540]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2541]  COND FALSE  !(revert)
[L2544]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2212]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2197]              assume msgsender_MSG != null;
[L2198]              Balance[this] := 0;
[L2212]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2213]  COND FALSE  !(revert)
[L2544]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2545]  COND FALSE  !(revert)
[L2548]  CALL        call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2489]              assume msgsender_MSG != null;
[L2490]              Balance[this] := 0;
[L2491]              businessName_Litecoin_SV[this] := 1031794244;
[L2492]              businessCountry_Litecoin_SV[this] := 1031794244;
[L2493]              symbol_Litecoin_SV[this] := 1031794244;
[L2494]              name_Litecoin_SV[this] := 1031794244;
[L2495]              decimals_Litecoin_SV[this] := 0;
[L2496]              _totalSupply_Litecoin_SV[this] := 0;
[L2497]              balances_Litecoin_SV[this] := zeroRefintArr();
[L2498]              sum_balances0[this] := 0;
[L2499]              allowed_Litecoin_SV[this] := zeroRefRefintArr();
[L2500]              sum_allowed1[this] := 0;
[L2502]              businessName_Litecoin_SV[this] := -1948412360;
[L2503]              businessCountry_Litecoin_SV[this] := 1439465232;
[L2504]              symbol_Litecoin_SV[this] := -803338840;
[L2505]              name_Litecoin_SV[this] := 1836794956;
[L2506]              decimals_Litecoin_SV[this] := 18;
[L2507]              _totalSupply_Litecoin_SV[this] := 25000000000000000000000000;
[L2508]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2509]              balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131] := _totalSupply_Litecoin_SV[this];
[L2510]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2511]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2548]  RET         call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2549]  COND FALSE  !(revert)
[L852]   RET         call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L853]               assume !revert && gas >= 0;
[L4605]  RET         call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume !revert && gas >= 0;
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND FALSE  !(choice == 14)
[L4510]  COND TRUE   choice == 13
[L4511]              gas := gas - 21000;
[L4512]  COND TRUE   gas >= 0
[L4513]              assume tokens_s470 >= 0 && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4514]              assume msgvalue_MSG == 0;
[L4515]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s470 && p1 != to_s470) && (p2 != from_s470 || p3 != msgsender_MSG)) && from_s470 != to_s470) && tokens_s470 <= balances_Litecoin_SV[this][from_s470]) && tokens_s470 <= allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) && balances_Litecoin_SV[this][to_s470] + tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s470 >= 0) && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s470] >= 0) && balances_Litecoin_SV[this][to_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][from_s470] >= 0) && balances_Litecoin_SV[this][from_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] >= 0) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Litecoin_SV0 := true;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]                 revert := revert_hold;
[L1123]              havoc __exception;
[L1124]              revert := false;
[L1125]  COND TRUE   __exception
[L1126]              __tmp__Balance := Balance;
[L1127]              __tmp__DType := DType;
[L1128]              __tmp__Alloc := Alloc;
[L1129]              __tmp__balance_ADDR := balance_ADDR;
[L1130]              __tmp__M_Ref_int := M_Ref_int;
[L1131]              __tmp__sum_balances0 := sum_balances0;
[L1132]              __tmp__alloc_allowed_Litecoin_SV_lvl0 := alloc_allowed_Litecoin_SV_lvl0;
[L1133]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1134]              __tmp__sum_allowed1 := sum_allowed1;
[L1135]              __tmp__Length := Length;
[L1136]              __tmp__now := now;
[L1137]              __tmp__owner_Owned := owner_Owned;
[L1138]              __tmp__newOwner_Owned := newOwner_Owned;
[L1139]              __tmp__businessName_Litecoin_SV := businessName_Litecoin_SV;
[L1140]              __tmp__businessCountry_Litecoin_SV := businessCountry_Litecoin_SV;
[L1141]              __tmp__symbol_Litecoin_SV := symbol_Litecoin_SV;
[L1142]              __tmp__name_Litecoin_SV := name_Litecoin_SV;
[L1143]              __tmp__decimals_Litecoin_SV := decimals_Litecoin_SV;
[L1144]              __tmp___totalSupply_Litecoin_SV := _totalSupply_Litecoin_SV;
[L1145]              __tmp__balances_Litecoin_SV := balances_Litecoin_SV;
[L1146]              __tmp__allowed_Litecoin_SV := allowed_Litecoin_SV;
[L1147]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__fail(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L2667]  COND TRUE   __tmp__DType[this] == Litecoin_SV
[L2668]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2238]  COND FALSE  !(!(b_s45 <= a_s45))
[L2242]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2668]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2669]  COND FALSE  !(revert)
[L2675]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_Litecoin_SV[this][from_s470];
[L2676]              __tmp__balances_Litecoin_SV[this][from_s470] := __var_5;
[L2677]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_Litecoin_SV[this][from_s470];
[L2678]  COND TRUE   __tmp__DType[this] == Litecoin_SV
[L2679]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2238]  COND TRUE   !(b_s45 <= a_s45)
[L2239]              revert := true;
[L2679]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2680]  COND TRUE   revert
[L1147]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__fail(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L1148]              assume revert || gas < 0;
[L4515]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

Loop:
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND TRUE   choice == 22
[L4447]              gas := gas - 21000;
[L4448]  COND FALSE  !(gas >= 0)
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

[2020-11-24 20:35:44,757 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:35:44,758 INFO  L82        PathProgramCache]: Analyzing trace with hash -131853341, now seen corresponding path program 1 times
[2020-11-24 20:35:44,758 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:35:44,766 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:35:44,856 INFO  L134       CoverageAnalysis]: Checked inductivity of 3 backedges. 2 proven. 0 refuted. 0 times theorem prover too weak. 1 trivial. 0 not checked.
[2020-11-24 20:35:44,856 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:35:44,856 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-11-24 20:35:44,856 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:35:44,857 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-24 20:35:44,857 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=26, Invalid=156, Unknown=0, NotChecked=0, Total=182
[2020-11-24 20:35:44,857 INFO  L87              Difference]: Start difference. First operand 3049 states and 3278 transitions. cyclomatic complexity: 235 Second operand 14 states.
[2020-11-24 20:35:46,297 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:35:46,297 INFO  L93              Difference]: Finished difference Result 3139 states and 3422 transitions.
[2020-11-24 20:35:46,297 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-24 20:35:46,298 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3139 states and 3422 transitions.
[2020-11-24 20:35:46,304 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 10
[2020-11-24 20:35:46,311 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3139 states to 3139 states and 3422 transitions.
[2020-11-24 20:35:46,311 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1124
[2020-11-24 20:35:46,312 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1124
[2020-11-24 20:35:46,312 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3139 states and 3422 transitions.
[2020-11-24 20:35:46,314 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:35:46,314 INFO  L728         BuchiCegarLoop]: Abstraction has 3139 states and 3422 transitions.
[2020-11-24 20:35:46,316 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3139 states and 3422 transitions.
[2020-11-24 20:35:46,335 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3139 to 3049.
[2020-11-24 20:35:46,335 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3049 states.
[2020-11-24 20:35:46,337 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3049 states to 3049 states and 3278 transitions.
[2020-11-24 20:35:46,337 INFO  L751         BuchiCegarLoop]: Abstraction has 3049 states and 3278 transitions.
[2020-11-24 20:35:46,337 INFO  L631         BuchiCegarLoop]: Abstraction has 3049 states and 3278 transitions.
[2020-11-24 20:35:46,337 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-24 20:35:46,338 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3049 states and 3278 transitions.
[2020-11-24 20:35:46,341 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-24 20:35:46,341 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:35:46,341 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:35:46,342 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:35:46,342 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_Litecoin_SV0 := false;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4599]              assume null == 0;
[L4600]  CALL        call this := FreshRefGenerator__success();
[L2180]              havoc newRef;
[L2181]              assume Alloc[newRef] == false;
[L2182]              Alloc[newRef] := true;
[L2183]              assume newRef != null;
[L4600]  RET         call this := FreshRefGenerator__success();
[L4601]              assume now >= 0;
[L4602]              assume DType[this] == Litecoin_SV;
[L4603]              assume msgvalue_MSG == 0;
[L4604]              gas := gas - 53000;
[L4605]  CALL        call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L825]               havoc __exception;
[L826]               revert := false;
[L827]   COND FALSE  !(__exception)
[L852]   CALL        call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L2536]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2301]              assume msgsender_MSG != null;
[L2302]              Balance[this] := 0;
[L2316]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2317]  COND FALSE  !(revert)
[L2536]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2537]  COND FALSE  !(revert)
[L2540]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2386]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2368]              assume msgsender_MSG != null;
[L2369]              Balance[this] := 0;
[L2370]              owner_Owned[this] := null;
[L2371]              newOwner_Owned[this] := null;
[L2373]              owner_Owned[this] := msgsender_MSG;
[L2386]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2387]  COND FALSE  !(revert)
[L2540]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2541]  COND FALSE  !(revert)
[L2544]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2212]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2197]              assume msgsender_MSG != null;
[L2198]              Balance[this] := 0;
[L2212]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2213]  COND FALSE  !(revert)
[L2544]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2545]  COND FALSE  !(revert)
[L2548]  CALL        call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2489]              assume msgsender_MSG != null;
[L2490]              Balance[this] := 0;
[L2491]              businessName_Litecoin_SV[this] := 1031794244;
[L2492]              businessCountry_Litecoin_SV[this] := 1031794244;
[L2493]              symbol_Litecoin_SV[this] := 1031794244;
[L2494]              name_Litecoin_SV[this] := 1031794244;
[L2495]              decimals_Litecoin_SV[this] := 0;
[L2496]              _totalSupply_Litecoin_SV[this] := 0;
[L2497]              balances_Litecoin_SV[this] := zeroRefintArr();
[L2498]              sum_balances0[this] := 0;
[L2499]              allowed_Litecoin_SV[this] := zeroRefRefintArr();
[L2500]              sum_allowed1[this] := 0;
[L2502]              businessName_Litecoin_SV[this] := -1948412360;
[L2503]              businessCountry_Litecoin_SV[this] := 1439465232;
[L2504]              symbol_Litecoin_SV[this] := -803338840;
[L2505]              name_Litecoin_SV[this] := 1836794956;
[L2506]              decimals_Litecoin_SV[this] := 18;
[L2507]              _totalSupply_Litecoin_SV[this] := 25000000000000000000000000;
[L2508]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2509]              balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131] := _totalSupply_Litecoin_SV[this];
[L2510]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2511]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2548]  RET         call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2549]  COND FALSE  !(revert)
[L852]   RET         call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L853]               assume !revert && gas >= 0;
[L4605]  RET         call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume !revert && gas >= 0;
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND FALSE  !(choice == 14)
[L4510]  COND TRUE   choice == 13
[L4511]              gas := gas - 21000;
[L4512]  COND TRUE   gas >= 0
[L4513]              assume tokens_s470 >= 0 && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4514]              assume msgvalue_MSG == 0;
[L4515]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s470 && p1 != to_s470) && (p2 != from_s470 || p3 != msgsender_MSG)) && from_s470 != to_s470) && tokens_s470 <= balances_Litecoin_SV[this][from_s470]) && tokens_s470 <= allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) && balances_Litecoin_SV[this][to_s470] + tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s470 >= 0) && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s470] >= 0) && balances_Litecoin_SV[this][to_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][from_s470] >= 0) && balances_Litecoin_SV[this][from_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] >= 0) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Litecoin_SV0 := true;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]                 revert := revert_hold;
[L1123]              havoc __exception;
[L1124]              revert := false;
[L1125]  COND TRUE   __exception
[L1126]              __tmp__Balance := Balance;
[L1127]              __tmp__DType := DType;
[L1128]              __tmp__Alloc := Alloc;
[L1129]              __tmp__balance_ADDR := balance_ADDR;
[L1130]              __tmp__M_Ref_int := M_Ref_int;
[L1131]              __tmp__sum_balances0 := sum_balances0;
[L1132]              __tmp__alloc_allowed_Litecoin_SV_lvl0 := alloc_allowed_Litecoin_SV_lvl0;
[L1133]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1134]              __tmp__sum_allowed1 := sum_allowed1;
[L1135]              __tmp__Length := Length;
[L1136]              __tmp__now := now;
[L1137]              __tmp__owner_Owned := owner_Owned;
[L1138]              __tmp__newOwner_Owned := newOwner_Owned;
[L1139]              __tmp__businessName_Litecoin_SV := businessName_Litecoin_SV;
[L1140]              __tmp__businessCountry_Litecoin_SV := businessCountry_Litecoin_SV;
[L1141]              __tmp__symbol_Litecoin_SV := symbol_Litecoin_SV;
[L1142]              __tmp__name_Litecoin_SV := name_Litecoin_SV;
[L1143]              __tmp__decimals_Litecoin_SV := decimals_Litecoin_SV;
[L1144]              __tmp___totalSupply_Litecoin_SV := _totalSupply_Litecoin_SV;
[L1145]              __tmp__balances_Litecoin_SV := balances_Litecoin_SV;
[L1146]              __tmp__allowed_Litecoin_SV := allowed_Litecoin_SV;
[L1147]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__fail(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L2667]  COND TRUE   __tmp__DType[this] == Litecoin_SV
[L2668]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2238]  COND FALSE  !(!(b_s45 <= a_s45))
[L2242]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2668]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2669]  COND FALSE  !(revert)
[L2675]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_Litecoin_SV[this][from_s470];
[L2676]              __tmp__balances_Litecoin_SV[this][from_s470] := __var_5;
[L2677]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_Litecoin_SV[this][from_s470];
[L2678]  COND TRUE   __tmp__DType[this] == Litecoin_SV
[L2679]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2238]  COND FALSE  !(!(b_s45 <= a_s45))
[L2242]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2679]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2680]  COND FALSE  !(revert)
[L2686]              __tmp__sum_allowed1[from_s470] := __tmp__sum_allowed1[from_s470] - __tmp__allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2687]              __tmp__allowed_Litecoin_SV[this][from_s470][msgsender_MSG] := __var_6;
[L2688]              __tmp__sum_allowed1[from_s470] := __tmp__sum_allowed1[from_s470] + __tmp__allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2689]  COND TRUE   __tmp__DType[this] == Litecoin_SV
[L2690]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2220]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2221]  COND TRUE   !(c_s23 >= a_s23)
[L2222]              revert := true;
[L2690]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2691]  COND TRUE   revert
[L1147]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__fail(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L1148]              assume revert || gas < 0;
[L4515]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

Loop:
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND TRUE   choice == 22
[L4447]              gas := gas - 21000;
[L4448]  COND FALSE  !(gas >= 0)
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

[2020-11-24 20:35:46,345 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:35:46,345 INFO  L82        PathProgramCache]: Analyzing trace with hash -1650252840, now seen corresponding path program 1 times
[2020-11-24 20:35:46,345 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:35:46,354 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:35:46,492 INFO  L134       CoverageAnalysis]: Checked inductivity of 4 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 4 trivial. 0 not checked.
[2020-11-24 20:35:46,492 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:35:46,492 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [19] imperfect sequences [] total 19
[2020-11-24 20:35:46,492 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:35:46,492 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 20 interpolants.
[2020-11-24 20:35:46,493 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=42, Invalid=338, Unknown=0, NotChecked=0, Total=380
[2020-11-24 20:35:46,493 INFO  L87              Difference]: Start difference. First operand 3049 states and 3278 transitions. cyclomatic complexity: 235 Second operand 20 states.
[2020-11-24 20:35:49,655 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:35:49,655 INFO  L93              Difference]: Finished difference Result 3165 states and 3458 transitions.
[2020-11-24 20:35:49,655 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 22 states. 
[2020-11-24 20:35:49,656 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3165 states and 3458 transitions.
[2020-11-24 20:35:49,661 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 10
[2020-11-24 20:35:49,668 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3165 states to 3165 states and 3458 transitions.
[2020-11-24 20:35:49,668 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1137
[2020-11-24 20:35:49,669 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1137
[2020-11-24 20:35:49,669 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3165 states and 3458 transitions.
[2020-11-24 20:35:49,671 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:35:49,671 INFO  L728         BuchiCegarLoop]: Abstraction has 3165 states and 3458 transitions.
[2020-11-24 20:35:49,673 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3165 states and 3458 transitions.
[2020-11-24 20:35:49,691 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3165 to 3067.
[2020-11-24 20:35:49,691 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3067 states.
[2020-11-24 20:35:49,694 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3067 states to 3067 states and 3303 transitions.
[2020-11-24 20:35:49,694 INFO  L751         BuchiCegarLoop]: Abstraction has 3067 states and 3303 transitions.
[2020-11-24 20:35:49,694 INFO  L631         BuchiCegarLoop]: Abstraction has 3067 states and 3303 transitions.
[2020-11-24 20:35:49,694 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-24 20:35:49,694 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3067 states and 3303 transitions.
[2020-11-24 20:35:49,697 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-24 20:35:49,697 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:35:49,697 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:35:49,698 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:35:49,698 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_Litecoin_SV0 := false;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4599]              assume null == 0;
[L4600]  CALL        call this := FreshRefGenerator__success();
[L2180]              havoc newRef;
[L2181]              assume Alloc[newRef] == false;
[L2182]              Alloc[newRef] := true;
[L2183]              assume newRef != null;
[L4600]  RET         call this := FreshRefGenerator__success();
[L4601]              assume now >= 0;
[L4602]              assume DType[this] == Litecoin_SV;
[L4603]              assume msgvalue_MSG == 0;
[L4604]              gas := gas - 53000;
[L4605]  CALL        call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L825]               havoc __exception;
[L826]               revert := false;
[L827]   COND FALSE  !(__exception)
[L852]   CALL        call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L2536]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2301]              assume msgsender_MSG != null;
[L2302]              Balance[this] := 0;
[L2316]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2317]  COND FALSE  !(revert)
[L2536]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2537]  COND FALSE  !(revert)
[L2540]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2386]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2368]              assume msgsender_MSG != null;
[L2369]              Balance[this] := 0;
[L2370]              owner_Owned[this] := null;
[L2371]              newOwner_Owned[this] := null;
[L2373]              owner_Owned[this] := msgsender_MSG;
[L2386]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2387]  COND FALSE  !(revert)
[L2540]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2541]  COND FALSE  !(revert)
[L2544]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2212]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2197]              assume msgsender_MSG != null;
[L2198]              Balance[this] := 0;
[L2212]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2213]  COND FALSE  !(revert)
[L2544]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2545]  COND FALSE  !(revert)
[L2548]  CALL        call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2489]              assume msgsender_MSG != null;
[L2490]              Balance[this] := 0;
[L2491]              businessName_Litecoin_SV[this] := 1031794244;
[L2492]              businessCountry_Litecoin_SV[this] := 1031794244;
[L2493]              symbol_Litecoin_SV[this] := 1031794244;
[L2494]              name_Litecoin_SV[this] := 1031794244;
[L2495]              decimals_Litecoin_SV[this] := 0;
[L2496]              _totalSupply_Litecoin_SV[this] := 0;
[L2497]              balances_Litecoin_SV[this] := zeroRefintArr();
[L2498]              sum_balances0[this] := 0;
[L2499]              allowed_Litecoin_SV[this] := zeroRefRefintArr();
[L2500]              sum_allowed1[this] := 0;
[L2502]              businessName_Litecoin_SV[this] := -1948412360;
[L2503]              businessCountry_Litecoin_SV[this] := 1439465232;
[L2504]              symbol_Litecoin_SV[this] := -803338840;
[L2505]              name_Litecoin_SV[this] := 1836794956;
[L2506]              decimals_Litecoin_SV[this] := 18;
[L2507]              _totalSupply_Litecoin_SV[this] := 25000000000000000000000000;
[L2508]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2509]              balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131] := _totalSupply_Litecoin_SV[this];
[L2510]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2511]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2548]  RET         call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2549]  COND FALSE  !(revert)
[L852]   RET         call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L853]               assume !revert && gas >= 0;
[L4605]  RET         call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume !revert && gas >= 0;
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND FALSE  !(choice == 14)
[L4510]  COND TRUE   choice == 13
[L4511]              gas := gas - 21000;
[L4512]  COND TRUE   gas >= 0
[L4513]              assume tokens_s470 >= 0 && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4514]              assume msgvalue_MSG == 0;
[L4515]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s470 && p1 != to_s470) && (p2 != from_s470 || p3 != msgsender_MSG)) && from_s470 != to_s470) && tokens_s470 <= balances_Litecoin_SV[this][from_s470]) && tokens_s470 <= allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) && balances_Litecoin_SV[this][to_s470] + tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s470 >= 0) && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s470] >= 0) && balances_Litecoin_SV[this][to_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][from_s470] >= 0) && balances_Litecoin_SV[this][from_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] >= 0) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Litecoin_SV0 := true;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]                 revert := revert_hold;
[L1123]              havoc __exception;
[L1124]              revert := false;
[L1125]  COND TRUE   __exception
[L1126]              __tmp__Balance := Balance;
[L1127]              __tmp__DType := DType;
[L1128]              __tmp__Alloc := Alloc;
[L1129]              __tmp__balance_ADDR := balance_ADDR;
[L1130]              __tmp__M_Ref_int := M_Ref_int;
[L1131]              __tmp__sum_balances0 := sum_balances0;
[L1132]              __tmp__alloc_allowed_Litecoin_SV_lvl0 := alloc_allowed_Litecoin_SV_lvl0;
[L1133]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1134]              __tmp__sum_allowed1 := sum_allowed1;
[L1135]              __tmp__Length := Length;
[L1136]              __tmp__now := now;
[L1137]              __tmp__owner_Owned := owner_Owned;
[L1138]              __tmp__newOwner_Owned := newOwner_Owned;
[L1139]              __tmp__businessName_Litecoin_SV := businessName_Litecoin_SV;
[L1140]              __tmp__businessCountry_Litecoin_SV := businessCountry_Litecoin_SV;
[L1141]              __tmp__symbol_Litecoin_SV := symbol_Litecoin_SV;
[L1142]              __tmp__name_Litecoin_SV := name_Litecoin_SV;
[L1143]              __tmp__decimals_Litecoin_SV := decimals_Litecoin_SV;
[L1144]              __tmp___totalSupply_Litecoin_SV := _totalSupply_Litecoin_SV;
[L1145]              __tmp__balances_Litecoin_SV := balances_Litecoin_SV;
[L1146]              __tmp__allowed_Litecoin_SV := allowed_Litecoin_SV;
[L1147]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__fail(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L2667]  COND TRUE   __tmp__DType[this] == Litecoin_SV
[L2668]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2238]  COND FALSE  !(!(b_s45 <= a_s45))
[L2242]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2668]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2669]  COND FALSE  !(revert)
[L2675]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_Litecoin_SV[this][from_s470];
[L2676]              __tmp__balances_Litecoin_SV[this][from_s470] := __var_5;
[L2677]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_Litecoin_SV[this][from_s470];
[L2678]  COND TRUE   __tmp__DType[this] == Litecoin_SV
[L2679]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2238]  COND FALSE  !(!(b_s45 <= a_s45))
[L2242]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2679]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2680]  COND FALSE  !(revert)
[L2686]              __tmp__sum_allowed1[from_s470] := __tmp__sum_allowed1[from_s470] - __tmp__allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2687]              __tmp__allowed_Litecoin_SV[this][from_s470][msgsender_MSG] := __var_6;
[L2688]              __tmp__sum_allowed1[from_s470] := __tmp__sum_allowed1[from_s470] + __tmp__allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2689]  COND TRUE   __tmp__DType[this] == Litecoin_SV
[L2690]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2220]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2221]  COND FALSE  !(!(c_s23 >= a_s23))
[L2690]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2691]  COND FALSE  !(revert)
[L2697]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_Litecoin_SV[this][to_s470];
[L2698]              __tmp__balances_Litecoin_SV[this][to_s470] := __var_7;
[L2699]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_Litecoin_SV[this][to_s470];
[L2700]              success_s470 := true;
[L1147]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__fail(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L1148]              assume revert || gas < 0;
[L4515]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

Loop:
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND FALSE  !(choice == 14)
[L4510]  COND TRUE   choice == 13
[L4511]              gas := gas - 21000;
[L4512]  COND TRUE   gas >= 0
[L4513]              assume tokens_s470 >= 0 && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4514]              assume msgvalue_MSG == 0;
[L4515]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s470 && p1 != to_s470) && (p2 != from_s470 || p3 != msgsender_MSG)) && from_s470 != to_s470) && tokens_s470 <= balances_Litecoin_SV[this][from_s470]) && tokens_s470 <= allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) && balances_Litecoin_SV[this][to_s470] + tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s470 >= 0) && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s470] >= 0) && balances_Litecoin_SV[this][to_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][from_s470] >= 0) && balances_Litecoin_SV[this][from_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] >= 0) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Litecoin_SV0 := true;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]                 revert := revert_hold;
[L1123]              havoc __exception;
[L1124]              revert := false;
[L1125]  COND TRUE   __exception
[L1126]              __tmp__Balance := Balance;
[L1127]              __tmp__DType := DType;
[L1128]              __tmp__Alloc := Alloc;
[L1129]              __tmp__balance_ADDR := balance_ADDR;
[L1130]              __tmp__M_Ref_int := M_Ref_int;
[L1131]              __tmp__sum_balances0 := sum_balances0;
[L1132]              __tmp__alloc_allowed_Litecoin_SV_lvl0 := alloc_allowed_Litecoin_SV_lvl0;
[L1133]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1134]              __tmp__sum_allowed1 := sum_allowed1;
[L1135]              __tmp__Length := Length;
[L1136]              __tmp__now := now;
[L1137]              __tmp__owner_Owned := owner_Owned;
[L1138]              __tmp__newOwner_Owned := newOwner_Owned;
[L1139]              __tmp__businessName_Litecoin_SV := businessName_Litecoin_SV;
[L1140]              __tmp__businessCountry_Litecoin_SV := businessCountry_Litecoin_SV;
[L1141]              __tmp__symbol_Litecoin_SV := symbol_Litecoin_SV;
[L1142]              __tmp__name_Litecoin_SV := name_Litecoin_SV;
[L1143]              __tmp__decimals_Litecoin_SV := decimals_Litecoin_SV;
[L1144]              __tmp___totalSupply_Litecoin_SV := _totalSupply_Litecoin_SV;
[L1145]              __tmp__balances_Litecoin_SV := balances_Litecoin_SV;
[L1146]              __tmp__allowed_Litecoin_SV := allowed_Litecoin_SV;
[L1147]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__fail(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L2667]  COND TRUE   __tmp__DType[this] == Litecoin_SV
[L2668]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2238]  COND FALSE  !(!(b_s45 <= a_s45))
[L2242]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2668]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2669]  COND FALSE  !(revert)
[L2675]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_Litecoin_SV[this][from_s470];
[L2676]              __tmp__balances_Litecoin_SV[this][from_s470] := __var_5;
[L2677]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_Litecoin_SV[this][from_s470];
[L2678]  COND TRUE   __tmp__DType[this] == Litecoin_SV
[L2679]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2238]  COND FALSE  !(!(b_s45 <= a_s45))
[L2242]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2679]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2680]  COND FALSE  !(revert)
[L2686]              __tmp__sum_allowed1[from_s470] := __tmp__sum_allowed1[from_s470] - __tmp__allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2687]              __tmp__allowed_Litecoin_SV[this][from_s470][msgsender_MSG] := __var_6;
[L2688]              __tmp__sum_allowed1[from_s470] := __tmp__sum_allowed1[from_s470] + __tmp__allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2689]  COND TRUE   __tmp__DType[this] == Litecoin_SV
[L2690]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2220]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2221]  COND FALSE  !(!(c_s23 >= a_s23))
[L2690]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2691]  COND FALSE  !(revert)
[L2697]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_Litecoin_SV[this][to_s470];
[L2698]              __tmp__balances_Litecoin_SV[this][to_s470] := __var_7;
[L2699]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_Litecoin_SV[this][to_s470];
[L2700]              success_s470 := true;
[L1147]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__fail(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L1148]              assume revert || gas < 0;
[L4515]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

[2020-11-24 20:35:49,702 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:35:49,702 INFO  L82        PathProgramCache]: Analyzing trace with hash -1016330052, now seen corresponding path program 1 times
[2020-11-24 20:35:49,702 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:35:49,710 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:35:49,735 INFO  L134       CoverageAnalysis]: Checked inductivity of 4 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 4 trivial. 0 not checked.
[2020-11-24 20:35:49,735 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:35:49,735 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-24 20:35:49,736 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:35:49,736 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-24 20:35:49,736 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-24 20:35:49,736 INFO  L87              Difference]: Start difference. First operand 3067 states and 3303 transitions. cyclomatic complexity: 242 Second operand 5 states.
[2020-11-24 20:35:50,031 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:35:50,031 INFO  L93              Difference]: Finished difference Result 3841 states and 4328 transitions.
[2020-11-24 20:35:50,031 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 20:35:50,031 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3841 states and 4328 transitions.
[2020-11-24 20:35:50,040 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-24 20:35:50,049 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3841 states to 2870 states and 3354 transitions.
[2020-11-24 20:35:50,050 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 825
[2020-11-24 20:35:50,050 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 825
[2020-11-24 20:35:50,050 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2870 states and 3354 transitions.
[2020-11-24 20:35:50,053 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:35:50,053 INFO  L728         BuchiCegarLoop]: Abstraction has 2870 states and 3354 transitions.
[2020-11-24 20:35:50,055 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2870 states and 3354 transitions.
[2020-11-24 20:35:50,072 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2870 to 2067.
[2020-11-24 20:35:50,072 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2067 states.
[2020-11-24 20:35:50,074 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2067 states to 2067 states and 2244 transitions.
[2020-11-24 20:35:50,074 INFO  L751         BuchiCegarLoop]: Abstraction has 2067 states and 2244 transitions.
[2020-11-24 20:35:50,074 INFO  L631         BuchiCegarLoop]: Abstraction has 2067 states and 2244 transitions.
[2020-11-24 20:35:50,074 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-24 20:35:50,074 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2067 states and 2244 transitions.
[2020-11-24 20:35:50,076 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 20:35:50,076 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:35:50,076 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:35:50,077 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:35:50,077 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_Litecoin_SV0 := false;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4599]              assume null == 0;
[L4600]  CALL        call this := FreshRefGenerator__success();
[L2180]              havoc newRef;
[L2181]              assume Alloc[newRef] == false;
[L2182]              Alloc[newRef] := true;
[L2183]              assume newRef != null;
[L4600]  RET         call this := FreshRefGenerator__success();
[L4601]              assume now >= 0;
[L4602]              assume DType[this] == Litecoin_SV;
[L4603]              assume msgvalue_MSG == 0;
[L4604]              gas := gas - 53000;
[L4605]  CALL        call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L825]               havoc __exception;
[L826]               revert := false;
[L827]   COND FALSE  !(__exception)
[L852]   CALL        call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L2536]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2301]              assume msgsender_MSG != null;
[L2302]              Balance[this] := 0;
[L2316]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2317]  COND FALSE  !(revert)
[L2536]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2537]  COND FALSE  !(revert)
[L2540]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2386]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2368]              assume msgsender_MSG != null;
[L2369]              Balance[this] := 0;
[L2370]              owner_Owned[this] := null;
[L2371]              newOwner_Owned[this] := null;
[L2373]              owner_Owned[this] := msgsender_MSG;
[L2386]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2387]  COND FALSE  !(revert)
[L2540]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2541]  COND FALSE  !(revert)
[L2544]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2212]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2197]              assume msgsender_MSG != null;
[L2198]              Balance[this] := 0;
[L2212]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2213]  COND FALSE  !(revert)
[L2544]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2545]  COND FALSE  !(revert)
[L2548]  CALL        call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2489]              assume msgsender_MSG != null;
[L2490]              Balance[this] := 0;
[L2491]              businessName_Litecoin_SV[this] := 1031794244;
[L2492]              businessCountry_Litecoin_SV[this] := 1031794244;
[L2493]              symbol_Litecoin_SV[this] := 1031794244;
[L2494]              name_Litecoin_SV[this] := 1031794244;
[L2495]              decimals_Litecoin_SV[this] := 0;
[L2496]              _totalSupply_Litecoin_SV[this] := 0;
[L2497]              balances_Litecoin_SV[this] := zeroRefintArr();
[L2498]              sum_balances0[this] := 0;
[L2499]              allowed_Litecoin_SV[this] := zeroRefRefintArr();
[L2500]              sum_allowed1[this] := 0;
[L2502]              businessName_Litecoin_SV[this] := -1948412360;
[L2503]              businessCountry_Litecoin_SV[this] := 1439465232;
[L2504]              symbol_Litecoin_SV[this] := -803338840;
[L2505]              name_Litecoin_SV[this] := 1836794956;
[L2506]              decimals_Litecoin_SV[this] := 18;
[L2507]              _totalSupply_Litecoin_SV[this] := 25000000000000000000000000;
[L2508]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2509]              balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131] := _totalSupply_Litecoin_SV[this];
[L2510]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2511]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2548]  RET         call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2549]  COND FALSE  !(revert)
[L852]   RET         call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L853]               assume !revert && gas >= 0;
[L4605]  RET         call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume !revert && gas >= 0;
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND TRUE   choice == 14
[L4504]              gas := gas - 21000;
[L4505]  COND TRUE   gas >= 0
[L4506]              assume tokens_s411 >= 0 && tokens_s411 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4507]              assume msgvalue_MSG == 0;
[L4508]  CALL        call success_s411 := approve~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, spender_s411, tokens_s411);
[L1061]              havoc __exception;
[L1062]              revert := false;
[L1063]  COND FALSE  !(__exception)
[L1088]  CALL        call success_s411 := approve~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, spender_s411, tokens_s411);
[L2654]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_Litecoin_SV[this][msgsender_MSG][spender_s411];
[L2655]              allowed_Litecoin_SV[this][msgsender_MSG][spender_s411] := tokens_s411;
[L2656]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_Litecoin_SV[this][msgsender_MSG][spender_s411];
[L2657]              assert { :EventEmitted "Approval_Litecoin_SV" } true;
[L2658]              success_s411 := true;
[L1088]  RET         call success_s411 := approve~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, spender_s411, tokens_s411);
[L1089]              assume !revert && gas >= 0;
[L4508]  RET         call success_s411 := approve~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, spender_s411, tokens_s411);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND FALSE  !(choice == 14)
[L4510]  COND TRUE   choice == 13
[L4511]              gas := gas - 21000;
[L4512]  COND TRUE   gas >= 0
[L4513]              assume tokens_s470 >= 0 && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4514]              assume msgvalue_MSG == 0;
[L4515]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s470 && p1 != to_s470) && (p2 != from_s470 || p3 != msgsender_MSG)) && from_s470 != to_s470) && tokens_s470 <= balances_Litecoin_SV[this][from_s470]) && tokens_s470 <= allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) && balances_Litecoin_SV[this][to_s470] + tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s470 >= 0) && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s470] >= 0) && balances_Litecoin_SV[this][to_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][from_s470] >= 0) && balances_Litecoin_SV[this][from_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] >= 0) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Litecoin_SV0 := true;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]                 revert := revert_hold;
[L1123]              havoc __exception;
[L1124]              revert := false;
[L1125]  COND TRUE   __exception
[L1126]              __tmp__Balance := Balance;
[L1127]              __tmp__DType := DType;
[L1128]              __tmp__Alloc := Alloc;
[L1129]              __tmp__balance_ADDR := balance_ADDR;
[L1130]              __tmp__M_Ref_int := M_Ref_int;
[L1131]              __tmp__sum_balances0 := sum_balances0;
[L1132]              __tmp__alloc_allowed_Litecoin_SV_lvl0 := alloc_allowed_Litecoin_SV_lvl0;
[L1133]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1134]              __tmp__sum_allowed1 := sum_allowed1;
[L1135]              __tmp__Length := Length;
[L1136]              __tmp__now := now;
[L1137]              __tmp__owner_Owned := owner_Owned;
[L1138]              __tmp__newOwner_Owned := newOwner_Owned;
[L1139]              __tmp__businessName_Litecoin_SV := businessName_Litecoin_SV;
[L1140]              __tmp__businessCountry_Litecoin_SV := businessCountry_Litecoin_SV;
[L1141]              __tmp__symbol_Litecoin_SV := symbol_Litecoin_SV;
[L1142]              __tmp__name_Litecoin_SV := name_Litecoin_SV;
[L1143]              __tmp__decimals_Litecoin_SV := decimals_Litecoin_SV;
[L1144]              __tmp___totalSupply_Litecoin_SV := _totalSupply_Litecoin_SV;
[L1145]              __tmp__balances_Litecoin_SV := balances_Litecoin_SV;
[L1146]              __tmp__allowed_Litecoin_SV := allowed_Litecoin_SV;
[L1147]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__fail(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L2667]  COND TRUE   __tmp__DType[this] == Litecoin_SV
[L2668]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2238]  COND TRUE   !(b_s45 <= a_s45)
[L2239]              revert := true;
[L2668]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2669]  COND TRUE   revert
[L1147]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__fail(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L1148]              assume revert || gas < 0;
[L4515]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

Loop:
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND TRUE   choice == 14
[L4504]              gas := gas - 21000;
[L4505]  COND TRUE   gas >= 0
[L4506]              assume tokens_s411 >= 0 && tokens_s411 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4507]              assume msgvalue_MSG == 0;
[L4508]  CALL        call success_s411 := approve~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, spender_s411, tokens_s411);
[L1061]              havoc __exception;
[L1062]              revert := false;
[L1063]  COND FALSE  !(__exception)
[L1088]  CALL        call success_s411 := approve~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, spender_s411, tokens_s411);
[L2654]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_Litecoin_SV[this][msgsender_MSG][spender_s411];
[L2655]              allowed_Litecoin_SV[this][msgsender_MSG][spender_s411] := tokens_s411;
[L2656]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_Litecoin_SV[this][msgsender_MSG][spender_s411];
[L2657]              assert { :EventEmitted "Approval_Litecoin_SV" } true;
[L2658]              success_s411 := true;
[L1088]  RET         call success_s411 := approve~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, spender_s411, tokens_s411);
[L1089]              assume !revert && gas >= 0;
[L4508]  RET         call success_s411 := approve~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, spender_s411, tokens_s411);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

[2020-11-24 20:35:50,081 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:35:50,081 INFO  L82        PathProgramCache]: Analyzing trace with hash -1439024191, now seen corresponding path program 1 times
[2020-11-24 20:35:50,082 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:35:50,091 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:35:50,134 INFO  L134       CoverageAnalysis]: Checked inductivity of 71 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 71 trivial. 0 not checked.
[2020-11-24 20:35:50,135 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:35:50,135 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-24 20:35:50,135 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:35:50,135 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 20:35:50,135 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-24 20:35:50,135 INFO  L87              Difference]: Start difference. First operand 2067 states and 2244 transitions. cyclomatic complexity: 182 Second operand 7 states.
[2020-11-24 20:35:50,557 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:35:50,557 INFO  L93              Difference]: Finished difference Result 2140 states and 2350 transitions.
[2020-11-24 20:35:50,558 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-24 20:35:50,558 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2140 states and 2350 transitions.
[2020-11-24 20:35:50,562 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-24 20:35:50,568 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2140 states to 2140 states and 2350 transitions.
[2020-11-24 20:35:50,568 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 670
[2020-11-24 20:35:50,568 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 670
[2020-11-24 20:35:50,568 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2140 states and 2350 transitions.
[2020-11-24 20:35:50,570 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:35:50,570 INFO  L728         BuchiCegarLoop]: Abstraction has 2140 states and 2350 transitions.
[2020-11-24 20:35:50,572 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2140 states and 2350 transitions.
[2020-11-24 20:35:50,583 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2140 to 2071.
[2020-11-24 20:35:50,583 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2071 states.
[2020-11-24 20:35:50,584 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2071 states to 2071 states and 2248 transitions.
[2020-11-24 20:35:50,585 INFO  L751         BuchiCegarLoop]: Abstraction has 2071 states and 2248 transitions.
[2020-11-24 20:35:50,585 INFO  L631         BuchiCegarLoop]: Abstraction has 2071 states and 2248 transitions.
[2020-11-24 20:35:50,585 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-24 20:35:50,585 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2071 states and 2248 transitions.
[2020-11-24 20:35:50,587 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 20:35:50,587 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:35:50,587 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:35:50,588 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:35:50,588 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_Litecoin_SV0 := false;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4599]              assume null == 0;
[L4600]  CALL        call this := FreshRefGenerator__success();
[L2180]              havoc newRef;
[L2181]              assume Alloc[newRef] == false;
[L2182]              Alloc[newRef] := true;
[L2183]              assume newRef != null;
[L4600]  RET         call this := FreshRefGenerator__success();
[L4601]              assume now >= 0;
[L4602]              assume DType[this] == Litecoin_SV;
[L4603]              assume msgvalue_MSG == 0;
[L4604]              gas := gas - 53000;
[L4605]  CALL        call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L825]               havoc __exception;
[L826]               revert := false;
[L827]   COND FALSE  !(__exception)
[L852]   CALL        call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L2536]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2301]              assume msgsender_MSG != null;
[L2302]              Balance[this] := 0;
[L2316]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2317]  COND FALSE  !(revert)
[L2536]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2537]  COND FALSE  !(revert)
[L2540]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2386]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2368]              assume msgsender_MSG != null;
[L2369]              Balance[this] := 0;
[L2370]              owner_Owned[this] := null;
[L2371]              newOwner_Owned[this] := null;
[L2373]              owner_Owned[this] := msgsender_MSG;
[L2386]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2387]  COND FALSE  !(revert)
[L2540]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2541]  COND FALSE  !(revert)
[L2544]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2212]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2197]              assume msgsender_MSG != null;
[L2198]              Balance[this] := 0;
[L2212]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2213]  COND FALSE  !(revert)
[L2544]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2545]  COND FALSE  !(revert)
[L2548]  CALL        call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2489]              assume msgsender_MSG != null;
[L2490]              Balance[this] := 0;
[L2491]              businessName_Litecoin_SV[this] := 1031794244;
[L2492]              businessCountry_Litecoin_SV[this] := 1031794244;
[L2493]              symbol_Litecoin_SV[this] := 1031794244;
[L2494]              name_Litecoin_SV[this] := 1031794244;
[L2495]              decimals_Litecoin_SV[this] := 0;
[L2496]              _totalSupply_Litecoin_SV[this] := 0;
[L2497]              balances_Litecoin_SV[this] := zeroRefintArr();
[L2498]              sum_balances0[this] := 0;
[L2499]              allowed_Litecoin_SV[this] := zeroRefRefintArr();
[L2500]              sum_allowed1[this] := 0;
[L2502]              businessName_Litecoin_SV[this] := -1948412360;
[L2503]              businessCountry_Litecoin_SV[this] := 1439465232;
[L2504]              symbol_Litecoin_SV[this] := -803338840;
[L2505]              name_Litecoin_SV[this] := 1836794956;
[L2506]              decimals_Litecoin_SV[this] := 18;
[L2507]              _totalSupply_Litecoin_SV[this] := 25000000000000000000000000;
[L2508]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2509]              balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131] := _totalSupply_Litecoin_SV[this];
[L2510]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2511]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2548]  RET         call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2549]  COND FALSE  !(revert)
[L852]   RET         call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L853]               assume !revert && gas >= 0;
[L4605]  RET         call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume !revert && gas >= 0;
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND TRUE   choice == 14
[L4504]              gas := gas - 21000;
[L4505]  COND TRUE   gas >= 0
[L4506]              assume tokens_s411 >= 0 && tokens_s411 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4507]              assume msgvalue_MSG == 0;
[L4508]  CALL        call success_s411 := approve~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, spender_s411, tokens_s411);
[L1061]              havoc __exception;
[L1062]              revert := false;
[L1063]  COND FALSE  !(__exception)
[L1088]  CALL        call success_s411 := approve~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, spender_s411, tokens_s411);
[L2654]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_Litecoin_SV[this][msgsender_MSG][spender_s411];
[L2655]              allowed_Litecoin_SV[this][msgsender_MSG][spender_s411] := tokens_s411;
[L2656]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_Litecoin_SV[this][msgsender_MSG][spender_s411];
[L2657]              assert { :EventEmitted "Approval_Litecoin_SV" } true;
[L2658]              success_s411 := true;
[L1088]  RET         call success_s411 := approve~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, spender_s411, tokens_s411);
[L1089]              assume !revert && gas >= 0;
[L4508]  RET         call success_s411 := approve~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, spender_s411, tokens_s411);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND FALSE  !(choice == 14)
[L4510]  COND TRUE   choice == 13
[L4511]              gas := gas - 21000;
[L4512]  COND TRUE   gas >= 0
[L4513]              assume tokens_s470 >= 0 && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4514]              assume msgvalue_MSG == 0;
[L4515]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s470 && p1 != to_s470) && (p2 != from_s470 || p3 != msgsender_MSG)) && from_s470 != to_s470) && tokens_s470 <= balances_Litecoin_SV[this][from_s470]) && tokens_s470 <= allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) && balances_Litecoin_SV[this][to_s470] + tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s470 >= 0) && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s470] >= 0) && balances_Litecoin_SV[this][to_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][from_s470] >= 0) && balances_Litecoin_SV[this][from_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] >= 0) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Litecoin_SV0 := true;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]                 revert := revert_hold;
[L1123]              havoc __exception;
[L1124]              revert := false;
[L1125]  COND FALSE  !(__exception)
[L1150]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L2709]  COND TRUE   DType[this] == Litecoin_SV
[L2710]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2710]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2711]  COND FALSE  !(revert)
[L2717]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][from_s470];
[L2718]              balances_Litecoin_SV[this][from_s470] := __var_5;
[L2719]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][from_s470];
[L2720]  COND TRUE   DType[this] == Litecoin_SV
[L2721]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2721]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2722]  COND FALSE  !(revert)
[L2728]              sum_allowed1[from_s470] := sum_allowed1[from_s470] - allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2729]              allowed_Litecoin_SV[this][from_s470][msgsender_MSG] := __var_6;
[L2730]              sum_allowed1[from_s470] := sum_allowed1[from_s470] + allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2731]  COND TRUE   DType[this] == Litecoin_SV
[L2732]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2229]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2230]  COND FALSE  !(!(c_s23 >= a_s23))
[L2732]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2733]  COND FALSE  !(revert)
[L2739]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][to_s470];
[L2740]              balances_Litecoin_SV[this][to_s470] := __var_7;
[L2741]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][to_s470];
[L2742]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2743]              success_s470 := true;
[L1150]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L1151]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((((success_s470 == true && balances_Litecoin_SV[this][from_s470] == old(balances_Litecoin_SV[this][from_s470]) - tokens_s470) && balances_Litecoin_SV[this][to_s470] == old(balances_Litecoin_SV[this][to_s470]) + tokens_s470) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] == old(allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) - tokens_s470) && _totalSupply_Litecoin_SV[this] == old(_totalSupply_Litecoin_SV[this])) && balances_Litecoin_SV[this][p1] == old(balances_Litecoin_SV[this][p1])) && allowed_Litecoin_SV[this][p2][p3] == old(allowed_Litecoin_SV[this][p2][p3])) && businessName_Litecoin_SV[this] == old(businessName_Litecoin_SV[this])) && businessCountry_Litecoin_SV[this] == old(businessCountry_Litecoin_SV[this])) && symbol_Litecoin_SV[this] == old(symbol_Litecoin_SV[this])) && name_Litecoin_SV[this] == old(name_Litecoin_SV[this])) && decimals_Litecoin_SV[this] == old(decimals_Litecoin_SV[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4515]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

Loop:
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND FALSE  !(choice == 14)
[L4510]  COND TRUE   choice == 13
[L4511]              gas := gas - 21000;
[L4512]  COND TRUE   gas >= 0
[L4513]              assume tokens_s470 >= 0 && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4514]              assume msgvalue_MSG == 0;
[L4515]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s470 && p1 != to_s470) && (p2 != from_s470 || p3 != msgsender_MSG)) && from_s470 != to_s470) && tokens_s470 <= balances_Litecoin_SV[this][from_s470]) && tokens_s470 <= allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) && balances_Litecoin_SV[this][to_s470] + tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s470 >= 0) && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s470] >= 0) && balances_Litecoin_SV[this][to_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][from_s470] >= 0) && balances_Litecoin_SV[this][from_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] >= 0) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Litecoin_SV0 := true;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]                 revert := revert_hold;
[L1123]              havoc __exception;
[L1124]              revert := false;
[L1125]  COND TRUE   __exception
[L1126]              __tmp__Balance := Balance;
[L1127]              __tmp__DType := DType;
[L1128]              __tmp__Alloc := Alloc;
[L1129]              __tmp__balance_ADDR := balance_ADDR;
[L1130]              __tmp__M_Ref_int := M_Ref_int;
[L1131]              __tmp__sum_balances0 := sum_balances0;
[L1132]              __tmp__alloc_allowed_Litecoin_SV_lvl0 := alloc_allowed_Litecoin_SV_lvl0;
[L1133]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1134]              __tmp__sum_allowed1 := sum_allowed1;
[L1135]              __tmp__Length := Length;
[L1136]              __tmp__now := now;
[L1137]              __tmp__owner_Owned := owner_Owned;
[L1138]              __tmp__newOwner_Owned := newOwner_Owned;
[L1139]              __tmp__businessName_Litecoin_SV := businessName_Litecoin_SV;
[L1140]              __tmp__businessCountry_Litecoin_SV := businessCountry_Litecoin_SV;
[L1141]              __tmp__symbol_Litecoin_SV := symbol_Litecoin_SV;
[L1142]              __tmp__name_Litecoin_SV := name_Litecoin_SV;
[L1143]              __tmp__decimals_Litecoin_SV := decimals_Litecoin_SV;
[L1144]              __tmp___totalSupply_Litecoin_SV := _totalSupply_Litecoin_SV;
[L1145]              __tmp__balances_Litecoin_SV := balances_Litecoin_SV;
[L1146]              __tmp__allowed_Litecoin_SV := allowed_Litecoin_SV;
[L1147]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__fail(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L2667]  COND TRUE   __tmp__DType[this] == Litecoin_SV
[L2668]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2238]  COND FALSE  !(!(b_s45 <= a_s45))
[L2242]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2668]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2669]  COND FALSE  !(revert)
[L2675]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_Litecoin_SV[this][from_s470];
[L2676]              __tmp__balances_Litecoin_SV[this][from_s470] := __var_5;
[L2677]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_Litecoin_SV[this][from_s470];
[L2678]  COND TRUE   __tmp__DType[this] == Litecoin_SV
[L2679]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2238]  COND TRUE   !(b_s45 <= a_s45)
[L2239]              revert := true;
[L2679]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2680]  COND TRUE   revert
[L1147]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__fail(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L1148]              assume revert || gas < 0;
[L4515]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

[2020-11-24 20:35:50,592 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:35:50,592 INFO  L82        PathProgramCache]: Analyzing trace with hash 1199724647, now seen corresponding path program 1 times
[2020-11-24 20:35:50,593 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:35:50,620 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:35:51,123 INFO  L134       CoverageAnalysis]: Checked inductivity of 75 backedges. 0 proven. 4 refuted. 0 times theorem prover too weak. 71 trivial. 0 not checked.
[2020-11-24 20:35:51,123 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-24 20:35:51,123 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [29] total 29
[2020-11-24 20:35:51,123 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:35:51,124 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 30 interpolants.
[2020-11-24 20:35:51,124 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=84, Invalid=786, Unknown=0, NotChecked=0, Total=870
[2020-11-24 20:35:51,124 INFO  L87              Difference]: Start difference. First operand 2071 states and 2248 transitions. cyclomatic complexity: 182 Second operand 30 states.
[2020-11-24 20:35:55,009 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:35:55,009 INFO  L93              Difference]: Finished difference Result 2095 states and 2290 transitions.
[2020-11-24 20:35:55,010 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 30 states. 
[2020-11-24 20:35:55,010 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2095 states and 2290 transitions.
[2020-11-24 20:35:55,014 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-24 20:35:55,019 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2095 states to 2095 states and 2290 transitions.
[2020-11-24 20:35:55,019 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 653
[2020-11-24 20:35:55,020 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 653
[2020-11-24 20:35:55,020 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2095 states and 2290 transitions.
[2020-11-24 20:35:55,021 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:35:55,021 INFO  L728         BuchiCegarLoop]: Abstraction has 2095 states and 2290 transitions.
[2020-11-24 20:35:55,023 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2095 states and 2290 transitions.
[2020-11-24 20:35:55,033 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2095 to 2090.
[2020-11-24 20:35:55,033 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2090 states.
[2020-11-24 20:35:55,035 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2090 states to 2090 states and 2283 transitions.
[2020-11-24 20:35:55,035 INFO  L751         BuchiCegarLoop]: Abstraction has 2090 states and 2283 transitions.
[2020-11-24 20:35:55,035 INFO  L631         BuchiCegarLoop]: Abstraction has 2090 states and 2283 transitions.
[2020-11-24 20:35:55,035 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-24 20:35:55,035 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2090 states and 2283 transitions.
[2020-11-24 20:35:55,037 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-24 20:35:55,037 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:35:55,037 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:35:55,038 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:35:55,038 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_Litecoin_SV0 := false;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4599]              assume null == 0;
[L4600]  CALL        call this := FreshRefGenerator__success();
[L2180]              havoc newRef;
[L2181]              assume Alloc[newRef] == false;
[L2182]              Alloc[newRef] := true;
[L2183]              assume newRef != null;
[L4600]  RET         call this := FreshRefGenerator__success();
[L4601]              assume now >= 0;
[L4602]              assume DType[this] == Litecoin_SV;
[L4603]              assume msgvalue_MSG == 0;
[L4604]              gas := gas - 53000;
[L4605]  CALL        call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L825]               havoc __exception;
[L826]               revert := false;
[L827]   COND FALSE  !(__exception)
[L852]   CALL        call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L2536]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2301]              assume msgsender_MSG != null;
[L2302]              Balance[this] := 0;
[L2316]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2317]  COND FALSE  !(revert)
[L2536]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2537]  COND FALSE  !(revert)
[L2540]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2386]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2368]              assume msgsender_MSG != null;
[L2369]              Balance[this] := 0;
[L2370]              owner_Owned[this] := null;
[L2371]              newOwner_Owned[this] := null;
[L2373]              owner_Owned[this] := msgsender_MSG;
[L2386]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2387]  COND FALSE  !(revert)
[L2540]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2541]  COND FALSE  !(revert)
[L2544]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2212]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2197]              assume msgsender_MSG != null;
[L2198]              Balance[this] := 0;
[L2212]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2213]  COND FALSE  !(revert)
[L2544]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2545]  COND FALSE  !(revert)
[L2548]  CALL        call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2489]              assume msgsender_MSG != null;
[L2490]              Balance[this] := 0;
[L2491]              businessName_Litecoin_SV[this] := 1031794244;
[L2492]              businessCountry_Litecoin_SV[this] := 1031794244;
[L2493]              symbol_Litecoin_SV[this] := 1031794244;
[L2494]              name_Litecoin_SV[this] := 1031794244;
[L2495]              decimals_Litecoin_SV[this] := 0;
[L2496]              _totalSupply_Litecoin_SV[this] := 0;
[L2497]              balances_Litecoin_SV[this] := zeroRefintArr();
[L2498]              sum_balances0[this] := 0;
[L2499]              allowed_Litecoin_SV[this] := zeroRefRefintArr();
[L2500]              sum_allowed1[this] := 0;
[L2502]              businessName_Litecoin_SV[this] := -1948412360;
[L2503]              businessCountry_Litecoin_SV[this] := 1439465232;
[L2504]              symbol_Litecoin_SV[this] := -803338840;
[L2505]              name_Litecoin_SV[this] := 1836794956;
[L2506]              decimals_Litecoin_SV[this] := 18;
[L2507]              _totalSupply_Litecoin_SV[this] := 25000000000000000000000000;
[L2508]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2509]              balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131] := _totalSupply_Litecoin_SV[this];
[L2510]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2511]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2548]  RET         call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2549]  COND FALSE  !(revert)
[L852]   RET         call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L853]               assume !revert && gas >= 0;
[L4605]  RET         call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume !revert && gas >= 0;
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND FALSE  !(choice == 14)
[L4510]  COND FALSE  !(choice == 13)
[L4517]  COND FALSE  !(choice == 12)
[L4523]  COND FALSE  !(choice == 11)
[L4529]  COND FALSE  !(choice == 10)
[L4535]  COND FALSE  !(choice == 9)
[L4541]  COND FALSE  !(choice == 8)
[L4547]  COND FALSE  !(choice == 7)
[L4553]  COND FALSE  !(choice == 6)
[L4559]  COND FALSE  !(choice == 5)
[L4565]  COND FALSE  !(choice == 4)
[L4571]  COND FALSE  !(choice == 3)
[L4577]  COND TRUE   choice == 2
[L4578]              gas := gas - 21000;
[L4579]  COND TRUE   gas >= 0
[L4580]              assume tokens_s529 >= 0 && tokens_s529 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4581]              assume msgvalue_MSG == 0;
[L4582]  CALL        call success_s529 := approveAndCall~address~uint256~bytes_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, spender_s529, tokens_s529, data_s529);
[L1241]              havoc __exception;
[L1242]              revert := false;
[L1243]  COND FALSE  !(__exception)
[L1268]  CALL        call success_s529 := approveAndCall~address~uint256~bytes_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, spender_s529, tokens_s529, data_s529);
[L2780]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_Litecoin_SV[this][msgsender_MSG][spender_s529];
[L2781]              allowed_Litecoin_SV[this][msgsender_MSG][spender_s529] := tokens_s529;
[L2782]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_Litecoin_SV[this][msgsender_MSG][spender_s529];
[L2783]              assert { :EventEmitted "Approval_Litecoin_SV" } true;
[L2784]              assume DType[spender_s529] == ApproveAndCallFallBack;
[L2785]              __var_8 := spender_s529;
[L2786]              __var_10 := this;
[L2788]              success_s529 := true;
[L1268]  RET         call success_s529 := approveAndCall~address~uint256~bytes_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, spender_s529, tokens_s529, data_s529);
[L1269]              assume !revert && gas >= 0;
[L4582]  RET         call success_s529 := approveAndCall~address~uint256~bytes_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, spender_s529, tokens_s529, data_s529);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND FALSE  !(choice == 14)
[L4510]  COND TRUE   choice == 13
[L4511]              gas := gas - 21000;
[L4512]  COND TRUE   gas >= 0
[L4513]              assume tokens_s470 >= 0 && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4514]              assume msgvalue_MSG == 0;
[L4515]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s470 && p1 != to_s470) && (p2 != from_s470 || p3 != msgsender_MSG)) && from_s470 != to_s470) && tokens_s470 <= balances_Litecoin_SV[this][from_s470]) && tokens_s470 <= allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) && balances_Litecoin_SV[this][to_s470] + tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s470 >= 0) && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s470] >= 0) && balances_Litecoin_SV[this][to_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][from_s470] >= 0) && balances_Litecoin_SV[this][from_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] >= 0) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Litecoin_SV0 := true;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]                 revert := revert_hold;
[L1123]              havoc __exception;
[L1124]              revert := false;
[L1125]  COND FALSE  !(__exception)
[L1150]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L2709]  COND TRUE   DType[this] == Litecoin_SV
[L2710]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2710]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2711]  COND FALSE  !(revert)
[L2717]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][from_s470];
[L2718]              balances_Litecoin_SV[this][from_s470] := __var_5;
[L2719]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][from_s470];
[L2720]  COND TRUE   DType[this] == Litecoin_SV
[L2721]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2721]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2722]  COND FALSE  !(revert)
[L2728]              sum_allowed1[from_s470] := sum_allowed1[from_s470] - allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2729]              allowed_Litecoin_SV[this][from_s470][msgsender_MSG] := __var_6;
[L2730]              sum_allowed1[from_s470] := sum_allowed1[from_s470] + allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2731]  COND TRUE   DType[this] == Litecoin_SV
[L2732]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2229]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2230]  COND FALSE  !(!(c_s23 >= a_s23))
[L2732]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2733]  COND FALSE  !(revert)
[L2739]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][to_s470];
[L2740]              balances_Litecoin_SV[this][to_s470] := __var_7;
[L2741]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][to_s470];
[L2742]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2743]              success_s470 := true;
[L1150]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L1151]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((((success_s470 == true && balances_Litecoin_SV[this][from_s470] == old(balances_Litecoin_SV[this][from_s470]) - tokens_s470) && balances_Litecoin_SV[this][to_s470] == old(balances_Litecoin_SV[this][to_s470]) + tokens_s470) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] == old(allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) - tokens_s470) && _totalSupply_Litecoin_SV[this] == old(_totalSupply_Litecoin_SV[this])) && balances_Litecoin_SV[this][p1] == old(balances_Litecoin_SV[this][p1])) && allowed_Litecoin_SV[this][p2][p3] == old(allowed_Litecoin_SV[this][p2][p3])) && businessName_Litecoin_SV[this] == old(businessName_Litecoin_SV[this])) && businessCountry_Litecoin_SV[this] == old(businessCountry_Litecoin_SV[this])) && symbol_Litecoin_SV[this] == old(symbol_Litecoin_SV[this])) && name_Litecoin_SV[this] == old(name_Litecoin_SV[this])) && decimals_Litecoin_SV[this] == old(decimals_Litecoin_SV[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4515]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

Loop:
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND TRUE   choice == 14
[L4504]              gas := gas - 21000;
[L4505]  COND TRUE   gas >= 0
[L4506]              assume tokens_s411 >= 0 && tokens_s411 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4507]              assume msgvalue_MSG == 0;
[L4508]  CALL        call success_s411 := approve~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, spender_s411, tokens_s411);
[L1061]              havoc __exception;
[L1062]              revert := false;
[L1063]  COND FALSE  !(__exception)
[L1088]  CALL        call success_s411 := approve~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, spender_s411, tokens_s411);
[L2654]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_Litecoin_SV[this][msgsender_MSG][spender_s411];
[L2655]              allowed_Litecoin_SV[this][msgsender_MSG][spender_s411] := tokens_s411;
[L2656]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_Litecoin_SV[this][msgsender_MSG][spender_s411];
[L2657]              assert { :EventEmitted "Approval_Litecoin_SV" } true;
[L2658]              success_s411 := true;
[L1088]  RET         call success_s411 := approve~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, spender_s411, tokens_s411);
[L1089]              assume !revert && gas >= 0;
[L4508]  RET         call success_s411 := approve~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, spender_s411, tokens_s411);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

[2020-11-24 20:35:55,041 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:35:55,042 INFO  L82        PathProgramCache]: Analyzing trace with hash -592095184, now seen corresponding path program 1 times
[2020-11-24 20:35:55,042 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:35:55,074 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:35:56,032 WARN  L188               SmtUtils]: Spent 239.00 ms on a formula simplification. DAG size of input: 178 DAG size of output: 106
[2020-11-24 20:35:56,248 WARN  L188               SmtUtils]: Spent 114.00 ms on a formula simplification. DAG size of input: 120 DAG size of output: 85
[2020-11-24 20:35:56,554 WARN  L188               SmtUtils]: Spent 156.00 ms on a formula simplification. DAG size of input: 182 DAG size of output: 91
[2020-11-24 20:35:56,913 INFO  L134       CoverageAnalysis]: Checked inductivity of 76 backedges. 13 proven. 3 refuted. 0 times theorem prover too weak. 60 trivial. 0 not checked.
[2020-11-24 20:35:56,913 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-24 20:35:56,913 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [32] total 32
[2020-11-24 20:35:56,914 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:35:56,914 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 33 interpolants.
[2020-11-24 20:35:56,914 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=107, Invalid=949, Unknown=0, NotChecked=0, Total=1056
[2020-11-24 20:35:56,914 INFO  L87              Difference]: Start difference. First operand 2090 states and 2283 transitions. cyclomatic complexity: 200 Second operand 33 states.
[2020-11-24 20:36:04,272 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:36:04,273 INFO  L93              Difference]: Finished difference Result 2121 states and 2354 transitions.
[2020-11-24 20:36:04,273 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 35 states. 
[2020-11-24 20:36:04,273 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2121 states and 2354 transitions.
[2020-11-24 20:36:04,277 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 10
[2020-11-24 20:36:04,281 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2121 states to 2121 states and 2354 transitions.
[2020-11-24 20:36:04,281 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 657
[2020-11-24 20:36:04,281 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 657
[2020-11-24 20:36:04,281 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2121 states and 2354 transitions.
[2020-11-24 20:36:04,283 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:36:04,283 INFO  L728         BuchiCegarLoop]: Abstraction has 2121 states and 2354 transitions.
[2020-11-24 20:36:04,284 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2121 states and 2354 transitions.
[2020-11-24 20:36:04,294 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2121 to 2090.
[2020-11-24 20:36:04,294 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2090 states.
[2020-11-24 20:36:04,295 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2090 states to 2090 states and 2283 transitions.
[2020-11-24 20:36:04,296 INFO  L751         BuchiCegarLoop]: Abstraction has 2090 states and 2283 transitions.
[2020-11-24 20:36:04,296 INFO  L631         BuchiCegarLoop]: Abstraction has 2090 states and 2283 transitions.
[2020-11-24 20:36:04,296 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-24 20:36:04,296 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2090 states and 2283 transitions.
[2020-11-24 20:36:04,298 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-24 20:36:04,298 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:36:04,298 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:36:04,299 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:36:04,299 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_Litecoin_SV0 := false;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4599]              assume null == 0;
[L4600]  CALL        call this := FreshRefGenerator__success();
[L2180]              havoc newRef;
[L2181]              assume Alloc[newRef] == false;
[L2182]              Alloc[newRef] := true;
[L2183]              assume newRef != null;
[L4600]  RET         call this := FreshRefGenerator__success();
[L4601]              assume now >= 0;
[L4602]              assume DType[this] == Litecoin_SV;
[L4603]              assume msgvalue_MSG == 0;
[L4604]              gas := gas - 53000;
[L4605]  CALL        call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L825]               havoc __exception;
[L826]               revert := false;
[L827]   COND FALSE  !(__exception)
[L852]   CALL        call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L2536]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2301]              assume msgsender_MSG != null;
[L2302]              Balance[this] := 0;
[L2316]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2317]  COND FALSE  !(revert)
[L2536]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2537]  COND FALSE  !(revert)
[L2540]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2386]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2368]              assume msgsender_MSG != null;
[L2369]              Balance[this] := 0;
[L2370]              owner_Owned[this] := null;
[L2371]              newOwner_Owned[this] := null;
[L2373]              owner_Owned[this] := msgsender_MSG;
[L2386]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2387]  COND FALSE  !(revert)
[L2540]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2541]  COND FALSE  !(revert)
[L2544]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2212]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2197]              assume msgsender_MSG != null;
[L2198]              Balance[this] := 0;
[L2212]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2213]  COND FALSE  !(revert)
[L2544]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2545]  COND FALSE  !(revert)
[L2548]  CALL        call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2489]              assume msgsender_MSG != null;
[L2490]              Balance[this] := 0;
[L2491]              businessName_Litecoin_SV[this] := 1031794244;
[L2492]              businessCountry_Litecoin_SV[this] := 1031794244;
[L2493]              symbol_Litecoin_SV[this] := 1031794244;
[L2494]              name_Litecoin_SV[this] := 1031794244;
[L2495]              decimals_Litecoin_SV[this] := 0;
[L2496]              _totalSupply_Litecoin_SV[this] := 0;
[L2497]              balances_Litecoin_SV[this] := zeroRefintArr();
[L2498]              sum_balances0[this] := 0;
[L2499]              allowed_Litecoin_SV[this] := zeroRefRefintArr();
[L2500]              sum_allowed1[this] := 0;
[L2502]              businessName_Litecoin_SV[this] := -1948412360;
[L2503]              businessCountry_Litecoin_SV[this] := 1439465232;
[L2504]              symbol_Litecoin_SV[this] := -803338840;
[L2505]              name_Litecoin_SV[this] := 1836794956;
[L2506]              decimals_Litecoin_SV[this] := 18;
[L2507]              _totalSupply_Litecoin_SV[this] := 25000000000000000000000000;
[L2508]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2509]              balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131] := _totalSupply_Litecoin_SV[this];
[L2510]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2511]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2548]  RET         call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2549]  COND FALSE  !(revert)
[L852]   RET         call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L853]               assume !revert && gas >= 0;
[L4605]  RET         call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume !revert && gas >= 0;
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND TRUE   choice == 14
[L4504]              gas := gas - 21000;
[L4505]  COND TRUE   gas >= 0
[L4506]              assume tokens_s411 >= 0 && tokens_s411 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4507]              assume msgvalue_MSG == 0;
[L4508]  CALL        call success_s411 := approve~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, spender_s411, tokens_s411);
[L1061]              havoc __exception;
[L1062]              revert := false;
[L1063]  COND FALSE  !(__exception)
[L1088]  CALL        call success_s411 := approve~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, spender_s411, tokens_s411);
[L2654]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_Litecoin_SV[this][msgsender_MSG][spender_s411];
[L2655]              allowed_Litecoin_SV[this][msgsender_MSG][spender_s411] := tokens_s411;
[L2656]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_Litecoin_SV[this][msgsender_MSG][spender_s411];
[L2657]              assert { :EventEmitted "Approval_Litecoin_SV" } true;
[L2658]              success_s411 := true;
[L1088]  RET         call success_s411 := approve~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, spender_s411, tokens_s411);
[L1089]              assume !revert && gas >= 0;
[L4508]  RET         call success_s411 := approve~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, spender_s411, tokens_s411);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND FALSE  !(choice == 14)
[L4510]  COND TRUE   choice == 13
[L4511]              gas := gas - 21000;
[L4512]  COND TRUE   gas >= 0
[L4513]              assume tokens_s470 >= 0 && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4514]              assume msgvalue_MSG == 0;
[L4515]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s470 && p1 != to_s470) && (p2 != from_s470 || p3 != msgsender_MSG)) && from_s470 != to_s470) && tokens_s470 <= balances_Litecoin_SV[this][from_s470]) && tokens_s470 <= allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) && balances_Litecoin_SV[this][to_s470] + tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s470 >= 0) && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s470] >= 0) && balances_Litecoin_SV[this][to_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][from_s470] >= 0) && balances_Litecoin_SV[this][from_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] >= 0) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Litecoin_SV0 := true;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]                 revert := revert_hold;
[L1123]              havoc __exception;
[L1124]              revert := false;
[L1125]  COND TRUE   __exception
[L1126]              __tmp__Balance := Balance;
[L1127]              __tmp__DType := DType;
[L1128]              __tmp__Alloc := Alloc;
[L1129]              __tmp__balance_ADDR := balance_ADDR;
[L1130]              __tmp__M_Ref_int := M_Ref_int;
[L1131]              __tmp__sum_balances0 := sum_balances0;
[L1132]              __tmp__alloc_allowed_Litecoin_SV_lvl0 := alloc_allowed_Litecoin_SV_lvl0;
[L1133]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1134]              __tmp__sum_allowed1 := sum_allowed1;
[L1135]              __tmp__Length := Length;
[L1136]              __tmp__now := now;
[L1137]              __tmp__owner_Owned := owner_Owned;
[L1138]              __tmp__newOwner_Owned := newOwner_Owned;
[L1139]              __tmp__businessName_Litecoin_SV := businessName_Litecoin_SV;
[L1140]              __tmp__businessCountry_Litecoin_SV := businessCountry_Litecoin_SV;
[L1141]              __tmp__symbol_Litecoin_SV := symbol_Litecoin_SV;
[L1142]              __tmp__name_Litecoin_SV := name_Litecoin_SV;
[L1143]              __tmp__decimals_Litecoin_SV := decimals_Litecoin_SV;
[L1144]              __tmp___totalSupply_Litecoin_SV := _totalSupply_Litecoin_SV;
[L1145]              __tmp__balances_Litecoin_SV := balances_Litecoin_SV;
[L1146]              __tmp__allowed_Litecoin_SV := allowed_Litecoin_SV;
[L1147]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__fail(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L2667]  COND TRUE   __tmp__DType[this] == Litecoin_SV
[L2668]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2238]  COND FALSE  !(!(b_s45 <= a_s45))
[L2242]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2668]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2669]  COND FALSE  !(revert)
[L2675]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_Litecoin_SV[this][from_s470];
[L2676]              __tmp__balances_Litecoin_SV[this][from_s470] := __var_5;
[L2677]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_Litecoin_SV[this][from_s470];
[L2678]  COND TRUE   __tmp__DType[this] == Litecoin_SV
[L2679]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2238]  COND TRUE   !(b_s45 <= a_s45)
[L2239]              revert := true;
[L2679]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2680]  COND TRUE   revert
[L1147]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__fail(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L1148]              assume revert || gas < 0;
[L4515]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

Loop:
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND FALSE  !(choice == 14)
[L4510]  COND TRUE   choice == 13
[L4511]              gas := gas - 21000;
[L4512]  COND TRUE   gas >= 0
[L4513]              assume tokens_s470 >= 0 && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4514]              assume msgvalue_MSG == 0;
[L4515]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s470 && p1 != to_s470) && (p2 != from_s470 || p3 != msgsender_MSG)) && from_s470 != to_s470) && tokens_s470 <= balances_Litecoin_SV[this][from_s470]) && tokens_s470 <= allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) && balances_Litecoin_SV[this][to_s470] + tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s470 >= 0) && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s470] >= 0) && balances_Litecoin_SV[this][to_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][from_s470] >= 0) && balances_Litecoin_SV[this][from_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] >= 0) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Litecoin_SV0 := true;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]                 revert := revert_hold;
[L1123]              havoc __exception;
[L1124]              revert := false;
[L1125]  COND TRUE   __exception
[L1126]              __tmp__Balance := Balance;
[L1127]              __tmp__DType := DType;
[L1128]              __tmp__Alloc := Alloc;
[L1129]              __tmp__balance_ADDR := balance_ADDR;
[L1130]              __tmp__M_Ref_int := M_Ref_int;
[L1131]              __tmp__sum_balances0 := sum_balances0;
[L1132]              __tmp__alloc_allowed_Litecoin_SV_lvl0 := alloc_allowed_Litecoin_SV_lvl0;
[L1133]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1134]              __tmp__sum_allowed1 := sum_allowed1;
[L1135]              __tmp__Length := Length;
[L1136]              __tmp__now := now;
[L1137]              __tmp__owner_Owned := owner_Owned;
[L1138]              __tmp__newOwner_Owned := newOwner_Owned;
[L1139]              __tmp__businessName_Litecoin_SV := businessName_Litecoin_SV;
[L1140]              __tmp__businessCountry_Litecoin_SV := businessCountry_Litecoin_SV;
[L1141]              __tmp__symbol_Litecoin_SV := symbol_Litecoin_SV;
[L1142]              __tmp__name_Litecoin_SV := name_Litecoin_SV;
[L1143]              __tmp__decimals_Litecoin_SV := decimals_Litecoin_SV;
[L1144]              __tmp___totalSupply_Litecoin_SV := _totalSupply_Litecoin_SV;
[L1145]              __tmp__balances_Litecoin_SV := balances_Litecoin_SV;
[L1146]              __tmp__allowed_Litecoin_SV := allowed_Litecoin_SV;
[L1147]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__fail(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L2667]  COND TRUE   __tmp__DType[this] == Litecoin_SV
[L2668]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2238]  COND FALSE  !(!(b_s45 <= a_s45))
[L2242]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2668]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2669]  COND FALSE  !(revert)
[L2675]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_Litecoin_SV[this][from_s470];
[L2676]              __tmp__balances_Litecoin_SV[this][from_s470] := __var_5;
[L2677]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_Litecoin_SV[this][from_s470];
[L2678]  COND TRUE   __tmp__DType[this] == Litecoin_SV
[L2679]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2238]  COND TRUE   !(b_s45 <= a_s45)
[L2239]              revert := true;
[L2679]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2680]  COND TRUE   revert
[L1147]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__fail(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L1148]              assume revert || gas < 0;
[L4515]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

[2020-11-24 20:36:04,302 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:36:04,302 INFO  L82        PathProgramCache]: Analyzing trace with hash -1383066189, now seen corresponding path program 1 times
[2020-11-24 20:36:04,302 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:36:04,311 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:36:04,355 INFO  L134       CoverageAnalysis]: Checked inductivity of 74 backedges. 2 proven. 0 refuted. 0 times theorem prover too weak. 72 trivial. 0 not checked.
[2020-11-24 20:36:04,355 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:36:04,355 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-24 20:36:04,355 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:36:04,355 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 20:36:04,355 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-24 20:36:04,355 INFO  L87              Difference]: Start difference. First operand 2090 states and 2283 transitions. cyclomatic complexity: 200 Second operand 7 states.
[2020-11-24 20:36:04,647 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:36:04,647 INFO  L93              Difference]: Finished difference Result 2132 states and 2359 transitions.
[2020-11-24 20:36:04,647 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-24 20:36:04,647 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2132 states and 2359 transitions.
[2020-11-24 20:36:04,651 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-24 20:36:04,656 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2132 states to 2132 states and 2359 transitions.
[2020-11-24 20:36:04,656 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 669
[2020-11-24 20:36:04,656 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 669
[2020-11-24 20:36:04,656 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2132 states and 2359 transitions.
[2020-11-24 20:36:04,657 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:36:04,658 INFO  L728         BuchiCegarLoop]: Abstraction has 2132 states and 2359 transitions.
[2020-11-24 20:36:04,659 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2132 states and 2359 transitions.
[2020-11-24 20:36:04,668 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2132 to 2064.
[2020-11-24 20:36:04,668 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2064 states.
[2020-11-24 20:36:04,670 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2064 states to 2064 states and 2234 transitions.
[2020-11-24 20:36:04,670 INFO  L751         BuchiCegarLoop]: Abstraction has 2064 states and 2234 transitions.
[2020-11-24 20:36:04,670 INFO  L631         BuchiCegarLoop]: Abstraction has 2064 states and 2234 transitions.
[2020-11-24 20:36:04,670 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-24 20:36:04,670 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2064 states and 2234 transitions.
[2020-11-24 20:36:04,672 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 20:36:04,672 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:36:04,672 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:36:04,673 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:36:04,673 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_Litecoin_SV0 := false;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4599]              assume null == 0;
[L4600]  CALL        call this := FreshRefGenerator__success();
[L2180]              havoc newRef;
[L2181]              assume Alloc[newRef] == false;
[L2182]              Alloc[newRef] := true;
[L2183]              assume newRef != null;
[L4600]  RET         call this := FreshRefGenerator__success();
[L4601]              assume now >= 0;
[L4602]              assume DType[this] == Litecoin_SV;
[L4603]              assume msgvalue_MSG == 0;
[L4604]              gas := gas - 53000;
[L4605]  CALL        call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L825]               havoc __exception;
[L826]               revert := false;
[L827]   COND FALSE  !(__exception)
[L852]   CALL        call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L2536]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2301]              assume msgsender_MSG != null;
[L2302]              Balance[this] := 0;
[L2316]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2317]  COND FALSE  !(revert)
[L2536]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2537]  COND FALSE  !(revert)
[L2540]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2386]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2368]              assume msgsender_MSG != null;
[L2369]              Balance[this] := 0;
[L2370]              owner_Owned[this] := null;
[L2371]              newOwner_Owned[this] := null;
[L2373]              owner_Owned[this] := msgsender_MSG;
[L2386]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2387]  COND FALSE  !(revert)
[L2540]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2541]  COND FALSE  !(revert)
[L2544]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2212]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2197]              assume msgsender_MSG != null;
[L2198]              Balance[this] := 0;
[L2212]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2213]  COND FALSE  !(revert)
[L2544]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2545]  COND FALSE  !(revert)
[L2548]  CALL        call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2489]              assume msgsender_MSG != null;
[L2490]              Balance[this] := 0;
[L2491]              businessName_Litecoin_SV[this] := 1031794244;
[L2492]              businessCountry_Litecoin_SV[this] := 1031794244;
[L2493]              symbol_Litecoin_SV[this] := 1031794244;
[L2494]              name_Litecoin_SV[this] := 1031794244;
[L2495]              decimals_Litecoin_SV[this] := 0;
[L2496]              _totalSupply_Litecoin_SV[this] := 0;
[L2497]              balances_Litecoin_SV[this] := zeroRefintArr();
[L2498]              sum_balances0[this] := 0;
[L2499]              allowed_Litecoin_SV[this] := zeroRefRefintArr();
[L2500]              sum_allowed1[this] := 0;
[L2502]              businessName_Litecoin_SV[this] := -1948412360;
[L2503]              businessCountry_Litecoin_SV[this] := 1439465232;
[L2504]              symbol_Litecoin_SV[this] := -803338840;
[L2505]              name_Litecoin_SV[this] := 1836794956;
[L2506]              decimals_Litecoin_SV[this] := 18;
[L2507]              _totalSupply_Litecoin_SV[this] := 25000000000000000000000000;
[L2508]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2509]              balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131] := _totalSupply_Litecoin_SV[this];
[L2510]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2511]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2548]  RET         call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2549]  COND FALSE  !(revert)
[L852]   RET         call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L853]               assume !revert && gas >= 0;
[L4605]  RET         call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume !revert && gas >= 0;
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND TRUE   choice == 14
[L4504]              gas := gas - 21000;
[L4505]  COND TRUE   gas >= 0
[L4506]              assume tokens_s411 >= 0 && tokens_s411 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4507]              assume msgvalue_MSG == 0;
[L4508]  CALL        call success_s411 := approve~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, spender_s411, tokens_s411);
[L1061]              havoc __exception;
[L1062]              revert := false;
[L1063]  COND FALSE  !(__exception)
[L1088]  CALL        call success_s411 := approve~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, spender_s411, tokens_s411);
[L2654]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_Litecoin_SV[this][msgsender_MSG][spender_s411];
[L2655]              allowed_Litecoin_SV[this][msgsender_MSG][spender_s411] := tokens_s411;
[L2656]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_Litecoin_SV[this][msgsender_MSG][spender_s411];
[L2657]              assert { :EventEmitted "Approval_Litecoin_SV" } true;
[L2658]              success_s411 := true;
[L1088]  RET         call success_s411 := approve~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, spender_s411, tokens_s411);
[L1089]              assume !revert && gas >= 0;
[L4508]  RET         call success_s411 := approve~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, spender_s411, tokens_s411);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND FALSE  !(choice == 14)
[L4510]  COND TRUE   choice == 13
[L4511]              gas := gas - 21000;
[L4512]  COND TRUE   gas >= 0
[L4513]              assume tokens_s470 >= 0 && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4514]              assume msgvalue_MSG == 0;
[L4515]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s470 && p1 != to_s470) && (p2 != from_s470 || p3 != msgsender_MSG)) && from_s470 != to_s470) && tokens_s470 <= balances_Litecoin_SV[this][from_s470]) && tokens_s470 <= allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) && balances_Litecoin_SV[this][to_s470] + tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s470 >= 0) && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s470] >= 0) && balances_Litecoin_SV[this][to_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][from_s470] >= 0) && balances_Litecoin_SV[this][from_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] >= 0) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Litecoin_SV0 := true;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]                 revert := revert_hold;
[L1123]              havoc __exception;
[L1124]              revert := false;
[L1125]  COND TRUE   __exception
[L1126]              __tmp__Balance := Balance;
[L1127]              __tmp__DType := DType;
[L1128]              __tmp__Alloc := Alloc;
[L1129]              __tmp__balance_ADDR := balance_ADDR;
[L1130]              __tmp__M_Ref_int := M_Ref_int;
[L1131]              __tmp__sum_balances0 := sum_balances0;
[L1132]              __tmp__alloc_allowed_Litecoin_SV_lvl0 := alloc_allowed_Litecoin_SV_lvl0;
[L1133]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1134]              __tmp__sum_allowed1 := sum_allowed1;
[L1135]              __tmp__Length := Length;
[L1136]              __tmp__now := now;
[L1137]              __tmp__owner_Owned := owner_Owned;
[L1138]              __tmp__newOwner_Owned := newOwner_Owned;
[L1139]              __tmp__businessName_Litecoin_SV := businessName_Litecoin_SV;
[L1140]              __tmp__businessCountry_Litecoin_SV := businessCountry_Litecoin_SV;
[L1141]              __tmp__symbol_Litecoin_SV := symbol_Litecoin_SV;
[L1142]              __tmp__name_Litecoin_SV := name_Litecoin_SV;
[L1143]              __tmp__decimals_Litecoin_SV := decimals_Litecoin_SV;
[L1144]              __tmp___totalSupply_Litecoin_SV := _totalSupply_Litecoin_SV;
[L1145]              __tmp__balances_Litecoin_SV := balances_Litecoin_SV;
[L1146]              __tmp__allowed_Litecoin_SV := allowed_Litecoin_SV;
[L1147]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__fail(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L2667]  COND TRUE   __tmp__DType[this] == Litecoin_SV
[L2668]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2238]  COND FALSE  !(!(b_s45 <= a_s45))
[L2242]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2668]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2669]  COND FALSE  !(revert)
[L2675]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_Litecoin_SV[this][from_s470];
[L2676]              __tmp__balances_Litecoin_SV[this][from_s470] := __var_5;
[L2677]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_Litecoin_SV[this][from_s470];
[L2678]  COND TRUE   __tmp__DType[this] == Litecoin_SV
[L2679]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2238]  COND FALSE  !(!(b_s45 <= a_s45))
[L2242]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2679]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2680]  COND FALSE  !(revert)
[L2686]              __tmp__sum_allowed1[from_s470] := __tmp__sum_allowed1[from_s470] - __tmp__allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2687]              __tmp__allowed_Litecoin_SV[this][from_s470][msgsender_MSG] := __var_6;
[L2688]              __tmp__sum_allowed1[from_s470] := __tmp__sum_allowed1[from_s470] + __tmp__allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2689]  COND TRUE   __tmp__DType[this] == Litecoin_SV
[L2690]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2220]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2221]  COND TRUE   !(c_s23 >= a_s23)
[L2222]              revert := true;
[L2690]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2691]  COND TRUE   revert
[L1147]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__fail(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L1148]              assume revert || gas < 0;
[L4515]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

Loop:
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND TRUE   choice == 22
[L4447]              gas := gas - 21000;
[L4448]  COND FALSE  !(gas >= 0)
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

[2020-11-24 20:36:04,676 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:36:04,676 INFO  L82        PathProgramCache]: Analyzing trace with hash 2041877512, now seen corresponding path program 1 times
[2020-11-24 20:36:04,676 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:36:04,686 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:36:04,752 INFO  L134       CoverageAnalysis]: Checked inductivity of 75 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 75 trivial. 0 not checked.
[2020-11-24 20:36:04,752 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:36:04,752 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-24 20:36:04,753 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:36:04,753 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-24 20:36:04,753 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=16, Invalid=56, Unknown=0, NotChecked=0, Total=72
[2020-11-24 20:36:04,753 INFO  L87              Difference]: Start difference. First operand 2064 states and 2234 transitions. cyclomatic complexity: 175 Second operand 9 states.
[2020-11-24 20:36:05,309 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:36:05,310 INFO  L93              Difference]: Finished difference Result 2118 states and 2301 transitions.
[2020-11-24 20:36:05,310 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-24 20:36:05,310 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2118 states and 2301 transitions.
[2020-11-24 20:36:05,313 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 20:36:05,319 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2118 states to 2074 states and 2255 transitions.
[2020-11-24 20:36:05,319 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 662
[2020-11-24 20:36:05,319 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 662
[2020-11-24 20:36:05,319 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2074 states and 2255 transitions.
[2020-11-24 20:36:05,320 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:36:05,321 INFO  L728         BuchiCegarLoop]: Abstraction has 2074 states and 2255 transitions.
[2020-11-24 20:36:05,322 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2074 states and 2255 transitions.
[2020-11-24 20:36:05,332 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2074 to 1984.
[2020-11-24 20:36:05,332 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1984 states.
[2020-11-24 20:36:05,335 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1984 states to 1984 states and 2143 transitions.
[2020-11-24 20:36:05,335 INFO  L751         BuchiCegarLoop]: Abstraction has 1984 states and 2143 transitions.
[2020-11-24 20:36:05,335 INFO  L631         BuchiCegarLoop]: Abstraction has 1984 states and 2143 transitions.
[2020-11-24 20:36:05,335 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-24 20:36:05,335 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1984 states and 2143 transitions.
[2020-11-24 20:36:05,338 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:36:05,338 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:36:05,338 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:36:05,340 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:36:05,340 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_Litecoin_SV0 := false;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4599]              assume null == 0;
[L4600]  CALL        call this := FreshRefGenerator__success();
[L2180]              havoc newRef;
[L2181]              assume Alloc[newRef] == false;
[L2182]              Alloc[newRef] := true;
[L2183]              assume newRef != null;
[L4600]  RET         call this := FreshRefGenerator__success();
[L4601]              assume now >= 0;
[L4602]              assume DType[this] == Litecoin_SV;
[L4603]              assume msgvalue_MSG == 0;
[L4604]              gas := gas - 53000;
[L4605]  CALL        call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L825]               havoc __exception;
[L826]               revert := false;
[L827]   COND FALSE  !(__exception)
[L852]   CALL        call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L2536]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2301]              assume msgsender_MSG != null;
[L2302]              Balance[this] := 0;
[L2316]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2317]  COND FALSE  !(revert)
[L2536]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2537]  COND FALSE  !(revert)
[L2540]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2386]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2368]              assume msgsender_MSG != null;
[L2369]              Balance[this] := 0;
[L2370]              owner_Owned[this] := null;
[L2371]              newOwner_Owned[this] := null;
[L2373]              owner_Owned[this] := msgsender_MSG;
[L2386]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2387]  COND FALSE  !(revert)
[L2540]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2541]  COND FALSE  !(revert)
[L2544]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2212]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2197]              assume msgsender_MSG != null;
[L2198]              Balance[this] := 0;
[L2212]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2213]  COND FALSE  !(revert)
[L2544]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2545]  COND FALSE  !(revert)
[L2548]  CALL        call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2489]              assume msgsender_MSG != null;
[L2490]              Balance[this] := 0;
[L2491]              businessName_Litecoin_SV[this] := 1031794244;
[L2492]              businessCountry_Litecoin_SV[this] := 1031794244;
[L2493]              symbol_Litecoin_SV[this] := 1031794244;
[L2494]              name_Litecoin_SV[this] := 1031794244;
[L2495]              decimals_Litecoin_SV[this] := 0;
[L2496]              _totalSupply_Litecoin_SV[this] := 0;
[L2497]              balances_Litecoin_SV[this] := zeroRefintArr();
[L2498]              sum_balances0[this] := 0;
[L2499]              allowed_Litecoin_SV[this] := zeroRefRefintArr();
[L2500]              sum_allowed1[this] := 0;
[L2502]              businessName_Litecoin_SV[this] := -1948412360;
[L2503]              businessCountry_Litecoin_SV[this] := 1439465232;
[L2504]              symbol_Litecoin_SV[this] := -803338840;
[L2505]              name_Litecoin_SV[this] := 1836794956;
[L2506]              decimals_Litecoin_SV[this] := 18;
[L2507]              _totalSupply_Litecoin_SV[this] := 25000000000000000000000000;
[L2508]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2509]              balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131] := _totalSupply_Litecoin_SV[this];
[L2510]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2511]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2548]  RET         call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2549]  COND FALSE  !(revert)
[L852]   RET         call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L853]               assume !revert && gas >= 0;
[L4605]  RET         call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume !revert && gas >= 0;
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND TRUE   choice == 15
[L4497]              gas := gas - 21000;
[L4498]  COND TRUE   gas >= 0
[L4499]              assume tokens_s383 >= 0 && tokens_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4500]              assume msgvalue_MSG == 0;
[L4501]  CALL        call success_s383 := transfer~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, to_s383, tokens_s383);
[L1001]              havoc __exception;
[L1002]              revert := false;
[L1003]  COND FALSE  !(__exception)
[L1028]  CALL        call success_s383 := transfer~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, to_s383, tokens_s383);
[L2616]  COND TRUE   DType[this] == Litecoin_SV
[L2617]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][msgsender_MSG], tokens_s383);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2617]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][msgsender_MSG], tokens_s383);
[L2618]  COND FALSE  !(revert)
[L2624]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][msgsender_MSG];
[L2625]              balances_Litecoin_SV[this][msgsender_MSG] := __var_3;
[L2626]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][msgsender_MSG];
[L2627]  COND TRUE   DType[this] == Litecoin_SV
[L2628]  CALL        call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s383], tokens_s383);
[L2229]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2230]  COND FALSE  !(!(c_s23 >= a_s23))
[L2628]  RET         call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s383], tokens_s383);
[L2629]  COND FALSE  !(revert)
[L2635]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][to_s383];
[L2636]              balances_Litecoin_SV[this][to_s383] := __var_4;
[L2637]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][to_s383];
[L2638]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2639]              success_s383 := true;
[L1028]  RET         call success_s383 := transfer~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, to_s383, tokens_s383);
[L1029]              assume !revert && gas >= 0;
[L4501]  RET         call success_s383 := transfer~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, to_s383, tokens_s383);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND FALSE  !(choice == 14)
[L4510]  COND TRUE   choice == 13
[L4511]              gas := gas - 21000;
[L4512]  COND TRUE   gas >= 0
[L4513]              assume tokens_s470 >= 0 && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4514]              assume msgvalue_MSG == 0;
[L4515]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s470 && p1 != to_s470) && (p2 != from_s470 || p3 != msgsender_MSG)) && from_s470 != to_s470) && tokens_s470 <= balances_Litecoin_SV[this][from_s470]) && tokens_s470 <= allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) && balances_Litecoin_SV[this][to_s470] + tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s470 >= 0) && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s470] >= 0) && balances_Litecoin_SV[this][to_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][from_s470] >= 0) && balances_Litecoin_SV[this][from_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] >= 0) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Litecoin_SV0 := true;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]                 revert := revert_hold;
[L1123]              havoc __exception;
[L1124]              revert := false;
[L1125]  COND FALSE  !(__exception)
[L1150]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L2709]  COND TRUE   DType[this] == Litecoin_SV
[L2710]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2710]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2711]  COND FALSE  !(revert)
[L2717]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][from_s470];
[L2718]              balances_Litecoin_SV[this][from_s470] := __var_5;
[L2719]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][from_s470];
[L2720]  COND TRUE   DType[this] == Litecoin_SV
[L2721]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2721]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2722]  COND FALSE  !(revert)
[L2728]              sum_allowed1[from_s470] := sum_allowed1[from_s470] - allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2729]              allowed_Litecoin_SV[this][from_s470][msgsender_MSG] := __var_6;
[L2730]              sum_allowed1[from_s470] := sum_allowed1[from_s470] + allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2731]  COND TRUE   DType[this] == Litecoin_SV
[L2732]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2229]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2230]  COND FALSE  !(!(c_s23 >= a_s23))
[L2732]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2733]  COND FALSE  !(revert)
[L2739]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][to_s470];
[L2740]              balances_Litecoin_SV[this][to_s470] := __var_7;
[L2741]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][to_s470];
[L2742]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2743]              success_s470 := true;
[L1150]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L1151]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((((success_s470 == true && balances_Litecoin_SV[this][from_s470] == old(balances_Litecoin_SV[this][from_s470]) - tokens_s470) && balances_Litecoin_SV[this][to_s470] == old(balances_Litecoin_SV[this][to_s470]) + tokens_s470) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] == old(allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) - tokens_s470) && _totalSupply_Litecoin_SV[this] == old(_totalSupply_Litecoin_SV[this])) && balances_Litecoin_SV[this][p1] == old(balances_Litecoin_SV[this][p1])) && allowed_Litecoin_SV[this][p2][p3] == old(allowed_Litecoin_SV[this][p2][p3])) && businessName_Litecoin_SV[this] == old(businessName_Litecoin_SV[this])) && businessCountry_Litecoin_SV[this] == old(businessCountry_Litecoin_SV[this])) && symbol_Litecoin_SV[this] == old(symbol_Litecoin_SV[this])) && name_Litecoin_SV[this] == old(name_Litecoin_SV[this])) && decimals_Litecoin_SV[this] == old(decimals_Litecoin_SV[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4515]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

Loop:
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND FALSE  !(choice == 14)
[L4510]  COND TRUE   choice == 13
[L4511]              gas := gas - 21000;
[L4512]  COND TRUE   gas >= 0
[L4513]              assume tokens_s470 >= 0 && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4514]              assume msgvalue_MSG == 0;
[L4515]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s470 && p1 != to_s470) && (p2 != from_s470 || p3 != msgsender_MSG)) && from_s470 != to_s470) && tokens_s470 <= balances_Litecoin_SV[this][from_s470]) && tokens_s470 <= allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) && balances_Litecoin_SV[this][to_s470] + tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s470 >= 0) && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s470] >= 0) && balances_Litecoin_SV[this][to_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][from_s470] >= 0) && balances_Litecoin_SV[this][from_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] >= 0) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Litecoin_SV0 := true;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]                 revert := revert_hold;
[L1123]              havoc __exception;
[L1124]              revert := false;
[L1125]  COND FALSE  !(__exception)
[L1150]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L2709]  COND TRUE   DType[this] == Litecoin_SV
[L2710]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2710]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2711]  COND FALSE  !(revert)
[L2717]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][from_s470];
[L2718]              balances_Litecoin_SV[this][from_s470] := __var_5;
[L2719]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][from_s470];
[L2720]  COND TRUE   DType[this] == Litecoin_SV
[L2721]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2721]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2722]  COND FALSE  !(revert)
[L2728]              sum_allowed1[from_s470] := sum_allowed1[from_s470] - allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2729]              allowed_Litecoin_SV[this][from_s470][msgsender_MSG] := __var_6;
[L2730]              sum_allowed1[from_s470] := sum_allowed1[from_s470] + allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2731]  COND TRUE   DType[this] == Litecoin_SV
[L2732]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2229]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2230]  COND FALSE  !(!(c_s23 >= a_s23))
[L2732]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2733]  COND FALSE  !(revert)
[L2739]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][to_s470];
[L2740]              balances_Litecoin_SV[this][to_s470] := __var_7;
[L2741]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][to_s470];
[L2742]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2743]              success_s470 := true;
[L1150]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L1151]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((((success_s470 == true && balances_Litecoin_SV[this][from_s470] == old(balances_Litecoin_SV[this][from_s470]) - tokens_s470) && balances_Litecoin_SV[this][to_s470] == old(balances_Litecoin_SV[this][to_s470]) + tokens_s470) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] == old(allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) - tokens_s470) && _totalSupply_Litecoin_SV[this] == old(_totalSupply_Litecoin_SV[this])) && balances_Litecoin_SV[this][p1] == old(balances_Litecoin_SV[this][p1])) && allowed_Litecoin_SV[this][p2][p3] == old(allowed_Litecoin_SV[this][p2][p3])) && businessName_Litecoin_SV[this] == old(businessName_Litecoin_SV[this])) && businessCountry_Litecoin_SV[this] == old(businessCountry_Litecoin_SV[this])) && symbol_Litecoin_SV[this] == old(symbol_Litecoin_SV[this])) && name_Litecoin_SV[this] == old(name_Litecoin_SV[this])) && decimals_Litecoin_SV[this] == old(decimals_Litecoin_SV[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4515]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

[2020-11-24 20:36:05,343 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:36:05,343 INFO  L82        PathProgramCache]: Analyzing trace with hash 129626235, now seen corresponding path program 1 times
[2020-11-24 20:36:05,344 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:36:05,376 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:36:05,691 INFO  L134       CoverageAnalysis]: Checked inductivity of 74 backedges. 0 proven. 3 refuted. 0 times theorem prover too weak. 71 trivial. 0 not checked.
[2020-11-24 20:36:05,692 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-24 20:36:05,692 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [24] total 24
[2020-11-24 20:36:05,692 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:36:05,692 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 25 interpolants.
[2020-11-24 20:36:05,692 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=71, Invalid=529, Unknown=0, NotChecked=0, Total=600
[2020-11-24 20:36:05,692 INFO  L87              Difference]: Start difference. First operand 1984 states and 2143 transitions. cyclomatic complexity: 163 Second operand 25 states.
[2020-11-24 20:36:08,500 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:36:08,501 INFO  L93              Difference]: Finished difference Result 2011 states and 2176 transitions.
[2020-11-24 20:36:08,501 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 24 states. 
[2020-11-24 20:36:08,501 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2011 states and 2176 transitions.
[2020-11-24 20:36:08,504 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:36:08,508 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2011 states to 2011 states and 2176 transitions.
[2020-11-24 20:36:08,508 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 629
[2020-11-24 20:36:08,508 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 629
[2020-11-24 20:36:08,508 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2011 states and 2176 transitions.
[2020-11-24 20:36:08,509 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:36:08,510 INFO  L728         BuchiCegarLoop]: Abstraction has 2011 states and 2176 transitions.
[2020-11-24 20:36:08,511 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2011 states and 2176 transitions.
[2020-11-24 20:36:08,518 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2011 to 1988.
[2020-11-24 20:36:08,519 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1988 states.
[2020-11-24 20:36:08,520 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1988 states to 1988 states and 2153 transitions.
[2020-11-24 20:36:08,520 INFO  L751         BuchiCegarLoop]: Abstraction has 1988 states and 2153 transitions.
[2020-11-24 20:36:08,520 INFO  L631         BuchiCegarLoop]: Abstraction has 1988 states and 2153 transitions.
[2020-11-24 20:36:08,520 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-24 20:36:08,520 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1988 states and 2153 transitions.
[2020-11-24 20:36:08,522 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:36:08,522 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:36:08,522 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:36:08,523 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:36:08,524 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_Litecoin_SV0 := false;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4599]              assume null == 0;
[L4600]  CALL        call this := FreshRefGenerator__success();
[L2180]              havoc newRef;
[L2181]              assume Alloc[newRef] == false;
[L2182]              Alloc[newRef] := true;
[L2183]              assume newRef != null;
[L4600]  RET         call this := FreshRefGenerator__success();
[L4601]              assume now >= 0;
[L4602]              assume DType[this] == Litecoin_SV;
[L4603]              assume msgvalue_MSG == 0;
[L4604]              gas := gas - 53000;
[L4605]  CALL        call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L825]               havoc __exception;
[L826]               revert := false;
[L827]   COND FALSE  !(__exception)
[L852]   CALL        call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L2536]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2301]              assume msgsender_MSG != null;
[L2302]              Balance[this] := 0;
[L2316]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2317]  COND FALSE  !(revert)
[L2536]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2537]  COND FALSE  !(revert)
[L2540]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2386]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2368]              assume msgsender_MSG != null;
[L2369]              Balance[this] := 0;
[L2370]              owner_Owned[this] := null;
[L2371]              newOwner_Owned[this] := null;
[L2373]              owner_Owned[this] := msgsender_MSG;
[L2386]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2387]  COND FALSE  !(revert)
[L2540]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2541]  COND FALSE  !(revert)
[L2544]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2212]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2197]              assume msgsender_MSG != null;
[L2198]              Balance[this] := 0;
[L2212]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2213]  COND FALSE  !(revert)
[L2544]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2545]  COND FALSE  !(revert)
[L2548]  CALL        call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2489]              assume msgsender_MSG != null;
[L2490]              Balance[this] := 0;
[L2491]              businessName_Litecoin_SV[this] := 1031794244;
[L2492]              businessCountry_Litecoin_SV[this] := 1031794244;
[L2493]              symbol_Litecoin_SV[this] := 1031794244;
[L2494]              name_Litecoin_SV[this] := 1031794244;
[L2495]              decimals_Litecoin_SV[this] := 0;
[L2496]              _totalSupply_Litecoin_SV[this] := 0;
[L2497]              balances_Litecoin_SV[this] := zeroRefintArr();
[L2498]              sum_balances0[this] := 0;
[L2499]              allowed_Litecoin_SV[this] := zeroRefRefintArr();
[L2500]              sum_allowed1[this] := 0;
[L2502]              businessName_Litecoin_SV[this] := -1948412360;
[L2503]              businessCountry_Litecoin_SV[this] := 1439465232;
[L2504]              symbol_Litecoin_SV[this] := -803338840;
[L2505]              name_Litecoin_SV[this] := 1836794956;
[L2506]              decimals_Litecoin_SV[this] := 18;
[L2507]              _totalSupply_Litecoin_SV[this] := 25000000000000000000000000;
[L2508]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2509]              balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131] := _totalSupply_Litecoin_SV[this];
[L2510]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2511]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2548]  RET         call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2549]  COND FALSE  !(revert)
[L852]   RET         call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L853]               assume !revert && gas >= 0;
[L4605]  RET         call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume !revert && gas >= 0;
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND FALSE  !(choice == 14)
[L4510]  COND TRUE   choice == 13
[L4511]              gas := gas - 21000;
[L4512]  COND TRUE   gas >= 0
[L4513]              assume tokens_s470 >= 0 && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4514]              assume msgvalue_MSG == 0;
[L4515]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((p1 != from_s470 && p1 != to_s470) && (p2 != from_s470 || p3 != msgsender_MSG)) && from_s470 != to_s470) && tokens_s470 <= balances_Litecoin_SV[this][from_s470]) && tokens_s470 <= allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) && balances_Litecoin_SV[this][to_s470] + tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s470 >= 0) && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s470] >= 0) && balances_Litecoin_SV[this][to_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][from_s470] >= 0) && balances_Litecoin_SV[this][from_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] >= 0) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3]                 revert := revert_hold;
[L1123]              havoc __exception;
[L1124]              revert := false;
[L1125]  COND FALSE  !(__exception)
[L1150]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L2709]  COND TRUE   DType[this] == Litecoin_SV
[L2710]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2710]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2711]  COND FALSE  !(revert)
[L2717]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][from_s470];
[L2718]              balances_Litecoin_SV[this][from_s470] := __var_5;
[L2719]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][from_s470];
[L2720]  COND TRUE   DType[this] == Litecoin_SV
[L2721]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2721]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2722]  COND FALSE  !(revert)
[L2728]              sum_allowed1[from_s470] := sum_allowed1[from_s470] - allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2729]              allowed_Litecoin_SV[this][from_s470][msgsender_MSG] := __var_6;
[L2730]              sum_allowed1[from_s470] := sum_allowed1[from_s470] + allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2731]  COND TRUE   DType[this] == Litecoin_SV
[L2732]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2229]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2230]  COND FALSE  !(!(c_s23 >= a_s23))
[L2732]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2733]  COND FALSE  !(revert)
[L2739]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][to_s470];
[L2740]              balances_Litecoin_SV[this][to_s470] := __var_7;
[L2741]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][to_s470];
[L2742]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2743]              success_s470 := true;
[L1150]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L1151]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((((success_s470 == true && balances_Litecoin_SV[this][from_s470] == old(balances_Litecoin_SV[this][from_s470]) - tokens_s470) && balances_Litecoin_SV[this][to_s470] == old(balances_Litecoin_SV[this][to_s470]) + tokens_s470) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] == old(allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) - tokens_s470) && _totalSupply_Litecoin_SV[this] == old(_totalSupply_Litecoin_SV[this])) && balances_Litecoin_SV[this][p1] == old(balances_Litecoin_SV[this][p1])) && allowed_Litecoin_SV[this][p2][p3] == old(allowed_Litecoin_SV[this][p2][p3])) && businessName_Litecoin_SV[this] == old(businessName_Litecoin_SV[this])) && businessCountry_Litecoin_SV[this] == old(businessCountry_Litecoin_SV[this])) && symbol_Litecoin_SV[this] == old(symbol_Litecoin_SV[this])) && name_Litecoin_SV[this] == old(name_Litecoin_SV[this])) && decimals_Litecoin_SV[this] == old(decimals_Litecoin_SV[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4515]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND FALSE  !(choice == 14)
[L4510]  COND TRUE   choice == 13
[L4511]              gas := gas - 21000;
[L4512]  COND TRUE   gas >= 0
[L4513]              assume tokens_s470 >= 0 && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4514]              assume msgvalue_MSG == 0;
[L4515]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s470 && p1 != to_s470) && (p2 != from_s470 || p3 != msgsender_MSG)) && from_s470 != to_s470) && tokens_s470 <= balances_Litecoin_SV[this][from_s470]) && tokens_s470 <= allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) && balances_Litecoin_SV[this][to_s470] + tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s470 >= 0) && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s470] >= 0) && balances_Litecoin_SV[this][to_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][from_s470] >= 0) && balances_Litecoin_SV[this][from_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] >= 0) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Litecoin_SV0 := true;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]                 revert := revert_hold;
[L1123]              havoc __exception;
[L1124]              revert := false;
[L1125]  COND FALSE  !(__exception)
[L1150]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L2709]  COND TRUE   DType[this] == Litecoin_SV
[L2710]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2710]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2711]  COND FALSE  !(revert)
[L2717]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][from_s470];
[L2718]              balances_Litecoin_SV[this][from_s470] := __var_5;
[L2719]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][from_s470];
[L2720]  COND TRUE   DType[this] == Litecoin_SV
[L2721]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2721]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2722]  COND FALSE  !(revert)
[L2728]              sum_allowed1[from_s470] := sum_allowed1[from_s470] - allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2729]              allowed_Litecoin_SV[this][from_s470][msgsender_MSG] := __var_6;
[L2730]              sum_allowed1[from_s470] := sum_allowed1[from_s470] + allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2731]  COND TRUE   DType[this] == Litecoin_SV
[L2732]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2229]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2230]  COND FALSE  !(!(c_s23 >= a_s23))
[L2732]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2733]  COND FALSE  !(revert)
[L2739]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][to_s470];
[L2740]              balances_Litecoin_SV[this][to_s470] := __var_7;
[L2741]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][to_s470];
[L2742]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2743]              success_s470 := true;
[L1150]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L1151]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((((success_s470 == true && balances_Litecoin_SV[this][from_s470] == old(balances_Litecoin_SV[this][from_s470]) - tokens_s470) && balances_Litecoin_SV[this][to_s470] == old(balances_Litecoin_SV[this][to_s470]) + tokens_s470) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] == old(allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) - tokens_s470) && _totalSupply_Litecoin_SV[this] == old(_totalSupply_Litecoin_SV[this])) && balances_Litecoin_SV[this][p1] == old(balances_Litecoin_SV[this][p1])) && allowed_Litecoin_SV[this][p2][p3] == old(allowed_Litecoin_SV[this][p2][p3])) && businessName_Litecoin_SV[this] == old(businessName_Litecoin_SV[this])) && businessCountry_Litecoin_SV[this] == old(businessCountry_Litecoin_SV[this])) && symbol_Litecoin_SV[this] == old(symbol_Litecoin_SV[this])) && name_Litecoin_SV[this] == old(name_Litecoin_SV[this])) && decimals_Litecoin_SV[this] == old(decimals_Litecoin_SV[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4515]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

Loop:
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND FALSE  !(choice == 14)
[L4510]  COND TRUE   choice == 13
[L4511]              gas := gas - 21000;
[L4512]  COND TRUE   gas >= 0
[L4513]              assume tokens_s470 >= 0 && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4514]              assume msgvalue_MSG == 0;
[L4515]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s470 && p1 != to_s470) && (p2 != from_s470 || p3 != msgsender_MSG)) && from_s470 != to_s470) && tokens_s470 <= balances_Litecoin_SV[this][from_s470]) && tokens_s470 <= allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) && balances_Litecoin_SV[this][to_s470] + tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s470 >= 0) && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s470] >= 0) && balances_Litecoin_SV[this][to_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][from_s470] >= 0) && balances_Litecoin_SV[this][from_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] >= 0) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Litecoin_SV0 := true;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]                 revert := revert_hold;
[L1123]              havoc __exception;
[L1124]              revert := false;
[L1125]  COND FALSE  !(__exception)
[L1150]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L2709]  COND TRUE   DType[this] == Litecoin_SV
[L2710]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2710]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2711]  COND FALSE  !(revert)
[L2717]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][from_s470];
[L2718]              balances_Litecoin_SV[this][from_s470] := __var_5;
[L2719]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][from_s470];
[L2720]  COND TRUE   DType[this] == Litecoin_SV
[L2721]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2721]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2722]  COND FALSE  !(revert)
[L2728]              sum_allowed1[from_s470] := sum_allowed1[from_s470] - allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2729]              allowed_Litecoin_SV[this][from_s470][msgsender_MSG] := __var_6;
[L2730]              sum_allowed1[from_s470] := sum_allowed1[from_s470] + allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2731]  COND TRUE   DType[this] == Litecoin_SV
[L2732]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2229]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2230]  COND FALSE  !(!(c_s23 >= a_s23))
[L2732]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2733]  COND FALSE  !(revert)
[L2739]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][to_s470];
[L2740]              balances_Litecoin_SV[this][to_s470] := __var_7;
[L2741]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][to_s470];
[L2742]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2743]              success_s470 := true;
[L1150]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L1151]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((((success_s470 == true && balances_Litecoin_SV[this][from_s470] == old(balances_Litecoin_SV[this][from_s470]) - tokens_s470) && balances_Litecoin_SV[this][to_s470] == old(balances_Litecoin_SV[this][to_s470]) + tokens_s470) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] == old(allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) - tokens_s470) && _totalSupply_Litecoin_SV[this] == old(_totalSupply_Litecoin_SV[this])) && balances_Litecoin_SV[this][p1] == old(balances_Litecoin_SV[this][p1])) && allowed_Litecoin_SV[this][p2][p3] == old(allowed_Litecoin_SV[this][p2][p3])) && businessName_Litecoin_SV[this] == old(businessName_Litecoin_SV[this])) && businessCountry_Litecoin_SV[this] == old(businessCountry_Litecoin_SV[this])) && symbol_Litecoin_SV[this] == old(symbol_Litecoin_SV[this])) && name_Litecoin_SV[this] == old(name_Litecoin_SV[this])) && decimals_Litecoin_SV[this] == old(decimals_Litecoin_SV[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4515]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

[2020-11-24 20:36:08,527 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:36:08,527 INFO  L82        PathProgramCache]: Analyzing trace with hash -321503219, now seen corresponding path program 1 times
[2020-11-24 20:36:08,528 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:36:08,600 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:36:09,657 WARN  L188               SmtUtils]: Spent 110.00 ms on a formula simplification. DAG size of input: 122 DAG size of output: 81
[2020-11-24 20:36:10,645 WARN  L188               SmtUtils]: Spent 827.00 ms on a formula simplification. DAG size of input: 241 DAG size of output: 131
[2020-11-24 20:36:11,483 WARN  L188               SmtUtils]: Spent 705.00 ms on a formula simplification. DAG size of input: 229 DAG size of output: 124
[2020-11-24 20:36:11,781 WARN  L188               SmtUtils]: Spent 212.00 ms on a formula simplification. DAG size of input: 208 DAG size of output: 100
[2020-11-24 20:36:12,070 WARN  L188               SmtUtils]: Spent 213.00 ms on a formula simplification. DAG size of input: 209 DAG size of output: 101
[2020-11-24 20:36:12,394 WARN  L188               SmtUtils]: Spent 238.00 ms on a formula simplification. DAG size of input: 237 DAG size of output: 91
[2020-11-24 20:36:12,760 WARN  L188               SmtUtils]: Spent 188.00 ms on a formula simplification. DAG size of input: 235 DAG size of output: 86
[2020-11-24 20:36:13,537 WARN  L188               SmtUtils]: Spent 109.00 ms on a formula simplification. DAG size of input: 114 DAG size of output: 83
[2020-11-24 20:36:13,759 WARN  L188               SmtUtils]: Spent 137.00 ms on a formula simplification. DAG size of input: 115 DAG size of output: 84
[2020-11-24 20:36:14,044 WARN  L188               SmtUtils]: Spent 186.00 ms on a formula simplification. DAG size of input: 183 DAG size of output: 82
[2020-11-24 20:36:14,696 INFO  L134       CoverageAnalysis]: Checked inductivity of 89 backedges. 2 proven. 85 refuted. 0 times theorem prover too weak. 2 trivial. 0 not checked.
[2020-11-24 20:36:14,697 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-24 20:36:14,697 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [49] total 49
[2020-11-24 20:36:14,697 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:36:14,697 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 50 interpolants.
[2020-11-24 20:36:14,697 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=133, Invalid=2317, Unknown=0, NotChecked=0, Total=2450
[2020-11-24 20:36:14,698 INFO  L87              Difference]: Start difference. First operand 1988 states and 2153 transitions. cyclomatic complexity: 170 Second operand 50 states.
[2020-11-24 20:36:21,994 WARN  L188               SmtUtils]: Spent 173.00 ms on a formula simplification. DAG size of input: 102 DAG size of output: 82
[2020-11-24 20:36:22,923 WARN  L188               SmtUtils]: Spent 509.00 ms on a formula simplification. DAG size of input: 185 DAG size of output: 149
[2020-11-24 20:36:23,552 WARN  L188               SmtUtils]: Spent 433.00 ms on a formula simplification. DAG size of input: 164 DAG size of output: 139
[2020-11-24 20:36:23,949 WARN  L188               SmtUtils]: Spent 241.00 ms on a formula simplification. DAG size of input: 142 DAG size of output: 127
[2020-11-24 20:36:24,320 WARN  L188               SmtUtils]: Spent 258.00 ms on a formula simplification. DAG size of input: 143 DAG size of output: 128
[2020-11-24 20:36:24,633 WARN  L188               SmtUtils]: Spent 211.00 ms on a formula simplification. DAG size of input: 133 DAG size of output: 130
[2020-11-24 20:36:24,868 WARN  L188               SmtUtils]: Spent 152.00 ms on a formula simplification. DAG size of input: 152 DAG size of output: 128
[2020-11-24 20:36:36,377 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:36:36,378 INFO  L93              Difference]: Finished difference Result 2265 states and 2525 transitions.
[2020-11-24 20:36:36,378 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 46 states. 
[2020-11-24 20:36:36,378 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2265 states and 2525 transitions.
[2020-11-24 20:36:36,382 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 20:36:36,386 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2265 states to 2265 states and 2525 transitions.
[2020-11-24 20:36:36,386 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 744
[2020-11-24 20:36:36,386 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 744
[2020-11-24 20:36:36,387 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2265 states and 2525 transitions.
[2020-11-24 20:36:36,388 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:36:36,388 INFO  L728         BuchiCegarLoop]: Abstraction has 2265 states and 2525 transitions.
[2020-11-24 20:36:36,390 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2265 states and 2525 transitions.
[2020-11-24 20:36:36,398 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2265 to 2213.
[2020-11-24 20:36:36,398 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2213 states.
[2020-11-24 20:36:36,400 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2213 states to 2213 states and 2461 transitions.
[2020-11-24 20:36:36,400 INFO  L751         BuchiCegarLoop]: Abstraction has 2213 states and 2461 transitions.
[2020-11-24 20:36:36,400 INFO  L631         BuchiCegarLoop]: Abstraction has 2213 states and 2461 transitions.
[2020-11-24 20:36:36,400 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-24 20:36:36,400 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2213 states and 2461 transitions.
[2020-11-24 20:36:36,403 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 20:36:36,403 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:36:36,403 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:36:36,404 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:36:36,404 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_Litecoin_SV0 := false;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4599]              assume null == 0;
[L4600]  CALL        call this := FreshRefGenerator__success();
[L2180]              havoc newRef;
[L2181]              assume Alloc[newRef] == false;
[L2182]              Alloc[newRef] := true;
[L2183]              assume newRef != null;
[L4600]  RET         call this := FreshRefGenerator__success();
[L4601]              assume now >= 0;
[L4602]              assume DType[this] == Litecoin_SV;
[L4603]              assume msgvalue_MSG == 0;
[L4604]              gas := gas - 53000;
[L4605]  CALL        call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L825]               havoc __exception;
[L826]               revert := false;
[L827]   COND FALSE  !(__exception)
[L852]   CALL        call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L2536]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2301]              assume msgsender_MSG != null;
[L2302]              Balance[this] := 0;
[L2316]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2317]  COND FALSE  !(revert)
[L2536]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2537]  COND FALSE  !(revert)
[L2540]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2386]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2368]              assume msgsender_MSG != null;
[L2369]              Balance[this] := 0;
[L2370]              owner_Owned[this] := null;
[L2371]              newOwner_Owned[this] := null;
[L2373]              owner_Owned[this] := msgsender_MSG;
[L2386]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2387]  COND FALSE  !(revert)
[L2540]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2541]  COND FALSE  !(revert)
[L2544]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2212]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2197]              assume msgsender_MSG != null;
[L2198]              Balance[this] := 0;
[L2212]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2213]  COND FALSE  !(revert)
[L2544]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2545]  COND FALSE  !(revert)
[L2548]  CALL        call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2489]              assume msgsender_MSG != null;
[L2490]              Balance[this] := 0;
[L2491]              businessName_Litecoin_SV[this] := 1031794244;
[L2492]              businessCountry_Litecoin_SV[this] := 1031794244;
[L2493]              symbol_Litecoin_SV[this] := 1031794244;
[L2494]              name_Litecoin_SV[this] := 1031794244;
[L2495]              decimals_Litecoin_SV[this] := 0;
[L2496]              _totalSupply_Litecoin_SV[this] := 0;
[L2497]              balances_Litecoin_SV[this] := zeroRefintArr();
[L2498]              sum_balances0[this] := 0;
[L2499]              allowed_Litecoin_SV[this] := zeroRefRefintArr();
[L2500]              sum_allowed1[this] := 0;
[L2502]              businessName_Litecoin_SV[this] := -1948412360;
[L2503]              businessCountry_Litecoin_SV[this] := 1439465232;
[L2504]              symbol_Litecoin_SV[this] := -803338840;
[L2505]              name_Litecoin_SV[this] := 1836794956;
[L2506]              decimals_Litecoin_SV[this] := 18;
[L2507]              _totalSupply_Litecoin_SV[this] := 25000000000000000000000000;
[L2508]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2509]              balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131] := _totalSupply_Litecoin_SV[this];
[L2510]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2511]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2548]  RET         call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2549]  COND FALSE  !(revert)
[L852]   RET         call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L853]               assume !revert && gas >= 0;
[L4605]  RET         call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume !revert && gas >= 0;
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND FALSE  !(choice == 14)
[L4510]  COND TRUE   choice == 13
[L4511]              gas := gas - 21000;
[L4512]  COND TRUE   gas >= 0
[L4513]              assume tokens_s470 >= 0 && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4514]              assume msgvalue_MSG == 0;
[L4515]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s470 && p1 != to_s470) && (p2 != from_s470 || p3 != msgsender_MSG)) && from_s470 != to_s470) && tokens_s470 <= balances_Litecoin_SV[this][from_s470]) && tokens_s470 <= allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) && balances_Litecoin_SV[this][to_s470] + tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s470 >= 0) && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s470] >= 0) && balances_Litecoin_SV[this][to_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][from_s470] >= 0) && balances_Litecoin_SV[this][from_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] >= 0) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Litecoin_SV0 := true;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]                 revert := revert_hold;
[L1123]              havoc __exception;
[L1124]              revert := false;
[L1125]  COND FALSE  !(__exception)
[L1150]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L2709]  COND TRUE   DType[this] == Litecoin_SV
[L2710]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2710]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2711]  COND FALSE  !(revert)
[L2717]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][from_s470];
[L2718]              balances_Litecoin_SV[this][from_s470] := __var_5;
[L2719]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][from_s470];
[L2720]  COND TRUE   DType[this] == Litecoin_SV
[L2721]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2721]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2722]  COND FALSE  !(revert)
[L2728]              sum_allowed1[from_s470] := sum_allowed1[from_s470] - allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2729]              allowed_Litecoin_SV[this][from_s470][msgsender_MSG] := __var_6;
[L2730]              sum_allowed1[from_s470] := sum_allowed1[from_s470] + allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2731]  COND TRUE   DType[this] == Litecoin_SV
[L2732]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2229]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2230]  COND FALSE  !(!(c_s23 >= a_s23))
[L2732]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2733]  COND FALSE  !(revert)
[L2739]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][to_s470];
[L2740]              balances_Litecoin_SV[this][to_s470] := __var_7;
[L2741]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][to_s470];
[L2742]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2743]              success_s470 := true;
[L1150]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L1151]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume ((((((((((((success_s470 == true && balances_Litecoin_SV[this][from_s470] == old(balances_Litecoin_SV[this][from_s470]) - tokens_s470) && balances_Litecoin_SV[this][to_s470] == old(balances_Litecoin_SV[this][to_s470]) + tokens_s470) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] == old(allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) - tokens_s470) && _totalSupply_Litecoin_SV[this] == old(_totalSupply_Litecoin_SV[this])) && balances_Litecoin_SV[this][p1] == old(balances_Litecoin_SV[this][p1])) && allowed_Litecoin_SV[this][p2][p3] == old(allowed_Litecoin_SV[this][p2][p3])) && businessName_Litecoin_SV[this] == old(businessName_Litecoin_SV[this])) && businessCountry_Litecoin_SV[this] == old(businessCountry_Litecoin_SV[this])) && symbol_Litecoin_SV[this] == old(symbol_Litecoin_SV[this])) && name_Litecoin_SV[this] == old(name_Litecoin_SV[this])) && decimals_Litecoin_SV[this] == old(decimals_Litecoin_SV[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]);
[L3]                 success_transferFrom_Litecoin_SV0 := true;
[L3]                 success_transferFrom_Litecoin_SV0 := false;
[L3]                 revert := revert_hold;
[L4515]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND FALSE  !(choice == 14)
[L4510]  COND TRUE   choice == 13
[L4511]              gas := gas - 21000;
[L4512]  COND TRUE   gas >= 0
[L4513]              assume tokens_s470 >= 0 && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4514]              assume msgvalue_MSG == 0;
[L4515]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s470 && p1 != to_s470) && (p2 != from_s470 || p3 != msgsender_MSG)) && from_s470 != to_s470) && tokens_s470 <= balances_Litecoin_SV[this][from_s470]) && tokens_s470 <= allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) && balances_Litecoin_SV[this][to_s470] + tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s470 >= 0) && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s470] >= 0) && balances_Litecoin_SV[this][to_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][from_s470] >= 0) && balances_Litecoin_SV[this][from_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] >= 0) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Litecoin_SV0 := true;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]                 revert := revert_hold;
[L1123]              havoc __exception;
[L1124]              revert := false;
[L1125]  COND FALSE  !(__exception)
[L1150]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L2709]  COND TRUE   DType[this] == Litecoin_SV
[L2710]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2710]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2711]  COND FALSE  !(revert)
[L2717]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][from_s470];
[L2718]              balances_Litecoin_SV[this][from_s470] := __var_5;
[L2719]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][from_s470];
[L2720]  COND TRUE   DType[this] == Litecoin_SV
[L2721]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2721]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2722]  COND FALSE  !(revert)
[L2728]              sum_allowed1[from_s470] := sum_allowed1[from_s470] - allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2729]              allowed_Litecoin_SV[this][from_s470][msgsender_MSG] := __var_6;
[L2730]              sum_allowed1[from_s470] := sum_allowed1[from_s470] + allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2731]  COND TRUE   DType[this] == Litecoin_SV
[L2732]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2229]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2230]  COND FALSE  !(!(c_s23 >= a_s23))
[L2732]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2733]  COND FALSE  !(revert)
[L2739]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][to_s470];
[L2740]              balances_Litecoin_SV[this][to_s470] := __var_7;
[L2741]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][to_s470];
[L2742]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2743]              success_s470 := true;
[L1150]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L1151]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((((success_s470 == true && balances_Litecoin_SV[this][from_s470] == old(balances_Litecoin_SV[this][from_s470]) - tokens_s470) && balances_Litecoin_SV[this][to_s470] == old(balances_Litecoin_SV[this][to_s470]) + tokens_s470) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] == old(allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) - tokens_s470) && _totalSupply_Litecoin_SV[this] == old(_totalSupply_Litecoin_SV[this])) && balances_Litecoin_SV[this][p1] == old(balances_Litecoin_SV[this][p1])) && allowed_Litecoin_SV[this][p2][p3] == old(allowed_Litecoin_SV[this][p2][p3])) && businessName_Litecoin_SV[this] == old(businessName_Litecoin_SV[this])) && businessCountry_Litecoin_SV[this] == old(businessCountry_Litecoin_SV[this])) && symbol_Litecoin_SV[this] == old(symbol_Litecoin_SV[this])) && name_Litecoin_SV[this] == old(name_Litecoin_SV[this])) && decimals_Litecoin_SV[this] == old(decimals_Litecoin_SV[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4515]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

Loop:
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND FALSE  !(choice == 14)
[L4510]  COND TRUE   choice == 13
[L4511]              gas := gas - 21000;
[L4512]  COND TRUE   gas >= 0
[L4513]              assume tokens_s470 >= 0 && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4514]              assume msgvalue_MSG == 0;
[L4515]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s470 && p1 != to_s470) && (p2 != from_s470 || p3 != msgsender_MSG)) && from_s470 != to_s470) && tokens_s470 <= balances_Litecoin_SV[this][from_s470]) && tokens_s470 <= allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) && balances_Litecoin_SV[this][to_s470] + tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s470 >= 0) && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s470] >= 0) && balances_Litecoin_SV[this][to_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][from_s470] >= 0) && balances_Litecoin_SV[this][from_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] >= 0) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Litecoin_SV0 := true;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]                 revert := revert_hold;
[L1123]              havoc __exception;
[L1124]              revert := false;
[L1125]  COND FALSE  !(__exception)
[L1150]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L2709]  COND TRUE   DType[this] == Litecoin_SV
[L2710]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2710]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2711]  COND FALSE  !(revert)
[L2717]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][from_s470];
[L2718]              balances_Litecoin_SV[this][from_s470] := __var_5;
[L2719]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][from_s470];
[L2720]  COND TRUE   DType[this] == Litecoin_SV
[L2721]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2721]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2722]  COND FALSE  !(revert)
[L2728]              sum_allowed1[from_s470] := sum_allowed1[from_s470] - allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2729]              allowed_Litecoin_SV[this][from_s470][msgsender_MSG] := __var_6;
[L2730]              sum_allowed1[from_s470] := sum_allowed1[from_s470] + allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2731]  COND TRUE   DType[this] == Litecoin_SV
[L2732]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2229]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2230]  COND FALSE  !(!(c_s23 >= a_s23))
[L2732]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2733]  COND FALSE  !(revert)
[L2739]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][to_s470];
[L2740]              balances_Litecoin_SV[this][to_s470] := __var_7;
[L2741]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][to_s470];
[L2742]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2743]              success_s470 := true;
[L1150]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L1151]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((((success_s470 == true && balances_Litecoin_SV[this][from_s470] == old(balances_Litecoin_SV[this][from_s470]) - tokens_s470) && balances_Litecoin_SV[this][to_s470] == old(balances_Litecoin_SV[this][to_s470]) + tokens_s470) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] == old(allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) - tokens_s470) && _totalSupply_Litecoin_SV[this] == old(_totalSupply_Litecoin_SV[this])) && balances_Litecoin_SV[this][p1] == old(balances_Litecoin_SV[this][p1])) && allowed_Litecoin_SV[this][p2][p3] == old(allowed_Litecoin_SV[this][p2][p3])) && businessName_Litecoin_SV[this] == old(businessName_Litecoin_SV[this])) && businessCountry_Litecoin_SV[this] == old(businessCountry_Litecoin_SV[this])) && symbol_Litecoin_SV[this] == old(symbol_Litecoin_SV[this])) && name_Litecoin_SV[this] == old(name_Litecoin_SV[this])) && decimals_Litecoin_SV[this] == old(decimals_Litecoin_SV[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4515]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

[2020-11-24 20:36:36,408 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:36:36,408 INFO  L82        PathProgramCache]: Analyzing trace with hash -1662145404, now seen corresponding path program 1 times
[2020-11-24 20:36:36,408 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:36:36,459 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:36:37,167 WARN  L188               SmtUtils]: Spent 258.00 ms on a formula simplification. DAG size of input: 265 DAG size of output: 89
[2020-11-24 20:36:37,319 WARN  L188               SmtUtils]: Spent 107.00 ms on a formula simplification. DAG size of input: 277 DAG size of output: 63
[2020-11-24 20:36:37,981 WARN  L188               SmtUtils]: Spent 175.00 ms on a formula simplification. DAG size of input: 119 DAG size of output: 86
[2020-11-24 20:36:38,133 WARN  L188               SmtUtils]: Spent 109.00 ms on a formula simplification. DAG size of input: 125 DAG size of output: 76
[2020-11-24 20:36:38,314 WARN  L188               SmtUtils]: Spent 115.00 ms on a formula simplification. DAG size of input: 154 DAG size of output: 115
[2020-11-24 20:36:39,007 WARN  L188               SmtUtils]: Spent 393.00 ms on a formula simplification. DAG size of input: 271 DAG size of output: 120
[2020-11-24 20:36:39,436 WARN  L188               SmtUtils]: Spent 201.00 ms on a formula simplification. DAG size of input: 245 DAG size of output: 82
[2020-11-24 20:36:40,084 INFO  L134       CoverageAnalysis]: Checked inductivity of 90 backedges. 1 proven. 4 refuted. 0 times theorem prover too weak. 85 trivial. 0 not checked.
[2020-11-24 20:36:40,084 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-24 20:36:40,084 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [35] total 35
[2020-11-24 20:36:40,085 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:36:40,085 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 36 interpolants.
[2020-11-24 20:36:40,085 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=134, Invalid=1126, Unknown=0, NotChecked=0, Total=1260
[2020-11-24 20:36:40,085 INFO  L87              Difference]: Start difference. First operand 2213 states and 2461 transitions. cyclomatic complexity: 256 Second operand 36 states.
[2020-11-24 20:36:45,132 WARN  L188               SmtUtils]: Spent 496.00 ms on a formula simplification. DAG size of input: 166 DAG size of output: 158
[2020-11-24 20:36:45,896 WARN  L188               SmtUtils]: Spent 686.00 ms on a formula simplification. DAG size of input: 181 DAG size of output: 152
[2020-11-24 20:36:47,027 WARN  L188               SmtUtils]: Spent 352.00 ms on a formula simplification. DAG size of input: 149 DAG size of output: 145
[2020-11-24 20:36:51,633 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:36:51,633 INFO  L93              Difference]: Finished difference Result 2453 states and 2795 transitions.
[2020-11-24 20:36:51,633 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 31 states. 
[2020-11-24 20:36:51,633 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2453 states and 2795 transitions.
[2020-11-24 20:36:51,638 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-24 20:36:51,643 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2453 states to 2453 states and 2795 transitions.
[2020-11-24 20:36:51,643 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 842
[2020-11-24 20:36:51,643 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 842
[2020-11-24 20:36:51,643 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2453 states and 2795 transitions.
[2020-11-24 20:36:51,645 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:36:51,645 INFO  L728         BuchiCegarLoop]: Abstraction has 2453 states and 2795 transitions.
[2020-11-24 20:36:51,646 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2453 states and 2795 transitions.
[2020-11-24 20:36:51,656 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2453 to 2432.
[2020-11-24 20:36:51,656 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2432 states.
[2020-11-24 20:36:51,659 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2432 states to 2432 states and 2770 transitions.
[2020-11-24 20:36:51,659 INFO  L751         BuchiCegarLoop]: Abstraction has 2432 states and 2770 transitions.
[2020-11-24 20:36:51,659 INFO  L631         BuchiCegarLoop]: Abstraction has 2432 states and 2770 transitions.
[2020-11-24 20:36:51,659 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-11-24 20:36:51,659 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2432 states and 2770 transitions.
[2020-11-24 20:36:51,661 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-24 20:36:51,661 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:36:51,661 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:36:51,662 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:36:51,662 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_Litecoin_SV0 := false;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4599]              assume null == 0;
[L4600]  CALL        call this := FreshRefGenerator__success();
[L2180]              havoc newRef;
[L2181]              assume Alloc[newRef] == false;
[L2182]              Alloc[newRef] := true;
[L2183]              assume newRef != null;
[L4600]  RET         call this := FreshRefGenerator__success();
[L4601]              assume now >= 0;
[L4602]              assume DType[this] == Litecoin_SV;
[L4603]              assume msgvalue_MSG == 0;
[L4604]              gas := gas - 53000;
[L4605]  CALL        call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L825]               havoc __exception;
[L826]               revert := false;
[L827]   COND FALSE  !(__exception)
[L852]   CALL        call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L2536]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2301]              assume msgsender_MSG != null;
[L2302]              Balance[this] := 0;
[L2316]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2317]  COND FALSE  !(revert)
[L2536]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2537]  COND FALSE  !(revert)
[L2540]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2386]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2368]              assume msgsender_MSG != null;
[L2369]              Balance[this] := 0;
[L2370]              owner_Owned[this] := null;
[L2371]              newOwner_Owned[this] := null;
[L2373]              owner_Owned[this] := msgsender_MSG;
[L2386]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2387]  COND FALSE  !(revert)
[L2540]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2541]  COND FALSE  !(revert)
[L2544]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2212]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2197]              assume msgsender_MSG != null;
[L2198]              Balance[this] := 0;
[L2212]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2213]  COND FALSE  !(revert)
[L2544]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2545]  COND FALSE  !(revert)
[L2548]  CALL        call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2489]              assume msgsender_MSG != null;
[L2490]              Balance[this] := 0;
[L2491]              businessName_Litecoin_SV[this] := 1031794244;
[L2492]              businessCountry_Litecoin_SV[this] := 1031794244;
[L2493]              symbol_Litecoin_SV[this] := 1031794244;
[L2494]              name_Litecoin_SV[this] := 1031794244;
[L2495]              decimals_Litecoin_SV[this] := 0;
[L2496]              _totalSupply_Litecoin_SV[this] := 0;
[L2497]              balances_Litecoin_SV[this] := zeroRefintArr();
[L2498]              sum_balances0[this] := 0;
[L2499]              allowed_Litecoin_SV[this] := zeroRefRefintArr();
[L2500]              sum_allowed1[this] := 0;
[L2502]              businessName_Litecoin_SV[this] := -1948412360;
[L2503]              businessCountry_Litecoin_SV[this] := 1439465232;
[L2504]              symbol_Litecoin_SV[this] := -803338840;
[L2505]              name_Litecoin_SV[this] := 1836794956;
[L2506]              decimals_Litecoin_SV[this] := 18;
[L2507]              _totalSupply_Litecoin_SV[this] := 25000000000000000000000000;
[L2508]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2509]              balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131] := _totalSupply_Litecoin_SV[this];
[L2510]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2511]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2548]  RET         call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2549]  COND FALSE  !(revert)
[L852]   RET         call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L853]               assume !revert && gas >= 0;
[L4605]  RET         call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume !revert && gas >= 0;
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND FALSE  !(choice == 14)
[L4510]  COND TRUE   choice == 13
[L4511]              gas := gas - 21000;
[L4512]  COND TRUE   gas >= 0
[L4513]              assume tokens_s470 >= 0 && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4514]              assume msgvalue_MSG == 0;
[L4515]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((p1 != from_s470 && p1 != to_s470) && (p2 != from_s470 || p3 != msgsender_MSG)) && from_s470 != to_s470) && tokens_s470 <= balances_Litecoin_SV[this][from_s470]) && tokens_s470 <= allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) && balances_Litecoin_SV[this][to_s470] + tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s470 >= 0) && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s470] >= 0) && balances_Litecoin_SV[this][to_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][from_s470] >= 0) && balances_Litecoin_SV[this][from_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] >= 0) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3]                 revert := revert_hold;
[L1123]              havoc __exception;
[L1124]              revert := false;
[L1125]  COND FALSE  !(__exception)
[L1150]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L2709]  COND TRUE   DType[this] == Litecoin_SV
[L2710]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2710]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2711]  COND FALSE  !(revert)
[L2717]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][from_s470];
[L2718]              balances_Litecoin_SV[this][from_s470] := __var_5;
[L2719]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][from_s470];
[L2720]  COND TRUE   DType[this] == Litecoin_SV
[L2721]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2721]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2722]  COND FALSE  !(revert)
[L2728]              sum_allowed1[from_s470] := sum_allowed1[from_s470] - allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2729]              allowed_Litecoin_SV[this][from_s470][msgsender_MSG] := __var_6;
[L2730]              sum_allowed1[from_s470] := sum_allowed1[from_s470] + allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2731]  COND TRUE   DType[this] == Litecoin_SV
[L2732]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2229]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2230]  COND FALSE  !(!(c_s23 >= a_s23))
[L2732]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2733]  COND FALSE  !(revert)
[L2739]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][to_s470];
[L2740]              balances_Litecoin_SV[this][to_s470] := __var_7;
[L2741]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][to_s470];
[L2742]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2743]              success_s470 := true;
[L1150]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L1151]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume ((((((((((((success_s470 == true && balances_Litecoin_SV[this][from_s470] == old(balances_Litecoin_SV[this][from_s470]) - tokens_s470) && balances_Litecoin_SV[this][to_s470] == old(balances_Litecoin_SV[this][to_s470]) + tokens_s470) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] == old(allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) - tokens_s470) && _totalSupply_Litecoin_SV[this] == old(_totalSupply_Litecoin_SV[this])) && balances_Litecoin_SV[this][p1] == old(balances_Litecoin_SV[this][p1])) && allowed_Litecoin_SV[this][p2][p3] == old(allowed_Litecoin_SV[this][p2][p3])) && businessName_Litecoin_SV[this] == old(businessName_Litecoin_SV[this])) && businessCountry_Litecoin_SV[this] == old(businessCountry_Litecoin_SV[this])) && symbol_Litecoin_SV[this] == old(symbol_Litecoin_SV[this])) && name_Litecoin_SV[this] == old(name_Litecoin_SV[this])) && decimals_Litecoin_SV[this] == old(decimals_Litecoin_SV[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]);
[L3]                 success_transferFrom_Litecoin_SV0 := true;
[L3]                 success_transferFrom_Litecoin_SV0 := false;
[L3]                 revert := revert_hold;
[L4515]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND FALSE  !(choice == 14)
[L4510]  COND TRUE   choice == 13
[L4511]              gas := gas - 21000;
[L4512]  COND TRUE   gas >= 0
[L4513]              assume tokens_s470 >= 0 && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4514]              assume msgvalue_MSG == 0;
[L4515]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s470 && p1 != to_s470) && (p2 != from_s470 || p3 != msgsender_MSG)) && from_s470 != to_s470) && tokens_s470 <= balances_Litecoin_SV[this][from_s470]) && tokens_s470 <= allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) && balances_Litecoin_SV[this][to_s470] + tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s470 >= 0) && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s470] >= 0) && balances_Litecoin_SV[this][to_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][from_s470] >= 0) && balances_Litecoin_SV[this][from_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] >= 0) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Litecoin_SV0 := true;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]                 revert := revert_hold;
[L1123]              havoc __exception;
[L1124]              revert := false;
[L1125]  COND FALSE  !(__exception)
[L1150]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L2709]  COND TRUE   DType[this] == Litecoin_SV
[L2710]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2710]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2711]  COND FALSE  !(revert)
[L2717]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][from_s470];
[L2718]              balances_Litecoin_SV[this][from_s470] := __var_5;
[L2719]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][from_s470];
[L2720]  COND TRUE   DType[this] == Litecoin_SV
[L2721]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2721]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2722]  COND FALSE  !(revert)
[L2728]              sum_allowed1[from_s470] := sum_allowed1[from_s470] - allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2729]              allowed_Litecoin_SV[this][from_s470][msgsender_MSG] := __var_6;
[L2730]              sum_allowed1[from_s470] := sum_allowed1[from_s470] + allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2731]  COND TRUE   DType[this] == Litecoin_SV
[L2732]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2229]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2230]  COND FALSE  !(!(c_s23 >= a_s23))
[L2732]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2733]  COND FALSE  !(revert)
[L2739]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][to_s470];
[L2740]              balances_Litecoin_SV[this][to_s470] := __var_7;
[L2741]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][to_s470];
[L2742]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2743]              success_s470 := true;
[L1150]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L1151]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((((success_s470 == true && balances_Litecoin_SV[this][from_s470] == old(balances_Litecoin_SV[this][from_s470]) - tokens_s470) && balances_Litecoin_SV[this][to_s470] == old(balances_Litecoin_SV[this][to_s470]) + tokens_s470) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] == old(allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) - tokens_s470) && _totalSupply_Litecoin_SV[this] == old(_totalSupply_Litecoin_SV[this])) && balances_Litecoin_SV[this][p1] == old(balances_Litecoin_SV[this][p1])) && allowed_Litecoin_SV[this][p2][p3] == old(allowed_Litecoin_SV[this][p2][p3])) && businessName_Litecoin_SV[this] == old(businessName_Litecoin_SV[this])) && businessCountry_Litecoin_SV[this] == old(businessCountry_Litecoin_SV[this])) && symbol_Litecoin_SV[this] == old(symbol_Litecoin_SV[this])) && name_Litecoin_SV[this] == old(name_Litecoin_SV[this])) && decimals_Litecoin_SV[this] == old(decimals_Litecoin_SV[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4515]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

Loop:
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND FALSE  !(choice == 14)
[L4510]  COND TRUE   choice == 13
[L4511]              gas := gas - 21000;
[L4512]  COND TRUE   gas >= 0
[L4513]              assume tokens_s470 >= 0 && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4514]              assume msgvalue_MSG == 0;
[L4515]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s470 && p1 != to_s470) && (p2 != from_s470 || p3 != msgsender_MSG)) && from_s470 != to_s470) && tokens_s470 <= balances_Litecoin_SV[this][from_s470]) && tokens_s470 <= allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) && balances_Litecoin_SV[this][to_s470] + tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s470 >= 0) && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s470] >= 0) && balances_Litecoin_SV[this][to_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][from_s470] >= 0) && balances_Litecoin_SV[this][from_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] >= 0) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Litecoin_SV0 := true;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]                 revert := revert_hold;
[L1123]              havoc __exception;
[L1124]              revert := false;
[L1125]  COND FALSE  !(__exception)
[L1150]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L2709]  COND TRUE   DType[this] == Litecoin_SV
[L2710]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2710]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2711]  COND FALSE  !(revert)
[L2717]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][from_s470];
[L2718]              balances_Litecoin_SV[this][from_s470] := __var_5;
[L2719]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][from_s470];
[L2720]  COND TRUE   DType[this] == Litecoin_SV
[L2721]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2721]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2722]  COND FALSE  !(revert)
[L2728]              sum_allowed1[from_s470] := sum_allowed1[from_s470] - allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2729]              allowed_Litecoin_SV[this][from_s470][msgsender_MSG] := __var_6;
[L2730]              sum_allowed1[from_s470] := sum_allowed1[from_s470] + allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2731]  COND TRUE   DType[this] == Litecoin_SV
[L2732]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2229]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2230]  COND FALSE  !(!(c_s23 >= a_s23))
[L2732]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2733]  COND FALSE  !(revert)
[L2739]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][to_s470];
[L2740]              balances_Litecoin_SV[this][to_s470] := __var_7;
[L2741]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][to_s470];
[L2742]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2743]              success_s470 := true;
[L1150]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L1151]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((((success_s470 == true && balances_Litecoin_SV[this][from_s470] == old(balances_Litecoin_SV[this][from_s470]) - tokens_s470) && balances_Litecoin_SV[this][to_s470] == old(balances_Litecoin_SV[this][to_s470]) + tokens_s470) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] == old(allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) - tokens_s470) && _totalSupply_Litecoin_SV[this] == old(_totalSupply_Litecoin_SV[this])) && balances_Litecoin_SV[this][p1] == old(balances_Litecoin_SV[this][p1])) && allowed_Litecoin_SV[this][p2][p3] == old(allowed_Litecoin_SV[this][p2][p3])) && businessName_Litecoin_SV[this] == old(businessName_Litecoin_SV[this])) && businessCountry_Litecoin_SV[this] == old(businessCountry_Litecoin_SV[this])) && symbol_Litecoin_SV[this] == old(symbol_Litecoin_SV[this])) && name_Litecoin_SV[this] == old(name_Litecoin_SV[this])) && decimals_Litecoin_SV[this] == old(decimals_Litecoin_SV[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4515]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

[2020-11-24 20:36:51,666 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:36:51,666 INFO  L82        PathProgramCache]: Analyzing trace with hash 704765762, now seen corresponding path program 1 times
[2020-11-24 20:36:51,666 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:36:51,725 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:36:52,898 INFO  L134       CoverageAnalysis]: Checked inductivity of 89 backedges. 4 proven. 5 refuted. 0 times theorem prover too weak. 80 trivial. 0 not checked.
[2020-11-24 20:36:52,898 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-24 20:36:52,898 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [38] total 38
[2020-11-24 20:36:52,899 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:36:52,899 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 39 interpolants.
[2020-11-24 20:36:52,899 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=107, Invalid=1375, Unknown=0, NotChecked=0, Total=1482
[2020-11-24 20:36:52,899 INFO  L87              Difference]: Start difference. First operand 2432 states and 2770 transitions. cyclomatic complexity: 349 Second operand 39 states.
[2020-11-24 20:36:56,860 WARN  L188               SmtUtils]: Spent 251.00 ms on a formula simplification. DAG size of input: 118 DAG size of output: 111
[2020-11-24 20:36:57,032 WARN  L188               SmtUtils]: Spent 120.00 ms on a formula simplification. DAG size of input: 121 DAG size of output: 109
[2020-11-24 20:37:02,004 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:37:02,004 INFO  L93              Difference]: Finished difference Result 2689 states and 3125 transitions.
[2020-11-24 20:37:02,005 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 38 states. 
[2020-11-24 20:37:02,005 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2689 states and 3125 transitions.
[2020-11-24 20:37:02,011 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-24 20:37:02,017 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2689 states to 2689 states and 3125 transitions.
[2020-11-24 20:37:02,017 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 955
[2020-11-24 20:37:02,017 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 955
[2020-11-24 20:37:02,017 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2689 states and 3125 transitions.
[2020-11-24 20:37:02,019 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:37:02,019 INFO  L728         BuchiCegarLoop]: Abstraction has 2689 states and 3125 transitions.
[2020-11-24 20:37:02,020 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2689 states and 3125 transitions.
[2020-11-24 20:37:02,032 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2689 to 2215.
[2020-11-24 20:37:02,033 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2215 states.
[2020-11-24 20:37:02,036 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2215 states to 2215 states and 2468 transitions.
[2020-11-24 20:37:02,036 INFO  L751         BuchiCegarLoop]: Abstraction has 2215 states and 2468 transitions.
[2020-11-24 20:37:02,036 INFO  L631         BuchiCegarLoop]: Abstraction has 2215 states and 2468 transitions.
[2020-11-24 20:37:02,036 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-11-24 20:37:02,036 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2215 states and 2468 transitions.
[2020-11-24 20:37:02,040 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 20:37:02,040 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:37:02,040 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:37:02,041 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:37:02,041 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_Litecoin_SV0 := false;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4599]              assume null == 0;
[L4600]  CALL        call this := FreshRefGenerator__success();
[L2180]              havoc newRef;
[L2181]              assume Alloc[newRef] == false;
[L2182]              Alloc[newRef] := true;
[L2183]              assume newRef != null;
[L4600]  RET         call this := FreshRefGenerator__success();
[L4601]              assume now >= 0;
[L4602]              assume DType[this] == Litecoin_SV;
[L4603]              assume msgvalue_MSG == 0;
[L4604]              gas := gas - 53000;
[L4605]  CALL        call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L825]               havoc __exception;
[L826]               revert := false;
[L827]   COND FALSE  !(__exception)
[L852]   CALL        call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L2536]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2301]              assume msgsender_MSG != null;
[L2302]              Balance[this] := 0;
[L2316]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2317]  COND FALSE  !(revert)
[L2536]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2537]  COND FALSE  !(revert)
[L2540]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2386]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2368]              assume msgsender_MSG != null;
[L2369]              Balance[this] := 0;
[L2370]              owner_Owned[this] := null;
[L2371]              newOwner_Owned[this] := null;
[L2373]              owner_Owned[this] := msgsender_MSG;
[L2386]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2387]  COND FALSE  !(revert)
[L2540]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2541]  COND FALSE  !(revert)
[L2544]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2212]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2197]              assume msgsender_MSG != null;
[L2198]              Balance[this] := 0;
[L2212]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2213]  COND FALSE  !(revert)
[L2544]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2545]  COND FALSE  !(revert)
[L2548]  CALL        call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2489]              assume msgsender_MSG != null;
[L2490]              Balance[this] := 0;
[L2491]              businessName_Litecoin_SV[this] := 1031794244;
[L2492]              businessCountry_Litecoin_SV[this] := 1031794244;
[L2493]              symbol_Litecoin_SV[this] := 1031794244;
[L2494]              name_Litecoin_SV[this] := 1031794244;
[L2495]              decimals_Litecoin_SV[this] := 0;
[L2496]              _totalSupply_Litecoin_SV[this] := 0;
[L2497]              balances_Litecoin_SV[this] := zeroRefintArr();
[L2498]              sum_balances0[this] := 0;
[L2499]              allowed_Litecoin_SV[this] := zeroRefRefintArr();
[L2500]              sum_allowed1[this] := 0;
[L2502]              businessName_Litecoin_SV[this] := -1948412360;
[L2503]              businessCountry_Litecoin_SV[this] := 1439465232;
[L2504]              symbol_Litecoin_SV[this] := -803338840;
[L2505]              name_Litecoin_SV[this] := 1836794956;
[L2506]              decimals_Litecoin_SV[this] := 18;
[L2507]              _totalSupply_Litecoin_SV[this] := 25000000000000000000000000;
[L2508]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2509]              balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131] := _totalSupply_Litecoin_SV[this];
[L2510]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2511]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2548]  RET         call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2549]  COND FALSE  !(revert)
[L852]   RET         call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L853]               assume !revert && gas >= 0;
[L4605]  RET         call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume !revert && gas >= 0;
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND TRUE   choice == 14
[L4504]              gas := gas - 21000;
[L4505]  COND TRUE   gas >= 0
[L4506]              assume tokens_s411 >= 0 && tokens_s411 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4507]              assume msgvalue_MSG == 0;
[L4508]  CALL        call success_s411 := approve~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, spender_s411, tokens_s411);
[L1061]              havoc __exception;
[L1062]              revert := false;
[L1063]  COND FALSE  !(__exception)
[L1088]  CALL        call success_s411 := approve~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, spender_s411, tokens_s411);
[L2654]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_Litecoin_SV[this][msgsender_MSG][spender_s411];
[L2655]              allowed_Litecoin_SV[this][msgsender_MSG][spender_s411] := tokens_s411;
[L2656]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_Litecoin_SV[this][msgsender_MSG][spender_s411];
[L2657]              assert { :EventEmitted "Approval_Litecoin_SV" } true;
[L2658]              success_s411 := true;
[L1088]  RET         call success_s411 := approve~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, spender_s411, tokens_s411);
[L1089]              assume !revert && gas >= 0;
[L4508]  RET         call success_s411 := approve~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, spender_s411, tokens_s411);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND TRUE   choice == 14
[L4504]              gas := gas - 21000;
[L4505]  COND TRUE   gas >= 0
[L4506]              assume tokens_s411 >= 0 && tokens_s411 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4507]              assume msgvalue_MSG == 0;
[L4508]  CALL        call success_s411 := approve~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, spender_s411, tokens_s411);
[L1061]              havoc __exception;
[L1062]              revert := false;
[L1063]  COND FALSE  !(__exception)
[L1088]  CALL        call success_s411 := approve~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, spender_s411, tokens_s411);
[L2654]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_Litecoin_SV[this][msgsender_MSG][spender_s411];
[L2655]              allowed_Litecoin_SV[this][msgsender_MSG][spender_s411] := tokens_s411;
[L2656]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_Litecoin_SV[this][msgsender_MSG][spender_s411];
[L2657]              assert { :EventEmitted "Approval_Litecoin_SV" } true;
[L2658]              success_s411 := true;
[L1088]  RET         call success_s411 := approve~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, spender_s411, tokens_s411);
[L1089]              assume !revert && gas >= 0;
[L4508]  RET         call success_s411 := approve~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, spender_s411, tokens_s411);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND FALSE  !(choice == 14)
[L4510]  COND TRUE   choice == 13
[L4511]              gas := gas - 21000;
[L4512]  COND TRUE   gas >= 0
[L4513]              assume tokens_s470 >= 0 && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4514]              assume msgvalue_MSG == 0;
[L4515]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s470 && p1 != to_s470) && (p2 != from_s470 || p3 != msgsender_MSG)) && from_s470 != to_s470) && tokens_s470 <= balances_Litecoin_SV[this][from_s470]) && tokens_s470 <= allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) && balances_Litecoin_SV[this][to_s470] + tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s470 >= 0) && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s470] >= 0) && balances_Litecoin_SV[this][to_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][from_s470] >= 0) && balances_Litecoin_SV[this][from_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] >= 0) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Litecoin_SV0 := true;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]                 revert := revert_hold;
[L1123]              havoc __exception;
[L1124]              revert := false;
[L1125]  COND FALSE  !(__exception)
[L1150]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L2709]  COND TRUE   DType[this] == Litecoin_SV
[L2710]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2710]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2711]  COND FALSE  !(revert)
[L2717]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][from_s470];
[L2718]              balances_Litecoin_SV[this][from_s470] := __var_5;
[L2719]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][from_s470];
[L2720]  COND TRUE   DType[this] == Litecoin_SV
[L2721]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2721]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2722]  COND FALSE  !(revert)
[L2728]              sum_allowed1[from_s470] := sum_allowed1[from_s470] - allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2729]              allowed_Litecoin_SV[this][from_s470][msgsender_MSG] := __var_6;
[L2730]              sum_allowed1[from_s470] := sum_allowed1[from_s470] + allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2731]  COND TRUE   DType[this] == Litecoin_SV
[L2732]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2229]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2230]  COND FALSE  !(!(c_s23 >= a_s23))
[L2732]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2733]  COND FALSE  !(revert)
[L2739]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][to_s470];
[L2740]              balances_Litecoin_SV[this][to_s470] := __var_7;
[L2741]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][to_s470];
[L2742]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2743]              success_s470 := true;
[L1150]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L1151]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((((success_s470 == true && balances_Litecoin_SV[this][from_s470] == old(balances_Litecoin_SV[this][from_s470]) - tokens_s470) && balances_Litecoin_SV[this][to_s470] == old(balances_Litecoin_SV[this][to_s470]) + tokens_s470) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] == old(allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) - tokens_s470) && _totalSupply_Litecoin_SV[this] == old(_totalSupply_Litecoin_SV[this])) && balances_Litecoin_SV[this][p1] == old(balances_Litecoin_SV[this][p1])) && allowed_Litecoin_SV[this][p2][p3] == old(allowed_Litecoin_SV[this][p2][p3])) && businessName_Litecoin_SV[this] == old(businessName_Litecoin_SV[this])) && businessCountry_Litecoin_SV[this] == old(businessCountry_Litecoin_SV[this])) && symbol_Litecoin_SV[this] == old(symbol_Litecoin_SV[this])) && name_Litecoin_SV[this] == old(name_Litecoin_SV[this])) && decimals_Litecoin_SV[this] == old(decimals_Litecoin_SV[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4515]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

Loop:
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND TRUE   choice == 14
[L4504]              gas := gas - 21000;
[L4505]  COND TRUE   gas >= 0
[L4506]              assume tokens_s411 >= 0 && tokens_s411 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4507]              assume msgvalue_MSG == 0;
[L4508]  CALL        call success_s411 := approve~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, spender_s411, tokens_s411);
[L1061]              havoc __exception;
[L1062]              revert := false;
[L1063]  COND FALSE  !(__exception)
[L1088]  CALL        call success_s411 := approve~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, spender_s411, tokens_s411);
[L2654]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_Litecoin_SV[this][msgsender_MSG][spender_s411];
[L2655]              allowed_Litecoin_SV[this][msgsender_MSG][spender_s411] := tokens_s411;
[L2656]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_Litecoin_SV[this][msgsender_MSG][spender_s411];
[L2657]              assert { :EventEmitted "Approval_Litecoin_SV" } true;
[L2658]              success_s411 := true;
[L1088]  RET         call success_s411 := approve~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, spender_s411, tokens_s411);
[L1089]              assume !revert && gas >= 0;
[L4508]  RET         call success_s411 := approve~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, spender_s411, tokens_s411);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

[2020-11-24 20:37:02,044 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:37:02,045 INFO  L82        PathProgramCache]: Analyzing trace with hash 1431326871, now seen corresponding path program 2 times
[2020-11-24 20:37:02,045 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:37:02,075 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:37:02,634 INFO  L134       CoverageAnalysis]: Checked inductivity of 243 backedges. 2 proven. 0 refuted. 0 times theorem prover too weak. 241 trivial. 0 not checked.
[2020-11-24 20:37:02,635 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:37:02,635 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [31] imperfect sequences [] total 31
[2020-11-24 20:37:02,635 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:37:02,635 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 32 interpolants.
[2020-11-24 20:37:02,635 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=76, Invalid=916, Unknown=0, NotChecked=0, Total=992
[2020-11-24 20:37:02,636 INFO  L87              Difference]: Start difference. First operand 2215 states and 2468 transitions. cyclomatic complexity: 262 Second operand 32 states.
[2020-11-24 20:37:09,543 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:37:09,543 INFO  L93              Difference]: Finished difference Result 2230 states and 2490 transitions.
[2020-11-24 20:37:09,543 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 31 states. 
[2020-11-24 20:37:09,544 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2230 states and 2490 transitions.
[2020-11-24 20:37:09,547 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 20:37:09,552 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2230 states to 2230 states and 2490 transitions.
[2020-11-24 20:37:09,552 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 736
[2020-11-24 20:37:09,552 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 736
[2020-11-24 20:37:09,552 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2230 states and 2490 transitions.
[2020-11-24 20:37:09,554 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:37:09,554 INFO  L728         BuchiCegarLoop]: Abstraction has 2230 states and 2490 transitions.
[2020-11-24 20:37:09,555 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2230 states and 2490 transitions.
[2020-11-24 20:37:09,563 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2230 to 2215.
[2020-11-24 20:37:09,563 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2215 states.
[2020-11-24 20:37:09,565 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2215 states to 2215 states and 2468 transitions.
[2020-11-24 20:37:09,565 INFO  L751         BuchiCegarLoop]: Abstraction has 2215 states and 2468 transitions.
[2020-11-24 20:37:09,566 INFO  L631         BuchiCegarLoop]: Abstraction has 2215 states and 2468 transitions.
[2020-11-24 20:37:09,566 INFO  L445         BuchiCegarLoop]: ======== Iteration 18============
[2020-11-24 20:37:09,566 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2215 states and 2468 transitions.
[2020-11-24 20:37:09,568 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 20:37:09,568 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:37:09,568 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:37:09,569 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:37:09,569 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_Litecoin_SV0 := false;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4599]              assume null == 0;
[L4600]  CALL        call this := FreshRefGenerator__success();
[L2180]              havoc newRef;
[L2181]              assume Alloc[newRef] == false;
[L2182]              Alloc[newRef] := true;
[L2183]              assume newRef != null;
[L4600]  RET         call this := FreshRefGenerator__success();
[L4601]              assume now >= 0;
[L4602]              assume DType[this] == Litecoin_SV;
[L4603]              assume msgvalue_MSG == 0;
[L4604]              gas := gas - 53000;
[L4605]  CALL        call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L825]               havoc __exception;
[L826]               revert := false;
[L827]   COND FALSE  !(__exception)
[L852]   CALL        call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L2536]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2301]              assume msgsender_MSG != null;
[L2302]              Balance[this] := 0;
[L2316]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2317]  COND FALSE  !(revert)
[L2536]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2537]  COND FALSE  !(revert)
[L2540]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2386]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2368]              assume msgsender_MSG != null;
[L2369]              Balance[this] := 0;
[L2370]              owner_Owned[this] := null;
[L2371]              newOwner_Owned[this] := null;
[L2373]              owner_Owned[this] := msgsender_MSG;
[L2386]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2387]  COND FALSE  !(revert)
[L2540]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2541]  COND FALSE  !(revert)
[L2544]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2212]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2197]              assume msgsender_MSG != null;
[L2198]              Balance[this] := 0;
[L2212]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2213]  COND FALSE  !(revert)
[L2544]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2545]  COND FALSE  !(revert)
[L2548]  CALL        call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2489]              assume msgsender_MSG != null;
[L2490]              Balance[this] := 0;
[L2491]              businessName_Litecoin_SV[this] := 1031794244;
[L2492]              businessCountry_Litecoin_SV[this] := 1031794244;
[L2493]              symbol_Litecoin_SV[this] := 1031794244;
[L2494]              name_Litecoin_SV[this] := 1031794244;
[L2495]              decimals_Litecoin_SV[this] := 0;
[L2496]              _totalSupply_Litecoin_SV[this] := 0;
[L2497]              balances_Litecoin_SV[this] := zeroRefintArr();
[L2498]              sum_balances0[this] := 0;
[L2499]              allowed_Litecoin_SV[this] := zeroRefRefintArr();
[L2500]              sum_allowed1[this] := 0;
[L2502]              businessName_Litecoin_SV[this] := -1948412360;
[L2503]              businessCountry_Litecoin_SV[this] := 1439465232;
[L2504]              symbol_Litecoin_SV[this] := -803338840;
[L2505]              name_Litecoin_SV[this] := 1836794956;
[L2506]              decimals_Litecoin_SV[this] := 18;
[L2507]              _totalSupply_Litecoin_SV[this] := 25000000000000000000000000;
[L2508]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2509]              balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131] := _totalSupply_Litecoin_SV[this];
[L2510]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2511]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2548]  RET         call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2549]  COND FALSE  !(revert)
[L852]   RET         call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L853]               assume !revert && gas >= 0;
[L4605]  RET         call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume !revert && gas >= 0;
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND TRUE   choice == 14
[L4504]              gas := gas - 21000;
[L4505]  COND TRUE   gas >= 0
[L4506]              assume tokens_s411 >= 0 && tokens_s411 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4507]              assume msgvalue_MSG == 0;
[L4508]  CALL        call success_s411 := approve~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, spender_s411, tokens_s411);
[L1061]              havoc __exception;
[L1062]              revert := false;
[L1063]  COND FALSE  !(__exception)
[L1088]  CALL        call success_s411 := approve~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, spender_s411, tokens_s411);
[L2654]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_Litecoin_SV[this][msgsender_MSG][spender_s411];
[L2655]              allowed_Litecoin_SV[this][msgsender_MSG][spender_s411] := tokens_s411;
[L2656]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_Litecoin_SV[this][msgsender_MSG][spender_s411];
[L2657]              assert { :EventEmitted "Approval_Litecoin_SV" } true;
[L2658]              success_s411 := true;
[L1088]  RET         call success_s411 := approve~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, spender_s411, tokens_s411);
[L1089]              assume !revert && gas >= 0;
[L4508]  RET         call success_s411 := approve~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, spender_s411, tokens_s411);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND TRUE   choice == 15
[L4497]              gas := gas - 21000;
[L4498]  COND TRUE   gas >= 0
[L4499]              assume tokens_s383 >= 0 && tokens_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4500]              assume msgvalue_MSG == 0;
[L4501]  CALL        call success_s383 := transfer~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, to_s383, tokens_s383);
[L1001]              havoc __exception;
[L1002]              revert := false;
[L1003]  COND FALSE  !(__exception)
[L1028]  CALL        call success_s383 := transfer~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, to_s383, tokens_s383);
[L2616]  COND TRUE   DType[this] == Litecoin_SV
[L2617]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][msgsender_MSG], tokens_s383);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2617]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][msgsender_MSG], tokens_s383);
[L2618]  COND FALSE  !(revert)
[L2624]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][msgsender_MSG];
[L2625]              balances_Litecoin_SV[this][msgsender_MSG] := __var_3;
[L2626]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][msgsender_MSG];
[L2627]  COND TRUE   DType[this] == Litecoin_SV
[L2628]  CALL        call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s383], tokens_s383);
[L2229]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2230]  COND FALSE  !(!(c_s23 >= a_s23))
[L2628]  RET         call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s383], tokens_s383);
[L2629]  COND FALSE  !(revert)
[L2635]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][to_s383];
[L2636]              balances_Litecoin_SV[this][to_s383] := __var_4;
[L2637]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][to_s383];
[L2638]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2639]              success_s383 := true;
[L1028]  RET         call success_s383 := transfer~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, to_s383, tokens_s383);
[L1029]              assume !revert && gas >= 0;
[L4501]  RET         call success_s383 := transfer~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, to_s383, tokens_s383);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND FALSE  !(choice == 14)
[L4510]  COND TRUE   choice == 13
[L4511]              gas := gas - 21000;
[L4512]  COND TRUE   gas >= 0
[L4513]              assume tokens_s470 >= 0 && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4514]              assume msgvalue_MSG == 0;
[L4515]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s470 && p1 != to_s470) && (p2 != from_s470 || p3 != msgsender_MSG)) && from_s470 != to_s470) && tokens_s470 <= balances_Litecoin_SV[this][from_s470]) && tokens_s470 <= allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) && balances_Litecoin_SV[this][to_s470] + tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s470 >= 0) && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s470] >= 0) && balances_Litecoin_SV[this][to_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][from_s470] >= 0) && balances_Litecoin_SV[this][from_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] >= 0) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Litecoin_SV0 := true;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]                 revert := revert_hold;
[L1123]              havoc __exception;
[L1124]              revert := false;
[L1125]  COND FALSE  !(__exception)
[L1150]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L2709]  COND TRUE   DType[this] == Litecoin_SV
[L2710]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2710]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2711]  COND FALSE  !(revert)
[L2717]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][from_s470];
[L2718]              balances_Litecoin_SV[this][from_s470] := __var_5;
[L2719]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][from_s470];
[L2720]  COND TRUE   DType[this] == Litecoin_SV
[L2721]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2721]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2722]  COND FALSE  !(revert)
[L2728]              sum_allowed1[from_s470] := sum_allowed1[from_s470] - allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2729]              allowed_Litecoin_SV[this][from_s470][msgsender_MSG] := __var_6;
[L2730]              sum_allowed1[from_s470] := sum_allowed1[from_s470] + allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2731]  COND TRUE   DType[this] == Litecoin_SV
[L2732]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2229]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2230]  COND FALSE  !(!(c_s23 >= a_s23))
[L2732]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2733]  COND FALSE  !(revert)
[L2739]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][to_s470];
[L2740]              balances_Litecoin_SV[this][to_s470] := __var_7;
[L2741]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][to_s470];
[L2742]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2743]              success_s470 := true;
[L1150]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L1151]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((((success_s470 == true && balances_Litecoin_SV[this][from_s470] == old(balances_Litecoin_SV[this][from_s470]) - tokens_s470) && balances_Litecoin_SV[this][to_s470] == old(balances_Litecoin_SV[this][to_s470]) + tokens_s470) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] == old(allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) - tokens_s470) && _totalSupply_Litecoin_SV[this] == old(_totalSupply_Litecoin_SV[this])) && balances_Litecoin_SV[this][p1] == old(balances_Litecoin_SV[this][p1])) && allowed_Litecoin_SV[this][p2][p3] == old(allowed_Litecoin_SV[this][p2][p3])) && businessName_Litecoin_SV[this] == old(businessName_Litecoin_SV[this])) && businessCountry_Litecoin_SV[this] == old(businessCountry_Litecoin_SV[this])) && symbol_Litecoin_SV[this] == old(symbol_Litecoin_SV[this])) && name_Litecoin_SV[this] == old(name_Litecoin_SV[this])) && decimals_Litecoin_SV[this] == old(decimals_Litecoin_SV[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4515]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

Loop:
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND FALSE  !(choice == 14)
[L4510]  COND TRUE   choice == 13
[L4511]              gas := gas - 21000;
[L4512]  COND TRUE   gas >= 0
[L4513]              assume tokens_s470 >= 0 && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4514]              assume msgvalue_MSG == 0;
[L4515]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s470 && p1 != to_s470) && (p2 != from_s470 || p3 != msgsender_MSG)) && from_s470 != to_s470) && tokens_s470 <= balances_Litecoin_SV[this][from_s470]) && tokens_s470 <= allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) && balances_Litecoin_SV[this][to_s470] + tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s470 >= 0) && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s470] >= 0) && balances_Litecoin_SV[this][to_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][from_s470] >= 0) && balances_Litecoin_SV[this][from_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] >= 0) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Litecoin_SV0 := true;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]                 revert := revert_hold;
[L1123]              havoc __exception;
[L1124]              revert := false;
[L1125]  COND FALSE  !(__exception)
[L1150]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L2709]  COND TRUE   DType[this] == Litecoin_SV
[L2710]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2710]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2711]  COND FALSE  !(revert)
[L2717]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][from_s470];
[L2718]              balances_Litecoin_SV[this][from_s470] := __var_5;
[L2719]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][from_s470];
[L2720]  COND TRUE   DType[this] == Litecoin_SV
[L2721]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2721]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2722]  COND FALSE  !(revert)
[L2728]              sum_allowed1[from_s470] := sum_allowed1[from_s470] - allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2729]              allowed_Litecoin_SV[this][from_s470][msgsender_MSG] := __var_6;
[L2730]              sum_allowed1[from_s470] := sum_allowed1[from_s470] + allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2731]  COND TRUE   DType[this] == Litecoin_SV
[L2732]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2229]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2230]  COND FALSE  !(!(c_s23 >= a_s23))
[L2732]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2733]  COND FALSE  !(revert)
[L2739]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][to_s470];
[L2740]              balances_Litecoin_SV[this][to_s470] := __var_7;
[L2741]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][to_s470];
[L2742]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2743]              success_s470 := true;
[L1150]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L1151]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((((success_s470 == true && balances_Litecoin_SV[this][from_s470] == old(balances_Litecoin_SV[this][from_s470]) - tokens_s470) && balances_Litecoin_SV[this][to_s470] == old(balances_Litecoin_SV[this][to_s470]) + tokens_s470) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] == old(allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) - tokens_s470) && _totalSupply_Litecoin_SV[this] == old(_totalSupply_Litecoin_SV[this])) && balances_Litecoin_SV[this][p1] == old(balances_Litecoin_SV[this][p1])) && allowed_Litecoin_SV[this][p2][p3] == old(allowed_Litecoin_SV[this][p2][p3])) && businessName_Litecoin_SV[this] == old(businessName_Litecoin_SV[this])) && businessCountry_Litecoin_SV[this] == old(businessCountry_Litecoin_SV[this])) && symbol_Litecoin_SV[this] == old(symbol_Litecoin_SV[this])) && name_Litecoin_SV[this] == old(name_Litecoin_SV[this])) && decimals_Litecoin_SV[this] == old(decimals_Litecoin_SV[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4515]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

[2020-11-24 20:37:09,572 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:37:09,572 INFO  L82        PathProgramCache]: Analyzing trace with hash -1215696725, now seen corresponding path program 1 times
[2020-11-24 20:37:09,573 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:37:09,676 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:37:10,224 INFO  L134       CoverageAnalysis]: Checked inductivity of 218 backedges. 2 proven. 5 refuted. 0 times theorem prover too weak. 211 trivial. 0 not checked.
[2020-11-24 20:37:10,224 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-24 20:37:10,224 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [28] total 28
[2020-11-24 20:37:10,225 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:37:10,225 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 29 interpolants.
[2020-11-24 20:37:10,225 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=87, Invalid=725, Unknown=0, NotChecked=0, Total=812
[2020-11-24 20:37:10,225 INFO  L87              Difference]: Start difference. First operand 2215 states and 2468 transitions. cyclomatic complexity: 262 Second operand 29 states.
[2020-11-24 20:37:14,786 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:37:14,786 INFO  L93              Difference]: Finished difference Result 2463 states and 2823 transitions.
[2020-11-24 20:37:14,787 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 33 states. 
[2020-11-24 20:37:14,787 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2463 states and 2823 transitions.
[2020-11-24 20:37:14,792 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-24 20:37:14,797 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2463 states to 2463 states and 2823 transitions.
[2020-11-24 20:37:14,797 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 853
[2020-11-24 20:37:14,797 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 853
[2020-11-24 20:37:14,797 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2463 states and 2823 transitions.
[2020-11-24 20:37:14,799 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:37:14,799 INFO  L728         BuchiCegarLoop]: Abstraction has 2463 states and 2823 transitions.
[2020-11-24 20:37:14,801 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2463 states and 2823 transitions.
[2020-11-24 20:37:14,818 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2463 to 2438.
[2020-11-24 20:37:14,818 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2438 states.
[2020-11-24 20:37:14,820 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2438 states to 2438 states and 2796 transitions.
[2020-11-24 20:37:14,821 INFO  L751         BuchiCegarLoop]: Abstraction has 2438 states and 2796 transitions.
[2020-11-24 20:37:14,821 INFO  L631         BuchiCegarLoop]: Abstraction has 2438 states and 2796 transitions.
[2020-11-24 20:37:14,821 INFO  L445         BuchiCegarLoop]: ======== Iteration 19============
[2020-11-24 20:37:14,821 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2438 states and 2796 transitions.
[2020-11-24 20:37:14,823 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-24 20:37:14,823 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:37:14,823 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:37:14,824 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:37:14,824 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_Litecoin_SV0 := false;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4599]              assume null == 0;
[L4600]  CALL        call this := FreshRefGenerator__success();
[L2180]              havoc newRef;
[L2181]              assume Alloc[newRef] == false;
[L2182]              Alloc[newRef] := true;
[L2183]              assume newRef != null;
[L4600]  RET         call this := FreshRefGenerator__success();
[L4601]              assume now >= 0;
[L4602]              assume DType[this] == Litecoin_SV;
[L4603]              assume msgvalue_MSG == 0;
[L4604]              gas := gas - 53000;
[L4605]  CALL        call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L825]               havoc __exception;
[L826]               revert := false;
[L827]   COND FALSE  !(__exception)
[L852]   CALL        call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L2536]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2301]              assume msgsender_MSG != null;
[L2302]              Balance[this] := 0;
[L2316]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2317]  COND FALSE  !(revert)
[L2536]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2537]  COND FALSE  !(revert)
[L2540]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2386]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2368]              assume msgsender_MSG != null;
[L2369]              Balance[this] := 0;
[L2370]              owner_Owned[this] := null;
[L2371]              newOwner_Owned[this] := null;
[L2373]              owner_Owned[this] := msgsender_MSG;
[L2386]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2387]  COND FALSE  !(revert)
[L2540]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2541]  COND FALSE  !(revert)
[L2544]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2212]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2197]              assume msgsender_MSG != null;
[L2198]              Balance[this] := 0;
[L2212]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2213]  COND FALSE  !(revert)
[L2544]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2545]  COND FALSE  !(revert)
[L2548]  CALL        call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2489]              assume msgsender_MSG != null;
[L2490]              Balance[this] := 0;
[L2491]              businessName_Litecoin_SV[this] := 1031794244;
[L2492]              businessCountry_Litecoin_SV[this] := 1031794244;
[L2493]              symbol_Litecoin_SV[this] := 1031794244;
[L2494]              name_Litecoin_SV[this] := 1031794244;
[L2495]              decimals_Litecoin_SV[this] := 0;
[L2496]              _totalSupply_Litecoin_SV[this] := 0;
[L2497]              balances_Litecoin_SV[this] := zeroRefintArr();
[L2498]              sum_balances0[this] := 0;
[L2499]              allowed_Litecoin_SV[this] := zeroRefRefintArr();
[L2500]              sum_allowed1[this] := 0;
[L2502]              businessName_Litecoin_SV[this] := -1948412360;
[L2503]              businessCountry_Litecoin_SV[this] := 1439465232;
[L2504]              symbol_Litecoin_SV[this] := -803338840;
[L2505]              name_Litecoin_SV[this] := 1836794956;
[L2506]              decimals_Litecoin_SV[this] := 18;
[L2507]              _totalSupply_Litecoin_SV[this] := 25000000000000000000000000;
[L2508]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2509]              balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131] := _totalSupply_Litecoin_SV[this];
[L2510]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2511]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2548]  RET         call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2549]  COND FALSE  !(revert)
[L852]   RET         call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L853]               assume !revert && gas >= 0;
[L4605]  RET         call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume !revert && gas >= 0;
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND TRUE   choice == 14
[L4504]              gas := gas - 21000;
[L4505]  COND TRUE   gas >= 0
[L4506]              assume tokens_s411 >= 0 && tokens_s411 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4507]              assume msgvalue_MSG == 0;
[L4508]  CALL        call success_s411 := approve~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, spender_s411, tokens_s411);
[L1061]              havoc __exception;
[L1062]              revert := false;
[L1063]  COND FALSE  !(__exception)
[L1088]  CALL        call success_s411 := approve~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, spender_s411, tokens_s411);
[L2654]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_Litecoin_SV[this][msgsender_MSG][spender_s411];
[L2655]              allowed_Litecoin_SV[this][msgsender_MSG][spender_s411] := tokens_s411;
[L2656]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_Litecoin_SV[this][msgsender_MSG][spender_s411];
[L2657]              assert { :EventEmitted "Approval_Litecoin_SV" } true;
[L2658]              success_s411 := true;
[L1088]  RET         call success_s411 := approve~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, spender_s411, tokens_s411);
[L1089]              assume !revert && gas >= 0;
[L4508]  RET         call success_s411 := approve~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, spender_s411, tokens_s411);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND FALSE  !(choice == 14)
[L4510]  COND TRUE   choice == 13
[L4511]              gas := gas - 21000;
[L4512]  COND TRUE   gas >= 0
[L4513]              assume tokens_s470 >= 0 && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4514]              assume msgvalue_MSG == 0;
[L4515]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((p1 != from_s470 && p1 != to_s470) && (p2 != from_s470 || p3 != msgsender_MSG)) && from_s470 != to_s470) && tokens_s470 <= balances_Litecoin_SV[this][from_s470]) && tokens_s470 <= allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) && balances_Litecoin_SV[this][to_s470] + tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s470 >= 0) && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s470] >= 0) && balances_Litecoin_SV[this][to_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][from_s470] >= 0) && balances_Litecoin_SV[this][from_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] >= 0) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3]                 revert := revert_hold;
[L1123]              havoc __exception;
[L1124]              revert := false;
[L1125]  COND FALSE  !(__exception)
[L1150]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L2709]  COND TRUE   DType[this] == Litecoin_SV
[L2710]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2710]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2711]  COND FALSE  !(revert)
[L2717]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][from_s470];
[L2718]              balances_Litecoin_SV[this][from_s470] := __var_5;
[L2719]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][from_s470];
[L2720]  COND TRUE   DType[this] == Litecoin_SV
[L2721]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2721]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2722]  COND FALSE  !(revert)
[L2728]              sum_allowed1[from_s470] := sum_allowed1[from_s470] - allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2729]              allowed_Litecoin_SV[this][from_s470][msgsender_MSG] := __var_6;
[L2730]              sum_allowed1[from_s470] := sum_allowed1[from_s470] + allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2731]  COND TRUE   DType[this] == Litecoin_SV
[L2732]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2229]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2230]  COND FALSE  !(!(c_s23 >= a_s23))
[L2732]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2733]  COND FALSE  !(revert)
[L2739]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][to_s470];
[L2740]              balances_Litecoin_SV[this][to_s470] := __var_7;
[L2741]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][to_s470];
[L2742]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2743]              success_s470 := true;
[L1150]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L1151]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((((success_s470 == true && balances_Litecoin_SV[this][from_s470] == old(balances_Litecoin_SV[this][from_s470]) - tokens_s470) && balances_Litecoin_SV[this][to_s470] == old(balances_Litecoin_SV[this][to_s470]) + tokens_s470) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] == old(allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) - tokens_s470) && _totalSupply_Litecoin_SV[this] == old(_totalSupply_Litecoin_SV[this])) && balances_Litecoin_SV[this][p1] == old(balances_Litecoin_SV[this][p1])) && allowed_Litecoin_SV[this][p2][p3] == old(allowed_Litecoin_SV[this][p2][p3])) && businessName_Litecoin_SV[this] == old(businessName_Litecoin_SV[this])) && businessCountry_Litecoin_SV[this] == old(businessCountry_Litecoin_SV[this])) && symbol_Litecoin_SV[this] == old(symbol_Litecoin_SV[this])) && name_Litecoin_SV[this] == old(name_Litecoin_SV[this])) && decimals_Litecoin_SV[this] == old(decimals_Litecoin_SV[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4515]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND FALSE  !(choice == 14)
[L4510]  COND TRUE   choice == 13
[L4511]              gas := gas - 21000;
[L4512]  COND TRUE   gas >= 0
[L4513]              assume tokens_s470 >= 0 && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4514]              assume msgvalue_MSG == 0;
[L4515]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s470 && p1 != to_s470) && (p2 != from_s470 || p3 != msgsender_MSG)) && from_s470 != to_s470) && tokens_s470 <= balances_Litecoin_SV[this][from_s470]) && tokens_s470 <= allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) && balances_Litecoin_SV[this][to_s470] + tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s470 >= 0) && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s470] >= 0) && balances_Litecoin_SV[this][to_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][from_s470] >= 0) && balances_Litecoin_SV[this][from_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] >= 0) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Litecoin_SV0 := true;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]                 revert := revert_hold;
[L1123]              havoc __exception;
[L1124]              revert := false;
[L1125]  COND FALSE  !(__exception)
[L1150]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L2709]  COND TRUE   DType[this] == Litecoin_SV
[L2710]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2710]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2711]  COND FALSE  !(revert)
[L2717]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][from_s470];
[L2718]              balances_Litecoin_SV[this][from_s470] := __var_5;
[L2719]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][from_s470];
[L2720]  COND TRUE   DType[this] == Litecoin_SV
[L2721]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2721]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2722]  COND FALSE  !(revert)
[L2728]              sum_allowed1[from_s470] := sum_allowed1[from_s470] - allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2729]              allowed_Litecoin_SV[this][from_s470][msgsender_MSG] := __var_6;
[L2730]              sum_allowed1[from_s470] := sum_allowed1[from_s470] + allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2731]  COND TRUE   DType[this] == Litecoin_SV
[L2732]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2229]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2230]  COND FALSE  !(!(c_s23 >= a_s23))
[L2732]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2733]  COND FALSE  !(revert)
[L2739]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][to_s470];
[L2740]              balances_Litecoin_SV[this][to_s470] := __var_7;
[L2741]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][to_s470];
[L2742]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2743]              success_s470 := true;
[L1150]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L1151]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((((success_s470 == true && balances_Litecoin_SV[this][from_s470] == old(balances_Litecoin_SV[this][from_s470]) - tokens_s470) && balances_Litecoin_SV[this][to_s470] == old(balances_Litecoin_SV[this][to_s470]) + tokens_s470) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] == old(allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) - tokens_s470) && _totalSupply_Litecoin_SV[this] == old(_totalSupply_Litecoin_SV[this])) && balances_Litecoin_SV[this][p1] == old(balances_Litecoin_SV[this][p1])) && allowed_Litecoin_SV[this][p2][p3] == old(allowed_Litecoin_SV[this][p2][p3])) && businessName_Litecoin_SV[this] == old(businessName_Litecoin_SV[this])) && businessCountry_Litecoin_SV[this] == old(businessCountry_Litecoin_SV[this])) && symbol_Litecoin_SV[this] == old(symbol_Litecoin_SV[this])) && name_Litecoin_SV[this] == old(name_Litecoin_SV[this])) && decimals_Litecoin_SV[this] == old(decimals_Litecoin_SV[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4515]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

Loop:
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND FALSE  !(choice == 14)
[L4510]  COND TRUE   choice == 13
[L4511]              gas := gas - 21000;
[L4512]  COND TRUE   gas >= 0
[L4513]              assume tokens_s470 >= 0 && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4514]              assume msgvalue_MSG == 0;
[L4515]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s470 && p1 != to_s470) && (p2 != from_s470 || p3 != msgsender_MSG)) && from_s470 != to_s470) && tokens_s470 <= balances_Litecoin_SV[this][from_s470]) && tokens_s470 <= allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) && balances_Litecoin_SV[this][to_s470] + tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s470 >= 0) && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s470] >= 0) && balances_Litecoin_SV[this][to_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][from_s470] >= 0) && balances_Litecoin_SV[this][from_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] >= 0) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Litecoin_SV0 := true;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]                 revert := revert_hold;
[L1123]              havoc __exception;
[L1124]              revert := false;
[L1125]  COND FALSE  !(__exception)
[L1150]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L2709]  COND TRUE   DType[this] == Litecoin_SV
[L2710]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2710]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2711]  COND FALSE  !(revert)
[L2717]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][from_s470];
[L2718]              balances_Litecoin_SV[this][from_s470] := __var_5;
[L2719]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][from_s470];
[L2720]  COND TRUE   DType[this] == Litecoin_SV
[L2721]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2721]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2722]  COND FALSE  !(revert)
[L2728]              sum_allowed1[from_s470] := sum_allowed1[from_s470] - allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2729]              allowed_Litecoin_SV[this][from_s470][msgsender_MSG] := __var_6;
[L2730]              sum_allowed1[from_s470] := sum_allowed1[from_s470] + allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2731]  COND TRUE   DType[this] == Litecoin_SV
[L2732]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2229]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2230]  COND FALSE  !(!(c_s23 >= a_s23))
[L2732]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2733]  COND FALSE  !(revert)
[L2739]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][to_s470];
[L2740]              balances_Litecoin_SV[this][to_s470] := __var_7;
[L2741]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][to_s470];
[L2742]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2743]              success_s470 := true;
[L1150]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L1151]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((((success_s470 == true && balances_Litecoin_SV[this][from_s470] == old(balances_Litecoin_SV[this][from_s470]) - tokens_s470) && balances_Litecoin_SV[this][to_s470] == old(balances_Litecoin_SV[this][to_s470]) + tokens_s470) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] == old(allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) - tokens_s470) && _totalSupply_Litecoin_SV[this] == old(_totalSupply_Litecoin_SV[this])) && balances_Litecoin_SV[this][p1] == old(balances_Litecoin_SV[this][p1])) && allowed_Litecoin_SV[this][p2][p3] == old(allowed_Litecoin_SV[this][p2][p3])) && businessName_Litecoin_SV[this] == old(businessName_Litecoin_SV[this])) && businessCountry_Litecoin_SV[this] == old(businessCountry_Litecoin_SV[this])) && symbol_Litecoin_SV[this] == old(symbol_Litecoin_SV[this])) && name_Litecoin_SV[this] == old(name_Litecoin_SV[this])) && decimals_Litecoin_SV[this] == old(decimals_Litecoin_SV[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4515]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

[2020-11-24 20:37:14,828 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:37:14,828 INFO  L82        PathProgramCache]: Analyzing trace with hash -906822595, now seen corresponding path program 1 times
[2020-11-24 20:37:14,828 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:37:15,020 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:37:16,743 WARN  L188               SmtUtils]: Spent 178.00 ms on a formula simplification. DAG size of input: 207 DAG size of output: 87
[2020-11-24 20:37:17,073 WARN  L188               SmtUtils]: Spent 245.00 ms on a formula simplification. DAG size of input: 210 DAG size of output: 117
[2020-11-24 20:37:18,323 WARN  L188               SmtUtils]: Spent 949.00 ms on a formula simplification. DAG size of input: 368 DAG size of output: 179
[2020-11-24 20:37:19,483 WARN  L188               SmtUtils]: Spent 994.00 ms on a formula simplification. DAG size of input: 355 DAG size of output: 186
[2020-11-24 20:37:20,265 WARN  L188               SmtUtils]: Spent 603.00 ms on a formula simplification. DAG size of input: 303 DAG size of output: 148
[2020-11-24 20:37:21,041 WARN  L188               SmtUtils]: Spent 573.00 ms on a formula simplification. DAG size of input: 292 DAG size of output: 144
[2020-11-24 20:37:21,790 WARN  L188               SmtUtils]: Spent 563.00 ms on a formula simplification. DAG size of input: 293 DAG size of output: 144
[2020-11-24 20:37:25,506 WARN  L188               SmtUtils]: Spent 3.40 s on a formula simplification. DAG size of input: 644 DAG size of output: 186
[2020-11-24 20:37:27,170 WARN  L188               SmtUtils]: Spent 1.34 s on a formula simplification. DAG size of input: 652 DAG size of output: 117
[2020-11-24 20:37:27,719 WARN  L188               SmtUtils]: Spent 409.00 ms on a formula simplification. DAG size of input: 276 DAG size of output: 66
[2020-11-24 20:37:28,338 WARN  L188               SmtUtils]: Spent 345.00 ms on a formula simplification. DAG size of input: 234 DAG size of output: 37
[2020-11-24 20:37:29,626 WARN  L188               SmtUtils]: Spent 132.00 ms on a formula simplification. DAG size of input: 173 DAG size of output: 67
[2020-11-24 20:37:30,335 WARN  L188               SmtUtils]: Spent 129.00 ms on a formula simplification. DAG size of input: 283 DAG size of output: 44
[2020-11-24 20:37:31,241 INFO  L134       CoverageAnalysis]: Checked inductivity of 234 backedges. 0 proven. 161 refuted. 0 times theorem prover too weak. 73 trivial. 0 not checked.
[2020-11-24 20:37:31,241 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-24 20:37:31,241 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [58] total 58
[2020-11-24 20:37:31,242 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:37:31,242 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 58 interpolants.
[2020-11-24 20:37:31,242 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=168, Invalid=3138, Unknown=0, NotChecked=0, Total=3306
[2020-11-24 20:37:31,243 INFO  L87              Difference]: Start difference. First operand 2438 states and 2796 transitions. cyclomatic complexity: 372 Second operand 58 states.
[2020-11-24 20:37:46,798 WARN  L188               SmtUtils]: Spent 284.00 ms on a formula simplification. DAG size of input: 140 DAG size of output: 129
[2020-11-24 20:37:47,104 WARN  L188               SmtUtils]: Spent 222.00 ms on a formula simplification. DAG size of input: 133 DAG size of output: 121
[2020-11-24 20:37:48,244 WARN  L188               SmtUtils]: Spent 846.00 ms on a formula simplification. DAG size of input: 238 DAG size of output: 184
[2020-11-24 20:37:49,145 WARN  L188               SmtUtils]: Spent 685.00 ms on a formula simplification. DAG size of input: 258 DAG size of output: 161
[2020-11-24 20:37:49,768 WARN  L188               SmtUtils]: Spent 475.00 ms on a formula simplification. DAG size of input: 170 DAG size of output: 133
[2020-11-24 20:37:50,697 WARN  L188               SmtUtils]: Spent 778.00 ms on a formula simplification. DAG size of input: 184 DAG size of output: 136
[2020-11-24 20:37:51,022 WARN  L188               SmtUtils]: Spent 158.00 ms on a formula simplification. DAG size of input: 176 DAG size of output: 80
[2020-11-24 20:37:54,223 WARN  L188               SmtUtils]: Spent 863.00 ms on a formula simplification. DAG size of input: 195 DAG size of output: 132
[2020-11-24 20:37:55,258 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:37:55,258 INFO  L93              Difference]: Finished difference Result 1137 states and 1296 transitions.
[2020-11-24 20:37:55,258 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 45 states. 
[2020-11-24 20:37:55,259 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1137 states and 1296 transitions.
[2020-11-24 20:37:55,261 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-24 20:37:55,261 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1137 states to 0 states and 0 transitions.
[2020-11-24 20:37:55,261 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-24 20:37:55,261 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-24 20:37:55,261 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-24 20:37:55,261 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:37:55,261 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 20:37:55,261 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 20:37:55,261 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 20:37:55,261 INFO  L445         BuchiCegarLoop]: ======== Iteration 20============
[2020-11-24 20:37:55,261 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-24 20:37:55,261 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-24 20:37:55,261 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-24 20:37:55,264 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 08:37:55 BasicIcfg
[2020-11-24 20:37:55,264 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-24 20:37:55,265 INFO  L168              Benchmark]: Toolchain (without parser) took 152331.72 ms. Allocated memory was 1.0 GB in the beginning and 4.8 GB in the end (delta: 3.8 GB). Free memory was 935.2 MB in the beginning and 4.1 GB in the end (delta: -3.1 GB). Peak memory consumption was 672.4 MB. Max. memory is 15.3 GB.
[2020-11-24 20:37:55,265 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-24 20:37:55,265 INFO  L168              Benchmark]: Boogie Preprocessor took 109.42 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-24 20:37:55,265 INFO  L168              Benchmark]: UtopiaSpecLang took 67.76 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 908.4 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-24 20:37:55,266 INFO  L168              Benchmark]: Boogie Printer took 25.34 ms. Allocated memory is still 1.0 GB. Free memory is still 908.4 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-24 20:37:55,266 INFO  L168              Benchmark]: RCFGBuilder took 822.87 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 784.9 MB in the end (delta: 123.5 MB). Peak memory consumption was 123.5 MB. Max. memory is 15.3 GB.
[2020-11-24 20:37:55,266 INFO  L168              Benchmark]: UtopiaLTL2Aut took 47.15 ms. Allocated memory is still 1.0 GB. Free memory was 784.9 MB in the beginning and 781.3 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-24 20:37:55,266 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1356.42 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 188.2 MB). Free memory was 781.3 MB in the beginning and 923.7 MB in the end (delta: -142.4 MB). Peak memory consumption was 153.3 MB. Max. memory is 15.3 GB.
[2020-11-24 20:37:55,266 INFO  L168              Benchmark]: BlockEncodingV2 took 143.60 ms. Allocated memory is still 1.2 GB. Free memory was 923.7 MB in the beginning and 856.3 MB in the end (delta: 67.4 MB). Peak memory consumption was 67.4 MB. Max. memory is 15.3 GB.
[2020-11-24 20:37:55,267 INFO  L168              Benchmark]: BuchiAutomizer took 149755.93 ms. Allocated memory was 1.2 GB in the beginning and 4.8 GB in the end (delta: 3.6 GB). Free memory was 856.3 MB in the beginning and 4.1 GB in the end (delta: -3.2 GB). Peak memory consumption was 405.2 MB. Max. memory is 15.3 GB.
[2020-11-24 20:37:55,269 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    4040 locations, 6918 edges
  - StatisticsResult: Encoded RCFG
    3980 locations, 6758 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 109.42 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 67.76 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 908.4 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 25.34 ms. Allocated memory is still 1.0 GB. Free memory is still 908.4 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 822.87 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 784.9 MB in the end (delta: 123.5 MB). Peak memory consumption was 123.5 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 47.15 ms. Allocated memory is still 1.0 GB. Free memory was 784.9 MB in the beginning and 781.3 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1356.42 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 188.2 MB). Free memory was 781.3 MB in the beginning and 923.7 MB in the end (delta: -142.4 MB). Peak memory consumption was 153.3 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 143.60 ms. Allocated memory is still 1.2 GB. Free memory was 923.7 MB in the beginning and 856.3 MB in the end (delta: 67.4 MB). Peak memory consumption was 67.4 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 149755.93 ms. Allocated memory was 1.2 GB in the beginning and 4.8 GB in the end (delta: 3.6 GB). Free memory was 856.3 MB in the beginning and 4.1 GB in the end (delta: -3.2 GB). Peak memory consumption was 405.2 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1708 locations, 2140 edges
  - StatisticsResult: BuchiProgram size
    4040 locations, 6918 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 19 terminating modules (19 trivial, 0 deterministic, 0 nondeterministic). 19 modules have a trivial ranking function, the largest among these consists of 58 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 149.7s and 20 iterations.  TraceHistogramMax:3. Analysis of lassos took 34.9s. Construction of modules took 86.8s. BÃ¼chi inclusion checks took 27.0s. Highest rank in rank-based complementation 0. Minimization of det autom 19. Minimization of nondet autom 0. Automata minimization 0.3s AutomataMinimizationTime, 18 MinimizatonAttempts, 3106 StatesRemovedByMinimization, 17 NontrivialMinimizations. Non-live state removal took 0.2s Buchi closure took 0.0s. Biggest automaton had 3067 states and ocurred in iteration 6.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 43793 SDtfs, 62394 SDslu, 222525 SDs, 0 SdLazy, 428672 SolverSat, 9940 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 86.8s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU19 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transferFrom_Litecoin_SV0) ==> ( <>(success_transferFrom_Litecoin_SV0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
