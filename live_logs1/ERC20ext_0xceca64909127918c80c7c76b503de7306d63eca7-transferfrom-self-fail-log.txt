This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 15:09:33,184 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 15:09:33,185 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 15:09:33,195 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 15:09:33,196 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 15:09:33,197 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 15:09:33,197 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 15:09:33,199 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 15:09:33,200 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 15:09:33,201 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 15:09:33,202 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 15:09:33,202 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 15:09:33,202 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 15:09:33,203 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 15:09:33,204 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 15:09:33,204 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 15:09:33,205 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 15:09:33,206 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 15:09:33,207 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 15:09:33,209 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 15:09:33,209 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 15:09:33,210 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 15:09:33,211 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 15:09:33,212 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 15:09:33,212 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 15:09:33,212 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 15:09:33,213 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 15:09:33,213 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 15:09:33,213 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 15:09:33,214 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 15:09:33,214 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 15:09:33,215 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 15:09:33,215 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 15:09:33,216 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 15:09:33,216 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 15:09:33,216 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 15:09:33,217 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 15:09:33,217 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 15:09:33,217 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 15:09:33,218 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 15:09:33,218 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 15:09:33,218 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 15:09:33,226 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 15:09:33,226 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 15:09:33,227 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 15:09:33,227 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 15:09:33,227 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 15:09:33,227 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 15:09:33,228 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 15:09:33,228 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 15:09:33,228 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 15:09:33,228 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 15:09:33,228 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 15:09:33,228 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 15:09:33,228 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 15:09:33,228 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 15:09:33,229 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 15:09:33,229 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 15:09:33,229 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 15:09:33,229 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 15:09:33,229 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 15:09:33,229 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 15:09:33,229 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 15:09:33,229 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 15:09:33,230 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 15:09:33,230 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 15:09:33,230 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 15:09:33,230 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 15:09:33,252 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 15:09:33,267 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 15:09:33,270 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 15:09:33,271 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 15:09:33,272 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 15:09:33,272 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transferfrom-self-fail.bpl
[2020-11-25 15:09:33,272 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transferfrom-self-fail.bpl'
[2020-11-25 15:09:33,356 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 15:09:33,357 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 15:09:33,357 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 15:09:33,357 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 15:09:33,358 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 15:09:33,374 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:09:33" (1/1) ...
[2020-11-25 15:09:33,375 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:09:33" (1/1) ...
[2020-11-25 15:09:33,412 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:09:33" (1/1) ...
[2020-11-25 15:09:33,413 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:09:33" (1/1) ...
[2020-11-25 15:09:33,434 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:09:33" (1/1) ...
[2020-11-25 15:09:33,445 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:09:33" (1/1) ...
[2020-11-25 15:09:33,453 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:09:33" (1/1) ...
[2020-11-25 15:09:33,464 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 15:09:33,465 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 15:09:33,465 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 15:09:33,466 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 15:09:33,470 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:09:33" (1/1) ...
[2020-11-25 15:09:33,487 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(TokenERC20.transferFrom(from, to, value), from == to && (value > balanceOf_TokenERC20[this][from] || value > allowance_TokenERC20[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][to] >= 0 && balanceOf_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][from] >= 0 &&  balanceOf_TokenERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowance_TokenERC20[this][from][msg.sender] >= 0 && allowance_TokenERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(TokenERC20.transferFrom)))
[2020-11-25 15:09:33,493 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(TokenERC20.transferFrom(from, to, value), from == to && (value > balanceOf_TokenERC20[this][from] || value > allowance_TokenERC20[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][to] >= 0 && balanceOf_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][from] >= 0 &&  balanceOf_TokenERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowance_TokenERC20[this][from][msg.sender] >= 0 && allowance_TokenERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(TokenERC20.transferFrom)))
[2020-11-25 15:09:33,500 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(TokenERC20.transferFrom(from, to, value), from == to && (value > balanceOf_TokenERC20[this][from] || value > allowance_TokenERC20[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][to] >= 0 && balanceOf_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][from] >= 0 &&  balanceOf_TokenERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowance_TokenERC20[this][from][msg.sender] >= 0 && allowance_TokenERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(TokenERC20.transferFrom)))
[2020-11-25 15:09:33,507 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( _from_s413==_to_s413 && ( _value_s413>balanceOf_TokenERC20[this][_from_s413] || _value_s413>allowance_TokenERC20[this][_from_s413][msg.sender] ) ) && _value_s413>=0 ) && _value_s413<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balanceOf_TokenERC20[this][_to_s413]>=0 ) && balanceOf_TokenERC20[this][_to_s413]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balanceOf_TokenERC20[this][_from_s413]>=0 ) && balanceOf_TokenERC20[this][_from_s413]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && allowance_TokenERC20[this][_from_s413][msg.sender]>=0 ) && allowance_TokenERC20[this][_from_s413][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[_from_s413,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>],IdentifierExpression[_to_s413,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]],BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[_value_s413,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_from_s413,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]],BinaryExpression[COMPGT,IdentifierExpression[_value_s413,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowance_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_from_s413,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[_value_s413,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[_value_s413,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_to_s413,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_to_s413,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_from_s413,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_from_s413,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowance_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_from_s413,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowance_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_from_s413,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 15:09:33,513 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(TokenERC20.transferFrom(from, to, value), from == to && (value > balanceOf_TokenERC20[this][from] || value > allowance_TokenERC20[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][to] >= 0 && balanceOf_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][from] >= 0 &&  balanceOf_TokenERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowance_TokenERC20[this][from][msg.sender] >= 0 && allowance_TokenERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(TokenERC20.transferFrom)))
[2020-11-25 15:09:33,513 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_TokenERC200) ==> ( <>AP(fail_transferFrom_TokenERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 15:09:33,522 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:09:33 PropertyContainer
[2020-11-25 15:09:33,523 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 15:09:33,523 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 15:09:33,523 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 15:09:33,523 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 15:09:33,524 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:09:33" (1/2) ...
[2020-11-25 15:09:33,524 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 15:09:33,524 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 15:09:33,540 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:09:33" (2/2) ...
[2020-11-25 15:09:33,540 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 15:09:33,540 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 15:09:33,540 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 15:09:33,540 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 15:09:33,541 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:09:33" (1/2) ...
[2020-11-25 15:09:33,592 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 15:09:33,592 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 15:09:33,592 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 15:09:33,593 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 15:09:33,593 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 15:09:33,593 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 15:09:33,593 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 15:09:33,593 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 15:09:33,593 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 15:09:33,593 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned_NoBaseCtor__success
[2020-11-25 15:09:33,593 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned
[2020-11-25 15:09:33,593 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned
[2020-11-25 15:09:33,593 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_owned
[2020-11-25 15:09:33,594 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_owned
[2020-11-25 15:09:33,594 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_owned
[2020-11-25 15:09:33,594 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_owned
[2020-11-25 15:09:33,594 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient_NoBaseCtor__success
[2020-11-25 15:09:33,594 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient
[2020-11-25 15:09:33,594 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient
[2020-11-25 15:09:33,595 INFO  L130     BoogieDeclarations]: Found specification of procedure receiveApproval~address~uint256~address~bytes_tokenRecipient
[2020-11-25 15:09:33,595 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20_NoBaseCtor__success
[2020-11-25 15:09:33,595 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20
[2020-11-25 15:09:33,595 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20
[2020-11-25 15:09:33,596 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_TokenERC20__success
[2020-11-25 15:09:33,596 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_TokenERC20
[2020-11-25 15:09:33,596 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_TokenERC20
[2020-11-25 15:09:33,596 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_TokenERC20
[2020-11-25 15:09:33,597 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_TokenERC20
[2020-11-25 15:09:33,597 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_TokenERC20
[2020-11-25 15:09:33,597 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_TokenERC20
[2020-11-25 15:09:33,598 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_TokenERC20
[2020-11-25 15:09:33,598 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_TokenERC20
[2020-11-25 15:09:33,598 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_TokenERC20
[2020-11-25 15:09:33,598 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_TokenERC20
[2020-11-25 15:09:33,598 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_TokenERC20
[2020-11-25 15:09:33,599 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_TokenERC20
[2020-11-25 15:09:33,599 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TokenERC20
[2020-11-25 15:09:33,599 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TokenERC20
[2020-11-25 15:09:33,599 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TokenERC20
[2020-11-25 15:09:33,600 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TokenERC20
[2020-11-25 15:09:33,600 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TokenERC20
[2020-11-25 15:09:33,600 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TokenERC20
[2020-11-25 15:09:33,600 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_TokenERC20
[2020-11-25 15:09:33,601 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_TokenERC20
[2020-11-25 15:09:33,601 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_TokenERC20
[2020-11-25 15:09:33,601 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_TokenERC20
[2020-11-25 15:09:33,601 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_TokenERC20
[2020-11-25 15:09:33,602 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_TokenERC20
[2020-11-25 15:09:33,602 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20ext_ERC20ext_NoBaseCtor__success
[2020-11-25 15:09:33,602 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20ext_ERC20ext
[2020-11-25 15:09:33,602 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20ext_ERC20ext
[2020-11-25 15:09:33,602 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20ext__success
[2020-11-25 15:09:33,603 INFO  L130     BoogieDeclarations]: Found specification of procedure mintToken~address~uint256_ERC20ext
[2020-11-25 15:09:33,603 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintToken~address~uint256_ERC20ext
[2020-11-25 15:09:33,603 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address~bool_ERC20ext
[2020-11-25 15:09:33,603 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address~bool_ERC20ext
[2020-11-25 15:09:33,604 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~address~uint256~uint256_ERC20ext
[2020-11-25 15:09:33,604 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~address~uint256~uint256_ERC20ext
[2020-11-25 15:09:33,604 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_ERC20ext
[2020-11-25 15:09:33,604 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_ERC20ext
[2020-11-25 15:09:33,605 INFO  L130     BoogieDeclarations]: Found specification of procedure lockedAccount~address_ERC20ext
[2020-11-25 15:09:33,605 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockedAccount~address_ERC20ext
[2020-11-25 15:09:33,605 INFO  L130     BoogieDeclarations]: Found specification of procedure lockedAmount~address_ERC20ext
[2020-11-25 15:09:33,605 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockedAmount~address_ERC20ext
[2020-11-25 15:09:33,606 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 15:09:33,606 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 15:09:33,606 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 15:09:33,606 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 15:09:33,606 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 15:09:33,607 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 15:09:33,607 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_owned
[2020-11-25 15:09:33,607 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_owned
[2020-11-25 15:09:33,607 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_tokenRecipient
[2020-11-25 15:09:33,608 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_tokenRecipient
[2020-11-25 15:09:33,608 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_TokenERC20
[2020-11-25 15:09:33,608 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_TokenERC20
[2020-11-25 15:09:33,608 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20ext
[2020-11-25 15:09:33,608 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 15:09:33,608 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 15:09:33,609 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 15:09:33,609 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 15:09:33,609 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 15:09:33,609 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 15:09:33,609 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 15:09:33,609 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 15:09:33,609 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 15:09:33,609 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 15:09:33,609 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned_NoBaseCtor__fail
[2020-11-25 15:09:33,609 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned__success
[2020-11-25 15:09:33,609 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned__fail
[2020-11-25 15:09:33,610 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_owned__success
[2020-11-25 15:09:33,610 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_owned__fail
[2020-11-25 15:09:33,610 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_owned__success
[2020-11-25 15:09:33,610 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_owned__fail
[2020-11-25 15:09:33,610 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient_NoBaseCtor__fail
[2020-11-25 15:09:33,610 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient__success
[2020-11-25 15:09:33,610 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient__fail
[2020-11-25 15:09:33,610 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20_NoBaseCtor__fail
[2020-11-25 15:09:33,610 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20__success
[2020-11-25 15:09:33,610 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20__fail
[2020-11-25 15:09:33,610 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_TokenERC20__fail
[2020-11-25 15:09:33,611 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_TokenERC20__success
[2020-11-25 15:09:33,611 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_TokenERC20__fail
[2020-11-25 15:09:33,611 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_TokenERC20__success
[2020-11-25 15:09:33,611 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_TokenERC20__fail
[2020-11-25 15:09:33,611 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_TokenERC20__success
[2020-11-25 15:09:33,611 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_TokenERC20__fail
[2020-11-25 15:09:33,611 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_TokenERC20__success
[2020-11-25 15:09:33,611 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_TokenERC20__fail
[2020-11-25 15:09:33,611 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_TokenERC20__success
[2020-11-25 15:09:33,611 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_TokenERC20__fail
[2020-11-25 15:09:33,612 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_TokenERC20__success
[2020-11-25 15:09:33,612 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_TokenERC20__fail
[2020-11-25 15:09:33,612 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TokenERC20__success
[2020-11-25 15:09:33,612 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TokenERC20__fail
[2020-11-25 15:09:33,612 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TokenERC20__success
[2020-11-25 15:09:33,612 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TokenERC20__fail
[2020-11-25 15:09:33,612 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TokenERC20__success
[2020-11-25 15:09:33,612 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TokenERC20__fail
[2020-11-25 15:09:33,612 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_TokenERC20__success
[2020-11-25 15:09:33,612 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_TokenERC20__fail
[2020-11-25 15:09:33,613 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_TokenERC20__success
[2020-11-25 15:09:33,613 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_TokenERC20__fail
[2020-11-25 15:09:33,613 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_TokenERC20__success
[2020-11-25 15:09:33,613 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_TokenERC20__fail
[2020-11-25 15:09:33,613 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20ext_ERC20ext_NoBaseCtor__fail
[2020-11-25 15:09:33,613 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20ext_ERC20ext__success
[2020-11-25 15:09:33,613 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20ext_ERC20ext__fail
[2020-11-25 15:09:33,613 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20ext__fail
[2020-11-25 15:09:33,613 INFO  L130     BoogieDeclarations]: Found specification of procedure mintToken~address~uint256_ERC20ext__success
[2020-11-25 15:09:33,613 INFO  L130     BoogieDeclarations]: Found specification of procedure mintToken~address~uint256_ERC20ext__fail
[2020-11-25 15:09:33,613 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address~bool_ERC20ext__success
[2020-11-25 15:09:33,614 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address~bool_ERC20ext__fail
[2020-11-25 15:09:33,614 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~address~uint256~uint256_ERC20ext__success
[2020-11-25 15:09:33,614 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~address~uint256~uint256_ERC20ext__fail
[2020-11-25 15:09:33,614 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_ERC20ext__success
[2020-11-25 15:09:33,614 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_ERC20ext__fail
[2020-11-25 15:09:33,614 INFO  L130     BoogieDeclarations]: Found specification of procedure lockedAccount~address_ERC20ext__success
[2020-11-25 15:09:33,614 INFO  L130     BoogieDeclarations]: Found specification of procedure lockedAccount~address_ERC20ext__fail
[2020-11-25 15:09:33,614 INFO  L130     BoogieDeclarations]: Found specification of procedure lockedAmount~address_ERC20ext__success
[2020-11-25 15:09:33,614 INFO  L130     BoogieDeclarations]: Found specification of procedure lockedAmount~address_ERC20ext__fail
[2020-11-25 15:09:33,615 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 15:09:33,615 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 15:09:33,615 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 15:09:33,615 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 15:09:33,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 15:09:33,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 15:09:33,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 15:09:33,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 15:09:33,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 15:09:33,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 15:09:33,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 15:09:33,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 15:09:33,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 15:09:33,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 15:09:33,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 15:09:33,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 15:09:33,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 15:09:33,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 15:09:33,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 15:09:33,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 15:09:33,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned_NoBaseCtor__fail
[2020-11-25 15:09:33,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned_NoBaseCtor__success
[2020-11-25 15:09:33,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned__fail
[2020-11-25 15:09:33,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned__success
[2020-11-25 15:09:33,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_owned__fail
[2020-11-25 15:09:33,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_owned__success
[2020-11-25 15:09:33,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_owned__fail
[2020-11-25 15:09:33,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_owned__success
[2020-11-25 15:09:33,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient_NoBaseCtor__fail
[2020-11-25 15:09:33,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient_NoBaseCtor__success
[2020-11-25 15:09:33,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient__fail
[2020-11-25 15:09:33,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient__success
[2020-11-25 15:09:33,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20_NoBaseCtor__fail
[2020-11-25 15:09:33,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20_NoBaseCtor__success
[2020-11-25 15:09:33,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20__fail
[2020-11-25 15:09:33,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20__success
[2020-11-25 15:09:33,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_TokenERC20__fail
[2020-11-25 15:09:33,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_TokenERC20__success
[2020-11-25 15:09:33,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_TokenERC20__fail
[2020-11-25 15:09:33,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_TokenERC20__success
[2020-11-25 15:09:33,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_TokenERC20__fail
[2020-11-25 15:09:33,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_TokenERC20__success
[2020-11-25 15:09:33,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_TokenERC20__fail
[2020-11-25 15:09:33,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_TokenERC20__success
[2020-11-25 15:09:33,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_TokenERC20__fail
[2020-11-25 15:09:33,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_TokenERC20__success
[2020-11-25 15:09:33,619 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_TokenERC20__fail
[2020-11-25 15:09:33,619 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_TokenERC20__success
[2020-11-25 15:09:33,619 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_TokenERC20__fail
[2020-11-25 15:09:33,619 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_TokenERC20__success
[2020-11-25 15:09:33,619 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TokenERC20__fail
[2020-11-25 15:09:33,619 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TokenERC20__success
[2020-11-25 15:09:33,619 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TokenERC20__fail
[2020-11-25 15:09:33,619 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TokenERC20__success
[2020-11-25 15:09:33,619 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TokenERC20__fail
[2020-11-25 15:09:33,619 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TokenERC20__success
[2020-11-25 15:09:33,619 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_TokenERC20__fail
[2020-11-25 15:09:33,619 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_TokenERC20__success
[2020-11-25 15:09:33,619 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_TokenERC20__fail
[2020-11-25 15:09:33,619 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_TokenERC20__success
[2020-11-25 15:09:33,619 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_TokenERC20__fail
[2020-11-25 15:09:33,619 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_TokenERC20__success
[2020-11-25 15:09:33,620 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20ext_ERC20ext_NoBaseCtor__fail
[2020-11-25 15:09:33,620 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20ext_ERC20ext_NoBaseCtor__success
[2020-11-25 15:09:33,620 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20ext_ERC20ext__fail
[2020-11-25 15:09:33,620 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20ext_ERC20ext__success
[2020-11-25 15:09:33,620 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20ext__fail
[2020-11-25 15:09:33,620 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20ext__success
[2020-11-25 15:09:33,620 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintToken~address~uint256_ERC20ext__fail
[2020-11-25 15:09:33,620 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintToken~address~uint256_ERC20ext__success
[2020-11-25 15:09:33,620 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address~bool_ERC20ext__fail
[2020-11-25 15:09:33,620 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address~bool_ERC20ext__success
[2020-11-25 15:09:33,620 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~address~uint256~uint256_ERC20ext__fail
[2020-11-25 15:09:33,620 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~address~uint256~uint256_ERC20ext__success
[2020-11-25 15:09:33,620 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_ERC20ext__fail
[2020-11-25 15:09:33,620 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_ERC20ext__success
[2020-11-25 15:09:33,620 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockedAccount~address_ERC20ext__fail
[2020-11-25 15:09:33,620 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockedAccount~address_ERC20ext__success
[2020-11-25 15:09:33,621 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockedAmount~address_ERC20ext__fail
[2020-11-25 15:09:33,621 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockedAmount~address_ERC20ext__success
[2020-11-25 15:09:33,621 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 15:09:33,621 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 15:09:33,621 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 15:09:33,621 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 15:09:33,621 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 15:09:33,621 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 15:09:33,621 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 15:09:33,621 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 15:09:33,621 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 15:09:33,621 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 15:09:33,621 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_owned
[2020-11-25 15:09:33,621 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_owned
[2020-11-25 15:09:33,621 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_tokenRecipient
[2020-11-25 15:09:33,621 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_tokenRecipient
[2020-11-25 15:09:33,622 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_TokenERC20
[2020-11-25 15:09:33,622 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_TokenERC20
[2020-11-25 15:09:33,622 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20ext
[2020-11-25 15:09:33,622 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 15:09:33,622 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 15:09:33,622 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 15:09:34,004 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 15:09:34,004 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 15:09:34,327 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 15:09:34,327 INFO  L286             CfgBuilder]: Removed 5 assue(true) statements.
[2020-11-25 15:09:34,329 INFO  L202        PluginConnector]: Adding new model ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:09:34 BoogieIcfgContainer
[2020-11-25 15:09:34,329 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:09:33" (2/2) ...
[2020-11-25 15:09:34,329 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 15:09:34,330 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@5be4c83f and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:09:34, skipping insertion in model container
[2020-11-25 15:09:34,330 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 15:09:34,330 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 15:09:34,330 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 15:09:34,331 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 15:09:34,332 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:09:33" (1/3) ...
[2020-11-25 15:09:34,332 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@338afb06 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:09:34, skipping insertion in model container
[2020-11-25 15:09:34,332 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:09:33" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 15:09:34,370 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:09:34 NWAContainer
[2020-11-25 15:09:34,370 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 15:09:34,370 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 15:09:34,370 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 15:09:34,371 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 15:09:34,372 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:09:34" (3/4) ...
[2020-11-25 15:09:34,372 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@386d4ed4 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:09:34, skipping insertion in model container
[2020-11-25 15:09:34,372 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:09:34" (4/4) ...
[2020-11-25 15:09:34,375 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 15:09:34,379 INFO  L110   BuchiProductObserver]: Initial RCFG 1880 locations, 2416 edges
[2020-11-25 15:09:34,379 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 15:09:34,390 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 15:09:35,728 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 15:09:35,734 INFO  L110   BuchiProductObserver]: BuchiProgram size 4502 locations, 7818 edges
[2020-11-25 15:09:35,735 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:09:35 BoogieIcfgContainer
[2020-11-25 15:09:35,735 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 15:09:35,735 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 15:09:35,735 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 15:09:35,737 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 15:09:35,737 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:09:35" (1/1) ...
[2020-11-25 15:09:35,831 INFO  L313           BlockEncoder]: Initial Icfg 4502 locations, 7818 edges
[2020-11-25 15:09:35,831 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 15:09:35,832 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 15:09:35,832 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 15:09:35,832 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 15:09:35,845 INFO  L70    emoveInfeasibleEdges]: Removed 75 edges and 13 locations because of local infeasibility
[2020-11-25 15:09:35,861 INFO  L70        RemoveSinkStates]: Removed 74 edges and 40 locations by removing sink states
[2020-11-25 15:09:35,876 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 15:09:35,884 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 15:09:35,893 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 15:09:35,894 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 15:09:35,902 INFO  L313           BlockEncoder]: Encoded RCFG 4425 locations, 7634 edges
[2020-11-25 15:09:35,902 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 03:09:35 BasicIcfg
[2020-11-25 15:09:35,902 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 15:09:35,902 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 15:09:35,902 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 15:09:35,905 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 15:09:35,905 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 15:09:35,905 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:09:33" (1/6) ...
[2020-11-25 15:09:35,907 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6e580903 and model type ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 03:09:35, skipping insertion in model container
[2020-11-25 15:09:35,907 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 15:09:35,907 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:09:33" (2/6) ...
[2020-11-25 15:09:35,907 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6e580903 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 03:09:35, skipping insertion in model container
[2020-11-25 15:09:35,907 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 15:09:35,907 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:09:34" (3/6) ...
[2020-11-25 15:09:35,908 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6e580903 and model type ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 03:09:35, skipping insertion in model container
[2020-11-25 15:09:35,908 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 15:09:35,908 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:09:34" (4/6) ...
[2020-11-25 15:09:35,908 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6e580903 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 03:09:35, skipping insertion in model container
[2020-11-25 15:09:35,908 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 15:09:35,908 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:09:35" (5/6) ...
[2020-11-25 15:09:35,908 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6e580903 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 03:09:35, skipping insertion in model container
[2020-11-25 15:09:35,908 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 15:09:35,908 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 03:09:35" (6/6) ...
[2020-11-25 15:09:35,910 INFO  L404   chiAutomizerObserver]: Analyzing ICFG ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transferfrom-self-fail.bpl_BEv2
[2020-11-25 15:09:35,948 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 15:09:35,949 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 15:09:35,949 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 15:09:35,949 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 15:09:35,949 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 15:09:35,949 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 15:09:35,949 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 15:09:35,949 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 15:09:35,949 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 15:09:35,996 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4425 states.
[2020-11-25 15:09:36,062 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:09:36,062 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:09:36,062 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:09:36,072 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:09:36,072 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:09:36,073 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 15:09:36,073 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4425 states.
[2020-11-25 15:09:36,103 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:09:36,103 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:09:36,103 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:09:36,105 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:09:36,105 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_TokenERC200 := false;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]     CALL        call main();
[L5089]              assume null == 0;
[L5090]  CALL        call this := FreshRefGenerator__success();
[L2432]              havoc newRef;
[L2433]              assume Alloc[newRef] == false;
[L2434]              Alloc[newRef] := true;
[L2435]              assume newRef != null;
[L5090]  RET         call this := FreshRefGenerator__success();
[L5091]              assume now >= 0;
[L5092]              assume DType[this] == ERC20ext;
[L5093]              assume msgvalue_MSG == 0;
[L5094]              gas := gas - 53000;
[L5095]  CALL        call ERC20ext_ERC20ext(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L1360]              havoc __exception;
[L1361]              revert := false;
[L1362]  COND FALSE  !(__exception)
[L1391]  CALL        call ERC20ext_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3247]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2624]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2607]              assume msgsender_MSG != null;
[L2608]              Balance[this] := 0;
[L2609]              owner_owned[this] := null;
[L2611]              owner_owned[this] := msgsender_MSG;
[L2624]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2625]  COND FALSE  !(revert)
[L3247]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3248]  COND TRUE   revert
[L1391]  RET         call ERC20ext_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L1392]              assume !revert && gas >= 0;
[L5095]  RET         call ERC20ext_ERC20ext(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L5096]              assume !revert && gas >= 0;

Loop:
[L5099]  CALL        call CorralChoice_ERC20ext(this);
[L4881]              havoc msgsender_MSG;
[L4882]              havoc msgvalue_MSG;
[L4883]              havoc choice;
[L4884]              havoc __ret_0_owner;
[L4885]              havoc newOwner_s166;
[L4886]              havoc __ret_0_name;
[L4887]              havoc __ret_0_symbol;
[L4888]              havoc __ret_0_decimals;
[L4889]              havoc __ret_0_totalSupply;
[L4890]              havoc arg835_s0;
[L4891]              havoc __ret_0_balanceOf;
[L4892]              havoc arg836_s0;
[L4893]              havoc arg837_s0;
[L4894]              havoc __ret_0_allowance;
[L4895]              havoc initialSupply_s258;
[L4896]              havoc tokenName_s258;
[L4897]              havoc tokenSymbol_s258;
[L4898]              havoc _to_s365;
[L4899]              havoc _value_s365;
[L4900]              havoc success_s365;
[L4901]              havoc _from_s413;
[L4902]              havoc _to_s413;
[L4903]              havoc _value_s413;
[L4904]              havoc success_s413;
[L4905]              havoc _spender_s441;
[L4906]              havoc _value_s441;
[L4907]              havoc success_s441;
[L4908]              havoc _spender_s479;
[L4909]              havoc _value_s479;
[L4910]              havoc _extraData_s479;
[L4911]              havoc success_s479;
[L4912]              havoc _value_s527;
[L4913]              havoc success_s527;
[L4914]              havoc _from_s598;
[L4915]              havoc _value_s598;
[L4916]              havoc success_s598;
[L4917]              havoc arg838_s0;
[L4918]              havoc __ret_0_frozenAccount;
[L4919]              havoc arg839_s0;
[L4920]              havoc __ret_0_lockedAccount;
[L4921]              havoc arg840_s0;
[L4922]              havoc __ret_0_lockedAmount;
[L4923]              havoc initialSupply_s639;
[L4924]              havoc tokenName_s639;
[L4925]              havoc tokenSymbol_s639;
[L4926]              havoc target_s779;
[L4927]              havoc mintedAmount_s779;
[L4928]              havoc success_s779;
[L4929]              havoc target_s804;
[L4930]              havoc freeze_s804;
[L4931]              havoc success_s804;
[L4932]              havoc target_s832;
[L4933]              havoc time_s832;
[L4934]              havoc amount_s832;
[L4935]              havoc success_s832;
[L4936]              havoc tmpNow;
[L4937]              havoc gas;
[L4938]              assume gas > 4000000 && gas <= 8000000;
[L4939]              tmpNow := now;
[L4940]              havoc now;
[L4941]              assume now > tmpNow;
[L4942]              assume msgsender_MSG != null;
[L4943]              assume DType[msgsender_MSG] != SafeMath;
[L4944]              assume DType[msgsender_MSG] != owned;
[L4945]              assume DType[msgsender_MSG] != tokenRecipient;
[L4946]              assume DType[msgsender_MSG] != TokenERC20;
[L4947]              assume DType[msgsender_MSG] != ERC20ext;
[L4948]              Alloc[msgsender_MSG] := true;
[L4949]  COND TRUE   choice == 20
[L4950]              gas := gas - 21000;
[L4951]  COND FALSE  !(gas >= 0)
[L5099]  RET         call CorralChoice_ERC20ext(this);

[2020-11-25 15:09:36,124 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:09:36,124 INFO  L82        PathProgramCache]: Analyzing trace with hash 931391281, now seen corresponding path program 1 times
[2020-11-25 15:09:36,129 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:09:36,158 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:09:36,201 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 15:09:36,203 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:09:36,204 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 15:09:36,492 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:09:36,500 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 15:09:36,501 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 15:09:36,502 INFO  L87              Difference]: Start difference. First operand 4425 states. Second operand 4 states.
[2020-11-25 15:09:37,403 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:09:37,403 INFO  L93              Difference]: Finished difference Result 4193 states and 6636 transitions.
[2020-11-25 15:09:37,403 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 15:09:37,404 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4193 states and 6636 transitions.
[2020-11-25 15:09:37,433 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 15:09:37,466 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4193 states to 3995 states and 6295 transitions.
[2020-11-25 15:09:37,466 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 12
[2020-11-25 15:09:37,471 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1251
[2020-11-25 15:09:37,471 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3995 states and 6295 transitions.
[2020-11-25 15:09:37,485 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:09:37,485 INFO  L728         BuchiCegarLoop]: Abstraction has 3995 states and 6295 transitions.
[2020-11-25 15:09:37,502 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3995 states and 6295 transitions.
[2020-11-25 15:09:37,560 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3995 to 3408.
[2020-11-25 15:09:37,561 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3408 states.
[2020-11-25 15:09:37,568 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3408 states to 3408 states and 5243 transitions.
[2020-11-25 15:09:37,568 INFO  L751         BuchiCegarLoop]: Abstraction has 3408 states and 5243 transitions.
[2020-11-25 15:09:37,569 INFO  L631         BuchiCegarLoop]: Abstraction has 3408 states and 5243 transitions.
[2020-11-25 15:09:37,569 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 15:09:37,569 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3408 states and 5243 transitions.
[2020-11-25 15:09:37,578 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:09:37,578 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:09:37,578 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:09:37,580 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:09:37,580 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_TokenERC200 := false;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]     CALL        call main();
[L5089]              assume null == 0;
[L5090]  CALL        call this := FreshRefGenerator__success();
[L2432]              havoc newRef;
[L2433]              assume Alloc[newRef] == false;
[L2434]              Alloc[newRef] := true;
[L2435]              assume newRef != null;
[L5090]  RET         call this := FreshRefGenerator__success();
[L5091]              assume now >= 0;
[L5092]              assume DType[this] == ERC20ext;
[L5093]              assume msgvalue_MSG == 0;
[L5094]              gas := gas - 53000;
[L5095]  CALL        call ERC20ext_ERC20ext(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L1360]              havoc __exception;
[L1361]              revert := false;
[L1362]  COND FALSE  !(__exception)
[L1391]  CALL        call ERC20ext_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3247]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2624]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2607]              assume msgsender_MSG != null;
[L2608]              Balance[this] := 0;
[L2609]              owner_owned[this] := null;
[L2611]              owner_owned[this] := msgsender_MSG;
[L2624]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2625]  COND FALSE  !(revert)
[L3247]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3248]  COND FALSE  !(revert)
[L3251]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L2752]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s258, tokenName_s258, tokenSymbol_s258);
[L2720]              assume msgsender_MSG != null;
[L2721]              Balance[this] := 0;
[L2722]              name_TokenERC20[this] := 1101944712;
[L2723]              symbol_TokenERC20[this] := 1101944712;
[L2724]              decimals_TokenERC20[this] := 18;
[L2725]              totalSupply_TokenERC20[this] := 0;
[L2726]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L2727]              sum_balanceOf0[this] := 0;
[L2728]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L2729]              sum_allowance1[this] := 0;
[L2731]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2732]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s258, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L2734]              balanceOf_TokenERC20[this][msgsender_MSG] := totalSupply_TokenERC20[this];
[L2735]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L2736]              name_TokenERC20[this] := tokenName_s258;
[L2737]              symbol_TokenERC20[this] := tokenSymbol_s258;
[L2752]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s258, tokenName_s258, tokenSymbol_s258);
[L2753]  COND FALSE  !(revert)
[L3251]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3252]  COND FALSE  !(revert)
[L3255]  CALL        call ERC20ext_ERC20ext_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3219]              assume msgsender_MSG != null;
[L3220]              Balance[this] := 0;
[L3221]              frozenAccount_ERC20ext[this] := zeroRefboolArr();
[L3222]              lockedAccount_ERC20ext[this] := zeroRefintArr();
[L3223]              sum_lockedAccount3[this] := 0;
[L3224]              lockedAmount_ERC20ext[this] := zeroRefintArr();
[L3225]              sum_lockedAmount4[this] := 0;
[L3255]  RET         call ERC20ext_ERC20ext_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3256]  COND FALSE  !(revert)
[L1391]  RET         call ERC20ext_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L1392]              assume !revert && gas >= 0;
[L5095]  RET         call ERC20ext_ERC20ext(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L5096]              assume !revert && gas >= 0;

Loop:
[L5099]  CALL        call CorralChoice_ERC20ext(this);
[L4881]              havoc msgsender_MSG;
[L4882]              havoc msgvalue_MSG;
[L4883]              havoc choice;
[L4884]              havoc __ret_0_owner;
[L4885]              havoc newOwner_s166;
[L4886]              havoc __ret_0_name;
[L4887]              havoc __ret_0_symbol;
[L4888]              havoc __ret_0_decimals;
[L4889]              havoc __ret_0_totalSupply;
[L4890]              havoc arg835_s0;
[L4891]              havoc __ret_0_balanceOf;
[L4892]              havoc arg836_s0;
[L4893]              havoc arg837_s0;
[L4894]              havoc __ret_0_allowance;
[L4895]              havoc initialSupply_s258;
[L4896]              havoc tokenName_s258;
[L4897]              havoc tokenSymbol_s258;
[L4898]              havoc _to_s365;
[L4899]              havoc _value_s365;
[L4900]              havoc success_s365;
[L4901]              havoc _from_s413;
[L4902]              havoc _to_s413;
[L4903]              havoc _value_s413;
[L4904]              havoc success_s413;
[L4905]              havoc _spender_s441;
[L4906]              havoc _value_s441;
[L4907]              havoc success_s441;
[L4908]              havoc _spender_s479;
[L4909]              havoc _value_s479;
[L4910]              havoc _extraData_s479;
[L4911]              havoc success_s479;
[L4912]              havoc _value_s527;
[L4913]              havoc success_s527;
[L4914]              havoc _from_s598;
[L4915]              havoc _value_s598;
[L4916]              havoc success_s598;
[L4917]              havoc arg838_s0;
[L4918]              havoc __ret_0_frozenAccount;
[L4919]              havoc arg839_s0;
[L4920]              havoc __ret_0_lockedAccount;
[L4921]              havoc arg840_s0;
[L4922]              havoc __ret_0_lockedAmount;
[L4923]              havoc initialSupply_s639;
[L4924]              havoc tokenName_s639;
[L4925]              havoc tokenSymbol_s639;
[L4926]              havoc target_s779;
[L4927]              havoc mintedAmount_s779;
[L4928]              havoc success_s779;
[L4929]              havoc target_s804;
[L4930]              havoc freeze_s804;
[L4931]              havoc success_s804;
[L4932]              havoc target_s832;
[L4933]              havoc time_s832;
[L4934]              havoc amount_s832;
[L4935]              havoc success_s832;
[L4936]              havoc tmpNow;
[L4937]              havoc gas;
[L4938]              assume gas > 4000000 && gas <= 8000000;
[L4939]              tmpNow := now;
[L4940]              havoc now;
[L4941]              assume now > tmpNow;
[L4942]              assume msgsender_MSG != null;
[L4943]              assume DType[msgsender_MSG] != SafeMath;
[L4944]              assume DType[msgsender_MSG] != owned;
[L4945]              assume DType[msgsender_MSG] != tokenRecipient;
[L4946]              assume DType[msgsender_MSG] != TokenERC20;
[L4947]              assume DType[msgsender_MSG] != ERC20ext;
[L4948]              Alloc[msgsender_MSG] := true;
[L4949]  COND TRUE   choice == 20
[L4950]              gas := gas - 21000;
[L4951]  COND FALSE  !(gas >= 0)
[L5099]  RET         call CorralChoice_ERC20ext(this);

[2020-11-25 15:09:37,584 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:09:37,584 INFO  L82        PathProgramCache]: Analyzing trace with hash 992056183, now seen corresponding path program 1 times
[2020-11-25 15:09:37,585 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:09:37,592 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:09:37,605 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 15:09:37,605 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:09:37,605 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [2] imperfect sequences [] total 2
[2020-11-25 15:09:37,606 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:09:37,606 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 15:09:37,606 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 15:09:37,607 INFO  L87              Difference]: Start difference. First operand 3408 states and 5243 transitions. cyclomatic complexity: 1837 Second operand 3 states.
[2020-11-25 15:09:37,701 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:09:37,701 INFO  L93              Difference]: Finished difference Result 3189 states and 3453 transitions.
[2020-11-25 15:09:37,701 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 15:09:37,702 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3189 states and 3453 transitions.
[2020-11-25 15:09:37,710 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:09:37,720 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3189 states to 3189 states and 3453 transitions.
[2020-11-25 15:09:37,720 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 904
[2020-11-25 15:09:37,721 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 904
[2020-11-25 15:09:37,721 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3189 states and 3453 transitions.
[2020-11-25 15:09:37,723 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:09:37,723 INFO  L728         BuchiCegarLoop]: Abstraction has 3189 states and 3453 transitions.
[2020-11-25 15:09:37,726 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3189 states and 3453 transitions.
[2020-11-25 15:09:37,746 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3189 to 3184.
[2020-11-25 15:09:37,746 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3184 states.
[2020-11-25 15:09:37,750 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3184 states to 3184 states and 3448 transitions.
[2020-11-25 15:09:37,750 INFO  L751         BuchiCegarLoop]: Abstraction has 3184 states and 3448 transitions.
[2020-11-25 15:09:37,750 INFO  L631         BuchiCegarLoop]: Abstraction has 3184 states and 3448 transitions.
[2020-11-25 15:09:37,750 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 15:09:37,750 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3184 states and 3448 transitions.
[2020-11-25 15:09:37,756 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:09:37,756 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:09:37,756 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:09:37,758 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:09:37,758 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_TokenERC200 := false;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]     CALL        call main();
[L5089]              assume null == 0;
[L5090]  CALL        call this := FreshRefGenerator__success();
[L2432]              havoc newRef;
[L2433]              assume Alloc[newRef] == false;
[L2434]              Alloc[newRef] := true;
[L2435]              assume newRef != null;
[L5090]  RET         call this := FreshRefGenerator__success();
[L5091]              assume now >= 0;
[L5092]              assume DType[this] == ERC20ext;
[L5093]              assume msgvalue_MSG == 0;
[L5094]              gas := gas - 53000;
[L5095]  CALL        call ERC20ext_ERC20ext(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L1360]              havoc __exception;
[L1361]              revert := false;
[L1362]  COND FALSE  !(__exception)
[L1391]  CALL        call ERC20ext_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3247]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2624]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2607]              assume msgsender_MSG != null;
[L2608]              Balance[this] := 0;
[L2609]              owner_owned[this] := null;
[L2611]              owner_owned[this] := msgsender_MSG;
[L2624]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2625]  COND FALSE  !(revert)
[L3247]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3248]  COND FALSE  !(revert)
[L3251]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L2752]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s258, tokenName_s258, tokenSymbol_s258);
[L2720]              assume msgsender_MSG != null;
[L2721]              Balance[this] := 0;
[L2722]              name_TokenERC20[this] := 1101944712;
[L2723]              symbol_TokenERC20[this] := 1101944712;
[L2724]              decimals_TokenERC20[this] := 18;
[L2725]              totalSupply_TokenERC20[this] := 0;
[L2726]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L2727]              sum_balanceOf0[this] := 0;
[L2728]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L2729]              sum_allowance1[this] := 0;
[L2731]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2732]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s258, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L2734]              balanceOf_TokenERC20[this][msgsender_MSG] := totalSupply_TokenERC20[this];
[L2735]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L2736]              name_TokenERC20[this] := tokenName_s258;
[L2737]              symbol_TokenERC20[this] := tokenSymbol_s258;
[L2752]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s258, tokenName_s258, tokenSymbol_s258);
[L2753]  COND FALSE  !(revert)
[L3251]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3252]  COND FALSE  !(revert)
[L3255]  CALL        call ERC20ext_ERC20ext_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3219]              assume msgsender_MSG != null;
[L3220]              Balance[this] := 0;
[L3221]              frozenAccount_ERC20ext[this] := zeroRefboolArr();
[L3222]              lockedAccount_ERC20ext[this] := zeroRefintArr();
[L3223]              sum_lockedAccount3[this] := 0;
[L3224]              lockedAmount_ERC20ext[this] := zeroRefintArr();
[L3225]              sum_lockedAmount4[this] := 0;
[L3255]  RET         call ERC20ext_ERC20ext_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3256]  COND FALSE  !(revert)
[L1391]  RET         call ERC20ext_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L1392]              assume !revert && gas >= 0;
[L5095]  RET         call ERC20ext_ERC20ext(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L5096]              assume !revert && gas >= 0;
[L5099]  CALL        call CorralChoice_ERC20ext(this);
[L4881]              havoc msgsender_MSG;
[L4882]              havoc msgvalue_MSG;
[L4883]              havoc choice;
[L4884]              havoc __ret_0_owner;
[L4885]              havoc newOwner_s166;
[L4886]              havoc __ret_0_name;
[L4887]              havoc __ret_0_symbol;
[L4888]              havoc __ret_0_decimals;
[L4889]              havoc __ret_0_totalSupply;
[L4890]              havoc arg835_s0;
[L4891]              havoc __ret_0_balanceOf;
[L4892]              havoc arg836_s0;
[L4893]              havoc arg837_s0;
[L4894]              havoc __ret_0_allowance;
[L4895]              havoc initialSupply_s258;
[L4896]              havoc tokenName_s258;
[L4897]              havoc tokenSymbol_s258;
[L4898]              havoc _to_s365;
[L4899]              havoc _value_s365;
[L4900]              havoc success_s365;
[L4901]              havoc _from_s413;
[L4902]              havoc _to_s413;
[L4903]              havoc _value_s413;
[L4904]              havoc success_s413;
[L4905]              havoc _spender_s441;
[L4906]              havoc _value_s441;
[L4907]              havoc success_s441;
[L4908]              havoc _spender_s479;
[L4909]              havoc _value_s479;
[L4910]              havoc _extraData_s479;
[L4911]              havoc success_s479;
[L4912]              havoc _value_s527;
[L4913]              havoc success_s527;
[L4914]              havoc _from_s598;
[L4915]              havoc _value_s598;
[L4916]              havoc success_s598;
[L4917]              havoc arg838_s0;
[L4918]              havoc __ret_0_frozenAccount;
[L4919]              havoc arg839_s0;
[L4920]              havoc __ret_0_lockedAccount;
[L4921]              havoc arg840_s0;
[L4922]              havoc __ret_0_lockedAmount;
[L4923]              havoc initialSupply_s639;
[L4924]              havoc tokenName_s639;
[L4925]              havoc tokenSymbol_s639;
[L4926]              havoc target_s779;
[L4927]              havoc mintedAmount_s779;
[L4928]              havoc success_s779;
[L4929]              havoc target_s804;
[L4930]              havoc freeze_s804;
[L4931]              havoc success_s804;
[L4932]              havoc target_s832;
[L4933]              havoc time_s832;
[L4934]              havoc amount_s832;
[L4935]              havoc success_s832;
[L4936]              havoc tmpNow;
[L4937]              havoc gas;
[L4938]              assume gas > 4000000 && gas <= 8000000;
[L4939]              tmpNow := now;
[L4940]              havoc now;
[L4941]              assume now > tmpNow;
[L4942]              assume msgsender_MSG != null;
[L4943]              assume DType[msgsender_MSG] != SafeMath;
[L4944]              assume DType[msgsender_MSG] != owned;
[L4945]              assume DType[msgsender_MSG] != tokenRecipient;
[L4946]              assume DType[msgsender_MSG] != TokenERC20;
[L4947]              assume DType[msgsender_MSG] != ERC20ext;
[L4948]              Alloc[msgsender_MSG] := true;
[L4949]  COND FALSE  !(choice == 20)
[L4955]  COND FALSE  !(choice == 19)
[L4961]  COND FALSE  !(choice == 18)
[L4967]  COND FALSE  !(choice == 17)
[L4973]  COND FALSE  !(choice == 16)
[L4979]  COND FALSE  !(choice == 15)
[L4985]  COND FALSE  !(choice == 14)
[L4991]  COND FALSE  !(choice == 13)
[L4997]  COND FALSE  !(choice == 12)
[L5004]  COND TRUE   choice == 11
[L5005]              gas := gas - 21000;
[L5006]  COND TRUE   gas >= 0
[L5007]              assume _value_s413 >= 0 && _value_s413 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5008]              assume msgvalue_MSG == 0;
[L5009]  CALL        call success_s413 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s413 == _to_s413 && (_value_s413 > balanceOf_TokenERC20[this][_from_s413] || _value_s413 > allowance_TokenERC20[this][_from_s413][msgsender_MSG])) && _value_s413 >= 0) && _value_s413 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s413] >= 0) && balanceOf_TokenERC20[this][_to_s413] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_from_s413] >= 0) && balanceOf_TokenERC20[this][_from_s413] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_TokenERC20[this][_from_s413][msgsender_MSG] >= 0) && allowance_TokenERC20[this][_from_s413][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_TokenERC200 := true;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L597]               havoc __exception;
[L598]               revert := false;
[L599]   COND FALSE  !(__exception)
[L628]   CALL        call success_s413 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L2904]  COND FALSE  !(!(_value_s413 <= allowance_TokenERC20[this][_from_s413][msgsender_MSG]))
[L2908]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowance_TokenERC20[this][_from_s413][msgsender_MSG], _value_s413);
[L2509]  COND FALSE  !(!(b_s51 <= a_s51))
[L2513]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2514]              __ret_0_ := c_s51;
[L2908]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowance_TokenERC20[this][_from_s413][msgsender_MSG], _value_s413);
[L2909]  COND FALSE  !(revert)
[L2912]              sum_allowance1[_from_s413] := sum_allowance1[_from_s413] - allowance_TokenERC20[this][_from_s413][msgsender_MSG];
[L2913]              allowance_TokenERC20[this][_from_s413][msgsender_MSG] := __var_5;
[L2914]              sum_allowance1[_from_s413] := sum_allowance1[_from_s413] + allowance_TokenERC20[this][_from_s413][msgsender_MSG];
[L2915]  COND TRUE   DType[this] == ERC20ext
[L2916]  CALL        call _transfer~address~address~uint256_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L3312]  COND FALSE  !(!(now > lockedAccount_ERC20ext[this][_from_s739] || (lockedAmount_ERC20ext[this][_from_s739] + _value_s739) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 < balanceOf_TokenERC20[this][_from_s739]))
[L3316]              __var_14 := null;
[L3317]  COND FALSE  !(!(_to_s739 != null))
[L3321]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s739] >= _value_s739))
[L3325]  COND FALSE  !(!((balanceOf_TokenERC20[this][_to_s739] + _value_s739) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= balanceOf_TokenERC20[this][_to_s739]))
[L3329]  COND FALSE  !(!!frozenAccount_ERC20ext[this][_from_s739])
[L3333]  COND FALSE  !(!!frozenAccount_ERC20ext[this][_to_s739])
[L3337]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s739], _value_s739);
[L2509]  COND FALSE  !(!(b_s51 <= a_s51))
[L2513]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2514]              __ret_0_ := c_s51;
[L3337]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s739], _value_s739);
[L3338]  COND FALSE  !(revert)
[L3341]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_from_s739];
[L3342]              balanceOf_TokenERC20[this][_from_s739] := __var_15;
[L3343]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_from_s739];
[L3344]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s739], _value_s739);
[L2485]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2486]  COND FALSE  !(!(c_s26 >= a_s26))
[L2490]              __ret_0_ := c_s26;
[L3344]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s739], _value_s739);
[L3345]  COND FALSE  !(revert)
[L3348]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_to_s739];
[L3349]              balanceOf_TokenERC20[this][_to_s739] := __var_16;
[L3350]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_to_s739];
[L3351]              assert { :EventEmitted "Transfer_ERC20ext" } true;
[L2916]  RET         call _transfer~address~address~uint256_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L2917]  COND FALSE  !(revert)
[L2928]              success_s413 := true;
[L628]   RET         call success_s413 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L629]               assume !revert && gas >= 0;
[L5009]  RET         call success_s413 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L5099]  RET         call CorralChoice_ERC20ext(this);

Loop:
[L5099]  CALL        call CorralChoice_ERC20ext(this);
[L4881]              havoc msgsender_MSG;
[L4882]              havoc msgvalue_MSG;
[L4883]              havoc choice;
[L4884]              havoc __ret_0_owner;
[L4885]              havoc newOwner_s166;
[L4886]              havoc __ret_0_name;
[L4887]              havoc __ret_0_symbol;
[L4888]              havoc __ret_0_decimals;
[L4889]              havoc __ret_0_totalSupply;
[L4890]              havoc arg835_s0;
[L4891]              havoc __ret_0_balanceOf;
[L4892]              havoc arg836_s0;
[L4893]              havoc arg837_s0;
[L4894]              havoc __ret_0_allowance;
[L4895]              havoc initialSupply_s258;
[L4896]              havoc tokenName_s258;
[L4897]              havoc tokenSymbol_s258;
[L4898]              havoc _to_s365;
[L4899]              havoc _value_s365;
[L4900]              havoc success_s365;
[L4901]              havoc _from_s413;
[L4902]              havoc _to_s413;
[L4903]              havoc _value_s413;
[L4904]              havoc success_s413;
[L4905]              havoc _spender_s441;
[L4906]              havoc _value_s441;
[L4907]              havoc success_s441;
[L4908]              havoc _spender_s479;
[L4909]              havoc _value_s479;
[L4910]              havoc _extraData_s479;
[L4911]              havoc success_s479;
[L4912]              havoc _value_s527;
[L4913]              havoc success_s527;
[L4914]              havoc _from_s598;
[L4915]              havoc _value_s598;
[L4916]              havoc success_s598;
[L4917]              havoc arg838_s0;
[L4918]              havoc __ret_0_frozenAccount;
[L4919]              havoc arg839_s0;
[L4920]              havoc __ret_0_lockedAccount;
[L4921]              havoc arg840_s0;
[L4922]              havoc __ret_0_lockedAmount;
[L4923]              havoc initialSupply_s639;
[L4924]              havoc tokenName_s639;
[L4925]              havoc tokenSymbol_s639;
[L4926]              havoc target_s779;
[L4927]              havoc mintedAmount_s779;
[L4928]              havoc success_s779;
[L4929]              havoc target_s804;
[L4930]              havoc freeze_s804;
[L4931]              havoc success_s804;
[L4932]              havoc target_s832;
[L4933]              havoc time_s832;
[L4934]              havoc amount_s832;
[L4935]              havoc success_s832;
[L4936]              havoc tmpNow;
[L4937]              havoc gas;
[L4938]              assume gas > 4000000 && gas <= 8000000;
[L4939]              tmpNow := now;
[L4940]              havoc now;
[L4941]              assume now > tmpNow;
[L4942]              assume msgsender_MSG != null;
[L4943]              assume DType[msgsender_MSG] != SafeMath;
[L4944]              assume DType[msgsender_MSG] != owned;
[L4945]              assume DType[msgsender_MSG] != tokenRecipient;
[L4946]              assume DType[msgsender_MSG] != TokenERC20;
[L4947]              assume DType[msgsender_MSG] != ERC20ext;
[L4948]              Alloc[msgsender_MSG] := true;
[L4949]  COND FALSE  !(choice == 20)
[L4955]  COND FALSE  !(choice == 19)
[L4961]  COND FALSE  !(choice == 18)
[L4967]  COND FALSE  !(choice == 17)
[L4973]  COND FALSE  !(choice == 16)
[L4979]  COND FALSE  !(choice == 15)
[L4985]  COND FALSE  !(choice == 14)
[L4991]  COND FALSE  !(choice == 13)
[L4997]  COND FALSE  !(choice == 12)
[L5004]  COND TRUE   choice == 11
[L5005]              gas := gas - 21000;
[L5006]  COND TRUE   gas >= 0
[L5007]              assume _value_s413 >= 0 && _value_s413 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5008]              assume msgvalue_MSG == 0;
[L5009]  CALL        call success_s413 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s413 == _to_s413 && (_value_s413 > balanceOf_TokenERC20[this][_from_s413] || _value_s413 > allowance_TokenERC20[this][_from_s413][msgsender_MSG])) && _value_s413 >= 0) && _value_s413 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s413] >= 0) && balanceOf_TokenERC20[this][_to_s413] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_from_s413] >= 0) && balanceOf_TokenERC20[this][_from_s413] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_TokenERC20[this][_from_s413][msgsender_MSG] >= 0) && allowance_TokenERC20[this][_from_s413][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_TokenERC200 := true;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L597]               havoc __exception;
[L598]               revert := false;
[L599]   COND FALSE  !(__exception)
[L628]   CALL        call success_s413 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L2904]  COND FALSE  !(!(_value_s413 <= allowance_TokenERC20[this][_from_s413][msgsender_MSG]))
[L2908]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowance_TokenERC20[this][_from_s413][msgsender_MSG], _value_s413);
[L2509]  COND FALSE  !(!(b_s51 <= a_s51))
[L2513]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2514]              __ret_0_ := c_s51;
[L2908]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowance_TokenERC20[this][_from_s413][msgsender_MSG], _value_s413);
[L2909]  COND FALSE  !(revert)
[L2912]              sum_allowance1[_from_s413] := sum_allowance1[_from_s413] - allowance_TokenERC20[this][_from_s413][msgsender_MSG];
[L2913]              allowance_TokenERC20[this][_from_s413][msgsender_MSG] := __var_5;
[L2914]              sum_allowance1[_from_s413] := sum_allowance1[_from_s413] + allowance_TokenERC20[this][_from_s413][msgsender_MSG];
[L2915]  COND TRUE   DType[this] == ERC20ext
[L2916]  CALL        call _transfer~address~address~uint256_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L3312]  COND FALSE  !(!(now > lockedAccount_ERC20ext[this][_from_s739] || (lockedAmount_ERC20ext[this][_from_s739] + _value_s739) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 < balanceOf_TokenERC20[this][_from_s739]))
[L3316]              __var_14 := null;
[L3317]  COND FALSE  !(!(_to_s739 != null))
[L3321]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s739] >= _value_s739))
[L3325]  COND FALSE  !(!((balanceOf_TokenERC20[this][_to_s739] + _value_s739) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= balanceOf_TokenERC20[this][_to_s739]))
[L3329]  COND FALSE  !(!!frozenAccount_ERC20ext[this][_from_s739])
[L3333]  COND FALSE  !(!!frozenAccount_ERC20ext[this][_to_s739])
[L3337]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s739], _value_s739);
[L2509]  COND FALSE  !(!(b_s51 <= a_s51))
[L2513]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2514]              __ret_0_ := c_s51;
[L3337]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s739], _value_s739);
[L3338]  COND FALSE  !(revert)
[L3341]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_from_s739];
[L3342]              balanceOf_TokenERC20[this][_from_s739] := __var_15;
[L3343]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_from_s739];
[L3344]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s739], _value_s739);
[L2485]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2486]  COND FALSE  !(!(c_s26 >= a_s26))
[L2490]              __ret_0_ := c_s26;
[L3344]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s739], _value_s739);
[L3345]  COND FALSE  !(revert)
[L3348]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_to_s739];
[L3349]              balanceOf_TokenERC20[this][_to_s739] := __var_16;
[L3350]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_to_s739];
[L3351]              assert { :EventEmitted "Transfer_ERC20ext" } true;
[L2916]  RET         call _transfer~address~address~uint256_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L2917]  COND FALSE  !(revert)
[L2928]              success_s413 := true;
[L628]   RET         call success_s413 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L629]               assume !revert && gas >= 0;
[L5009]  RET         call success_s413 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L5099]  RET         call CorralChoice_ERC20ext(this);

[2020-11-25 15:09:37,763 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:09:37,763 INFO  L82        PathProgramCache]: Analyzing trace with hash -1593311353, now seen corresponding path program 1 times
[2020-11-25 15:09:37,764 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:09:37,788 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:09:38,020 INFO  L134       CoverageAnalysis]: Checked inductivity of 5 backedges. 0 proven. 4 refuted. 0 times theorem prover too weak. 1 trivial. 0 not checked.
[2020-11-25 15:09:38,021 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 15:09:38,021 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [20] total 20
[2020-11-25 15:09:38,021 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:09:38,021 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 21 interpolants.
[2020-11-25 15:09:38,021 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=52, Invalid=368, Unknown=0, NotChecked=0, Total=420
[2020-11-25 15:09:38,022 INFO  L87              Difference]: Start difference. First operand 3184 states and 3448 transitions. cyclomatic complexity: 266 Second operand 21 states.
[2020-11-25 15:09:40,551 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:09:40,551 INFO  L93              Difference]: Finished difference Result 3322 states and 3630 transitions.
[2020-11-25 15:09:40,551 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 21 states. 
[2020-11-25 15:09:40,551 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3322 states and 3630 transitions.
[2020-11-25 15:09:40,558 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:09:40,568 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3322 states to 3322 states and 3630 transitions.
[2020-11-25 15:09:40,568 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 941
[2020-11-25 15:09:40,568 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 941
[2020-11-25 15:09:40,568 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3322 states and 3630 transitions.
[2020-11-25 15:09:40,572 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:09:40,572 INFO  L728         BuchiCegarLoop]: Abstraction has 3322 states and 3630 transitions.
[2020-11-25 15:09:40,575 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3322 states and 3630 transitions.
[2020-11-25 15:09:40,599 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3322 to 3231.
[2020-11-25 15:09:40,599 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3231 states.
[2020-11-25 15:09:40,602 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3231 states to 3231 states and 3500 transitions.
[2020-11-25 15:09:40,602 INFO  L751         BuchiCegarLoop]: Abstraction has 3231 states and 3500 transitions.
[2020-11-25 15:09:40,602 INFO  L631         BuchiCegarLoop]: Abstraction has 3231 states and 3500 transitions.
[2020-11-25 15:09:40,602 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 15:09:40,602 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3231 states and 3500 transitions.
[2020-11-25 15:09:40,606 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:09:40,606 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:09:40,606 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:09:40,608 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:09:40,608 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_TokenERC200 := false;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]     CALL        call main();
[L5089]              assume null == 0;
[L5090]  CALL        call this := FreshRefGenerator__success();
[L2432]              havoc newRef;
[L2433]              assume Alloc[newRef] == false;
[L2434]              Alloc[newRef] := true;
[L2435]              assume newRef != null;
[L5090]  RET         call this := FreshRefGenerator__success();
[L5091]              assume now >= 0;
[L5092]              assume DType[this] == ERC20ext;
[L5093]              assume msgvalue_MSG == 0;
[L5094]              gas := gas - 53000;
[L5095]  CALL        call ERC20ext_ERC20ext(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L1360]              havoc __exception;
[L1361]              revert := false;
[L1362]  COND TRUE   __exception
[L1363]              __tmp__Balance := Balance;
[L1364]              __tmp__DType := DType;
[L1365]              __tmp__Alloc := Alloc;
[L1366]              __tmp__balance_ADDR := balance_ADDR;
[L1367]              __tmp__M_Ref_int := M_Ref_int;
[L1368]              __tmp__sum_balanceOf0 := sum_balanceOf0;
[L1369]              __tmp__alloc_allowance_TokenERC20_lvl0 := alloc_allowance_TokenERC20_lvl0;
[L1370]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1371]              __tmp__sum_allowance1 := sum_allowance1;
[L1372]              __tmp__M_Ref_bool := M_Ref_bool;
[L1373]              __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L1374]              __tmp__sum_lockedAccount3 := sum_lockedAccount3;
[L1375]              __tmp__sum_lockedAmount4 := sum_lockedAmount4;
[L1376]              __tmp__Length := Length;
[L1377]              __tmp__now := now;
[L1378]              __tmp__owner_owned := owner_owned;
[L1379]              __tmp__name_TokenERC20 := name_TokenERC20;
[L1380]              __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L1381]              __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L1382]              __tmp__totalSupply_TokenERC20 := totalSupply_TokenERC20;
[L1383]              __tmp__balanceOf_TokenERC20 := balanceOf_TokenERC20;
[L1384]              __tmp__allowance_TokenERC20 := allowance_TokenERC20;
[L1385]              __tmp__frozenAccount_ERC20ext := frozenAccount_ERC20ext;
[L1386]              __tmp__lockedAccount_ERC20ext := lockedAccount_ERC20ext;
[L1387]              __tmp__lockedAmount_ERC20ext := lockedAmount_ERC20ext;
[L1388]  CALL        call ERC20ext_ERC20ext__fail(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3231]  CALL        call owned_owned__fail(this, msgsender_MSG, msgvalue_MSG);
[L2616]  CALL        call owned_owned_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2597]              assume msgsender_MSG != null;
[L2598]              __tmp__Balance[this] := 0;
[L2599]              __tmp__owner_owned[this] := null;
[L2601]              __tmp__owner_owned[this] := msgsender_MSG;
[L2616]  RET         call owned_owned_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2617]  COND FALSE  !(revert)
[L3231]  RET         call owned_owned__fail(this, msgsender_MSG, msgvalue_MSG);
[L3232]  COND FALSE  !(revert)
[L3235]  CALL        call TokenERC20_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L2743]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, initialSupply_s258, tokenName_s258, tokenSymbol_s258);
[L2696]              assume msgsender_MSG != null;
[L2697]              __tmp__Balance[this] := 0;
[L2698]              __tmp__name_TokenERC20[this] := 1101944712;
[L2699]              __tmp__symbol_TokenERC20[this] := 1101944712;
[L2700]              __tmp__decimals_TokenERC20[this] := 18;
[L2701]              __tmp__totalSupply_TokenERC20[this] := 0;
[L2702]              __tmp__balanceOf_TokenERC20[this] := zeroRefintArr();
[L2703]              __tmp__sum_balanceOf0[this] := 0;
[L2704]              __tmp__allowance_TokenERC20[this] := zeroRefRefintArr();
[L2705]              __tmp__sum_allowance1[this] := 0;
[L2707]              __var_1 := __tmp__decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2708]              __tmp__totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s258, nonlinearPow(10, __tmp__decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2709]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] - __tmp__balanceOf_TokenERC20[this][msgsender_MSG];
[L2710]              __tmp__balanceOf_TokenERC20[this][msgsender_MSG] := __tmp__totalSupply_TokenERC20[this];
[L2711]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] + __tmp__balanceOf_TokenERC20[this][msgsender_MSG];
[L2712]              __tmp__name_TokenERC20[this] := tokenName_s258;
[L2713]              __tmp__symbol_TokenERC20[this] := tokenSymbol_s258;
[L2743]  RET         call TokenERC20_TokenERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, initialSupply_s258, tokenName_s258, tokenSymbol_s258);
[L2744]  COND FALSE  !(revert)
[L3235]  RET         call TokenERC20_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3236]  COND FALSE  !(revert)
[L3239]  CALL        call ERC20ext_ERC20ext_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3206]              assume msgsender_MSG != null;
[L3207]              __tmp__Balance[this] := 0;
[L3208]              __tmp__frozenAccount_ERC20ext[this] := zeroRefboolArr();
[L3209]              __tmp__lockedAccount_ERC20ext[this] := zeroRefintArr();
[L3210]              __tmp__sum_lockedAccount3[this] := 0;
[L3211]              __tmp__lockedAmount_ERC20ext[this] := zeroRefintArr();
[L3212]              __tmp__sum_lockedAmount4[this] := 0;
[L3239]  RET         call ERC20ext_ERC20ext_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3240]  COND FALSE  !(revert)
[L1388]  RET         call ERC20ext_ERC20ext__fail(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L1389]              assume revert || gas < 0;
[L5095]  RET         call ERC20ext_ERC20ext(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L5096]              assume !revert && gas >= 0;
[L5099]  CALL        call CorralChoice_ERC20ext(this);
[L4881]              havoc msgsender_MSG;
[L4882]              havoc msgvalue_MSG;
[L4883]              havoc choice;
[L4884]              havoc __ret_0_owner;
[L4885]              havoc newOwner_s166;
[L4886]              havoc __ret_0_name;
[L4887]              havoc __ret_0_symbol;
[L4888]              havoc __ret_0_decimals;
[L4889]              havoc __ret_0_totalSupply;
[L4890]              havoc arg835_s0;
[L4891]              havoc __ret_0_balanceOf;
[L4892]              havoc arg836_s0;
[L4893]              havoc arg837_s0;
[L4894]              havoc __ret_0_allowance;
[L4895]              havoc initialSupply_s258;
[L4896]              havoc tokenName_s258;
[L4897]              havoc tokenSymbol_s258;
[L4898]              havoc _to_s365;
[L4899]              havoc _value_s365;
[L4900]              havoc success_s365;
[L4901]              havoc _from_s413;
[L4902]              havoc _to_s413;
[L4903]              havoc _value_s413;
[L4904]              havoc success_s413;
[L4905]              havoc _spender_s441;
[L4906]              havoc _value_s441;
[L4907]              havoc success_s441;
[L4908]              havoc _spender_s479;
[L4909]              havoc _value_s479;
[L4910]              havoc _extraData_s479;
[L4911]              havoc success_s479;
[L4912]              havoc _value_s527;
[L4913]              havoc success_s527;
[L4914]              havoc _from_s598;
[L4915]              havoc _value_s598;
[L4916]              havoc success_s598;
[L4917]              havoc arg838_s0;
[L4918]              havoc __ret_0_frozenAccount;
[L4919]              havoc arg839_s0;
[L4920]              havoc __ret_0_lockedAccount;
[L4921]              havoc arg840_s0;
[L4922]              havoc __ret_0_lockedAmount;
[L4923]              havoc initialSupply_s639;
[L4924]              havoc tokenName_s639;
[L4925]              havoc tokenSymbol_s639;
[L4926]              havoc target_s779;
[L4927]              havoc mintedAmount_s779;
[L4928]              havoc success_s779;
[L4929]              havoc target_s804;
[L4930]              havoc freeze_s804;
[L4931]              havoc success_s804;
[L4932]              havoc target_s832;
[L4933]              havoc time_s832;
[L4934]              havoc amount_s832;
[L4935]              havoc success_s832;
[L4936]              havoc tmpNow;
[L4937]              havoc gas;
[L4938]              assume gas > 4000000 && gas <= 8000000;
[L4939]              tmpNow := now;
[L4940]              havoc now;
[L4941]              assume now > tmpNow;
[L4942]              assume msgsender_MSG != null;
[L4943]              assume DType[msgsender_MSG] != SafeMath;
[L4944]              assume DType[msgsender_MSG] != owned;
[L4945]              assume DType[msgsender_MSG] != tokenRecipient;
[L4946]              assume DType[msgsender_MSG] != TokenERC20;
[L4947]              assume DType[msgsender_MSG] != ERC20ext;
[L4948]              Alloc[msgsender_MSG] := true;
[L4949]  COND FALSE  !(choice == 20)
[L4955]  COND FALSE  !(choice == 19)
[L4961]  COND FALSE  !(choice == 18)
[L4967]  COND FALSE  !(choice == 17)
[L4973]  COND FALSE  !(choice == 16)
[L4979]  COND FALSE  !(choice == 15)
[L4985]  COND FALSE  !(choice == 14)
[L4991]  COND FALSE  !(choice == 13)
[L4997]  COND FALSE  !(choice == 12)
[L5004]  COND TRUE   choice == 11
[L5005]              gas := gas - 21000;
[L5006]  COND TRUE   gas >= 0
[L5007]              assume _value_s413 >= 0 && _value_s413 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5008]              assume msgvalue_MSG == 0;
[L5009]  CALL        call success_s413 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s413 == _to_s413 && (_value_s413 > balanceOf_TokenERC20[this][_from_s413] || _value_s413 > allowance_TokenERC20[this][_from_s413][msgsender_MSG])) && _value_s413 >= 0) && _value_s413 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s413] >= 0) && balanceOf_TokenERC20[this][_to_s413] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_from_s413] >= 0) && balanceOf_TokenERC20[this][_from_s413] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_TokenERC20[this][_from_s413][msgsender_MSG] >= 0) && allowance_TokenERC20[this][_from_s413][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_TokenERC200 := true;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L597]               havoc __exception;
[L598]               revert := false;
[L599]   COND FALSE  !(__exception)
[L628]   CALL        call success_s413 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L2904]  COND FALSE  !(!(_value_s413 <= allowance_TokenERC20[this][_from_s413][msgsender_MSG]))
[L2908]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowance_TokenERC20[this][_from_s413][msgsender_MSG], _value_s413);
[L2509]  COND FALSE  !(!(b_s51 <= a_s51))
[L2513]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2514]              __ret_0_ := c_s51;
[L2908]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowance_TokenERC20[this][_from_s413][msgsender_MSG], _value_s413);
[L2909]  COND FALSE  !(revert)
[L2912]              sum_allowance1[_from_s413] := sum_allowance1[_from_s413] - allowance_TokenERC20[this][_from_s413][msgsender_MSG];
[L2913]              allowance_TokenERC20[this][_from_s413][msgsender_MSG] := __var_5;
[L2914]              sum_allowance1[_from_s413] := sum_allowance1[_from_s413] + allowance_TokenERC20[this][_from_s413][msgsender_MSG];
[L2915]  COND TRUE   DType[this] == ERC20ext
[L2916]  CALL        call _transfer~address~address~uint256_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L3312]  COND FALSE  !(!(now > lockedAccount_ERC20ext[this][_from_s739] || (lockedAmount_ERC20ext[this][_from_s739] + _value_s739) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 < balanceOf_TokenERC20[this][_from_s739]))
[L3316]              __var_14 := null;
[L3317]  COND FALSE  !(!(_to_s739 != null))
[L3321]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s739] >= _value_s739))
[L3325]  COND FALSE  !(!((balanceOf_TokenERC20[this][_to_s739] + _value_s739) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= balanceOf_TokenERC20[this][_to_s739]))
[L3329]  COND FALSE  !(!!frozenAccount_ERC20ext[this][_from_s739])
[L3333]  COND FALSE  !(!!frozenAccount_ERC20ext[this][_to_s739])
[L3337]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s739], _value_s739);
[L2509]  COND FALSE  !(!(b_s51 <= a_s51))
[L2513]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2514]              __ret_0_ := c_s51;
[L3337]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s739], _value_s739);
[L3338]  COND FALSE  !(revert)
[L3341]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_from_s739];
[L3342]              balanceOf_TokenERC20[this][_from_s739] := __var_15;
[L3343]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_from_s739];
[L3344]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s739], _value_s739);
[L2485]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2486]  COND FALSE  !(!(c_s26 >= a_s26))
[L2490]              __ret_0_ := c_s26;
[L3344]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s739], _value_s739);
[L3345]  COND FALSE  !(revert)
[L3348]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_to_s739];
[L3349]              balanceOf_TokenERC20[this][_to_s739] := __var_16;
[L3350]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_to_s739];
[L3351]              assert { :EventEmitted "Transfer_ERC20ext" } true;
[L2916]  RET         call _transfer~address~address~uint256_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L2917]  COND FALSE  !(revert)
[L2928]              success_s413 := true;
[L628]   RET         call success_s413 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L629]               assume !revert && gas >= 0;
[L5009]  RET         call success_s413 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L5099]  RET         call CorralChoice_ERC20ext(this);

Loop:
[L5099]  CALL        call CorralChoice_ERC20ext(this);
[L4881]              havoc msgsender_MSG;
[L4882]              havoc msgvalue_MSG;
[L4883]              havoc choice;
[L4884]              havoc __ret_0_owner;
[L4885]              havoc newOwner_s166;
[L4886]              havoc __ret_0_name;
[L4887]              havoc __ret_0_symbol;
[L4888]              havoc __ret_0_decimals;
[L4889]              havoc __ret_0_totalSupply;
[L4890]              havoc arg835_s0;
[L4891]              havoc __ret_0_balanceOf;
[L4892]              havoc arg836_s0;
[L4893]              havoc arg837_s0;
[L4894]              havoc __ret_0_allowance;
[L4895]              havoc initialSupply_s258;
[L4896]              havoc tokenName_s258;
[L4897]              havoc tokenSymbol_s258;
[L4898]              havoc _to_s365;
[L4899]              havoc _value_s365;
[L4900]              havoc success_s365;
[L4901]              havoc _from_s413;
[L4902]              havoc _to_s413;
[L4903]              havoc _value_s413;
[L4904]              havoc success_s413;
[L4905]              havoc _spender_s441;
[L4906]              havoc _value_s441;
[L4907]              havoc success_s441;
[L4908]              havoc _spender_s479;
[L4909]              havoc _value_s479;
[L4910]              havoc _extraData_s479;
[L4911]              havoc success_s479;
[L4912]              havoc _value_s527;
[L4913]              havoc success_s527;
[L4914]              havoc _from_s598;
[L4915]              havoc _value_s598;
[L4916]              havoc success_s598;
[L4917]              havoc arg838_s0;
[L4918]              havoc __ret_0_frozenAccount;
[L4919]              havoc arg839_s0;
[L4920]              havoc __ret_0_lockedAccount;
[L4921]              havoc arg840_s0;
[L4922]              havoc __ret_0_lockedAmount;
[L4923]              havoc initialSupply_s639;
[L4924]              havoc tokenName_s639;
[L4925]              havoc tokenSymbol_s639;
[L4926]              havoc target_s779;
[L4927]              havoc mintedAmount_s779;
[L4928]              havoc success_s779;
[L4929]              havoc target_s804;
[L4930]              havoc freeze_s804;
[L4931]              havoc success_s804;
[L4932]              havoc target_s832;
[L4933]              havoc time_s832;
[L4934]              havoc amount_s832;
[L4935]              havoc success_s832;
[L4936]              havoc tmpNow;
[L4937]              havoc gas;
[L4938]              assume gas > 4000000 && gas <= 8000000;
[L4939]              tmpNow := now;
[L4940]              havoc now;
[L4941]              assume now > tmpNow;
[L4942]              assume msgsender_MSG != null;
[L4943]              assume DType[msgsender_MSG] != SafeMath;
[L4944]              assume DType[msgsender_MSG] != owned;
[L4945]              assume DType[msgsender_MSG] != tokenRecipient;
[L4946]              assume DType[msgsender_MSG] != TokenERC20;
[L4947]              assume DType[msgsender_MSG] != ERC20ext;
[L4948]              Alloc[msgsender_MSG] := true;
[L4949]  COND TRUE   choice == 20
[L4950]              gas := gas - 21000;
[L4951]  COND FALSE  !(gas >= 0)
[L5099]  RET         call CorralChoice_ERC20ext(this);

[2020-11-25 15:09:40,612 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:09:40,612 INFO  L82        PathProgramCache]: Analyzing trace with hash -1479762450, now seen corresponding path program 1 times
[2020-11-25 15:09:40,613 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:09:40,622 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:09:40,655 INFO  L134       CoverageAnalysis]: Checked inductivity of 5 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 5 trivial. 0 not checked.
[2020-11-25 15:09:40,655 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:09:40,655 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 15:09:40,655 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:09:40,656 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 15:09:40,656 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 15:09:40,656 INFO  L87              Difference]: Start difference. First operand 3231 states and 3500 transitions. cyclomatic complexity: 272 Second operand 4 states.
[2020-11-25 15:09:40,913 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:09:40,914 INFO  L93              Difference]: Finished difference Result 4051 states and 4526 transitions.
[2020-11-25 15:09:40,914 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 15:09:40,915 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4051 states and 4526 transitions.
[2020-11-25 15:09:40,929 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 15:09:40,944 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4051 states to 3958 states and 4433 transitions.
[2020-11-25 15:09:40,944 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1120
[2020-11-25 15:09:40,945 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1120
[2020-11-25 15:09:40,945 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3958 states and 4433 transitions.
[2020-11-25 15:09:40,950 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:09:40,950 INFO  L728         BuchiCegarLoop]: Abstraction has 3958 states and 4433 transitions.
[2020-11-25 15:09:40,954 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3958 states and 4433 transitions.
[2020-11-25 15:09:40,982 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3958 to 3138.
[2020-11-25 15:09:40,982 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3138 states.
[2020-11-25 15:09:40,986 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3138 states to 3138 states and 3406 transitions.
[2020-11-25 15:09:40,986 INFO  L751         BuchiCegarLoop]: Abstraction has 3138 states and 3406 transitions.
[2020-11-25 15:09:40,986 INFO  L631         BuchiCegarLoop]: Abstraction has 3138 states and 3406 transitions.
[2020-11-25 15:09:40,986 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 15:09:40,986 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3138 states and 3406 transitions.
[2020-11-25 15:09:40,991 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:09:40,992 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:09:40,992 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:09:40,994 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:09:40,994 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_TokenERC200 := false;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]     CALL        call main();
[L5089]              assume null == 0;
[L5090]  CALL        call this := FreshRefGenerator__success();
[L2432]              havoc newRef;
[L2433]              assume Alloc[newRef] == false;
[L2434]              Alloc[newRef] := true;
[L2435]              assume newRef != null;
[L5090]  RET         call this := FreshRefGenerator__success();
[L5091]              assume now >= 0;
[L5092]              assume DType[this] == ERC20ext;
[L5093]              assume msgvalue_MSG == 0;
[L5094]              gas := gas - 53000;
[L5095]  CALL        call ERC20ext_ERC20ext(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L1360]              havoc __exception;
[L1361]              revert := false;
[L1362]  COND FALSE  !(__exception)
[L1391]  CALL        call ERC20ext_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3247]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2624]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2607]              assume msgsender_MSG != null;
[L2608]              Balance[this] := 0;
[L2609]              owner_owned[this] := null;
[L2611]              owner_owned[this] := msgsender_MSG;
[L2624]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2625]  COND FALSE  !(revert)
[L3247]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3248]  COND FALSE  !(revert)
[L3251]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L2752]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s258, tokenName_s258, tokenSymbol_s258);
[L2720]              assume msgsender_MSG != null;
[L2721]              Balance[this] := 0;
[L2722]              name_TokenERC20[this] := 1101944712;
[L2723]              symbol_TokenERC20[this] := 1101944712;
[L2724]              decimals_TokenERC20[this] := 18;
[L2725]              totalSupply_TokenERC20[this] := 0;
[L2726]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L2727]              sum_balanceOf0[this] := 0;
[L2728]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L2729]              sum_allowance1[this] := 0;
[L2731]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2732]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s258, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L2734]              balanceOf_TokenERC20[this][msgsender_MSG] := totalSupply_TokenERC20[this];
[L2735]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L2736]              name_TokenERC20[this] := tokenName_s258;
[L2737]              symbol_TokenERC20[this] := tokenSymbol_s258;
[L2752]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s258, tokenName_s258, tokenSymbol_s258);
[L2753]  COND FALSE  !(revert)
[L3251]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3252]  COND FALSE  !(revert)
[L3255]  CALL        call ERC20ext_ERC20ext_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3219]              assume msgsender_MSG != null;
[L3220]              Balance[this] := 0;
[L3221]              frozenAccount_ERC20ext[this] := zeroRefboolArr();
[L3222]              lockedAccount_ERC20ext[this] := zeroRefintArr();
[L3223]              sum_lockedAccount3[this] := 0;
[L3224]              lockedAmount_ERC20ext[this] := zeroRefintArr();
[L3225]              sum_lockedAmount4[this] := 0;
[L3255]  RET         call ERC20ext_ERC20ext_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3256]  COND FALSE  !(revert)
[L1391]  RET         call ERC20ext_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L1392]              assume !revert && gas >= 0;
[L5095]  RET         call ERC20ext_ERC20ext(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L5096]              assume !revert && gas >= 0;
[L5099]  CALL        call CorralChoice_ERC20ext(this);
[L4881]              havoc msgsender_MSG;
[L4882]              havoc msgvalue_MSG;
[L4883]              havoc choice;
[L4884]              havoc __ret_0_owner;
[L4885]              havoc newOwner_s166;
[L4886]              havoc __ret_0_name;
[L4887]              havoc __ret_0_symbol;
[L4888]              havoc __ret_0_decimals;
[L4889]              havoc __ret_0_totalSupply;
[L4890]              havoc arg835_s0;
[L4891]              havoc __ret_0_balanceOf;
[L4892]              havoc arg836_s0;
[L4893]              havoc arg837_s0;
[L4894]              havoc __ret_0_allowance;
[L4895]              havoc initialSupply_s258;
[L4896]              havoc tokenName_s258;
[L4897]              havoc tokenSymbol_s258;
[L4898]              havoc _to_s365;
[L4899]              havoc _value_s365;
[L4900]              havoc success_s365;
[L4901]              havoc _from_s413;
[L4902]              havoc _to_s413;
[L4903]              havoc _value_s413;
[L4904]              havoc success_s413;
[L4905]              havoc _spender_s441;
[L4906]              havoc _value_s441;
[L4907]              havoc success_s441;
[L4908]              havoc _spender_s479;
[L4909]              havoc _value_s479;
[L4910]              havoc _extraData_s479;
[L4911]              havoc success_s479;
[L4912]              havoc _value_s527;
[L4913]              havoc success_s527;
[L4914]              havoc _from_s598;
[L4915]              havoc _value_s598;
[L4916]              havoc success_s598;
[L4917]              havoc arg838_s0;
[L4918]              havoc __ret_0_frozenAccount;
[L4919]              havoc arg839_s0;
[L4920]              havoc __ret_0_lockedAccount;
[L4921]              havoc arg840_s0;
[L4922]              havoc __ret_0_lockedAmount;
[L4923]              havoc initialSupply_s639;
[L4924]              havoc tokenName_s639;
[L4925]              havoc tokenSymbol_s639;
[L4926]              havoc target_s779;
[L4927]              havoc mintedAmount_s779;
[L4928]              havoc success_s779;
[L4929]              havoc target_s804;
[L4930]              havoc freeze_s804;
[L4931]              havoc success_s804;
[L4932]              havoc target_s832;
[L4933]              havoc time_s832;
[L4934]              havoc amount_s832;
[L4935]              havoc success_s832;
[L4936]              havoc tmpNow;
[L4937]              havoc gas;
[L4938]              assume gas > 4000000 && gas <= 8000000;
[L4939]              tmpNow := now;
[L4940]              havoc now;
[L4941]              assume now > tmpNow;
[L4942]              assume msgsender_MSG != null;
[L4943]              assume DType[msgsender_MSG] != SafeMath;
[L4944]              assume DType[msgsender_MSG] != owned;
[L4945]              assume DType[msgsender_MSG] != tokenRecipient;
[L4946]              assume DType[msgsender_MSG] != TokenERC20;
[L4947]              assume DType[msgsender_MSG] != ERC20ext;
[L4948]              Alloc[msgsender_MSG] := true;
[L4949]  COND FALSE  !(choice == 20)
[L4955]  COND FALSE  !(choice == 19)
[L4961]  COND FALSE  !(choice == 18)
[L4967]  COND FALSE  !(choice == 17)
[L4973]  COND FALSE  !(choice == 16)
[L4979]  COND FALSE  !(choice == 15)
[L4985]  COND FALSE  !(choice == 14)
[L4991]  COND FALSE  !(choice == 13)
[L4997]  COND FALSE  !(choice == 12)
[L5004]  COND FALSE  !(choice == 11)
[L5011]  COND TRUE   choice == 10
[L5012]              gas := gas - 21000;
[L5013]  COND TRUE   gas >= 0
[L5014]              assume _value_s441 >= 0 && _value_s441 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5015]              assume msgvalue_MSG == 0;
[L5016]  CALL        call success_s441 := approve~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _spender_s441, _value_s441);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L696]   CALL        call success_s441 := approve~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _spender_s441, _value_s441);
[L2943]              sum_allowance1[msgsender_MSG] := sum_allowance1[msgsender_MSG] - allowance_TokenERC20[this][msgsender_MSG][_spender_s441];
[L2944]              allowance_TokenERC20[this][msgsender_MSG][_spender_s441] := _value_s441;
[L2945]              sum_allowance1[msgsender_MSG] := sum_allowance1[msgsender_MSG] + allowance_TokenERC20[this][msgsender_MSG][_spender_s441];
[L2946]              assert { :EventEmitted "Approval_TokenERC20" } true;
[L2947]              success_s441 := true;
[L696]   RET         call success_s441 := approve~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _spender_s441, _value_s441);
[L697]               assume !revert && gas >= 0;
[L5016]  RET         call success_s441 := approve~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _spender_s441, _value_s441);
[L5099]  RET         call CorralChoice_ERC20ext(this);
[L5099]  CALL        call CorralChoice_ERC20ext(this);
[L4881]              havoc msgsender_MSG;
[L4882]              havoc msgvalue_MSG;
[L4883]              havoc choice;
[L4884]              havoc __ret_0_owner;
[L4885]              havoc newOwner_s166;
[L4886]              havoc __ret_0_name;
[L4887]              havoc __ret_0_symbol;
[L4888]              havoc __ret_0_decimals;
[L4889]              havoc __ret_0_totalSupply;
[L4890]              havoc arg835_s0;
[L4891]              havoc __ret_0_balanceOf;
[L4892]              havoc arg836_s0;
[L4893]              havoc arg837_s0;
[L4894]              havoc __ret_0_allowance;
[L4895]              havoc initialSupply_s258;
[L4896]              havoc tokenName_s258;
[L4897]              havoc tokenSymbol_s258;
[L4898]              havoc _to_s365;
[L4899]              havoc _value_s365;
[L4900]              havoc success_s365;
[L4901]              havoc _from_s413;
[L4902]              havoc _to_s413;
[L4903]              havoc _value_s413;
[L4904]              havoc success_s413;
[L4905]              havoc _spender_s441;
[L4906]              havoc _value_s441;
[L4907]              havoc success_s441;
[L4908]              havoc _spender_s479;
[L4909]              havoc _value_s479;
[L4910]              havoc _extraData_s479;
[L4911]              havoc success_s479;
[L4912]              havoc _value_s527;
[L4913]              havoc success_s527;
[L4914]              havoc _from_s598;
[L4915]              havoc _value_s598;
[L4916]              havoc success_s598;
[L4917]              havoc arg838_s0;
[L4918]              havoc __ret_0_frozenAccount;
[L4919]              havoc arg839_s0;
[L4920]              havoc __ret_0_lockedAccount;
[L4921]              havoc arg840_s0;
[L4922]              havoc __ret_0_lockedAmount;
[L4923]              havoc initialSupply_s639;
[L4924]              havoc tokenName_s639;
[L4925]              havoc tokenSymbol_s639;
[L4926]              havoc target_s779;
[L4927]              havoc mintedAmount_s779;
[L4928]              havoc success_s779;
[L4929]              havoc target_s804;
[L4930]              havoc freeze_s804;
[L4931]              havoc success_s804;
[L4932]              havoc target_s832;
[L4933]              havoc time_s832;
[L4934]              havoc amount_s832;
[L4935]              havoc success_s832;
[L4936]              havoc tmpNow;
[L4937]              havoc gas;
[L4938]              assume gas > 4000000 && gas <= 8000000;
[L4939]              tmpNow := now;
[L4940]              havoc now;
[L4941]              assume now > tmpNow;
[L4942]              assume msgsender_MSG != null;
[L4943]              assume DType[msgsender_MSG] != SafeMath;
[L4944]              assume DType[msgsender_MSG] != owned;
[L4945]              assume DType[msgsender_MSG] != tokenRecipient;
[L4946]              assume DType[msgsender_MSG] != TokenERC20;
[L4947]              assume DType[msgsender_MSG] != ERC20ext;
[L4948]              Alloc[msgsender_MSG] := true;
[L4949]  COND FALSE  !(choice == 20)
[L4955]  COND FALSE  !(choice == 19)
[L4961]  COND FALSE  !(choice == 18)
[L4967]  COND FALSE  !(choice == 17)
[L4973]  COND FALSE  !(choice == 16)
[L4979]  COND FALSE  !(choice == 15)
[L4985]  COND FALSE  !(choice == 14)
[L4991]  COND FALSE  !(choice == 13)
[L4997]  COND FALSE  !(choice == 12)
[L5004]  COND TRUE   choice == 11
[L5005]              gas := gas - 21000;
[L5006]  COND TRUE   gas >= 0
[L5007]              assume _value_s413 >= 0 && _value_s413 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5008]              assume msgvalue_MSG == 0;
[L5009]  CALL        call success_s413 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s413 == _to_s413 && (_value_s413 > balanceOf_TokenERC20[this][_from_s413] || _value_s413 > allowance_TokenERC20[this][_from_s413][msgsender_MSG])) && _value_s413 >= 0) && _value_s413 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s413] >= 0) && balanceOf_TokenERC20[this][_to_s413] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_from_s413] >= 0) && balanceOf_TokenERC20[this][_from_s413] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_TokenERC20[this][_from_s413][msgsender_MSG] >= 0) && allowance_TokenERC20[this][_from_s413][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_TokenERC200 := true;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L597]               havoc __exception;
[L598]               revert := false;
[L599]   COND FALSE  !(__exception)
[L628]   CALL        call success_s413 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L2904]  COND FALSE  !(!(_value_s413 <= allowance_TokenERC20[this][_from_s413][msgsender_MSG]))
[L2908]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowance_TokenERC20[this][_from_s413][msgsender_MSG], _value_s413);
[L2509]  COND FALSE  !(!(b_s51 <= a_s51))
[L2513]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2514]              __ret_0_ := c_s51;
[L2908]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowance_TokenERC20[this][_from_s413][msgsender_MSG], _value_s413);
[L2909]  COND FALSE  !(revert)
[L2912]              sum_allowance1[_from_s413] := sum_allowance1[_from_s413] - allowance_TokenERC20[this][_from_s413][msgsender_MSG];
[L2913]              allowance_TokenERC20[this][_from_s413][msgsender_MSG] := __var_5;
[L2914]              sum_allowance1[_from_s413] := sum_allowance1[_from_s413] + allowance_TokenERC20[this][_from_s413][msgsender_MSG];
[L2915]  COND TRUE   DType[this] == ERC20ext
[L2916]  CALL        call _transfer~address~address~uint256_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L3312]  COND FALSE  !(!(now > lockedAccount_ERC20ext[this][_from_s739] || (lockedAmount_ERC20ext[this][_from_s739] + _value_s739) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 < balanceOf_TokenERC20[this][_from_s739]))
[L3316]              __var_14 := null;
[L3317]  COND FALSE  !(!(_to_s739 != null))
[L3321]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s739] >= _value_s739))
[L3325]  COND FALSE  !(!((balanceOf_TokenERC20[this][_to_s739] + _value_s739) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= balanceOf_TokenERC20[this][_to_s739]))
[L3329]  COND FALSE  !(!!frozenAccount_ERC20ext[this][_from_s739])
[L3333]  COND FALSE  !(!!frozenAccount_ERC20ext[this][_to_s739])
[L3337]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s739], _value_s739);
[L2509]  COND FALSE  !(!(b_s51 <= a_s51))
[L2513]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2514]              __ret_0_ := c_s51;
[L3337]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s739], _value_s739);
[L3338]  COND FALSE  !(revert)
[L3341]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_from_s739];
[L3342]              balanceOf_TokenERC20[this][_from_s739] := __var_15;
[L3343]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_from_s739];
[L3344]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s739], _value_s739);
[L2485]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2486]  COND FALSE  !(!(c_s26 >= a_s26))
[L2490]              __ret_0_ := c_s26;
[L3344]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s739], _value_s739);
[L3345]  COND FALSE  !(revert)
[L3348]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_to_s739];
[L3349]              balanceOf_TokenERC20[this][_to_s739] := __var_16;
[L3350]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_to_s739];
[L3351]              assert { :EventEmitted "Transfer_ERC20ext" } true;
[L2916]  RET         call _transfer~address~address~uint256_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L2917]  COND FALSE  !(revert)
[L2928]              success_s413 := true;
[L628]   RET         call success_s413 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L629]               assume !revert && gas >= 0;
[L5009]  RET         call success_s413 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L5099]  RET         call CorralChoice_ERC20ext(this);

Loop:
[L5099]  CALL        call CorralChoice_ERC20ext(this);
[L4881]              havoc msgsender_MSG;
[L4882]              havoc msgvalue_MSG;
[L4883]              havoc choice;
[L4884]              havoc __ret_0_owner;
[L4885]              havoc newOwner_s166;
[L4886]              havoc __ret_0_name;
[L4887]              havoc __ret_0_symbol;
[L4888]              havoc __ret_0_decimals;
[L4889]              havoc __ret_0_totalSupply;
[L4890]              havoc arg835_s0;
[L4891]              havoc __ret_0_balanceOf;
[L4892]              havoc arg836_s0;
[L4893]              havoc arg837_s0;
[L4894]              havoc __ret_0_allowance;
[L4895]              havoc initialSupply_s258;
[L4896]              havoc tokenName_s258;
[L4897]              havoc tokenSymbol_s258;
[L4898]              havoc _to_s365;
[L4899]              havoc _value_s365;
[L4900]              havoc success_s365;
[L4901]              havoc _from_s413;
[L4902]              havoc _to_s413;
[L4903]              havoc _value_s413;
[L4904]              havoc success_s413;
[L4905]              havoc _spender_s441;
[L4906]              havoc _value_s441;
[L4907]              havoc success_s441;
[L4908]              havoc _spender_s479;
[L4909]              havoc _value_s479;
[L4910]              havoc _extraData_s479;
[L4911]              havoc success_s479;
[L4912]              havoc _value_s527;
[L4913]              havoc success_s527;
[L4914]              havoc _from_s598;
[L4915]              havoc _value_s598;
[L4916]              havoc success_s598;
[L4917]              havoc arg838_s0;
[L4918]              havoc __ret_0_frozenAccount;
[L4919]              havoc arg839_s0;
[L4920]              havoc __ret_0_lockedAccount;
[L4921]              havoc arg840_s0;
[L4922]              havoc __ret_0_lockedAmount;
[L4923]              havoc initialSupply_s639;
[L4924]              havoc tokenName_s639;
[L4925]              havoc tokenSymbol_s639;
[L4926]              havoc target_s779;
[L4927]              havoc mintedAmount_s779;
[L4928]              havoc success_s779;
[L4929]              havoc target_s804;
[L4930]              havoc freeze_s804;
[L4931]              havoc success_s804;
[L4932]              havoc target_s832;
[L4933]              havoc time_s832;
[L4934]              havoc amount_s832;
[L4935]              havoc success_s832;
[L4936]              havoc tmpNow;
[L4937]              havoc gas;
[L4938]              assume gas > 4000000 && gas <= 8000000;
[L4939]              tmpNow := now;
[L4940]              havoc now;
[L4941]              assume now > tmpNow;
[L4942]              assume msgsender_MSG != null;
[L4943]              assume DType[msgsender_MSG] != SafeMath;
[L4944]              assume DType[msgsender_MSG] != owned;
[L4945]              assume DType[msgsender_MSG] != tokenRecipient;
[L4946]              assume DType[msgsender_MSG] != TokenERC20;
[L4947]              assume DType[msgsender_MSG] != ERC20ext;
[L4948]              Alloc[msgsender_MSG] := true;
[L4949]  COND FALSE  !(choice == 20)
[L4955]  COND FALSE  !(choice == 19)
[L4961]  COND FALSE  !(choice == 18)
[L4967]  COND FALSE  !(choice == 17)
[L4973]  COND FALSE  !(choice == 16)
[L4979]  COND FALSE  !(choice == 15)
[L4985]  COND FALSE  !(choice == 14)
[L4991]  COND FALSE  !(choice == 13)
[L4997]  COND FALSE  !(choice == 12)
[L5004]  COND TRUE   choice == 11
[L5005]              gas := gas - 21000;
[L5006]  COND TRUE   gas >= 0
[L5007]              assume _value_s413 >= 0 && _value_s413 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5008]              assume msgvalue_MSG == 0;
[L5009]  CALL        call success_s413 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s413 == _to_s413 && (_value_s413 > balanceOf_TokenERC20[this][_from_s413] || _value_s413 > allowance_TokenERC20[this][_from_s413][msgsender_MSG])) && _value_s413 >= 0) && _value_s413 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s413] >= 0) && balanceOf_TokenERC20[this][_to_s413] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_from_s413] >= 0) && balanceOf_TokenERC20[this][_from_s413] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_TokenERC20[this][_from_s413][msgsender_MSG] >= 0) && allowance_TokenERC20[this][_from_s413][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_TokenERC200 := true;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L597]               havoc __exception;
[L598]               revert := false;
[L599]   COND FALSE  !(__exception)
[L628]   CALL        call success_s413 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L2904]  COND FALSE  !(!(_value_s413 <= allowance_TokenERC20[this][_from_s413][msgsender_MSG]))
[L2908]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowance_TokenERC20[this][_from_s413][msgsender_MSG], _value_s413);
[L2509]  COND FALSE  !(!(b_s51 <= a_s51))
[L2513]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2514]              __ret_0_ := c_s51;
[L2908]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowance_TokenERC20[this][_from_s413][msgsender_MSG], _value_s413);
[L2909]  COND FALSE  !(revert)
[L2912]              sum_allowance1[_from_s413] := sum_allowance1[_from_s413] - allowance_TokenERC20[this][_from_s413][msgsender_MSG];
[L2913]              allowance_TokenERC20[this][_from_s413][msgsender_MSG] := __var_5;
[L2914]              sum_allowance1[_from_s413] := sum_allowance1[_from_s413] + allowance_TokenERC20[this][_from_s413][msgsender_MSG];
[L2915]  COND TRUE   DType[this] == ERC20ext
[L2916]  CALL        call _transfer~address~address~uint256_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L3312]  COND FALSE  !(!(now > lockedAccount_ERC20ext[this][_from_s739] || (lockedAmount_ERC20ext[this][_from_s739] + _value_s739) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 < balanceOf_TokenERC20[this][_from_s739]))
[L3316]              __var_14 := null;
[L3317]  COND FALSE  !(!(_to_s739 != null))
[L3321]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s739] >= _value_s739))
[L3325]  COND FALSE  !(!((balanceOf_TokenERC20[this][_to_s739] + _value_s739) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= balanceOf_TokenERC20[this][_to_s739]))
[L3329]  COND FALSE  !(!!frozenAccount_ERC20ext[this][_from_s739])
[L3333]  COND FALSE  !(!!frozenAccount_ERC20ext[this][_to_s739])
[L3337]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s739], _value_s739);
[L2509]  COND FALSE  !(!(b_s51 <= a_s51))
[L2513]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2514]              __ret_0_ := c_s51;
[L3337]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s739], _value_s739);
[L3338]  COND FALSE  !(revert)
[L3341]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_from_s739];
[L3342]              balanceOf_TokenERC20[this][_from_s739] := __var_15;
[L3343]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_from_s739];
[L3344]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s739], _value_s739);
[L2485]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2486]  COND FALSE  !(!(c_s26 >= a_s26))
[L2490]              __ret_0_ := c_s26;
[L3344]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s739], _value_s739);
[L3345]  COND FALSE  !(revert)
[L3348]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_to_s739];
[L3349]              balanceOf_TokenERC20[this][_to_s739] := __var_16;
[L3350]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_to_s739];
[L3351]              assert { :EventEmitted "Transfer_ERC20ext" } true;
[L2916]  RET         call _transfer~address~address~uint256_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L2917]  COND FALSE  !(revert)
[L2928]              success_s413 := true;
[L628]   RET         call success_s413 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L629]               assume !revert && gas >= 0;
[L5009]  RET         call success_s413 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L5099]  RET         call CorralChoice_ERC20ext(this);

[2020-11-25 15:09:41,000 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:09:41,000 INFO  L82        PathProgramCache]: Analyzing trace with hash 554677790, now seen corresponding path program 1 times
[2020-11-25 15:09:41,001 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:09:41,020 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:09:41,117 INFO  L134       CoverageAnalysis]: Checked inductivity of 85 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 85 trivial. 0 not checked.
[2020-11-25 15:09:41,118 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:09:41,118 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [11] imperfect sequences [] total 11
[2020-11-25 15:09:41,118 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:09:41,118 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-11-25 15:09:41,118 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=26, Invalid=84, Unknown=0, NotChecked=0, Total=110
[2020-11-25 15:09:41,118 INFO  L87              Difference]: Start difference. First operand 3138 states and 3406 transitions. cyclomatic complexity: 271 Second operand 11 states.
[2020-11-25 15:09:42,427 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:09:42,427 INFO  L93              Difference]: Finished difference Result 3218 states and 3490 transitions.
[2020-11-25 15:09:42,427 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-11-25 15:09:42,427 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3218 states and 3490 transitions.
[2020-11-25 15:09:42,433 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:09:42,440 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3218 states to 3218 states and 3490 transitions.
[2020-11-25 15:09:42,440 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 937
[2020-11-25 15:09:42,441 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 937
[2020-11-25 15:09:42,441 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3218 states and 3490 transitions.
[2020-11-25 15:09:42,443 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:09:42,443 INFO  L728         BuchiCegarLoop]: Abstraction has 3218 states and 3490 transitions.
[2020-11-25 15:09:42,446 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3218 states and 3490 transitions.
[2020-11-25 15:09:42,460 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3218 to 3144.
[2020-11-25 15:09:42,460 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3144 states.
[2020-11-25 15:09:42,463 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3144 states to 3144 states and 3412 transitions.
[2020-11-25 15:09:42,463 INFO  L751         BuchiCegarLoop]: Abstraction has 3144 states and 3412 transitions.
[2020-11-25 15:09:42,463 INFO  L631         BuchiCegarLoop]: Abstraction has 3144 states and 3412 transitions.
[2020-11-25 15:09:42,463 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 15:09:42,463 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3144 states and 3412 transitions.
[2020-11-25 15:09:42,466 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:09:42,467 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:09:42,467 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:09:42,468 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:09:42,468 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_TokenERC200 := false;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]     CALL        call main();
[L5089]              assume null == 0;
[L5090]  CALL        call this := FreshRefGenerator__success();
[L2432]              havoc newRef;
[L2433]              assume Alloc[newRef] == false;
[L2434]              Alloc[newRef] := true;
[L2435]              assume newRef != null;
[L5090]  RET         call this := FreshRefGenerator__success();
[L5091]              assume now >= 0;
[L5092]              assume DType[this] == ERC20ext;
[L5093]              assume msgvalue_MSG == 0;
[L5094]              gas := gas - 53000;
[L5095]  CALL        call ERC20ext_ERC20ext(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L1360]              havoc __exception;
[L1361]              revert := false;
[L1362]  COND FALSE  !(__exception)
[L1391]  CALL        call ERC20ext_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3247]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2624]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2607]              assume msgsender_MSG != null;
[L2608]              Balance[this] := 0;
[L2609]              owner_owned[this] := null;
[L2611]              owner_owned[this] := msgsender_MSG;
[L2624]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2625]  COND FALSE  !(revert)
[L3247]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3248]  COND FALSE  !(revert)
[L3251]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L2752]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s258, tokenName_s258, tokenSymbol_s258);
[L2720]              assume msgsender_MSG != null;
[L2721]              Balance[this] := 0;
[L2722]              name_TokenERC20[this] := 1101944712;
[L2723]              symbol_TokenERC20[this] := 1101944712;
[L2724]              decimals_TokenERC20[this] := 18;
[L2725]              totalSupply_TokenERC20[this] := 0;
[L2726]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L2727]              sum_balanceOf0[this] := 0;
[L2728]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L2729]              sum_allowance1[this] := 0;
[L2731]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2732]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s258, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L2734]              balanceOf_TokenERC20[this][msgsender_MSG] := totalSupply_TokenERC20[this];
[L2735]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L2736]              name_TokenERC20[this] := tokenName_s258;
[L2737]              symbol_TokenERC20[this] := tokenSymbol_s258;
[L2752]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s258, tokenName_s258, tokenSymbol_s258);
[L2753]  COND FALSE  !(revert)
[L3251]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3252]  COND FALSE  !(revert)
[L3255]  CALL        call ERC20ext_ERC20ext_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3219]              assume msgsender_MSG != null;
[L3220]              Balance[this] := 0;
[L3221]              frozenAccount_ERC20ext[this] := zeroRefboolArr();
[L3222]              lockedAccount_ERC20ext[this] := zeroRefintArr();
[L3223]              sum_lockedAccount3[this] := 0;
[L3224]              lockedAmount_ERC20ext[this] := zeroRefintArr();
[L3225]              sum_lockedAmount4[this] := 0;
[L3255]  RET         call ERC20ext_ERC20ext_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3256]  COND FALSE  !(revert)
[L1391]  RET         call ERC20ext_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L1392]              assume !revert && gas >= 0;
[L5095]  RET         call ERC20ext_ERC20ext(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L5096]              assume !revert && gas >= 0;
[L5099]  CALL        call CorralChoice_ERC20ext(this);
[L4881]              havoc msgsender_MSG;
[L4882]              havoc msgvalue_MSG;
[L4883]              havoc choice;
[L4884]              havoc __ret_0_owner;
[L4885]              havoc newOwner_s166;
[L4886]              havoc __ret_0_name;
[L4887]              havoc __ret_0_symbol;
[L4888]              havoc __ret_0_decimals;
[L4889]              havoc __ret_0_totalSupply;
[L4890]              havoc arg835_s0;
[L4891]              havoc __ret_0_balanceOf;
[L4892]              havoc arg836_s0;
[L4893]              havoc arg837_s0;
[L4894]              havoc __ret_0_allowance;
[L4895]              havoc initialSupply_s258;
[L4896]              havoc tokenName_s258;
[L4897]              havoc tokenSymbol_s258;
[L4898]              havoc _to_s365;
[L4899]              havoc _value_s365;
[L4900]              havoc success_s365;
[L4901]              havoc _from_s413;
[L4902]              havoc _to_s413;
[L4903]              havoc _value_s413;
[L4904]              havoc success_s413;
[L4905]              havoc _spender_s441;
[L4906]              havoc _value_s441;
[L4907]              havoc success_s441;
[L4908]              havoc _spender_s479;
[L4909]              havoc _value_s479;
[L4910]              havoc _extraData_s479;
[L4911]              havoc success_s479;
[L4912]              havoc _value_s527;
[L4913]              havoc success_s527;
[L4914]              havoc _from_s598;
[L4915]              havoc _value_s598;
[L4916]              havoc success_s598;
[L4917]              havoc arg838_s0;
[L4918]              havoc __ret_0_frozenAccount;
[L4919]              havoc arg839_s0;
[L4920]              havoc __ret_0_lockedAccount;
[L4921]              havoc arg840_s0;
[L4922]              havoc __ret_0_lockedAmount;
[L4923]              havoc initialSupply_s639;
[L4924]              havoc tokenName_s639;
[L4925]              havoc tokenSymbol_s639;
[L4926]              havoc target_s779;
[L4927]              havoc mintedAmount_s779;
[L4928]              havoc success_s779;
[L4929]              havoc target_s804;
[L4930]              havoc freeze_s804;
[L4931]              havoc success_s804;
[L4932]              havoc target_s832;
[L4933]              havoc time_s832;
[L4934]              havoc amount_s832;
[L4935]              havoc success_s832;
[L4936]              havoc tmpNow;
[L4937]              havoc gas;
[L4938]              assume gas > 4000000 && gas <= 8000000;
[L4939]              tmpNow := now;
[L4940]              havoc now;
[L4941]              assume now > tmpNow;
[L4942]              assume msgsender_MSG != null;
[L4943]              assume DType[msgsender_MSG] != SafeMath;
[L4944]              assume DType[msgsender_MSG] != owned;
[L4945]              assume DType[msgsender_MSG] != tokenRecipient;
[L4946]              assume DType[msgsender_MSG] != TokenERC20;
[L4947]              assume DType[msgsender_MSG] != ERC20ext;
[L4948]              Alloc[msgsender_MSG] := true;
[L4949]  COND FALSE  !(choice == 20)
[L4955]  COND FALSE  !(choice == 19)
[L4961]  COND FALSE  !(choice == 18)
[L4967]  COND FALSE  !(choice == 17)
[L4973]  COND FALSE  !(choice == 16)
[L4979]  COND FALSE  !(choice == 15)
[L4985]  COND FALSE  !(choice == 14)
[L4991]  COND FALSE  !(choice == 13)
[L4997]  COND FALSE  !(choice == 12)
[L5004]  COND FALSE  !(choice == 11)
[L5011]  COND TRUE   choice == 10
[L5012]              gas := gas - 21000;
[L5013]  COND TRUE   gas >= 0
[L5014]              assume _value_s441 >= 0 && _value_s441 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5015]              assume msgvalue_MSG == 0;
[L5016]  CALL        call success_s441 := approve~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _spender_s441, _value_s441);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L696]   CALL        call success_s441 := approve~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _spender_s441, _value_s441);
[L2943]              sum_allowance1[msgsender_MSG] := sum_allowance1[msgsender_MSG] - allowance_TokenERC20[this][msgsender_MSG][_spender_s441];
[L2944]              allowance_TokenERC20[this][msgsender_MSG][_spender_s441] := _value_s441;
[L2945]              sum_allowance1[msgsender_MSG] := sum_allowance1[msgsender_MSG] + allowance_TokenERC20[this][msgsender_MSG][_spender_s441];
[L2946]              assert { :EventEmitted "Approval_TokenERC20" } true;
[L2947]              success_s441 := true;
[L696]   RET         call success_s441 := approve~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _spender_s441, _value_s441);
[L697]               assume !revert && gas >= 0;
[L5016]  RET         call success_s441 := approve~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _spender_s441, _value_s441);
[L5099]  RET         call CorralChoice_ERC20ext(this);
[L5099]  CALL        call CorralChoice_ERC20ext(this);
[L4881]              havoc msgsender_MSG;
[L4882]              havoc msgvalue_MSG;
[L4883]              havoc choice;
[L4884]              havoc __ret_0_owner;
[L4885]              havoc newOwner_s166;
[L4886]              havoc __ret_0_name;
[L4887]              havoc __ret_0_symbol;
[L4888]              havoc __ret_0_decimals;
[L4889]              havoc __ret_0_totalSupply;
[L4890]              havoc arg835_s0;
[L4891]              havoc __ret_0_balanceOf;
[L4892]              havoc arg836_s0;
[L4893]              havoc arg837_s0;
[L4894]              havoc __ret_0_allowance;
[L4895]              havoc initialSupply_s258;
[L4896]              havoc tokenName_s258;
[L4897]              havoc tokenSymbol_s258;
[L4898]              havoc _to_s365;
[L4899]              havoc _value_s365;
[L4900]              havoc success_s365;
[L4901]              havoc _from_s413;
[L4902]              havoc _to_s413;
[L4903]              havoc _value_s413;
[L4904]              havoc success_s413;
[L4905]              havoc _spender_s441;
[L4906]              havoc _value_s441;
[L4907]              havoc success_s441;
[L4908]              havoc _spender_s479;
[L4909]              havoc _value_s479;
[L4910]              havoc _extraData_s479;
[L4911]              havoc success_s479;
[L4912]              havoc _value_s527;
[L4913]              havoc success_s527;
[L4914]              havoc _from_s598;
[L4915]              havoc _value_s598;
[L4916]              havoc success_s598;
[L4917]              havoc arg838_s0;
[L4918]              havoc __ret_0_frozenAccount;
[L4919]              havoc arg839_s0;
[L4920]              havoc __ret_0_lockedAccount;
[L4921]              havoc arg840_s0;
[L4922]              havoc __ret_0_lockedAmount;
[L4923]              havoc initialSupply_s639;
[L4924]              havoc tokenName_s639;
[L4925]              havoc tokenSymbol_s639;
[L4926]              havoc target_s779;
[L4927]              havoc mintedAmount_s779;
[L4928]              havoc success_s779;
[L4929]              havoc target_s804;
[L4930]              havoc freeze_s804;
[L4931]              havoc success_s804;
[L4932]              havoc target_s832;
[L4933]              havoc time_s832;
[L4934]              havoc amount_s832;
[L4935]              havoc success_s832;
[L4936]              havoc tmpNow;
[L4937]              havoc gas;
[L4938]              assume gas > 4000000 && gas <= 8000000;
[L4939]              tmpNow := now;
[L4940]              havoc now;
[L4941]              assume now > tmpNow;
[L4942]              assume msgsender_MSG != null;
[L4943]              assume DType[msgsender_MSG] != SafeMath;
[L4944]              assume DType[msgsender_MSG] != owned;
[L4945]              assume DType[msgsender_MSG] != tokenRecipient;
[L4946]              assume DType[msgsender_MSG] != TokenERC20;
[L4947]              assume DType[msgsender_MSG] != ERC20ext;
[L4948]              Alloc[msgsender_MSG] := true;
[L4949]  COND FALSE  !(choice == 20)
[L4955]  COND FALSE  !(choice == 19)
[L4961]  COND FALSE  !(choice == 18)
[L4967]  COND FALSE  !(choice == 17)
[L4973]  COND FALSE  !(choice == 16)
[L4979]  COND FALSE  !(choice == 15)
[L4985]  COND FALSE  !(choice == 14)
[L4991]  COND FALSE  !(choice == 13)
[L4997]  COND FALSE  !(choice == 12)
[L5004]  COND TRUE   choice == 11
[L5005]              gas := gas - 21000;
[L5006]  COND TRUE   gas >= 0
[L5007]              assume _value_s413 >= 0 && _value_s413 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5008]              assume msgvalue_MSG == 0;
[L5009]  CALL        call success_s413 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s413 == _to_s413 && (_value_s413 > balanceOf_TokenERC20[this][_from_s413] || _value_s413 > allowance_TokenERC20[this][_from_s413][msgsender_MSG])) && _value_s413 >= 0) && _value_s413 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s413] >= 0) && balanceOf_TokenERC20[this][_to_s413] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_from_s413] >= 0) && balanceOf_TokenERC20[this][_from_s413] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_TokenERC20[this][_from_s413][msgsender_MSG] >= 0) && allowance_TokenERC20[this][_from_s413][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_TokenERC200 := true;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L597]               havoc __exception;
[L598]               revert := false;
[L599]   COND FALSE  !(__exception)
[L628]   CALL        call success_s413 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L2904]  COND FALSE  !(!(_value_s413 <= allowance_TokenERC20[this][_from_s413][msgsender_MSG]))
[L2908]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowance_TokenERC20[this][_from_s413][msgsender_MSG], _value_s413);
[L2509]  COND FALSE  !(!(b_s51 <= a_s51))
[L2513]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2514]              __ret_0_ := c_s51;
[L2908]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowance_TokenERC20[this][_from_s413][msgsender_MSG], _value_s413);
[L2909]  COND FALSE  !(revert)
[L2912]              sum_allowance1[_from_s413] := sum_allowance1[_from_s413] - allowance_TokenERC20[this][_from_s413][msgsender_MSG];
[L2913]              allowance_TokenERC20[this][_from_s413][msgsender_MSG] := __var_5;
[L2914]              sum_allowance1[_from_s413] := sum_allowance1[_from_s413] + allowance_TokenERC20[this][_from_s413][msgsender_MSG];
[L2915]  COND FALSE  !(DType[this] == ERC20ext)
[L2920]  COND TRUE   DType[this] == TokenERC20
[L2921]  CALL        call _transfer~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L2800]              __var_2 := null;
[L2801]  COND FALSE  !(!(_to_s346 != null))
[L2805]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s346] >= _value_s346))
[L2809]  COND FALSE  !(!((balanceOf_TokenERC20[this][_to_s346] + _value_s346) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 > balanceOf_TokenERC20[this][_to_s346]))
[L2813]              previousBalances_s346 := (balanceOf_TokenERC20[this][_from_s346] + balanceOf_TokenERC20[this][_to_s346]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2814]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s346], _value_s346);
[L2509]  COND FALSE  !(!(b_s51 <= a_s51))
[L2513]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2514]              __ret_0_ := c_s51;
[L2814]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s346], _value_s346);
[L2815]  COND FALSE  !(revert)
[L2818]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_from_s346];
[L2819]              balanceOf_TokenERC20[this][_from_s346] := __var_3;
[L2820]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_from_s346];
[L2821]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s346], _value_s346);
[L2485]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2486]  COND FALSE  !(!(c_s26 >= a_s26))
[L2490]              __ret_0_ := c_s26;
[L2821]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s346], _value_s346);
[L2822]  COND FALSE  !(revert)
[L2825]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_to_s346];
[L2826]              balanceOf_TokenERC20[this][_to_s346] := __var_4;
[L2827]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_to_s346];
[L2828]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L2829]              assert (balanceOf_TokenERC20[this][_from_s346] + balanceOf_TokenERC20[this][_to_s346]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == previousBalances_s346;
[L2921]  RET         call _transfer~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L2922]  COND FALSE  !(revert)
[L2928]              success_s413 := true;
[L628]   RET         call success_s413 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L629]               assume !revert && gas >= 0;
[L5009]  RET         call success_s413 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L5099]  RET         call CorralChoice_ERC20ext(this);

Loop:
[L5099]  CALL        call CorralChoice_ERC20ext(this);
[L4881]              havoc msgsender_MSG;
[L4882]              havoc msgvalue_MSG;
[L4883]              havoc choice;
[L4884]              havoc __ret_0_owner;
[L4885]              havoc newOwner_s166;
[L4886]              havoc __ret_0_name;
[L4887]              havoc __ret_0_symbol;
[L4888]              havoc __ret_0_decimals;
[L4889]              havoc __ret_0_totalSupply;
[L4890]              havoc arg835_s0;
[L4891]              havoc __ret_0_balanceOf;
[L4892]              havoc arg836_s0;
[L4893]              havoc arg837_s0;
[L4894]              havoc __ret_0_allowance;
[L4895]              havoc initialSupply_s258;
[L4896]              havoc tokenName_s258;
[L4897]              havoc tokenSymbol_s258;
[L4898]              havoc _to_s365;
[L4899]              havoc _value_s365;
[L4900]              havoc success_s365;
[L4901]              havoc _from_s413;
[L4902]              havoc _to_s413;
[L4903]              havoc _value_s413;
[L4904]              havoc success_s413;
[L4905]              havoc _spender_s441;
[L4906]              havoc _value_s441;
[L4907]              havoc success_s441;
[L4908]              havoc _spender_s479;
[L4909]              havoc _value_s479;
[L4910]              havoc _extraData_s479;
[L4911]              havoc success_s479;
[L4912]              havoc _value_s527;
[L4913]              havoc success_s527;
[L4914]              havoc _from_s598;
[L4915]              havoc _value_s598;
[L4916]              havoc success_s598;
[L4917]              havoc arg838_s0;
[L4918]              havoc __ret_0_frozenAccount;
[L4919]              havoc arg839_s0;
[L4920]              havoc __ret_0_lockedAccount;
[L4921]              havoc arg840_s0;
[L4922]              havoc __ret_0_lockedAmount;
[L4923]              havoc initialSupply_s639;
[L4924]              havoc tokenName_s639;
[L4925]              havoc tokenSymbol_s639;
[L4926]              havoc target_s779;
[L4927]              havoc mintedAmount_s779;
[L4928]              havoc success_s779;
[L4929]              havoc target_s804;
[L4930]              havoc freeze_s804;
[L4931]              havoc success_s804;
[L4932]              havoc target_s832;
[L4933]              havoc time_s832;
[L4934]              havoc amount_s832;
[L4935]              havoc success_s832;
[L4936]              havoc tmpNow;
[L4937]              havoc gas;
[L4938]              assume gas > 4000000 && gas <= 8000000;
[L4939]              tmpNow := now;
[L4940]              havoc now;
[L4941]              assume now > tmpNow;
[L4942]              assume msgsender_MSG != null;
[L4943]              assume DType[msgsender_MSG] != SafeMath;
[L4944]              assume DType[msgsender_MSG] != owned;
[L4945]              assume DType[msgsender_MSG] != tokenRecipient;
[L4946]              assume DType[msgsender_MSG] != TokenERC20;
[L4947]              assume DType[msgsender_MSG] != ERC20ext;
[L4948]              Alloc[msgsender_MSG] := true;
[L4949]  COND TRUE   choice == 20
[L4950]              gas := gas - 21000;
[L4951]  COND FALSE  !(gas >= 0)
[L5099]  RET         call CorralChoice_ERC20ext(this);

[2020-11-25 15:09:42,472 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:09:42,472 INFO  L82        PathProgramCache]: Analyzing trace with hash 1052884145, now seen corresponding path program 1 times
[2020-11-25 15:09:42,472 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:09:42,484 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:09:42,528 INFO  L134       CoverageAnalysis]: Checked inductivity of 85 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 85 trivial. 0 not checked.
[2020-11-25 15:09:42,528 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:09:42,528 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 15:09:42,529 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:09:42,529 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 15:09:42,529 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 15:09:42,529 INFO  L87              Difference]: Start difference. First operand 3144 states and 3412 transitions. cyclomatic complexity: 271 Second operand 6 states.
[2020-11-25 15:09:42,554 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:09:42,554 INFO  L93              Difference]: Finished difference Result 1762 states and 1902 transitions.
[2020-11-25 15:09:42,554 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 15:09:42,554 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1762 states and 1902 transitions.
[2020-11-25 15:09:42,556 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 15:09:42,556 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1762 states to 0 states and 0 transitions.
[2020-11-25 15:09:42,556 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 15:09:42,556 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 15:09:42,556 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 15:09:42,556 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:09:42,556 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 15:09:42,556 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 15:09:42,557 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 15:09:42,557 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 15:09:42,557 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 15:09:42,557 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 15:09:42,557 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 15:09:42,560 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 03:09:42 BasicIcfg
[2020-11-25 15:09:42,560 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 15:09:42,560 INFO  L168              Benchmark]: Toolchain (without parser) took 9203.69 ms. Allocated memory was 1.0 GB in the beginning and 1.8 GB in the end (delta: 803.7 MB). Free memory was 935.2 MB in the beginning and 1.1 GB in the end (delta: -140.4 MB). Peak memory consumption was 663.3 MB. Max. memory is 15.3 GB.
[2020-11-25 15:09:42,561 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 15:09:42,562 INFO  L168              Benchmark]: Boogie Preprocessor took 106.91 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 15:09:42,562 INFO  L168              Benchmark]: UtopiaSpecLang took 58.20 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 15:09:42,562 INFO  L168              Benchmark]: Boogie Printer took 16.95 ms. Allocated memory is still 1.0 GB. Free memory is still 913.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 15:09:42,562 INFO  L168              Benchmark]: RCFGBuilder took 789.69 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 779.4 MB in the end (delta: 134.3 MB). Peak memory consumption was 134.3 MB. Max. memory is 15.3 GB.
[2020-11-25 15:09:42,563 INFO  L168              Benchmark]: UtopiaLTL2Aut took 39.93 ms. Allocated memory is still 1.0 GB. Free memory was 779.4 MB in the beginning and 775.8 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-25 15:09:42,563 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1364.63 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 198.7 MB). Free memory was 775.8 MB in the beginning and 892.1 MB in the end (delta: -116.2 MB). Peak memory consumption was 165.1 MB. Max. memory is 15.3 GB.
[2020-11-25 15:09:42,564 INFO  L168              Benchmark]: BlockEncodingV2 took 167.17 ms. Allocated memory is still 1.2 GB. Free memory was 892.1 MB in the beginning and 815.1 MB in the end (delta: 76.9 MB). Peak memory consumption was 76.9 MB. Max. memory is 15.3 GB.
[2020-11-25 15:09:42,564 INFO  L168              Benchmark]: BuchiAutomizer took 6657.31 ms. Allocated memory was 1.2 GB in the beginning and 1.8 GB in the end (delta: 605.0 MB). Free memory was 815.1 MB in the beginning and 1.1 GB in the end (delta: -260.5 MB). Peak memory consumption was 344.6 MB. Max. memory is 15.3 GB.
[2020-11-25 15:09:42,568 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    4502 locations, 7818 edges
  - StatisticsResult: Encoded RCFG
    4425 locations, 7634 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 106.91 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 58.20 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 16.95 ms. Allocated memory is still 1.0 GB. Free memory is still 913.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 789.69 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 779.4 MB in the end (delta: 134.3 MB). Peak memory consumption was 134.3 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 39.93 ms. Allocated memory is still 1.0 GB. Free memory was 779.4 MB in the beginning and 775.8 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1364.63 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 198.7 MB). Free memory was 775.8 MB in the beginning and 892.1 MB in the end (delta: -116.2 MB). Peak memory consumption was 165.1 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 167.17 ms. Allocated memory is still 1.2 GB. Free memory was 892.1 MB in the beginning and 815.1 MB in the end (delta: 76.9 MB). Peak memory consumption was 76.9 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 6657.31 ms. Allocated memory was 1.2 GB in the beginning and 1.8 GB in the end (delta: 605.0 MB). Free memory was 815.1 MB in the beginning and 1.1 GB in the end (delta: -260.5 MB). Peak memory consumption was 344.6 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1880 locations, 2416 edges
  - StatisticsResult: BuchiProgram size
    4502 locations, 7818 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 6 terminating modules (6 trivial, 0 deterministic, 0 nondeterministic). 6 modules have a trivial ranking function, the largest among these consists of 21 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 6.6s and 7 iterations.  TraceHistogramMax:2. Analysis of lassos took 0.9s. Construction of modules took 3.8s. BÃ¼chi inclusion checks took 1.3s. Highest rank in rank-based complementation 0. Minimization of det autom 6. Minimization of nondet autom 0. Automata minimization 0.1s AutomataMinimizationTime, 5 MinimizatonAttempts, 1577 StatesRemovedByMinimization, 5 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 3408 states and ocurred in iteration 1.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 20924 SDtfs, 21587 SDslu, 28246 SDs, 0 SdLazy, 60094 SolverSat, 3278 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 3.8s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU6 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transferFrom_TokenERC200) ==> ( <>(fail_transferFrom_TokenERC200) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
