This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 16:54:03,967 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 16:54:03,968 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 16:54:03,975 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 16:54:03,975 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 16:54:03,976 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 16:54:03,976 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 16:54:03,977 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 16:54:03,978 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 16:54:03,979 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 16:54:03,979 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 16:54:03,979 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 16:54:03,980 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 16:54:03,980 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 16:54:03,981 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 16:54:03,982 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 16:54:03,982 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 16:54:03,983 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 16:54:03,985 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 16:54:03,986 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 16:54:03,987 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 16:54:03,988 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 16:54:03,989 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 16:54:03,990 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 16:54:03,990 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 16:54:03,990 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 16:54:03,990 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 16:54:03,991 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 16:54:03,991 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 16:54:03,992 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 16:54:03,992 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 16:54:03,992 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 16:54:03,993 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 16:54:03,993 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 16:54:03,994 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 16:54:03,994 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 16:54:03,994 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 16:54:03,994 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 16:54:03,994 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 16:54:03,995 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 16:54:03,995 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 16:54:03,995 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 16:54:04,001 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 16:54:04,001 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 16:54:04,001 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 16:54:04,001 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 16:54:04,002 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 16:54:04,002 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 16:54:04,002 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 16:54:04,002 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 16:54:04,002 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 16:54:04,002 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 16:54:04,002 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 16:54:04,002 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 16:54:04,002 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 16:54:04,002 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 16:54:04,002 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 16:54:04,002 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 16:54:04,003 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 16:54:04,003 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 16:54:04,003 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 16:54:04,003 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 16:54:04,003 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 16:54:04,003 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 16:54:04,003 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 16:54:04,003 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 16:54:04,003 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 16:54:04,003 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 16:54:04,021 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 16:54:04,033 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 16:54:04,037 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 16:54:04,038 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 16:54:04,039 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 16:54:04,039 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/GatherToken_0xc3771d47E2Ab5A519E2917E61e23078d0C05Ed7f_transferfrom-self-fail.bpl
[2020-11-25 16:54:04,039 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/GatherToken_0xc3771d47E2Ab5A519E2917E61e23078d0C05Ed7f_transferfrom-self-fail.bpl'
[2020-11-25 16:54:04,108 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 16:54:04,109 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 16:54:04,109 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 16:54:04,109 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 16:54:04,109 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 16:54:04,121 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "GatherToken_0xc3771d47E2Ab5A519E2917E61e23078d0C05Ed7f_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:54:04" (1/1) ...
[2020-11-25 16:54:04,122 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "GatherToken_0xc3771d47E2Ab5A519E2917E61e23078d0C05Ed7f_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:54:04" (1/1) ...
[2020-11-25 16:54:04,149 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "GatherToken_0xc3771d47E2Ab5A519E2917E61e23078d0C05Ed7f_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:54:04" (1/1) ...
[2020-11-25 16:54:04,150 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "GatherToken_0xc3771d47E2Ab5A519E2917E61e23078d0C05Ed7f_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:54:04" (1/1) ...
[2020-11-25 16:54:04,167 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "GatherToken_0xc3771d47E2Ab5A519E2917E61e23078d0C05Ed7f_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:54:04" (1/1) ...
[2020-11-25 16:54:04,176 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "GatherToken_0xc3771d47E2Ab5A519E2917E61e23078d0C05Ed7f_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:54:04" (1/1) ...
[2020-11-25 16:54:04,183 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "GatherToken_0xc3771d47E2Ab5A519E2917E61e23078d0C05Ed7f_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:54:04" (1/1) ...
[2020-11-25 16:54:04,192 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 16:54:04,192 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 16:54:04,193 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 16:54:04,194 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 16:54:04,197 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "GatherToken_0xc3771d47E2Ab5A519E2917E61e23078d0C05Ed7f_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:54:04" (1/1) ...
[2020-11-25 16:54:04,210 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(GatherToken.transferFrom(from, to, value), from == to && (value > balances_BasicToken[this][from] || value > allowed_StandardToken[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][from] >= 0 &&  balances_BasicToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_StandardToken[this][from][msg.sender] >= 0 && allowed_StandardToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(GatherToken.transferFrom)))
[2020-11-25 16:54:04,215 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(GatherToken.transferFrom(from, to, value), from == to && (value > balances_BasicToken[this][from] || value > allowed_StandardToken[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][from] >= 0 &&  balances_BasicToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_StandardToken[this][from][msg.sender] >= 0 && allowed_StandardToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(GatherToken.transferFrom)))
[2020-11-25 16:54:04,220 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(GatherToken.transferFrom(from, to, value), from == to && (value > balances_BasicToken[this][from] || value > allowed_StandardToken[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][from] >= 0 &&  balances_BasicToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_StandardToken[this][from][msg.sender] >= 0 && allowed_StandardToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(GatherToken.transferFrom)))
[2020-11-25 16:54:04,226 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( _from_s849==_to_s849 && ( _value_s849>balances_BasicToken[this][_from_s849] || _value_s849>allowed_StandardToken[this][_from_s849][msg.sender] ) ) && _value_s849>=0 ) && _value_s849<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_BasicToken[this][_to_s849]>=0 ) && balances_BasicToken[this][_to_s849]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_BasicToken[this][_from_s849]>=0 ) && balances_BasicToken[this][_from_s849]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && allowed_StandardToken[this][_from_s849][msg.sender]>=0 ) && allowed_StandardToken[this][_from_s849][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[_from_s849,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GatherToken>],IdentifierExpression[_to_s849,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GatherToken>]],BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[_value_s849,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GatherToken>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GatherToken>]]],[IdentifierExpression[_from_s849,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GatherToken>]]]],BinaryExpression[COMPGT,IdentifierExpression[_value_s849,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GatherToken>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GatherToken>]]],[IdentifierExpression[_from_s849,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GatherToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GatherToken>]]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[_value_s849,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GatherToken>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[_value_s849,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GatherToken>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GatherToken>]]],[IdentifierExpression[_to_s849,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GatherToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GatherToken>]]],[IdentifierExpression[_to_s849,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GatherToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GatherToken>]]],[IdentifierExpression[_from_s849,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GatherToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GatherToken>]]],[IdentifierExpression[_from_s849,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GatherToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GatherToken>]]],[IdentifierExpression[_from_s849,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GatherToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GatherToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GatherToken>]]],[IdentifierExpression[_from_s849,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GatherToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GatherToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 16:54:04,230 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(GatherToken.transferFrom(from, to, value), from == to && (value > balances_BasicToken[this][from] || value > allowed_StandardToken[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][from] >= 0 &&  balances_BasicToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_StandardToken[this][from][msg.sender] >= 0 && allowed_StandardToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(GatherToken.transferFrom)))
[2020-11-25 16:54:04,231 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_GatherToken0) ==> ( <>AP(fail_transferFrom_GatherToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 16:54:04,240 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:54:04 PropertyContainer
[2020-11-25 16:54:04,240 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 16:54:04,240 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 16:54:04,240 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 16:54:04,240 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 16:54:04,241 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "GatherToken_0xc3771d47E2Ab5A519E2917E61e23078d0C05Ed7f_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:54:04" (1/2) ...
[2020-11-25 16:54:04,241 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 16:54:04,241 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 16:54:04,257 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:54:04" (2/2) ...
[2020-11-25 16:54:04,257 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 16:54:04,257 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 16:54:04,257 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 16:54:04,257 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 16:54:04,258 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "GatherToken_0xc3771d47E2Ab5A519E2917E61e23078d0C05Ed7f_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:54:04" (1/2) ...
[2020-11-25 16:54:04,295 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 16:54:04,295 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 16:54:04,295 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 16:54:04,295 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 16:54:04,295 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 16:54:04,295 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 16:54:04,295 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 16:54:04,296 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 16:54:04,296 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 16:54:04,296 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-25 16:54:04,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-25 16:54:04,296 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-25 16:54:04,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-25 16:54:04,296 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-25 16:54:04,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-25 16:54:04,296 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-25 16:54:04,296 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic
[2020-11-25 16:54:04,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic
[2020-11-25 16:54:04,297 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Basic
[2020-11-25 16:54:04,297 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Basic
[2020-11-25 16:54:04,297 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Basic
[2020-11-25 16:54:04,297 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 16:54:04,297 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 16:54:04,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 16:54:04,297 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 16:54:04,297 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 16:54:04,297 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 16:54:04,297 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-25 16:54:04,297 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken
[2020-11-25 16:54:04,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken
[2020-11-25 16:54:04,297 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken
[2020-11-25 16:54:04,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken
[2020-11-25 16:54:04,297 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken
[2020-11-25 16:54:04,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken
[2020-11-25 16:54:04,298 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken
[2020-11-25 16:54:04,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken
[2020-11-25 16:54:04,298 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-25 16:54:04,298 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken
[2020-11-25 16:54:04,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken
[2020-11-25 16:54:04,298 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-25 16:54:04,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-25 16:54:04,298 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken
[2020-11-25 16:54:04,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken
[2020-11-25 16:54:04,298 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken
[2020-11-25 16:54:04,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken
[2020-11-25 16:54:04,298 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken
[2020-11-25 16:54:04,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken
[2020-11-25 16:54:04,298 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-25 16:54:04,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-25 16:54:04,298 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-25 16:54:04,298 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken
[2020-11-25 16:54:04,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken
[2020-11-25 16:54:04,299 INFO  L130     BoogieDeclarations]: Found specification of procedure checkMintPermission~address_MintableToken__success
[2020-11-25 16:54:04,299 INFO  L130     BoogieDeclarations]: Found specification of procedure setMinter~address~uint256_MintableToken
[2020-11-25 16:54:04,299 INFO  L138     BoogieDeclarations]: Found implementation of procedure setMinter~address~uint256_MintableToken
[2020-11-25 16:54:04,299 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken
[2020-11-25 16:54:04,299 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken
[2020-11-25 16:54:04,299 INFO  L130     BoogieDeclarations]: Found specification of procedure mintInternal~address~uint256_MintableToken__success
[2020-11-25 16:54:04,299 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAllowed~address_MintableToken
[2020-11-25 16:54:04,299 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAllowed~address_MintableToken
[2020-11-25 16:54:04,299 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken
[2020-11-25 16:54:04,299 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken
[2020-11-25 16:54:04,299 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken
[2020-11-25 16:54:04,299 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken
[2020-11-25 16:54:04,299 INFO  L130     BoogieDeclarations]: Found specification of procedure maxMintLimit_MintableToken
[2020-11-25 16:54:04,299 INFO  L138     BoogieDeclarations]: Found implementation of procedure maxMintLimit_MintableToken
[2020-11-25 16:54:04,299 INFO  L130     BoogieDeclarations]: Found specification of procedure GatherToken_GatherToken_NoBaseCtor__success
[2020-11-25 16:54:04,299 INFO  L130     BoogieDeclarations]: Found specification of procedure GatherToken_GatherToken
[2020-11-25 16:54:04,299 INFO  L138     BoogieDeclarations]: Found implementation of procedure GatherToken_GatherToken
[2020-11-25 16:54:04,299 INFO  L130     BoogieDeclarations]: Found specification of procedure unpauseTransfer_GatherToken
[2020-11-25 16:54:04,300 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpauseTransfer_GatherToken
[2020-11-25 16:54:04,300 INFO  L130     BoogieDeclarations]: Found specification of procedure pauseTransfer_GatherToken
[2020-11-25 16:54:04,300 INFO  L138     BoogieDeclarations]: Found implementation of procedure pauseTransfer_GatherToken
[2020-11-25 16:54:04,300 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_GatherToken
[2020-11-25 16:54:04,300 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_GatherToken
[2020-11-25 16:54:04,300 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_GatherToken
[2020-11-25 16:54:04,300 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_GatherToken
[2020-11-25 16:54:04,300 INFO  L130     BoogieDeclarations]: Found specification of procedure name_GatherToken
[2020-11-25 16:54:04,300 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_GatherToken
[2020-11-25 16:54:04,300 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_GatherToken
[2020-11-25 16:54:04,300 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_GatherToken
[2020-11-25 16:54:04,300 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_GatherToken
[2020-11-25 16:54:04,300 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_GatherToken
[2020-11-25 16:54:04,300 INFO  L130     BoogieDeclarations]: Found specification of procedure transferPaused_GatherToken
[2020-11-25 16:54:04,300 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferPaused_GatherToken
[2020-11-25 16:54:04,300 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 16:54:04,301 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 16:54:04,301 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 16:54:04,301 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 16:54:04,301 INFO  L130     BoogieDeclarations]: Found specification of procedure canMint_pre__success
[2020-11-25 16:54:04,301 INFO  L130     BoogieDeclarations]: Found specification of procedure hasMintPermission_pre__success
[2020-11-25 16:54:04,301 INFO  L130     BoogieDeclarations]: Found specification of procedure tranferable_pre__success
[2020-11-25 16:54:04,301 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 16:54:04,301 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 16:54:04,301 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-25 16:54:04,301 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-25 16:54:04,301 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Basic
[2020-11-25 16:54:04,301 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Basic
[2020-11-25 16:54:04,301 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 16:54:04,301 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 16:54:04,302 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BasicToken
[2020-11-25 16:54:04,302 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BasicToken
[2020-11-25 16:54:04,302 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_StandardToken
[2020-11-25 16:54:04,302 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_StandardToken
[2020-11-25 16:54:04,302 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MintableToken
[2020-11-25 16:54:04,302 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MintableToken
[2020-11-25 16:54:04,302 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_GatherToken
[2020-11-25 16:54:04,302 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 16:54:04,302 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 16:54:04,302 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 16:54:04,302 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 16:54:04,302 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 16:54:04,302 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 16:54:04,302 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 16:54:04,303 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 16:54:04,303 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 16:54:04,303 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 16:54:04,303 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-25 16:54:04,303 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-25 16:54:04,303 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-25 16:54:04,303 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-25 16:54:04,303 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-25 16:54:04,303 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-25 16:54:04,303 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-25 16:54:04,303 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__success
[2020-11-25 16:54:04,303 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__fail
[2020-11-25 16:54:04,303 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 16:54:04,303 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 16:54:04,304 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 16:54:04,304 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-25 16:54:04,304 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__success
[2020-11-25 16:54:04,304 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__fail
[2020-11-25 16:54:04,304 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__success
[2020-11-25 16:54:04,304 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__fail
[2020-11-25 16:54:04,304 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__success
[2020-11-25 16:54:04,304 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__fail
[2020-11-25 16:54:04,304 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__success
[2020-11-25 16:54:04,304 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__fail
[2020-11-25 16:54:04,304 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-25 16:54:04,304 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__success
[2020-11-25 16:54:04,304 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__fail
[2020-11-25 16:54:04,305 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-25 16:54:04,305 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-25 16:54:04,305 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__success
[2020-11-25 16:54:04,305 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__fail
[2020-11-25 16:54:04,305 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__success
[2020-11-25 16:54:04,305 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__fail
[2020-11-25 16:54:04,305 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-25 16:54:04,305 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-25 16:54:04,305 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-25 16:54:04,305 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-25 16:54:04,305 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-25 16:54:04,305 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__success
[2020-11-25 16:54:04,305 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__fail
[2020-11-25 16:54:04,306 INFO  L130     BoogieDeclarations]: Found specification of procedure checkMintPermission~address_MintableToken__fail
[2020-11-25 16:54:04,306 INFO  L130     BoogieDeclarations]: Found specification of procedure setMinter~address~uint256_MintableToken__success
[2020-11-25 16:54:04,306 INFO  L130     BoogieDeclarations]: Found specification of procedure setMinter~address~uint256_MintableToken__fail
[2020-11-25 16:54:04,306 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__success
[2020-11-25 16:54:04,306 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__fail
[2020-11-25 16:54:04,306 INFO  L130     BoogieDeclarations]: Found specification of procedure mintInternal~address~uint256_MintableToken__fail
[2020-11-25 16:54:04,306 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAllowed~address_MintableToken__success
[2020-11-25 16:54:04,306 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAllowed~address_MintableToken__fail
[2020-11-25 16:54:04,306 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken__success
[2020-11-25 16:54:04,306 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken__fail
[2020-11-25 16:54:04,306 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken__success
[2020-11-25 16:54:04,306 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken__fail
[2020-11-25 16:54:04,306 INFO  L130     BoogieDeclarations]: Found specification of procedure maxMintLimit_MintableToken__success
[2020-11-25 16:54:04,306 INFO  L130     BoogieDeclarations]: Found specification of procedure maxMintLimit_MintableToken__fail
[2020-11-25 16:54:04,306 INFO  L130     BoogieDeclarations]: Found specification of procedure GatherToken_GatherToken_NoBaseCtor__fail
[2020-11-25 16:54:04,307 INFO  L130     BoogieDeclarations]: Found specification of procedure GatherToken_GatherToken__success
[2020-11-25 16:54:04,307 INFO  L130     BoogieDeclarations]: Found specification of procedure GatherToken_GatherToken__fail
[2020-11-25 16:54:04,307 INFO  L130     BoogieDeclarations]: Found specification of procedure unpauseTransfer_GatherToken__success
[2020-11-25 16:54:04,307 INFO  L130     BoogieDeclarations]: Found specification of procedure unpauseTransfer_GatherToken__fail
[2020-11-25 16:54:04,307 INFO  L130     BoogieDeclarations]: Found specification of procedure pauseTransfer_GatherToken__success
[2020-11-25 16:54:04,307 INFO  L130     BoogieDeclarations]: Found specification of procedure pauseTransfer_GatherToken__fail
[2020-11-25 16:54:04,307 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_GatherToken__success
[2020-11-25 16:54:04,307 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_GatherToken__fail
[2020-11-25 16:54:04,307 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_GatherToken__success
[2020-11-25 16:54:04,307 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_GatherToken__fail
[2020-11-25 16:54:04,307 INFO  L130     BoogieDeclarations]: Found specification of procedure name_GatherToken__success
[2020-11-25 16:54:04,307 INFO  L130     BoogieDeclarations]: Found specification of procedure name_GatherToken__fail
[2020-11-25 16:54:04,307 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_GatherToken__success
[2020-11-25 16:54:04,307 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_GatherToken__fail
[2020-11-25 16:54:04,307 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_GatherToken__success
[2020-11-25 16:54:04,307 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_GatherToken__fail
[2020-11-25 16:54:04,308 INFO  L130     BoogieDeclarations]: Found specification of procedure transferPaused_GatherToken__success
[2020-11-25 16:54:04,308 INFO  L130     BoogieDeclarations]: Found specification of procedure transferPaused_GatherToken__fail
[2020-11-25 16:54:04,308 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 16:54:04,308 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 16:54:04,308 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 16:54:04,308 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 16:54:04,308 INFO  L130     BoogieDeclarations]: Found specification of procedure canMint_pre__fail
[2020-11-25 16:54:04,308 INFO  L130     BoogieDeclarations]: Found specification of procedure hasMintPermission_pre__fail
[2020-11-25 16:54:04,308 INFO  L130     BoogieDeclarations]: Found specification of procedure tranferable_pre__fail
[2020-11-25 16:54:04,308 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 16:54:04,308 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 16:54:04,308 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 16:54:04,308 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 16:54:04,308 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 16:54:04,308 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 16:54:04,308 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 16:54:04,308 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 16:54:04,309 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 16:54:04,309 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 16:54:04,309 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 16:54:04,309 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 16:54:04,309 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 16:54:04,309 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 16:54:04,309 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 16:54:04,309 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 16:54:04,309 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-25 16:54:04,309 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-25 16:54:04,309 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-25 16:54:04,309 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-25 16:54:04,309 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-25 16:54:04,309 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-25 16:54:04,309 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-25 16:54:04,309 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-25 16:54:04,310 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__fail
[2020-11-25 16:54:04,310 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__success
[2020-11-25 16:54:04,310 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 16:54:04,310 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 16:54:04,310 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 16:54:04,310 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 16:54:04,310 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-25 16:54:04,310 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-25 16:54:04,310 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__fail
[2020-11-25 16:54:04,310 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__success
[2020-11-25 16:54:04,310 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__fail
[2020-11-25 16:54:04,310 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__success
[2020-11-25 16:54:04,310 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__fail
[2020-11-25 16:54:04,310 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__success
[2020-11-25 16:54:04,310 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__fail
[2020-11-25 16:54:04,310 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__success
[2020-11-25 16:54:04,311 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-25 16:54:04,311 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-25 16:54:04,311 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__fail
[2020-11-25 16:54:04,311 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__success
[2020-11-25 16:54:04,311 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-25 16:54:04,311 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-25 16:54:04,311 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__fail
[2020-11-25 16:54:04,311 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__success
[2020-11-25 16:54:04,311 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__fail
[2020-11-25 16:54:04,311 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__success
[2020-11-25 16:54:04,311 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-25 16:54:04,311 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-25 16:54:04,311 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-25 16:54:04,311 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-25 16:54:04,311 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-25 16:54:04,311 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-25 16:54:04,311 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__fail
[2020-11-25 16:54:04,312 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__success
[2020-11-25 16:54:04,312 INFO  L138     BoogieDeclarations]: Found implementation of procedure checkMintPermission~address_MintableToken__fail
[2020-11-25 16:54:04,312 INFO  L138     BoogieDeclarations]: Found implementation of procedure checkMintPermission~address_MintableToken__success
[2020-11-25 16:54:04,312 INFO  L138     BoogieDeclarations]: Found implementation of procedure setMinter~address~uint256_MintableToken__fail
[2020-11-25 16:54:04,312 INFO  L138     BoogieDeclarations]: Found implementation of procedure setMinter~address~uint256_MintableToken__success
[2020-11-25 16:54:04,312 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__fail
[2020-11-25 16:54:04,312 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__success
[2020-11-25 16:54:04,312 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintInternal~address~uint256_MintableToken__fail
[2020-11-25 16:54:04,312 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintInternal~address~uint256_MintableToken__success
[2020-11-25 16:54:04,312 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAllowed~address_MintableToken__fail
[2020-11-25 16:54:04,312 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAllowed~address_MintableToken__success
[2020-11-25 16:54:04,312 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken__fail
[2020-11-25 16:54:04,312 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken__success
[2020-11-25 16:54:04,312 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken__fail
[2020-11-25 16:54:04,312 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken__success
[2020-11-25 16:54:04,312 INFO  L138     BoogieDeclarations]: Found implementation of procedure maxMintLimit_MintableToken__fail
[2020-11-25 16:54:04,312 INFO  L138     BoogieDeclarations]: Found implementation of procedure maxMintLimit_MintableToken__success
[2020-11-25 16:54:04,313 INFO  L138     BoogieDeclarations]: Found implementation of procedure GatherToken_GatherToken_NoBaseCtor__fail
[2020-11-25 16:54:04,313 INFO  L138     BoogieDeclarations]: Found implementation of procedure GatherToken_GatherToken_NoBaseCtor__success
[2020-11-25 16:54:04,313 INFO  L138     BoogieDeclarations]: Found implementation of procedure GatherToken_GatherToken__fail
[2020-11-25 16:54:04,313 INFO  L138     BoogieDeclarations]: Found implementation of procedure GatherToken_GatherToken__success
[2020-11-25 16:54:04,313 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpauseTransfer_GatherToken__fail
[2020-11-25 16:54:04,313 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpauseTransfer_GatherToken__success
[2020-11-25 16:54:04,313 INFO  L138     BoogieDeclarations]: Found implementation of procedure pauseTransfer_GatherToken__fail
[2020-11-25 16:54:04,313 INFO  L138     BoogieDeclarations]: Found implementation of procedure pauseTransfer_GatherToken__success
[2020-11-25 16:54:04,313 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_GatherToken__fail
[2020-11-25 16:54:04,313 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_GatherToken__success
[2020-11-25 16:54:04,313 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_GatherToken__fail
[2020-11-25 16:54:04,313 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_GatherToken__success
[2020-11-25 16:54:04,313 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_GatherToken__fail
[2020-11-25 16:54:04,313 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_GatherToken__success
[2020-11-25 16:54:04,314 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_GatherToken__fail
[2020-11-25 16:54:04,314 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_GatherToken__success
[2020-11-25 16:54:04,314 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_GatherToken__fail
[2020-11-25 16:54:04,314 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_GatherToken__success
[2020-11-25 16:54:04,314 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferPaused_GatherToken__fail
[2020-11-25 16:54:04,314 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferPaused_GatherToken__success
[2020-11-25 16:54:04,314 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 16:54:04,314 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 16:54:04,314 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 16:54:04,314 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 16:54:04,314 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 16:54:04,314 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 16:54:04,314 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 16:54:04,314 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 16:54:04,314 INFO  L138     BoogieDeclarations]: Found implementation of procedure canMint_pre__fail
[2020-11-25 16:54:04,314 INFO  L138     BoogieDeclarations]: Found implementation of procedure canMint_pre__success
[2020-11-25 16:54:04,314 INFO  L138     BoogieDeclarations]: Found implementation of procedure hasMintPermission_pre__fail
[2020-11-25 16:54:04,315 INFO  L138     BoogieDeclarations]: Found implementation of procedure hasMintPermission_pre__success
[2020-11-25 16:54:04,315 INFO  L138     BoogieDeclarations]: Found implementation of procedure tranferable_pre__fail
[2020-11-25 16:54:04,315 INFO  L138     BoogieDeclarations]: Found implementation of procedure tranferable_pre__success
[2020-11-25 16:54:04,315 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 16:54:04,315 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 16:54:04,315 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-25 16:54:04,315 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-25 16:54:04,315 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Basic
[2020-11-25 16:54:04,315 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Basic
[2020-11-25 16:54:04,315 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 16:54:04,315 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 16:54:04,315 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BasicToken
[2020-11-25 16:54:04,315 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BasicToken
[2020-11-25 16:54:04,315 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_StandardToken
[2020-11-25 16:54:04,315 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_StandardToken
[2020-11-25 16:54:04,315 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MintableToken
[2020-11-25 16:54:04,316 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MintableToken
[2020-11-25 16:54:04,316 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_GatherToken
[2020-11-25 16:54:04,316 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 16:54:04,316 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 16:54:04,316 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 16:54:04,629 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 16:54:04,629 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 16:54:05,205 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 16:54:05,205 INFO  L286             CfgBuilder]: Removed 8 assue(true) statements.
[2020-11-25 16:54:05,207 INFO  L202        PluginConnector]: Adding new model GatherToken_0xc3771d47E2Ab5A519E2917E61e23078d0C05Ed7f_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:54:05 BoogieIcfgContainer
[2020-11-25 16:54:05,208 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:54:04" (2/2) ...
[2020-11-25 16:54:05,208 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 16:54:05,208 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@6c6561f3 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:54:05, skipping insertion in model container
[2020-11-25 16:54:05,208 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 16:54:05,208 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 16:54:05,208 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 16:54:05,210 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 16:54:05,210 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "GatherToken_0xc3771d47E2Ab5A519E2917E61e23078d0C05Ed7f_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:54:04" (1/3) ...
[2020-11-25 16:54:05,211 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@45fa8f54 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:54:05, skipping insertion in model container
[2020-11-25 16:54:05,211 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:54:04" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 16:54:05,247 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:54:05 NWAContainer
[2020-11-25 16:54:05,247 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 16:54:05,248 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 16:54:05,248 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 16:54:05,248 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 16:54:05,249 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "GatherToken_0xc3771d47E2Ab5A519E2917E61e23078d0C05Ed7f_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:54:05" (3/4) ...
[2020-11-25 16:54:05,250 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@3c1b4a24 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:54:05, skipping insertion in model container
[2020-11-25 16:54:05,250 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:54:05" (4/4) ...
[2020-11-25 16:54:05,253 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 16:54:05,257 INFO  L110   BuchiProductObserver]: Initial RCFG 2394 locations, 3200 edges
[2020-11-25 16:54:05,258 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 16:54:05,269 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 16:54:06,997 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 16:54:07,004 INFO  L110   BuchiProductObserver]: BuchiProgram size 5902 locations, 10478 edges
[2020-11-25 16:54:07,005 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:54:07 BoogieIcfgContainer
[2020-11-25 16:54:07,005 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 16:54:07,005 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 16:54:07,005 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 16:54:07,006 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 16:54:07,007 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:54:07" (1/1) ...
[2020-11-25 16:54:07,120 INFO  L313           BlockEncoder]: Initial Icfg 5902 locations, 10478 edges
[2020-11-25 16:54:07,120 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 16:54:07,120 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 16:54:07,121 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 16:54:07,121 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 16:54:07,136 INFO  L70    emoveInfeasibleEdges]: Removed 99 edges and 19 locations because of local infeasibility
[2020-11-25 16:54:07,150 INFO  L70        RemoveSinkStates]: Removed 70 edges and 38 locations by removing sink states
[2020-11-25 16:54:07,165 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 16:54:07,169 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 16:54:07,172 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 16:54:07,173 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 16:54:07,176 INFO  L313           BlockEncoder]: Encoded RCFG 5811 locations, 10259 edges
[2020-11-25 16:54:07,176 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 04:54:07 BasicIcfg
[2020-11-25 16:54:07,176 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 16:54:07,176 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 16:54:07,176 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 16:54:07,178 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 16:54:07,178 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:54:07,178 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "GatherToken_0xc3771d47E2Ab5A519E2917E61e23078d0C05Ed7f_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:54:04" (1/6) ...
[2020-11-25 16:54:07,180 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1f874ae4 and model type GatherToken_0xc3771d47E2Ab5A519E2917E61e23078d0C05Ed7f_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 04:54:07, skipping insertion in model container
[2020-11-25 16:54:07,180 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:54:07,180 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:54:04" (2/6) ...
[2020-11-25 16:54:07,180 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1f874ae4 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 04:54:07, skipping insertion in model container
[2020-11-25 16:54:07,180 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:54:07,180 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "GatherToken_0xc3771d47E2Ab5A519E2917E61e23078d0C05Ed7f_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:54:05" (3/6) ...
[2020-11-25 16:54:07,180 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1f874ae4 and model type GatherToken_0xc3771d47E2Ab5A519E2917E61e23078d0C05Ed7f_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 04:54:07, skipping insertion in model container
[2020-11-25 16:54:07,180 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:54:07,180 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:54:05" (4/6) ...
[2020-11-25 16:54:07,181 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1f874ae4 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 04:54:07, skipping insertion in model container
[2020-11-25 16:54:07,181 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:54:07,181 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:54:07" (5/6) ...
[2020-11-25 16:54:07,181 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1f874ae4 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 04:54:07, skipping insertion in model container
[2020-11-25 16:54:07,181 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:54:07,181 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 04:54:07" (6/6) ...
[2020-11-25 16:54:07,182 INFO  L404   chiAutomizerObserver]: Analyzing ICFG GatherToken_0xc3771d47E2Ab5A519E2917E61e23078d0C05Ed7f_transferfrom-self-fail.bpl_BEv2
[2020-11-25 16:54:07,215 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 16:54:07,215 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 16:54:07,216 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 16:54:07,216 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 16:54:07,216 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 16:54:07,216 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 16:54:07,216 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 16:54:07,216 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 16:54:07,216 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 16:54:07,262 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5811 states.
[2020-11-25 16:54:07,316 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:54:07,316 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:54:07,316 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:54:07,324 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:54:07,324 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:54:07,325 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 16:54:07,325 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5811 states.
[2020-11-25 16:54:07,346 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:54:07,346 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:54:07,346 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:54:07,347 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:54:07,347 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_GatherToken0 := false;
[L2]                 call_transferFrom_GatherToken0 := false;
[L2]     CALL        call main();
[L6692]              assume null == 0;
[L6693]  CALL        call this := FreshRefGenerator__success();
[L2967]              havoc newRef;
[L2968]              assume Alloc[newRef] == false;
[L2969]              Alloc[newRef] := true;
[L2970]              assume newRef != null;
[L6693]  RET         call this := FreshRefGenerator__success();
[L6694]              assume now >= 0;
[L6695]              assume DType[this] == GatherToken;
[L6696]              assume msgvalue_MSG == 0;
[L6697]              gas := gas - 53000;
[L6698]  CALL        call GatherToken_GatherToken(this, msgsender_MSG, msgvalue_MSG);
[L1621]              havoc __exception;
[L1622]              revert := false;
[L1623]  COND FALSE  !(__exception)
[L1650]  CALL        call GatherToken_GatherToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3997]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3997]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND TRUE   revert
[L1650]  RET         call GatherToken_GatherToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1651]              assume !revert && gas >= 0;
[L6698]  RET         call GatherToken_GatherToken(this, msgsender_MSG, msgvalue_MSG);
[L6699]              assume !revert && gas >= 0;

Loop:
[L6702]  CALL        call CorralChoice_GatherToken(this);
[L6488]              havoc msgsender_MSG;
[L6489]              havoc msgvalue_MSG;
[L6490]              havoc choice;
[L6491]              havoc __ret_0_owner;
[L6492]              havoc newOwner_s150;
[L6493]              havoc __ret_0_totalSupply;
[L6494]              havoc _owner_s312;
[L6495]              havoc __ret_0_balanceOf;
[L6496]              havoc _to_s867;
[L6497]              havoc _value_s867;
[L6498]              havoc __ret_0_transfer;
[L6499]              havoc _owner_s453;
[L6500]              havoc _spender_s453;
[L6501]              havoc __ret_0_allowance;
[L6502]              havoc _from_s849;
[L6503]              havoc _to_s849;
[L6504]              havoc _value_s849;
[L6505]              havoc __ret_0_transferFrom;
[L6506]              havoc _spender_s437;
[L6507]              havoc _value_s437;
[L6508]              havoc __ret_0_approve;
[L6509]              havoc _spender_s495;
[L6510]              havoc _addedValue_s495;
[L6511]              havoc __ret_0_increaseApproval;
[L6512]              havoc _spender_s555;
[L6513]              havoc _subtractedValue_s555;
[L6514]              havoc __ret_0_decreaseApproval;
[L6515]              havoc __ret_0_mintingFinished;
[L6516]              havoc __ret_0_maxMintLimit;
[L6517]              havoc _minter_s650;
[L6518]              havoc _amount_s650;
[L6519]              havoc _to_s669;
[L6520]              havoc _amount_s669;
[L6521]              havoc __ret_0_mint;
[L6522]              havoc _minter_s749;
[L6523]              havoc __ret_0_mintAllowed;
[L6524]              havoc __ret_0_finishMinting;
[L6525]              havoc __ret_0_name;
[L6526]              havoc __ret_0_symbol;
[L6527]              havoc __ret_0_decimals;
[L6528]              havoc __ret_0_transferPaused;
[L6529]              havoc tmpNow;
[L6530]              havoc gas;
[L6531]              assume gas > 4000000 && gas <= 8000000;
[L6532]              tmpNow := now;
[L6533]              havoc now;
[L6534]              assume now > tmpNow;
[L6535]              assume msgsender_MSG != null;
[L6536]              assume DType[msgsender_MSG] != SafeMath;
[L6537]              assume DType[msgsender_MSG] != Ownable;
[L6538]              assume DType[msgsender_MSG] != ERC20Basic;
[L6539]              assume DType[msgsender_MSG] != ERC20;
[L6540]              assume DType[msgsender_MSG] != BasicToken;
[L6541]              assume DType[msgsender_MSG] != StandardToken;
[L6542]              assume DType[msgsender_MSG] != MintableToken;
[L6543]              assume DType[msgsender_MSG] != GatherToken;
[L6544]              Alloc[msgsender_MSG] := true;
[L6545]  COND TRUE   choice == 22
[L6546]              gas := gas - 21000;
[L6547]  COND FALSE  !(gas >= 0)
[L6702]  RET         call CorralChoice_GatherToken(this);

[2020-11-25 16:54:07,360 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:54:07,360 INFO  L82        PathProgramCache]: Analyzing trace with hash 537982128, now seen corresponding path program 1 times
[2020-11-25 16:54:07,364 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:54:07,394 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:54:07,435 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 16:54:07,437 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:54:07,437 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 16:54:07,816 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:54:07,824 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 16:54:07,825 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 16:54:07,826 INFO  L87              Difference]: Start difference. First operand 5811 states. Second operand 4 states.
[2020-11-25 16:54:08,892 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:54:08,893 INFO  L93              Difference]: Finished difference Result 4671 states and 7283 transitions.
[2020-11-25 16:54:08,893 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 16:54:08,895 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4671 states and 7283 transitions.
[2020-11-25 16:54:08,936 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 16:54:08,972 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4671 states to 4495 states and 7002 transitions.
[2020-11-25 16:54:08,973 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 12
[2020-11-25 16:54:08,976 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1159
[2020-11-25 16:54:08,977 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4495 states and 7002 transitions.
[2020-11-25 16:54:08,994 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:54:08,994 INFO  L728         BuchiCegarLoop]: Abstraction has 4495 states and 7002 transitions.
[2020-11-25 16:54:09,011 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4495 states and 7002 transitions.
[2020-11-25 16:54:09,076 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4495 to 3902.
[2020-11-25 16:54:09,077 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3902 states.
[2020-11-25 16:54:09,085 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3902 states to 3902 states and 5925 transitions.
[2020-11-25 16:54:09,086 INFO  L751         BuchiCegarLoop]: Abstraction has 3902 states and 5925 transitions.
[2020-11-25 16:54:09,086 INFO  L631         BuchiCegarLoop]: Abstraction has 3902 states and 5925 transitions.
[2020-11-25 16:54:09,086 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 16:54:09,086 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3902 states and 5925 transitions.
[2020-11-25 16:54:09,099 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:54:09,099 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:54:09,099 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:54:09,105 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:54:09,105 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_GatherToken0 := false;
[L2]                 call_transferFrom_GatherToken0 := false;
[L2]     CALL        call main();
[L6692]              assume null == 0;
[L6693]  CALL        call this := FreshRefGenerator__success();
[L2967]              havoc newRef;
[L2968]              assume Alloc[newRef] == false;
[L2969]              Alloc[newRef] := true;
[L2970]              assume newRef != null;
[L6693]  RET         call this := FreshRefGenerator__success();
[L6694]              assume now >= 0;
[L6695]              assume DType[this] == GatherToken;
[L6696]              assume msgvalue_MSG == 0;
[L6697]              gas := gas - 53000;
[L6698]  CALL        call GatherToken_GatherToken(this, msgsender_MSG, msgvalue_MSG);
[L1621]              havoc __exception;
[L1622]              revert := false;
[L1623]  COND FALSE  !(__exception)
[L1650]  CALL        call GatherToken_GatherToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3997]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3997]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L4001]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3209]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3209]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3210]  COND FALSE  !(revert)
[L3213]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3190]              assume msgsender_MSG != null;
[L3191]              Balance[this] := 0;
[L3213]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3214]  COND FALSE  !(revert)
[L4001]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4002]  COND FALSE  !(revert)
[L4005]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3255]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3233]              assume msgsender_MSG != null;
[L3234]              Balance[this] := 0;
[L3235]              balances_BasicToken[this] := zeroRefintArr();
[L3236]              sum_balances0[this] := 0;
[L3237]              totalSupply__BasicToken[this] := 0;
[L3259]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L4005]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4009]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3396]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3396]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  COND FALSE  !(revert)
[L3400]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3209]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3209]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3210]  COND FALSE  !(revert)
[L3213]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3190]              assume msgsender_MSG != null;
[L3191]              Balance[this] := 0;
[L3213]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3214]  COND FALSE  !(revert)
[L3400]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3401]  COND FALSE  !(revert)
[L3404]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3255]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3233]              assume msgsender_MSG != null;
[L3234]              Balance[this] := 0;
[L3235]              balances_BasicToken[this] := zeroRefintArr();
[L3236]              sum_balances0[this] := 0;
[L3237]              totalSupply__BasicToken[this] := 0;
[L3259]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3404]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3405]  COND FALSE  !(revert)
[L3408]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3367]              assume msgsender_MSG != null;
[L3368]              Balance[this] := 0;
[L3369]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3370]              sum_allowed1[this] := 0;
[L3408]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3409]  COND FALSE  !(revert)
[L4009]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4010]  COND FALSE  !(revert)
[L4013]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3098]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3081]              assume msgsender_MSG != null;
[L3082]              Balance[this] := 0;
[L3083]              owner_Ownable[this] := null;
[L3085]              owner_Ownable[this] := msgsender_MSG;
[L3098]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3099]  COND FALSE  !(revert)
[L4013]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4014]  COND FALSE  !(revert)
[L4017]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3662]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3662]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3663]  COND FALSE  !(revert)
[L3666]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3209]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3209]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3210]  COND FALSE  !(revert)
[L3213]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3190]              assume msgsender_MSG != null;
[L3191]              Balance[this] := 0;
[L3213]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3214]  COND FALSE  !(revert)
[L3666]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]  COND FALSE  !(revert)
[L3670]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3255]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3233]              assume msgsender_MSG != null;
[L3234]              Balance[this] := 0;
[L3235]              balances_BasicToken[this] := zeroRefintArr();
[L3236]              sum_balances0[this] := 0;
[L3237]              totalSupply__BasicToken[this] := 0;
[L3259]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3670]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3671]  COND FALSE  !(revert)
[L3674]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3396]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3396]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  COND FALSE  !(revert)
[L3400]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3209]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3209]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3210]  COND FALSE  !(revert)
[L3213]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3190]              assume msgsender_MSG != null;
[L3191]              Balance[this] := 0;
[L3213]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3214]  COND FALSE  !(revert)
[L3400]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3401]  COND FALSE  !(revert)
[L3404]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3255]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3233]              assume msgsender_MSG != null;
[L3234]              Balance[this] := 0;
[L3235]              balances_BasicToken[this] := zeroRefintArr();
[L3236]              sum_balances0[this] := 0;
[L3237]              totalSupply__BasicToken[this] := 0;
[L3259]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3404]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3405]  COND FALSE  !(revert)
[L3408]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3367]              assume msgsender_MSG != null;
[L3368]              Balance[this] := 0;
[L3369]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3370]              sum_allowed1[this] := 0;
[L3408]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3409]  COND FALSE  !(revert)
[L3674]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3675]  COND FALSE  !(revert)
[L3678]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3098]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3081]              assume msgsender_MSG != null;
[L3082]              Balance[this] := 0;
[L3083]              owner_Ownable[this] := null;
[L3085]              owner_Ownable[this] := msgsender_MSG;
[L3098]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3099]  COND FALSE  !(revert)
[L3678]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3679]  COND FALSE  !(revert)
[L3682]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3623]              assume msgsender_MSG != null;
[L3624]              Balance[this] := 0;
[L3625]              mintingFinished_MintableToken[this] := false;
[L3626]              mintPermissions_MintableToken[this] := zeroRefintArr();
[L3627]              sum_mintPermissions2[this] := 0;
[L3628]              maxMintLimit_MintableToken[this] := 0;
[L3682]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3683]  COND FALSE  !(revert)
[L4017]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4018]  COND FALSE  !(revert)
[L4021]  CALL        call GatherToken_GatherToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3950]              assume msgsender_MSG != null;
[L3951]              Balance[this] := 0;
[L3952]              name_GatherToken[this] := 1979683959;
[L3953]              symbol_GatherToken[this] := -286833360;
[L3954]              decimals_GatherToken[this] := 18;
[L3955]              transferPaused_GatherToken[this] := true;
[L3957]              __var_16 := decimals_GatherToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3958]              maxMintLimit_MintableToken[this] := 400000000 * (nonlinearPow(10, decimals_GatherToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4021]  RET         call GatherToken_GatherToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4022]  COND FALSE  !(revert)
[L1650]  RET         call GatherToken_GatherToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1651]              assume !revert && gas >= 0;
[L6698]  RET         call GatherToken_GatherToken(this, msgsender_MSG, msgvalue_MSG);
[L6699]              assume !revert && gas >= 0;

Loop:
[L6702]  CALL        call CorralChoice_GatherToken(this);
[L6488]              havoc msgsender_MSG;
[L6489]              havoc msgvalue_MSG;
[L6490]              havoc choice;
[L6491]              havoc __ret_0_owner;
[L6492]              havoc newOwner_s150;
[L6493]              havoc __ret_0_totalSupply;
[L6494]              havoc _owner_s312;
[L6495]              havoc __ret_0_balanceOf;
[L6496]              havoc _to_s867;
[L6497]              havoc _value_s867;
[L6498]              havoc __ret_0_transfer;
[L6499]              havoc _owner_s453;
[L6500]              havoc _spender_s453;
[L6501]              havoc __ret_0_allowance;
[L6502]              havoc _from_s849;
[L6503]              havoc _to_s849;
[L6504]              havoc _value_s849;
[L6505]              havoc __ret_0_transferFrom;
[L6506]              havoc _spender_s437;
[L6507]              havoc _value_s437;
[L6508]              havoc __ret_0_approve;
[L6509]              havoc _spender_s495;
[L6510]              havoc _addedValue_s495;
[L6511]              havoc __ret_0_increaseApproval;
[L6512]              havoc _spender_s555;
[L6513]              havoc _subtractedValue_s555;
[L6514]              havoc __ret_0_decreaseApproval;
[L6515]              havoc __ret_0_mintingFinished;
[L6516]              havoc __ret_0_maxMintLimit;
[L6517]              havoc _minter_s650;
[L6518]              havoc _amount_s650;
[L6519]              havoc _to_s669;
[L6520]              havoc _amount_s669;
[L6521]              havoc __ret_0_mint;
[L6522]              havoc _minter_s749;
[L6523]              havoc __ret_0_mintAllowed;
[L6524]              havoc __ret_0_finishMinting;
[L6525]              havoc __ret_0_name;
[L6526]              havoc __ret_0_symbol;
[L6527]              havoc __ret_0_decimals;
[L6528]              havoc __ret_0_transferPaused;
[L6529]              havoc tmpNow;
[L6530]              havoc gas;
[L6531]              assume gas > 4000000 && gas <= 8000000;
[L6532]              tmpNow := now;
[L6533]              havoc now;
[L6534]              assume now > tmpNow;
[L6535]              assume msgsender_MSG != null;
[L6536]              assume DType[msgsender_MSG] != SafeMath;
[L6537]              assume DType[msgsender_MSG] != Ownable;
[L6538]              assume DType[msgsender_MSG] != ERC20Basic;
[L6539]              assume DType[msgsender_MSG] != ERC20;
[L6540]              assume DType[msgsender_MSG] != BasicToken;
[L6541]              assume DType[msgsender_MSG] != StandardToken;
[L6542]              assume DType[msgsender_MSG] != MintableToken;
[L6543]              assume DType[msgsender_MSG] != GatherToken;
[L6544]              Alloc[msgsender_MSG] := true;
[L6545]  COND TRUE   choice == 22
[L6546]              gas := gas - 21000;
[L6547]  COND FALSE  !(gas >= 0)
[L6702]  RET         call CorralChoice_GatherToken(this);

[2020-11-25 16:54:09,112 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:54:09,112 INFO  L82        PathProgramCache]: Analyzing trace with hash 474112158, now seen corresponding path program 1 times
[2020-11-25 16:54:09,113 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:54:09,129 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:54:09,263 INFO  L134       CoverageAnalysis]: Checked inductivity of 685 backedges. 0 proven. 31 refuted. 0 times theorem prover too weak. 654 trivial. 0 not checked.
[2020-11-25 16:54:09,263 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 16:54:09,263 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [4] total 4
[2020-11-25 16:54:09,265 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:54:09,266 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 16:54:09,266 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 16:54:09,266 INFO  L87              Difference]: Start difference. First operand 3902 states and 5925 transitions. cyclomatic complexity: 2025 Second operand 4 states.
[2020-11-25 16:54:09,634 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:54:09,634 INFO  L93              Difference]: Finished difference Result 3484 states and 3748 transitions.
[2020-11-25 16:54:09,634 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 16:54:09,634 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3484 states and 3748 transitions.
[2020-11-25 16:54:09,642 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:54:09,651 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3484 states to 3484 states and 3748 transitions.
[2020-11-25 16:54:09,651 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 890
[2020-11-25 16:54:09,651 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 890
[2020-11-25 16:54:09,651 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3484 states and 3748 transitions.
[2020-11-25 16:54:09,654 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:54:09,654 INFO  L728         BuchiCegarLoop]: Abstraction has 3484 states and 3748 transitions.
[2020-11-25 16:54:09,657 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3484 states and 3748 transitions.
[2020-11-25 16:54:09,677 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3484 to 3479.
[2020-11-25 16:54:09,677 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3479 states.
[2020-11-25 16:54:09,680 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3479 states to 3479 states and 3743 transitions.
[2020-11-25 16:54:09,680 INFO  L751         BuchiCegarLoop]: Abstraction has 3479 states and 3743 transitions.
[2020-11-25 16:54:09,680 INFO  L631         BuchiCegarLoop]: Abstraction has 3479 states and 3743 transitions.
[2020-11-25 16:54:09,680 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 16:54:09,680 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3479 states and 3743 transitions.
[2020-11-25 16:54:09,685 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:54:09,685 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:54:09,685 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:54:09,689 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:54:09,689 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_GatherToken0 := false;
[L2]                 call_transferFrom_GatherToken0 := false;
[L2]     CALL        call main();
[L6692]              assume null == 0;
[L6693]  CALL        call this := FreshRefGenerator__success();
[L2967]              havoc newRef;
[L2968]              assume Alloc[newRef] == false;
[L2969]              Alloc[newRef] := true;
[L2970]              assume newRef != null;
[L6693]  RET         call this := FreshRefGenerator__success();
[L6694]              assume now >= 0;
[L6695]              assume DType[this] == GatherToken;
[L6696]              assume msgvalue_MSG == 0;
[L6697]              gas := gas - 53000;
[L6698]  CALL        call GatherToken_GatherToken(this, msgsender_MSG, msgvalue_MSG);
[L1621]              havoc __exception;
[L1622]              revert := false;
[L1623]  COND FALSE  !(__exception)
[L1650]  CALL        call GatherToken_GatherToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3997]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3997]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L4001]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3209]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3209]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3210]  COND FALSE  !(revert)
[L3213]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3190]              assume msgsender_MSG != null;
[L3191]              Balance[this] := 0;
[L3213]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3214]  COND FALSE  !(revert)
[L4001]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4002]  COND FALSE  !(revert)
[L4005]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3255]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3233]              assume msgsender_MSG != null;
[L3234]              Balance[this] := 0;
[L3235]              balances_BasicToken[this] := zeroRefintArr();
[L3236]              sum_balances0[this] := 0;
[L3237]              totalSupply__BasicToken[this] := 0;
[L3259]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L4005]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4009]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3396]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3396]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  COND FALSE  !(revert)
[L3400]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3209]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3209]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3210]  COND FALSE  !(revert)
[L3213]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3190]              assume msgsender_MSG != null;
[L3191]              Balance[this] := 0;
[L3213]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3214]  COND FALSE  !(revert)
[L3400]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3401]  COND FALSE  !(revert)
[L3404]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3255]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3233]              assume msgsender_MSG != null;
[L3234]              Balance[this] := 0;
[L3235]              balances_BasicToken[this] := zeroRefintArr();
[L3236]              sum_balances0[this] := 0;
[L3237]              totalSupply__BasicToken[this] := 0;
[L3259]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3404]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3405]  COND FALSE  !(revert)
[L3408]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3367]              assume msgsender_MSG != null;
[L3368]              Balance[this] := 0;
[L3369]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3370]              sum_allowed1[this] := 0;
[L3408]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3409]  COND FALSE  !(revert)
[L4009]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4010]  COND FALSE  !(revert)
[L4013]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3098]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3081]              assume msgsender_MSG != null;
[L3082]              Balance[this] := 0;
[L3083]              owner_Ownable[this] := null;
[L3085]              owner_Ownable[this] := msgsender_MSG;
[L3098]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3099]  COND FALSE  !(revert)
[L4013]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4014]  COND FALSE  !(revert)
[L4017]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3662]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3662]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3663]  COND FALSE  !(revert)
[L3666]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3209]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3209]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3210]  COND FALSE  !(revert)
[L3213]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3190]              assume msgsender_MSG != null;
[L3191]              Balance[this] := 0;
[L3213]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3214]  COND FALSE  !(revert)
[L3666]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]  COND FALSE  !(revert)
[L3670]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3255]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3233]              assume msgsender_MSG != null;
[L3234]              Balance[this] := 0;
[L3235]              balances_BasicToken[this] := zeroRefintArr();
[L3236]              sum_balances0[this] := 0;
[L3237]              totalSupply__BasicToken[this] := 0;
[L3259]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3670]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3671]  COND FALSE  !(revert)
[L3674]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3396]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3396]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  COND FALSE  !(revert)
[L3400]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3209]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3209]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3210]  COND FALSE  !(revert)
[L3213]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3190]              assume msgsender_MSG != null;
[L3191]              Balance[this] := 0;
[L3213]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3214]  COND FALSE  !(revert)
[L3400]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3401]  COND FALSE  !(revert)
[L3404]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3255]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3233]              assume msgsender_MSG != null;
[L3234]              Balance[this] := 0;
[L3235]              balances_BasicToken[this] := zeroRefintArr();
[L3236]              sum_balances0[this] := 0;
[L3237]              totalSupply__BasicToken[this] := 0;
[L3259]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3404]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3405]  COND FALSE  !(revert)
[L3408]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3367]              assume msgsender_MSG != null;
[L3368]              Balance[this] := 0;
[L3369]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3370]              sum_allowed1[this] := 0;
[L3408]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3409]  COND FALSE  !(revert)
[L3674]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3675]  COND FALSE  !(revert)
[L3678]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3098]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3081]              assume msgsender_MSG != null;
[L3082]              Balance[this] := 0;
[L3083]              owner_Ownable[this] := null;
[L3085]              owner_Ownable[this] := msgsender_MSG;
[L3098]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3099]  COND FALSE  !(revert)
[L3678]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3679]  COND FALSE  !(revert)
[L3682]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3623]              assume msgsender_MSG != null;
[L3624]              Balance[this] := 0;
[L3625]              mintingFinished_MintableToken[this] := false;
[L3626]              mintPermissions_MintableToken[this] := zeroRefintArr();
[L3627]              sum_mintPermissions2[this] := 0;
[L3628]              maxMintLimit_MintableToken[this] := 0;
[L3682]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3683]  COND FALSE  !(revert)
[L4017]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4018]  COND FALSE  !(revert)
[L4021]  CALL        call GatherToken_GatherToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3950]              assume msgsender_MSG != null;
[L3951]              Balance[this] := 0;
[L3952]              name_GatherToken[this] := 1979683959;
[L3953]              symbol_GatherToken[this] := -286833360;
[L3954]              decimals_GatherToken[this] := 18;
[L3955]              transferPaused_GatherToken[this] := true;
[L3957]              __var_16 := decimals_GatherToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3958]              maxMintLimit_MintableToken[this] := 400000000 * (nonlinearPow(10, decimals_GatherToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4021]  RET         call GatherToken_GatherToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4022]  COND FALSE  !(revert)
[L1650]  RET         call GatherToken_GatherToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1651]              assume !revert && gas >= 0;
[L6698]  RET         call GatherToken_GatherToken(this, msgsender_MSG, msgvalue_MSG);
[L6699]              assume !revert && gas >= 0;
[L6702]  CALL        call CorralChoice_GatherToken(this);
[L6488]              havoc msgsender_MSG;
[L6489]              havoc msgvalue_MSG;
[L6490]              havoc choice;
[L6491]              havoc __ret_0_owner;
[L6492]              havoc newOwner_s150;
[L6493]              havoc __ret_0_totalSupply;
[L6494]              havoc _owner_s312;
[L6495]              havoc __ret_0_balanceOf;
[L6496]              havoc _to_s867;
[L6497]              havoc _value_s867;
[L6498]              havoc __ret_0_transfer;
[L6499]              havoc _owner_s453;
[L6500]              havoc _spender_s453;
[L6501]              havoc __ret_0_allowance;
[L6502]              havoc _from_s849;
[L6503]              havoc _to_s849;
[L6504]              havoc _value_s849;
[L6505]              havoc __ret_0_transferFrom;
[L6506]              havoc _spender_s437;
[L6507]              havoc _value_s437;
[L6508]              havoc __ret_0_approve;
[L6509]              havoc _spender_s495;
[L6510]              havoc _addedValue_s495;
[L6511]              havoc __ret_0_increaseApproval;
[L6512]              havoc _spender_s555;
[L6513]              havoc _subtractedValue_s555;
[L6514]              havoc __ret_0_decreaseApproval;
[L6515]              havoc __ret_0_mintingFinished;
[L6516]              havoc __ret_0_maxMintLimit;
[L6517]              havoc _minter_s650;
[L6518]              havoc _amount_s650;
[L6519]              havoc _to_s669;
[L6520]              havoc _amount_s669;
[L6521]              havoc __ret_0_mint;
[L6522]              havoc _minter_s749;
[L6523]              havoc __ret_0_mintAllowed;
[L6524]              havoc __ret_0_finishMinting;
[L6525]              havoc __ret_0_name;
[L6526]              havoc __ret_0_symbol;
[L6527]              havoc __ret_0_decimals;
[L6528]              havoc __ret_0_transferPaused;
[L6529]              havoc tmpNow;
[L6530]              havoc gas;
[L6531]              assume gas > 4000000 && gas <= 8000000;
[L6532]              tmpNow := now;
[L6533]              havoc now;
[L6534]              assume now > tmpNow;
[L6535]              assume msgsender_MSG != null;
[L6536]              assume DType[msgsender_MSG] != SafeMath;
[L6537]              assume DType[msgsender_MSG] != Ownable;
[L6538]              assume DType[msgsender_MSG] != ERC20Basic;
[L6539]              assume DType[msgsender_MSG] != ERC20;
[L6540]              assume DType[msgsender_MSG] != BasicToken;
[L6541]              assume DType[msgsender_MSG] != StandardToken;
[L6542]              assume DType[msgsender_MSG] != MintableToken;
[L6543]              assume DType[msgsender_MSG] != GatherToken;
[L6544]              Alloc[msgsender_MSG] := true;
[L6545]  COND FALSE  !(choice == 22)
[L6551]  COND FALSE  !(choice == 21)
[L6557]  COND FALSE  !(choice == 20)
[L6563]  COND FALSE  !(choice == 19)
[L6569]  COND FALSE  !(choice == 18)
[L6576]  COND FALSE  !(choice == 17)
[L6582]  COND TRUE   choice == 16
[L6583]              gas := gas - 21000;
[L6584]  COND TRUE   gas >= 0
[L6585]              assume _value_s849 >= 0 && _value_s849 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6586]              assume msgvalue_MSG == 0;
[L6587]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_GatherToken(this, msgsender_MSG, msgvalue_MSG, _from_s849, _to_s849, _value_s849);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s849 == _to_s849 && (_value_s849 > balances_BasicToken[this][_from_s849] || _value_s849 > allowed_StandardToken[this][_from_s849][msgsender_MSG])) && _value_s849 >= 0) && _value_s849 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s849] >= 0) && balances_BasicToken[this][_to_s849] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s849] >= 0) && balances_BasicToken[this][_from_s849] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s849][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s849][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_GatherToken0 := true;
[L2]                 call_transferFrom_GatherToken0 := false;
[L2]                 revert := revert_hold;
[L1813]              havoc __exception;
[L1814]              revert := false;
[L1815]  COND FALSE  !(__exception)
[L1842]  CALL        call __ret_0_ := transferFrom~address~address~uint256_GatherToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s849, _to_s849, _value_s849);
[L4087]  CALL        call tranferable_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5693]  COND FALSE  !(!!transferPaused_GatherToken[this])
[L4087]  RET         call tranferable_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4088]  COND FALSE  !(revert)
[L4091]  COND TRUE   DType[this] == GatherToken
[L4092]  CALL        call __var_17 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s849, _to_s849, _value_s849);
[L3464]              __var_5 := null;
[L3465]  COND FALSE  !(!(_to_s409 != null))
[L3469]  COND FALSE  !(!(_value_s409 <= balances_BasicToken[this][_from_s409]))
[L3473]  COND FALSE  !(!(_value_s409 <= allowed_StandardToken[this][_from_s409][msgsender_MSG]))
[L3477]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s409], _value_s409);
[L3048]              assert b_s68 <= a_s68;
[L3049]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3477]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s409], _value_s409);
[L3478]  COND FALSE  !(revert)
[L3481]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s409];
[L3482]              balances_BasicToken[this][_from_s409] := __var_6;
[L3483]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s409];
[L3484]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s409], _value_s409);
[L3062]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              assert c_s92 >= a_s92;
[L3064]              c_s92 := c_s92;
[L3484]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s409], _value_s409);
[L3485]  COND FALSE  !(revert)
[L3488]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s409];
[L3489]              balances_BasicToken[this][_to_s409] := __var_7;
[L3490]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s409];
[L3491]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s409][msgsender_MSG], _value_s409);
[L3048]              assert b_s68 <= a_s68;
[L3049]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3491]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s409][msgsender_MSG], _value_s409);
[L3492]  COND FALSE  !(revert)
[L3495]              sum_allowed1[_from_s409] := sum_allowed1[_from_s409] - allowed_StandardToken[this][_from_s409][msgsender_MSG];
[L3496]              allowed_StandardToken[this][_from_s409][msgsender_MSG] := __var_8;
[L3497]              sum_allowed1[_from_s409] := sum_allowed1[_from_s409] + allowed_StandardToken[this][_from_s409][msgsender_MSG];
[L3498]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L3499]              __ret_0_ := true;
[L4092]  RET         call __var_17 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s849, _to_s849, _value_s849);
[L4093]  COND FALSE  !(revert)
[L4099]              __ret_0_ := __var_17;
[L1842]  RET         call __ret_0_ := transferFrom~address~address~uint256_GatherToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s849, _to_s849, _value_s849);
[L1843]              assume !revert && gas >= 0;
[L6587]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_GatherToken(this, msgsender_MSG, msgvalue_MSG, _from_s849, _to_s849, _value_s849);
[L6702]  RET         call CorralChoice_GatherToken(this);

Loop:
[L6702]  CALL        call CorralChoice_GatherToken(this);
[L6488]              havoc msgsender_MSG;
[L6489]              havoc msgvalue_MSG;
[L6490]              havoc choice;
[L6491]              havoc __ret_0_owner;
[L6492]              havoc newOwner_s150;
[L6493]              havoc __ret_0_totalSupply;
[L6494]              havoc _owner_s312;
[L6495]              havoc __ret_0_balanceOf;
[L6496]              havoc _to_s867;
[L6497]              havoc _value_s867;
[L6498]              havoc __ret_0_transfer;
[L6499]              havoc _owner_s453;
[L6500]              havoc _spender_s453;
[L6501]              havoc __ret_0_allowance;
[L6502]              havoc _from_s849;
[L6503]              havoc _to_s849;
[L6504]              havoc _value_s849;
[L6505]              havoc __ret_0_transferFrom;
[L6506]              havoc _spender_s437;
[L6507]              havoc _value_s437;
[L6508]              havoc __ret_0_approve;
[L6509]              havoc _spender_s495;
[L6510]              havoc _addedValue_s495;
[L6511]              havoc __ret_0_increaseApproval;
[L6512]              havoc _spender_s555;
[L6513]              havoc _subtractedValue_s555;
[L6514]              havoc __ret_0_decreaseApproval;
[L6515]              havoc __ret_0_mintingFinished;
[L6516]              havoc __ret_0_maxMintLimit;
[L6517]              havoc _minter_s650;
[L6518]              havoc _amount_s650;
[L6519]              havoc _to_s669;
[L6520]              havoc _amount_s669;
[L6521]              havoc __ret_0_mint;
[L6522]              havoc _minter_s749;
[L6523]              havoc __ret_0_mintAllowed;
[L6524]              havoc __ret_0_finishMinting;
[L6525]              havoc __ret_0_name;
[L6526]              havoc __ret_0_symbol;
[L6527]              havoc __ret_0_decimals;
[L6528]              havoc __ret_0_transferPaused;
[L6529]              havoc tmpNow;
[L6530]              havoc gas;
[L6531]              assume gas > 4000000 && gas <= 8000000;
[L6532]              tmpNow := now;
[L6533]              havoc now;
[L6534]              assume now > tmpNow;
[L6535]              assume msgsender_MSG != null;
[L6536]              assume DType[msgsender_MSG] != SafeMath;
[L6537]              assume DType[msgsender_MSG] != Ownable;
[L6538]              assume DType[msgsender_MSG] != ERC20Basic;
[L6539]              assume DType[msgsender_MSG] != ERC20;
[L6540]              assume DType[msgsender_MSG] != BasicToken;
[L6541]              assume DType[msgsender_MSG] != StandardToken;
[L6542]              assume DType[msgsender_MSG] != MintableToken;
[L6543]              assume DType[msgsender_MSG] != GatherToken;
[L6544]              Alloc[msgsender_MSG] := true;
[L6545]  COND FALSE  !(choice == 22)
[L6551]  COND FALSE  !(choice == 21)
[L6557]  COND FALSE  !(choice == 20)
[L6563]  COND FALSE  !(choice == 19)
[L6569]  COND FALSE  !(choice == 18)
[L6576]  COND FALSE  !(choice == 17)
[L6582]  COND TRUE   choice == 16
[L6583]              gas := gas - 21000;
[L6584]  COND TRUE   gas >= 0
[L6585]              assume _value_s849 >= 0 && _value_s849 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6586]              assume msgvalue_MSG == 0;
[L6587]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_GatherToken(this, msgsender_MSG, msgvalue_MSG, _from_s849, _to_s849, _value_s849);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s849 == _to_s849 && (_value_s849 > balances_BasicToken[this][_from_s849] || _value_s849 > allowed_StandardToken[this][_from_s849][msgsender_MSG])) && _value_s849 >= 0) && _value_s849 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s849] >= 0) && balances_BasicToken[this][_to_s849] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s849] >= 0) && balances_BasicToken[this][_from_s849] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s849][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s849][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_GatherToken0 := true;
[L2]                 call_transferFrom_GatherToken0 := false;
[L2]                 revert := revert_hold;
[L1813]              havoc __exception;
[L1814]              revert := false;
[L1815]  COND FALSE  !(__exception)
[L1842]  CALL        call __ret_0_ := transferFrom~address~address~uint256_GatherToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s849, _to_s849, _value_s849);
[L4087]  CALL        call tranferable_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5693]  COND FALSE  !(!!transferPaused_GatherToken[this])
[L4087]  RET         call tranferable_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4088]  COND FALSE  !(revert)
[L4091]  COND TRUE   DType[this] == GatherToken
[L4092]  CALL        call __var_17 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s849, _to_s849, _value_s849);
[L3464]              __var_5 := null;
[L3465]  COND FALSE  !(!(_to_s409 != null))
[L3469]  COND FALSE  !(!(_value_s409 <= balances_BasicToken[this][_from_s409]))
[L3473]  COND FALSE  !(!(_value_s409 <= allowed_StandardToken[this][_from_s409][msgsender_MSG]))
[L3477]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s409], _value_s409);
[L3048]              assert b_s68 <= a_s68;
[L3049]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3477]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s409], _value_s409);
[L3478]  COND FALSE  !(revert)
[L3481]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s409];
[L3482]              balances_BasicToken[this][_from_s409] := __var_6;
[L3483]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s409];
[L3484]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s409], _value_s409);
[L3062]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              assert c_s92 >= a_s92;
[L3064]              c_s92 := c_s92;
[L3484]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s409], _value_s409);
[L3485]  COND FALSE  !(revert)
[L3488]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s409];
[L3489]              balances_BasicToken[this][_to_s409] := __var_7;
[L3490]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s409];
[L3491]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s409][msgsender_MSG], _value_s409);
[L3048]              assert b_s68 <= a_s68;
[L3049]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3491]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s409][msgsender_MSG], _value_s409);
[L3492]  COND FALSE  !(revert)
[L3495]              sum_allowed1[_from_s409] := sum_allowed1[_from_s409] - allowed_StandardToken[this][_from_s409][msgsender_MSG];
[L3496]              allowed_StandardToken[this][_from_s409][msgsender_MSG] := __var_8;
[L3497]              sum_allowed1[_from_s409] := sum_allowed1[_from_s409] + allowed_StandardToken[this][_from_s409][msgsender_MSG];
[L3498]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L3499]              __ret_0_ := true;
[L4092]  RET         call __var_17 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s849, _to_s849, _value_s849);
[L4093]  COND FALSE  !(revert)
[L4099]              __ret_0_ := __var_17;
[L1842]  RET         call __ret_0_ := transferFrom~address~address~uint256_GatherToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s849, _to_s849, _value_s849);
[L1843]              assume !revert && gas >= 0;
[L6587]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_GatherToken(this, msgsender_MSG, msgvalue_MSG, _from_s849, _to_s849, _value_s849);
[L6702]  RET         call CorralChoice_GatherToken(this);

[2020-11-25 16:54:09,695 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:54:09,695 INFO  L82        PathProgramCache]: Analyzing trace with hash 1644928711, now seen corresponding path program 1 times
[2020-11-25 16:54:09,696 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:54:09,717 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:54:09,868 INFO  L134       CoverageAnalysis]: Checked inductivity of 886 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 886 trivial. 0 not checked.
[2020-11-25 16:54:09,868 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:54:09,868 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [10] imperfect sequences [] total 10
[2020-11-25 16:54:09,868 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:54:09,869 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-11-25 16:54:09,869 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=19, Invalid=91, Unknown=0, NotChecked=0, Total=110
[2020-11-25 16:54:09,869 INFO  L87              Difference]: Start difference. First operand 3479 states and 3743 transitions. cyclomatic complexity: 266 Second operand 11 states.
[2020-11-25 16:54:11,332 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:54:11,332 INFO  L93              Difference]: Finished difference Result 3512 states and 3785 transitions.
[2020-11-25 16:54:11,332 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-11-25 16:54:11,332 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3512 states and 3785 transitions.
[2020-11-25 16:54:11,338 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 16:54:11,347 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3512 states to 3512 states and 3785 transitions.
[2020-11-25 16:54:11,347 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 902
[2020-11-25 16:54:11,347 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 902
[2020-11-25 16:54:11,348 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3512 states and 3785 transitions.
[2020-11-25 16:54:11,350 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:54:11,350 INFO  L728         BuchiCegarLoop]: Abstraction has 3512 states and 3785 transitions.
[2020-11-25 16:54:11,353 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3512 states and 3785 transitions.
[2020-11-25 16:54:11,371 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3512 to 3500.
[2020-11-25 16:54:11,371 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3500 states.
[2020-11-25 16:54:11,374 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3500 states to 3500 states and 3766 transitions.
[2020-11-25 16:54:11,374 INFO  L751         BuchiCegarLoop]: Abstraction has 3500 states and 3766 transitions.
[2020-11-25 16:54:11,374 INFO  L631         BuchiCegarLoop]: Abstraction has 3500 states and 3766 transitions.
[2020-11-25 16:54:11,374 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 16:54:11,375 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3500 states and 3766 transitions.
[2020-11-25 16:54:11,378 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:54:11,378 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:54:11,379 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:54:11,381 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:54:11,381 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_GatherToken0 := false;
[L2]                 call_transferFrom_GatherToken0 := false;
[L2]     CALL        call main();
[L6692]              assume null == 0;
[L6693]  CALL        call this := FreshRefGenerator__success();
[L2967]              havoc newRef;
[L2968]              assume Alloc[newRef] == false;
[L2969]              Alloc[newRef] := true;
[L2970]              assume newRef != null;
[L6693]  RET         call this := FreshRefGenerator__success();
[L6694]              assume now >= 0;
[L6695]              assume DType[this] == GatherToken;
[L6696]              assume msgvalue_MSG == 0;
[L6697]              gas := gas - 53000;
[L6698]  CALL        call GatherToken_GatherToken(this, msgsender_MSG, msgvalue_MSG);
[L1621]              havoc __exception;
[L1622]              revert := false;
[L1623]  COND TRUE   __exception
[L1624]              __tmp__Balance := Balance;
[L1625]              __tmp__DType := DType;
[L1626]              __tmp__Alloc := Alloc;
[L1627]              __tmp__balance_ADDR := balance_ADDR;
[L1628]              __tmp__M_Ref_int := M_Ref_int;
[L1629]              __tmp__sum_balances0 := sum_balances0;
[L1630]              __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L1631]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1632]              __tmp__sum_allowed1 := sum_allowed1;
[L1633]              __tmp__sum_mintPermissions2 := sum_mintPermissions2;
[L1634]              __tmp__Length := Length;
[L1635]              __tmp__now := now;
[L1636]              __tmp__owner_Ownable := owner_Ownable;
[L1637]              __tmp__balances_BasicToken := balances_BasicToken;
[L1638]              __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L1639]              __tmp__allowed_StandardToken := allowed_StandardToken;
[L1640]              __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L1641]              __tmp__mintPermissions_MintableToken := mintPermissions_MintableToken;
[L1642]              __tmp__maxMintLimit_MintableToken := maxMintLimit_MintableToken;
[L1643]              __tmp__name_GatherToken := name_GatherToken;
[L1644]              __tmp__symbol_GatherToken := symbol_GatherToken;
[L1645]              __tmp__decimals_GatherToken := decimals_GatherToken;
[L1646]              __tmp__transferPaused_GatherToken := transferPaused_GatherToken;
[L1647]  CALL        call GatherToken_GatherToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3964]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3165]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3150]              assume msgsender_MSG != null;
[L3151]              __tmp__Balance[this] := 0;
[L3165]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3166]  COND FALSE  !(revert)
[L3964]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3965]  COND FALSE  !(revert)
[L3968]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3197]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3165]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3150]              assume msgsender_MSG != null;
[L3151]              __tmp__Balance[this] := 0;
[L3165]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3166]  COND FALSE  !(revert)
[L3197]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3198]  COND FALSE  !(revert)
[L3201]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3182]              assume msgsender_MSG != null;
[L3183]              __tmp__Balance[this] := 0;
[L3201]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3202]  COND FALSE  !(revert)
[L3968]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3969]  COND FALSE  !(revert)
[L3972]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3243]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3165]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3150]              assume msgsender_MSG != null;
[L3151]              __tmp__Balance[this] := 0;
[L3165]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3166]  COND FALSE  !(revert)
[L3243]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3244]  COND FALSE  !(revert)
[L3247]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume msgsender_MSG != null;
[L3223]              __tmp__Balance[this] := 0;
[L3224]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L3225]              __tmp__sum_balances0[this] := 0;
[L3226]              __tmp__totalSupply__BasicToken[this] := 0;
[L3247]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3248]  COND FALSE  !(revert)
[L3972]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3973]  COND FALSE  !(revert)
[L3976]  CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3376]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3165]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3150]              assume msgsender_MSG != null;
[L3151]              __tmp__Balance[this] := 0;
[L3165]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3166]  COND FALSE  !(revert)
[L3376]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3377]  COND FALSE  !(revert)
[L3380]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3197]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3165]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3150]              assume msgsender_MSG != null;
[L3151]              __tmp__Balance[this] := 0;
[L3165]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3166]  COND FALSE  !(revert)
[L3197]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3198]  COND FALSE  !(revert)
[L3201]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3182]              assume msgsender_MSG != null;
[L3183]              __tmp__Balance[this] := 0;
[L3201]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3202]  COND FALSE  !(revert)
[L3380]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3381]  COND FALSE  !(revert)
[L3384]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3243]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3165]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3150]              assume msgsender_MSG != null;
[L3151]              __tmp__Balance[this] := 0;
[L3165]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3166]  COND FALSE  !(revert)
[L3243]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3244]  COND FALSE  !(revert)
[L3247]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume msgsender_MSG != null;
[L3223]              __tmp__Balance[this] := 0;
[L3224]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L3225]              __tmp__sum_balances0[this] := 0;
[L3226]              __tmp__totalSupply__BasicToken[this] := 0;
[L3247]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3248]  COND FALSE  !(revert)
[L3384]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3385]  COND FALSE  !(revert)
[L3388]  CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3357]              assume msgsender_MSG != null;
[L3358]              __tmp__Balance[this] := 0;
[L3359]              __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L3360]              __tmp__sum_allowed1[this] := 0;
[L3388]  RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3389]  COND FALSE  !(revert)
[L3976]  RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3977]  COND FALSE  !(revert)
[L3980]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3090]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3071]              assume msgsender_MSG != null;
[L3072]              __tmp__Balance[this] := 0;
[L3073]              __tmp__owner_Ownable[this] := null;
[L3075]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L3090]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3091]  COND FALSE  !(revert)
[L3980]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]  COND FALSE  !(revert)
[L3984]  CALL        call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3634]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3165]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3150]              assume msgsender_MSG != null;
[L3151]              __tmp__Balance[this] := 0;
[L3165]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3166]  COND FALSE  !(revert)
[L3634]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3635]  COND FALSE  !(revert)
[L3638]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3197]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3165]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3150]              assume msgsender_MSG != null;
[L3151]              __tmp__Balance[this] := 0;
[L3165]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3166]  COND FALSE  !(revert)
[L3197]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3198]  COND FALSE  !(revert)
[L3201]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3182]              assume msgsender_MSG != null;
[L3183]              __tmp__Balance[this] := 0;
[L3201]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3202]  COND FALSE  !(revert)
[L3638]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3639]  COND FALSE  !(revert)
[L3642]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3243]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3165]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3150]              assume msgsender_MSG != null;
[L3151]              __tmp__Balance[this] := 0;
[L3165]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3166]  COND FALSE  !(revert)
[L3243]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3244]  COND FALSE  !(revert)
[L3247]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume msgsender_MSG != null;
[L3223]              __tmp__Balance[this] := 0;
[L3224]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L3225]              __tmp__sum_balances0[this] := 0;
[L3226]              __tmp__totalSupply__BasicToken[this] := 0;
[L3247]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3248]  COND FALSE  !(revert)
[L3642]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3643]  COND FALSE  !(revert)
[L3646]  CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3376]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3165]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3150]              assume msgsender_MSG != null;
[L3151]              __tmp__Balance[this] := 0;
[L3165]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3166]  COND FALSE  !(revert)
[L3376]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3377]  COND FALSE  !(revert)
[L3380]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3197]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3165]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3150]              assume msgsender_MSG != null;
[L3151]              __tmp__Balance[this] := 0;
[L3165]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3166]  COND FALSE  !(revert)
[L3197]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3198]  COND FALSE  !(revert)
[L3201]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3182]              assume msgsender_MSG != null;
[L3183]              __tmp__Balance[this] := 0;
[L3201]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3202]  COND FALSE  !(revert)
[L3380]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3381]  COND FALSE  !(revert)
[L3384]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3243]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3165]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3150]              assume msgsender_MSG != null;
[L3151]              __tmp__Balance[this] := 0;
[L3165]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3166]  COND FALSE  !(revert)
[L3243]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3244]  COND FALSE  !(revert)
[L3247]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume msgsender_MSG != null;
[L3223]              __tmp__Balance[this] := 0;
[L3224]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L3225]              __tmp__sum_balances0[this] := 0;
[L3226]              __tmp__totalSupply__BasicToken[this] := 0;
[L3247]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3248]  COND FALSE  !(revert)
[L3384]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3385]  COND FALSE  !(revert)
[L3388]  CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3357]              assume msgsender_MSG != null;
[L3358]              __tmp__Balance[this] := 0;
[L3359]              __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L3360]              __tmp__sum_allowed1[this] := 0;
[L3388]  RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3389]  COND FALSE  !(revert)
[L3646]  RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3647]  COND FALSE  !(revert)
[L3650]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3090]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3071]              assume msgsender_MSG != null;
[L3072]              __tmp__Balance[this] := 0;
[L3073]              __tmp__owner_Ownable[this] := null;
[L3075]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L3090]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3091]  COND FALSE  !(revert)
[L3650]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3651]  COND FALSE  !(revert)
[L3654]  CALL        call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3611]              assume msgsender_MSG != null;
[L3612]              __tmp__Balance[this] := 0;
[L3613]              __tmp__mintingFinished_MintableToken[this] := false;
[L3614]              __tmp__mintPermissions_MintableToken[this] := zeroRefintArr();
[L3615]              __tmp__sum_mintPermissions2[this] := 0;
[L3616]              __tmp__maxMintLimit_MintableToken[this] := 0;
[L3654]  RET         call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3655]  COND FALSE  !(revert)
[L3984]  RET         call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3985]  COND FALSE  !(revert)
[L3988]  CALL        call GatherToken_GatherToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3935]              assume msgsender_MSG != null;
[L3936]              __tmp__Balance[this] := 0;
[L3937]              __tmp__name_GatherToken[this] := 1979683959;
[L3938]              __tmp__symbol_GatherToken[this] := -286833360;
[L3939]              __tmp__decimals_GatherToken[this] := 18;
[L3940]              __tmp__transferPaused_GatherToken[this] := true;
[L3942]              __var_16 := __tmp__decimals_GatherToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              __tmp__maxMintLimit_MintableToken[this] := 400000000 * (nonlinearPow(10, __tmp__decimals_GatherToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3988]  RET         call GatherToken_GatherToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3989]  COND FALSE  !(revert)
[L1647]  RET         call GatherToken_GatherToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L1648]              assume revert || gas < 0;
[L6698]  RET         call GatherToken_GatherToken(this, msgsender_MSG, msgvalue_MSG);
[L6699]              assume !revert && gas >= 0;
[L6702]  CALL        call CorralChoice_GatherToken(this);
[L6488]              havoc msgsender_MSG;
[L6489]              havoc msgvalue_MSG;
[L6490]              havoc choice;
[L6491]              havoc __ret_0_owner;
[L6492]              havoc newOwner_s150;
[L6493]              havoc __ret_0_totalSupply;
[L6494]              havoc _owner_s312;
[L6495]              havoc __ret_0_balanceOf;
[L6496]              havoc _to_s867;
[L6497]              havoc _value_s867;
[L6498]              havoc __ret_0_transfer;
[L6499]              havoc _owner_s453;
[L6500]              havoc _spender_s453;
[L6501]              havoc __ret_0_allowance;
[L6502]              havoc _from_s849;
[L6503]              havoc _to_s849;
[L6504]              havoc _value_s849;
[L6505]              havoc __ret_0_transferFrom;
[L6506]              havoc _spender_s437;
[L6507]              havoc _value_s437;
[L6508]              havoc __ret_0_approve;
[L6509]              havoc _spender_s495;
[L6510]              havoc _addedValue_s495;
[L6511]              havoc __ret_0_increaseApproval;
[L6512]              havoc _spender_s555;
[L6513]              havoc _subtractedValue_s555;
[L6514]              havoc __ret_0_decreaseApproval;
[L6515]              havoc __ret_0_mintingFinished;
[L6516]              havoc __ret_0_maxMintLimit;
[L6517]              havoc _minter_s650;
[L6518]              havoc _amount_s650;
[L6519]              havoc _to_s669;
[L6520]              havoc _amount_s669;
[L6521]              havoc __ret_0_mint;
[L6522]              havoc _minter_s749;
[L6523]              havoc __ret_0_mintAllowed;
[L6524]              havoc __ret_0_finishMinting;
[L6525]              havoc __ret_0_name;
[L6526]              havoc __ret_0_symbol;
[L6527]              havoc __ret_0_decimals;
[L6528]              havoc __ret_0_transferPaused;
[L6529]              havoc tmpNow;
[L6530]              havoc gas;
[L6531]              assume gas > 4000000 && gas <= 8000000;
[L6532]              tmpNow := now;
[L6533]              havoc now;
[L6534]              assume now > tmpNow;
[L6535]              assume msgsender_MSG != null;
[L6536]              assume DType[msgsender_MSG] != SafeMath;
[L6537]              assume DType[msgsender_MSG] != Ownable;
[L6538]              assume DType[msgsender_MSG] != ERC20Basic;
[L6539]              assume DType[msgsender_MSG] != ERC20;
[L6540]              assume DType[msgsender_MSG] != BasicToken;
[L6541]              assume DType[msgsender_MSG] != StandardToken;
[L6542]              assume DType[msgsender_MSG] != MintableToken;
[L6543]              assume DType[msgsender_MSG] != GatherToken;
[L6544]              Alloc[msgsender_MSG] := true;
[L6545]  COND FALSE  !(choice == 22)
[L6551]  COND FALSE  !(choice == 21)
[L6557]  COND FALSE  !(choice == 20)
[L6563]  COND FALSE  !(choice == 19)
[L6569]  COND FALSE  !(choice == 18)
[L6576]  COND FALSE  !(choice == 17)
[L6582]  COND TRUE   choice == 16
[L6583]              gas := gas - 21000;
[L6584]  COND TRUE   gas >= 0
[L6585]              assume _value_s849 >= 0 && _value_s849 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6586]              assume msgvalue_MSG == 0;
[L6587]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_GatherToken(this, msgsender_MSG, msgvalue_MSG, _from_s849, _to_s849, _value_s849);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s849 == _to_s849 && (_value_s849 > balances_BasicToken[this][_from_s849] || _value_s849 > allowed_StandardToken[this][_from_s849][msgsender_MSG])) && _value_s849 >= 0) && _value_s849 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s849] >= 0) && balances_BasicToken[this][_to_s849] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s849] >= 0) && balances_BasicToken[this][_from_s849] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s849][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s849][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_GatherToken0 := true;
[L2]                 call_transferFrom_GatherToken0 := false;
[L2]                 revert := revert_hold;
[L1813]              havoc __exception;
[L1814]              revert := false;
[L1815]  COND FALSE  !(__exception)
[L1842]  CALL        call __ret_0_ := transferFrom~address~address~uint256_GatherToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s849, _to_s849, _value_s849);
[L4087]  CALL        call tranferable_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5693]  COND FALSE  !(!!transferPaused_GatherToken[this])
[L4087]  RET         call tranferable_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4088]  COND FALSE  !(revert)
[L4091]  COND TRUE   DType[this] == GatherToken
[L4092]  CALL        call __var_17 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s849, _to_s849, _value_s849);
[L3464]              __var_5 := null;
[L3465]  COND FALSE  !(!(_to_s409 != null))
[L3469]  COND FALSE  !(!(_value_s409 <= balances_BasicToken[this][_from_s409]))
[L3473]  COND FALSE  !(!(_value_s409 <= allowed_StandardToken[this][_from_s409][msgsender_MSG]))
[L3477]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s409], _value_s409);
[L3048]              assert b_s68 <= a_s68;
[L3049]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3477]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s409], _value_s409);
[L3478]  COND FALSE  !(revert)
[L3481]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s409];
[L3482]              balances_BasicToken[this][_from_s409] := __var_6;
[L3483]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s409];
[L3484]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s409], _value_s409);
[L3062]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              assert c_s92 >= a_s92;
[L3064]              c_s92 := c_s92;
[L3484]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s409], _value_s409);
[L3485]  COND FALSE  !(revert)
[L3488]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s409];
[L3489]              balances_BasicToken[this][_to_s409] := __var_7;
[L3490]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s409];
[L3491]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s409][msgsender_MSG], _value_s409);
[L3048]              assert b_s68 <= a_s68;
[L3049]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3491]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s409][msgsender_MSG], _value_s409);
[L3492]  COND FALSE  !(revert)
[L3495]              sum_allowed1[_from_s409] := sum_allowed1[_from_s409] - allowed_StandardToken[this][_from_s409][msgsender_MSG];
[L3496]              allowed_StandardToken[this][_from_s409][msgsender_MSG] := __var_8;
[L3497]              sum_allowed1[_from_s409] := sum_allowed1[_from_s409] + allowed_StandardToken[this][_from_s409][msgsender_MSG];
[L3498]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L3499]              __ret_0_ := true;
[L4092]  RET         call __var_17 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s849, _to_s849, _value_s849);
[L4093]  COND FALSE  !(revert)
[L4099]              __ret_0_ := __var_17;
[L1842]  RET         call __ret_0_ := transferFrom~address~address~uint256_GatherToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s849, _to_s849, _value_s849);
[L1843]              assume !revert && gas >= 0;
[L6587]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_GatherToken(this, msgsender_MSG, msgvalue_MSG, _from_s849, _to_s849, _value_s849);
[L6702]  RET         call CorralChoice_GatherToken(this);

Loop:
[L6702]  CALL        call CorralChoice_GatherToken(this);
[L6488]              havoc msgsender_MSG;
[L6489]              havoc msgvalue_MSG;
[L6490]              havoc choice;
[L6491]              havoc __ret_0_owner;
[L6492]              havoc newOwner_s150;
[L6493]              havoc __ret_0_totalSupply;
[L6494]              havoc _owner_s312;
[L6495]              havoc __ret_0_balanceOf;
[L6496]              havoc _to_s867;
[L6497]              havoc _value_s867;
[L6498]              havoc __ret_0_transfer;
[L6499]              havoc _owner_s453;
[L6500]              havoc _spender_s453;
[L6501]              havoc __ret_0_allowance;
[L6502]              havoc _from_s849;
[L6503]              havoc _to_s849;
[L6504]              havoc _value_s849;
[L6505]              havoc __ret_0_transferFrom;
[L6506]              havoc _spender_s437;
[L6507]              havoc _value_s437;
[L6508]              havoc __ret_0_approve;
[L6509]              havoc _spender_s495;
[L6510]              havoc _addedValue_s495;
[L6511]              havoc __ret_0_increaseApproval;
[L6512]              havoc _spender_s555;
[L6513]              havoc _subtractedValue_s555;
[L6514]              havoc __ret_0_decreaseApproval;
[L6515]              havoc __ret_0_mintingFinished;
[L6516]              havoc __ret_0_maxMintLimit;
[L6517]              havoc _minter_s650;
[L6518]              havoc _amount_s650;
[L6519]              havoc _to_s669;
[L6520]              havoc _amount_s669;
[L6521]              havoc __ret_0_mint;
[L6522]              havoc _minter_s749;
[L6523]              havoc __ret_0_mintAllowed;
[L6524]              havoc __ret_0_finishMinting;
[L6525]              havoc __ret_0_name;
[L6526]              havoc __ret_0_symbol;
[L6527]              havoc __ret_0_decimals;
[L6528]              havoc __ret_0_transferPaused;
[L6529]              havoc tmpNow;
[L6530]              havoc gas;
[L6531]              assume gas > 4000000 && gas <= 8000000;
[L6532]              tmpNow := now;
[L6533]              havoc now;
[L6534]              assume now > tmpNow;
[L6535]              assume msgsender_MSG != null;
[L6536]              assume DType[msgsender_MSG] != SafeMath;
[L6537]              assume DType[msgsender_MSG] != Ownable;
[L6538]              assume DType[msgsender_MSG] != ERC20Basic;
[L6539]              assume DType[msgsender_MSG] != ERC20;
[L6540]              assume DType[msgsender_MSG] != BasicToken;
[L6541]              assume DType[msgsender_MSG] != StandardToken;
[L6542]              assume DType[msgsender_MSG] != MintableToken;
[L6543]              assume DType[msgsender_MSG] != GatherToken;
[L6544]              Alloc[msgsender_MSG] := true;
[L6545]  COND FALSE  !(choice == 22)
[L6551]  COND FALSE  !(choice == 21)
[L6557]  COND FALSE  !(choice == 20)
[L6563]  COND FALSE  !(choice == 19)
[L6569]  COND FALSE  !(choice == 18)
[L6576]  COND FALSE  !(choice == 17)
[L6582]  COND TRUE   choice == 16
[L6583]              gas := gas - 21000;
[L6584]  COND TRUE   gas >= 0
[L6585]              assume _value_s849 >= 0 && _value_s849 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6586]              assume msgvalue_MSG == 0;
[L6587]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_GatherToken(this, msgsender_MSG, msgvalue_MSG, _from_s849, _to_s849, _value_s849);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s849 == _to_s849 && (_value_s849 > balances_BasicToken[this][_from_s849] || _value_s849 > allowed_StandardToken[this][_from_s849][msgsender_MSG])) && _value_s849 >= 0) && _value_s849 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s849] >= 0) && balances_BasicToken[this][_to_s849] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s849] >= 0) && balances_BasicToken[this][_from_s849] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s849][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s849][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_GatherToken0 := true;
[L2]                 call_transferFrom_GatherToken0 := false;
[L2]                 revert := revert_hold;
[L1813]              havoc __exception;
[L1814]              revert := false;
[L1815]  COND FALSE  !(__exception)
[L1842]  CALL        call __ret_0_ := transferFrom~address~address~uint256_GatherToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s849, _to_s849, _value_s849);
[L4087]  CALL        call tranferable_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5693]  COND FALSE  !(!!transferPaused_GatherToken[this])
[L4087]  RET         call tranferable_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4088]  COND FALSE  !(revert)
[L4091]  COND TRUE   DType[this] == GatherToken
[L4092]  CALL        call __var_17 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s849, _to_s849, _value_s849);
[L3464]              __var_5 := null;
[L3465]  COND FALSE  !(!(_to_s409 != null))
[L3469]  COND FALSE  !(!(_value_s409 <= balances_BasicToken[this][_from_s409]))
[L3473]  COND FALSE  !(!(_value_s409 <= allowed_StandardToken[this][_from_s409][msgsender_MSG]))
[L3477]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s409], _value_s409);
[L3048]              assert b_s68 <= a_s68;
[L3049]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3477]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s409], _value_s409);
[L3478]  COND FALSE  !(revert)
[L3481]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s409];
[L3482]              balances_BasicToken[this][_from_s409] := __var_6;
[L3483]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s409];
[L3484]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s409], _value_s409);
[L3062]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              assert c_s92 >= a_s92;
[L3064]              c_s92 := c_s92;
[L3484]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s409], _value_s409);
[L3485]  COND FALSE  !(revert)
[L3488]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s409];
[L3489]              balances_BasicToken[this][_to_s409] := __var_7;
[L3490]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s409];
[L3491]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s409][msgsender_MSG], _value_s409);
[L3048]              assert b_s68 <= a_s68;
[L3049]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3491]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s409][msgsender_MSG], _value_s409);
[L3492]  COND FALSE  !(revert)
[L3495]              sum_allowed1[_from_s409] := sum_allowed1[_from_s409] - allowed_StandardToken[this][_from_s409][msgsender_MSG];
[L3496]              allowed_StandardToken[this][_from_s409][msgsender_MSG] := __var_8;
[L3497]              sum_allowed1[_from_s409] := sum_allowed1[_from_s409] + allowed_StandardToken[this][_from_s409][msgsender_MSG];
[L3498]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L3499]              __ret_0_ := true;
[L4092]  RET         call __var_17 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s849, _to_s849, _value_s849);
[L4093]  COND FALSE  !(revert)
[L4099]              __ret_0_ := __var_17;
[L1842]  RET         call __ret_0_ := transferFrom~address~address~uint256_GatherToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s849, _to_s849, _value_s849);
[L1843]              assume !revert && gas >= 0;
[L6587]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_GatherToken(this, msgsender_MSG, msgvalue_MSG, _from_s849, _to_s849, _value_s849);
[L6702]  RET         call CorralChoice_GatherToken(this);

[2020-11-25 16:54:11,386 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:54:11,387 INFO  L82        PathProgramCache]: Analyzing trace with hash -1986508737, now seen corresponding path program 1 times
[2020-11-25 16:54:11,387 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:54:11,402 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:54:11,507 INFO  L134       CoverageAnalysis]: Checked inductivity of 886 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 886 trivial. 0 not checked.
[2020-11-25 16:54:11,507 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:54:11,507 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 16:54:11,508 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:54:11,508 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 16:54:11,508 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 16:54:11,508 INFO  L87              Difference]: Start difference. First operand 3500 states and 3766 transitions. cyclomatic complexity: 269 Second operand 4 states.
[2020-11-25 16:54:11,811 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:54:11,812 INFO  L93              Difference]: Finished difference Result 4316 states and 4802 transitions.
[2020-11-25 16:54:11,812 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 16:54:11,812 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4316 states and 4802 transitions.
[2020-11-25 16:54:11,821 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 16:54:11,833 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4316 states to 4134 states and 4610 transitions.
[2020-11-25 16:54:11,833 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1105
[2020-11-25 16:54:11,833 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1105
[2020-11-25 16:54:11,834 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4134 states and 4610 transitions.
[2020-11-25 16:54:11,837 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:54:11,837 INFO  L728         BuchiCegarLoop]: Abstraction has 4134 states and 4610 transitions.
[2020-11-25 16:54:11,840 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4134 states and 4610 transitions.
[2020-11-25 16:54:11,859 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4134 to 3318.
[2020-11-25 16:54:11,859 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3318 states.
[2020-11-25 16:54:11,863 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3318 states to 3318 states and 3573 transitions.
[2020-11-25 16:54:11,863 INFO  L751         BuchiCegarLoop]: Abstraction has 3318 states and 3573 transitions.
[2020-11-25 16:54:11,863 INFO  L631         BuchiCegarLoop]: Abstraction has 3318 states and 3573 transitions.
[2020-11-25 16:54:11,863 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 16:54:11,863 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3318 states and 3573 transitions.
[2020-11-25 16:54:11,866 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:54:11,866 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:54:11,867 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:54:11,869 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:54:11,869 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_GatherToken0 := false;
[L2]                 call_transferFrom_GatherToken0 := false;
[L2]     CALL        call main();
[L6692]              assume null == 0;
[L6693]  CALL        call this := FreshRefGenerator__success();
[L2967]              havoc newRef;
[L2968]              assume Alloc[newRef] == false;
[L2969]              Alloc[newRef] := true;
[L2970]              assume newRef != null;
[L6693]  RET         call this := FreshRefGenerator__success();
[L6694]              assume now >= 0;
[L6695]              assume DType[this] == GatherToken;
[L6696]              assume msgvalue_MSG == 0;
[L6697]              gas := gas - 53000;
[L6698]  CALL        call GatherToken_GatherToken(this, msgsender_MSG, msgvalue_MSG);
[L1621]              havoc __exception;
[L1622]              revert := false;
[L1623]  COND FALSE  !(__exception)
[L1650]  CALL        call GatherToken_GatherToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3997]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3997]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L4001]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3209]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3209]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3210]  COND FALSE  !(revert)
[L3213]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3190]              assume msgsender_MSG != null;
[L3191]              Balance[this] := 0;
[L3213]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3214]  COND FALSE  !(revert)
[L4001]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4002]  COND FALSE  !(revert)
[L4005]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3255]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3233]              assume msgsender_MSG != null;
[L3234]              Balance[this] := 0;
[L3235]              balances_BasicToken[this] := zeroRefintArr();
[L3236]              sum_balances0[this] := 0;
[L3237]              totalSupply__BasicToken[this] := 0;
[L3259]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L4005]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4009]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3396]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3396]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  COND FALSE  !(revert)
[L3400]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3209]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3209]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3210]  COND FALSE  !(revert)
[L3213]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3190]              assume msgsender_MSG != null;
[L3191]              Balance[this] := 0;
[L3213]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3214]  COND FALSE  !(revert)
[L3400]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3401]  COND FALSE  !(revert)
[L3404]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3255]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3233]              assume msgsender_MSG != null;
[L3234]              Balance[this] := 0;
[L3235]              balances_BasicToken[this] := zeroRefintArr();
[L3236]              sum_balances0[this] := 0;
[L3237]              totalSupply__BasicToken[this] := 0;
[L3259]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3404]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3405]  COND FALSE  !(revert)
[L3408]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3367]              assume msgsender_MSG != null;
[L3368]              Balance[this] := 0;
[L3369]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3370]              sum_allowed1[this] := 0;
[L3408]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3409]  COND FALSE  !(revert)
[L4009]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4010]  COND FALSE  !(revert)
[L4013]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3098]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3081]              assume msgsender_MSG != null;
[L3082]              Balance[this] := 0;
[L3083]              owner_Ownable[this] := null;
[L3085]              owner_Ownable[this] := msgsender_MSG;
[L3098]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3099]  COND FALSE  !(revert)
[L4013]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4014]  COND FALSE  !(revert)
[L4017]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3662]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3662]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3663]  COND FALSE  !(revert)
[L3666]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3209]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3209]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3210]  COND FALSE  !(revert)
[L3213]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3190]              assume msgsender_MSG != null;
[L3191]              Balance[this] := 0;
[L3213]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3214]  COND FALSE  !(revert)
[L3666]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]  COND FALSE  !(revert)
[L3670]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3255]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3233]              assume msgsender_MSG != null;
[L3234]              Balance[this] := 0;
[L3235]              balances_BasicToken[this] := zeroRefintArr();
[L3236]              sum_balances0[this] := 0;
[L3237]              totalSupply__BasicToken[this] := 0;
[L3259]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3670]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3671]  COND FALSE  !(revert)
[L3674]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3396]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3396]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  COND FALSE  !(revert)
[L3400]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3209]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3209]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3210]  COND FALSE  !(revert)
[L3213]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3190]              assume msgsender_MSG != null;
[L3191]              Balance[this] := 0;
[L3213]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3214]  COND FALSE  !(revert)
[L3400]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3401]  COND FALSE  !(revert)
[L3404]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3255]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3233]              assume msgsender_MSG != null;
[L3234]              Balance[this] := 0;
[L3235]              balances_BasicToken[this] := zeroRefintArr();
[L3236]              sum_balances0[this] := 0;
[L3237]              totalSupply__BasicToken[this] := 0;
[L3259]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3404]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3405]  COND FALSE  !(revert)
[L3408]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3367]              assume msgsender_MSG != null;
[L3368]              Balance[this] := 0;
[L3369]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3370]              sum_allowed1[this] := 0;
[L3408]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3409]  COND FALSE  !(revert)
[L3674]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3675]  COND FALSE  !(revert)
[L3678]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3098]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3081]              assume msgsender_MSG != null;
[L3082]              Balance[this] := 0;
[L3083]              owner_Ownable[this] := null;
[L3085]              owner_Ownable[this] := msgsender_MSG;
[L3098]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3099]  COND FALSE  !(revert)
[L3678]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3679]  COND FALSE  !(revert)
[L3682]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3623]              assume msgsender_MSG != null;
[L3624]              Balance[this] := 0;
[L3625]              mintingFinished_MintableToken[this] := false;
[L3626]              mintPermissions_MintableToken[this] := zeroRefintArr();
[L3627]              sum_mintPermissions2[this] := 0;
[L3628]              maxMintLimit_MintableToken[this] := 0;
[L3682]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3683]  COND FALSE  !(revert)
[L4017]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4018]  COND FALSE  !(revert)
[L4021]  CALL        call GatherToken_GatherToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3950]              assume msgsender_MSG != null;
[L3951]              Balance[this] := 0;
[L3952]              name_GatherToken[this] := 1979683959;
[L3953]              symbol_GatherToken[this] := -286833360;
[L3954]              decimals_GatherToken[this] := 18;
[L3955]              transferPaused_GatherToken[this] := true;
[L3957]              __var_16 := decimals_GatherToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3958]              maxMintLimit_MintableToken[this] := 400000000 * (nonlinearPow(10, decimals_GatherToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4021]  RET         call GatherToken_GatherToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4022]  COND FALSE  !(revert)
[L1650]  RET         call GatherToken_GatherToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1651]              assume !revert && gas >= 0;
[L6698]  RET         call GatherToken_GatherToken(this, msgsender_MSG, msgvalue_MSG);
[L6699]              assume !revert && gas >= 0;
[L6702]  CALL        call CorralChoice_GatherToken(this);
[L6488]              havoc msgsender_MSG;
[L6489]              havoc msgvalue_MSG;
[L6490]              havoc choice;
[L6491]              havoc __ret_0_owner;
[L6492]              havoc newOwner_s150;
[L6493]              havoc __ret_0_totalSupply;
[L6494]              havoc _owner_s312;
[L6495]              havoc __ret_0_balanceOf;
[L6496]              havoc _to_s867;
[L6497]              havoc _value_s867;
[L6498]              havoc __ret_0_transfer;
[L6499]              havoc _owner_s453;
[L6500]              havoc _spender_s453;
[L6501]              havoc __ret_0_allowance;
[L6502]              havoc _from_s849;
[L6503]              havoc _to_s849;
[L6504]              havoc _value_s849;
[L6505]              havoc __ret_0_transferFrom;
[L6506]              havoc _spender_s437;
[L6507]              havoc _value_s437;
[L6508]              havoc __ret_0_approve;
[L6509]              havoc _spender_s495;
[L6510]              havoc _addedValue_s495;
[L6511]              havoc __ret_0_increaseApproval;
[L6512]              havoc _spender_s555;
[L6513]              havoc _subtractedValue_s555;
[L6514]              havoc __ret_0_decreaseApproval;
[L6515]              havoc __ret_0_mintingFinished;
[L6516]              havoc __ret_0_maxMintLimit;
[L6517]              havoc _minter_s650;
[L6518]              havoc _amount_s650;
[L6519]              havoc _to_s669;
[L6520]              havoc _amount_s669;
[L6521]              havoc __ret_0_mint;
[L6522]              havoc _minter_s749;
[L6523]              havoc __ret_0_mintAllowed;
[L6524]              havoc __ret_0_finishMinting;
[L6525]              havoc __ret_0_name;
[L6526]              havoc __ret_0_symbol;
[L6527]              havoc __ret_0_decimals;
[L6528]              havoc __ret_0_transferPaused;
[L6529]              havoc tmpNow;
[L6530]              havoc gas;
[L6531]              assume gas > 4000000 && gas <= 8000000;
[L6532]              tmpNow := now;
[L6533]              havoc now;
[L6534]              assume now > tmpNow;
[L6535]              assume msgsender_MSG != null;
[L6536]              assume DType[msgsender_MSG] != SafeMath;
[L6537]              assume DType[msgsender_MSG] != Ownable;
[L6538]              assume DType[msgsender_MSG] != ERC20Basic;
[L6539]              assume DType[msgsender_MSG] != ERC20;
[L6540]              assume DType[msgsender_MSG] != BasicToken;
[L6541]              assume DType[msgsender_MSG] != StandardToken;
[L6542]              assume DType[msgsender_MSG] != MintableToken;
[L6543]              assume DType[msgsender_MSG] != GatherToken;
[L6544]              Alloc[msgsender_MSG] := true;
[L6545]  COND FALSE  !(choice == 22)
[L6551]  COND FALSE  !(choice == 21)
[L6557]  COND FALSE  !(choice == 20)
[L6563]  COND FALSE  !(choice == 19)
[L6569]  COND FALSE  !(choice == 18)
[L6576]  COND FALSE  !(choice == 17)
[L6582]  COND FALSE  !(choice == 16)
[L6589]  COND FALSE  !(choice == 15)
[L6596]  COND FALSE  !(choice == 14)
[L6603]  COND FALSE  !(choice == 13)
[L6610]  COND FALSE  !(choice == 12)
[L6616]  COND FALSE  !(choice == 11)
[L6622]  COND FALSE  !(choice == 10)
[L6629]  COND FALSE  !(choice == 9)
[L6636]  COND FALSE  !(choice == 8)
[L6642]  COND FALSE  !(choice == 7)
[L6648]  COND FALSE  !(choice == 6)
[L6654]  COND FALSE  !(choice == 5)
[L6660]  COND FALSE  !(choice == 4)
[L6666]  COND FALSE  !(choice == 3)
[L6672]  COND TRUE   choice == 2
[L6673]              gas := gas - 21000;
[L6674]  COND TRUE   gas >= 0
[L6675]              assume msgvalue_MSG == 0;
[L6676]  CALL        call unpauseTransfer_GatherToken(this, msgsender_MSG, msgvalue_MSG);
[L1684]              havoc __exception;
[L1685]              revert := false;
[L1686]  COND FALSE  !(__exception)
[L1713]  CALL        call unpauseTransfer_GatherToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4038]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5635]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L4038]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4039]  COND FALSE  !(revert)
[L4042]              transferPaused_GatherToken[this] := false;
[L1713]  RET         call unpauseTransfer_GatherToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1714]              assume !revert && gas >= 0;
[L6676]  RET         call unpauseTransfer_GatherToken(this, msgsender_MSG, msgvalue_MSG);
[L6702]  RET         call CorralChoice_GatherToken(this);
[L6702]  CALL        call CorralChoice_GatherToken(this);
[L6488]              havoc msgsender_MSG;
[L6489]              havoc msgvalue_MSG;
[L6490]              havoc choice;
[L6491]              havoc __ret_0_owner;
[L6492]              havoc newOwner_s150;
[L6493]              havoc __ret_0_totalSupply;
[L6494]              havoc _owner_s312;
[L6495]              havoc __ret_0_balanceOf;
[L6496]              havoc _to_s867;
[L6497]              havoc _value_s867;
[L6498]              havoc __ret_0_transfer;
[L6499]              havoc _owner_s453;
[L6500]              havoc _spender_s453;
[L6501]              havoc __ret_0_allowance;
[L6502]              havoc _from_s849;
[L6503]              havoc _to_s849;
[L6504]              havoc _value_s849;
[L6505]              havoc __ret_0_transferFrom;
[L6506]              havoc _spender_s437;
[L6507]              havoc _value_s437;
[L6508]              havoc __ret_0_approve;
[L6509]              havoc _spender_s495;
[L6510]              havoc _addedValue_s495;
[L6511]              havoc __ret_0_increaseApproval;
[L6512]              havoc _spender_s555;
[L6513]              havoc _subtractedValue_s555;
[L6514]              havoc __ret_0_decreaseApproval;
[L6515]              havoc __ret_0_mintingFinished;
[L6516]              havoc __ret_0_maxMintLimit;
[L6517]              havoc _minter_s650;
[L6518]              havoc _amount_s650;
[L6519]              havoc _to_s669;
[L6520]              havoc _amount_s669;
[L6521]              havoc __ret_0_mint;
[L6522]              havoc _minter_s749;
[L6523]              havoc __ret_0_mintAllowed;
[L6524]              havoc __ret_0_finishMinting;
[L6525]              havoc __ret_0_name;
[L6526]              havoc __ret_0_symbol;
[L6527]              havoc __ret_0_decimals;
[L6528]              havoc __ret_0_transferPaused;
[L6529]              havoc tmpNow;
[L6530]              havoc gas;
[L6531]              assume gas > 4000000 && gas <= 8000000;
[L6532]              tmpNow := now;
[L6533]              havoc now;
[L6534]              assume now > tmpNow;
[L6535]              assume msgsender_MSG != null;
[L6536]              assume DType[msgsender_MSG] != SafeMath;
[L6537]              assume DType[msgsender_MSG] != Ownable;
[L6538]              assume DType[msgsender_MSG] != ERC20Basic;
[L6539]              assume DType[msgsender_MSG] != ERC20;
[L6540]              assume DType[msgsender_MSG] != BasicToken;
[L6541]              assume DType[msgsender_MSG] != StandardToken;
[L6542]              assume DType[msgsender_MSG] != MintableToken;
[L6543]              assume DType[msgsender_MSG] != GatherToken;
[L6544]              Alloc[msgsender_MSG] := true;
[L6545]  COND FALSE  !(choice == 22)
[L6551]  COND FALSE  !(choice == 21)
[L6557]  COND FALSE  !(choice == 20)
[L6563]  COND FALSE  !(choice == 19)
[L6569]  COND FALSE  !(choice == 18)
[L6576]  COND FALSE  !(choice == 17)
[L6582]  COND TRUE   choice == 16
[L6583]              gas := gas - 21000;
[L6584]  COND TRUE   gas >= 0
[L6585]              assume _value_s849 >= 0 && _value_s849 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6586]              assume msgvalue_MSG == 0;
[L6587]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_GatherToken(this, msgsender_MSG, msgvalue_MSG, _from_s849, _to_s849, _value_s849);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s849 == _to_s849 && (_value_s849 > balances_BasicToken[this][_from_s849] || _value_s849 > allowed_StandardToken[this][_from_s849][msgsender_MSG])) && _value_s849 >= 0) && _value_s849 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s849] >= 0) && balances_BasicToken[this][_to_s849] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s849] >= 0) && balances_BasicToken[this][_from_s849] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s849][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s849][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_GatherToken0 := true;
[L2]                 call_transferFrom_GatherToken0 := false;
[L2]                 revert := revert_hold;
[L1813]              havoc __exception;
[L1814]              revert := false;
[L1815]  COND FALSE  !(__exception)
[L1842]  CALL        call __ret_0_ := transferFrom~address~address~uint256_GatherToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s849, _to_s849, _value_s849);
[L4087]  CALL        call tranferable_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5693]  COND FALSE  !(!!transferPaused_GatherToken[this])
[L4087]  RET         call tranferable_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4088]  COND FALSE  !(revert)
[L4091]  COND TRUE   DType[this] == GatherToken
[L4092]  CALL        call __var_17 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s849, _to_s849, _value_s849);
[L3464]              __var_5 := null;
[L3465]  COND FALSE  !(!(_to_s409 != null))
[L3469]  COND FALSE  !(!(_value_s409 <= balances_BasicToken[this][_from_s409]))
[L3473]  COND FALSE  !(!(_value_s409 <= allowed_StandardToken[this][_from_s409][msgsender_MSG]))
[L3477]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s409], _value_s409);
[L3048]              assert b_s68 <= a_s68;
[L3049]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3477]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s409], _value_s409);
[L3478]  COND FALSE  !(revert)
[L3481]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s409];
[L3482]              balances_BasicToken[this][_from_s409] := __var_6;
[L3483]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s409];
[L3484]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s409], _value_s409);
[L3062]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              assert c_s92 >= a_s92;
[L3064]              c_s92 := c_s92;
[L3484]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s409], _value_s409);
[L3485]  COND FALSE  !(revert)
[L3488]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s409];
[L3489]              balances_BasicToken[this][_to_s409] := __var_7;
[L3490]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s409];
[L3491]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s409][msgsender_MSG], _value_s409);
[L3048]              assert b_s68 <= a_s68;
[L3049]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3491]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s409][msgsender_MSG], _value_s409);
[L3492]  COND FALSE  !(revert)
[L3495]              sum_allowed1[_from_s409] := sum_allowed1[_from_s409] - allowed_StandardToken[this][_from_s409][msgsender_MSG];
[L3496]              allowed_StandardToken[this][_from_s409][msgsender_MSG] := __var_8;
[L3497]              sum_allowed1[_from_s409] := sum_allowed1[_from_s409] + allowed_StandardToken[this][_from_s409][msgsender_MSG];
[L3498]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L3499]              __ret_0_ := true;
[L4092]  RET         call __var_17 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s849, _to_s849, _value_s849);
[L4093]  COND FALSE  !(revert)
[L4099]              __ret_0_ := __var_17;
[L1842]  RET         call __ret_0_ := transferFrom~address~address~uint256_GatherToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s849, _to_s849, _value_s849);
[L1843]              assume !revert && gas >= 0;
[L6587]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_GatherToken(this, msgsender_MSG, msgvalue_MSG, _from_s849, _to_s849, _value_s849);
[L6702]  RET         call CorralChoice_GatherToken(this);

Loop:
[L6702]  CALL        call CorralChoice_GatherToken(this);
[L6488]              havoc msgsender_MSG;
[L6489]              havoc msgvalue_MSG;
[L6490]              havoc choice;
[L6491]              havoc __ret_0_owner;
[L6492]              havoc newOwner_s150;
[L6493]              havoc __ret_0_totalSupply;
[L6494]              havoc _owner_s312;
[L6495]              havoc __ret_0_balanceOf;
[L6496]              havoc _to_s867;
[L6497]              havoc _value_s867;
[L6498]              havoc __ret_0_transfer;
[L6499]              havoc _owner_s453;
[L6500]              havoc _spender_s453;
[L6501]              havoc __ret_0_allowance;
[L6502]              havoc _from_s849;
[L6503]              havoc _to_s849;
[L6504]              havoc _value_s849;
[L6505]              havoc __ret_0_transferFrom;
[L6506]              havoc _spender_s437;
[L6507]              havoc _value_s437;
[L6508]              havoc __ret_0_approve;
[L6509]              havoc _spender_s495;
[L6510]              havoc _addedValue_s495;
[L6511]              havoc __ret_0_increaseApproval;
[L6512]              havoc _spender_s555;
[L6513]              havoc _subtractedValue_s555;
[L6514]              havoc __ret_0_decreaseApproval;
[L6515]              havoc __ret_0_mintingFinished;
[L6516]              havoc __ret_0_maxMintLimit;
[L6517]              havoc _minter_s650;
[L6518]              havoc _amount_s650;
[L6519]              havoc _to_s669;
[L6520]              havoc _amount_s669;
[L6521]              havoc __ret_0_mint;
[L6522]              havoc _minter_s749;
[L6523]              havoc __ret_0_mintAllowed;
[L6524]              havoc __ret_0_finishMinting;
[L6525]              havoc __ret_0_name;
[L6526]              havoc __ret_0_symbol;
[L6527]              havoc __ret_0_decimals;
[L6528]              havoc __ret_0_transferPaused;
[L6529]              havoc tmpNow;
[L6530]              havoc gas;
[L6531]              assume gas > 4000000 && gas <= 8000000;
[L6532]              tmpNow := now;
[L6533]              havoc now;
[L6534]              assume now > tmpNow;
[L6535]              assume msgsender_MSG != null;
[L6536]              assume DType[msgsender_MSG] != SafeMath;
[L6537]              assume DType[msgsender_MSG] != Ownable;
[L6538]              assume DType[msgsender_MSG] != ERC20Basic;
[L6539]              assume DType[msgsender_MSG] != ERC20;
[L6540]              assume DType[msgsender_MSG] != BasicToken;
[L6541]              assume DType[msgsender_MSG] != StandardToken;
[L6542]              assume DType[msgsender_MSG] != MintableToken;
[L6543]              assume DType[msgsender_MSG] != GatherToken;
[L6544]              Alloc[msgsender_MSG] := true;
[L6545]  COND FALSE  !(choice == 22)
[L6551]  COND FALSE  !(choice == 21)
[L6557]  COND FALSE  !(choice == 20)
[L6563]  COND FALSE  !(choice == 19)
[L6569]  COND FALSE  !(choice == 18)
[L6576]  COND FALSE  !(choice == 17)
[L6582]  COND TRUE   choice == 16
[L6583]              gas := gas - 21000;
[L6584]  COND TRUE   gas >= 0
[L6585]              assume _value_s849 >= 0 && _value_s849 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6586]              assume msgvalue_MSG == 0;
[L6587]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_GatherToken(this, msgsender_MSG, msgvalue_MSG, _from_s849, _to_s849, _value_s849);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s849 == _to_s849 && (_value_s849 > balances_BasicToken[this][_from_s849] || _value_s849 > allowed_StandardToken[this][_from_s849][msgsender_MSG])) && _value_s849 >= 0) && _value_s849 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s849] >= 0) && balances_BasicToken[this][_to_s849] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s849] >= 0) && balances_BasicToken[this][_from_s849] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s849][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s849][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_GatherToken0 := true;
[L2]                 call_transferFrom_GatherToken0 := false;
[L2]                 revert := revert_hold;
[L1813]              havoc __exception;
[L1814]              revert := false;
[L1815]  COND FALSE  !(__exception)
[L1842]  CALL        call __ret_0_ := transferFrom~address~address~uint256_GatherToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s849, _to_s849, _value_s849);
[L4087]  CALL        call tranferable_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5693]  COND FALSE  !(!!transferPaused_GatherToken[this])
[L4087]  RET         call tranferable_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4088]  COND FALSE  !(revert)
[L4091]  COND TRUE   DType[this] == GatherToken
[L4092]  CALL        call __var_17 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s849, _to_s849, _value_s849);
[L3464]              __var_5 := null;
[L3465]  COND FALSE  !(!(_to_s409 != null))
[L3469]  COND FALSE  !(!(_value_s409 <= balances_BasicToken[this][_from_s409]))
[L3473]  COND FALSE  !(!(_value_s409 <= allowed_StandardToken[this][_from_s409][msgsender_MSG]))
[L3477]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s409], _value_s409);
[L3048]              assert b_s68 <= a_s68;
[L3049]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3477]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s409], _value_s409);
[L3478]  COND FALSE  !(revert)
[L3481]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s409];
[L3482]              balances_BasicToken[this][_from_s409] := __var_6;
[L3483]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s409];
[L3484]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s409], _value_s409);
[L3062]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              assert c_s92 >= a_s92;
[L3064]              c_s92 := c_s92;
[L3484]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s409], _value_s409);
[L3485]  COND FALSE  !(revert)
[L3488]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s409];
[L3489]              balances_BasicToken[this][_to_s409] := __var_7;
[L3490]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s409];
[L3491]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s409][msgsender_MSG], _value_s409);
[L3048]              assert b_s68 <= a_s68;
[L3049]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3491]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s409][msgsender_MSG], _value_s409);
[L3492]  COND FALSE  !(revert)
[L3495]              sum_allowed1[_from_s409] := sum_allowed1[_from_s409] - allowed_StandardToken[this][_from_s409][msgsender_MSG];
[L3496]              allowed_StandardToken[this][_from_s409][msgsender_MSG] := __var_8;
[L3497]              sum_allowed1[_from_s409] := sum_allowed1[_from_s409] + allowed_StandardToken[this][_from_s409][msgsender_MSG];
[L3498]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L3499]              __ret_0_ := true;
[L4092]  RET         call __var_17 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s849, _to_s849, _value_s849);
[L4093]  COND FALSE  !(revert)
[L4099]              __ret_0_ := __var_17;
[L1842]  RET         call __ret_0_ := transferFrom~address~address~uint256_GatherToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s849, _to_s849, _value_s849);
[L1843]              assume !revert && gas >= 0;
[L6587]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_GatherToken(this, msgsender_MSG, msgvalue_MSG, _from_s849, _to_s849, _value_s849);
[L6702]  RET         call CorralChoice_GatherToken(this);

[2020-11-25 16:54:11,874 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:54:11,875 INFO  L82        PathProgramCache]: Analyzing trace with hash -1394945600, now seen corresponding path program 1 times
[2020-11-25 16:54:11,875 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:54:11,894 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:54:12,131 INFO  L134       CoverageAnalysis]: Checked inductivity of 952 backedges. 10 proven. 0 refuted. 0 times theorem prover too weak. 942 trivial. 0 not checked.
[2020-11-25 16:54:12,131 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:54:12,131 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [15] imperfect sequences [] total 15
[2020-11-25 16:54:12,132 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:54:12,132 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-11-25 16:54:12,132 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=30, Invalid=210, Unknown=0, NotChecked=0, Total=240
[2020-11-25 16:54:12,132 INFO  L87              Difference]: Start difference. First operand 3318 states and 3573 transitions. cyclomatic complexity: 258 Second operand 16 states.
[2020-11-25 16:54:14,099 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:54:14,100 INFO  L93              Difference]: Finished difference Result 3424 states and 3693 transitions.
[2020-11-25 16:54:14,101 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 18 states. 
[2020-11-25 16:54:14,101 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3424 states and 3693 transitions.
[2020-11-25 16:54:14,115 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:54:14,126 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3424 states to 3424 states and 3693 transitions.
[2020-11-25 16:54:14,126 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 911
[2020-11-25 16:54:14,126 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 911
[2020-11-25 16:54:14,126 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3424 states and 3693 transitions.
[2020-11-25 16:54:14,130 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:54:14,130 INFO  L728         BuchiCegarLoop]: Abstraction has 3424 states and 3693 transitions.
[2020-11-25 16:54:14,134 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3424 states and 3693 transitions.
[2020-11-25 16:54:14,155 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3424 to 3376.
[2020-11-25 16:54:14,155 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3376 states.
[2020-11-25 16:54:14,159 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3376 states to 3376 states and 3644 transitions.
[2020-11-25 16:54:14,159 INFO  L751         BuchiCegarLoop]: Abstraction has 3376 states and 3644 transitions.
[2020-11-25 16:54:14,159 INFO  L631         BuchiCegarLoop]: Abstraction has 3376 states and 3644 transitions.
[2020-11-25 16:54:14,159 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 16:54:14,159 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3376 states and 3644 transitions.
[2020-11-25 16:54:14,164 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:54:14,164 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:54:14,164 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:54:14,167 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:54:14,167 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_GatherToken0 := false;
[L2]                 call_transferFrom_GatherToken0 := false;
[L2]     CALL        call main();
[L6692]              assume null == 0;
[L6693]  CALL        call this := FreshRefGenerator__success();
[L2967]              havoc newRef;
[L2968]              assume Alloc[newRef] == false;
[L2969]              Alloc[newRef] := true;
[L2970]              assume newRef != null;
[L6693]  RET         call this := FreshRefGenerator__success();
[L6694]              assume now >= 0;
[L6695]              assume DType[this] == GatherToken;
[L6696]              assume msgvalue_MSG == 0;
[L6697]              gas := gas - 53000;
[L6698]  CALL        call GatherToken_GatherToken(this, msgsender_MSG, msgvalue_MSG);
[L1621]              havoc __exception;
[L1622]              revert := false;
[L1623]  COND FALSE  !(__exception)
[L1650]  CALL        call GatherToken_GatherToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3997]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3997]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L4001]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3209]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3209]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3210]  COND FALSE  !(revert)
[L3213]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3190]              assume msgsender_MSG != null;
[L3191]              Balance[this] := 0;
[L3213]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3214]  COND FALSE  !(revert)
[L4001]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4002]  COND FALSE  !(revert)
[L4005]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3255]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3233]              assume msgsender_MSG != null;
[L3234]              Balance[this] := 0;
[L3235]              balances_BasicToken[this] := zeroRefintArr();
[L3236]              sum_balances0[this] := 0;
[L3237]              totalSupply__BasicToken[this] := 0;
[L3259]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L4005]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4009]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3396]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3396]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  COND FALSE  !(revert)
[L3400]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3209]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3209]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3210]  COND FALSE  !(revert)
[L3213]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3190]              assume msgsender_MSG != null;
[L3191]              Balance[this] := 0;
[L3213]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3214]  COND FALSE  !(revert)
[L3400]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3401]  COND FALSE  !(revert)
[L3404]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3255]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3233]              assume msgsender_MSG != null;
[L3234]              Balance[this] := 0;
[L3235]              balances_BasicToken[this] := zeroRefintArr();
[L3236]              sum_balances0[this] := 0;
[L3237]              totalSupply__BasicToken[this] := 0;
[L3259]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3404]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3405]  COND FALSE  !(revert)
[L3408]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3367]              assume msgsender_MSG != null;
[L3368]              Balance[this] := 0;
[L3369]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3370]              sum_allowed1[this] := 0;
[L3408]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3409]  COND FALSE  !(revert)
[L4009]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4010]  COND FALSE  !(revert)
[L4013]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3098]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3081]              assume msgsender_MSG != null;
[L3082]              Balance[this] := 0;
[L3083]              owner_Ownable[this] := null;
[L3085]              owner_Ownable[this] := msgsender_MSG;
[L3098]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3099]  COND FALSE  !(revert)
[L4013]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4014]  COND FALSE  !(revert)
[L4017]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3662]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3662]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3663]  COND FALSE  !(revert)
[L3666]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3209]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3209]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3210]  COND FALSE  !(revert)
[L3213]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3190]              assume msgsender_MSG != null;
[L3191]              Balance[this] := 0;
[L3213]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3214]  COND FALSE  !(revert)
[L3666]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]  COND FALSE  !(revert)
[L3670]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3255]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3233]              assume msgsender_MSG != null;
[L3234]              Balance[this] := 0;
[L3235]              balances_BasicToken[this] := zeroRefintArr();
[L3236]              sum_balances0[this] := 0;
[L3237]              totalSupply__BasicToken[this] := 0;
[L3259]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3670]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3671]  COND FALSE  !(revert)
[L3674]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3396]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3396]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  COND FALSE  !(revert)
[L3400]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3209]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3209]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3210]  COND FALSE  !(revert)
[L3213]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3190]              assume msgsender_MSG != null;
[L3191]              Balance[this] := 0;
[L3213]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3214]  COND FALSE  !(revert)
[L3400]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3401]  COND FALSE  !(revert)
[L3404]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3255]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3233]              assume msgsender_MSG != null;
[L3234]              Balance[this] := 0;
[L3235]              balances_BasicToken[this] := zeroRefintArr();
[L3236]              sum_balances0[this] := 0;
[L3237]              totalSupply__BasicToken[this] := 0;
[L3259]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3404]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3405]  COND FALSE  !(revert)
[L3408]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3367]              assume msgsender_MSG != null;
[L3368]              Balance[this] := 0;
[L3369]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3370]              sum_allowed1[this] := 0;
[L3408]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3409]  COND FALSE  !(revert)
[L3674]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3675]  COND FALSE  !(revert)
[L3678]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3098]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3081]              assume msgsender_MSG != null;
[L3082]              Balance[this] := 0;
[L3083]              owner_Ownable[this] := null;
[L3085]              owner_Ownable[this] := msgsender_MSG;
[L3098]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3099]  COND FALSE  !(revert)
[L3678]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3679]  COND FALSE  !(revert)
[L3682]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3623]              assume msgsender_MSG != null;
[L3624]              Balance[this] := 0;
[L3625]              mintingFinished_MintableToken[this] := false;
[L3626]              mintPermissions_MintableToken[this] := zeroRefintArr();
[L3627]              sum_mintPermissions2[this] := 0;
[L3628]              maxMintLimit_MintableToken[this] := 0;
[L3682]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3683]  COND FALSE  !(revert)
[L4017]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4018]  COND FALSE  !(revert)
[L4021]  CALL        call GatherToken_GatherToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3950]              assume msgsender_MSG != null;
[L3951]              Balance[this] := 0;
[L3952]              name_GatherToken[this] := 1979683959;
[L3953]              symbol_GatherToken[this] := -286833360;
[L3954]              decimals_GatherToken[this] := 18;
[L3955]              transferPaused_GatherToken[this] := true;
[L3957]              __var_16 := decimals_GatherToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3958]              maxMintLimit_MintableToken[this] := 400000000 * (nonlinearPow(10, decimals_GatherToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4021]  RET         call GatherToken_GatherToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4022]  COND FALSE  !(revert)
[L1650]  RET         call GatherToken_GatherToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1651]              assume !revert && gas >= 0;
[L6698]  RET         call GatherToken_GatherToken(this, msgsender_MSG, msgvalue_MSG);
[L6699]              assume !revert && gas >= 0;
[L6702]  CALL        call CorralChoice_GatherToken(this);
[L6488]              havoc msgsender_MSG;
[L6489]              havoc msgvalue_MSG;
[L6490]              havoc choice;
[L6491]              havoc __ret_0_owner;
[L6492]              havoc newOwner_s150;
[L6493]              havoc __ret_0_totalSupply;
[L6494]              havoc _owner_s312;
[L6495]              havoc __ret_0_balanceOf;
[L6496]              havoc _to_s867;
[L6497]              havoc _value_s867;
[L6498]              havoc __ret_0_transfer;
[L6499]              havoc _owner_s453;
[L6500]              havoc _spender_s453;
[L6501]              havoc __ret_0_allowance;
[L6502]              havoc _from_s849;
[L6503]              havoc _to_s849;
[L6504]              havoc _value_s849;
[L6505]              havoc __ret_0_transferFrom;
[L6506]              havoc _spender_s437;
[L6507]              havoc _value_s437;
[L6508]              havoc __ret_0_approve;
[L6509]              havoc _spender_s495;
[L6510]              havoc _addedValue_s495;
[L6511]              havoc __ret_0_increaseApproval;
[L6512]              havoc _spender_s555;
[L6513]              havoc _subtractedValue_s555;
[L6514]              havoc __ret_0_decreaseApproval;
[L6515]              havoc __ret_0_mintingFinished;
[L6516]              havoc __ret_0_maxMintLimit;
[L6517]              havoc _minter_s650;
[L6518]              havoc _amount_s650;
[L6519]              havoc _to_s669;
[L6520]              havoc _amount_s669;
[L6521]              havoc __ret_0_mint;
[L6522]              havoc _minter_s749;
[L6523]              havoc __ret_0_mintAllowed;
[L6524]              havoc __ret_0_finishMinting;
[L6525]              havoc __ret_0_name;
[L6526]              havoc __ret_0_symbol;
[L6527]              havoc __ret_0_decimals;
[L6528]              havoc __ret_0_transferPaused;
[L6529]              havoc tmpNow;
[L6530]              havoc gas;
[L6531]              assume gas > 4000000 && gas <= 8000000;
[L6532]              tmpNow := now;
[L6533]              havoc now;
[L6534]              assume now > tmpNow;
[L6535]              assume msgsender_MSG != null;
[L6536]              assume DType[msgsender_MSG] != SafeMath;
[L6537]              assume DType[msgsender_MSG] != Ownable;
[L6538]              assume DType[msgsender_MSG] != ERC20Basic;
[L6539]              assume DType[msgsender_MSG] != ERC20;
[L6540]              assume DType[msgsender_MSG] != BasicToken;
[L6541]              assume DType[msgsender_MSG] != StandardToken;
[L6542]              assume DType[msgsender_MSG] != MintableToken;
[L6543]              assume DType[msgsender_MSG] != GatherToken;
[L6544]              Alloc[msgsender_MSG] := true;
[L6545]  COND FALSE  !(choice == 22)
[L6551]  COND FALSE  !(choice == 21)
[L6557]  COND FALSE  !(choice == 20)
[L6563]  COND FALSE  !(choice == 19)
[L6569]  COND FALSE  !(choice == 18)
[L6576]  COND FALSE  !(choice == 17)
[L6582]  COND FALSE  !(choice == 16)
[L6589]  COND TRUE   choice == 15
[L6590]              gas := gas - 21000;
[L6591]  COND TRUE   gas >= 0
[L6592]              assume _value_s437 >= 0 && _value_s437 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6593]              assume msgvalue_MSG == 0;
[L6594]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s437, _value_s437);
[L873]               havoc __exception;
[L874]               revert := false;
[L875]   COND FALSE  !(__exception)
[L902]   CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s437, _value_s437);
[L3514]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s437];
[L3515]              allowed_StandardToken[this][msgsender_MSG][_spender_s437] := _value_s437;
[L3516]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s437];
[L3517]              assert { :EventEmitted "Approval_StandardToken" } true;
[L3518]              __ret_0_ := true;
[L902]   RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s437, _value_s437);
[L903]               assume !revert && gas >= 0;
[L6594]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s437, _value_s437);
[L6702]  RET         call CorralChoice_GatherToken(this);
[L6702]  CALL        call CorralChoice_GatherToken(this);
[L6488]              havoc msgsender_MSG;
[L6489]              havoc msgvalue_MSG;
[L6490]              havoc choice;
[L6491]              havoc __ret_0_owner;
[L6492]              havoc newOwner_s150;
[L6493]              havoc __ret_0_totalSupply;
[L6494]              havoc _owner_s312;
[L6495]              havoc __ret_0_balanceOf;
[L6496]              havoc _to_s867;
[L6497]              havoc _value_s867;
[L6498]              havoc __ret_0_transfer;
[L6499]              havoc _owner_s453;
[L6500]              havoc _spender_s453;
[L6501]              havoc __ret_0_allowance;
[L6502]              havoc _from_s849;
[L6503]              havoc _to_s849;
[L6504]              havoc _value_s849;
[L6505]              havoc __ret_0_transferFrom;
[L6506]              havoc _spender_s437;
[L6507]              havoc _value_s437;
[L6508]              havoc __ret_0_approve;
[L6509]              havoc _spender_s495;
[L6510]              havoc _addedValue_s495;
[L6511]              havoc __ret_0_increaseApproval;
[L6512]              havoc _spender_s555;
[L6513]              havoc _subtractedValue_s555;
[L6514]              havoc __ret_0_decreaseApproval;
[L6515]              havoc __ret_0_mintingFinished;
[L6516]              havoc __ret_0_maxMintLimit;
[L6517]              havoc _minter_s650;
[L6518]              havoc _amount_s650;
[L6519]              havoc _to_s669;
[L6520]              havoc _amount_s669;
[L6521]              havoc __ret_0_mint;
[L6522]              havoc _minter_s749;
[L6523]              havoc __ret_0_mintAllowed;
[L6524]              havoc __ret_0_finishMinting;
[L6525]              havoc __ret_0_name;
[L6526]              havoc __ret_0_symbol;
[L6527]              havoc __ret_0_decimals;
[L6528]              havoc __ret_0_transferPaused;
[L6529]              havoc tmpNow;
[L6530]              havoc gas;
[L6531]              assume gas > 4000000 && gas <= 8000000;
[L6532]              tmpNow := now;
[L6533]              havoc now;
[L6534]              assume now > tmpNow;
[L6535]              assume msgsender_MSG != null;
[L6536]              assume DType[msgsender_MSG] != SafeMath;
[L6537]              assume DType[msgsender_MSG] != Ownable;
[L6538]              assume DType[msgsender_MSG] != ERC20Basic;
[L6539]              assume DType[msgsender_MSG] != ERC20;
[L6540]              assume DType[msgsender_MSG] != BasicToken;
[L6541]              assume DType[msgsender_MSG] != StandardToken;
[L6542]              assume DType[msgsender_MSG] != MintableToken;
[L6543]              assume DType[msgsender_MSG] != GatherToken;
[L6544]              Alloc[msgsender_MSG] := true;
[L6545]  COND FALSE  !(choice == 22)
[L6551]  COND FALSE  !(choice == 21)
[L6557]  COND FALSE  !(choice == 20)
[L6563]  COND FALSE  !(choice == 19)
[L6569]  COND FALSE  !(choice == 18)
[L6576]  COND FALSE  !(choice == 17)
[L6582]  COND FALSE  !(choice == 16)
[L6589]  COND FALSE  !(choice == 15)
[L6596]  COND FALSE  !(choice == 14)
[L6603]  COND FALSE  !(choice == 13)
[L6610]  COND FALSE  !(choice == 12)
[L6616]  COND FALSE  !(choice == 11)
[L6622]  COND FALSE  !(choice == 10)
[L6629]  COND FALSE  !(choice == 9)
[L6636]  COND FALSE  !(choice == 8)
[L6642]  COND FALSE  !(choice == 7)
[L6648]  COND FALSE  !(choice == 6)
[L6654]  COND FALSE  !(choice == 5)
[L6660]  COND FALSE  !(choice == 4)
[L6666]  COND FALSE  !(choice == 3)
[L6672]  COND TRUE   choice == 2
[L6673]              gas := gas - 21000;
[L6674]  COND TRUE   gas >= 0
[L6675]              assume msgvalue_MSG == 0;
[L6676]  CALL        call unpauseTransfer_GatherToken(this, msgsender_MSG, msgvalue_MSG);
[L1684]              havoc __exception;
[L1685]              revert := false;
[L1686]  COND FALSE  !(__exception)
[L1713]  CALL        call unpauseTransfer_GatherToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4038]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5635]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L4038]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4039]  COND FALSE  !(revert)
[L4042]              transferPaused_GatherToken[this] := false;
[L1713]  RET         call unpauseTransfer_GatherToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1714]              assume !revert && gas >= 0;
[L6676]  RET         call unpauseTransfer_GatherToken(this, msgsender_MSG, msgvalue_MSG);
[L6702]  RET         call CorralChoice_GatherToken(this);
[L6702]  CALL        call CorralChoice_GatherToken(this);
[L6488]              havoc msgsender_MSG;
[L6489]              havoc msgvalue_MSG;
[L6490]              havoc choice;
[L6491]              havoc __ret_0_owner;
[L6492]              havoc newOwner_s150;
[L6493]              havoc __ret_0_totalSupply;
[L6494]              havoc _owner_s312;
[L6495]              havoc __ret_0_balanceOf;
[L6496]              havoc _to_s867;
[L6497]              havoc _value_s867;
[L6498]              havoc __ret_0_transfer;
[L6499]              havoc _owner_s453;
[L6500]              havoc _spender_s453;
[L6501]              havoc __ret_0_allowance;
[L6502]              havoc _from_s849;
[L6503]              havoc _to_s849;
[L6504]              havoc _value_s849;
[L6505]              havoc __ret_0_transferFrom;
[L6506]              havoc _spender_s437;
[L6507]              havoc _value_s437;
[L6508]              havoc __ret_0_approve;
[L6509]              havoc _spender_s495;
[L6510]              havoc _addedValue_s495;
[L6511]              havoc __ret_0_increaseApproval;
[L6512]              havoc _spender_s555;
[L6513]              havoc _subtractedValue_s555;
[L6514]              havoc __ret_0_decreaseApproval;
[L6515]              havoc __ret_0_mintingFinished;
[L6516]              havoc __ret_0_maxMintLimit;
[L6517]              havoc _minter_s650;
[L6518]              havoc _amount_s650;
[L6519]              havoc _to_s669;
[L6520]              havoc _amount_s669;
[L6521]              havoc __ret_0_mint;
[L6522]              havoc _minter_s749;
[L6523]              havoc __ret_0_mintAllowed;
[L6524]              havoc __ret_0_finishMinting;
[L6525]              havoc __ret_0_name;
[L6526]              havoc __ret_0_symbol;
[L6527]              havoc __ret_0_decimals;
[L6528]              havoc __ret_0_transferPaused;
[L6529]              havoc tmpNow;
[L6530]              havoc gas;
[L6531]              assume gas > 4000000 && gas <= 8000000;
[L6532]              tmpNow := now;
[L6533]              havoc now;
[L6534]              assume now > tmpNow;
[L6535]              assume msgsender_MSG != null;
[L6536]              assume DType[msgsender_MSG] != SafeMath;
[L6537]              assume DType[msgsender_MSG] != Ownable;
[L6538]              assume DType[msgsender_MSG] != ERC20Basic;
[L6539]              assume DType[msgsender_MSG] != ERC20;
[L6540]              assume DType[msgsender_MSG] != BasicToken;
[L6541]              assume DType[msgsender_MSG] != StandardToken;
[L6542]              assume DType[msgsender_MSG] != MintableToken;
[L6543]              assume DType[msgsender_MSG] != GatherToken;
[L6544]              Alloc[msgsender_MSG] := true;
[L6545]  COND FALSE  !(choice == 22)
[L6551]  COND FALSE  !(choice == 21)
[L6557]  COND FALSE  !(choice == 20)
[L6563]  COND FALSE  !(choice == 19)
[L6569]  COND FALSE  !(choice == 18)
[L6576]  COND FALSE  !(choice == 17)
[L6582]  COND TRUE   choice == 16
[L6583]              gas := gas - 21000;
[L6584]  COND TRUE   gas >= 0
[L6585]              assume _value_s849 >= 0 && _value_s849 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6586]              assume msgvalue_MSG == 0;
[L6587]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_GatherToken(this, msgsender_MSG, msgvalue_MSG, _from_s849, _to_s849, _value_s849);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s849 == _to_s849 && (_value_s849 > balances_BasicToken[this][_from_s849] || _value_s849 > allowed_StandardToken[this][_from_s849][msgsender_MSG])) && _value_s849 >= 0) && _value_s849 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s849] >= 0) && balances_BasicToken[this][_to_s849] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s849] >= 0) && balances_BasicToken[this][_from_s849] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s849][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s849][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_GatherToken0 := true;
[L2]                 call_transferFrom_GatherToken0 := false;
[L2]                 revert := revert_hold;
[L1813]              havoc __exception;
[L1814]              revert := false;
[L1815]  COND FALSE  !(__exception)
[L1842]  CALL        call __ret_0_ := transferFrom~address~address~uint256_GatherToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s849, _to_s849, _value_s849);
[L4087]  CALL        call tranferable_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5693]  COND FALSE  !(!!transferPaused_GatherToken[this])
[L4087]  RET         call tranferable_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4088]  COND FALSE  !(revert)
[L4091]  COND TRUE   DType[this] == GatherToken
[L4092]  CALL        call __var_17 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s849, _to_s849, _value_s849);
[L3464]              __var_5 := null;
[L3465]  COND FALSE  !(!(_to_s409 != null))
[L3469]  COND FALSE  !(!(_value_s409 <= balances_BasicToken[this][_from_s409]))
[L3473]  COND FALSE  !(!(_value_s409 <= allowed_StandardToken[this][_from_s409][msgsender_MSG]))
[L3477]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s409], _value_s409);
[L3048]              assert b_s68 <= a_s68;
[L3049]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3477]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s409], _value_s409);
[L3478]  COND FALSE  !(revert)
[L3481]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s409];
[L3482]              balances_BasicToken[this][_from_s409] := __var_6;
[L3483]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s409];
[L3484]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s409], _value_s409);
[L3062]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              assert c_s92 >= a_s92;
[L3064]              c_s92 := c_s92;
[L3484]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s409], _value_s409);
[L3485]  COND FALSE  !(revert)
[L3488]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s409];
[L3489]              balances_BasicToken[this][_to_s409] := __var_7;
[L3490]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s409];
[L3491]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s409][msgsender_MSG], _value_s409);
[L3048]              assert b_s68 <= a_s68;
[L3049]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3491]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s409][msgsender_MSG], _value_s409);
[L3492]  COND FALSE  !(revert)
[L3495]              sum_allowed1[_from_s409] := sum_allowed1[_from_s409] - allowed_StandardToken[this][_from_s409][msgsender_MSG];
[L3496]              allowed_StandardToken[this][_from_s409][msgsender_MSG] := __var_8;
[L3497]              sum_allowed1[_from_s409] := sum_allowed1[_from_s409] + allowed_StandardToken[this][_from_s409][msgsender_MSG];
[L3498]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L3499]              __ret_0_ := true;
[L4092]  RET         call __var_17 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s849, _to_s849, _value_s849);
[L4093]  COND FALSE  !(revert)
[L4099]              __ret_0_ := __var_17;
[L1842]  RET         call __ret_0_ := transferFrom~address~address~uint256_GatherToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s849, _to_s849, _value_s849);
[L1843]              assume !revert && gas >= 0;
[L6587]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_GatherToken(this, msgsender_MSG, msgvalue_MSG, _from_s849, _to_s849, _value_s849);
[L6702]  RET         call CorralChoice_GatherToken(this);

Loop:
[L6702]  CALL        call CorralChoice_GatherToken(this);
[L6488]              havoc msgsender_MSG;
[L6489]              havoc msgvalue_MSG;
[L6490]              havoc choice;
[L6491]              havoc __ret_0_owner;
[L6492]              havoc newOwner_s150;
[L6493]              havoc __ret_0_totalSupply;
[L6494]              havoc _owner_s312;
[L6495]              havoc __ret_0_balanceOf;
[L6496]              havoc _to_s867;
[L6497]              havoc _value_s867;
[L6498]              havoc __ret_0_transfer;
[L6499]              havoc _owner_s453;
[L6500]              havoc _spender_s453;
[L6501]              havoc __ret_0_allowance;
[L6502]              havoc _from_s849;
[L6503]              havoc _to_s849;
[L6504]              havoc _value_s849;
[L6505]              havoc __ret_0_transferFrom;
[L6506]              havoc _spender_s437;
[L6507]              havoc _value_s437;
[L6508]              havoc __ret_0_approve;
[L6509]              havoc _spender_s495;
[L6510]              havoc _addedValue_s495;
[L6511]              havoc __ret_0_increaseApproval;
[L6512]              havoc _spender_s555;
[L6513]              havoc _subtractedValue_s555;
[L6514]              havoc __ret_0_decreaseApproval;
[L6515]              havoc __ret_0_mintingFinished;
[L6516]              havoc __ret_0_maxMintLimit;
[L6517]              havoc _minter_s650;
[L6518]              havoc _amount_s650;
[L6519]              havoc _to_s669;
[L6520]              havoc _amount_s669;
[L6521]              havoc __ret_0_mint;
[L6522]              havoc _minter_s749;
[L6523]              havoc __ret_0_mintAllowed;
[L6524]              havoc __ret_0_finishMinting;
[L6525]              havoc __ret_0_name;
[L6526]              havoc __ret_0_symbol;
[L6527]              havoc __ret_0_decimals;
[L6528]              havoc __ret_0_transferPaused;
[L6529]              havoc tmpNow;
[L6530]              havoc gas;
[L6531]              assume gas > 4000000 && gas <= 8000000;
[L6532]              tmpNow := now;
[L6533]              havoc now;
[L6534]              assume now > tmpNow;
[L6535]              assume msgsender_MSG != null;
[L6536]              assume DType[msgsender_MSG] != SafeMath;
[L6537]              assume DType[msgsender_MSG] != Ownable;
[L6538]              assume DType[msgsender_MSG] != ERC20Basic;
[L6539]              assume DType[msgsender_MSG] != ERC20;
[L6540]              assume DType[msgsender_MSG] != BasicToken;
[L6541]              assume DType[msgsender_MSG] != StandardToken;
[L6542]              assume DType[msgsender_MSG] != MintableToken;
[L6543]              assume DType[msgsender_MSG] != GatherToken;
[L6544]              Alloc[msgsender_MSG] := true;
[L6545]  COND FALSE  !(choice == 22)
[L6551]  COND FALSE  !(choice == 21)
[L6557]  COND FALSE  !(choice == 20)
[L6563]  COND FALSE  !(choice == 19)
[L6569]  COND FALSE  !(choice == 18)
[L6576]  COND FALSE  !(choice == 17)
[L6582]  COND TRUE   choice == 16
[L6583]              gas := gas - 21000;
[L6584]  COND TRUE   gas >= 0
[L6585]              assume _value_s849 >= 0 && _value_s849 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6586]              assume msgvalue_MSG == 0;
[L6587]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_GatherToken(this, msgsender_MSG, msgvalue_MSG, _from_s849, _to_s849, _value_s849);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s849 == _to_s849 && (_value_s849 > balances_BasicToken[this][_from_s849] || _value_s849 > allowed_StandardToken[this][_from_s849][msgsender_MSG])) && _value_s849 >= 0) && _value_s849 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s849] >= 0) && balances_BasicToken[this][_to_s849] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s849] >= 0) && balances_BasicToken[this][_from_s849] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s849][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s849][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_GatherToken0 := true;
[L2]                 call_transferFrom_GatherToken0 := false;
[L2]                 revert := revert_hold;
[L1813]              havoc __exception;
[L1814]              revert := false;
[L1815]  COND FALSE  !(__exception)
[L1842]  CALL        call __ret_0_ := transferFrom~address~address~uint256_GatherToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s849, _to_s849, _value_s849);
[L4087]  CALL        call tranferable_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5693]  COND FALSE  !(!!transferPaused_GatherToken[this])
[L4087]  RET         call tranferable_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4088]  COND FALSE  !(revert)
[L4091]  COND TRUE   DType[this] == GatherToken
[L4092]  CALL        call __var_17 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s849, _to_s849, _value_s849);
[L3464]              __var_5 := null;
[L3465]  COND FALSE  !(!(_to_s409 != null))
[L3469]  COND FALSE  !(!(_value_s409 <= balances_BasicToken[this][_from_s409]))
[L3473]  COND FALSE  !(!(_value_s409 <= allowed_StandardToken[this][_from_s409][msgsender_MSG]))
[L3477]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s409], _value_s409);
[L3048]              assert b_s68 <= a_s68;
[L3049]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3477]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s409], _value_s409);
[L3478]  COND FALSE  !(revert)
[L3481]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s409];
[L3482]              balances_BasicToken[this][_from_s409] := __var_6;
[L3483]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s409];
[L3484]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s409], _value_s409);
[L3062]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              assert c_s92 >= a_s92;
[L3064]              c_s92 := c_s92;
[L3484]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s409], _value_s409);
[L3485]  COND FALSE  !(revert)
[L3488]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s409];
[L3489]              balances_BasicToken[this][_to_s409] := __var_7;
[L3490]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s409];
[L3491]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s409][msgsender_MSG], _value_s409);
[L3048]              assert b_s68 <= a_s68;
[L3049]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3491]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s409][msgsender_MSG], _value_s409);
[L3492]  COND FALSE  !(revert)
[L3495]              sum_allowed1[_from_s409] := sum_allowed1[_from_s409] - allowed_StandardToken[this][_from_s409][msgsender_MSG];
[L3496]              allowed_StandardToken[this][_from_s409][msgsender_MSG] := __var_8;
[L3497]              sum_allowed1[_from_s409] := sum_allowed1[_from_s409] + allowed_StandardToken[this][_from_s409][msgsender_MSG];
[L3498]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L3499]              __ret_0_ := true;
[L4092]  RET         call __var_17 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s849, _to_s849, _value_s849);
[L4093]  COND FALSE  !(revert)
[L4099]              __ret_0_ := __var_17;
[L1842]  RET         call __ret_0_ := transferFrom~address~address~uint256_GatherToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s849, _to_s849, _value_s849);
[L1843]              assume !revert && gas >= 0;
[L6587]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_GatherToken(this, msgsender_MSG, msgvalue_MSG, _from_s849, _to_s849, _value_s849);
[L6702]  RET         call CorralChoice_GatherToken(this);

[2020-11-25 16:54:14,174 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:54:14,175 INFO  L82        PathProgramCache]: Analyzing trace with hash -1097558159, now seen corresponding path program 1 times
[2020-11-25 16:54:14,175 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:54:14,206 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:54:14,560 INFO  L134       CoverageAnalysis]: Checked inductivity of 1088 backedges. 31 proven. 3 refuted. 0 times theorem prover too weak. 1054 trivial. 0 not checked.
[2020-11-25 16:54:14,560 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 16:54:14,560 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [16] total 16
[2020-11-25 16:54:14,561 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:54:14,561 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 17 interpolants.
[2020-11-25 16:54:14,561 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=33, Invalid=239, Unknown=0, NotChecked=0, Total=272
[2020-11-25 16:54:14,561 INFO  L87              Difference]: Start difference. First operand 3376 states and 3644 transitions. cyclomatic complexity: 273 Second operand 17 states.
[2020-11-25 16:54:16,353 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:54:16,353 INFO  L93              Difference]: Finished difference Result 3451 states and 3741 transitions.
[2020-11-25 16:54:16,354 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 19 states. 
[2020-11-25 16:54:16,354 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3451 states and 3741 transitions.
[2020-11-25 16:54:16,359 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:54:16,367 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3451 states to 3451 states and 3741 transitions.
[2020-11-25 16:54:16,367 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 906
[2020-11-25 16:54:16,367 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 906
[2020-11-25 16:54:16,367 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3451 states and 3741 transitions.
[2020-11-25 16:54:16,370 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:54:16,370 INFO  L728         BuchiCegarLoop]: Abstraction has 3451 states and 3741 transitions.
[2020-11-25 16:54:16,372 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3451 states and 3741 transitions.
[2020-11-25 16:54:16,389 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3451 to 3408.
[2020-11-25 16:54:16,390 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3408 states.
[2020-11-25 16:54:16,393 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3408 states to 3408 states and 3697 transitions.
[2020-11-25 16:54:16,393 INFO  L751         BuchiCegarLoop]: Abstraction has 3408 states and 3697 transitions.
[2020-11-25 16:54:16,393 INFO  L631         BuchiCegarLoop]: Abstraction has 3408 states and 3697 transitions.
[2020-11-25 16:54:16,393 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 16:54:16,393 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3408 states and 3697 transitions.
[2020-11-25 16:54:16,396 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:54:16,396 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:54:16,396 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:54:16,398 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:54:16,398 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_GatherToken0 := false;
[L2]                 call_transferFrom_GatherToken0 := false;
[L2]     CALL        call main();
[L6692]              assume null == 0;
[L6693]  CALL        call this := FreshRefGenerator__success();
[L2967]              havoc newRef;
[L2968]              assume Alloc[newRef] == false;
[L2969]              Alloc[newRef] := true;
[L2970]              assume newRef != null;
[L6693]  RET         call this := FreshRefGenerator__success();
[L6694]              assume now >= 0;
[L6695]              assume DType[this] == GatherToken;
[L6696]              assume msgvalue_MSG == 0;
[L6697]              gas := gas - 53000;
[L6698]  CALL        call GatherToken_GatherToken(this, msgsender_MSG, msgvalue_MSG);
[L1621]              havoc __exception;
[L1622]              revert := false;
[L1623]  COND FALSE  !(__exception)
[L1650]  CALL        call GatherToken_GatherToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3997]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3997]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L4001]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3209]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3209]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3210]  COND FALSE  !(revert)
[L3213]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3190]              assume msgsender_MSG != null;
[L3191]              Balance[this] := 0;
[L3213]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3214]  COND FALSE  !(revert)
[L4001]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4002]  COND FALSE  !(revert)
[L4005]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3255]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3233]              assume msgsender_MSG != null;
[L3234]              Balance[this] := 0;
[L3235]              balances_BasicToken[this] := zeroRefintArr();
[L3236]              sum_balances0[this] := 0;
[L3237]              totalSupply__BasicToken[this] := 0;
[L3259]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L4005]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4009]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3396]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3396]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  COND FALSE  !(revert)
[L3400]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3209]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3209]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3210]  COND FALSE  !(revert)
[L3213]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3190]              assume msgsender_MSG != null;
[L3191]              Balance[this] := 0;
[L3213]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3214]  COND FALSE  !(revert)
[L3400]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3401]  COND FALSE  !(revert)
[L3404]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3255]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3233]              assume msgsender_MSG != null;
[L3234]              Balance[this] := 0;
[L3235]              balances_BasicToken[this] := zeroRefintArr();
[L3236]              sum_balances0[this] := 0;
[L3237]              totalSupply__BasicToken[this] := 0;
[L3259]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3404]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3405]  COND FALSE  !(revert)
[L3408]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3367]              assume msgsender_MSG != null;
[L3368]              Balance[this] := 0;
[L3369]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3370]              sum_allowed1[this] := 0;
[L3408]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3409]  COND FALSE  !(revert)
[L4009]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4010]  COND FALSE  !(revert)
[L4013]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3098]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3081]              assume msgsender_MSG != null;
[L3082]              Balance[this] := 0;
[L3083]              owner_Ownable[this] := null;
[L3085]              owner_Ownable[this] := msgsender_MSG;
[L3098]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3099]  COND FALSE  !(revert)
[L4013]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4014]  COND FALSE  !(revert)
[L4017]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3662]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3662]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3663]  COND FALSE  !(revert)
[L3666]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3209]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3209]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3210]  COND FALSE  !(revert)
[L3213]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3190]              assume msgsender_MSG != null;
[L3191]              Balance[this] := 0;
[L3213]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3214]  COND FALSE  !(revert)
[L3666]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]  COND FALSE  !(revert)
[L3670]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3255]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3233]              assume msgsender_MSG != null;
[L3234]              Balance[this] := 0;
[L3235]              balances_BasicToken[this] := zeroRefintArr();
[L3236]              sum_balances0[this] := 0;
[L3237]              totalSupply__BasicToken[this] := 0;
[L3259]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3670]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3671]  COND FALSE  !(revert)
[L3674]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3396]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3396]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  COND FALSE  !(revert)
[L3400]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3209]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3209]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3210]  COND FALSE  !(revert)
[L3213]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3190]              assume msgsender_MSG != null;
[L3191]              Balance[this] := 0;
[L3213]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3214]  COND FALSE  !(revert)
[L3400]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3401]  COND FALSE  !(revert)
[L3404]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3255]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3233]              assume msgsender_MSG != null;
[L3234]              Balance[this] := 0;
[L3235]              balances_BasicToken[this] := zeroRefintArr();
[L3236]              sum_balances0[this] := 0;
[L3237]              totalSupply__BasicToken[this] := 0;
[L3259]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3404]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3405]  COND FALSE  !(revert)
[L3408]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3367]              assume msgsender_MSG != null;
[L3368]              Balance[this] := 0;
[L3369]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3370]              sum_allowed1[this] := 0;
[L3408]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3409]  COND FALSE  !(revert)
[L3674]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3675]  COND FALSE  !(revert)
[L3678]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3098]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3081]              assume msgsender_MSG != null;
[L3082]              Balance[this] := 0;
[L3083]              owner_Ownable[this] := null;
[L3085]              owner_Ownable[this] := msgsender_MSG;
[L3098]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3099]  COND FALSE  !(revert)
[L3678]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3679]  COND FALSE  !(revert)
[L3682]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3623]              assume msgsender_MSG != null;
[L3624]              Balance[this] := 0;
[L3625]              mintingFinished_MintableToken[this] := false;
[L3626]              mintPermissions_MintableToken[this] := zeroRefintArr();
[L3627]              sum_mintPermissions2[this] := 0;
[L3628]              maxMintLimit_MintableToken[this] := 0;
[L3682]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3683]  COND FALSE  !(revert)
[L4017]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4018]  COND FALSE  !(revert)
[L4021]  CALL        call GatherToken_GatherToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3950]              assume msgsender_MSG != null;
[L3951]              Balance[this] := 0;
[L3952]              name_GatherToken[this] := 1979683959;
[L3953]              symbol_GatherToken[this] := -286833360;
[L3954]              decimals_GatherToken[this] := 18;
[L3955]              transferPaused_GatherToken[this] := true;
[L3957]              __var_16 := decimals_GatherToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3958]              maxMintLimit_MintableToken[this] := 400000000 * (nonlinearPow(10, decimals_GatherToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4021]  RET         call GatherToken_GatherToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4022]  COND FALSE  !(revert)
[L1650]  RET         call GatherToken_GatherToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1651]              assume !revert && gas >= 0;
[L6698]  RET         call GatherToken_GatherToken(this, msgsender_MSG, msgvalue_MSG);
[L6699]              assume !revert && gas >= 0;
[L6702]  CALL        call CorralChoice_GatherToken(this);
[L6488]              havoc msgsender_MSG;
[L6489]              havoc msgvalue_MSG;
[L6490]              havoc choice;
[L6491]              havoc __ret_0_owner;
[L6492]              havoc newOwner_s150;
[L6493]              havoc __ret_0_totalSupply;
[L6494]              havoc _owner_s312;
[L6495]              havoc __ret_0_balanceOf;
[L6496]              havoc _to_s867;
[L6497]              havoc _value_s867;
[L6498]              havoc __ret_0_transfer;
[L6499]              havoc _owner_s453;
[L6500]              havoc _spender_s453;
[L6501]              havoc __ret_0_allowance;
[L6502]              havoc _from_s849;
[L6503]              havoc _to_s849;
[L6504]              havoc _value_s849;
[L6505]              havoc __ret_0_transferFrom;
[L6506]              havoc _spender_s437;
[L6507]              havoc _value_s437;
[L6508]              havoc __ret_0_approve;
[L6509]              havoc _spender_s495;
[L6510]              havoc _addedValue_s495;
[L6511]              havoc __ret_0_increaseApproval;
[L6512]              havoc _spender_s555;
[L6513]              havoc _subtractedValue_s555;
[L6514]              havoc __ret_0_decreaseApproval;
[L6515]              havoc __ret_0_mintingFinished;
[L6516]              havoc __ret_0_maxMintLimit;
[L6517]              havoc _minter_s650;
[L6518]              havoc _amount_s650;
[L6519]              havoc _to_s669;
[L6520]              havoc _amount_s669;
[L6521]              havoc __ret_0_mint;
[L6522]              havoc _minter_s749;
[L6523]              havoc __ret_0_mintAllowed;
[L6524]              havoc __ret_0_finishMinting;
[L6525]              havoc __ret_0_name;
[L6526]              havoc __ret_0_symbol;
[L6527]              havoc __ret_0_decimals;
[L6528]              havoc __ret_0_transferPaused;
[L6529]              havoc tmpNow;
[L6530]              havoc gas;
[L6531]              assume gas > 4000000 && gas <= 8000000;
[L6532]              tmpNow := now;
[L6533]              havoc now;
[L6534]              assume now > tmpNow;
[L6535]              assume msgsender_MSG != null;
[L6536]              assume DType[msgsender_MSG] != SafeMath;
[L6537]              assume DType[msgsender_MSG] != Ownable;
[L6538]              assume DType[msgsender_MSG] != ERC20Basic;
[L6539]              assume DType[msgsender_MSG] != ERC20;
[L6540]              assume DType[msgsender_MSG] != BasicToken;
[L6541]              assume DType[msgsender_MSG] != StandardToken;
[L6542]              assume DType[msgsender_MSG] != MintableToken;
[L6543]              assume DType[msgsender_MSG] != GatherToken;
[L6544]              Alloc[msgsender_MSG] := true;
[L6545]  COND FALSE  !(choice == 22)
[L6551]  COND FALSE  !(choice == 21)
[L6557]  COND FALSE  !(choice == 20)
[L6563]  COND FALSE  !(choice == 19)
[L6569]  COND FALSE  !(choice == 18)
[L6576]  COND FALSE  !(choice == 17)
[L6582]  COND FALSE  !(choice == 16)
[L6589]  COND FALSE  !(choice == 15)
[L6596]  COND FALSE  !(choice == 14)
[L6603]  COND FALSE  !(choice == 13)
[L6610]  COND FALSE  !(choice == 12)
[L6616]  COND FALSE  !(choice == 11)
[L6622]  COND FALSE  !(choice == 10)
[L6629]  COND FALSE  !(choice == 9)
[L6636]  COND FALSE  !(choice == 8)
[L6642]  COND FALSE  !(choice == 7)
[L6648]  COND FALSE  !(choice == 6)
[L6654]  COND FALSE  !(choice == 5)
[L6660]  COND FALSE  !(choice == 4)
[L6666]  COND FALSE  !(choice == 3)
[L6672]  COND TRUE   choice == 2
[L6673]              gas := gas - 21000;
[L6674]  COND TRUE   gas >= 0
[L6675]              assume msgvalue_MSG == 0;
[L6676]  CALL        call unpauseTransfer_GatherToken(this, msgsender_MSG, msgvalue_MSG);
[L1684]              havoc __exception;
[L1685]              revert := false;
[L1686]  COND FALSE  !(__exception)
[L1713]  CALL        call unpauseTransfer_GatherToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4038]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5635]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L4038]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4039]  COND FALSE  !(revert)
[L4042]              transferPaused_GatherToken[this] := false;
[L1713]  RET         call unpauseTransfer_GatherToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1714]              assume !revert && gas >= 0;
[L6676]  RET         call unpauseTransfer_GatherToken(this, msgsender_MSG, msgvalue_MSG);
[L6702]  RET         call CorralChoice_GatherToken(this);
[L6702]  CALL        call CorralChoice_GatherToken(this);
[L6488]              havoc msgsender_MSG;
[L6489]              havoc msgvalue_MSG;
[L6490]              havoc choice;
[L6491]              havoc __ret_0_owner;
[L6492]              havoc newOwner_s150;
[L6493]              havoc __ret_0_totalSupply;
[L6494]              havoc _owner_s312;
[L6495]              havoc __ret_0_balanceOf;
[L6496]              havoc _to_s867;
[L6497]              havoc _value_s867;
[L6498]              havoc __ret_0_transfer;
[L6499]              havoc _owner_s453;
[L6500]              havoc _spender_s453;
[L6501]              havoc __ret_0_allowance;
[L6502]              havoc _from_s849;
[L6503]              havoc _to_s849;
[L6504]              havoc _value_s849;
[L6505]              havoc __ret_0_transferFrom;
[L6506]              havoc _spender_s437;
[L6507]              havoc _value_s437;
[L6508]              havoc __ret_0_approve;
[L6509]              havoc _spender_s495;
[L6510]              havoc _addedValue_s495;
[L6511]              havoc __ret_0_increaseApproval;
[L6512]              havoc _spender_s555;
[L6513]              havoc _subtractedValue_s555;
[L6514]              havoc __ret_0_decreaseApproval;
[L6515]              havoc __ret_0_mintingFinished;
[L6516]              havoc __ret_0_maxMintLimit;
[L6517]              havoc _minter_s650;
[L6518]              havoc _amount_s650;
[L6519]              havoc _to_s669;
[L6520]              havoc _amount_s669;
[L6521]              havoc __ret_0_mint;
[L6522]              havoc _minter_s749;
[L6523]              havoc __ret_0_mintAllowed;
[L6524]              havoc __ret_0_finishMinting;
[L6525]              havoc __ret_0_name;
[L6526]              havoc __ret_0_symbol;
[L6527]              havoc __ret_0_decimals;
[L6528]              havoc __ret_0_transferPaused;
[L6529]              havoc tmpNow;
[L6530]              havoc gas;
[L6531]              assume gas > 4000000 && gas <= 8000000;
[L6532]              tmpNow := now;
[L6533]              havoc now;
[L6534]              assume now > tmpNow;
[L6535]              assume msgsender_MSG != null;
[L6536]              assume DType[msgsender_MSG] != SafeMath;
[L6537]              assume DType[msgsender_MSG] != Ownable;
[L6538]              assume DType[msgsender_MSG] != ERC20Basic;
[L6539]              assume DType[msgsender_MSG] != ERC20;
[L6540]              assume DType[msgsender_MSG] != BasicToken;
[L6541]              assume DType[msgsender_MSG] != StandardToken;
[L6542]              assume DType[msgsender_MSG] != MintableToken;
[L6543]              assume DType[msgsender_MSG] != GatherToken;
[L6544]              Alloc[msgsender_MSG] := true;
[L6545]  COND FALSE  !(choice == 22)
[L6551]  COND FALSE  !(choice == 21)
[L6557]  COND FALSE  !(choice == 20)
[L6563]  COND FALSE  !(choice == 19)
[L6569]  COND FALSE  !(choice == 18)
[L6576]  COND FALSE  !(choice == 17)
[L6582]  COND TRUE   choice == 16
[L6583]              gas := gas - 21000;
[L6584]  COND TRUE   gas >= 0
[L6585]              assume _value_s849 >= 0 && _value_s849 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6586]              assume msgvalue_MSG == 0;
[L6587]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_GatherToken(this, msgsender_MSG, msgvalue_MSG, _from_s849, _to_s849, _value_s849);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((_from_s849 == _to_s849 && (_value_s849 > balances_BasicToken[this][_from_s849] || _value_s849 > allowed_StandardToken[this][_from_s849][msgsender_MSG])) && _value_s849 >= 0) && _value_s849 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s849] >= 0) && balances_BasicToken[this][_to_s849] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s849] >= 0) && balances_BasicToken[this][_from_s849] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s849][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s849][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L1813]              havoc __exception;
[L1814]              revert := false;
[L1815]  COND FALSE  !(__exception)
[L1842]  CALL        call __ret_0_ := transferFrom~address~address~uint256_GatherToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s849, _to_s849, _value_s849);
[L4087]  CALL        call tranferable_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5693]  COND FALSE  !(!!transferPaused_GatherToken[this])
[L4087]  RET         call tranferable_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4088]  COND FALSE  !(revert)
[L4091]  COND TRUE   DType[this] == GatherToken
[L4092]  CALL        call __var_17 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s849, _to_s849, _value_s849);
[L3464]              __var_5 := null;
[L3465]  COND FALSE  !(!(_to_s409 != null))
[L3469]  COND FALSE  !(!(_value_s409 <= balances_BasicToken[this][_from_s409]))
[L3473]  COND FALSE  !(!(_value_s409 <= allowed_StandardToken[this][_from_s409][msgsender_MSG]))
[L3477]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s409], _value_s409);
[L3048]              assert b_s68 <= a_s68;
[L3049]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3477]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s409], _value_s409);
[L3478]  COND FALSE  !(revert)
[L3481]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s409];
[L3482]              balances_BasicToken[this][_from_s409] := __var_6;
[L3483]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s409];
[L3484]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s409], _value_s409);
[L3062]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              assert c_s92 >= a_s92;
[L3064]              c_s92 := c_s92;
[L3484]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s409], _value_s409);
[L3485]  COND FALSE  !(revert)
[L3488]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s409];
[L3489]              balances_BasicToken[this][_to_s409] := __var_7;
[L3490]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s409];
[L3491]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s409][msgsender_MSG], _value_s409);
[L3048]              assert b_s68 <= a_s68;
[L3049]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3491]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s409][msgsender_MSG], _value_s409);
[L3492]  COND FALSE  !(revert)
[L3495]              sum_allowed1[_from_s409] := sum_allowed1[_from_s409] - allowed_StandardToken[this][_from_s409][msgsender_MSG];
[L3496]              allowed_StandardToken[this][_from_s409][msgsender_MSG] := __var_8;
[L3497]              sum_allowed1[_from_s409] := sum_allowed1[_from_s409] + allowed_StandardToken[this][_from_s409][msgsender_MSG];
[L3498]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L3499]              __ret_0_ := true;
[L4092]  RET         call __var_17 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s849, _to_s849, _value_s849);
[L4093]  COND FALSE  !(revert)
[L4099]              __ret_0_ := __var_17;
[L1842]  RET         call __ret_0_ := transferFrom~address~address~uint256_GatherToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s849, _to_s849, _value_s849);
[L1843]              assume !revert && gas >= 0;
[L6587]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_GatherToken(this, msgsender_MSG, msgvalue_MSG, _from_s849, _to_s849, _value_s849);
[L6702]  RET         call CorralChoice_GatherToken(this);
[L6702]  CALL        call CorralChoice_GatherToken(this);
[L6488]              havoc msgsender_MSG;
[L6489]              havoc msgvalue_MSG;
[L6490]              havoc choice;
[L6491]              havoc __ret_0_owner;
[L6492]              havoc newOwner_s150;
[L6493]              havoc __ret_0_totalSupply;
[L6494]              havoc _owner_s312;
[L6495]              havoc __ret_0_balanceOf;
[L6496]              havoc _to_s867;
[L6497]              havoc _value_s867;
[L6498]              havoc __ret_0_transfer;
[L6499]              havoc _owner_s453;
[L6500]              havoc _spender_s453;
[L6501]              havoc __ret_0_allowance;
[L6502]              havoc _from_s849;
[L6503]              havoc _to_s849;
[L6504]              havoc _value_s849;
[L6505]              havoc __ret_0_transferFrom;
[L6506]              havoc _spender_s437;
[L6507]              havoc _value_s437;
[L6508]              havoc __ret_0_approve;
[L6509]              havoc _spender_s495;
[L6510]              havoc _addedValue_s495;
[L6511]              havoc __ret_0_increaseApproval;
[L6512]              havoc _spender_s555;
[L6513]              havoc _subtractedValue_s555;
[L6514]              havoc __ret_0_decreaseApproval;
[L6515]              havoc __ret_0_mintingFinished;
[L6516]              havoc __ret_0_maxMintLimit;
[L6517]              havoc _minter_s650;
[L6518]              havoc _amount_s650;
[L6519]              havoc _to_s669;
[L6520]              havoc _amount_s669;
[L6521]              havoc __ret_0_mint;
[L6522]              havoc _minter_s749;
[L6523]              havoc __ret_0_mintAllowed;
[L6524]              havoc __ret_0_finishMinting;
[L6525]              havoc __ret_0_name;
[L6526]              havoc __ret_0_symbol;
[L6527]              havoc __ret_0_decimals;
[L6528]              havoc __ret_0_transferPaused;
[L6529]              havoc tmpNow;
[L6530]              havoc gas;
[L6531]              assume gas > 4000000 && gas <= 8000000;
[L6532]              tmpNow := now;
[L6533]              havoc now;
[L6534]              assume now > tmpNow;
[L6535]              assume msgsender_MSG != null;
[L6536]              assume DType[msgsender_MSG] != SafeMath;
[L6537]              assume DType[msgsender_MSG] != Ownable;
[L6538]              assume DType[msgsender_MSG] != ERC20Basic;
[L6539]              assume DType[msgsender_MSG] != ERC20;
[L6540]              assume DType[msgsender_MSG] != BasicToken;
[L6541]              assume DType[msgsender_MSG] != StandardToken;
[L6542]              assume DType[msgsender_MSG] != MintableToken;
[L6543]              assume DType[msgsender_MSG] != GatherToken;
[L6544]              Alloc[msgsender_MSG] := true;
[L6545]  COND FALSE  !(choice == 22)
[L6551]  COND FALSE  !(choice == 21)
[L6557]  COND FALSE  !(choice == 20)
[L6563]  COND FALSE  !(choice == 19)
[L6569]  COND FALSE  !(choice == 18)
[L6576]  COND FALSE  !(choice == 17)
[L6582]  COND TRUE   choice == 16
[L6583]              gas := gas - 21000;
[L6584]  COND TRUE   gas >= 0
[L6585]              assume _value_s849 >= 0 && _value_s849 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6586]              assume msgvalue_MSG == 0;
[L6587]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_GatherToken(this, msgsender_MSG, msgvalue_MSG, _from_s849, _to_s849, _value_s849);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s849 == _to_s849 && (_value_s849 > balances_BasicToken[this][_from_s849] || _value_s849 > allowed_StandardToken[this][_from_s849][msgsender_MSG])) && _value_s849 >= 0) && _value_s849 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s849] >= 0) && balances_BasicToken[this][_to_s849] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s849] >= 0) && balances_BasicToken[this][_from_s849] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s849][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s849][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_GatherToken0 := true;
[L2]                 call_transferFrom_GatherToken0 := false;
[L2]                 revert := revert_hold;
[L1813]              havoc __exception;
[L1814]              revert := false;
[L1815]  COND FALSE  !(__exception)
[L1842]  CALL        call __ret_0_ := transferFrom~address~address~uint256_GatherToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s849, _to_s849, _value_s849);
[L4087]  CALL        call tranferable_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5693]  COND FALSE  !(!!transferPaused_GatherToken[this])
[L4087]  RET         call tranferable_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4088]  COND FALSE  !(revert)
[L4091]  COND TRUE   DType[this] == GatherToken
[L4092]  CALL        call __var_17 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s849, _to_s849, _value_s849);
[L3464]              __var_5 := null;
[L3465]  COND FALSE  !(!(_to_s409 != null))
[L3469]  COND FALSE  !(!(_value_s409 <= balances_BasicToken[this][_from_s409]))
[L3473]  COND FALSE  !(!(_value_s409 <= allowed_StandardToken[this][_from_s409][msgsender_MSG]))
[L3477]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s409], _value_s409);
[L3048]              assert b_s68 <= a_s68;
[L3049]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3477]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s409], _value_s409);
[L3478]  COND FALSE  !(revert)
[L3481]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s409];
[L3482]              balances_BasicToken[this][_from_s409] := __var_6;
[L3483]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s409];
[L3484]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s409], _value_s409);
[L3062]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              assert c_s92 >= a_s92;
[L3064]              c_s92 := c_s92;
[L3484]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s409], _value_s409);
[L3485]  COND FALSE  !(revert)
[L3488]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s409];
[L3489]              balances_BasicToken[this][_to_s409] := __var_7;
[L3490]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s409];
[L3491]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s409][msgsender_MSG], _value_s409);
[L3048]              assert b_s68 <= a_s68;
[L3049]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3491]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s409][msgsender_MSG], _value_s409);
[L3492]  COND FALSE  !(revert)
[L3495]              sum_allowed1[_from_s409] := sum_allowed1[_from_s409] - allowed_StandardToken[this][_from_s409][msgsender_MSG];
[L3496]              allowed_StandardToken[this][_from_s409][msgsender_MSG] := __var_8;
[L3497]              sum_allowed1[_from_s409] := sum_allowed1[_from_s409] + allowed_StandardToken[this][_from_s409][msgsender_MSG];
[L3498]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L3499]              __ret_0_ := true;
[L4092]  RET         call __var_17 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s849, _to_s849, _value_s849);
[L4093]  COND FALSE  !(revert)
[L4099]              __ret_0_ := __var_17;
[L1842]  RET         call __ret_0_ := transferFrom~address~address~uint256_GatherToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s849, _to_s849, _value_s849);
[L1843]              assume !revert && gas >= 0;
[L6587]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_GatherToken(this, msgsender_MSG, msgvalue_MSG, _from_s849, _to_s849, _value_s849);
[L6702]  RET         call CorralChoice_GatherToken(this);

Loop:
[L6702]  CALL        call CorralChoice_GatherToken(this);
[L6488]              havoc msgsender_MSG;
[L6489]              havoc msgvalue_MSG;
[L6490]              havoc choice;
[L6491]              havoc __ret_0_owner;
[L6492]              havoc newOwner_s150;
[L6493]              havoc __ret_0_totalSupply;
[L6494]              havoc _owner_s312;
[L6495]              havoc __ret_0_balanceOf;
[L6496]              havoc _to_s867;
[L6497]              havoc _value_s867;
[L6498]              havoc __ret_0_transfer;
[L6499]              havoc _owner_s453;
[L6500]              havoc _spender_s453;
[L6501]              havoc __ret_0_allowance;
[L6502]              havoc _from_s849;
[L6503]              havoc _to_s849;
[L6504]              havoc _value_s849;
[L6505]              havoc __ret_0_transferFrom;
[L6506]              havoc _spender_s437;
[L6507]              havoc _value_s437;
[L6508]              havoc __ret_0_approve;
[L6509]              havoc _spender_s495;
[L6510]              havoc _addedValue_s495;
[L6511]              havoc __ret_0_increaseApproval;
[L6512]              havoc _spender_s555;
[L6513]              havoc _subtractedValue_s555;
[L6514]              havoc __ret_0_decreaseApproval;
[L6515]              havoc __ret_0_mintingFinished;
[L6516]              havoc __ret_0_maxMintLimit;
[L6517]              havoc _minter_s650;
[L6518]              havoc _amount_s650;
[L6519]              havoc _to_s669;
[L6520]              havoc _amount_s669;
[L6521]              havoc __ret_0_mint;
[L6522]              havoc _minter_s749;
[L6523]              havoc __ret_0_mintAllowed;
[L6524]              havoc __ret_0_finishMinting;
[L6525]              havoc __ret_0_name;
[L6526]              havoc __ret_0_symbol;
[L6527]              havoc __ret_0_decimals;
[L6528]              havoc __ret_0_transferPaused;
[L6529]              havoc tmpNow;
[L6530]              havoc gas;
[L6531]              assume gas > 4000000 && gas <= 8000000;
[L6532]              tmpNow := now;
[L6533]              havoc now;
[L6534]              assume now > tmpNow;
[L6535]              assume msgsender_MSG != null;
[L6536]              assume DType[msgsender_MSG] != SafeMath;
[L6537]              assume DType[msgsender_MSG] != Ownable;
[L6538]              assume DType[msgsender_MSG] != ERC20Basic;
[L6539]              assume DType[msgsender_MSG] != ERC20;
[L6540]              assume DType[msgsender_MSG] != BasicToken;
[L6541]              assume DType[msgsender_MSG] != StandardToken;
[L6542]              assume DType[msgsender_MSG] != MintableToken;
[L6543]              assume DType[msgsender_MSG] != GatherToken;
[L6544]              Alloc[msgsender_MSG] := true;
[L6545]  COND TRUE   choice == 22
[L6546]              gas := gas - 21000;
[L6547]  COND FALSE  !(gas >= 0)
[L6702]  RET         call CorralChoice_GatherToken(this);

[2020-11-25 16:54:16,402 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:54:16,402 INFO  L82        PathProgramCache]: Analyzing trace with hash -1424151870, now seen corresponding path program 1 times
[2020-11-25 16:54:16,403 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:54:16,425 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:54:16,668 INFO  L134       CoverageAnalysis]: Checked inductivity of 1100 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1100 trivial. 0 not checked.
[2020-11-25 16:54:16,669 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:54:16,669 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [10] imperfect sequences [] total 10
[2020-11-25 16:54:16,669 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:54:16,669 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-25 16:54:16,669 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=69, Unknown=0, NotChecked=0, Total=90
[2020-11-25 16:54:16,669 INFO  L87              Difference]: Start difference. First operand 3408 states and 3697 transitions. cyclomatic complexity: 298 Second operand 10 states.
[2020-11-25 16:54:17,377 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:54:17,377 INFO  L93              Difference]: Finished difference Result 1965 states and 2136 transitions.
[2020-11-25 16:54:17,377 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 16:54:17,377 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1965 states and 2136 transitions.
[2020-11-25 16:54:17,381 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 16:54:17,381 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1965 states to 0 states and 0 transitions.
[2020-11-25 16:54:17,381 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 16:54:17,381 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 16:54:17,381 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 16:54:17,381 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:54:17,381 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 16:54:17,381 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 16:54:17,381 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 16:54:17,381 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 16:54:17,381 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 16:54:17,381 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 16:54:17,381 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 16:54:17,384 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 04:54:17 BasicIcfg
[2020-11-25 16:54:17,384 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 16:54:17,385 INFO  L168              Benchmark]: Toolchain (without parser) took 13276.05 ms. Allocated memory was 1.0 GB in the beginning and 2.2 GB in the end (delta: 1.2 GB). Free memory was 935.2 MB in the beginning and 904.8 MB in the end (delta: 30.4 MB). Peak memory consumption was 1.2 GB. Max. memory is 15.3 GB.
[2020-11-25 16:54:17,386 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.10 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 16:54:17,386 INFO  L168              Benchmark]: Boogie Preprocessor took 82.94 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 919.1 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-25 16:54:17,386 INFO  L168              Benchmark]: UtopiaSpecLang took 47.69 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 908.4 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 16:54:17,387 INFO  L168              Benchmark]: Boogie Printer took 16.47 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 902.9 MB in the end (delta: 5.5 MB). Peak memory consumption was 5.5 MB. Max. memory is 15.3 GB.
[2020-11-25 16:54:17,387 INFO  L168              Benchmark]: RCFGBuilder took 951.24 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 62.9 MB). Free memory was 902.9 MB in the beginning and 1.0 GB in the end (delta: -106.8 MB). Peak memory consumption was 190.6 MB. Max. memory is 15.3 GB.
[2020-11-25 16:54:17,387 INFO  L168              Benchmark]: UtopiaLTL2Aut took 39.11 ms. Allocated memory is still 1.1 GB. Free memory was 1.0 GB in the beginning and 1.0 GB in the end (delta: 6.9 MB). Peak memory consumption was 6.9 MB. Max. memory is 15.3 GB.
[2020-11-25 16:54:17,387 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1757.04 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 161.5 MB). Free memory was 1.0 GB in the beginning and 929.0 MB in the end (delta: 73.8 MB). Peak memory consumption was 512.9 MB. Max. memory is 15.3 GB.
[2020-11-25 16:54:17,388 INFO  L168              Benchmark]: BlockEncodingV2 took 171.28 ms. Allocated memory is still 1.3 GB. Free memory was 929.0 MB in the beginning and 839.1 MB in the end (delta: 89.9 MB). Peak memory consumption was 89.9 MB. Max. memory is 15.3 GB.
[2020-11-25 16:54:17,388 INFO  L168              Benchmark]: BuchiAutomizer took 10207.94 ms. Allocated memory was 1.3 GB in the beginning and 2.2 GB in the end (delta: 935.3 MB). Free memory was 839.1 MB in the beginning and 904.8 MB in the end (delta: -65.7 MB). Peak memory consumption was 869.6 MB. Max. memory is 15.3 GB.
[2020-11-25 16:54:17,391 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    5902 locations, 10478 edges
  - StatisticsResult: Encoded RCFG
    5811 locations, 10259 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.10 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 82.94 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 919.1 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 47.69 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 908.4 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 16.47 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 902.9 MB in the end (delta: 5.5 MB). Peak memory consumption was 5.5 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 951.24 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 62.9 MB). Free memory was 902.9 MB in the beginning and 1.0 GB in the end (delta: -106.8 MB). Peak memory consumption was 190.6 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 39.11 ms. Allocated memory is still 1.1 GB. Free memory was 1.0 GB in the beginning and 1.0 GB in the end (delta: 6.9 MB). Peak memory consumption was 6.9 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1757.04 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 161.5 MB). Free memory was 1.0 GB in the beginning and 929.0 MB in the end (delta: 73.8 MB). Peak memory consumption was 512.9 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 171.28 ms. Allocated memory is still 1.3 GB. Free memory was 929.0 MB in the beginning and 839.1 MB in the end (delta: 89.9 MB). Peak memory consumption was 89.9 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 10207.94 ms. Allocated memory was 1.3 GB in the beginning and 2.2 GB in the end (delta: 935.3 MB). Free memory was 839.1 MB in the beginning and 904.8 MB in the end (delta: -65.7 MB). Peak memory consumption was 869.6 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    2394 locations, 3200 edges
  - StatisticsResult: BuchiProgram size
    5902 locations, 10478 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 7 terminating modules (7 trivial, 0 deterministic, 0 nondeterministic). 7 modules have a trivial ranking function, the largest among these consists of 17 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 10.1s and 8 iterations.  TraceHistogramMax:12. Analysis of lassos took 1.8s. Construction of modules took 5.6s. BÃ¼chi inclusion checks took 2.0s. Highest rank in rank-based complementation 0. Minimization of det autom 7. Minimization of nondet autom 0. Automata minimization 0.2s AutomataMinimizationTime, 6 MinimizatonAttempts, 1517 StatesRemovedByMinimization, 6 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 3902 states and ocurred in iteration 1.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 25797 SDtfs, 24851 SDslu, 44333 SDs, 0 SdLazy, 108697 SolverSat, 3431 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 5.6s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU7 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transferFrom_GatherToken0) ==> ( <>(fail_transferFrom_GatherToken0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
