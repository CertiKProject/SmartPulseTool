This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 09:58:29,565 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 09:58:29,567 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 09:58:29,579 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 09:58:29,579 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 09:58:29,580 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 09:58:29,582 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 09:58:29,584 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 09:58:29,585 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 09:58:29,586 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 09:58:29,587 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 09:58:29,587 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 09:58:29,588 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 09:58:29,589 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 09:58:29,589 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 09:58:29,590 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 09:58:29,591 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 09:58:29,592 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 09:58:29,594 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 09:58:29,595 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 09:58:29,595 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 09:58:29,596 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 09:58:29,598 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 09:58:29,598 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 09:58:29,598 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 09:58:29,599 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 09:58:29,599 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 09:58:29,600 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 09:58:29,600 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 09:58:29,600 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 09:58:29,601 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 09:58:29,601 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 09:58:29,602 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 09:58:29,602 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 09:58:29,603 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 09:58:29,603 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 09:58:29,604 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 09:58:29,604 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 09:58:29,604 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 09:58:29,605 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 09:58:29,605 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 09:58:29,606 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 09:58:29,614 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 09:58:29,614 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 09:58:29,615 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 09:58:29,615 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 09:58:29,615 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 09:58:29,615 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 09:58:29,616 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 09:58:29,616 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 09:58:29,616 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 09:58:29,616 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 09:58:29,616 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 09:58:29,616 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 09:58:29,616 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 09:58:29,616 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 09:58:29,616 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 09:58:29,616 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 09:58:29,617 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 09:58:29,617 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 09:58:29,617 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 09:58:29,617 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 09:58:29,617 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 09:58:29,617 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 09:58:29,617 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 09:58:29,617 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 09:58:29,617 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 09:58:29,618 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 09:58:29,639 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 09:58:29,649 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 09:58:29,655 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 09:58:29,658 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 09:58:29,659 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 09:58:29,660 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/ZAI_0x6a90445976b4a9ad09de0c1621048483d2f5589f_transferfrom-fail.bpl
[2020-11-25 09:58:29,660 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/ZAI_0x6a90445976b4a9ad09de0c1621048483d2f5589f_transferfrom-fail.bpl'
[2020-11-25 09:58:29,764 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 09:58:29,765 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 09:58:29,766 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 09:58:29,766 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 09:58:29,766 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 09:58:29,783 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "ZAI_0x6a90445976b4a9ad09de0c1621048483d2f5589f_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:58:29" (1/1) ...
[2020-11-25 09:58:29,785 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "ZAI_0x6a90445976b4a9ad09de0c1621048483d2f5589f_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:58:29" (1/1) ...
[2020-11-25 09:58:29,836 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "ZAI_0x6a90445976b4a9ad09de0c1621048483d2f5589f_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:58:29" (1/1) ...
[2020-11-25 09:58:29,837 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "ZAI_0x6a90445976b4a9ad09de0c1621048483d2f5589f_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:58:29" (1/1) ...
[2020-11-25 09:58:29,871 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "ZAI_0x6a90445976b4a9ad09de0c1621048483d2f5589f_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:58:29" (1/1) ...
[2020-11-25 09:58:29,884 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "ZAI_0x6a90445976b4a9ad09de0c1621048483d2f5589f_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:58:29" (1/1) ...
[2020-11-25 09:58:29,895 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "ZAI_0x6a90445976b4a9ad09de0c1621048483d2f5589f_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:58:29" (1/1) ...
[2020-11-25 09:58:29,909 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 09:58:29,910 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 09:58:29,910 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 09:58:29,912 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 09:58:29,916 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "ZAI_0x6a90445976b4a9ad09de0c1621048483d2f5589f_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:58:29" (1/1) ...
[2020-11-25 09:58:29,937 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(TokenERC20.transferFrom(from, to, value), from != to && (value > balances_TokenERC20[this][from] || value > allowed_TokenERC20[this][from][msg.sender] || balances_TokenERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][to] >= 0 && balances_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][from] >= 0 &&  balances_TokenERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_TokenERC20[this][from][msg.sender] >= 0 && allowed_TokenERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(TokenERC20.transferFrom)))
[2020-11-25 09:58:29,943 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(TokenERC20.transferFrom(from, to, value), from != to && (value > balances_TokenERC20[this][from] || value > allowed_TokenERC20[this][from][msg.sender] || balances_TokenERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][to] >= 0 && balances_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][from] >= 0 &&  balances_TokenERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_TokenERC20[this][from][msg.sender] >= 0 && allowed_TokenERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(TokenERC20.transferFrom)))
[2020-11-25 09:58:29,950 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(TokenERC20.transferFrom(from, to, value), from != to && (value > balances_TokenERC20[this][from] || value > allowed_TokenERC20[this][from][msg.sender] || balances_TokenERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][to] >= 0 && balances_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][from] >= 0 &&  balances_TokenERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_TokenERC20[this][from][msg.sender] >= 0 && allowed_TokenERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(TokenERC20.transferFrom)))
[2020-11-25 09:58:29,959 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( from_s468!=to_s468 && ( ( tokens_s468>balances_TokenERC20[this][from_s468] || tokens_s468>allowed_TokenERC20[this][from_s468][msg.sender] ) || ( balances_TokenERC20[this][to_s468] + tokens_s468 )>=115792089237316195423570985008687907853269984665640564039457584007913129639936 ) ) && tokens_s468>=0 ) && tokens_s468<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_TokenERC20[this][to_s468]>=0 ) && balances_TokenERC20[this][to_s468]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_TokenERC20[this][from_s468]>=0 ) && balances_TokenERC20[this][from_s468]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && allowed_TokenERC20[this][from_s468][msg.sender]>=0 ) && allowed_TokenERC20[this][from_s468][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[from_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>],IdentifierExpression[to_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]],BinaryExpression[LOGICOR,BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[tokens_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[from_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]],BinaryExpression[COMPGT,IdentifierExpression[tokens_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[from_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]],BinaryExpression[COMPGEQ,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[to_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IdentifierExpression[tokens_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]],BinaryExpression[COMPGEQ,IdentifierExpression[tokens_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[tokens_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[to_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[to_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[from_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[from_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[from_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[from_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 09:58:29,968 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(TokenERC20.transferFrom(from, to, value), from != to && (value > balances_TokenERC20[this][from] || value > allowed_TokenERC20[this][from][msg.sender] || balances_TokenERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][to] >= 0 && balances_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][from] >= 0 &&  balances_TokenERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_TokenERC20[this][from][msg.sender] >= 0 && allowed_TokenERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(TokenERC20.transferFrom)))
[2020-11-25 09:58:29,968 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_TokenERC200) ==> ( <>AP(fail_transferFrom_TokenERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 09:58:29,984 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:58:29 PropertyContainer
[2020-11-25 09:58:29,984 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 09:58:29,984 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 09:58:29,984 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 09:58:29,984 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 09:58:29,985 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "ZAI_0x6a90445976b4a9ad09de0c1621048483d2f5589f_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:58:29" (1/2) ...
[2020-11-25 09:58:29,986 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 09:58:29,986 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 09:58:30,006 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:58:29" (2/2) ...
[2020-11-25 09:58:30,007 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 09:58:30,007 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 09:58:30,007 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 09:58:30,007 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 09:58:30,008 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "ZAI_0x6a90445976b4a9ad09de0c1621048483d2f5589f_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:58:29" (1/2) ...
[2020-11-25 09:58:30,068 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 09:58:30,069 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 09:58:30,069 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 09:58:30,069 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 09:58:30,069 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 09:58:30,069 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 09:58:30,069 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 09:58:30,069 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 09:58:30,070 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 09:58:30,070 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface
[2020-11-25 09:58:30,070 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface
[2020-11-25 09:58:30,070 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Interface
[2020-11-25 09:58:30,070 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Interface
[2020-11-25 09:58:30,070 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20Interface
[2020-11-25 09:58:30,070 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Interface
[2020-11-25 09:58:30,070 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Interface
[2020-11-25 09:58:30,070 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Interface
[2020-11-25 09:58:30,071 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__success
[2020-11-25 09:58:30,072 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack
[2020-11-25 09:58:30,072 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack
[2020-11-25 09:58:30,072 INFO  L130     BoogieDeclarations]: Found specification of procedure receiveApproval~address~uint256~address~bytes_ApproveAndCallFallBack
[2020-11-25 09:58:30,072 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 09:58:30,072 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned
[2020-11-25 09:58:30,072 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned
[2020-11-25 09:58:30,072 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned
[2020-11-25 09:58:30,072 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned
[2020-11-25 09:58:30,072 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned
[2020-11-25 09:58:30,072 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned
[2020-11-25 09:58:30,073 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned
[2020-11-25 09:58:30,073 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned
[2020-11-25 09:58:30,073 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned
[2020-11-25 09:58:30,073 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned
[2020-11-25 09:58:30,073 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20_NoBaseCtor__success
[2020-11-25 09:58:30,073 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20
[2020-11-25 09:58:30,073 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20
[2020-11-25 09:58:30,073 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_TokenERC20
[2020-11-25 09:58:30,073 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_TokenERC20
[2020-11-25 09:58:30,074 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_TokenERC20
[2020-11-25 09:58:30,074 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_TokenERC20
[2020-11-25 09:58:30,074 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_TokenERC20
[2020-11-25 09:58:30,074 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_TokenERC20
[2020-11-25 09:58:30,074 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_TokenERC20
[2020-11-25 09:58:30,074 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_TokenERC20
[2020-11-25 09:58:30,074 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_TokenERC20
[2020-11-25 09:58:30,074 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_TokenERC20
[2020-11-25 09:58:30,074 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_TokenERC20
[2020-11-25 09:58:30,074 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_TokenERC20
[2020-11-25 09:58:30,075 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_TokenERC20
[2020-11-25 09:58:30,075 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_TokenERC20
[2020-11-25 09:58:30,075 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_TokenERC20__success
[2020-11-25 09:58:30,075 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TokenERC20
[2020-11-25 09:58:30,075 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TokenERC20
[2020-11-25 09:58:30,075 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TokenERC20
[2020-11-25 09:58:30,075 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TokenERC20
[2020-11-25 09:58:30,075 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TokenERC20
[2020-11-25 09:58:30,075 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TokenERC20
[2020-11-25 09:58:30,075 INFO  L130     BoogieDeclarations]: Found specification of procedure ZAI_ZAI_NoBaseCtor__success
[2020-11-25 09:58:30,075 INFO  L130     BoogieDeclarations]: Found specification of procedure ZAI_ZAI
[2020-11-25 09:58:30,076 INFO  L138     BoogieDeclarations]: Found implementation of procedure ZAI_ZAI
[2020-11-25 09:58:30,076 INFO  L130     BoogieDeclarations]: Found specification of procedure getAirdrop~address_ZAI
[2020-11-25 09:58:30,076 INFO  L138     BoogieDeclarations]: Found implementation of procedure getAirdrop~address_ZAI
[2020-11-25 09:58:30,076 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenSale~address_ZAI
[2020-11-25 09:58:30,076 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenSale~address_ZAI
[2020-11-25 09:58:30,076 INFO  L130     BoogieDeclarations]: Found specification of procedure viewAirdrop_ZAI
[2020-11-25 09:58:30,076 INFO  L138     BoogieDeclarations]: Found implementation of procedure viewAirdrop_ZAI
[2020-11-25 09:58:30,076 INFO  L130     BoogieDeclarations]: Found specification of procedure viewSale_ZAI
[2020-11-25 09:58:30,076 INFO  L138     BoogieDeclarations]: Found implementation of procedure viewSale_ZAI
[2020-11-25 09:58:30,077 INFO  L130     BoogieDeclarations]: Found specification of procedure startAirdrop~uint256~uint256~uint256~uint256_ZAI
[2020-11-25 09:58:30,077 INFO  L138     BoogieDeclarations]: Found implementation of procedure startAirdrop~uint256~uint256~uint256~uint256_ZAI
[2020-11-25 09:58:30,077 INFO  L130     BoogieDeclarations]: Found specification of procedure startSale~uint256~uint256~uint256~uint256~uint256_ZAI
[2020-11-25 09:58:30,077 INFO  L138     BoogieDeclarations]: Found implementation of procedure startSale~uint256~uint256~uint256~uint256~uint256_ZAI
[2020-11-25 09:58:30,077 INFO  L130     BoogieDeclarations]: Found specification of procedure clearETH_ZAI
[2020-11-25 09:58:30,077 INFO  L138     BoogieDeclarations]: Found implementation of procedure clearETH_ZAI
[2020-11-25 09:58:30,077 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_ZAI__success
[2020-11-25 09:58:30,077 INFO  L130     BoogieDeclarations]: Found specification of procedure aSBlock_ZAI
[2020-11-25 09:58:30,077 INFO  L138     BoogieDeclarations]: Found implementation of procedure aSBlock_ZAI
[2020-11-25 09:58:30,077 INFO  L130     BoogieDeclarations]: Found specification of procedure aEBlock_ZAI
[2020-11-25 09:58:30,078 INFO  L138     BoogieDeclarations]: Found implementation of procedure aEBlock_ZAI
[2020-11-25 09:58:30,078 INFO  L130     BoogieDeclarations]: Found specification of procedure aCap_ZAI
[2020-11-25 09:58:30,078 INFO  L138     BoogieDeclarations]: Found implementation of procedure aCap_ZAI
[2020-11-25 09:58:30,078 INFO  L130     BoogieDeclarations]: Found specification of procedure aTot_ZAI
[2020-11-25 09:58:30,078 INFO  L138     BoogieDeclarations]: Found implementation of procedure aTot_ZAI
[2020-11-25 09:58:30,078 INFO  L130     BoogieDeclarations]: Found specification of procedure aAmt_ZAI
[2020-11-25 09:58:30,078 INFO  L138     BoogieDeclarations]: Found implementation of procedure aAmt_ZAI
[2020-11-25 09:58:30,078 INFO  L130     BoogieDeclarations]: Found specification of procedure sSBlock_ZAI
[2020-11-25 09:58:30,078 INFO  L138     BoogieDeclarations]: Found implementation of procedure sSBlock_ZAI
[2020-11-25 09:58:30,078 INFO  L130     BoogieDeclarations]: Found specification of procedure sEBlock_ZAI
[2020-11-25 09:58:30,079 INFO  L138     BoogieDeclarations]: Found implementation of procedure sEBlock_ZAI
[2020-11-25 09:58:30,079 INFO  L130     BoogieDeclarations]: Found specification of procedure sCap_ZAI
[2020-11-25 09:58:30,079 INFO  L138     BoogieDeclarations]: Found implementation of procedure sCap_ZAI
[2020-11-25 09:58:30,079 INFO  L130     BoogieDeclarations]: Found specification of procedure sTot_ZAI
[2020-11-25 09:58:30,079 INFO  L138     BoogieDeclarations]: Found implementation of procedure sTot_ZAI
[2020-11-25 09:58:30,079 INFO  L130     BoogieDeclarations]: Found specification of procedure sChunk_ZAI
[2020-11-25 09:58:30,079 INFO  L138     BoogieDeclarations]: Found implementation of procedure sChunk_ZAI
[2020-11-25 09:58:30,079 INFO  L130     BoogieDeclarations]: Found specification of procedure sPrice_ZAI
[2020-11-25 09:58:30,079 INFO  L138     BoogieDeclarations]: Found implementation of procedure sPrice_ZAI
[2020-11-25 09:58:30,079 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 09:58:30,080 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 09:58:30,080 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 09:58:30,080 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 09:58:30,080 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 09:58:30,080 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 09:58:30,080 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Interface
[2020-11-25 09:58:30,080 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Interface
[2020-11-25 09:58:30,080 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-25 09:58:30,080 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-25 09:58:30,081 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Owned
[2020-11-25 09:58:30,081 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Owned
[2020-11-25 09:58:30,081 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_TokenERC20
[2020-11-25 09:58:30,081 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_TokenERC20
[2020-11-25 09:58:30,081 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ZAI
[2020-11-25 09:58:30,081 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 09:58:30,081 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 09:58:30,081 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 09:58:30,081 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 09:58:30,082 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 09:58:30,082 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 09:58:30,082 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 09:58:30,082 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 09:58:30,082 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 09:58:30,082 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 09:58:30,082 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 09:58:30,082 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 09:58:30,082 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__fail
[2020-11-25 09:58:30,082 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__success
[2020-11-25 09:58:30,083 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__fail
[2020-11-25 09:58:30,083 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 09:58:30,083 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__success
[2020-11-25 09:58:30,083 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__fail
[2020-11-25 09:58:30,083 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__success
[2020-11-25 09:58:30,083 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__fail
[2020-11-25 09:58:30,083 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__success
[2020-11-25 09:58:30,083 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__fail
[2020-11-25 09:58:30,083 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__success
[2020-11-25 09:58:30,084 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__fail
[2020-11-25 09:58:30,084 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__success
[2020-11-25 09:58:30,084 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__fail
[2020-11-25 09:58:30,084 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20_NoBaseCtor__fail
[2020-11-25 09:58:30,084 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20__success
[2020-11-25 09:58:30,085 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20__fail
[2020-11-25 09:58:30,085 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_TokenERC20__success
[2020-11-25 09:58:30,085 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_TokenERC20__fail
[2020-11-25 09:58:30,085 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_TokenERC20__success
[2020-11-25 09:58:30,085 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_TokenERC20__fail
[2020-11-25 09:58:30,085 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_TokenERC20__success
[2020-11-25 09:58:30,085 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_TokenERC20__fail
[2020-11-25 09:58:30,086 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_TokenERC20__success
[2020-11-25 09:58:30,086 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_TokenERC20__fail
[2020-11-25 09:58:30,086 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_TokenERC20__success
[2020-11-25 09:58:30,086 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_TokenERC20__fail
[2020-11-25 09:58:30,086 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_TokenERC20__success
[2020-11-25 09:58:30,086 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_TokenERC20__fail
[2020-11-25 09:58:30,086 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_TokenERC20__success
[2020-11-25 09:58:30,086 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_TokenERC20__fail
[2020-11-25 09:58:30,086 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_TokenERC20__fail
[2020-11-25 09:58:30,086 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TokenERC20__success
[2020-11-25 09:58:30,087 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TokenERC20__fail
[2020-11-25 09:58:30,087 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TokenERC20__success
[2020-11-25 09:58:30,087 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TokenERC20__fail
[2020-11-25 09:58:30,087 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TokenERC20__success
[2020-11-25 09:58:30,087 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TokenERC20__fail
[2020-11-25 09:58:30,087 INFO  L130     BoogieDeclarations]: Found specification of procedure ZAI_ZAI_NoBaseCtor__fail
[2020-11-25 09:58:30,087 INFO  L130     BoogieDeclarations]: Found specification of procedure ZAI_ZAI__success
[2020-11-25 09:58:30,087 INFO  L130     BoogieDeclarations]: Found specification of procedure ZAI_ZAI__fail
[2020-11-25 09:58:30,087 INFO  L130     BoogieDeclarations]: Found specification of procedure getAirdrop~address_ZAI__success
[2020-11-25 09:58:30,087 INFO  L130     BoogieDeclarations]: Found specification of procedure getAirdrop~address_ZAI__fail
[2020-11-25 09:58:30,088 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenSale~address_ZAI__success
[2020-11-25 09:58:30,088 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenSale~address_ZAI__fail
[2020-11-25 09:58:30,088 INFO  L130     BoogieDeclarations]: Found specification of procedure viewAirdrop_ZAI__success
[2020-11-25 09:58:30,088 INFO  L130     BoogieDeclarations]: Found specification of procedure viewAirdrop_ZAI__fail
[2020-11-25 09:58:30,088 INFO  L130     BoogieDeclarations]: Found specification of procedure viewSale_ZAI__success
[2020-11-25 09:58:30,088 INFO  L130     BoogieDeclarations]: Found specification of procedure viewSale_ZAI__fail
[2020-11-25 09:58:30,088 INFO  L130     BoogieDeclarations]: Found specification of procedure startAirdrop~uint256~uint256~uint256~uint256_ZAI__success
[2020-11-25 09:58:30,088 INFO  L130     BoogieDeclarations]: Found specification of procedure startAirdrop~uint256~uint256~uint256~uint256_ZAI__fail
[2020-11-25 09:58:30,088 INFO  L130     BoogieDeclarations]: Found specification of procedure startSale~uint256~uint256~uint256~uint256~uint256_ZAI__success
[2020-11-25 09:58:30,088 INFO  L130     BoogieDeclarations]: Found specification of procedure startSale~uint256~uint256~uint256~uint256~uint256_ZAI__fail
[2020-11-25 09:58:30,089 INFO  L130     BoogieDeclarations]: Found specification of procedure clearETH_ZAI__success
[2020-11-25 09:58:30,089 INFO  L130     BoogieDeclarations]: Found specification of procedure clearETH_ZAI__fail
[2020-11-25 09:58:30,089 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_ZAI__fail
[2020-11-25 09:58:30,089 INFO  L130     BoogieDeclarations]: Found specification of procedure aSBlock_ZAI__success
[2020-11-25 09:58:30,089 INFO  L130     BoogieDeclarations]: Found specification of procedure aSBlock_ZAI__fail
[2020-11-25 09:58:30,089 INFO  L130     BoogieDeclarations]: Found specification of procedure aEBlock_ZAI__success
[2020-11-25 09:58:30,089 INFO  L130     BoogieDeclarations]: Found specification of procedure aEBlock_ZAI__fail
[2020-11-25 09:58:30,089 INFO  L130     BoogieDeclarations]: Found specification of procedure aCap_ZAI__success
[2020-11-25 09:58:30,089 INFO  L130     BoogieDeclarations]: Found specification of procedure aCap_ZAI__fail
[2020-11-25 09:58:30,089 INFO  L130     BoogieDeclarations]: Found specification of procedure aTot_ZAI__success
[2020-11-25 09:58:30,089 INFO  L130     BoogieDeclarations]: Found specification of procedure aTot_ZAI__fail
[2020-11-25 09:58:30,090 INFO  L130     BoogieDeclarations]: Found specification of procedure aAmt_ZAI__success
[2020-11-25 09:58:30,090 INFO  L130     BoogieDeclarations]: Found specification of procedure aAmt_ZAI__fail
[2020-11-25 09:58:30,090 INFO  L130     BoogieDeclarations]: Found specification of procedure sSBlock_ZAI__success
[2020-11-25 09:58:30,090 INFO  L130     BoogieDeclarations]: Found specification of procedure sSBlock_ZAI__fail
[2020-11-25 09:58:30,090 INFO  L130     BoogieDeclarations]: Found specification of procedure sEBlock_ZAI__success
[2020-11-25 09:58:30,090 INFO  L130     BoogieDeclarations]: Found specification of procedure sEBlock_ZAI__fail
[2020-11-25 09:58:30,090 INFO  L130     BoogieDeclarations]: Found specification of procedure sCap_ZAI__success
[2020-11-25 09:58:30,090 INFO  L130     BoogieDeclarations]: Found specification of procedure sCap_ZAI__fail
[2020-11-25 09:58:30,091 INFO  L130     BoogieDeclarations]: Found specification of procedure sTot_ZAI__success
[2020-11-25 09:58:30,091 INFO  L130     BoogieDeclarations]: Found specification of procedure sTot_ZAI__fail
[2020-11-25 09:58:30,091 INFO  L130     BoogieDeclarations]: Found specification of procedure sChunk_ZAI__success
[2020-11-25 09:58:30,091 INFO  L130     BoogieDeclarations]: Found specification of procedure sChunk_ZAI__fail
[2020-11-25 09:58:30,092 INFO  L130     BoogieDeclarations]: Found specification of procedure sPrice_ZAI__success
[2020-11-25 09:58:30,092 INFO  L130     BoogieDeclarations]: Found specification of procedure sPrice_ZAI__fail
[2020-11-25 09:58:30,092 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 09:58:30,092 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 09:58:30,092 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 09:58:30,093 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 09:58:30,093 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 09:58:30,093 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 09:58:30,093 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 09:58:30,094 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 09:58:30,094 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 09:58:30,094 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 09:58:30,094 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 09:58:30,094 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 09:58:30,095 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 09:58:30,095 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 09:58:30,095 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 09:58:30,095 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 09:58:30,095 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 09:58:30,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 09:58:30,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 09:58:30,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 09:58:30,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 09:58:30,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 09:58:30,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__fail
[2020-11-25 09:58:30,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__success
[2020-11-25 09:58:30,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__fail
[2020-11-25 09:58:30,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__success
[2020-11-25 09:58:30,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 09:58:30,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 09:58:30,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__fail
[2020-11-25 09:58:30,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__success
[2020-11-25 09:58:30,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__fail
[2020-11-25 09:58:30,099 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__success
[2020-11-25 09:58:30,099 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__fail
[2020-11-25 09:58:30,099 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__success
[2020-11-25 09:58:30,099 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__fail
[2020-11-25 09:58:30,099 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__success
[2020-11-25 09:58:30,100 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__fail
[2020-11-25 09:58:30,100 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__success
[2020-11-25 09:58:30,100 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20_NoBaseCtor__fail
[2020-11-25 09:58:30,100 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20_NoBaseCtor__success
[2020-11-25 09:58:30,100 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20__fail
[2020-11-25 09:58:30,101 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20__success
[2020-11-25 09:58:30,101 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_TokenERC20__fail
[2020-11-25 09:58:30,101 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_TokenERC20__success
[2020-11-25 09:58:30,101 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_TokenERC20__fail
[2020-11-25 09:58:30,102 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_TokenERC20__success
[2020-11-25 09:58:30,102 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_TokenERC20__fail
[2020-11-25 09:58:30,102 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_TokenERC20__success
[2020-11-25 09:58:30,102 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_TokenERC20__fail
[2020-11-25 09:58:30,102 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_TokenERC20__success
[2020-11-25 09:58:30,103 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_TokenERC20__fail
[2020-11-25 09:58:30,103 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_TokenERC20__success
[2020-11-25 09:58:30,103 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_TokenERC20__fail
[2020-11-25 09:58:30,103 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_TokenERC20__success
[2020-11-25 09:58:30,103 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_TokenERC20__fail
[2020-11-25 09:58:30,104 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_TokenERC20__success
[2020-11-25 09:58:30,104 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_TokenERC20__fail
[2020-11-25 09:58:30,104 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_TokenERC20__success
[2020-11-25 09:58:30,104 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TokenERC20__fail
[2020-11-25 09:58:30,104 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TokenERC20__success
[2020-11-25 09:58:30,104 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TokenERC20__fail
[2020-11-25 09:58:30,104 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TokenERC20__success
[2020-11-25 09:58:30,104 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TokenERC20__fail
[2020-11-25 09:58:30,105 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TokenERC20__success
[2020-11-25 09:58:30,105 INFO  L138     BoogieDeclarations]: Found implementation of procedure ZAI_ZAI_NoBaseCtor__fail
[2020-11-25 09:58:30,105 INFO  L138     BoogieDeclarations]: Found implementation of procedure ZAI_ZAI_NoBaseCtor__success
[2020-11-25 09:58:30,105 INFO  L138     BoogieDeclarations]: Found implementation of procedure ZAI_ZAI__fail
[2020-11-25 09:58:30,105 INFO  L138     BoogieDeclarations]: Found implementation of procedure ZAI_ZAI__success
[2020-11-25 09:58:30,105 INFO  L138     BoogieDeclarations]: Found implementation of procedure getAirdrop~address_ZAI__fail
[2020-11-25 09:58:30,105 INFO  L138     BoogieDeclarations]: Found implementation of procedure getAirdrop~address_ZAI__success
[2020-11-25 09:58:30,105 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenSale~address_ZAI__fail
[2020-11-25 09:58:30,105 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenSale~address_ZAI__success
[2020-11-25 09:58:30,106 INFO  L138     BoogieDeclarations]: Found implementation of procedure viewAirdrop_ZAI__fail
[2020-11-25 09:58:30,106 INFO  L138     BoogieDeclarations]: Found implementation of procedure viewAirdrop_ZAI__success
[2020-11-25 09:58:30,106 INFO  L138     BoogieDeclarations]: Found implementation of procedure viewSale_ZAI__fail
[2020-11-25 09:58:30,106 INFO  L138     BoogieDeclarations]: Found implementation of procedure viewSale_ZAI__success
[2020-11-25 09:58:30,106 INFO  L138     BoogieDeclarations]: Found implementation of procedure startAirdrop~uint256~uint256~uint256~uint256_ZAI__fail
[2020-11-25 09:58:30,106 INFO  L138     BoogieDeclarations]: Found implementation of procedure startAirdrop~uint256~uint256~uint256~uint256_ZAI__success
[2020-11-25 09:58:30,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure startSale~uint256~uint256~uint256~uint256~uint256_ZAI__fail
[2020-11-25 09:58:30,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure startSale~uint256~uint256~uint256~uint256~uint256_ZAI__success
[2020-11-25 09:58:30,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure clearETH_ZAI__fail
[2020-11-25 09:58:30,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure clearETH_ZAI__success
[2020-11-25 09:58:30,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_ZAI__fail
[2020-11-25 09:58:30,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_ZAI__success
[2020-11-25 09:58:30,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure aSBlock_ZAI__fail
[2020-11-25 09:58:30,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure aSBlock_ZAI__success
[2020-11-25 09:58:30,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure aEBlock_ZAI__fail
[2020-11-25 09:58:30,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure aEBlock_ZAI__success
[2020-11-25 09:58:30,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure aCap_ZAI__fail
[2020-11-25 09:58:30,108 INFO  L138     BoogieDeclarations]: Found implementation of procedure aCap_ZAI__success
[2020-11-25 09:58:30,108 INFO  L138     BoogieDeclarations]: Found implementation of procedure aTot_ZAI__fail
[2020-11-25 09:58:30,108 INFO  L138     BoogieDeclarations]: Found implementation of procedure aTot_ZAI__success
[2020-11-25 09:58:30,108 INFO  L138     BoogieDeclarations]: Found implementation of procedure aAmt_ZAI__fail
[2020-11-25 09:58:30,108 INFO  L138     BoogieDeclarations]: Found implementation of procedure aAmt_ZAI__success
[2020-11-25 09:58:30,108 INFO  L138     BoogieDeclarations]: Found implementation of procedure sSBlock_ZAI__fail
[2020-11-25 09:58:30,108 INFO  L138     BoogieDeclarations]: Found implementation of procedure sSBlock_ZAI__success
[2020-11-25 09:58:30,108 INFO  L138     BoogieDeclarations]: Found implementation of procedure sEBlock_ZAI__fail
[2020-11-25 09:58:30,108 INFO  L138     BoogieDeclarations]: Found implementation of procedure sEBlock_ZAI__success
[2020-11-25 09:58:30,108 INFO  L138     BoogieDeclarations]: Found implementation of procedure sCap_ZAI__fail
[2020-11-25 09:58:30,108 INFO  L138     BoogieDeclarations]: Found implementation of procedure sCap_ZAI__success
[2020-11-25 09:58:30,108 INFO  L138     BoogieDeclarations]: Found implementation of procedure sTot_ZAI__fail
[2020-11-25 09:58:30,109 INFO  L138     BoogieDeclarations]: Found implementation of procedure sTot_ZAI__success
[2020-11-25 09:58:30,109 INFO  L138     BoogieDeclarations]: Found implementation of procedure sChunk_ZAI__fail
[2020-11-25 09:58:30,109 INFO  L138     BoogieDeclarations]: Found implementation of procedure sChunk_ZAI__success
[2020-11-25 09:58:30,109 INFO  L138     BoogieDeclarations]: Found implementation of procedure sPrice_ZAI__fail
[2020-11-25 09:58:30,109 INFO  L138     BoogieDeclarations]: Found implementation of procedure sPrice_ZAI__success
[2020-11-25 09:58:30,109 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 09:58:30,109 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 09:58:30,109 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 09:58:30,109 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 09:58:30,109 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 09:58:30,109 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 09:58:30,109 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 09:58:30,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 09:58:30,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 09:58:30,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 09:58:30,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Interface
[2020-11-25 09:58:30,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Interface
[2020-11-25 09:58:30,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-25 09:58:30,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-25 09:58:30,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Owned
[2020-11-25 09:58:30,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Owned
[2020-11-25 09:58:30,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_TokenERC20
[2020-11-25 09:58:30,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_TokenERC20
[2020-11-25 09:58:30,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ZAI
[2020-11-25 09:58:30,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 09:58:30,111 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 09:58:30,111 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 09:58:30,571 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 09:58:30,571 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 09:58:31,045 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 09:58:31,045 INFO  L286             CfgBuilder]: Removed 6 assue(true) statements.
[2020-11-25 09:58:31,047 INFO  L202        PluginConnector]: Adding new model ZAI_0x6a90445976b4a9ad09de0c1621048483d2f5589f_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 09:58:31 BoogieIcfgContainer
[2020-11-25 09:58:31,048 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:58:29" (2/2) ...
[2020-11-25 09:58:31,048 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 09:58:31,048 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@2b8c8 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 09:58:31, skipping insertion in model container
[2020-11-25 09:58:31,048 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 09:58:31,048 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 09:58:31,048 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 09:58:31,050 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 09:58:31,050 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "ZAI_0x6a90445976b4a9ad09de0c1621048483d2f5589f_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:58:29" (1/3) ...
[2020-11-25 09:58:31,050 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@70ba0bcc and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 09:58:31, skipping insertion in model container
[2020-11-25 09:58:31,051 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:58:29" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 09:58:31,087 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 09:58:31 NWAContainer
[2020-11-25 09:58:31,087 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 09:58:31,087 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 09:58:31,087 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 09:58:31,088 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 09:58:31,089 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "ZAI_0x6a90445976b4a9ad09de0c1621048483d2f5589f_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 09:58:31" (3/4) ...
[2020-11-25 09:58:31,090 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@2819d32b and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 09:58:31, skipping insertion in model container
[2020-11-25 09:58:31,090 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 09:58:31" (4/4) ...
[2020-11-25 09:58:31,093 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 09:58:31,099 INFO  L110   BuchiProductObserver]: Initial RCFG 3565 locations, 4640 edges
[2020-11-25 09:58:31,099 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 09:58:31,112 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 09:58:32,861 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 09:58:32,871 INFO  L110   BuchiProductObserver]: BuchiProgram size 8356 locations, 14605 edges
[2020-11-25 09:58:32,871 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 09:58:32 BoogieIcfgContainer
[2020-11-25 09:58:32,871 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 09:58:32,872 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 09:58:32,872 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 09:58:32,873 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 09:58:32,873 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 09:58:32" (1/1) ...
[2020-11-25 09:58:32,991 INFO  L313           BlockEncoder]: Initial Icfg 8356 locations, 14605 edges
[2020-11-25 09:58:32,992 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 09:58:32,992 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 09:58:32,992 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 09:58:32,992 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 09:58:33,006 INFO  L70    emoveInfeasibleEdges]: Removed 84 edges and 15 locations because of local infeasibility
[2020-11-25 09:58:33,018 INFO  L70        RemoveSinkStates]: Removed 78 edges and 41 locations by removing sink states
[2020-11-25 09:58:33,036 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 09:58:33,042 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 09:58:33,046 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 09:58:33,046 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 09:58:33,050 INFO  L313           BlockEncoder]: Encoded RCFG 8268 locations, 14396 edges
[2020-11-25 09:58:33,051 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 09:58:33 BasicIcfg
[2020-11-25 09:58:33,051 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 09:58:33,051 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 09:58:33,051 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 09:58:33,053 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 09:58:33,053 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:58:33,053 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ZAI_0x6a90445976b4a9ad09de0c1621048483d2f5589f_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:58:29" (1/6) ...
[2020-11-25 09:58:33,054 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5494a9ee and model type ZAI_0x6a90445976b4a9ad09de0c1621048483d2f5589f_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 09:58:33, skipping insertion in model container
[2020-11-25 09:58:33,054 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:58:33,054 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:58:29" (2/6) ...
[2020-11-25 09:58:33,055 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5494a9ee and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 09:58:33, skipping insertion in model container
[2020-11-25 09:58:33,055 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:58:33,055 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ZAI_0x6a90445976b4a9ad09de0c1621048483d2f5589f_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 09:58:31" (3/6) ...
[2020-11-25 09:58:33,055 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5494a9ee and model type ZAI_0x6a90445976b4a9ad09de0c1621048483d2f5589f_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 09:58:33, skipping insertion in model container
[2020-11-25 09:58:33,055 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:58:33,055 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 09:58:31" (4/6) ...
[2020-11-25 09:58:33,055 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5494a9ee and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 09:58:33, skipping insertion in model container
[2020-11-25 09:58:33,055 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:58:33,055 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 09:58:32" (5/6) ...
[2020-11-25 09:58:33,055 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5494a9ee and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 09:58:33, skipping insertion in model container
[2020-11-25 09:58:33,056 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:58:33,056 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 09:58:33" (6/6) ...
[2020-11-25 09:58:33,057 INFO  L404   chiAutomizerObserver]: Analyzing ICFG ZAI_0x6a90445976b4a9ad09de0c1621048483d2f5589f_transferfrom-fail.bpl_BEv2
[2020-11-25 09:58:33,090 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 09:58:33,090 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 09:58:33,091 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 09:58:33,091 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 09:58:33,091 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 09:58:33,091 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 09:58:33,091 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 09:58:33,091 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 09:58:33,091 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 09:58:33,144 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8268 states.
[2020-11-25 09:58:33,220 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:58:33,221 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:58:33,221 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:58:33,228 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:58:33,228 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:58:33,228 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 09:58:33,228 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8268 states.
[2020-11-25 09:58:33,263 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:58:33,263 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:58:33,263 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:58:33,265 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:58:33,265 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_TokenERC200 := false;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]     CALL        call main();
[L7672]              assume null == 0;
[L7673]  CALL        call this := FreshRefGenerator__success();
[L4050]              havoc newRef;
[L4051]              assume Alloc[newRef] == false;
[L4052]              Alloc[newRef] := true;
[L4053]              assume newRef != null;
[L7673]  RET         call this := FreshRefGenerator__success();
[L7674]              assume now >= 0;
[L7675]              assume DType[this] == ZAI;
[L7676]              assume msgvalue_MSG == 0;
[L7677]              gas := gas - 53000;
[L7678]  CALL        call ZAI_ZAI__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]              assume msgsender_MSG != null;
[L4172]              Balance[this] := 0;
[L4186]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  COND FALSE  !(revert)
[L4740]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  COND TRUE   revert
[L7678]  RET         call ZAI_ZAI__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]              assume !revert && gas >= 0;

Loop:
[L7682]  CALL        call CorralChoice_ZAI(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != ZAI;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND TRUE   choice == 32
[L7460]              gas := gas - 21000;
[L7461]  COND FALSE  !(gas >= 0)
[L7682]  RET         call CorralChoice_ZAI(this);

[2020-11-25 09:58:33,279 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:58:33,279 INFO  L82        PathProgramCache]: Analyzing trace with hash 169970189, now seen corresponding path program 1 times
[2020-11-25 09:58:33,283 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:58:33,301 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:58:33,334 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 09:58:33,336 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:58:33,336 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 09:58:33,804 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:58:33,812 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 09:58:33,812 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 09:58:33,813 INFO  L87              Difference]: Start difference. First operand 8268 states. Second operand 4 states.
[2020-11-25 09:58:34,709 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:58:34,709 INFO  L93              Difference]: Finished difference Result 6981 states and 8319 transitions.
[2020-11-25 09:58:34,710 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 09:58:34,711 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6981 states and 8319 transitions.
[2020-11-25 09:58:34,745 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:58:34,785 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6981 states to 6981 states and 8319 transitions.
[2020-11-25 09:58:34,786 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-25 09:58:34,787 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 238
[2020-11-25 09:58:34,787 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6981 states and 8319 transitions.
[2020-11-25 09:58:34,801 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:58:34,801 INFO  L728         BuchiCegarLoop]: Abstraction has 6981 states and 8319 transitions.
[2020-11-25 09:58:34,821 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6981 states and 8319 transitions.
[2020-11-25 09:58:34,921 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6981 to 6981.
[2020-11-25 09:58:34,921 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6981 states.
[2020-11-25 09:58:34,932 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6981 states to 6981 states and 8319 transitions.
[2020-11-25 09:58:34,933 INFO  L751         BuchiCegarLoop]: Abstraction has 6981 states and 8319 transitions.
[2020-11-25 09:58:34,933 INFO  L631         BuchiCegarLoop]: Abstraction has 6981 states and 8319 transitions.
[2020-11-25 09:58:34,933 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 09:58:34,933 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6981 states and 8319 transitions.
[2020-11-25 09:58:34,942 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:58:34,942 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:58:34,942 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:58:34,944 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:58:34,945 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_TokenERC200 := false;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]     CALL        call main();
[L7672]              assume null == 0;
[L7673]  CALL        call this := FreshRefGenerator__success();
[L4050]              havoc newRef;
[L4051]              assume Alloc[newRef] == false;
[L4052]              Alloc[newRef] := true;
[L4053]              assume newRef != null;
[L7673]  RET         call this := FreshRefGenerator__success();
[L7674]              assume now >= 0;
[L7675]              assume DType[this] == ZAI;
[L7676]              assume msgvalue_MSG == 0;
[L7677]              gas := gas - 53000;
[L7678]  CALL        call ZAI_ZAI__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]              assume msgsender_MSG != null;
[L4172]              Balance[this] := 0;
[L4186]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  COND FALSE  !(revert)
[L4740]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  COND TRUE   revert
[L7678]  RET         call ZAI_ZAI__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]              assume !revert && gas >= 0;
[L7682]  CALL        call CorralChoice_ZAI(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != ZAI;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND FALSE  !(choice == 29)
[L7484]  COND FALSE  !(choice == 28)
[L7491]  COND TRUE   choice == 27
[L7492]              gas := gas - 21000;
[L7493]  COND TRUE   gas >= 0
[L7494]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7495]              assume msgvalue_MSG == 0;
[L7496]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s468 != to_s468 && ((tokens_s468 > balances_TokenERC20[this][from_s468] || tokens_s468 > allowed_TokenERC20[this][from_s468][msgsender_MSG]) || balances_TokenERC20[this][to_s468] + tokens_s468 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_TokenERC200 := true;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L1136]              havoc __exception;
[L1137]              revert := false;
[L1138]  COND FALSE  !(__exception)
[L1172]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4551]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4117]  COND TRUE   !(b_s45 <= a_s45)
[L4118]              revert := true;
[L4551]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4552]  COND TRUE   revert
[L1172]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1173]              assume !revert && gas >= 0;
[L7496]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7682]  RET         call CorralChoice_ZAI(this);

Loop:
[L7682]  CALL        call CorralChoice_ZAI(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != ZAI;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND FALSE  !(choice == 29)
[L7484]  COND FALSE  !(choice == 28)
[L7491]  COND TRUE   choice == 27
[L7492]              gas := gas - 21000;
[L7493]  COND TRUE   gas >= 0
[L7494]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7495]              assume msgvalue_MSG == 0;
[L7496]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s468 != to_s468 && ((tokens_s468 > balances_TokenERC20[this][from_s468] || tokens_s468 > allowed_TokenERC20[this][from_s468][msgsender_MSG]) || balances_TokenERC20[this][to_s468] + tokens_s468 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_TokenERC200 := true;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L1136]              havoc __exception;
[L1137]              revert := false;
[L1138]  COND FALSE  !(__exception)
[L1172]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4551]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4117]  COND TRUE   !(b_s45 <= a_s45)
[L4118]              revert := true;
[L4551]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4552]  COND TRUE   revert
[L1172]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1173]              assume !revert && gas >= 0;
[L7496]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7682]  RET         call CorralChoice_ZAI(this);

[2020-11-25 09:58:34,949 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:58:34,949 INFO  L82        PathProgramCache]: Analyzing trace with hash -1810728301, now seen corresponding path program 1 times
[2020-11-25 09:58:34,950 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:58:34,960 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:58:34,982 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 09:58:34,982 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:58:34,982 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 09:58:34,983 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:58:34,983 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 09:58:34,983 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 09:58:34,984 INFO  L87              Difference]: Start difference. First operand 6981 states and 8319 transitions. cyclomatic complexity: 1344 Second operand 3 states.
[2020-11-25 09:58:35,117 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:58:35,117 INFO  L93              Difference]: Finished difference Result 8337 states and 9874 transitions.
[2020-11-25 09:58:35,117 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 09:58:35,118 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8337 states and 9874 transitions.
[2020-11-25 09:58:35,143 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 09:58:35,186 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8337 states to 8337 states and 9874 transitions.
[2020-11-25 09:58:35,186 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 315
[2020-11-25 09:58:35,187 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 315
[2020-11-25 09:58:35,187 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8337 states and 9874 transitions.
[2020-11-25 09:58:35,196 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:58:35,196 INFO  L728         BuchiCegarLoop]: Abstraction has 8337 states and 9874 transitions.
[2020-11-25 09:58:35,204 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8337 states and 9874 transitions.
[2020-11-25 09:58:35,303 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8337 to 7621.
[2020-11-25 09:58:35,303 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7621 states.
[2020-11-25 09:58:35,313 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7621 states to 7621 states and 9003 transitions.
[2020-11-25 09:58:35,314 INFO  L751         BuchiCegarLoop]: Abstraction has 7621 states and 9003 transitions.
[2020-11-25 09:58:35,314 INFO  L631         BuchiCegarLoop]: Abstraction has 7621 states and 9003 transitions.
[2020-11-25 09:58:35,314 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 09:58:35,314 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7621 states and 9003 transitions.
[2020-11-25 09:58:35,322 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 09:58:35,322 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:58:35,322 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:58:35,324 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:58:35,324 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_TokenERC200 := false;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]     CALL        call main();
[L7672]              assume null == 0;
[L7673]  CALL        call this := FreshRefGenerator__success();
[L4050]              havoc newRef;
[L4051]              assume Alloc[newRef] == false;
[L4052]              Alloc[newRef] := true;
[L4053]              assume newRef != null;
[L7673]  RET         call this := FreshRefGenerator__success();
[L7674]              assume now >= 0;
[L7675]              assume DType[this] == ZAI;
[L7676]              assume msgvalue_MSG == 0;
[L7677]              gas := gas - 53000;
[L7678]  CALL        call ZAI_ZAI__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]              assume msgsender_MSG != null;
[L4172]              Balance[this] := 0;
[L4186]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  COND TRUE   revert
[L4740]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  COND TRUE   revert
[L7678]  RET         call ZAI_ZAI__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]              assume !revert && gas >= 0;
[L7682]  CALL        call CorralChoice_ZAI(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != ZAI;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND FALSE  !(choice == 29)
[L7484]  COND FALSE  !(choice == 28)
[L7491]  COND TRUE   choice == 27
[L7492]              gas := gas - 21000;
[L7493]  COND TRUE   gas >= 0
[L7494]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7495]              assume msgvalue_MSG == 0;
[L7496]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s468 != to_s468 && ((tokens_s468 > balances_TokenERC20[this][from_s468] || tokens_s468 > allowed_TokenERC20[this][from_s468][msgsender_MSG]) || balances_TokenERC20[this][to_s468] + tokens_s468 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_TokenERC200 := true;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L1136]              havoc __exception;
[L1137]              revert := false;
[L1138]  COND FALSE  !(__exception)
[L1172]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4551]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4117]  COND TRUE   !(b_s45 <= a_s45)
[L4118]              revert := true;
[L4551]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4552]  COND TRUE   revert
[L1172]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1173]              assume !revert && gas >= 0;
[L7496]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7682]  RET         call CorralChoice_ZAI(this);

Loop:
[L7682]  CALL        call CorralChoice_ZAI(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != ZAI;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND FALSE  !(choice == 29)
[L7484]  COND FALSE  !(choice == 28)
[L7491]  COND TRUE   choice == 27
[L7492]              gas := gas - 21000;
[L7493]  COND TRUE   gas >= 0
[L7494]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7495]              assume msgvalue_MSG == 0;
[L7496]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s468 != to_s468 && ((tokens_s468 > balances_TokenERC20[this][from_s468] || tokens_s468 > allowed_TokenERC20[this][from_s468][msgsender_MSG]) || balances_TokenERC20[this][to_s468] + tokens_s468 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_TokenERC200 := true;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L1136]              havoc __exception;
[L1137]              revert := false;
[L1138]  COND FALSE  !(__exception)
[L1172]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4551]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4117]  COND TRUE   !(b_s45 <= a_s45)
[L4118]              revert := true;
[L4551]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4552]  COND TRUE   revert
[L1172]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1173]              assume !revert && gas >= 0;
[L7496]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7682]  RET         call CorralChoice_ZAI(this);

[2020-11-25 09:58:35,333 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:58:35,333 INFO  L82        PathProgramCache]: Analyzing trace with hash -862676335, now seen corresponding path program 1 times
[2020-11-25 09:58:35,334 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:58:35,340 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:58:35,356 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 09:58:35,357 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:58:35,357 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 09:58:35,357 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:58:35,357 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 09:58:35,357 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 09:58:35,357 INFO  L87              Difference]: Start difference. First operand 7621 states and 9003 transitions. cyclomatic complexity: 1388 Second operand 3 states.
[2020-11-25 09:58:35,446 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:58:35,446 INFO  L93              Difference]: Finished difference Result 8340 states and 9704 transitions.
[2020-11-25 09:58:35,446 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 09:58:35,447 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8340 states and 9704 transitions.
[2020-11-25 09:58:35,466 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 09:58:35,497 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8340 states to 8036 states and 9336 transitions.
[2020-11-25 09:58:35,497 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 295
[2020-11-25 09:58:35,498 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 295
[2020-11-25 09:58:35,498 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8036 states and 9336 transitions.
[2020-11-25 09:58:35,507 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:58:35,507 INFO  L728         BuchiCegarLoop]: Abstraction has 8036 states and 9336 transitions.
[2020-11-25 09:58:35,515 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8036 states and 9336 transitions.
[2020-11-25 09:58:35,579 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8036 to 7377.
[2020-11-25 09:58:35,579 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7377 states.
[2020-11-25 09:58:35,588 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7377 states to 7377 states and 8526 transitions.
[2020-11-25 09:58:35,588 INFO  L751         BuchiCegarLoop]: Abstraction has 7377 states and 8526 transitions.
[2020-11-25 09:58:35,588 INFO  L631         BuchiCegarLoop]: Abstraction has 7377 states and 8526 transitions.
[2020-11-25 09:58:35,588 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 09:58:35,588 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7377 states and 8526 transitions.
[2020-11-25 09:58:35,597 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 09:58:35,597 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:58:35,597 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:58:35,599 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:58:35,599 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_TokenERC200 := false;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]     CALL        call main();
[L7672]              assume null == 0;
[L7673]  CALL        call this := FreshRefGenerator__success();
[L4050]              havoc newRef;
[L4051]              assume Alloc[newRef] == false;
[L4052]              Alloc[newRef] := true;
[L4053]              assume newRef != null;
[L7673]  RET         call this := FreshRefGenerator__success();
[L7674]              assume now >= 0;
[L7675]              assume DType[this] == ZAI;
[L7676]              assume msgvalue_MSG == 0;
[L7677]              gas := gas - 53000;
[L7678]  CALL        call ZAI_ZAI__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]              assume msgsender_MSG != null;
[L4172]              Balance[this] := 0;
[L4186]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  COND FALSE  !(revert)
[L4740]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  COND FALSE  !(revert)
[L4744]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4256]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4238]              assume msgsender_MSG != null;
[L4239]              Balance[this] := 0;
[L4240]              owner_Owned[this] := null;
[L4241]              newOwner_Owned[this] := null;
[L4243]              owner_Owned[this] := msgsender_MSG;
[L4256]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  COND FALSE  !(revert)
[L4744]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4745]  COND FALSE  !(revert)
[L4748]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4400]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]              assume msgsender_MSG != null;
[L4172]              Balance[this] := 0;
[L4186]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  COND FALSE  !(revert)
[L4400]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  COND FALSE  !(revert)
[L4404]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4256]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4238]              assume msgsender_MSG != null;
[L4239]              Balance[this] := 0;
[L4240]              owner_Owned[this] := null;
[L4241]              newOwner_Owned[this] := null;
[L4243]              owner_Owned[this] := msgsender_MSG;
[L4256]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  COND FALSE  !(revert)
[L4404]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4405]  COND FALSE  !(revert)
[L4408]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4358]              assume msgsender_MSG != null;
[L4359]              Balance[this] := 0;
[L4360]              symbol_TokenERC20[this] := 84765109;
[L4361]              name_TokenERC20[this] := 84765109;
[L4362]              decimals_TokenERC20[this] := 0;
[L4363]              _totalSupply_TokenERC20[this] := 0;
[L4364]              balances_TokenERC20[this] := zeroRefintArr();
[L4365]              sum_balances0[this] := 0;
[L4366]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4367]              sum_allowed1[this] := 0;
[L4369]              symbol_TokenERC20[this] := 421243739;
[L4370]              name_TokenERC20[this] := 1342373917;
[L4371]              decimals_TokenERC20[this] := 0;
[L4372]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4373]              _totalSupply_TokenERC20[this] := nonlinearMul(3486784401 % 115792089237316195423570985008687907853269984665640564039457584007913129639936, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4375]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4376]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4377]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4408]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4409]  COND FALSE  !(revert)
[L4748]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4749]  COND FALSE  !(revert)
[L4752]  CALL        call ZAI_ZAI_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4702]              assume msgsender_MSG != null;
[L4703]              Balance[this] := 0;
[L4704]              aSBlock_ZAI[this] := 0;
[L4705]              aEBlock_ZAI[this] := 0;
[L4706]              aCap_ZAI[this] := 0;
[L4707]              aTot_ZAI[this] := 0;
[L4708]              aAmt_ZAI[this] := 0;
[L4709]              sSBlock_ZAI[this] := 0;
[L4710]              sEBlock_ZAI[this] := 0;
[L4711]              sCap_ZAI[this] := 0;
[L4712]              sTot_ZAI[this] := 0;
[L4713]              sChunk_ZAI[this] := 0;
[L4714]              sPrice_ZAI[this] := 0;
[L4752]  RET         call ZAI_ZAI_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4753]  COND FALSE  !(revert)
[L7678]  RET         call ZAI_ZAI__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]              assume !revert && gas >= 0;
[L7682]  CALL        call CorralChoice_ZAI(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != ZAI;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND FALSE  !(choice == 29)
[L7484]  COND FALSE  !(choice == 28)
[L7491]  COND TRUE   choice == 27
[L7492]              gas := gas - 21000;
[L7493]  COND TRUE   gas >= 0
[L7494]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7495]              assume msgvalue_MSG == 0;
[L7496]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s468 != to_s468 && ((tokens_s468 > balances_TokenERC20[this][from_s468] || tokens_s468 > allowed_TokenERC20[this][from_s468][msgsender_MSG]) || balances_TokenERC20[this][to_s468] + tokens_s468 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_TokenERC200 := true;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L1136]              havoc __exception;
[L1137]              revert := false;
[L1138]  COND FALSE  !(__exception)
[L1172]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4551]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4117]  COND FALSE  !(!(b_s45 <= a_s45))
[L4121]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4551]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4552]  COND FALSE  !(revert)
[L4555]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][from_s468];
[L4556]              balances_TokenERC20[this][from_s468] := __var_7;
[L4557]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][from_s468];
[L4558]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4117]  COND FALSE  !(!(b_s45 <= a_s45))
[L4121]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4558]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4559]  COND FALSE  !(revert)
[L4562]              sum_allowed1[from_s468] := sum_allowed1[from_s468] - allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4563]              allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4564]              sum_allowed1[from_s468] := sum_allowed1[from_s468] + allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4565]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4099]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4100]  COND FALSE  !(!(c_s23 >= a_s23))
[L4565]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4566]  COND FALSE  !(revert)
[L4569]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s468];
[L4570]              balances_TokenERC20[this][to_s468] := __var_9;
[L4571]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s468];
[L4572]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4573]              success_s468 := true;
[L1172]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1173]              assume !revert && gas >= 0;
[L7496]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7682]  RET         call CorralChoice_ZAI(this);

Loop:
[L7682]  CALL        call CorralChoice_ZAI(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != ZAI;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND FALSE  !(choice == 29)
[L7484]  COND FALSE  !(choice == 28)
[L7491]  COND TRUE   choice == 27
[L7492]              gas := gas - 21000;
[L7493]  COND TRUE   gas >= 0
[L7494]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7495]              assume msgvalue_MSG == 0;
[L7496]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s468 != to_s468 && ((tokens_s468 > balances_TokenERC20[this][from_s468] || tokens_s468 > allowed_TokenERC20[this][from_s468][msgsender_MSG]) || balances_TokenERC20[this][to_s468] + tokens_s468 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_TokenERC200 := true;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L1136]              havoc __exception;
[L1137]              revert := false;
[L1138]  COND FALSE  !(__exception)
[L1172]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4551]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4117]  COND FALSE  !(!(b_s45 <= a_s45))
[L4121]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4551]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4552]  COND FALSE  !(revert)
[L4555]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][from_s468];
[L4556]              balances_TokenERC20[this][from_s468] := __var_7;
[L4557]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][from_s468];
[L4558]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4117]  COND FALSE  !(!(b_s45 <= a_s45))
[L4121]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4558]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4559]  COND FALSE  !(revert)
[L4562]              sum_allowed1[from_s468] := sum_allowed1[from_s468] - allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4563]              allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4564]              sum_allowed1[from_s468] := sum_allowed1[from_s468] + allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4565]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4099]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4100]  COND FALSE  !(!(c_s23 >= a_s23))
[L4565]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4566]  COND FALSE  !(revert)
[L4569]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s468];
[L4570]              balances_TokenERC20[this][to_s468] := __var_9;
[L4571]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s468];
[L4572]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4573]              success_s468 := true;
[L1172]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1173]              assume !revert && gas >= 0;
[L7496]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7682]  RET         call CorralChoice_ZAI(this);

[2020-11-25 09:58:35,602 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:58:35,603 INFO  L82        PathProgramCache]: Analyzing trace with hash 981668909, now seen corresponding path program 1 times
[2020-11-25 09:58:35,603 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:58:35,621 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:58:35,774 INFO  L134       CoverageAnalysis]: Checked inductivity of 27 backedges. 0 proven. 3 refuted. 0 times theorem prover too weak. 24 trivial. 0 not checked.
[2020-11-25 09:58:35,774 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:58:35,774 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [16] total 16
[2020-11-25 09:58:35,774 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:58:35,775 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 17 interpolants.
[2020-11-25 09:58:35,775 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=38, Invalid=234, Unknown=0, NotChecked=0, Total=272
[2020-11-25 09:58:35,775 INFO  L87              Difference]: Start difference. First operand 7377 states and 8526 transitions. cyclomatic complexity: 1155 Second operand 17 states.
[2020-11-25 09:58:40,802 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:58:40,803 INFO  L93              Difference]: Finished difference Result 7604 states and 8772 transitions.
[2020-11-25 09:58:40,803 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-11-25 09:58:40,803 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7604 states and 8772 transitions.
[2020-11-25 09:58:40,814 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 09:58:40,834 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7604 states to 7604 states and 8772 transitions.
[2020-11-25 09:58:40,834 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 326
[2020-11-25 09:58:40,834 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 326
[2020-11-25 09:58:40,835 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7604 states and 8772 transitions.
[2020-11-25 09:58:40,840 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:58:40,840 INFO  L728         BuchiCegarLoop]: Abstraction has 7604 states and 8772 transitions.
[2020-11-25 09:58:40,846 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7604 states and 8772 transitions.
[2020-11-25 09:58:40,889 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7604 to 7213.
[2020-11-25 09:58:40,890 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7213 states.
[2020-11-25 09:58:40,896 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7213 states to 7213 states and 8302 transitions.
[2020-11-25 09:58:40,897 INFO  L751         BuchiCegarLoop]: Abstraction has 7213 states and 8302 transitions.
[2020-11-25 09:58:40,897 INFO  L631         BuchiCegarLoop]: Abstraction has 7213 states and 8302 transitions.
[2020-11-25 09:58:40,897 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 09:58:40,897 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7213 states and 8302 transitions.
[2020-11-25 09:58:40,903 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:58:40,903 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:58:40,903 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:58:40,905 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:58:40,905 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_TokenERC200 := false;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]     CALL        call main();
[L7672]              assume null == 0;
[L7673]  CALL        call this := FreshRefGenerator__success();
[L4050]              havoc newRef;
[L4051]              assume Alloc[newRef] == false;
[L4052]              Alloc[newRef] := true;
[L4053]              assume newRef != null;
[L7673]  RET         call this := FreshRefGenerator__success();
[L7674]              assume now >= 0;
[L7675]              assume DType[this] == ZAI;
[L7676]              assume msgvalue_MSG == 0;
[L7677]              gas := gas - 53000;
[L7678]  CALL        call ZAI_ZAI__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]              assume msgsender_MSG != null;
[L4172]              Balance[this] := 0;
[L4186]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  COND FALSE  !(revert)
[L4740]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  COND FALSE  !(revert)
[L4744]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4256]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4238]              assume msgsender_MSG != null;
[L4239]              Balance[this] := 0;
[L4240]              owner_Owned[this] := null;
[L4241]              newOwner_Owned[this] := null;
[L4243]              owner_Owned[this] := msgsender_MSG;
[L4256]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  COND FALSE  !(revert)
[L4744]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4745]  COND FALSE  !(revert)
[L4748]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4400]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]              assume msgsender_MSG != null;
[L4172]              Balance[this] := 0;
[L4186]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  COND FALSE  !(revert)
[L4400]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  COND FALSE  !(revert)
[L4404]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4256]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4238]              assume msgsender_MSG != null;
[L4239]              Balance[this] := 0;
[L4240]              owner_Owned[this] := null;
[L4241]              newOwner_Owned[this] := null;
[L4243]              owner_Owned[this] := msgsender_MSG;
[L4256]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  COND FALSE  !(revert)
[L4404]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4405]  COND FALSE  !(revert)
[L4408]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4358]              assume msgsender_MSG != null;
[L4359]              Balance[this] := 0;
[L4360]              symbol_TokenERC20[this] := 84765109;
[L4361]              name_TokenERC20[this] := 84765109;
[L4362]              decimals_TokenERC20[this] := 0;
[L4363]              _totalSupply_TokenERC20[this] := 0;
[L4364]              balances_TokenERC20[this] := zeroRefintArr();
[L4365]              sum_balances0[this] := 0;
[L4366]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4367]              sum_allowed1[this] := 0;
[L4369]              symbol_TokenERC20[this] := 421243739;
[L4370]              name_TokenERC20[this] := 1342373917;
[L4371]              decimals_TokenERC20[this] := 0;
[L4372]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4373]              _totalSupply_TokenERC20[this] := nonlinearMul(3486784401 % 115792089237316195423570985008687907853269984665640564039457584007913129639936, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4375]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4376]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4377]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4408]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4409]  COND FALSE  !(revert)
[L4748]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4749]  COND FALSE  !(revert)
[L4752]  CALL        call ZAI_ZAI_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4702]              assume msgsender_MSG != null;
[L4703]              Balance[this] := 0;
[L4704]              aSBlock_ZAI[this] := 0;
[L4705]              aEBlock_ZAI[this] := 0;
[L4706]              aCap_ZAI[this] := 0;
[L4707]              aTot_ZAI[this] := 0;
[L4708]              aAmt_ZAI[this] := 0;
[L4709]              sSBlock_ZAI[this] := 0;
[L4710]              sEBlock_ZAI[this] := 0;
[L4711]              sCap_ZAI[this] := 0;
[L4712]              sTot_ZAI[this] := 0;
[L4713]              sChunk_ZAI[this] := 0;
[L4714]              sPrice_ZAI[this] := 0;
[L4752]  RET         call ZAI_ZAI_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4753]  COND FALSE  !(revert)
[L7678]  RET         call ZAI_ZAI__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]              assume !revert && gas >= 0;
[L7682]  CALL        call CorralChoice_ZAI(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != ZAI;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND FALSE  !(choice == 29)
[L7484]  COND TRUE   choice == 28
[L7485]              gas := gas - 21000;
[L7486]  COND TRUE   gas >= 0
[L7487]              assume tokens_s409 >= 0 && tokens_s409 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7488]              assume msgvalue_MSG == 0;
[L7489]  CALL        call success_s409 := approve~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, spender_s409, tokens_s409);
[L1056]              havoc __exception;
[L1057]              revert := false;
[L1058]  COND FALSE  !(__exception)
[L1092]  CALL        call success_s409 := approve~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s409, tokens_s409);
[L4508]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_TokenERC20[this][msgsender_MSG][spender_s409];
[L4509]              allowed_TokenERC20[this][msgsender_MSG][spender_s409] := tokens_s409;
[L4510]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_TokenERC20[this][msgsender_MSG][spender_s409];
[L4511]              assert { :EventEmitted "Approval_TokenERC20" } true;
[L4512]              success_s409 := true;
[L1092]  RET         call success_s409 := approve~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s409, tokens_s409);
[L1093]              assume !revert && gas >= 0;
[L7489]  RET         call success_s409 := approve~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, spender_s409, tokens_s409);
[L7682]  RET         call CorralChoice_ZAI(this);
[L7682]  CALL        call CorralChoice_ZAI(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != ZAI;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND FALSE  !(choice == 29)
[L7484]  COND FALSE  !(choice == 28)
[L7491]  COND TRUE   choice == 27
[L7492]              gas := gas - 21000;
[L7493]  COND TRUE   gas >= 0
[L7494]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7495]              assume msgvalue_MSG == 0;
[L7496]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s468 != to_s468 && ((tokens_s468 > balances_TokenERC20[this][from_s468] || tokens_s468 > allowed_TokenERC20[this][from_s468][msgsender_MSG]) || balances_TokenERC20[this][to_s468] + tokens_s468 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_TokenERC200 := true;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L1136]              havoc __exception;
[L1137]              revert := false;
[L1138]  COND FALSE  !(__exception)
[L1172]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4551]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4117]  COND FALSE  !(!(b_s45 <= a_s45))
[L4121]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4551]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4552]  COND FALSE  !(revert)
[L4555]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][from_s468];
[L4556]              balances_TokenERC20[this][from_s468] := __var_7;
[L4557]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][from_s468];
[L4558]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4117]  COND FALSE  !(!(b_s45 <= a_s45))
[L4121]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4558]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4559]  COND FALSE  !(revert)
[L4562]              sum_allowed1[from_s468] := sum_allowed1[from_s468] - allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4563]              allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4564]              sum_allowed1[from_s468] := sum_allowed1[from_s468] + allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4565]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4099]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4100]  COND FALSE  !(!(c_s23 >= a_s23))
[L4565]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4566]  COND FALSE  !(revert)
[L4569]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s468];
[L4570]              balances_TokenERC20[this][to_s468] := __var_9;
[L4571]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s468];
[L4572]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4573]              success_s468 := true;
[L1172]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1173]              assume !revert && gas >= 0;
[L7496]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7682]  RET         call CorralChoice_ZAI(this);

Loop:
[L7682]  CALL        call CorralChoice_ZAI(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != ZAI;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND TRUE   choice == 32
[L7460]              gas := gas - 21000;
[L7461]  COND FALSE  !(gas >= 0)
[L7682]  RET         call CorralChoice_ZAI(this);

[2020-11-25 09:58:40,910 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:58:40,910 INFO  L82        PathProgramCache]: Analyzing trace with hash -770170876, now seen corresponding path program 1 times
[2020-11-25 09:58:40,911 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:58:40,927 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:58:41,105 INFO  L134       CoverageAnalysis]: Checked inductivity of 112 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 112 trivial. 0 not checked.
[2020-11-25 09:58:41,105 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:58:41,105 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [16] imperfect sequences [] total 16
[2020-11-25 09:58:41,105 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:58:41,105 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 17 interpolants.
[2020-11-25 09:58:41,106 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=38, Invalid=234, Unknown=0, NotChecked=0, Total=272
[2020-11-25 09:58:41,106 INFO  L87              Difference]: Start difference. First operand 7213 states and 8302 transitions. cyclomatic complexity: 1096 Second operand 17 states.
[2020-11-25 09:58:46,533 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:58:46,533 INFO  L93              Difference]: Finished difference Result 7409 states and 8518 transitions.
[2020-11-25 09:58:46,533 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 09:58:46,533 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7409 states and 8518 transitions.
[2020-11-25 09:58:46,546 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:58:46,560 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7409 states to 7409 states and 8518 transitions.
[2020-11-25 09:58:46,561 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 275
[2020-11-25 09:58:46,561 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 275
[2020-11-25 09:58:46,561 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7409 states and 8518 transitions.
[2020-11-25 09:58:46,565 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:58:46,565 INFO  L728         BuchiCegarLoop]: Abstraction has 7409 states and 8518 transitions.
[2020-11-25 09:58:46,571 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7409 states and 8518 transitions.
[2020-11-25 09:58:46,606 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7409 to 7276.
[2020-11-25 09:58:46,606 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7276 states.
[2020-11-25 09:58:46,613 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7276 states to 7276 states and 8377 transitions.
[2020-11-25 09:58:46,613 INFO  L751         BuchiCegarLoop]: Abstraction has 7276 states and 8377 transitions.
[2020-11-25 09:58:46,613 INFO  L631         BuchiCegarLoop]: Abstraction has 7276 states and 8377 transitions.
[2020-11-25 09:58:46,613 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 09:58:46,613 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7276 states and 8377 transitions.
[2020-11-25 09:58:46,619 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:58:46,619 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:58:46,619 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:58:46,621 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:58:46,621 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_TokenERC200 := false;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]     CALL        call main();
[L7672]              assume null == 0;
[L7673]  CALL        call this := FreshRefGenerator__success();
[L4050]              havoc newRef;
[L4051]              assume Alloc[newRef] == false;
[L4052]              Alloc[newRef] := true;
[L4053]              assume newRef != null;
[L7673]  RET         call this := FreshRefGenerator__success();
[L7674]              assume now >= 0;
[L7675]              assume DType[this] == ZAI;
[L7676]              assume msgvalue_MSG == 0;
[L7677]              gas := gas - 53000;
[L7678]  CALL        call ZAI_ZAI__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]              assume msgsender_MSG != null;
[L4172]              Balance[this] := 0;
[L4186]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  COND FALSE  !(revert)
[L4740]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  COND FALSE  !(revert)
[L4744]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4256]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4238]              assume msgsender_MSG != null;
[L4239]              Balance[this] := 0;
[L4240]              owner_Owned[this] := null;
[L4241]              newOwner_Owned[this] := null;
[L4243]              owner_Owned[this] := msgsender_MSG;
[L4256]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  COND FALSE  !(revert)
[L4744]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4745]  COND FALSE  !(revert)
[L4748]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4400]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]              assume msgsender_MSG != null;
[L4172]              Balance[this] := 0;
[L4186]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  COND FALSE  !(revert)
[L4400]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  COND FALSE  !(revert)
[L4404]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4256]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4238]              assume msgsender_MSG != null;
[L4239]              Balance[this] := 0;
[L4240]              owner_Owned[this] := null;
[L4241]              newOwner_Owned[this] := null;
[L4243]              owner_Owned[this] := msgsender_MSG;
[L4256]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  COND FALSE  !(revert)
[L4404]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4405]  COND FALSE  !(revert)
[L4408]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4358]              assume msgsender_MSG != null;
[L4359]              Balance[this] := 0;
[L4360]              symbol_TokenERC20[this] := 84765109;
[L4361]              name_TokenERC20[this] := 84765109;
[L4362]              decimals_TokenERC20[this] := 0;
[L4363]              _totalSupply_TokenERC20[this] := 0;
[L4364]              balances_TokenERC20[this] := zeroRefintArr();
[L4365]              sum_balances0[this] := 0;
[L4366]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4367]              sum_allowed1[this] := 0;
[L4369]              symbol_TokenERC20[this] := 421243739;
[L4370]              name_TokenERC20[this] := 1342373917;
[L4371]              decimals_TokenERC20[this] := 0;
[L4372]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4373]              _totalSupply_TokenERC20[this] := nonlinearMul(3486784401 % 115792089237316195423570985008687907853269984665640564039457584007913129639936, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4375]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4376]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4377]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4408]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4409]  COND FALSE  !(revert)
[L4748]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4749]  COND FALSE  !(revert)
[L4752]  CALL        call ZAI_ZAI_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4702]              assume msgsender_MSG != null;
[L4703]              Balance[this] := 0;
[L4704]              aSBlock_ZAI[this] := 0;
[L4705]              aEBlock_ZAI[this] := 0;
[L4706]              aCap_ZAI[this] := 0;
[L4707]              aTot_ZAI[this] := 0;
[L4708]              aAmt_ZAI[this] := 0;
[L4709]              sSBlock_ZAI[this] := 0;
[L4710]              sEBlock_ZAI[this] := 0;
[L4711]              sCap_ZAI[this] := 0;
[L4712]              sTot_ZAI[this] := 0;
[L4713]              sChunk_ZAI[this] := 0;
[L4714]              sPrice_ZAI[this] := 0;
[L4752]  RET         call ZAI_ZAI_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4753]  COND FALSE  !(revert)
[L7678]  RET         call ZAI_ZAI__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]              assume !revert && gas >= 0;
[L7682]  CALL        call CorralChoice_ZAI(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != ZAI;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND FALSE  !(choice == 29)
[L7484]  COND FALSE  !(choice == 28)
[L7491]  COND TRUE   choice == 27
[L7492]              gas := gas - 21000;
[L7493]  COND TRUE   gas >= 0
[L7494]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7495]              assume msgvalue_MSG == 0;
[L7496]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((from_s468 != to_s468 && ((tokens_s468 > balances_TokenERC20[this][from_s468] || tokens_s468 > allowed_TokenERC20[this][from_s468][msgsender_MSG]) || balances_TokenERC20[this][to_s468] + tokens_s468 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L1136]              havoc __exception;
[L1137]              revert := false;
[L1138]  COND FALSE  !(__exception)
[L1172]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4551]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4117]  COND FALSE  !(!(b_s45 <= a_s45))
[L4121]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4551]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4552]  COND FALSE  !(revert)
[L4555]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][from_s468];
[L4556]              balances_TokenERC20[this][from_s468] := __var_7;
[L4557]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][from_s468];
[L4558]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4117]  COND FALSE  !(!(b_s45 <= a_s45))
[L4121]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4558]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4559]  COND FALSE  !(revert)
[L4562]              sum_allowed1[from_s468] := sum_allowed1[from_s468] - allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4563]              allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4564]              sum_allowed1[from_s468] := sum_allowed1[from_s468] + allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4565]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4099]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4100]  COND FALSE  !(!(c_s23 >= a_s23))
[L4565]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4566]  COND FALSE  !(revert)
[L4569]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s468];
[L4570]              balances_TokenERC20[this][to_s468] := __var_9;
[L4571]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s468];
[L4572]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4573]              success_s468 := true;
[L1172]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1173]              assume !revert && gas >= 0;
[L7496]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7682]  RET         call CorralChoice_ZAI(this);
[L7682]  CALL        call CorralChoice_ZAI(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != ZAI;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND FALSE  !(choice == 29)
[L7484]  COND FALSE  !(choice == 28)
[L7491]  COND TRUE   choice == 27
[L7492]              gas := gas - 21000;
[L7493]  COND TRUE   gas >= 0
[L7494]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7495]              assume msgvalue_MSG == 0;
[L7496]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s468 != to_s468 && ((tokens_s468 > balances_TokenERC20[this][from_s468] || tokens_s468 > allowed_TokenERC20[this][from_s468][msgsender_MSG]) || balances_TokenERC20[this][to_s468] + tokens_s468 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_TokenERC200 := true;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L1136]              havoc __exception;
[L1137]              revert := false;
[L1138]  COND FALSE  !(__exception)
[L1172]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4551]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4117]  COND FALSE  !(!(b_s45 <= a_s45))
[L4121]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4551]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4552]  COND FALSE  !(revert)
[L4555]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][from_s468];
[L4556]              balances_TokenERC20[this][from_s468] := __var_7;
[L4557]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][from_s468];
[L4558]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4117]  COND FALSE  !(!(b_s45 <= a_s45))
[L4121]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4558]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4559]  COND FALSE  !(revert)
[L4562]              sum_allowed1[from_s468] := sum_allowed1[from_s468] - allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4563]              allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4564]              sum_allowed1[from_s468] := sum_allowed1[from_s468] + allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4565]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4099]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4100]  COND FALSE  !(!(c_s23 >= a_s23))
[L4565]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4566]  COND FALSE  !(revert)
[L4569]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s468];
[L4570]              balances_TokenERC20[this][to_s468] := __var_9;
[L4571]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s468];
[L4572]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4573]              success_s468 := true;
[L1172]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1173]              assume !revert && gas >= 0;
[L7496]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7682]  RET         call CorralChoice_ZAI(this);

Loop:
[L7682]  CALL        call CorralChoice_ZAI(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != ZAI;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND FALSE  !(choice == 29)
[L7484]  COND FALSE  !(choice == 28)
[L7491]  COND TRUE   choice == 27
[L7492]              gas := gas - 21000;
[L7493]  COND TRUE   gas >= 0
[L7494]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7495]              assume msgvalue_MSG == 0;
[L7496]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s468 != to_s468 && ((tokens_s468 > balances_TokenERC20[this][from_s468] || tokens_s468 > allowed_TokenERC20[this][from_s468][msgsender_MSG]) || balances_TokenERC20[this][to_s468] + tokens_s468 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_TokenERC200 := true;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L1136]              havoc __exception;
[L1137]              revert := false;
[L1138]  COND FALSE  !(__exception)
[L1172]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4551]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4117]  COND FALSE  !(!(b_s45 <= a_s45))
[L4121]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4551]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4552]  COND FALSE  !(revert)
[L4555]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][from_s468];
[L4556]              balances_TokenERC20[this][from_s468] := __var_7;
[L4557]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][from_s468];
[L4558]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4117]  COND FALSE  !(!(b_s45 <= a_s45))
[L4121]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4558]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4559]  COND FALSE  !(revert)
[L4562]              sum_allowed1[from_s468] := sum_allowed1[from_s468] - allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4563]              allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4564]              sum_allowed1[from_s468] := sum_allowed1[from_s468] + allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4565]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4099]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4100]  COND FALSE  !(!(c_s23 >= a_s23))
[L4565]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4566]  COND FALSE  !(revert)
[L4569]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s468];
[L4570]              balances_TokenERC20[this][to_s468] := __var_9;
[L4571]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s468];
[L4572]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4573]              success_s468 := true;
[L1172]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1173]              assume !revert && gas >= 0;
[L7496]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7682]  RET         call CorralChoice_ZAI(this);

[2020-11-25 09:58:46,625 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:58:46,625 INFO  L82        PathProgramCache]: Analyzing trace with hash 457836683, now seen corresponding path program 1 times
[2020-11-25 09:58:46,626 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:58:46,648 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:58:46,936 INFO  L134       CoverageAnalysis]: Checked inductivity of 126 backedges. 6 proven. 3 refuted. 0 times theorem prover too weak. 117 trivial. 0 not checked.
[2020-11-25 09:58:46,936 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:58:46,936 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [19] total 19
[2020-11-25 09:58:46,936 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:58:46,936 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 20 interpolants.
[2020-11-25 09:58:46,937 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=59, Invalid=321, Unknown=0, NotChecked=0, Total=380
[2020-11-25 09:58:46,937 INFO  L87              Difference]: Start difference. First operand 7276 states and 8377 transitions. cyclomatic complexity: 1110 Second operand 20 states.
[2020-11-25 09:58:54,572 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:58:54,572 INFO  L93              Difference]: Finished difference Result 7355 states and 8471 transitions.
[2020-11-25 09:58:54,572 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 18 states. 
[2020-11-25 09:58:54,572 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7355 states and 8471 transitions.
[2020-11-25 09:58:54,584 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:58:54,598 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7355 states to 7355 states and 8471 transitions.
[2020-11-25 09:58:54,599 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 261
[2020-11-25 09:58:54,599 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 261
[2020-11-25 09:58:54,599 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7355 states and 8471 transitions.
[2020-11-25 09:58:54,603 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:58:54,603 INFO  L728         BuchiCegarLoop]: Abstraction has 7355 states and 8471 transitions.
[2020-11-25 09:58:54,608 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7355 states and 8471 transitions.
[2020-11-25 09:58:54,659 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7355 to 7280.
[2020-11-25 09:58:54,659 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7280 states.
[2020-11-25 09:58:54,669 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7280 states to 7280 states and 8389 transitions.
[2020-11-25 09:58:54,669 INFO  L751         BuchiCegarLoop]: Abstraction has 7280 states and 8389 transitions.
[2020-11-25 09:58:54,669 INFO  L631         BuchiCegarLoop]: Abstraction has 7280 states and 8389 transitions.
[2020-11-25 09:58:54,669 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 09:58:54,669 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7280 states and 8389 transitions.
[2020-11-25 09:58:54,678 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:58:54,678 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:58:54,678 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:58:54,680 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:58:54,680 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_TokenERC200 := false;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]     CALL        call main();
[L7672]              assume null == 0;
[L7673]  CALL        call this := FreshRefGenerator__success();
[L4050]              havoc newRef;
[L4051]              assume Alloc[newRef] == false;
[L4052]              Alloc[newRef] := true;
[L4053]              assume newRef != null;
[L7673]  RET         call this := FreshRefGenerator__success();
[L7674]              assume now >= 0;
[L7675]              assume DType[this] == ZAI;
[L7676]              assume msgvalue_MSG == 0;
[L7677]              gas := gas - 53000;
[L7678]  CALL        call ZAI_ZAI__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]              assume msgsender_MSG != null;
[L4172]              Balance[this] := 0;
[L4186]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  COND FALSE  !(revert)
[L4740]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  COND FALSE  !(revert)
[L4744]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4256]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4238]              assume msgsender_MSG != null;
[L4239]              Balance[this] := 0;
[L4240]              owner_Owned[this] := null;
[L4241]              newOwner_Owned[this] := null;
[L4243]              owner_Owned[this] := msgsender_MSG;
[L4256]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  COND FALSE  !(revert)
[L4744]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4745]  COND FALSE  !(revert)
[L4748]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4400]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]              assume msgsender_MSG != null;
[L4172]              Balance[this] := 0;
[L4186]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  COND FALSE  !(revert)
[L4400]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  COND FALSE  !(revert)
[L4404]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4256]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4238]              assume msgsender_MSG != null;
[L4239]              Balance[this] := 0;
[L4240]              owner_Owned[this] := null;
[L4241]              newOwner_Owned[this] := null;
[L4243]              owner_Owned[this] := msgsender_MSG;
[L4256]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  COND FALSE  !(revert)
[L4404]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4405]  COND FALSE  !(revert)
[L4408]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4358]              assume msgsender_MSG != null;
[L4359]              Balance[this] := 0;
[L4360]              symbol_TokenERC20[this] := 84765109;
[L4361]              name_TokenERC20[this] := 84765109;
[L4362]              decimals_TokenERC20[this] := 0;
[L4363]              _totalSupply_TokenERC20[this] := 0;
[L4364]              balances_TokenERC20[this] := zeroRefintArr();
[L4365]              sum_balances0[this] := 0;
[L4366]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4367]              sum_allowed1[this] := 0;
[L4369]              symbol_TokenERC20[this] := 421243739;
[L4370]              name_TokenERC20[this] := 1342373917;
[L4371]              decimals_TokenERC20[this] := 0;
[L4372]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4373]              _totalSupply_TokenERC20[this] := nonlinearMul(3486784401 % 115792089237316195423570985008687907853269984665640564039457584007913129639936, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4375]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4376]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4377]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4408]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4409]  COND FALSE  !(revert)
[L4748]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4749]  COND FALSE  !(revert)
[L4752]  CALL        call ZAI_ZAI_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4702]              assume msgsender_MSG != null;
[L4703]              Balance[this] := 0;
[L4704]              aSBlock_ZAI[this] := 0;
[L4705]              aEBlock_ZAI[this] := 0;
[L4706]              aCap_ZAI[this] := 0;
[L4707]              aTot_ZAI[this] := 0;
[L4708]              aAmt_ZAI[this] := 0;
[L4709]              sSBlock_ZAI[this] := 0;
[L4710]              sEBlock_ZAI[this] := 0;
[L4711]              sCap_ZAI[this] := 0;
[L4712]              sTot_ZAI[this] := 0;
[L4713]              sChunk_ZAI[this] := 0;
[L4714]              sPrice_ZAI[this] := 0;
[L4752]  RET         call ZAI_ZAI_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4753]  COND FALSE  !(revert)
[L7678]  RET         call ZAI_ZAI__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]              assume !revert && gas >= 0;
[L7682]  CALL        call CorralChoice_ZAI(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != ZAI;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND FALSE  !(choice == 29)
[L7484]  COND FALSE  !(choice == 28)
[L7491]  COND FALSE  !(choice == 27)
[L7498]  COND FALSE  !(choice == 26)
[L7504]  COND FALSE  !(choice == 25)
[L7510]  COND FALSE  !(choice == 24)
[L7516]  COND FALSE  !(choice == 23)
[L7522]  COND FALSE  !(choice == 22)
[L7528]  COND FALSE  !(choice == 21)
[L7534]  COND FALSE  !(choice == 20)
[L7540]  COND FALSE  !(choice == 19)
[L7547]  COND FALSE  !(choice == 18)
[L7553]  COND FALSE  !(choice == 17)
[L7559]  COND FALSE  !(choice == 16)
[L7565]  COND FALSE  !(choice == 15)
[L7571]  COND FALSE  !(choice == 14)
[L7577]  COND FALSE  !(choice == 13)
[L7583]  COND FALSE  !(choice == 12)
[L7589]  COND FALSE  !(choice == 11)
[L7595]  COND FALSE  !(choice == 10)
[L7601]  COND FALSE  !(choice == 9)
[L7607]  COND FALSE  !(choice == 8)
[L7613]  COND FALSE  !(choice == 7)
[L7619]  COND FALSE  !(choice == 6)
[L7625]  COND FALSE  !(choice == 5)
[L7631]  COND FALSE  !(choice == 4)
[L7637]  COND FALSE  !(choice == 3)
[L7647]  COND FALSE  !(choice == 2)
[L7658]  COND TRUE   choice == 1
[L7659]              gas := gas - 21000;
[L7660]  COND TRUE   gas >= 0
[L7661]              assume msgvalue_MSG == 0;
[L7662]  CALL        call clearETH_ZAI(this, msgsender_MSG, msgvalue_MSG);
[L2212]              havoc __exception;
[L2213]              revert := false;
[L2214]  COND FALSE  !(__exception)
[L2248]  CALL        call clearETH_ZAI__success(this, msgsender_MSG, msgvalue_MSG);
[L5185]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6828]  COND FALSE  !(!(msgsender_MSG == owner_Owned[this]))
[L5185]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  COND FALSE  !(revert)
[L5189]              _owner_s986 := msgsender_MSG;
[L5190]              __var_31 := gas;
[L5191]  COND FALSE  !(gas > 2300)
[L5194]              __var_31 := __var_31 - gas;
[L5195]              __var_32 := this;
[L5196]  CALL        call __var_33 := send__success(this, _owner_s986, Balance[this]);
[L6769]              havoc __exception;
[L6770]  COND FALSE  !(__exception)
[L6808]  COND TRUE   Balance[from] >= amount
[L6809]  CALL        call FallbackDispatch__success(from, to, amount);
[L5382]  COND FALSE  !(DType[to] == ZAI)
[L5387]  COND FALSE  !(DType[to] == TokenERC20)
[L5392]  COND FALSE  !(DType[to] == Owned)
[L5394]  COND FALSE  !(DType[to] == ApproveAndCallFallBack)
[L5396]  COND FALSE  !(DType[to] == ERC20Interface)
[L5399]  CALL        call Fallback_UnknownType__success(from, to, amount);
[L6117]              assume Balance[from] >= amount;
[L6118]              Balance[from] := Balance[from] - amount;
[L6119]              Balance[to] := Balance[to] + amount;
[L6121]  COND FALSE  !(choice == 0)
[L6125]  COND FALSE  !(gas < 21000)
[L6128]  COND TRUE   DType[from] == ZAI
[L6129]  COND FALSE  !(choice == 32)
[L6138]  COND FALSE  !(choice == 31)
[L6147]  COND FALSE  !(choice == 30)
[L6156]  COND FALSE  !(choice == 29)
[L6166]  COND FALSE  !(choice == 28)
[L6176]  COND TRUE   choice == 27
[L6177]              gas := gas - 21000;
[L6178]  COND TRUE   gas >= 0
[L6179]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6180]              assume msgvalue_MSG == 0;
[L6181]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(from, to, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4551]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4117]  COND FALSE  !(!(b_s45 <= a_s45))
[L4121]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4551]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4552]  COND FALSE  !(revert)
[L4555]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][from_s468];
[L4556]              balances_TokenERC20[this][from_s468] := __var_7;
[L4557]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][from_s468];
[L4558]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4117]  COND FALSE  !(!(b_s45 <= a_s45))
[L4121]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4558]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4559]  COND FALSE  !(revert)
[L4562]              sum_allowed1[from_s468] := sum_allowed1[from_s468] - allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4563]              allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4564]              sum_allowed1[from_s468] := sum_allowed1[from_s468] + allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4565]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4099]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4100]  COND FALSE  !(!(c_s23 >= a_s23))
[L4565]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4566]  COND FALSE  !(revert)
[L4569]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s468];
[L4570]              balances_TokenERC20[this][to_s468] := __var_9;
[L4571]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s468];
[L4572]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4573]              success_s468 := true;
[L6181]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(from, to, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L6182]  COND FALSE  !(revert)
[L5399]  RET         call Fallback_UnknownType__success(from, to, amount);
[L5400]  COND FALSE  !(revert)
[L6809]  RET         call FallbackDispatch__success(from, to, amount);
[L6810]              success := true;
[L6814]              assume !revert && gas >= 0;
[L5196]  RET         call __var_33 := send__success(this, _owner_s986, Balance[this]);
[L5197]  COND FALSE  !(!__var_33)
[L5201]              gas := __var_31 + gas;
[L2248]  RET         call clearETH_ZAI__success(this, msgsender_MSG, msgvalue_MSG);
[L2249]              assume !revert && gas >= 0;
[L7662]  RET         call clearETH_ZAI(this, msgsender_MSG, msgvalue_MSG);
[L7682]  RET         call CorralChoice_ZAI(this);
[L7682]  CALL        call CorralChoice_ZAI(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != ZAI;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND FALSE  !(choice == 29)
[L7484]  COND FALSE  !(choice == 28)
[L7491]  COND TRUE   choice == 27
[L7492]              gas := gas - 21000;
[L7493]  COND TRUE   gas >= 0
[L7494]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7495]              assume msgvalue_MSG == 0;
[L7496]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s468 != to_s468 && ((tokens_s468 > balances_TokenERC20[this][from_s468] || tokens_s468 > allowed_TokenERC20[this][from_s468][msgsender_MSG]) || balances_TokenERC20[this][to_s468] + tokens_s468 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_TokenERC200 := true;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L1136]              havoc __exception;
[L1137]              revert := false;
[L1138]  COND FALSE  !(__exception)
[L1172]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4551]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4117]  COND FALSE  !(!(b_s45 <= a_s45))
[L4121]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4551]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4552]  COND FALSE  !(revert)
[L4555]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][from_s468];
[L4556]              balances_TokenERC20[this][from_s468] := __var_7;
[L4557]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][from_s468];
[L4558]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4117]  COND FALSE  !(!(b_s45 <= a_s45))
[L4121]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4558]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4559]  COND FALSE  !(revert)
[L4562]              sum_allowed1[from_s468] := sum_allowed1[from_s468] - allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4563]              allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4564]              sum_allowed1[from_s468] := sum_allowed1[from_s468] + allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4565]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4099]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4100]  COND FALSE  !(!(c_s23 >= a_s23))
[L4565]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4566]  COND FALSE  !(revert)
[L4569]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s468];
[L4570]              balances_TokenERC20[this][to_s468] := __var_9;
[L4571]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s468];
[L4572]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4573]              success_s468 := true;
[L1172]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1173]              assume !revert && gas >= 0;
[L7496]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7682]  RET         call CorralChoice_ZAI(this);

Loop:
[L7682]  CALL        call CorralChoice_ZAI(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != ZAI;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND TRUE   choice == 32
[L7460]              gas := gas - 21000;
[L7461]  COND FALSE  !(gas >= 0)
[L7682]  RET         call CorralChoice_ZAI(this);

[2020-11-25 09:58:54,686 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:58:54,686 INFO  L82        PathProgramCache]: Analyzing trace with hash -1270238334, now seen corresponding path program 1 times
[2020-11-25 09:58:54,687 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:58:54,717 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:58:54,847 INFO  L134       CoverageAnalysis]: Checked inductivity of 117 backedges. 1 proven. 17 refuted. 0 times theorem prover too weak. 99 trivial. 0 not checked.
[2020-11-25 09:58:54,847 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:58:54,848 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 09:58:54,848 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:58:54,848 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 09:58:54,848 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=14, Invalid=28, Unknown=0, NotChecked=0, Total=42
[2020-11-25 09:58:54,848 INFO  L87              Difference]: Start difference. First operand 7280 states and 8389 transitions. cyclomatic complexity: 1119 Second operand 7 states.
[2020-11-25 09:58:55,992 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:58:55,993 INFO  L93              Difference]: Finished difference Result 9444 states and 10631 transitions.
[2020-11-25 09:58:55,993 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 09:58:55,993 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9444 states and 10631 transitions.
[2020-11-25 09:58:56,010 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 09:58:56,028 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9444 states to 9444 states and 10631 transitions.
[2020-11-25 09:58:56,028 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 259
[2020-11-25 09:58:56,030 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1544
[2020-11-25 09:58:56,030 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9444 states and 10631 transitions.
[2020-11-25 09:58:56,035 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:58:56,035 INFO  L728         BuchiCegarLoop]: Abstraction has 9444 states and 10631 transitions.
[2020-11-25 09:58:56,041 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9444 states and 10631 transitions.
[2020-11-25 09:58:56,086 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9444 to 8956.
[2020-11-25 09:58:56,086 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8956 states.
[2020-11-25 09:58:56,093 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8956 states to 8956 states and 10019 transitions.
[2020-11-25 09:58:56,094 INFO  L751         BuchiCegarLoop]: Abstraction has 8956 states and 10019 transitions.
[2020-11-25 09:58:56,094 INFO  L631         BuchiCegarLoop]: Abstraction has 8956 states and 10019 transitions.
[2020-11-25 09:58:56,094 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 09:58:56,094 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8956 states and 10019 transitions.
[2020-11-25 09:58:56,102 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:58:56,102 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:58:56,102 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:58:56,104 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:58:56,104 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_TokenERC200 := false;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]     CALL        call main();
[L7672]              assume null == 0;
[L7673]  CALL        call this := FreshRefGenerator__success();
[L4050]              havoc newRef;
[L4051]              assume Alloc[newRef] == false;
[L4052]              Alloc[newRef] := true;
[L4053]              assume newRef != null;
[L7673]  RET         call this := FreshRefGenerator__success();
[L7674]              assume now >= 0;
[L7675]              assume DType[this] == ZAI;
[L7676]              assume msgvalue_MSG == 0;
[L7677]              gas := gas - 53000;
[L7678]  CALL        call ZAI_ZAI__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]              assume msgsender_MSG != null;
[L4172]              Balance[this] := 0;
[L4186]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  COND FALSE  !(revert)
[L4740]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  COND FALSE  !(revert)
[L4744]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4256]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4238]              assume msgsender_MSG != null;
[L4239]              Balance[this] := 0;
[L4240]              owner_Owned[this] := null;
[L4241]              newOwner_Owned[this] := null;
[L4243]              owner_Owned[this] := msgsender_MSG;
[L4256]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  COND FALSE  !(revert)
[L4744]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4745]  COND FALSE  !(revert)
[L4748]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4400]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]              assume msgsender_MSG != null;
[L4172]              Balance[this] := 0;
[L4186]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  COND FALSE  !(revert)
[L4400]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  COND FALSE  !(revert)
[L4404]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4256]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4238]              assume msgsender_MSG != null;
[L4239]              Balance[this] := 0;
[L4240]              owner_Owned[this] := null;
[L4241]              newOwner_Owned[this] := null;
[L4243]              owner_Owned[this] := msgsender_MSG;
[L4256]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  COND FALSE  !(revert)
[L4404]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4405]  COND FALSE  !(revert)
[L4408]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4358]              assume msgsender_MSG != null;
[L4359]              Balance[this] := 0;
[L4360]              symbol_TokenERC20[this] := 84765109;
[L4361]              name_TokenERC20[this] := 84765109;
[L4362]              decimals_TokenERC20[this] := 0;
[L4363]              _totalSupply_TokenERC20[this] := 0;
[L4364]              balances_TokenERC20[this] := zeroRefintArr();
[L4365]              sum_balances0[this] := 0;
[L4366]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4367]              sum_allowed1[this] := 0;
[L4369]              symbol_TokenERC20[this] := 421243739;
[L4370]              name_TokenERC20[this] := 1342373917;
[L4371]              decimals_TokenERC20[this] := 0;
[L4372]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4373]              _totalSupply_TokenERC20[this] := nonlinearMul(3486784401 % 115792089237316195423570985008687907853269984665640564039457584007913129639936, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4375]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4376]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4377]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4408]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4409]  COND FALSE  !(revert)
[L4748]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4749]  COND FALSE  !(revert)
[L4752]  CALL        call ZAI_ZAI_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4702]              assume msgsender_MSG != null;
[L4703]              Balance[this] := 0;
[L4704]              aSBlock_ZAI[this] := 0;
[L4705]              aEBlock_ZAI[this] := 0;
[L4706]              aCap_ZAI[this] := 0;
[L4707]              aTot_ZAI[this] := 0;
[L4708]              aAmt_ZAI[this] := 0;
[L4709]              sSBlock_ZAI[this] := 0;
[L4710]              sEBlock_ZAI[this] := 0;
[L4711]              sCap_ZAI[this] := 0;
[L4712]              sTot_ZAI[this] := 0;
[L4713]              sChunk_ZAI[this] := 0;
[L4714]              sPrice_ZAI[this] := 0;
[L4752]  RET         call ZAI_ZAI_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4753]  COND FALSE  !(revert)
[L7678]  RET         call ZAI_ZAI__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]              assume !revert && gas >= 0;
[L7682]  CALL        call CorralChoice_ZAI(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != ZAI;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND FALSE  !(choice == 29)
[L7484]  COND FALSE  !(choice == 28)
[L7491]  COND FALSE  !(choice == 27)
[L7498]  COND FALSE  !(choice == 26)
[L7504]  COND FALSE  !(choice == 25)
[L7510]  COND FALSE  !(choice == 24)
[L7516]  COND FALSE  !(choice == 23)
[L7522]  COND FALSE  !(choice == 22)
[L7528]  COND FALSE  !(choice == 21)
[L7534]  COND FALSE  !(choice == 20)
[L7540]  COND FALSE  !(choice == 19)
[L7547]  COND FALSE  !(choice == 18)
[L7553]  COND FALSE  !(choice == 17)
[L7559]  COND FALSE  !(choice == 16)
[L7565]  COND FALSE  !(choice == 15)
[L7571]  COND FALSE  !(choice == 14)
[L7577]  COND FALSE  !(choice == 13)
[L7583]  COND FALSE  !(choice == 12)
[L7589]  COND FALSE  !(choice == 11)
[L7595]  COND FALSE  !(choice == 10)
[L7601]  COND FALSE  !(choice == 9)
[L7607]  COND FALSE  !(choice == 8)
[L7613]  COND FALSE  !(choice == 7)
[L7619]  COND FALSE  !(choice == 6)
[L7625]  COND FALSE  !(choice == 5)
[L7631]  COND FALSE  !(choice == 4)
[L7637]  COND FALSE  !(choice == 3)
[L7647]  COND FALSE  !(choice == 2)
[L7658]  COND TRUE   choice == 1
[L7659]              gas := gas - 21000;
[L7660]  COND TRUE   gas >= 0
[L7661]              assume msgvalue_MSG == 0;
[L7662]  CALL        call clearETH_ZAI(this, msgsender_MSG, msgvalue_MSG);
[L2212]              havoc __exception;
[L2213]              revert := false;
[L2214]  COND FALSE  !(__exception)
[L2248]  CALL        call clearETH_ZAI__success(this, msgsender_MSG, msgvalue_MSG);
[L5185]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6828]  COND FALSE  !(!(msgsender_MSG == owner_Owned[this]))
[L5185]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  COND FALSE  !(revert)
[L5189]              _owner_s986 := msgsender_MSG;
[L5190]              __var_31 := gas;
[L5191]  COND TRUE   gas > 2300
[L5192]              gas := 2300;
[L5194]              __var_31 := __var_31 - gas;
[L5195]              __var_32 := this;
[L5196]  CALL        call __var_33 := send__success(this, _owner_s986, Balance[this]);
[L6769]              havoc __exception;
[L6770]  COND FALSE  !(__exception)
[L6808]  COND TRUE   Balance[from] >= amount
[L6809]  CALL        call FallbackDispatch__success(from, to, amount);
[L5382]  COND FALSE  !(DType[to] == ZAI)
[L5387]  COND FALSE  !(DType[to] == TokenERC20)
[L5392]  COND FALSE  !(DType[to] == Owned)
[L5394]  COND FALSE  !(DType[to] == ApproveAndCallFallBack)
[L5396]  COND FALSE  !(DType[to] == ERC20Interface)
[L5399]  CALL        call Fallback_UnknownType__success(from, to, amount);
[L6117]              assume Balance[from] >= amount;
[L6118]              Balance[from] := Balance[from] - amount;
[L6119]              Balance[to] := Balance[to] + amount;
[L6121]  COND FALSE  !(choice == 0)
[L6125]  COND FALSE  !(gas < 21000)
[L6128]  COND TRUE   DType[from] == ZAI
[L6129]  COND FALSE  !(choice == 32)
[L6138]  COND FALSE  !(choice == 31)
[L6147]  COND FALSE  !(choice == 30)
[L6156]  COND FALSE  !(choice == 29)
[L6166]  COND FALSE  !(choice == 28)
[L6176]  COND TRUE   choice == 27
[L6177]              gas := gas - 21000;
[L6178]  COND TRUE   gas >= 0
[L6179]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6180]              assume msgvalue_MSG == 0;
[L6181]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(from, to, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4551]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4117]  COND FALSE  !(!(b_s45 <= a_s45))
[L4121]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4551]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4552]  COND FALSE  !(revert)
[L4555]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][from_s468];
[L4556]              balances_TokenERC20[this][from_s468] := __var_7;
[L4557]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][from_s468];
[L4558]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4117]  COND FALSE  !(!(b_s45 <= a_s45))
[L4121]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4558]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4559]  COND FALSE  !(revert)
[L4562]              sum_allowed1[from_s468] := sum_allowed1[from_s468] - allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4563]              allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4564]              sum_allowed1[from_s468] := sum_allowed1[from_s468] + allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4565]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4099]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4100]  COND FALSE  !(!(c_s23 >= a_s23))
[L4565]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4566]  COND FALSE  !(revert)
[L4569]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s468];
[L4570]              balances_TokenERC20[this][to_s468] := __var_9;
[L4571]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s468];
[L4572]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4573]              success_s468 := true;
[L6181]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(from, to, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L6182]  COND FALSE  !(revert)
[L5399]  RET         call Fallback_UnknownType__success(from, to, amount);
[L5400]  COND FALSE  !(revert)
[L6809]  RET         call FallbackDispatch__success(from, to, amount);
[L6810]              success := true;
[L6814]              assume !revert && gas >= 0;
[L5196]  RET         call __var_33 := send__success(this, _owner_s986, Balance[this]);
[L5197]  COND FALSE  !(!__var_33)
[L5201]              gas := __var_31 + gas;
[L2248]  RET         call clearETH_ZAI__success(this, msgsender_MSG, msgvalue_MSG);
[L2249]              assume !revert && gas >= 0;
[L7662]  RET         call clearETH_ZAI(this, msgsender_MSG, msgvalue_MSG);
[L7682]  RET         call CorralChoice_ZAI(this);
[L7682]  CALL        call CorralChoice_ZAI(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != ZAI;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND FALSE  !(choice == 29)
[L7484]  COND FALSE  !(choice == 28)
[L7491]  COND TRUE   choice == 27
[L7492]              gas := gas - 21000;
[L7493]  COND TRUE   gas >= 0
[L7494]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7495]              assume msgvalue_MSG == 0;
[L7496]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s468 != to_s468 && ((tokens_s468 > balances_TokenERC20[this][from_s468] || tokens_s468 > allowed_TokenERC20[this][from_s468][msgsender_MSG]) || balances_TokenERC20[this][to_s468] + tokens_s468 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_TokenERC200 := true;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L1136]              havoc __exception;
[L1137]              revert := false;
[L1138]  COND FALSE  !(__exception)
[L1172]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4551]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4117]  COND FALSE  !(!(b_s45 <= a_s45))
[L4121]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4551]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4552]  COND FALSE  !(revert)
[L4555]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][from_s468];
[L4556]              balances_TokenERC20[this][from_s468] := __var_7;
[L4557]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][from_s468];
[L4558]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4117]  COND FALSE  !(!(b_s45 <= a_s45))
[L4121]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4558]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4559]  COND FALSE  !(revert)
[L4562]              sum_allowed1[from_s468] := sum_allowed1[from_s468] - allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4563]              allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4564]              sum_allowed1[from_s468] := sum_allowed1[from_s468] + allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4565]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4099]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4100]  COND FALSE  !(!(c_s23 >= a_s23))
[L4565]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4566]  COND FALSE  !(revert)
[L4569]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s468];
[L4570]              balances_TokenERC20[this][to_s468] := __var_9;
[L4571]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s468];
[L4572]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4573]              success_s468 := true;
[L1172]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1173]              assume !revert && gas >= 0;
[L7496]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7682]  RET         call CorralChoice_ZAI(this);

Loop:
[L7682]  CALL        call CorralChoice_ZAI(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != ZAI;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND TRUE   choice == 31
[L7466]              gas := gas - 21000;
[L7467]  COND TRUE   gas >= 0
[L7468]              assume msgvalue_MSG == 0;
[L7469]  CALL        call balance_s338 := balanceOf~address_TokenERC20(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s338);
[L900]               havoc __exception;
[L901]               revert := false;
[L902]   COND FALSE  !(__exception)
[L936]   CALL        call balance_s338 := balanceOf~address_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s338);
[L4448]              balance_s338 := balances_TokenERC20[this][tokenOwner_s338];
[L936]   RET         call balance_s338 := balanceOf~address_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s338);
[L937]               assume !revert && gas >= 0;
[L7469]  RET         call balance_s338 := balanceOf~address_TokenERC20(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s338);
[L7682]  RET         call CorralChoice_ZAI(this);

[2020-11-25 09:58:56,108 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:58:56,108 INFO  L82        PathProgramCache]: Analyzing trace with hash 857575111, now seen corresponding path program 1 times
[2020-11-25 09:58:56,109 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:58:56,124 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:58:56,211 INFO  L134       CoverageAnalysis]: Checked inductivity of 117 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 116 trivial. 0 not checked.
[2020-11-25 09:58:56,211 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:58:56,211 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 09:58:56,211 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:58:56,211 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 09:58:56,211 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=19, Unknown=0, NotChecked=0, Total=30
[2020-11-25 09:58:56,212 INFO  L87              Difference]: Start difference. First operand 8956 states and 10019 transitions. cyclomatic complexity: 1073 Second operand 6 states.
[2020-11-25 09:58:57,038 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:58:57,038 INFO  L93              Difference]: Finished difference Result 5399 states and 5747 transitions.
[2020-11-25 09:58:57,038 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-25 09:58:57,038 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5399 states and 5747 transitions.
[2020-11-25 09:58:57,047 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 09:58:57,056 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5399 states to 5399 states and 5747 transitions.
[2020-11-25 09:58:57,056 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1528
[2020-11-25 09:58:57,057 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1968
[2020-11-25 09:58:57,057 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5399 states and 5747 transitions.
[2020-11-25 09:58:57,060 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:58:57,060 INFO  L728         BuchiCegarLoop]: Abstraction has 5399 states and 5747 transitions.
[2020-11-25 09:58:57,064 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5399 states and 5747 transitions.
[2020-11-25 09:58:57,084 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5399 to 5223.
[2020-11-25 09:58:57,084 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5223 states.
[2020-11-25 09:58:57,089 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5223 states to 5223 states and 5537 transitions.
[2020-11-25 09:58:57,089 INFO  L751         BuchiCegarLoop]: Abstraction has 5223 states and 5537 transitions.
[2020-11-25 09:58:57,089 INFO  L631         BuchiCegarLoop]: Abstraction has 5223 states and 5537 transitions.
[2020-11-25 09:58:57,089 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 09:58:57,089 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5223 states and 5537 transitions.
[2020-11-25 09:58:57,095 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:58:57,095 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:58:57,095 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:58:57,096 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:58:57,096 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_TokenERC200 := false;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]     CALL        call main();
[L7672]              assume null == 0;
[L7673]  CALL        call this := FreshRefGenerator__success();
[L4050]              havoc newRef;
[L4051]              assume Alloc[newRef] == false;
[L4052]              Alloc[newRef] := true;
[L4053]              assume newRef != null;
[L7673]  RET         call this := FreshRefGenerator__success();
[L7674]              assume now >= 0;
[L7675]              assume DType[this] == ZAI;
[L7676]              assume msgvalue_MSG == 0;
[L7677]              gas := gas - 53000;
[L7678]  CALL        call ZAI_ZAI__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]              assume msgsender_MSG != null;
[L4172]              Balance[this] := 0;
[L4186]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  COND FALSE  !(revert)
[L4740]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  COND FALSE  !(revert)
[L4744]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4256]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4238]              assume msgsender_MSG != null;
[L4239]              Balance[this] := 0;
[L4240]              owner_Owned[this] := null;
[L4241]              newOwner_Owned[this] := null;
[L4243]              owner_Owned[this] := msgsender_MSG;
[L4256]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  COND FALSE  !(revert)
[L4744]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4745]  COND FALSE  !(revert)
[L4748]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4400]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]              assume msgsender_MSG != null;
[L4172]              Balance[this] := 0;
[L4186]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  COND FALSE  !(revert)
[L4400]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  COND FALSE  !(revert)
[L4404]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4256]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4238]              assume msgsender_MSG != null;
[L4239]              Balance[this] := 0;
[L4240]              owner_Owned[this] := null;
[L4241]              newOwner_Owned[this] := null;
[L4243]              owner_Owned[this] := msgsender_MSG;
[L4256]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  COND FALSE  !(revert)
[L4404]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4405]  COND FALSE  !(revert)
[L4408]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4358]              assume msgsender_MSG != null;
[L4359]              Balance[this] := 0;
[L4360]              symbol_TokenERC20[this] := 84765109;
[L4361]              name_TokenERC20[this] := 84765109;
[L4362]              decimals_TokenERC20[this] := 0;
[L4363]              _totalSupply_TokenERC20[this] := 0;
[L4364]              balances_TokenERC20[this] := zeroRefintArr();
[L4365]              sum_balances0[this] := 0;
[L4366]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4367]              sum_allowed1[this] := 0;
[L4369]              symbol_TokenERC20[this] := 421243739;
[L4370]              name_TokenERC20[this] := 1342373917;
[L4371]              decimals_TokenERC20[this] := 0;
[L4372]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4373]              _totalSupply_TokenERC20[this] := nonlinearMul(3486784401 % 115792089237316195423570985008687907853269984665640564039457584007913129639936, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4375]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4376]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4377]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4408]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4409]  COND FALSE  !(revert)
[L4748]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4749]  COND FALSE  !(revert)
[L4752]  CALL        call ZAI_ZAI_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4702]              assume msgsender_MSG != null;
[L4703]              Balance[this] := 0;
[L4704]              aSBlock_ZAI[this] := 0;
[L4705]              aEBlock_ZAI[this] := 0;
[L4706]              aCap_ZAI[this] := 0;
[L4707]              aTot_ZAI[this] := 0;
[L4708]              aAmt_ZAI[this] := 0;
[L4709]              sSBlock_ZAI[this] := 0;
[L4710]              sEBlock_ZAI[this] := 0;
[L4711]              sCap_ZAI[this] := 0;
[L4712]              sTot_ZAI[this] := 0;
[L4713]              sChunk_ZAI[this] := 0;
[L4714]              sPrice_ZAI[this] := 0;
[L4752]  RET         call ZAI_ZAI_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4753]  COND FALSE  !(revert)
[L7678]  RET         call ZAI_ZAI__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]              assume !revert && gas >= 0;
[L7682]  CALL        call CorralChoice_ZAI(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != ZAI;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND FALSE  !(choice == 29)
[L7484]  COND TRUE   choice == 28
[L7485]              gas := gas - 21000;
[L7486]  COND TRUE   gas >= 0
[L7487]              assume tokens_s409 >= 0 && tokens_s409 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7488]              assume msgvalue_MSG == 0;
[L7489]  CALL        call success_s409 := approve~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, spender_s409, tokens_s409);
[L1056]              havoc __exception;
[L1057]              revert := false;
[L1058]  COND FALSE  !(__exception)
[L1092]  CALL        call success_s409 := approve~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s409, tokens_s409);
[L4508]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_TokenERC20[this][msgsender_MSG][spender_s409];
[L4509]              allowed_TokenERC20[this][msgsender_MSG][spender_s409] := tokens_s409;
[L4510]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_TokenERC20[this][msgsender_MSG][spender_s409];
[L4511]              assert { :EventEmitted "Approval_TokenERC20" } true;
[L4512]              success_s409 := true;
[L1092]  RET         call success_s409 := approve~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s409, tokens_s409);
[L1093]              assume !revert && gas >= 0;
[L7489]  RET         call success_s409 := approve~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, spender_s409, tokens_s409);
[L7682]  RET         call CorralChoice_ZAI(this);
[L7682]  CALL        call CorralChoice_ZAI(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != ZAI;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND TRUE   choice == 29
[L7478]              gas := gas - 21000;
[L7479]  COND TRUE   gas >= 0
[L7480]              assume tokens_s381 >= 0 && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7481]              assume msgvalue_MSG == 0;
[L7482]  CALL        call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L978]               havoc __exception;
[L979]               revert := false;
[L980]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L4478]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4117]  COND FALSE  !(!(b_s45 <= a_s45))
[L4121]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4478]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4479]  COND FALSE  !(revert)
[L4482]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][msgsender_MSG];
[L4483]              balances_TokenERC20[this][msgsender_MSG] := __var_5;
[L4484]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][msgsender_MSG];
[L4485]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s381], tokens_s381);
[L4099]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4100]  COND FALSE  !(!(c_s23 >= a_s23))
[L4485]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s381], tokens_s381);
[L4486]  COND FALSE  !(revert)
[L4489]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s381];
[L4490]              balances_TokenERC20[this][to_s381] := __var_6;
[L4491]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s381];
[L4492]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4493]              success_s381 := true;
[L1014]  RET         call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L1015]              assume !revert && gas >= 0;
[L7482]  RET         call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L7682]  RET         call CorralChoice_ZAI(this);
[L7682]  CALL        call CorralChoice_ZAI(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != ZAI;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND FALSE  !(choice == 29)
[L7484]  COND FALSE  !(choice == 28)
[L7491]  COND TRUE   choice == 27
[L7492]              gas := gas - 21000;
[L7493]  COND TRUE   gas >= 0
[L7494]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7495]              assume msgvalue_MSG == 0;
[L7496]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s468 != to_s468 && ((tokens_s468 > balances_TokenERC20[this][from_s468] || tokens_s468 > allowed_TokenERC20[this][from_s468][msgsender_MSG]) || balances_TokenERC20[this][to_s468] + tokens_s468 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_TokenERC200 := true;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L1136]              havoc __exception;
[L1137]              revert := false;
[L1138]  COND FALSE  !(__exception)
[L1172]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4551]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4117]  COND FALSE  !(!(b_s45 <= a_s45))
[L4121]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4551]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4552]  COND FALSE  !(revert)
[L4555]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][from_s468];
[L4556]              balances_TokenERC20[this][from_s468] := __var_7;
[L4557]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][from_s468];
[L4558]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4117]  COND FALSE  !(!(b_s45 <= a_s45))
[L4121]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4558]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4559]  COND FALSE  !(revert)
[L4562]              sum_allowed1[from_s468] := sum_allowed1[from_s468] - allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4563]              allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4564]              sum_allowed1[from_s468] := sum_allowed1[from_s468] + allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4565]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4099]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4100]  COND FALSE  !(!(c_s23 >= a_s23))
[L4565]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4566]  COND FALSE  !(revert)
[L4569]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s468];
[L4570]              balances_TokenERC20[this][to_s468] := __var_9;
[L4571]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s468];
[L4572]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4573]              success_s468 := true;
[L1172]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1173]              assume !revert && gas >= 0;
[L7496]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7682]  RET         call CorralChoice_ZAI(this);

Loop:
[L7682]  CALL        call CorralChoice_ZAI(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != ZAI;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND FALSE  !(choice == 29)
[L7484]  COND FALSE  !(choice == 28)
[L7491]  COND TRUE   choice == 27
[L7492]              gas := gas - 21000;
[L7493]  COND TRUE   gas >= 0
[L7494]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7495]              assume msgvalue_MSG == 0;
[L7496]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s468 != to_s468 && ((tokens_s468 > balances_TokenERC20[this][from_s468] || tokens_s468 > allowed_TokenERC20[this][from_s468][msgsender_MSG]) || balances_TokenERC20[this][to_s468] + tokens_s468 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_TokenERC200 := true;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L1136]              havoc __exception;
[L1137]              revert := false;
[L1138]  COND FALSE  !(__exception)
[L1172]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4551]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4117]  COND FALSE  !(!(b_s45 <= a_s45))
[L4121]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4551]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4552]  COND FALSE  !(revert)
[L4555]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][from_s468];
[L4556]              balances_TokenERC20[this][from_s468] := __var_7;
[L4557]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][from_s468];
[L4558]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4117]  COND FALSE  !(!(b_s45 <= a_s45))
[L4121]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4558]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4559]  COND FALSE  !(revert)
[L4562]              sum_allowed1[from_s468] := sum_allowed1[from_s468] - allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4563]              allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4564]              sum_allowed1[from_s468] := sum_allowed1[from_s468] + allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4565]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4099]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4100]  COND FALSE  !(!(c_s23 >= a_s23))
[L4565]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4566]  COND FALSE  !(revert)
[L4569]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s468];
[L4570]              balances_TokenERC20[this][to_s468] := __var_9;
[L4571]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s468];
[L4572]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4573]              success_s468 := true;
[L1172]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1173]              assume !revert && gas >= 0;
[L7496]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7682]  RET         call CorralChoice_ZAI(this);

[2020-11-25 09:58:57,100 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:58:57,100 INFO  L82        PathProgramCache]: Analyzing trace with hash 5592442, now seen corresponding path program 1 times
[2020-11-25 09:58:57,101 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:58:57,121 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:58:57,272 INFO  L134       CoverageAnalysis]: Checked inductivity of 283 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 283 trivial. 0 not checked.
[2020-11-25 09:58:57,272 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:58:57,272 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [15] imperfect sequences [] total 15
[2020-11-25 09:58:57,272 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:58:57,272 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 15 interpolants.
[2020-11-25 09:58:57,273 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=32, Invalid=178, Unknown=0, NotChecked=0, Total=210
[2020-11-25 09:58:57,273 INFO  L87              Difference]: Start difference. First operand 5223 states and 5537 transitions. cyclomatic complexity: 320 Second operand 15 states.
[2020-11-25 09:58:58,966 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:58:58,966 INFO  L93              Difference]: Finished difference Result 2817 states and 2993 transitions.
[2020-11-25 09:58:58,966 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-11-25 09:58:58,966 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2817 states and 2993 transitions.
[2020-11-25 09:58:58,970 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 09:58:58,970 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2817 states to 0 states and 0 transitions.
[2020-11-25 09:58:58,970 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 09:58:58,970 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 09:58:58,970 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 09:58:58,970 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:58:58,970 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 09:58:58,970 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 09:58:58,970 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 09:58:58,970 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 09:58:58,970 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 09:58:58,970 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 09:58:58,970 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 09:58:58,973 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 09:58:58 BasicIcfg
[2020-11-25 09:58:58,973 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 09:58:58,974 INFO  L168              Benchmark]: Toolchain (without parser) took 29209.00 ms. Allocated memory was 1.0 GB in the beginning and 2.5 GB in the end (delta: 1.4 GB). Free memory was 929.8 MB in the beginning and 1.9 GB in the end (delta: -947.0 MB). Peak memory consumption was 496.9 MB. Max. memory is 15.3 GB.
[2020-11-25 09:58:58,974 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.32 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 09:58:58,975 INFO  L168              Benchmark]: Boogie Preprocessor took 143.51 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 913.7 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-25 09:58:58,976 INFO  L168              Benchmark]: UtopiaSpecLang took 74.21 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 903.0 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 09:58:58,976 INFO  L168              Benchmark]: Boogie Printer took 22.64 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 897.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 09:58:58,976 INFO  L168              Benchmark]: RCFGBuilder took 1041.17 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 64.5 MB). Free memory was 897.6 MB in the beginning and 1.0 GB in the end (delta: -111.5 MB). Peak memory consumption was 187.3 MB. Max. memory is 15.3 GB.
[2020-11-25 09:58:58,976 INFO  L168              Benchmark]: UtopiaLTL2Aut took 38.85 ms. Allocated memory is still 1.1 GB. Free memory was 1.0 GB in the beginning and 1.0 GB in the end (delta: 6.9 MB). Peak memory consumption was 6.9 MB. Max. memory is 15.3 GB.
[2020-11-25 09:58:58,977 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1783.98 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 159.9 MB). Free memory was 1.0 GB in the beginning and 909.3 MB in the end (delta: 92.9 MB). Peak memory consumption was 515.3 MB. Max. memory is 15.3 GB.
[2020-11-25 09:58:58,977 INFO  L168              Benchmark]: BlockEncodingV2 took 179.14 ms. Allocated memory is still 1.3 GB. Free memory was 909.3 MB in the beginning and 821.1 MB in the end (delta: 88.1 MB). Peak memory consumption was 88.1 MB. Max. memory is 15.3 GB.
[2020-11-25 09:58:58,977 INFO  L168              Benchmark]: BuchiAutomizer took 25922.45 ms. Allocated memory was 1.3 GB in the beginning and 2.5 GB in the end (delta: 1.2 GB). Free memory was 821.1 MB in the beginning and 1.9 GB in the end (delta: -1.1 GB). Peak memory consumption was 163.8 MB. Max. memory is 15.3 GB.
[2020-11-25 09:58:58,980 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    8356 locations, 14605 edges
  - StatisticsResult: Encoded RCFG
    8268 locations, 14396 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.32 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 143.51 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 913.7 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 74.21 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 903.0 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 22.64 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 897.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1041.17 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 64.5 MB). Free memory was 897.6 MB in the beginning and 1.0 GB in the end (delta: -111.5 MB). Peak memory consumption was 187.3 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 38.85 ms. Allocated memory is still 1.1 GB. Free memory was 1.0 GB in the beginning and 1.0 GB in the end (delta: 6.9 MB). Peak memory consumption was 6.9 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1783.98 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 159.9 MB). Free memory was 1.0 GB in the beginning and 909.3 MB in the end (delta: 92.9 MB). Peak memory consumption was 515.3 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 179.14 ms. Allocated memory is still 1.3 GB. Free memory was 909.3 MB in the beginning and 821.1 MB in the end (delta: 88.1 MB). Peak memory consumption was 88.1 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 25922.45 ms. Allocated memory was 1.3 GB in the beginning and 2.5 GB in the end (delta: 1.2 GB). Free memory was 821.1 MB in the beginning and 1.9 GB in the end (delta: -1.1 GB). Peak memory consumption was 163.8 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    3565 locations, 4640 edges
  - StatisticsResult: BuchiProgram size
    8356 locations, 14605 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 9 terminating modules (9 trivial, 0 deterministic, 0 nondeterministic). 9 modules have a trivial ranking function, the largest among these consists of 20 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 25.8s and 10 iterations.  TraceHistogramMax:3. Analysis of lassos took 1.7s. Construction of modules took 17.6s. BÃ¼chi inclusion checks took 5.2s. Highest rank in rank-based complementation 0. Minimization of det autom 9. Minimization of nondet autom 0. Automata minimization 0.5s AutomataMinimizationTime, 8 MinimizatonAttempts, 2638 StatesRemovedByMinimization, 7 NontrivialMinimizations. Non-live state removal took 0.3s Buchi closure took 0.0s. Biggest automaton had 8956 states and ocurred in iteration 7.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 63651 SDtfs, 70930 SDslu, 113673 SDs, 0 SdLazy, 266379 SolverSat, 9919 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 17.6s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU9 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transferFrom_TokenERC200) ==> ( <>(fail_transferFrom_TokenERC200) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
