This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 01:13:32,974 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 01:13:32,975 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 01:13:32,987 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 01:13:32,987 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 01:13:32,988 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 01:13:32,989 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 01:13:32,990 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 01:13:32,992 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 01:13:32,992 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 01:13:32,993 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 01:13:32,993 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 01:13:32,994 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 01:13:32,995 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 01:13:32,996 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 01:13:32,996 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 01:13:32,997 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 01:13:32,998 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 01:13:33,000 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 01:13:33,001 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 01:13:33,002 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 01:13:33,003 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 01:13:33,004 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 01:13:33,005 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 01:13:33,005 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 01:13:33,005 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 01:13:33,006 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 01:13:33,006 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 01:13:33,006 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 01:13:33,007 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 01:13:33,007 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 01:13:33,008 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 01:13:33,008 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 01:13:33,009 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 01:13:33,009 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 01:13:33,010 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 01:13:33,010 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 01:13:33,010 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 01:13:33,011 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 01:13:33,011 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 01:13:33,012 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 01:13:33,012 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 01:13:33,020 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 01:13:33,020 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 01:13:33,021 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 01:13:33,021 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 01:13:33,021 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 01:13:33,021 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 01:13:33,021 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 01:13:33,021 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 01:13:33,021 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 01:13:33,022 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 01:13:33,022 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 01:13:33,022 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 01:13:33,022 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 01:13:33,022 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 01:13:33,022 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 01:13:33,022 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 01:13:33,022 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 01:13:33,023 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 01:13:33,023 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 01:13:33,023 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 01:13:33,023 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 01:13:33,023 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 01:13:33,023 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 01:13:33,023 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 01:13:33,023 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 01:13:33,024 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 01:13:33,045 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 01:13:33,056 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 01:13:33,059 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 01:13:33,060 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 01:13:33,060 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 01:13:33,061 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/BNS_0x695106ad73f506f9d0a9650a78019a93149ae07c_transfer-self.bpl
[2020-11-25 01:13:33,061 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/BNS_0x695106ad73f506f9d0a9650a78019a93149ae07c_transfer-self.bpl'
[2020-11-25 01:13:33,144 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 01:13:33,145 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 01:13:33,145 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 01:13:33,146 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 01:13:33,146 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 01:13:33,162 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "BNS_0x695106ad73f506f9d0a9650a78019a93149ae07c_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:13:33" (1/1) ...
[2020-11-25 01:13:33,164 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "BNS_0x695106ad73f506f9d0a9650a78019a93149ae07c_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:13:33" (1/1) ...
[2020-11-25 01:13:33,205 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "BNS_0x695106ad73f506f9d0a9650a78019a93149ae07c_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:13:33" (1/1) ...
[2020-11-25 01:13:33,206 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "BNS_0x695106ad73f506f9d0a9650a78019a93149ae07c_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:13:33" (1/1) ...
[2020-11-25 01:13:33,228 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "BNS_0x695106ad73f506f9d0a9650a78019a93149ae07c_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:13:33" (1/1) ...
[2020-11-25 01:13:33,240 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "BNS_0x695106ad73f506f9d0a9650a78019a93149ae07c_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:13:33" (1/1) ...
[2020-11-25 01:13:33,248 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "BNS_0x695106ad73f506f9d0a9650a78019a93149ae07c_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:13:33" (1/1) ...
[2020-11-25 01:13:33,257 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 01:13:33,258 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 01:13:33,258 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 01:13:33,260 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 01:13:33,264 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "BNS_0x695106ad73f506f9d0a9650a78019a93149ae07c_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:13:33" (1/1) ...
[2020-11-25 01:13:33,279 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowed_ERC20[this] == old(_allowed_ERC20[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 01:13:33,285 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowed_ERC20[this] == old(_allowed_ERC20[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 01:13:33,292 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowed_ERC20[this] == old(_allowed_ERC20[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 01:13:33,299 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==to_s268 && value_s268<=_balances_ERC20[this][msg.sender] ) && value_s268>=0 ) && value_s268<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][to_s268]>=0 ) && _balances_ERC20[this][to_s268]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][msg.sender]>=0 ) && _balances_ERC20[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IdentifierExpression[to_s268,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]],BinaryExpression[COMPLEQ,IdentifierExpression[value_s268,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[value_s268,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[value_s268,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[to_s268,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[to_s268,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 01:13:33,301 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( __ret_0_==true && _totalSupply_ERC20[this]==( old(_totalSupply_ERC20[this]) ) ) && _balances_ERC20[this]==( old(_balances_ERC20[this]) ) ) && _allowed_ERC20[this]==( old(_allowed_ERC20[this]) ) ) && _name_ERC20Detailed[this]==( old(_name_ERC20Detailed[this]) ) ) && _symbol_ERC20Detailed[this]==( old(_symbol_ERC20Detailed[this]) ) ) && _decimals_ERC20Detailed[this]==( old(_decimals_ERC20Detailed[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_ERC20>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]]
[2020-11-25 01:13:33,307 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowed_ERC20[this] == old(_allowed_ERC20[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 01:13:33,307 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_ERC200) ==> ( <>AP(success_transfer_ERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 01:13:33,316 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:13:33 PropertyContainer
[2020-11-25 01:13:33,316 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 01:13:33,317 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 01:13:33,317 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 01:13:33,317 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 01:13:33,318 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "BNS_0x695106ad73f506f9d0a9650a78019a93149ae07c_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:13:33" (1/2) ...
[2020-11-25 01:13:33,318 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 01:13:33,318 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 01:13:33,334 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:13:33" (2/2) ...
[2020-11-25 01:13:33,334 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 01:13:33,335 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 01:13:33,335 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 01:13:33,335 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 01:13:33,335 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "BNS_0x695106ad73f506f9d0a9650a78019a93149ae07c_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:13:33" (1/2) ...
[2020-11-25 01:13:33,395 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 01:13:33,395 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 01:13:33,395 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 01:13:33,395 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 01:13:33,396 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 01:13:33,396 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 01:13:33,396 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 01:13:33,396 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 01:13:33,396 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 01:13:33,396 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 01:13:33,396 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 01:13:33,396 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 01:13:33,396 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 01:13:33,396 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 01:13:33,396 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 01:13:33,397 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 01:13:33,397 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 01:13:33,398 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 01:13:33,398 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 01:13:33,398 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 01:13:33,398 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 01:13:33,398 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 01:13:33,398 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 01:13:33,398 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 01:13:33,398 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 01:13:33,398 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 01:13:33,398 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 01:13:33,398 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 01:13:33,399 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 01:13:33,399 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 01:13:33,399 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 01:13:33,399 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 01:13:33,399 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 01:13:33,399 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 01:13:33,399 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 01:13:33,399 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 01:13:33,399 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 01:13:33,399 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 01:13:33,399 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 01:13:33,400 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 01:13:33,400 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 01:13:33,400 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 01:13:33,400 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 01:13:33,400 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 01:13:33,400 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 01:13:33,400 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 01:13:33,400 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 01:13:33,400 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 01:13:33,401 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 01:13:33,401 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 01:13:33,401 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 01:13:33,401 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__success
[2020-11-25 01:13:33,401 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable
[2020-11-25 01:13:33,401 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable
[2020-11-25 01:13:33,401 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable
[2020-11-25 01:13:33,401 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable
[2020-11-25 01:13:33,401 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable
[2020-11-25 01:13:33,401 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable
[2020-11-25 01:13:33,401 INFO  L130     BoogieDeclarations]: Found specification of procedure BNS_BNS_NoBaseCtor__success
[2020-11-25 01:13:33,402 INFO  L130     BoogieDeclarations]: Found specification of procedure BNS_BNS
[2020-11-25 01:13:33,402 INFO  L138     BoogieDeclarations]: Found implementation of procedure BNS_BNS
[2020-11-25 01:13:33,402 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 01:13:33,402 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 01:13:33,402 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 01:13:33,402 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 01:13:33,402 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 01:13:33,402 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 01:13:33,402 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 01:13:33,403 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 01:13:33,403 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 01:13:33,403 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 01:13:33,403 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 01:13:33,403 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Burnable
[2020-11-25 01:13:33,403 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Burnable
[2020-11-25 01:13:33,403 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BNS
[2020-11-25 01:13:33,403 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 01:13:33,403 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 01:13:33,404 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 01:13:33,404 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 01:13:33,404 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 01:13:33,404 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 01:13:33,404 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 01:13:33,404 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 01:13:33,404 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 01:13:33,404 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 01:13:33,404 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 01:13:33,405 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 01:13:33,405 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 01:13:33,405 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 01:13:33,405 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 01:13:33,405 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 01:13:33,405 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 01:13:33,405 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 01:13:33,405 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 01:13:33,405 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 01:13:33,405 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 01:13:33,406 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 01:13:33,406 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 01:13:33,406 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 01:13:33,406 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 01:13:33,406 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 01:13:33,406 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 01:13:33,406 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 01:13:33,406 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 01:13:33,406 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 01:13:33,406 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 01:13:33,407 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 01:13:33,407 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 01:13:33,407 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 01:13:33,407 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 01:13:33,407 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 01:13:33,407 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 01:13:33,407 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 01:13:33,407 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 01:13:33,407 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 01:13:33,408 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 01:13:33,408 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 01:13:33,408 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 01:13:33,408 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 01:13:33,408 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 01:13:33,408 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 01:13:33,408 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__fail
[2020-11-25 01:13:33,408 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable__success
[2020-11-25 01:13:33,408 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable__fail
[2020-11-25 01:13:33,408 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable__success
[2020-11-25 01:13:33,409 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable__fail
[2020-11-25 01:13:33,409 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable__success
[2020-11-25 01:13:33,409 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable__fail
[2020-11-25 01:13:33,409 INFO  L130     BoogieDeclarations]: Found specification of procedure BNS_BNS_NoBaseCtor__fail
[2020-11-25 01:13:33,409 INFO  L130     BoogieDeclarations]: Found specification of procedure BNS_BNS__success
[2020-11-25 01:13:33,409 INFO  L130     BoogieDeclarations]: Found specification of procedure BNS_BNS__fail
[2020-11-25 01:13:33,409 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 01:13:33,409 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 01:13:33,409 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 01:13:33,409 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 01:13:33,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 01:13:33,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 01:13:33,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 01:13:33,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 01:13:33,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 01:13:33,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 01:13:33,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 01:13:33,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 01:13:33,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 01:13:33,411 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 01:13:33,411 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 01:13:33,411 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 01:13:33,411 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 01:13:33,411 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 01:13:33,411 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 01:13:33,411 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 01:13:33,411 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 01:13:33,411 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 01:13:33,412 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 01:13:33,412 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 01:13:33,412 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 01:13:33,412 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 01:13:33,412 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 01:13:33,412 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 01:13:33,412 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 01:13:33,412 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 01:13:33,412 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 01:13:33,412 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 01:13:33,412 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 01:13:33,413 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 01:13:33,413 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 01:13:33,413 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 01:13:33,413 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 01:13:33,413 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 01:13:33,413 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 01:13:33,413 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 01:13:33,413 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 01:13:33,413 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 01:13:33,413 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 01:13:33,413 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 01:13:33,414 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 01:13:33,414 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 01:13:33,414 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 01:13:33,414 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 01:13:33,414 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 01:13:33,414 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 01:13:33,414 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 01:13:33,414 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 01:13:33,414 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 01:13:33,414 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 01:13:33,414 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 01:13:33,415 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 01:13:33,415 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 01:13:33,415 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 01:13:33,415 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 01:13:33,415 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 01:13:33,415 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 01:13:33,415 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 01:13:33,415 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 01:13:33,415 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__fail
[2020-11-25 01:13:33,415 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__success
[2020-11-25 01:13:33,415 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable__fail
[2020-11-25 01:13:33,415 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable__success
[2020-11-25 01:13:33,416 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable__fail
[2020-11-25 01:13:33,416 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable__success
[2020-11-25 01:13:33,416 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable__fail
[2020-11-25 01:13:33,416 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable__success
[2020-11-25 01:13:33,416 INFO  L138     BoogieDeclarations]: Found implementation of procedure BNS_BNS_NoBaseCtor__fail
[2020-11-25 01:13:33,416 INFO  L138     BoogieDeclarations]: Found implementation of procedure BNS_BNS_NoBaseCtor__success
[2020-11-25 01:13:33,416 INFO  L138     BoogieDeclarations]: Found implementation of procedure BNS_BNS__fail
[2020-11-25 01:13:33,416 INFO  L138     BoogieDeclarations]: Found implementation of procedure BNS_BNS__success
[2020-11-25 01:13:33,416 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 01:13:33,416 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 01:13:33,416 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 01:13:33,416 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 01:13:33,417 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 01:13:33,417 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 01:13:33,417 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 01:13:33,417 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 01:13:33,417 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 01:13:33,417 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 01:13:33,417 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 01:13:33,417 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 01:13:33,417 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 01:13:33,417 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 01:13:33,417 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Burnable
[2020-11-25 01:13:33,418 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Burnable
[2020-11-25 01:13:33,418 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BNS
[2020-11-25 01:13:33,418 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 01:13:33,418 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 01:13:33,418 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 01:13:33,627 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 01:13:33,627 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 01:13:33,630 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 01:13:34,180 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 01:13:34,181 INFO  L286             CfgBuilder]: Removed 6 assue(true) statements.
[2020-11-25 01:13:34,183 INFO  L202        PluginConnector]: Adding new model BNS_0x695106ad73f506f9d0a9650a78019a93149ae07c_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:13:34 BoogieIcfgContainer
[2020-11-25 01:13:34,183 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:13:33" (2/2) ...
[2020-11-25 01:13:34,183 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 01:13:34,183 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@3df81934 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:13:34, skipping insertion in model container
[2020-11-25 01:13:34,184 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 01:13:34,184 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 01:13:34,184 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 01:13:34,185 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 01:13:34,186 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "BNS_0x695106ad73f506f9d0a9650a78019a93149ae07c_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:13:33" (1/3) ...
[2020-11-25 01:13:34,186 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@5adff373 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:13:34, skipping insertion in model container
[2020-11-25 01:13:34,186 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:13:33" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 01:13:34,231 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:13:34 NWAContainer
[2020-11-25 01:13:34,231 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 01:13:34,231 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 01:13:34,232 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 01:13:34,232 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 01:13:34,233 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "BNS_0x695106ad73f506f9d0a9650a78019a93149ae07c_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:13:34" (3/4) ...
[2020-11-25 01:13:34,234 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@6606c3cb and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:13:34, skipping insertion in model container
[2020-11-25 01:13:34,234 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:13:34" (4/4) ...
[2020-11-25 01:13:34,237 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 01:13:34,241 INFO  L110   BuchiProductObserver]: Initial RCFG 1599 locations, 2300 edges
[2020-11-25 01:13:34,242 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 01:13:34,253 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 01:13:35,513 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 01:13:35,519 INFO  L110   BuchiProductObserver]: BuchiProgram size 4092 locations, 7555 edges
[2020-11-25 01:13:35,519 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:13:35 BoogieIcfgContainer
[2020-11-25 01:13:35,519 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 01:13:35,519 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 01:13:35,519 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 01:13:35,521 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 01:13:35,521 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:13:35" (1/1) ...
[2020-11-25 01:13:35,616 INFO  L313           BlockEncoder]: Initial Icfg 4092 locations, 7555 edges
[2020-11-25 01:13:35,616 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 01:13:35,617 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 01:13:35,617 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 01:13:35,617 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 01:13:35,630 INFO  L70    emoveInfeasibleEdges]: Removed 120 edges and 15 locations because of local infeasibility
[2020-11-25 01:13:35,640 INFO  L70        RemoveSinkStates]: Removed 68 edges and 45 locations by removing sink states
[2020-11-25 01:13:35,654 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 01:13:35,660 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 01:13:35,664 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 01:13:35,664 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 01:13:35,670 INFO  L313           BlockEncoder]: Encoded RCFG 4012 locations, 7338 edges
[2020-11-25 01:13:35,670 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 01:13:35 BasicIcfg
[2020-11-25 01:13:35,671 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 01:13:35,671 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 01:13:35,671 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 01:13:35,673 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 01:13:35,673 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:13:35,673 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "BNS_0x695106ad73f506f9d0a9650a78019a93149ae07c_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:13:33" (1/6) ...
[2020-11-25 01:13:35,675 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@60ed0a2f and model type BNS_0x695106ad73f506f9d0a9650a78019a93149ae07c_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:13:35, skipping insertion in model container
[2020-11-25 01:13:35,675 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:13:35,675 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:13:33" (2/6) ...
[2020-11-25 01:13:35,675 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@60ed0a2f and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:13:35, skipping insertion in model container
[2020-11-25 01:13:35,675 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:13:35,675 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "BNS_0x695106ad73f506f9d0a9650a78019a93149ae07c_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:13:34" (3/6) ...
[2020-11-25 01:13:35,676 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@60ed0a2f and model type BNS_0x695106ad73f506f9d0a9650a78019a93149ae07c_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 01:13:35, skipping insertion in model container
[2020-11-25 01:13:35,676 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:13:35,676 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:13:34" (4/6) ...
[2020-11-25 01:13:35,676 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@60ed0a2f and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:13:35, skipping insertion in model container
[2020-11-25 01:13:35,676 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:13:35,676 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:13:35" (5/6) ...
[2020-11-25 01:13:35,676 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@60ed0a2f and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 01:13:35, skipping insertion in model container
[2020-11-25 01:13:35,676 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:13:35,676 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 01:13:35" (6/6) ...
[2020-11-25 01:13:35,677 INFO  L404   chiAutomizerObserver]: Analyzing ICFG BNS_0x695106ad73f506f9d0a9650a78019a93149ae07c_transfer-self.bpl_BEv2
[2020-11-25 01:13:35,712 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 01:13:35,713 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 01:13:35,713 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 01:13:35,713 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 01:13:35,713 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 01:13:35,713 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 01:13:35,713 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 01:13:35,713 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 01:13:35,713 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 01:13:35,751 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4012 states.
[2020-11-25 01:13:35,808 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:13:35,808 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:13:35,808 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:13:35,815 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:13:35,815 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:13:35,815 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 01:13:35,815 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4012 states.
[2020-11-25 01:13:35,833 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:13:35,833 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:13:35,833 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:13:35,834 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:13:35,835 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4556]              assume null == 0;
[L4557]  CALL        call this := FreshRefGenerator__success();
[L1661]              havoc newRef;
[L1662]              assume Alloc[newRef] == false;
[L1663]              Alloc[newRef] := true;
[L1664]              assume newRef != null;
[L4557]  RET         call this := FreshRefGenerator__success();
[L4558]              assume now >= 0;
[L4559]              assume DType[this] == BNS;
[L4560]              assume msgvalue_MSG == 0;
[L4561]              gas := gas - 53000;
[L4562]  CALL        call BNS_BNS(this, msgsender_MSG, msgvalue_MSG);
[L1082]              havoc __exception;
[L1083]              revert := false;
[L1084]  COND FALSE  !(__exception)
[L1105]  CALL        call BNS_BNS__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND TRUE   revert
[L1105]  RET         call BNS_BNS__success(this, msgsender_MSG, msgvalue_MSG);
[L1106]              assume !revert && gas >= 0;
[L4562]  RET         call BNS_BNS(this, msgsender_MSG, msgvalue_MSG);
[L4563]              assume !revert && gas >= 0;

Loop:
[L4566]  CALL        call CorralChoice_BNS(this);
[L4415]              havoc msgsender_MSG;
[L4416]              havoc msgvalue_MSG;
[L4417]              havoc choice;
[L4418]              havoc to_s268;
[L4419]              havoc value_s268;
[L4420]              havoc __ret_0_transfer;
[L4421]              havoc spender_s287;
[L4422]              havoc value_s287;
[L4423]              havoc __ret_0_approve;
[L4424]              havoc from_s322;
[L4425]              havoc to_s322;
[L4426]              havoc value_s322;
[L4427]              havoc __ret_0_transferFrom;
[L4428]              havoc __ret_0_totalSupply;
[L4429]              havoc owner_s233;
[L4430]              havoc __ret_0_balanceOf;
[L4431]              havoc owner_s249;
[L4432]              havoc spender_s249;
[L4433]              havoc __ret_0_allowance;
[L4434]              havoc spender_s349;
[L4435]              havoc addedValue_s349;
[L4436]              havoc __ret_0_increaseAllowance;
[L4437]              havoc spender_s376;
[L4438]              havoc subtractedValue_s376;
[L4439]              havoc __ret_0_decreaseAllowance;
[L4440]              havoc name_s606;
[L4441]              havoc symbol_s606;
[L4442]              havoc decimals_s606;
[L4443]              havoc __ret_0_name;
[L4444]              havoc __ret_0_symbol;
[L4445]              havoc __ret_0_decimals;
[L4446]              havoc value_s646;
[L4447]              havoc from_s659;
[L4448]              havoc value_s659;
[L4449]              havoc tmpNow;
[L4450]              havoc gas;
[L4451]              assume gas > 4000000 && gas <= 8000000;
[L4452]              tmpNow := now;
[L4453]              havoc now;
[L4454]              assume now > tmpNow;
[L4455]              assume msgsender_MSG != null;
[L4456]              assume DType[msgsender_MSG] != IERC20;
[L4457]              assume DType[msgsender_MSG] != SafeMath;
[L4458]              assume DType[msgsender_MSG] != ERC20;
[L4459]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4460]              assume DType[msgsender_MSG] != ERC20Burnable;
[L4461]              assume DType[msgsender_MSG] != BNS;
[L4462]              Alloc[msgsender_MSG] := true;
[L4463]  COND TRUE   choice == 13
[L4464]              gas := gas - 21000;
[L4465]  COND FALSE  !(gas >= 0)
[L4566]  RET         call CorralChoice_BNS(this);

[2020-11-25 01:13:35,848 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:13:35,848 INFO  L82        PathProgramCache]: Analyzing trace with hash 1574628936, now seen corresponding path program 1 times
[2020-11-25 01:13:35,852 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:13:35,871 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:13:35,907 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 01:13:35,909 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:13:35,909 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 01:13:35,912 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:13:36,159 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 01:13:36,160 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 01:13:36,161 INFO  L87              Difference]: Start difference. First operand 4012 states. Second operand 4 states.
[2020-11-25 01:13:36,595 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:13:36,596 INFO  L93              Difference]: Finished difference Result 2410 states and 2901 transitions.
[2020-11-25 01:13:36,596 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 01:13:36,597 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2410 states and 2901 transitions.
[2020-11-25 01:13:36,610 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:13:36,630 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2410 states to 2410 states and 2901 transitions.
[2020-11-25 01:13:36,631 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 01:13:36,633 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 610
[2020-11-25 01:13:36,634 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2410 states and 2901 transitions.
[2020-11-25 01:13:36,643 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:13:36,644 INFO  L728         BuchiCegarLoop]: Abstraction has 2410 states and 2901 transitions.
[2020-11-25 01:13:36,661 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2410 states and 2901 transitions.
[2020-11-25 01:13:36,705 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2410 to 2410.
[2020-11-25 01:13:36,705 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2410 states.
[2020-11-25 01:13:36,711 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2410 states to 2410 states and 2901 transitions.
[2020-11-25 01:13:36,711 INFO  L751         BuchiCegarLoop]: Abstraction has 2410 states and 2901 transitions.
[2020-11-25 01:13:36,712 INFO  L631         BuchiCegarLoop]: Abstraction has 2410 states and 2901 transitions.
[2020-11-25 01:13:36,712 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 01:13:36,712 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2410 states and 2901 transitions.
[2020-11-25 01:13:36,717 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:13:36,717 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:13:36,717 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:13:36,719 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:13:36,719 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4556]              assume null == 0;
[L4557]  CALL        call this := FreshRefGenerator__success();
[L1661]              havoc newRef;
[L1662]              assume Alloc[newRef] == false;
[L1663]              Alloc[newRef] := true;
[L1664]              assume newRef != null;
[L4557]  RET         call this := FreshRefGenerator__success();
[L4558]              assume now >= 0;
[L4559]              assume DType[this] == BNS;
[L4560]              assume msgvalue_MSG == 0;
[L4561]              gas := gas - 53000;
[L4562]  CALL        call BNS_BNS(this, msgsender_MSG, msgvalue_MSG);
[L1082]              havoc __exception;
[L1083]              revert := false;
[L1084]  COND FALSE  !(__exception)
[L1105]  CALL        call BNS_BNS__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND TRUE   revert
[L1105]  RET         call BNS_BNS__success(this, msgsender_MSG, msgvalue_MSG);
[L1106]              assume !revert && gas >= 0;
[L4562]  RET         call BNS_BNS(this, msgsender_MSG, msgvalue_MSG);
[L4563]              assume !revert && gas >= 0;
[L4566]  CALL        call CorralChoice_BNS(this);
[L4415]              havoc msgsender_MSG;
[L4416]              havoc msgvalue_MSG;
[L4417]              havoc choice;
[L4418]              havoc to_s268;
[L4419]              havoc value_s268;
[L4420]              havoc __ret_0_transfer;
[L4421]              havoc spender_s287;
[L4422]              havoc value_s287;
[L4423]              havoc __ret_0_approve;
[L4424]              havoc from_s322;
[L4425]              havoc to_s322;
[L4426]              havoc value_s322;
[L4427]              havoc __ret_0_transferFrom;
[L4428]              havoc __ret_0_totalSupply;
[L4429]              havoc owner_s233;
[L4430]              havoc __ret_0_balanceOf;
[L4431]              havoc owner_s249;
[L4432]              havoc spender_s249;
[L4433]              havoc __ret_0_allowance;
[L4434]              havoc spender_s349;
[L4435]              havoc addedValue_s349;
[L4436]              havoc __ret_0_increaseAllowance;
[L4437]              havoc spender_s376;
[L4438]              havoc subtractedValue_s376;
[L4439]              havoc __ret_0_decreaseAllowance;
[L4440]              havoc name_s606;
[L4441]              havoc symbol_s606;
[L4442]              havoc decimals_s606;
[L4443]              havoc __ret_0_name;
[L4444]              havoc __ret_0_symbol;
[L4445]              havoc __ret_0_decimals;
[L4446]              havoc value_s646;
[L4447]              havoc from_s659;
[L4448]              havoc value_s659;
[L4449]              havoc tmpNow;
[L4450]              havoc gas;
[L4451]              assume gas > 4000000 && gas <= 8000000;
[L4452]              tmpNow := now;
[L4453]              havoc now;
[L4454]              assume now > tmpNow;
[L4455]              assume msgsender_MSG != null;
[L4456]              assume DType[msgsender_MSG] != IERC20;
[L4457]              assume DType[msgsender_MSG] != SafeMath;
[L4458]              assume DType[msgsender_MSG] != ERC20;
[L4459]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4460]              assume DType[msgsender_MSG] != ERC20Burnable;
[L4461]              assume DType[msgsender_MSG] != BNS;
[L4462]              Alloc[msgsender_MSG] := true;
[L4463]  COND TRUE   choice == 13
[L4464]              gas := gas - 21000;
[L4465]  COND TRUE   gas >= 0
[L4466]              assume value_s268 >= 0 && value_s268 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4467]              assume msgvalue_MSG == 0;
[L4468]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s268 && value_s268 <= _balances_ERC20[this][msgsender_MSG]) && value_s268 >= 0) && value_s268 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s268] >= 0) && _balances_ERC20[this][to_s268] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L404]               havoc __exception;
[L405]               revert := false;
[L406]   COND FALSE  !(__exception)
[L427]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L1967]  COND FALSE  !(DType[this] == BNS)
[L1972]  COND TRUE   DType[this] == ERC20Burnable
[L1973]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L2278]              __var_4 := null;
[L2279]  COND TRUE   !(to_s422 != null)
[L2280]              revert := true;
[L1973]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L1974]  COND TRUE   revert
[L427]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L428]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4468]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L4566]  RET         call CorralChoice_BNS(this);

Loop:
[L4566]  CALL        call CorralChoice_BNS(this);
[L4415]              havoc msgsender_MSG;
[L4416]              havoc msgvalue_MSG;
[L4417]              havoc choice;
[L4418]              havoc to_s268;
[L4419]              havoc value_s268;
[L4420]              havoc __ret_0_transfer;
[L4421]              havoc spender_s287;
[L4422]              havoc value_s287;
[L4423]              havoc __ret_0_approve;
[L4424]              havoc from_s322;
[L4425]              havoc to_s322;
[L4426]              havoc value_s322;
[L4427]              havoc __ret_0_transferFrom;
[L4428]              havoc __ret_0_totalSupply;
[L4429]              havoc owner_s233;
[L4430]              havoc __ret_0_balanceOf;
[L4431]              havoc owner_s249;
[L4432]              havoc spender_s249;
[L4433]              havoc __ret_0_allowance;
[L4434]              havoc spender_s349;
[L4435]              havoc addedValue_s349;
[L4436]              havoc __ret_0_increaseAllowance;
[L4437]              havoc spender_s376;
[L4438]              havoc subtractedValue_s376;
[L4439]              havoc __ret_0_decreaseAllowance;
[L4440]              havoc name_s606;
[L4441]              havoc symbol_s606;
[L4442]              havoc decimals_s606;
[L4443]              havoc __ret_0_name;
[L4444]              havoc __ret_0_symbol;
[L4445]              havoc __ret_0_decimals;
[L4446]              havoc value_s646;
[L4447]              havoc from_s659;
[L4448]              havoc value_s659;
[L4449]              havoc tmpNow;
[L4450]              havoc gas;
[L4451]              assume gas > 4000000 && gas <= 8000000;
[L4452]              tmpNow := now;
[L4453]              havoc now;
[L4454]              assume now > tmpNow;
[L4455]              assume msgsender_MSG != null;
[L4456]              assume DType[msgsender_MSG] != IERC20;
[L4457]              assume DType[msgsender_MSG] != SafeMath;
[L4458]              assume DType[msgsender_MSG] != ERC20;
[L4459]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4460]              assume DType[msgsender_MSG] != ERC20Burnable;
[L4461]              assume DType[msgsender_MSG] != BNS;
[L4462]              Alloc[msgsender_MSG] := true;
[L4463]  COND TRUE   choice == 13
[L4464]              gas := gas - 21000;
[L4465]  COND TRUE   gas >= 0
[L4466]              assume value_s268 >= 0 && value_s268 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4467]              assume msgvalue_MSG == 0;
[L4468]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s268 && value_s268 <= _balances_ERC20[this][msgsender_MSG]) && value_s268 >= 0) && value_s268 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s268] >= 0) && _balances_ERC20[this][to_s268] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L404]               havoc __exception;
[L405]               revert := false;
[L406]   COND FALSE  !(__exception)
[L427]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L1967]  COND FALSE  !(DType[this] == BNS)
[L1972]  COND TRUE   DType[this] == ERC20Burnable
[L1973]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L2278]              __var_4 := null;
[L2279]  COND TRUE   !(to_s422 != null)
[L2280]              revert := true;
[L1973]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L1974]  COND TRUE   revert
[L427]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L428]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4468]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L4566]  RET         call CorralChoice_BNS(this);

[2020-11-25 01:13:36,723 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:13:36,723 INFO  L82        PathProgramCache]: Analyzing trace with hash -75395211, now seen corresponding path program 1 times
[2020-11-25 01:13:36,724 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:13:36,731 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:13:36,746 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 01:13:36,747 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:13:36,747 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 01:13:36,748 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:13:36,748 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 01:13:36,748 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 01:13:36,748 INFO  L87              Difference]: Start difference. First operand 2410 states and 2901 transitions. cyclomatic complexity: 493 Second operand 3 states.
[2020-11-25 01:13:36,816 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:13:36,816 INFO  L93              Difference]: Finished difference Result 3264 states and 3957 transitions.
[2020-11-25 01:13:36,816 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 01:13:36,816 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3264 states and 3957 transitions.
[2020-11-25 01:13:36,828 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:13:36,842 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3264 states to 3264 states and 3957 transitions.
[2020-11-25 01:13:36,842 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 861
[2020-11-25 01:13:36,843 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 861
[2020-11-25 01:13:36,843 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3264 states and 3957 transitions.
[2020-11-25 01:13:36,848 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:13:36,848 INFO  L728         BuchiCegarLoop]: Abstraction has 3264 states and 3957 transitions.
[2020-11-25 01:13:36,851 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3264 states and 3957 transitions.
[2020-11-25 01:13:36,878 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3264 to 2770.
[2020-11-25 01:13:36,878 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2770 states.
[2020-11-25 01:13:36,882 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2770 states to 2770 states and 3361 transitions.
[2020-11-25 01:13:36,882 INFO  L751         BuchiCegarLoop]: Abstraction has 2770 states and 3361 transitions.
[2020-11-25 01:13:36,882 INFO  L631         BuchiCegarLoop]: Abstraction has 2770 states and 3361 transitions.
[2020-11-25 01:13:36,882 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 01:13:36,882 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2770 states and 3361 transitions.
[2020-11-25 01:13:36,887 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:13:36,887 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:13:36,887 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:13:36,889 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:13:36,889 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4556]              assume null == 0;
[L4557]  CALL        call this := FreshRefGenerator__success();
[L1661]              havoc newRef;
[L1662]              assume Alloc[newRef] == false;
[L1663]              Alloc[newRef] := true;
[L1664]              assume newRef != null;
[L4557]  RET         call this := FreshRefGenerator__success();
[L4558]              assume now >= 0;
[L4559]              assume DType[this] == BNS;
[L4560]              assume msgvalue_MSG == 0;
[L4561]              gas := gas - 53000;
[L4562]  CALL        call BNS_BNS(this, msgsender_MSG, msgvalue_MSG);
[L1082]              havoc __exception;
[L1083]              revert := false;
[L1084]  COND FALSE  !(__exception)
[L1105]  CALL        call BNS_BNS__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1895]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L1895]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  COND FALSE  !(revert)
[L1899]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1871]              assume msgsender_MSG != null;
[L1872]              Balance[this] := 0;
[L1873]              _balances_ERC20[this] := zeroRefintArr();
[L1874]              sum__balances0[this] := 0;
[L1875]              _allowed_ERC20[this] := zeroRefRefintArr();
[L1876]              sum__allowed1[this] := 0;
[L1877]              _totalSupply_ERC20[this] := 0;
[L1899]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1900]  COND FALSE  !(revert)
[L2799]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L2803]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 2048224778, 26805932, 8);
[L2569]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L2569]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2570]  COND FALSE  !(revert)
[L2573]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s606, symbol_s606, decimals_s606);
[L2544]              assume msgsender_MSG != null;
[L2545]              Balance[this] := 0;
[L2546]              _name_ERC20Detailed[this] := -2028290499;
[L2547]              _symbol_ERC20Detailed[this] := -2028290499;
[L2548]              _decimals_ERC20Detailed[this] := 0;
[L2550]              _name_ERC20Detailed[this] := name_s606;
[L2551]              _symbol_ERC20Detailed[this] := symbol_s606;
[L2552]              _decimals_ERC20Detailed[this] := decimals_s606;
[L2573]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s606, symbol_s606, decimals_s606);
[L2574]  COND FALSE  !(revert)
[L2803]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 2048224778, 26805932, 8);
[L2804]  COND FALSE  !(revert)
[L2807]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L2649]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L2649]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2650]  COND FALSE  !(revert)
[L2653]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1895]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L1895]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  COND FALSE  !(revert)
[L1899]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1871]              assume msgsender_MSG != null;
[L1872]              Balance[this] := 0;
[L1873]              _balances_ERC20[this] := zeroRefintArr();
[L1874]              sum__balances0[this] := 0;
[L1875]              _allowed_ERC20[this] := zeroRefRefintArr();
[L1876]              sum__allowed1[this] := 0;
[L1877]              _totalSupply_ERC20[this] := 0;
[L1899]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1900]  COND FALSE  !(revert)
[L2653]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2654]  COND FALSE  !(revert)
[L2657]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2626]              assume msgsender_MSG != null;
[L2627]              Balance[this] := 0;
[L2657]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2658]  COND FALSE  !(revert)
[L2807]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L2808]  COND FALSE  !(revert)
[L2811]  CALL        call BNS_BNS_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2753]              assume msgsender_MSG != null;
[L2754]              Balance[this] := 0;
[L2756]              __var_16 := 250000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2757]  COND TRUE   DType[this] == BNS
[L2758]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 250000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2329]              __var_7 := null;
[L2330]  COND TRUE   !(account_s464 != null)
[L2331]              revert := true;
[L2758]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 250000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2759]  COND TRUE   revert
[L2811]  RET         call BNS_BNS_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]  COND TRUE   revert
[L1105]  RET         call BNS_BNS__success(this, msgsender_MSG, msgvalue_MSG);
[L1106]              assume !revert && gas >= 0;
[L4562]  RET         call BNS_BNS(this, msgsender_MSG, msgvalue_MSG);
[L4563]              assume !revert && gas >= 0;
[L4566]  CALL        call CorralChoice_BNS(this);
[L4415]              havoc msgsender_MSG;
[L4416]              havoc msgvalue_MSG;
[L4417]              havoc choice;
[L4418]              havoc to_s268;
[L4419]              havoc value_s268;
[L4420]              havoc __ret_0_transfer;
[L4421]              havoc spender_s287;
[L4422]              havoc value_s287;
[L4423]              havoc __ret_0_approve;
[L4424]              havoc from_s322;
[L4425]              havoc to_s322;
[L4426]              havoc value_s322;
[L4427]              havoc __ret_0_transferFrom;
[L4428]              havoc __ret_0_totalSupply;
[L4429]              havoc owner_s233;
[L4430]              havoc __ret_0_balanceOf;
[L4431]              havoc owner_s249;
[L4432]              havoc spender_s249;
[L4433]              havoc __ret_0_allowance;
[L4434]              havoc spender_s349;
[L4435]              havoc addedValue_s349;
[L4436]              havoc __ret_0_increaseAllowance;
[L4437]              havoc spender_s376;
[L4438]              havoc subtractedValue_s376;
[L4439]              havoc __ret_0_decreaseAllowance;
[L4440]              havoc name_s606;
[L4441]              havoc symbol_s606;
[L4442]              havoc decimals_s606;
[L4443]              havoc __ret_0_name;
[L4444]              havoc __ret_0_symbol;
[L4445]              havoc __ret_0_decimals;
[L4446]              havoc value_s646;
[L4447]              havoc from_s659;
[L4448]              havoc value_s659;
[L4449]              havoc tmpNow;
[L4450]              havoc gas;
[L4451]              assume gas > 4000000 && gas <= 8000000;
[L4452]              tmpNow := now;
[L4453]              havoc now;
[L4454]              assume now > tmpNow;
[L4455]              assume msgsender_MSG != null;
[L4456]              assume DType[msgsender_MSG] != IERC20;
[L4457]              assume DType[msgsender_MSG] != SafeMath;
[L4458]              assume DType[msgsender_MSG] != ERC20;
[L4459]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4460]              assume DType[msgsender_MSG] != ERC20Burnable;
[L4461]              assume DType[msgsender_MSG] != BNS;
[L4462]              Alloc[msgsender_MSG] := true;
[L4463]  COND TRUE   choice == 13
[L4464]              gas := gas - 21000;
[L4465]  COND TRUE   gas >= 0
[L4466]              assume value_s268 >= 0 && value_s268 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4467]              assume msgvalue_MSG == 0;
[L4468]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s268 && value_s268 <= _balances_ERC20[this][msgsender_MSG]) && value_s268 >= 0) && value_s268 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s268] >= 0) && _balances_ERC20[this][to_s268] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L404]               havoc __exception;
[L405]               revert := false;
[L406]   COND FALSE  !(__exception)
[L427]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L1967]  COND FALSE  !(DType[this] == BNS)
[L1972]  COND TRUE   DType[this] == ERC20Burnable
[L1973]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L2278]              __var_4 := null;
[L2279]  COND TRUE   !(to_s422 != null)
[L2280]              revert := true;
[L1973]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L1974]  COND TRUE   revert
[L427]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L428]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4468]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L4566]  RET         call CorralChoice_BNS(this);

Loop:
[L4566]  CALL        call CorralChoice_BNS(this);
[L4415]              havoc msgsender_MSG;
[L4416]              havoc msgvalue_MSG;
[L4417]              havoc choice;
[L4418]              havoc to_s268;
[L4419]              havoc value_s268;
[L4420]              havoc __ret_0_transfer;
[L4421]              havoc spender_s287;
[L4422]              havoc value_s287;
[L4423]              havoc __ret_0_approve;
[L4424]              havoc from_s322;
[L4425]              havoc to_s322;
[L4426]              havoc value_s322;
[L4427]              havoc __ret_0_transferFrom;
[L4428]              havoc __ret_0_totalSupply;
[L4429]              havoc owner_s233;
[L4430]              havoc __ret_0_balanceOf;
[L4431]              havoc owner_s249;
[L4432]              havoc spender_s249;
[L4433]              havoc __ret_0_allowance;
[L4434]              havoc spender_s349;
[L4435]              havoc addedValue_s349;
[L4436]              havoc __ret_0_increaseAllowance;
[L4437]              havoc spender_s376;
[L4438]              havoc subtractedValue_s376;
[L4439]              havoc __ret_0_decreaseAllowance;
[L4440]              havoc name_s606;
[L4441]              havoc symbol_s606;
[L4442]              havoc decimals_s606;
[L4443]              havoc __ret_0_name;
[L4444]              havoc __ret_0_symbol;
[L4445]              havoc __ret_0_decimals;
[L4446]              havoc value_s646;
[L4447]              havoc from_s659;
[L4448]              havoc value_s659;
[L4449]              havoc tmpNow;
[L4450]              havoc gas;
[L4451]              assume gas > 4000000 && gas <= 8000000;
[L4452]              tmpNow := now;
[L4453]              havoc now;
[L4454]              assume now > tmpNow;
[L4455]              assume msgsender_MSG != null;
[L4456]              assume DType[msgsender_MSG] != IERC20;
[L4457]              assume DType[msgsender_MSG] != SafeMath;
[L4458]              assume DType[msgsender_MSG] != ERC20;
[L4459]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4460]              assume DType[msgsender_MSG] != ERC20Burnable;
[L4461]              assume DType[msgsender_MSG] != BNS;
[L4462]              Alloc[msgsender_MSG] := true;
[L4463]  COND TRUE   choice == 13
[L4464]              gas := gas - 21000;
[L4465]  COND TRUE   gas >= 0
[L4466]              assume value_s268 >= 0 && value_s268 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4467]              assume msgvalue_MSG == 0;
[L4468]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s268 && value_s268 <= _balances_ERC20[this][msgsender_MSG]) && value_s268 >= 0) && value_s268 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s268] >= 0) && _balances_ERC20[this][to_s268] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L404]               havoc __exception;
[L405]               revert := false;
[L406]   COND FALSE  !(__exception)
[L427]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L1967]  COND FALSE  !(DType[this] == BNS)
[L1972]  COND TRUE   DType[this] == ERC20Burnable
[L1973]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L2278]              __var_4 := null;
[L2279]  COND TRUE   !(to_s422 != null)
[L2280]              revert := true;
[L1973]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L1974]  COND TRUE   revert
[L427]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L428]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4468]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L4566]  RET         call CorralChoice_BNS(this);

[2020-11-25 01:13:36,893 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:13:36,893 INFO  L82        PathProgramCache]: Analyzing trace with hash -2023050647, now seen corresponding path program 1 times
[2020-11-25 01:13:36,894 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:13:36,904 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:13:36,956 INFO  L134       CoverageAnalysis]: Checked inductivity of 119 backedges. 0 proven. 28 refuted. 0 times theorem prover too weak. 91 trivial. 0 not checked.
[2020-11-25 01:13:36,956 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:13:36,956 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 01:13:36,957 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:13:36,957 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 01:13:36,957 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 01:13:36,957 INFO  L87              Difference]: Start difference. First operand 2770 states and 3361 transitions. cyclomatic complexity: 593 Second operand 7 states.
[2020-11-25 01:13:37,003 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:13:37,003 INFO  L93              Difference]: Finished difference Result 2778 states and 3368 transitions.
[2020-11-25 01:13:37,003 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 01:13:37,003 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2778 states and 3368 transitions.
[2020-11-25 01:13:37,012 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:13:37,023 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2778 states to 2769 states and 3359 transitions.
[2020-11-25 01:13:37,023 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 722
[2020-11-25 01:13:37,024 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 722
[2020-11-25 01:13:37,024 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2769 states and 3359 transitions.
[2020-11-25 01:13:37,026 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:13:37,026 INFO  L728         BuchiCegarLoop]: Abstraction has 2769 states and 3359 transitions.
[2020-11-25 01:13:37,029 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2769 states and 3359 transitions.
[2020-11-25 01:13:37,055 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2769 to 2769.
[2020-11-25 01:13:37,055 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2769 states.
[2020-11-25 01:13:37,059 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2769 states to 2769 states and 3359 transitions.
[2020-11-25 01:13:37,059 INFO  L751         BuchiCegarLoop]: Abstraction has 2769 states and 3359 transitions.
[2020-11-25 01:13:37,059 INFO  L631         BuchiCegarLoop]: Abstraction has 2769 states and 3359 transitions.
[2020-11-25 01:13:37,059 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 01:13:37,059 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2769 states and 3359 transitions.
[2020-11-25 01:13:37,066 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:13:37,066 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:13:37,066 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:13:37,068 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:13:37,068 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4556]              assume null == 0;
[L4557]  CALL        call this := FreshRefGenerator__success();
[L1661]              havoc newRef;
[L1662]              assume Alloc[newRef] == false;
[L1663]              Alloc[newRef] := true;
[L1664]              assume newRef != null;
[L4557]  RET         call this := FreshRefGenerator__success();
[L4558]              assume now >= 0;
[L4559]              assume DType[this] == BNS;
[L4560]              assume msgvalue_MSG == 0;
[L4561]              gas := gas - 53000;
[L4562]  CALL        call BNS_BNS(this, msgsender_MSG, msgvalue_MSG);
[L1082]              havoc __exception;
[L1083]              revert := false;
[L1084]  COND FALSE  !(__exception)
[L1105]  CALL        call BNS_BNS__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1895]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L1895]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  COND FALSE  !(revert)
[L1899]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1871]              assume msgsender_MSG != null;
[L1872]              Balance[this] := 0;
[L1873]              _balances_ERC20[this] := zeroRefintArr();
[L1874]              sum__balances0[this] := 0;
[L1875]              _allowed_ERC20[this] := zeroRefRefintArr();
[L1876]              sum__allowed1[this] := 0;
[L1877]              _totalSupply_ERC20[this] := 0;
[L1899]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1900]  COND FALSE  !(revert)
[L2799]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L2803]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 2048224778, 26805932, 8);
[L2569]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L2569]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2570]  COND FALSE  !(revert)
[L2573]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s606, symbol_s606, decimals_s606);
[L2544]              assume msgsender_MSG != null;
[L2545]              Balance[this] := 0;
[L2546]              _name_ERC20Detailed[this] := -2028290499;
[L2547]              _symbol_ERC20Detailed[this] := -2028290499;
[L2548]              _decimals_ERC20Detailed[this] := 0;
[L2550]              _name_ERC20Detailed[this] := name_s606;
[L2551]              _symbol_ERC20Detailed[this] := symbol_s606;
[L2552]              _decimals_ERC20Detailed[this] := decimals_s606;
[L2573]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s606, symbol_s606, decimals_s606);
[L2574]  COND FALSE  !(revert)
[L2803]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 2048224778, 26805932, 8);
[L2804]  COND FALSE  !(revert)
[L2807]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L2649]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L2649]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2650]  COND FALSE  !(revert)
[L2653]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1895]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L1895]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  COND FALSE  !(revert)
[L1899]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1871]              assume msgsender_MSG != null;
[L1872]              Balance[this] := 0;
[L1873]              _balances_ERC20[this] := zeroRefintArr();
[L1874]              sum__balances0[this] := 0;
[L1875]              _allowed_ERC20[this] := zeroRefRefintArr();
[L1876]              sum__allowed1[this] := 0;
[L1877]              _totalSupply_ERC20[this] := 0;
[L1899]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1900]  COND FALSE  !(revert)
[L2653]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2654]  COND FALSE  !(revert)
[L2657]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2626]              assume msgsender_MSG != null;
[L2627]              Balance[this] := 0;
[L2657]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2658]  COND FALSE  !(revert)
[L2807]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L2808]  COND FALSE  !(revert)
[L2811]  CALL        call BNS_BNS_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2753]              assume msgsender_MSG != null;
[L2754]              Balance[this] := 0;
[L2756]              __var_16 := 250000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2757]  COND TRUE   DType[this] == BNS
[L2758]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 250000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2329]              __var_7 := null;
[L2330]  COND FALSE  !(!(account_s464 != null))
[L2334]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L1826]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]  COND TRUE   !(c_s174 >= a_s174)
[L1828]              revert := true;
[L2334]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L2335]  COND TRUE   revert
[L2758]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 250000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2759]  COND TRUE   revert
[L2811]  RET         call BNS_BNS_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]  COND TRUE   revert
[L1105]  RET         call BNS_BNS__success(this, msgsender_MSG, msgvalue_MSG);
[L1106]              assume !revert && gas >= 0;
[L4562]  RET         call BNS_BNS(this, msgsender_MSG, msgvalue_MSG);
[L4563]              assume !revert && gas >= 0;
[L4566]  CALL        call CorralChoice_BNS(this);
[L4415]              havoc msgsender_MSG;
[L4416]              havoc msgvalue_MSG;
[L4417]              havoc choice;
[L4418]              havoc to_s268;
[L4419]              havoc value_s268;
[L4420]              havoc __ret_0_transfer;
[L4421]              havoc spender_s287;
[L4422]              havoc value_s287;
[L4423]              havoc __ret_0_approve;
[L4424]              havoc from_s322;
[L4425]              havoc to_s322;
[L4426]              havoc value_s322;
[L4427]              havoc __ret_0_transferFrom;
[L4428]              havoc __ret_0_totalSupply;
[L4429]              havoc owner_s233;
[L4430]              havoc __ret_0_balanceOf;
[L4431]              havoc owner_s249;
[L4432]              havoc spender_s249;
[L4433]              havoc __ret_0_allowance;
[L4434]              havoc spender_s349;
[L4435]              havoc addedValue_s349;
[L4436]              havoc __ret_0_increaseAllowance;
[L4437]              havoc spender_s376;
[L4438]              havoc subtractedValue_s376;
[L4439]              havoc __ret_0_decreaseAllowance;
[L4440]              havoc name_s606;
[L4441]              havoc symbol_s606;
[L4442]              havoc decimals_s606;
[L4443]              havoc __ret_0_name;
[L4444]              havoc __ret_0_symbol;
[L4445]              havoc __ret_0_decimals;
[L4446]              havoc value_s646;
[L4447]              havoc from_s659;
[L4448]              havoc value_s659;
[L4449]              havoc tmpNow;
[L4450]              havoc gas;
[L4451]              assume gas > 4000000 && gas <= 8000000;
[L4452]              tmpNow := now;
[L4453]              havoc now;
[L4454]              assume now > tmpNow;
[L4455]              assume msgsender_MSG != null;
[L4456]              assume DType[msgsender_MSG] != IERC20;
[L4457]              assume DType[msgsender_MSG] != SafeMath;
[L4458]              assume DType[msgsender_MSG] != ERC20;
[L4459]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4460]              assume DType[msgsender_MSG] != ERC20Burnable;
[L4461]              assume DType[msgsender_MSG] != BNS;
[L4462]              Alloc[msgsender_MSG] := true;
[L4463]  COND TRUE   choice == 13
[L4464]              gas := gas - 21000;
[L4465]  COND TRUE   gas >= 0
[L4466]              assume value_s268 >= 0 && value_s268 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4467]              assume msgvalue_MSG == 0;
[L4468]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s268 && value_s268 <= _balances_ERC20[this][msgsender_MSG]) && value_s268 >= 0) && value_s268 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s268] >= 0) && _balances_ERC20[this][to_s268] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L404]               havoc __exception;
[L405]               revert := false;
[L406]   COND FALSE  !(__exception)
[L427]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L1967]  COND FALSE  !(DType[this] == BNS)
[L1972]  COND TRUE   DType[this] == ERC20Burnable
[L1973]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L2278]              __var_4 := null;
[L2279]  COND TRUE   !(to_s422 != null)
[L2280]              revert := true;
[L1973]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L1974]  COND TRUE   revert
[L427]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L428]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4468]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L4566]  RET         call CorralChoice_BNS(this);

Loop:
[L4566]  CALL        call CorralChoice_BNS(this);
[L4415]              havoc msgsender_MSG;
[L4416]              havoc msgvalue_MSG;
[L4417]              havoc choice;
[L4418]              havoc to_s268;
[L4419]              havoc value_s268;
[L4420]              havoc __ret_0_transfer;
[L4421]              havoc spender_s287;
[L4422]              havoc value_s287;
[L4423]              havoc __ret_0_approve;
[L4424]              havoc from_s322;
[L4425]              havoc to_s322;
[L4426]              havoc value_s322;
[L4427]              havoc __ret_0_transferFrom;
[L4428]              havoc __ret_0_totalSupply;
[L4429]              havoc owner_s233;
[L4430]              havoc __ret_0_balanceOf;
[L4431]              havoc owner_s249;
[L4432]              havoc spender_s249;
[L4433]              havoc __ret_0_allowance;
[L4434]              havoc spender_s349;
[L4435]              havoc addedValue_s349;
[L4436]              havoc __ret_0_increaseAllowance;
[L4437]              havoc spender_s376;
[L4438]              havoc subtractedValue_s376;
[L4439]              havoc __ret_0_decreaseAllowance;
[L4440]              havoc name_s606;
[L4441]              havoc symbol_s606;
[L4442]              havoc decimals_s606;
[L4443]              havoc __ret_0_name;
[L4444]              havoc __ret_0_symbol;
[L4445]              havoc __ret_0_decimals;
[L4446]              havoc value_s646;
[L4447]              havoc from_s659;
[L4448]              havoc value_s659;
[L4449]              havoc tmpNow;
[L4450]              havoc gas;
[L4451]              assume gas > 4000000 && gas <= 8000000;
[L4452]              tmpNow := now;
[L4453]              havoc now;
[L4454]              assume now > tmpNow;
[L4455]              assume msgsender_MSG != null;
[L4456]              assume DType[msgsender_MSG] != IERC20;
[L4457]              assume DType[msgsender_MSG] != SafeMath;
[L4458]              assume DType[msgsender_MSG] != ERC20;
[L4459]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4460]              assume DType[msgsender_MSG] != ERC20Burnable;
[L4461]              assume DType[msgsender_MSG] != BNS;
[L4462]              Alloc[msgsender_MSG] := true;
[L4463]  COND TRUE   choice == 13
[L4464]              gas := gas - 21000;
[L4465]  COND TRUE   gas >= 0
[L4466]              assume value_s268 >= 0 && value_s268 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4467]              assume msgvalue_MSG == 0;
[L4468]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s268 && value_s268 <= _balances_ERC20[this][msgsender_MSG]) && value_s268 >= 0) && value_s268 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s268] >= 0) && _balances_ERC20[this][to_s268] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L404]               havoc __exception;
[L405]               revert := false;
[L406]   COND FALSE  !(__exception)
[L427]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L1967]  COND FALSE  !(DType[this] == BNS)
[L1972]  COND TRUE   DType[this] == ERC20Burnable
[L1973]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L2278]              __var_4 := null;
[L2279]  COND TRUE   !(to_s422 != null)
[L2280]              revert := true;
[L1973]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L1974]  COND TRUE   revert
[L427]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L428]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4468]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L4566]  RET         call CorralChoice_BNS(this);

[2020-11-25 01:13:37,071 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:13:37,072 INFO  L82        PathProgramCache]: Analyzing trace with hash -871062199, now seen corresponding path program 1 times
[2020-11-25 01:13:37,072 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:13:37,082 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:13:37,149 INFO  L134       CoverageAnalysis]: Checked inductivity of 119 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 119 trivial. 0 not checked.
[2020-11-25 01:13:37,149 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:13:37,150 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 01:13:37,150 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:13:37,151 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 01:13:37,151 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 01:13:37,151 INFO  L87              Difference]: Start difference. First operand 2769 states and 3359 transitions. cyclomatic complexity: 592 Second operand 3 states.
[2020-11-25 01:13:37,202 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:13:37,202 INFO  L93              Difference]: Finished difference Result 3263 states and 3787 transitions.
[2020-11-25 01:13:37,202 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 01:13:37,202 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3263 states and 3787 transitions.
[2020-11-25 01:13:37,211 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:13:37,221 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3263 states to 2990 states and 3453 transitions.
[2020-11-25 01:13:37,221 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 775
[2020-11-25 01:13:37,222 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 807
[2020-11-25 01:13:37,222 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2990 states and 3453 transitions.
[2020-11-25 01:13:37,225 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:13:37,225 INFO  L728         BuchiCegarLoop]: Abstraction has 2990 states and 3453 transitions.
[2020-11-25 01:13:37,228 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2990 states and 3453 transitions.
[2020-11-25 01:13:37,249 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2990 to 2564.
[2020-11-25 01:13:37,249 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2564 states.
[2020-11-25 01:13:37,252 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2564 states to 2564 states and 2925 transitions.
[2020-11-25 01:13:37,252 INFO  L751         BuchiCegarLoop]: Abstraction has 2564 states and 2925 transitions.
[2020-11-25 01:13:37,252 INFO  L631         BuchiCegarLoop]: Abstraction has 2564 states and 2925 transitions.
[2020-11-25 01:13:37,252 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 01:13:37,252 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2564 states and 2925 transitions.
[2020-11-25 01:13:37,255 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:13:37,255 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:13:37,255 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:13:37,257 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:13:37,257 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4556]              assume null == 0;
[L4557]  CALL        call this := FreshRefGenerator__success();
[L1661]              havoc newRef;
[L1662]              assume Alloc[newRef] == false;
[L1663]              Alloc[newRef] := true;
[L1664]              assume newRef != null;
[L4557]  RET         call this := FreshRefGenerator__success();
[L4558]              assume now >= 0;
[L4559]              assume DType[this] == BNS;
[L4560]              assume msgvalue_MSG == 0;
[L4561]              gas := gas - 53000;
[L4562]  CALL        call BNS_BNS(this, msgsender_MSG, msgvalue_MSG);
[L1082]              havoc __exception;
[L1083]              revert := false;
[L1084]  COND FALSE  !(__exception)
[L1105]  CALL        call BNS_BNS__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1895]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L1895]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  COND FALSE  !(revert)
[L1899]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1871]              assume msgsender_MSG != null;
[L1872]              Balance[this] := 0;
[L1873]              _balances_ERC20[this] := zeroRefintArr();
[L1874]              sum__balances0[this] := 0;
[L1875]              _allowed_ERC20[this] := zeroRefRefintArr();
[L1876]              sum__allowed1[this] := 0;
[L1877]              _totalSupply_ERC20[this] := 0;
[L1899]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1900]  COND FALSE  !(revert)
[L2799]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L2803]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 2048224778, 26805932, 8);
[L2569]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L2569]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2570]  COND FALSE  !(revert)
[L2573]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s606, symbol_s606, decimals_s606);
[L2544]              assume msgsender_MSG != null;
[L2545]              Balance[this] := 0;
[L2546]              _name_ERC20Detailed[this] := -2028290499;
[L2547]              _symbol_ERC20Detailed[this] := -2028290499;
[L2548]              _decimals_ERC20Detailed[this] := 0;
[L2550]              _name_ERC20Detailed[this] := name_s606;
[L2551]              _symbol_ERC20Detailed[this] := symbol_s606;
[L2552]              _decimals_ERC20Detailed[this] := decimals_s606;
[L2573]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s606, symbol_s606, decimals_s606);
[L2574]  COND FALSE  !(revert)
[L2803]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 2048224778, 26805932, 8);
[L2804]  COND FALSE  !(revert)
[L2807]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L2649]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L2649]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2650]  COND FALSE  !(revert)
[L2653]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1895]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L1895]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  COND FALSE  !(revert)
[L1899]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1871]              assume msgsender_MSG != null;
[L1872]              Balance[this] := 0;
[L1873]              _balances_ERC20[this] := zeroRefintArr();
[L1874]              sum__balances0[this] := 0;
[L1875]              _allowed_ERC20[this] := zeroRefRefintArr();
[L1876]              sum__allowed1[this] := 0;
[L1877]              _totalSupply_ERC20[this] := 0;
[L1899]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1900]  COND FALSE  !(revert)
[L2653]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2654]  COND FALSE  !(revert)
[L2657]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2626]              assume msgsender_MSG != null;
[L2627]              Balance[this] := 0;
[L2657]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2658]  COND FALSE  !(revert)
[L2807]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L2808]  COND FALSE  !(revert)
[L2811]  CALL        call BNS_BNS_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2753]              assume msgsender_MSG != null;
[L2754]              Balance[this] := 0;
[L2756]              __var_16 := 250000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2757]  COND TRUE   DType[this] == BNS
[L2758]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 250000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2329]              __var_7 := null;
[L2330]  COND FALSE  !(!(account_s464 != null))
[L2334]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L1826]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]  COND FALSE  !(!(c_s174 >= a_s174))
[L1831]              __ret_0_ := c_s174;
[L2334]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L2335]  COND FALSE  !(revert)
[L2338]              _totalSupply_ERC20[this] := __var_8;
[L2339]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s464], value_s464);
[L1826]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]  COND FALSE  !(!(c_s174 >= a_s174))
[L1831]              __ret_0_ := c_s174;
[L2339]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s464], value_s464);
[L2340]  COND FALSE  !(revert)
[L2343]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s464];
[L2344]              _balances_ERC20[this][account_s464] := __var_9;
[L2345]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s464];
[L2346]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2758]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 250000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2759]  COND FALSE  !(revert)
[L2811]  RET         call BNS_BNS_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]  COND FALSE  !(revert)
[L1105]  RET         call BNS_BNS__success(this, msgsender_MSG, msgvalue_MSG);
[L1106]              assume !revert && gas >= 0;
[L4562]  RET         call BNS_BNS(this, msgsender_MSG, msgvalue_MSG);
[L4563]              assume !revert && gas >= 0;
[L4566]  CALL        call CorralChoice_BNS(this);
[L4415]              havoc msgsender_MSG;
[L4416]              havoc msgvalue_MSG;
[L4417]              havoc choice;
[L4418]              havoc to_s268;
[L4419]              havoc value_s268;
[L4420]              havoc __ret_0_transfer;
[L4421]              havoc spender_s287;
[L4422]              havoc value_s287;
[L4423]              havoc __ret_0_approve;
[L4424]              havoc from_s322;
[L4425]              havoc to_s322;
[L4426]              havoc value_s322;
[L4427]              havoc __ret_0_transferFrom;
[L4428]              havoc __ret_0_totalSupply;
[L4429]              havoc owner_s233;
[L4430]              havoc __ret_0_balanceOf;
[L4431]              havoc owner_s249;
[L4432]              havoc spender_s249;
[L4433]              havoc __ret_0_allowance;
[L4434]              havoc spender_s349;
[L4435]              havoc addedValue_s349;
[L4436]              havoc __ret_0_increaseAllowance;
[L4437]              havoc spender_s376;
[L4438]              havoc subtractedValue_s376;
[L4439]              havoc __ret_0_decreaseAllowance;
[L4440]              havoc name_s606;
[L4441]              havoc symbol_s606;
[L4442]              havoc decimals_s606;
[L4443]              havoc __ret_0_name;
[L4444]              havoc __ret_0_symbol;
[L4445]              havoc __ret_0_decimals;
[L4446]              havoc value_s646;
[L4447]              havoc from_s659;
[L4448]              havoc value_s659;
[L4449]              havoc tmpNow;
[L4450]              havoc gas;
[L4451]              assume gas > 4000000 && gas <= 8000000;
[L4452]              tmpNow := now;
[L4453]              havoc now;
[L4454]              assume now > tmpNow;
[L4455]              assume msgsender_MSG != null;
[L4456]              assume DType[msgsender_MSG] != IERC20;
[L4457]              assume DType[msgsender_MSG] != SafeMath;
[L4458]              assume DType[msgsender_MSG] != ERC20;
[L4459]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4460]              assume DType[msgsender_MSG] != ERC20Burnable;
[L4461]              assume DType[msgsender_MSG] != BNS;
[L4462]              Alloc[msgsender_MSG] := true;
[L4463]  COND TRUE   choice == 13
[L4464]              gas := gas - 21000;
[L4465]  COND TRUE   gas >= 0
[L4466]              assume value_s268 >= 0 && value_s268 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4467]              assume msgvalue_MSG == 0;
[L4468]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s268 && value_s268 <= _balances_ERC20[this][msgsender_MSG]) && value_s268 >= 0) && value_s268 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s268] >= 0) && _balances_ERC20[this][to_s268] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L404]               havoc __exception;
[L405]               revert := false;
[L406]   COND TRUE   __exception
[L407]               __tmp__Balance := Balance;
[L408]               __tmp__DType := DType;
[L409]               __tmp__Alloc := Alloc;
[L410]               __tmp__balance_ADDR := balance_ADDR;
[L411]               __tmp__M_Ref_int := M_Ref_int;
[L412]               __tmp__sum__balances0 := sum__balances0;
[L413]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L414]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L415]               __tmp__sum__allowed1 := sum__allowed1;
[L416]               __tmp__Length := Length;
[L417]               __tmp__now := now;
[L418]               __tmp___balances_ERC20 := _balances_ERC20;
[L419]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L420]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L421]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L422]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L423]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L424]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L1943]  COND TRUE   __tmp__DType[this] == BNS
[L1944]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L2252]              __var_4 := null;
[L2253]  COND TRUE   !(to_s422 != null)
[L2254]              revert := true;
[L1944]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L1945]  COND TRUE   revert
[L424]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L425]               assume revert || gas < 0;
[L4468]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L4566]  RET         call CorralChoice_BNS(this);

Loop:
[L4566]  CALL       call CorralChoice_BNS(this);
[L4415]             havoc msgsender_MSG;
[L4416]             havoc msgvalue_MSG;
[L4417]             havoc choice;
[L4418]             havoc to_s268;
[L4419]             havoc value_s268;
[L4420]             havoc __ret_0_transfer;
[L4421]             havoc spender_s287;
[L4422]             havoc value_s287;
[L4423]             havoc __ret_0_approve;
[L4424]             havoc from_s322;
[L4425]             havoc to_s322;
[L4426]             havoc value_s322;
[L4427]             havoc __ret_0_transferFrom;
[L4428]             havoc __ret_0_totalSupply;
[L4429]             havoc owner_s233;
[L4430]             havoc __ret_0_balanceOf;
[L4431]             havoc owner_s249;
[L4432]             havoc spender_s249;
[L4433]             havoc __ret_0_allowance;
[L4434]             havoc spender_s349;
[L4435]             havoc addedValue_s349;
[L4436]             havoc __ret_0_increaseAllowance;
[L4437]             havoc spender_s376;
[L4438]             havoc subtractedValue_s376;
[L4439]             havoc __ret_0_decreaseAllowance;
[L4440]             havoc name_s606;
[L4441]             havoc symbol_s606;
[L4442]             havoc decimals_s606;
[L4443]             havoc __ret_0_name;
[L4444]             havoc __ret_0_symbol;
[L4445]             havoc __ret_0_decimals;
[L4446]             havoc value_s646;
[L4447]             havoc from_s659;
[L4448]             havoc value_s659;
[L4449]             havoc tmpNow;
[L4450]             havoc gas;
[L4451]             assume gas > 4000000 && gas <= 8000000;
[L4452]             tmpNow := now;
[L4453]             havoc now;
[L4454]             assume now > tmpNow;
[L4455]             assume msgsender_MSG != null;
[L4456]             assume DType[msgsender_MSG] != IERC20;
[L4457]             assume DType[msgsender_MSG] != SafeMath;
[L4458]             assume DType[msgsender_MSG] != ERC20;
[L4459]             assume DType[msgsender_MSG] != ERC20Detailed;
[L4460]             assume DType[msgsender_MSG] != ERC20Burnable;
[L4461]             assume DType[msgsender_MSG] != BNS;
[L4462]             Alloc[msgsender_MSG] := true;
[L4463]  COND TRUE  choice == 13
[L4464]             gas := gas - 21000;
[L4465]  COND TRUE  gas >= 0
[L4466]             assume value_s268 >= 0 && value_s268 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4467]             assume msgvalue_MSG == 0;
[L4468]  CALL       call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L2]                revert_hold := revert;
[L2]                revert := false;
[L2]                assume ((((((msgsender_MSG == to_s268 && value_s268 <= _balances_ERC20[this][msgsender_MSG]) && value_s268 >= 0) && value_s268 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s268] >= 0) && _balances_ERC20[this][to_s268] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                call_transfer_ERC200 := true;
[L2]                call_transfer_ERC200 := false;
[L2]                revert := revert_hold;
[L404]              havoc __exception;
[L405]              revert := false;
[L406]   COND TRUE  __exception
[L407]              __tmp__Balance := Balance;
[L408]              __tmp__DType := DType;
[L409]              __tmp__Alloc := Alloc;
[L410]              __tmp__balance_ADDR := balance_ADDR;
[L411]              __tmp__M_Ref_int := M_Ref_int;
[L412]              __tmp__sum__balances0 := sum__balances0;
[L413]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L414]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L415]              __tmp__sum__allowed1 := sum__allowed1;
[L416]              __tmp__Length := Length;
[L417]              __tmp__now := now;
[L418]              __tmp___balances_ERC20 := _balances_ERC20;
[L419]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L420]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L421]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L422]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L423]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L424]   CALL       call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L1943]  COND TRUE  __tmp__DType[this] == BNS
[L1944]  CALL       call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L2252]             __var_4 := null;
[L2253]  COND TRUE  !(to_s422 != null)
[L2254]             revert := true;
[L1944]  RET        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L1945]  COND TRUE  revert
[L424]   RET        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L425]              assume revert || gas < 0;
[L4468]  RET        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L4566]  RET        call CorralChoice_BNS(this);

[2020-11-25 01:13:37,260 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:13:37,260 INFO  L82        PathProgramCache]: Analyzing trace with hash -731773106, now seen corresponding path program 1 times
[2020-11-25 01:13:37,261 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:13:37,273 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:13:37,314 INFO  L134       CoverageAnalysis]: Checked inductivity of 124 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 124 trivial. 0 not checked.
[2020-11-25 01:13:37,314 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:13:37,314 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 01:13:37,315 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:13:37,315 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 01:13:37,315 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 01:13:37,315 INFO  L87              Difference]: Start difference. First operand 2564 states and 2925 transitions. cyclomatic complexity: 363 Second operand 7 states.
[2020-11-25 01:13:37,362 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:13:37,362 INFO  L93              Difference]: Finished difference Result 2660 states and 3038 transitions.
[2020-11-25 01:13:37,362 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 01:13:37,363 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2660 states and 3038 transitions.
[2020-11-25 01:13:37,368 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:13:37,377 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2660 states to 2652 states and 3030 transitions.
[2020-11-25 01:13:37,377 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 717
[2020-11-25 01:13:37,377 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 717
[2020-11-25 01:13:37,377 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2652 states and 3030 transitions.
[2020-11-25 01:13:37,380 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:13:37,380 INFO  L728         BuchiCegarLoop]: Abstraction has 2652 states and 3030 transitions.
[2020-11-25 01:13:37,382 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2652 states and 3030 transitions.
[2020-11-25 01:13:37,403 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2652 to 2639.
[2020-11-25 01:13:37,403 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2639 states.
[2020-11-25 01:13:37,406 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2639 states to 2639 states and 3015 transitions.
[2020-11-25 01:13:37,406 INFO  L751         BuchiCegarLoop]: Abstraction has 2639 states and 3015 transitions.
[2020-11-25 01:13:37,406 INFO  L631         BuchiCegarLoop]: Abstraction has 2639 states and 3015 transitions.
[2020-11-25 01:13:37,406 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 01:13:37,406 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2639 states and 3015 transitions.
[2020-11-25 01:13:37,409 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:13:37,409 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:13:37,409 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:13:37,411 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:13:37,411 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4556]              assume null == 0;
[L4557]  CALL        call this := FreshRefGenerator__success();
[L1661]              havoc newRef;
[L1662]              assume Alloc[newRef] == false;
[L1663]              Alloc[newRef] := true;
[L1664]              assume newRef != null;
[L4557]  RET         call this := FreshRefGenerator__success();
[L4558]              assume now >= 0;
[L4559]              assume DType[this] == BNS;
[L4560]              assume msgvalue_MSG == 0;
[L4561]              gas := gas - 53000;
[L4562]  CALL        call BNS_BNS(this, msgsender_MSG, msgvalue_MSG);
[L1082]              havoc __exception;
[L1083]              revert := false;
[L1084]  COND FALSE  !(__exception)
[L1105]  CALL        call BNS_BNS__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1895]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L1895]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  COND FALSE  !(revert)
[L1899]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1871]              assume msgsender_MSG != null;
[L1872]              Balance[this] := 0;
[L1873]              _balances_ERC20[this] := zeroRefintArr();
[L1874]              sum__balances0[this] := 0;
[L1875]              _allowed_ERC20[this] := zeroRefRefintArr();
[L1876]              sum__allowed1[this] := 0;
[L1877]              _totalSupply_ERC20[this] := 0;
[L1899]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1900]  COND FALSE  !(revert)
[L2799]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L2803]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 2048224778, 26805932, 8);
[L2569]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L2569]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2570]  COND FALSE  !(revert)
[L2573]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s606, symbol_s606, decimals_s606);
[L2544]              assume msgsender_MSG != null;
[L2545]              Balance[this] := 0;
[L2546]              _name_ERC20Detailed[this] := -2028290499;
[L2547]              _symbol_ERC20Detailed[this] := -2028290499;
[L2548]              _decimals_ERC20Detailed[this] := 0;
[L2550]              _name_ERC20Detailed[this] := name_s606;
[L2551]              _symbol_ERC20Detailed[this] := symbol_s606;
[L2552]              _decimals_ERC20Detailed[this] := decimals_s606;
[L2573]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s606, symbol_s606, decimals_s606);
[L2574]  COND FALSE  !(revert)
[L2803]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 2048224778, 26805932, 8);
[L2804]  COND FALSE  !(revert)
[L2807]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L2649]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L2649]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2650]  COND FALSE  !(revert)
[L2653]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1895]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L1895]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  COND FALSE  !(revert)
[L1899]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1871]              assume msgsender_MSG != null;
[L1872]              Balance[this] := 0;
[L1873]              _balances_ERC20[this] := zeroRefintArr();
[L1874]              sum__balances0[this] := 0;
[L1875]              _allowed_ERC20[this] := zeroRefRefintArr();
[L1876]              sum__allowed1[this] := 0;
[L1877]              _totalSupply_ERC20[this] := 0;
[L1899]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1900]  COND FALSE  !(revert)
[L2653]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2654]  COND FALSE  !(revert)
[L2657]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2626]              assume msgsender_MSG != null;
[L2627]              Balance[this] := 0;
[L2657]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2658]  COND FALSE  !(revert)
[L2807]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L2808]  COND FALSE  !(revert)
[L2811]  CALL        call BNS_BNS_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2753]              assume msgsender_MSG != null;
[L2754]              Balance[this] := 0;
[L2756]              __var_16 := 250000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2757]  COND TRUE   DType[this] == BNS
[L2758]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 250000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2329]              __var_7 := null;
[L2330]  COND FALSE  !(!(account_s464 != null))
[L2334]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L1826]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]  COND FALSE  !(!(c_s174 >= a_s174))
[L1831]              __ret_0_ := c_s174;
[L2334]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L2335]  COND FALSE  !(revert)
[L2338]              _totalSupply_ERC20[this] := __var_8;
[L2339]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s464], value_s464);
[L1826]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]  COND FALSE  !(!(c_s174 >= a_s174))
[L1831]              __ret_0_ := c_s174;
[L2339]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s464], value_s464);
[L2340]  COND FALSE  !(revert)
[L2343]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s464];
[L2344]              _balances_ERC20[this][account_s464] := __var_9;
[L2345]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s464];
[L2346]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2758]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 250000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2759]  COND FALSE  !(revert)
[L2811]  RET         call BNS_BNS_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]  COND FALSE  !(revert)
[L1105]  RET         call BNS_BNS__success(this, msgsender_MSG, msgvalue_MSG);
[L1106]              assume !revert && gas >= 0;
[L4562]  RET         call BNS_BNS(this, msgsender_MSG, msgvalue_MSG);
[L4563]              assume !revert && gas >= 0;
[L4566]  CALL        call CorralChoice_BNS(this);
[L4415]              havoc msgsender_MSG;
[L4416]              havoc msgvalue_MSG;
[L4417]              havoc choice;
[L4418]              havoc to_s268;
[L4419]              havoc value_s268;
[L4420]              havoc __ret_0_transfer;
[L4421]              havoc spender_s287;
[L4422]              havoc value_s287;
[L4423]              havoc __ret_0_approve;
[L4424]              havoc from_s322;
[L4425]              havoc to_s322;
[L4426]              havoc value_s322;
[L4427]              havoc __ret_0_transferFrom;
[L4428]              havoc __ret_0_totalSupply;
[L4429]              havoc owner_s233;
[L4430]              havoc __ret_0_balanceOf;
[L4431]              havoc owner_s249;
[L4432]              havoc spender_s249;
[L4433]              havoc __ret_0_allowance;
[L4434]              havoc spender_s349;
[L4435]              havoc addedValue_s349;
[L4436]              havoc __ret_0_increaseAllowance;
[L4437]              havoc spender_s376;
[L4438]              havoc subtractedValue_s376;
[L4439]              havoc __ret_0_decreaseAllowance;
[L4440]              havoc name_s606;
[L4441]              havoc symbol_s606;
[L4442]              havoc decimals_s606;
[L4443]              havoc __ret_0_name;
[L4444]              havoc __ret_0_symbol;
[L4445]              havoc __ret_0_decimals;
[L4446]              havoc value_s646;
[L4447]              havoc from_s659;
[L4448]              havoc value_s659;
[L4449]              havoc tmpNow;
[L4450]              havoc gas;
[L4451]              assume gas > 4000000 && gas <= 8000000;
[L4452]              tmpNow := now;
[L4453]              havoc now;
[L4454]              assume now > tmpNow;
[L4455]              assume msgsender_MSG != null;
[L4456]              assume DType[msgsender_MSG] != IERC20;
[L4457]              assume DType[msgsender_MSG] != SafeMath;
[L4458]              assume DType[msgsender_MSG] != ERC20;
[L4459]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4460]              assume DType[msgsender_MSG] != ERC20Burnable;
[L4461]              assume DType[msgsender_MSG] != BNS;
[L4462]              Alloc[msgsender_MSG] := true;
[L4463]  COND TRUE   choice == 13
[L4464]              gas := gas - 21000;
[L4465]  COND TRUE   gas >= 0
[L4466]              assume value_s268 >= 0 && value_s268 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4467]              assume msgvalue_MSG == 0;
[L4468]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s268 && value_s268 <= _balances_ERC20[this][msgsender_MSG]) && value_s268 >= 0) && value_s268 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s268] >= 0) && _balances_ERC20[this][to_s268] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L404]               havoc __exception;
[L405]               revert := false;
[L406]   COND TRUE   __exception
[L407]               __tmp__Balance := Balance;
[L408]               __tmp__DType := DType;
[L409]               __tmp__Alloc := Alloc;
[L410]               __tmp__balance_ADDR := balance_ADDR;
[L411]               __tmp__M_Ref_int := M_Ref_int;
[L412]               __tmp__sum__balances0 := sum__balances0;
[L413]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L414]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L415]               __tmp__sum__allowed1 := sum__allowed1;
[L416]               __tmp__Length := Length;
[L417]               __tmp__now := now;
[L418]               __tmp___balances_ERC20 := _balances_ERC20;
[L419]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L420]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L421]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L422]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L423]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L424]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L1943]  COND TRUE   __tmp__DType[this] == BNS
[L1944]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L2252]              __var_4 := null;
[L2253]  COND FALSE  !(!(to_s422 != null))
[L2257]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s422], value_s422);
[L1790]  COND TRUE   !(b_s150 <= a_s150)
[L1791]              revert := true;
[L2257]  RET         call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s422], value_s422);
[L2258]  COND TRUE   revert
[L1944]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L1945]  COND TRUE   revert
[L424]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L425]               assume revert || gas < 0;
[L4468]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L4566]  RET         call CorralChoice_BNS(this);

Loop:
[L4566]  CALL        call CorralChoice_BNS(this);
[L4415]              havoc msgsender_MSG;
[L4416]              havoc msgvalue_MSG;
[L4417]              havoc choice;
[L4418]              havoc to_s268;
[L4419]              havoc value_s268;
[L4420]              havoc __ret_0_transfer;
[L4421]              havoc spender_s287;
[L4422]              havoc value_s287;
[L4423]              havoc __ret_0_approve;
[L4424]              havoc from_s322;
[L4425]              havoc to_s322;
[L4426]              havoc value_s322;
[L4427]              havoc __ret_0_transferFrom;
[L4428]              havoc __ret_0_totalSupply;
[L4429]              havoc owner_s233;
[L4430]              havoc __ret_0_balanceOf;
[L4431]              havoc owner_s249;
[L4432]              havoc spender_s249;
[L4433]              havoc __ret_0_allowance;
[L4434]              havoc spender_s349;
[L4435]              havoc addedValue_s349;
[L4436]              havoc __ret_0_increaseAllowance;
[L4437]              havoc spender_s376;
[L4438]              havoc subtractedValue_s376;
[L4439]              havoc __ret_0_decreaseAllowance;
[L4440]              havoc name_s606;
[L4441]              havoc symbol_s606;
[L4442]              havoc decimals_s606;
[L4443]              havoc __ret_0_name;
[L4444]              havoc __ret_0_symbol;
[L4445]              havoc __ret_0_decimals;
[L4446]              havoc value_s646;
[L4447]              havoc from_s659;
[L4448]              havoc value_s659;
[L4449]              havoc tmpNow;
[L4450]              havoc gas;
[L4451]              assume gas > 4000000 && gas <= 8000000;
[L4452]              tmpNow := now;
[L4453]              havoc now;
[L4454]              assume now > tmpNow;
[L4455]              assume msgsender_MSG != null;
[L4456]              assume DType[msgsender_MSG] != IERC20;
[L4457]              assume DType[msgsender_MSG] != SafeMath;
[L4458]              assume DType[msgsender_MSG] != ERC20;
[L4459]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4460]              assume DType[msgsender_MSG] != ERC20Burnable;
[L4461]              assume DType[msgsender_MSG] != BNS;
[L4462]              Alloc[msgsender_MSG] := true;
[L4463]  COND TRUE   choice == 13
[L4464]              gas := gas - 21000;
[L4465]  COND TRUE   gas >= 0
[L4466]              assume value_s268 >= 0 && value_s268 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4467]              assume msgvalue_MSG == 0;
[L4468]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s268 && value_s268 <= _balances_ERC20[this][msgsender_MSG]) && value_s268 >= 0) && value_s268 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s268] >= 0) && _balances_ERC20[this][to_s268] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L404]               havoc __exception;
[L405]               revert := false;
[L406]   COND TRUE   __exception
[L407]               __tmp__Balance := Balance;
[L408]               __tmp__DType := DType;
[L409]               __tmp__Alloc := Alloc;
[L410]               __tmp__balance_ADDR := balance_ADDR;
[L411]               __tmp__M_Ref_int := M_Ref_int;
[L412]               __tmp__sum__balances0 := sum__balances0;
[L413]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L414]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L415]               __tmp__sum__allowed1 := sum__allowed1;
[L416]               __tmp__Length := Length;
[L417]               __tmp__now := now;
[L418]               __tmp___balances_ERC20 := _balances_ERC20;
[L419]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L420]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L421]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L422]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L423]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L424]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L1943]  COND TRUE   __tmp__DType[this] == BNS
[L1944]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L2252]              __var_4 := null;
[L2253]  COND FALSE  !(!(to_s422 != null))
[L2257]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s422], value_s422);
[L1790]  COND TRUE   !(b_s150 <= a_s150)
[L1791]              revert := true;
[L2257]  RET         call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s422], value_s422);
[L2258]  COND TRUE   revert
[L1944]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L1945]  COND TRUE   revert
[L424]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L425]               assume revert || gas < 0;
[L4468]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L4566]  RET         call CorralChoice_BNS(this);

[2020-11-25 01:13:37,414 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:13:37,415 INFO  L82        PathProgramCache]: Analyzing trace with hash 1586281343, now seen corresponding path program 1 times
[2020-11-25 01:13:37,415 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:13:37,426 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:13:37,490 INFO  L134       CoverageAnalysis]: Checked inductivity of 124 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 124 trivial. 0 not checked.
[2020-11-25 01:13:37,490 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:13:37,490 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 01:13:37,490 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:13:37,491 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 01:13:37,491 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 01:13:37,491 INFO  L87              Difference]: Start difference. First operand 2639 states and 3015 transitions. cyclomatic complexity: 378 Second operand 8 states.
[2020-11-25 01:13:38,281 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:13:38,281 INFO  L93              Difference]: Finished difference Result 2792 states and 3189 transitions.
[2020-11-25 01:13:38,281 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 01:13:38,281 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2792 states and 3189 transitions.
[2020-11-25 01:13:38,288 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:13:38,295 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2792 states to 2792 states and 3189 transitions.
[2020-11-25 01:13:38,295 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 790
[2020-11-25 01:13:38,296 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 790
[2020-11-25 01:13:38,296 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2792 states and 3189 transitions.
[2020-11-25 01:13:38,298 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:13:38,298 INFO  L728         BuchiCegarLoop]: Abstraction has 2792 states and 3189 transitions.
[2020-11-25 01:13:38,300 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2792 states and 3189 transitions.
[2020-11-25 01:13:38,316 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2792 to 2639.
[2020-11-25 01:13:38,316 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2639 states.
[2020-11-25 01:13:38,319 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2639 states to 2639 states and 3015 transitions.
[2020-11-25 01:13:38,319 INFO  L751         BuchiCegarLoop]: Abstraction has 2639 states and 3015 transitions.
[2020-11-25 01:13:38,319 INFO  L631         BuchiCegarLoop]: Abstraction has 2639 states and 3015 transitions.
[2020-11-25 01:13:38,319 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 01:13:38,319 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2639 states and 3015 transitions.
[2020-11-25 01:13:38,322 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:13:38,322 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:13:38,322 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:13:38,324 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:13:38,324 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4556]              assume null == 0;
[L4557]  CALL        call this := FreshRefGenerator__success();
[L1661]              havoc newRef;
[L1662]              assume Alloc[newRef] == false;
[L1663]              Alloc[newRef] := true;
[L1664]              assume newRef != null;
[L4557]  RET         call this := FreshRefGenerator__success();
[L4558]              assume now >= 0;
[L4559]              assume DType[this] == BNS;
[L4560]              assume msgvalue_MSG == 0;
[L4561]              gas := gas - 53000;
[L4562]  CALL        call BNS_BNS(this, msgsender_MSG, msgvalue_MSG);
[L1082]              havoc __exception;
[L1083]              revert := false;
[L1084]  COND FALSE  !(__exception)
[L1105]  CALL        call BNS_BNS__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1895]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L1895]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  COND FALSE  !(revert)
[L1899]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1871]              assume msgsender_MSG != null;
[L1872]              Balance[this] := 0;
[L1873]              _balances_ERC20[this] := zeroRefintArr();
[L1874]              sum__balances0[this] := 0;
[L1875]              _allowed_ERC20[this] := zeroRefRefintArr();
[L1876]              sum__allowed1[this] := 0;
[L1877]              _totalSupply_ERC20[this] := 0;
[L1899]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1900]  COND FALSE  !(revert)
[L2799]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L2803]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 2048224778, 26805932, 8);
[L2569]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L2569]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2570]  COND FALSE  !(revert)
[L2573]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s606, symbol_s606, decimals_s606);
[L2544]              assume msgsender_MSG != null;
[L2545]              Balance[this] := 0;
[L2546]              _name_ERC20Detailed[this] := -2028290499;
[L2547]              _symbol_ERC20Detailed[this] := -2028290499;
[L2548]              _decimals_ERC20Detailed[this] := 0;
[L2550]              _name_ERC20Detailed[this] := name_s606;
[L2551]              _symbol_ERC20Detailed[this] := symbol_s606;
[L2552]              _decimals_ERC20Detailed[this] := decimals_s606;
[L2573]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s606, symbol_s606, decimals_s606);
[L2574]  COND FALSE  !(revert)
[L2803]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 2048224778, 26805932, 8);
[L2804]  COND FALSE  !(revert)
[L2807]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L2649]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L2649]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2650]  COND FALSE  !(revert)
[L2653]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1895]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L1895]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  COND FALSE  !(revert)
[L1899]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1871]              assume msgsender_MSG != null;
[L1872]              Balance[this] := 0;
[L1873]              _balances_ERC20[this] := zeroRefintArr();
[L1874]              sum__balances0[this] := 0;
[L1875]              _allowed_ERC20[this] := zeroRefRefintArr();
[L1876]              sum__allowed1[this] := 0;
[L1877]              _totalSupply_ERC20[this] := 0;
[L1899]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1900]  COND FALSE  !(revert)
[L2653]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2654]  COND FALSE  !(revert)
[L2657]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2626]              assume msgsender_MSG != null;
[L2627]              Balance[this] := 0;
[L2657]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2658]  COND FALSE  !(revert)
[L2807]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L2808]  COND FALSE  !(revert)
[L2811]  CALL        call BNS_BNS_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2753]              assume msgsender_MSG != null;
[L2754]              Balance[this] := 0;
[L2756]              __var_16 := 250000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2757]  COND TRUE   DType[this] == BNS
[L2758]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 250000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2329]              __var_7 := null;
[L2330]  COND FALSE  !(!(account_s464 != null))
[L2334]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L1826]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]  COND FALSE  !(!(c_s174 >= a_s174))
[L1831]              __ret_0_ := c_s174;
[L2334]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L2335]  COND FALSE  !(revert)
[L2338]              _totalSupply_ERC20[this] := __var_8;
[L2339]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s464], value_s464);
[L1826]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]  COND FALSE  !(!(c_s174 >= a_s174))
[L1831]              __ret_0_ := c_s174;
[L2339]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s464], value_s464);
[L2340]  COND FALSE  !(revert)
[L2343]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s464];
[L2344]              _balances_ERC20[this][account_s464] := __var_9;
[L2345]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s464];
[L2346]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2758]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 250000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2759]  COND FALSE  !(revert)
[L2811]  RET         call BNS_BNS_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]  COND FALSE  !(revert)
[L1105]  RET         call BNS_BNS__success(this, msgsender_MSG, msgvalue_MSG);
[L1106]              assume !revert && gas >= 0;
[L4562]  RET         call BNS_BNS(this, msgsender_MSG, msgvalue_MSG);
[L4563]              assume !revert && gas >= 0;
[L4566]  CALL        call CorralChoice_BNS(this);
[L4415]              havoc msgsender_MSG;
[L4416]              havoc msgvalue_MSG;
[L4417]              havoc choice;
[L4418]              havoc to_s268;
[L4419]              havoc value_s268;
[L4420]              havoc __ret_0_transfer;
[L4421]              havoc spender_s287;
[L4422]              havoc value_s287;
[L4423]              havoc __ret_0_approve;
[L4424]              havoc from_s322;
[L4425]              havoc to_s322;
[L4426]              havoc value_s322;
[L4427]              havoc __ret_0_transferFrom;
[L4428]              havoc __ret_0_totalSupply;
[L4429]              havoc owner_s233;
[L4430]              havoc __ret_0_balanceOf;
[L4431]              havoc owner_s249;
[L4432]              havoc spender_s249;
[L4433]              havoc __ret_0_allowance;
[L4434]              havoc spender_s349;
[L4435]              havoc addedValue_s349;
[L4436]              havoc __ret_0_increaseAllowance;
[L4437]              havoc spender_s376;
[L4438]              havoc subtractedValue_s376;
[L4439]              havoc __ret_0_decreaseAllowance;
[L4440]              havoc name_s606;
[L4441]              havoc symbol_s606;
[L4442]              havoc decimals_s606;
[L4443]              havoc __ret_0_name;
[L4444]              havoc __ret_0_symbol;
[L4445]              havoc __ret_0_decimals;
[L4446]              havoc value_s646;
[L4447]              havoc from_s659;
[L4448]              havoc value_s659;
[L4449]              havoc tmpNow;
[L4450]              havoc gas;
[L4451]              assume gas > 4000000 && gas <= 8000000;
[L4452]              tmpNow := now;
[L4453]              havoc now;
[L4454]              assume now > tmpNow;
[L4455]              assume msgsender_MSG != null;
[L4456]              assume DType[msgsender_MSG] != IERC20;
[L4457]              assume DType[msgsender_MSG] != SafeMath;
[L4458]              assume DType[msgsender_MSG] != ERC20;
[L4459]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4460]              assume DType[msgsender_MSG] != ERC20Burnable;
[L4461]              assume DType[msgsender_MSG] != BNS;
[L4462]              Alloc[msgsender_MSG] := true;
[L4463]  COND TRUE   choice == 13
[L4464]              gas := gas - 21000;
[L4465]  COND TRUE   gas >= 0
[L4466]              assume value_s268 >= 0 && value_s268 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4467]              assume msgvalue_MSG == 0;
[L4468]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s268 && value_s268 <= _balances_ERC20[this][msgsender_MSG]) && value_s268 >= 0) && value_s268 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s268] >= 0) && _balances_ERC20[this][to_s268] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L404]               havoc __exception;
[L405]               revert := false;
[L406]   COND FALSE  !(__exception)
[L427]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L1967]  COND TRUE   DType[this] == BNS
[L1968]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L2278]              __var_4 := null;
[L2279]  COND FALSE  !(!(to_s422 != null))
[L2283]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L1802]  COND FALSE  !(!(b_s150 <= a_s150))
[L1806]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1807]              __ret_0_ := c_s150;
[L2283]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L2284]  COND FALSE  !(revert)
[L2287]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s422];
[L2288]              _balances_ERC20[this][from_s422] := __var_5;
[L2289]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s422];
[L2290]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L1826]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]  COND FALSE  !(!(c_s174 >= a_s174))
[L1831]              __ret_0_ := c_s174;
[L2290]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L2291]  COND FALSE  !(revert)
[L2294]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s422];
[L2295]              _balances_ERC20[this][to_s422] := __var_6;
[L2296]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s422];
[L2297]              assert { :EventEmitted "Transfer_ERC20" } true;
[L1968]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L1969]  COND FALSE  !(revert)
[L1985]              __ret_0_ := true;
[L427]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L428]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4468]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L4566]  RET         call CorralChoice_BNS(this);

Loop:
[L4566]  CALL        call CorralChoice_BNS(this);
[L4415]              havoc msgsender_MSG;
[L4416]              havoc msgvalue_MSG;
[L4417]              havoc choice;
[L4418]              havoc to_s268;
[L4419]              havoc value_s268;
[L4420]              havoc __ret_0_transfer;
[L4421]              havoc spender_s287;
[L4422]              havoc value_s287;
[L4423]              havoc __ret_0_approve;
[L4424]              havoc from_s322;
[L4425]              havoc to_s322;
[L4426]              havoc value_s322;
[L4427]              havoc __ret_0_transferFrom;
[L4428]              havoc __ret_0_totalSupply;
[L4429]              havoc owner_s233;
[L4430]              havoc __ret_0_balanceOf;
[L4431]              havoc owner_s249;
[L4432]              havoc spender_s249;
[L4433]              havoc __ret_0_allowance;
[L4434]              havoc spender_s349;
[L4435]              havoc addedValue_s349;
[L4436]              havoc __ret_0_increaseAllowance;
[L4437]              havoc spender_s376;
[L4438]              havoc subtractedValue_s376;
[L4439]              havoc __ret_0_decreaseAllowance;
[L4440]              havoc name_s606;
[L4441]              havoc symbol_s606;
[L4442]              havoc decimals_s606;
[L4443]              havoc __ret_0_name;
[L4444]              havoc __ret_0_symbol;
[L4445]              havoc __ret_0_decimals;
[L4446]              havoc value_s646;
[L4447]              havoc from_s659;
[L4448]              havoc value_s659;
[L4449]              havoc tmpNow;
[L4450]              havoc gas;
[L4451]              assume gas > 4000000 && gas <= 8000000;
[L4452]              tmpNow := now;
[L4453]              havoc now;
[L4454]              assume now > tmpNow;
[L4455]              assume msgsender_MSG != null;
[L4456]              assume DType[msgsender_MSG] != IERC20;
[L4457]              assume DType[msgsender_MSG] != SafeMath;
[L4458]              assume DType[msgsender_MSG] != ERC20;
[L4459]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4460]              assume DType[msgsender_MSG] != ERC20Burnable;
[L4461]              assume DType[msgsender_MSG] != BNS;
[L4462]              Alloc[msgsender_MSG] := true;
[L4463]  COND TRUE   choice == 13
[L4464]              gas := gas - 21000;
[L4465]  COND TRUE   gas >= 0
[L4466]              assume value_s268 >= 0 && value_s268 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4467]              assume msgvalue_MSG == 0;
[L4468]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s268 && value_s268 <= _balances_ERC20[this][msgsender_MSG]) && value_s268 >= 0) && value_s268 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s268] >= 0) && _balances_ERC20[this][to_s268] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L404]               havoc __exception;
[L405]               revert := false;
[L406]   COND FALSE  !(__exception)
[L427]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L1967]  COND TRUE   DType[this] == BNS
[L1968]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L2278]              __var_4 := null;
[L2279]  COND FALSE  !(!(to_s422 != null))
[L2283]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L1802]  COND FALSE  !(!(b_s150 <= a_s150))
[L1806]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1807]              __ret_0_ := c_s150;
[L2283]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L2284]  COND FALSE  !(revert)
[L2287]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s422];
[L2288]              _balances_ERC20[this][from_s422] := __var_5;
[L2289]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s422];
[L2290]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L1826]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]  COND FALSE  !(!(c_s174 >= a_s174))
[L1831]              __ret_0_ := c_s174;
[L2290]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L2291]  COND FALSE  !(revert)
[L2294]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s422];
[L2295]              _balances_ERC20[this][to_s422] := __var_6;
[L2296]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s422];
[L2297]              assert { :EventEmitted "Transfer_ERC20" } true;
[L1968]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L1969]  COND FALSE  !(revert)
[L1985]              __ret_0_ := true;
[L427]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L428]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4468]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L4566]  RET         call CorralChoice_BNS(this);

[2020-11-25 01:13:38,327 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:13:38,327 INFO  L82        PathProgramCache]: Analyzing trace with hash 65206788, now seen corresponding path program 1 times
[2020-11-25 01:13:38,328 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:13:38,398 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:13:39,869 INFO  L134       CoverageAnalysis]: Checked inductivity of 124 backedges. 10 proven. 4 refuted. 0 times theorem prover too weak. 110 trivial. 0 not checked.
[2020-11-25 01:13:39,870 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:13:39,870 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [37] total 37
[2020-11-25 01:13:39,870 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:13:39,870 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 38 interpolants.
[2020-11-25 01:13:39,871 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=102, Invalid=1304, Unknown=0, NotChecked=0, Total=1406
[2020-11-25 01:13:39,871 INFO  L87              Difference]: Start difference. First operand 2639 states and 3015 transitions. cyclomatic complexity: 378 Second operand 38 states.
[2020-11-25 01:13:43,371 WARN  L188               SmtUtils]: Spent 103.00 ms on a formula simplification. DAG size of input: 84 DAG size of output: 72
[2020-11-25 01:13:48,517 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:13:48,517 INFO  L93              Difference]: Finished difference Result 2725 states and 3126 transitions.
[2020-11-25 01:13:48,517 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 36 states. 
[2020-11-25 01:13:48,518 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2725 states and 3126 transitions.
[2020-11-25 01:13:48,523 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 01:13:48,530 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2725 states to 2725 states and 3126 transitions.
[2020-11-25 01:13:48,530 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 742
[2020-11-25 01:13:48,530 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 742
[2020-11-25 01:13:48,530 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2725 states and 3126 transitions.
[2020-11-25 01:13:48,533 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:13:48,533 INFO  L728         BuchiCegarLoop]: Abstraction has 2725 states and 3126 transitions.
[2020-11-25 01:13:48,535 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2725 states and 3126 transitions.
[2020-11-25 01:13:48,551 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2725 to 2710.
[2020-11-25 01:13:48,551 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2710 states.
[2020-11-25 01:13:48,554 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2710 states to 2710 states and 3095 transitions.
[2020-11-25 01:13:48,554 INFO  L751         BuchiCegarLoop]: Abstraction has 2710 states and 3095 transitions.
[2020-11-25 01:13:48,554 INFO  L631         BuchiCegarLoop]: Abstraction has 2710 states and 3095 transitions.
[2020-11-25 01:13:48,554 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 01:13:48,554 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2710 states and 3095 transitions.
[2020-11-25 01:13:48,557 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:13:48,557 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:13:48,557 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:13:48,558 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:13:48,558 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4556]              assume null == 0;
[L4557]  CALL        call this := FreshRefGenerator__success();
[L1661]              havoc newRef;
[L1662]              assume Alloc[newRef] == false;
[L1663]              Alloc[newRef] := true;
[L1664]              assume newRef != null;
[L4557]  RET         call this := FreshRefGenerator__success();
[L4558]              assume now >= 0;
[L4559]              assume DType[this] == BNS;
[L4560]              assume msgvalue_MSG == 0;
[L4561]              gas := gas - 53000;
[L4562]  CALL        call BNS_BNS(this, msgsender_MSG, msgvalue_MSG);
[L1082]              havoc __exception;
[L1083]              revert := false;
[L1084]  COND FALSE  !(__exception)
[L1105]  CALL        call BNS_BNS__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1895]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L1895]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  COND FALSE  !(revert)
[L1899]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1871]              assume msgsender_MSG != null;
[L1872]              Balance[this] := 0;
[L1873]              _balances_ERC20[this] := zeroRefintArr();
[L1874]              sum__balances0[this] := 0;
[L1875]              _allowed_ERC20[this] := zeroRefRefintArr();
[L1876]              sum__allowed1[this] := 0;
[L1877]              _totalSupply_ERC20[this] := 0;
[L1899]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1900]  COND FALSE  !(revert)
[L2799]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L2803]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 2048224778, 26805932, 8);
[L2569]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L2569]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2570]  COND FALSE  !(revert)
[L2573]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s606, symbol_s606, decimals_s606);
[L2544]              assume msgsender_MSG != null;
[L2545]              Balance[this] := 0;
[L2546]              _name_ERC20Detailed[this] := -2028290499;
[L2547]              _symbol_ERC20Detailed[this] := -2028290499;
[L2548]              _decimals_ERC20Detailed[this] := 0;
[L2550]              _name_ERC20Detailed[this] := name_s606;
[L2551]              _symbol_ERC20Detailed[this] := symbol_s606;
[L2552]              _decimals_ERC20Detailed[this] := decimals_s606;
[L2573]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s606, symbol_s606, decimals_s606);
[L2574]  COND FALSE  !(revert)
[L2803]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 2048224778, 26805932, 8);
[L2804]  COND FALSE  !(revert)
[L2807]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L2649]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L2649]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2650]  COND FALSE  !(revert)
[L2653]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1895]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L1895]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  COND FALSE  !(revert)
[L1899]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1871]              assume msgsender_MSG != null;
[L1872]              Balance[this] := 0;
[L1873]              _balances_ERC20[this] := zeroRefintArr();
[L1874]              sum__balances0[this] := 0;
[L1875]              _allowed_ERC20[this] := zeroRefRefintArr();
[L1876]              sum__allowed1[this] := 0;
[L1877]              _totalSupply_ERC20[this] := 0;
[L1899]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1900]  COND FALSE  !(revert)
[L2653]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2654]  COND FALSE  !(revert)
[L2657]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2626]              assume msgsender_MSG != null;
[L2627]              Balance[this] := 0;
[L2657]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2658]  COND FALSE  !(revert)
[L2807]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L2808]  COND FALSE  !(revert)
[L2811]  CALL        call BNS_BNS_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2753]              assume msgsender_MSG != null;
[L2754]              Balance[this] := 0;
[L2756]              __var_16 := 250000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2757]  COND TRUE   DType[this] == BNS
[L2758]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 250000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2329]              __var_7 := null;
[L2330]  COND FALSE  !(!(account_s464 != null))
[L2334]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L1826]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]  COND FALSE  !(!(c_s174 >= a_s174))
[L1831]              __ret_0_ := c_s174;
[L2334]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L2335]  COND FALSE  !(revert)
[L2338]              _totalSupply_ERC20[this] := __var_8;
[L2339]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s464], value_s464);
[L1826]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]  COND FALSE  !(!(c_s174 >= a_s174))
[L1831]              __ret_0_ := c_s174;
[L2339]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s464], value_s464);
[L2340]  COND FALSE  !(revert)
[L2343]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s464];
[L2344]              _balances_ERC20[this][account_s464] := __var_9;
[L2345]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s464];
[L2346]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2758]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 250000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2759]  COND FALSE  !(revert)
[L2811]  RET         call BNS_BNS_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]  COND FALSE  !(revert)
[L1105]  RET         call BNS_BNS__success(this, msgsender_MSG, msgvalue_MSG);
[L1106]              assume !revert && gas >= 0;
[L4562]  RET         call BNS_BNS(this, msgsender_MSG, msgvalue_MSG);
[L4563]              assume !revert && gas >= 0;
[L4566]  CALL        call CorralChoice_BNS(this);
[L4415]              havoc msgsender_MSG;
[L4416]              havoc msgvalue_MSG;
[L4417]              havoc choice;
[L4418]              havoc to_s268;
[L4419]              havoc value_s268;
[L4420]              havoc __ret_0_transfer;
[L4421]              havoc spender_s287;
[L4422]              havoc value_s287;
[L4423]              havoc __ret_0_approve;
[L4424]              havoc from_s322;
[L4425]              havoc to_s322;
[L4426]              havoc value_s322;
[L4427]              havoc __ret_0_transferFrom;
[L4428]              havoc __ret_0_totalSupply;
[L4429]              havoc owner_s233;
[L4430]              havoc __ret_0_balanceOf;
[L4431]              havoc owner_s249;
[L4432]              havoc spender_s249;
[L4433]              havoc __ret_0_allowance;
[L4434]              havoc spender_s349;
[L4435]              havoc addedValue_s349;
[L4436]              havoc __ret_0_increaseAllowance;
[L4437]              havoc spender_s376;
[L4438]              havoc subtractedValue_s376;
[L4439]              havoc __ret_0_decreaseAllowance;
[L4440]              havoc name_s606;
[L4441]              havoc symbol_s606;
[L4442]              havoc decimals_s606;
[L4443]              havoc __ret_0_name;
[L4444]              havoc __ret_0_symbol;
[L4445]              havoc __ret_0_decimals;
[L4446]              havoc value_s646;
[L4447]              havoc from_s659;
[L4448]              havoc value_s659;
[L4449]              havoc tmpNow;
[L4450]              havoc gas;
[L4451]              assume gas > 4000000 && gas <= 8000000;
[L4452]              tmpNow := now;
[L4453]              havoc now;
[L4454]              assume now > tmpNow;
[L4455]              assume msgsender_MSG != null;
[L4456]              assume DType[msgsender_MSG] != IERC20;
[L4457]              assume DType[msgsender_MSG] != SafeMath;
[L4458]              assume DType[msgsender_MSG] != ERC20;
[L4459]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4460]              assume DType[msgsender_MSG] != ERC20Burnable;
[L4461]              assume DType[msgsender_MSG] != BNS;
[L4462]              Alloc[msgsender_MSG] := true;
[L4463]  COND TRUE   choice == 13
[L4464]              gas := gas - 21000;
[L4465]  COND TRUE   gas >= 0
[L4466]              assume value_s268 >= 0 && value_s268 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4467]              assume msgvalue_MSG == 0;
[L4468]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s268 && value_s268 <= _balances_ERC20[this][msgsender_MSG]) && value_s268 >= 0) && value_s268 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s268] >= 0) && _balances_ERC20[this][to_s268] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L404]               havoc __exception;
[L405]               revert := false;
[L406]   COND TRUE   __exception
[L407]               __tmp__Balance := Balance;
[L408]               __tmp__DType := DType;
[L409]               __tmp__Alloc := Alloc;
[L410]               __tmp__balance_ADDR := balance_ADDR;
[L411]               __tmp__M_Ref_int := M_Ref_int;
[L412]               __tmp__sum__balances0 := sum__balances0;
[L413]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L414]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L415]               __tmp__sum__allowed1 := sum__allowed1;
[L416]               __tmp__Length := Length;
[L417]               __tmp__now := now;
[L418]               __tmp___balances_ERC20 := _balances_ERC20;
[L419]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L420]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L421]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L422]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L423]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L424]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L1943]  COND TRUE   __tmp__DType[this] == BNS
[L1944]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L2252]              __var_4 := null;
[L2253]  COND FALSE  !(!(to_s422 != null))
[L2257]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s422], value_s422);
[L1790]  COND FALSE  !(!(b_s150 <= a_s150))
[L1794]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1795]              __ret_0_ := c_s150;
[L2257]  RET         call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s422], value_s422);
[L2258]  COND FALSE  !(revert)
[L2261]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][from_s422];
[L2262]              __tmp___balances_ERC20[this][from_s422] := __var_5;
[L2263]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][from_s422];
[L2264]  CALL        call __var_6 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][to_s422], value_s422);
[L1814]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1815]  COND TRUE   !(c_s174 >= a_s174)
[L1816]              revert := true;
[L2264]  RET         call __var_6 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][to_s422], value_s422);
[L2265]  COND TRUE   revert
[L1944]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L1945]  COND TRUE   revert
[L424]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L425]               assume revert || gas < 0;
[L4468]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L4566]  RET         call CorralChoice_BNS(this);

Loop:
[L4566]  CALL        call CorralChoice_BNS(this);
[L4415]              havoc msgsender_MSG;
[L4416]              havoc msgvalue_MSG;
[L4417]              havoc choice;
[L4418]              havoc to_s268;
[L4419]              havoc value_s268;
[L4420]              havoc __ret_0_transfer;
[L4421]              havoc spender_s287;
[L4422]              havoc value_s287;
[L4423]              havoc __ret_0_approve;
[L4424]              havoc from_s322;
[L4425]              havoc to_s322;
[L4426]              havoc value_s322;
[L4427]              havoc __ret_0_transferFrom;
[L4428]              havoc __ret_0_totalSupply;
[L4429]              havoc owner_s233;
[L4430]              havoc __ret_0_balanceOf;
[L4431]              havoc owner_s249;
[L4432]              havoc spender_s249;
[L4433]              havoc __ret_0_allowance;
[L4434]              havoc spender_s349;
[L4435]              havoc addedValue_s349;
[L4436]              havoc __ret_0_increaseAllowance;
[L4437]              havoc spender_s376;
[L4438]              havoc subtractedValue_s376;
[L4439]              havoc __ret_0_decreaseAllowance;
[L4440]              havoc name_s606;
[L4441]              havoc symbol_s606;
[L4442]              havoc decimals_s606;
[L4443]              havoc __ret_0_name;
[L4444]              havoc __ret_0_symbol;
[L4445]              havoc __ret_0_decimals;
[L4446]              havoc value_s646;
[L4447]              havoc from_s659;
[L4448]              havoc value_s659;
[L4449]              havoc tmpNow;
[L4450]              havoc gas;
[L4451]              assume gas > 4000000 && gas <= 8000000;
[L4452]              tmpNow := now;
[L4453]              havoc now;
[L4454]              assume now > tmpNow;
[L4455]              assume msgsender_MSG != null;
[L4456]              assume DType[msgsender_MSG] != IERC20;
[L4457]              assume DType[msgsender_MSG] != SafeMath;
[L4458]              assume DType[msgsender_MSG] != ERC20;
[L4459]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4460]              assume DType[msgsender_MSG] != ERC20Burnable;
[L4461]              assume DType[msgsender_MSG] != BNS;
[L4462]              Alloc[msgsender_MSG] := true;
[L4463]  COND TRUE   choice == 13
[L4464]              gas := gas - 21000;
[L4465]  COND TRUE   gas >= 0
[L4466]              assume value_s268 >= 0 && value_s268 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4467]              assume msgvalue_MSG == 0;
[L4468]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s268 && value_s268 <= _balances_ERC20[this][msgsender_MSG]) && value_s268 >= 0) && value_s268 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s268] >= 0) && _balances_ERC20[this][to_s268] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L404]               havoc __exception;
[L405]               revert := false;
[L406]   COND TRUE   __exception
[L407]               __tmp__Balance := Balance;
[L408]               __tmp__DType := DType;
[L409]               __tmp__Alloc := Alloc;
[L410]               __tmp__balance_ADDR := balance_ADDR;
[L411]               __tmp__M_Ref_int := M_Ref_int;
[L412]               __tmp__sum__balances0 := sum__balances0;
[L413]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L414]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L415]               __tmp__sum__allowed1 := sum__allowed1;
[L416]               __tmp__Length := Length;
[L417]               __tmp__now := now;
[L418]               __tmp___balances_ERC20 := _balances_ERC20;
[L419]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L420]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L421]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L422]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L423]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L424]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L1943]  COND TRUE   __tmp__DType[this] == BNS
[L1944]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L2252]              __var_4 := null;
[L2253]  COND FALSE  !(!(to_s422 != null))
[L2257]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s422], value_s422);
[L1790]  COND FALSE  !(!(b_s150 <= a_s150))
[L1794]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1795]              __ret_0_ := c_s150;
[L2257]  RET         call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s422], value_s422);
[L2258]  COND FALSE  !(revert)
[L2261]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][from_s422];
[L2262]              __tmp___balances_ERC20[this][from_s422] := __var_5;
[L2263]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][from_s422];
[L2264]  CALL        call __var_6 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][to_s422], value_s422);
[L1814]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1815]  COND TRUE   !(c_s174 >= a_s174)
[L1816]              revert := true;
[L2264]  RET         call __var_6 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][to_s422], value_s422);
[L2265]  COND TRUE   revert
[L1944]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L1945]  COND TRUE   revert
[L424]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L425]               assume revert || gas < 0;
[L4468]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L4566]  RET         call CorralChoice_BNS(this);

[2020-11-25 01:13:48,561 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:13:48,561 INFO  L82        PathProgramCache]: Analyzing trace with hash -1642009320, now seen corresponding path program 1 times
[2020-11-25 01:13:48,562 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:13:48,572 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:13:48,659 INFO  L134       CoverageAnalysis]: Checked inductivity of 124 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 124 trivial. 0 not checked.
[2020-11-25 01:13:48,659 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:13:48,659 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [14] imperfect sequences [] total 14
[2020-11-25 01:13:48,659 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:13:48,659 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 01:13:48,660 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=29, Invalid=153, Unknown=0, NotChecked=0, Total=182
[2020-11-25 01:13:48,660 INFO  L87              Difference]: Start difference. First operand 2710 states and 3095 transitions. cyclomatic complexity: 389 Second operand 14 states.
[2020-11-25 01:13:49,855 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:13:49,855 INFO  L93              Difference]: Finished difference Result 2818 states and 3221 transitions.
[2020-11-25 01:13:49,855 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 15 states. 
[2020-11-25 01:13:49,855 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2818 states and 3221 transitions.
[2020-11-25 01:13:49,861 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 01:13:49,867 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2818 states to 2818 states and 3221 transitions.
[2020-11-25 01:13:49,867 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 789
[2020-11-25 01:13:49,867 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 789
[2020-11-25 01:13:49,867 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2818 states and 3221 transitions.
[2020-11-25 01:13:49,869 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:13:49,869 INFO  L728         BuchiCegarLoop]: Abstraction has 2818 states and 3221 transitions.
[2020-11-25 01:13:49,871 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2818 states and 3221 transitions.
[2020-11-25 01:13:49,887 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2818 to 2723.
[2020-11-25 01:13:49,887 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2723 states.
[2020-11-25 01:13:49,890 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2723 states to 2723 states and 3099 transitions.
[2020-11-25 01:13:49,890 INFO  L751         BuchiCegarLoop]: Abstraction has 2723 states and 3099 transitions.
[2020-11-25 01:13:49,890 INFO  L631         BuchiCegarLoop]: Abstraction has 2723 states and 3099 transitions.
[2020-11-25 01:13:49,890 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 01:13:49,890 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2723 states and 3099 transitions.
[2020-11-25 01:13:49,892 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:13:49,892 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:13:49,892 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:13:49,893 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:13:49,893 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4556]              assume null == 0;
[L4557]  CALL        call this := FreshRefGenerator__success();
[L1661]              havoc newRef;
[L1662]              assume Alloc[newRef] == false;
[L1663]              Alloc[newRef] := true;
[L1664]              assume newRef != null;
[L4557]  RET         call this := FreshRefGenerator__success();
[L4558]              assume now >= 0;
[L4559]              assume DType[this] == BNS;
[L4560]              assume msgvalue_MSG == 0;
[L4561]              gas := gas - 53000;
[L4562]  CALL        call BNS_BNS(this, msgsender_MSG, msgvalue_MSG);
[L1082]              havoc __exception;
[L1083]              revert := false;
[L1084]  COND FALSE  !(__exception)
[L1105]  CALL        call BNS_BNS__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1895]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L1895]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  COND FALSE  !(revert)
[L1899]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1871]              assume msgsender_MSG != null;
[L1872]              Balance[this] := 0;
[L1873]              _balances_ERC20[this] := zeroRefintArr();
[L1874]              sum__balances0[this] := 0;
[L1875]              _allowed_ERC20[this] := zeroRefRefintArr();
[L1876]              sum__allowed1[this] := 0;
[L1877]              _totalSupply_ERC20[this] := 0;
[L1899]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1900]  COND FALSE  !(revert)
[L2799]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L2803]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 2048224778, 26805932, 8);
[L2569]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L2569]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2570]  COND FALSE  !(revert)
[L2573]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s606, symbol_s606, decimals_s606);
[L2544]              assume msgsender_MSG != null;
[L2545]              Balance[this] := 0;
[L2546]              _name_ERC20Detailed[this] := -2028290499;
[L2547]              _symbol_ERC20Detailed[this] := -2028290499;
[L2548]              _decimals_ERC20Detailed[this] := 0;
[L2550]              _name_ERC20Detailed[this] := name_s606;
[L2551]              _symbol_ERC20Detailed[this] := symbol_s606;
[L2552]              _decimals_ERC20Detailed[this] := decimals_s606;
[L2573]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s606, symbol_s606, decimals_s606);
[L2574]  COND FALSE  !(revert)
[L2803]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 2048224778, 26805932, 8);
[L2804]  COND FALSE  !(revert)
[L2807]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L2649]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L2649]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2650]  COND FALSE  !(revert)
[L2653]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1895]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L1895]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  COND FALSE  !(revert)
[L1899]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1871]              assume msgsender_MSG != null;
[L1872]              Balance[this] := 0;
[L1873]              _balances_ERC20[this] := zeroRefintArr();
[L1874]              sum__balances0[this] := 0;
[L1875]              _allowed_ERC20[this] := zeroRefRefintArr();
[L1876]              sum__allowed1[this] := 0;
[L1877]              _totalSupply_ERC20[this] := 0;
[L1899]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1900]  COND FALSE  !(revert)
[L2653]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2654]  COND FALSE  !(revert)
[L2657]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2626]              assume msgsender_MSG != null;
[L2627]              Balance[this] := 0;
[L2657]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2658]  COND FALSE  !(revert)
[L2807]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L2808]  COND FALSE  !(revert)
[L2811]  CALL        call BNS_BNS_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2753]              assume msgsender_MSG != null;
[L2754]              Balance[this] := 0;
[L2756]              __var_16 := 250000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2757]  COND TRUE   DType[this] == BNS
[L2758]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 250000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2329]              __var_7 := null;
[L2330]  COND FALSE  !(!(account_s464 != null))
[L2334]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L1826]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]  COND FALSE  !(!(c_s174 >= a_s174))
[L1831]              __ret_0_ := c_s174;
[L2334]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L2335]  COND FALSE  !(revert)
[L2338]              _totalSupply_ERC20[this] := __var_8;
[L2339]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s464], value_s464);
[L1826]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]  COND FALSE  !(!(c_s174 >= a_s174))
[L1831]              __ret_0_ := c_s174;
[L2339]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s464], value_s464);
[L2340]  COND FALSE  !(revert)
[L2343]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s464];
[L2344]              _balances_ERC20[this][account_s464] := __var_9;
[L2345]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s464];
[L2346]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2758]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 250000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2759]  COND FALSE  !(revert)
[L2811]  RET         call BNS_BNS_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]  COND FALSE  !(revert)
[L1105]  RET         call BNS_BNS__success(this, msgsender_MSG, msgvalue_MSG);
[L1106]              assume !revert && gas >= 0;
[L4562]  RET         call BNS_BNS(this, msgsender_MSG, msgvalue_MSG);
[L4563]              assume !revert && gas >= 0;
[L4566]  CALL        call CorralChoice_BNS(this);
[L4415]              havoc msgsender_MSG;
[L4416]              havoc msgvalue_MSG;
[L4417]              havoc choice;
[L4418]              havoc to_s268;
[L4419]              havoc value_s268;
[L4420]              havoc __ret_0_transfer;
[L4421]              havoc spender_s287;
[L4422]              havoc value_s287;
[L4423]              havoc __ret_0_approve;
[L4424]              havoc from_s322;
[L4425]              havoc to_s322;
[L4426]              havoc value_s322;
[L4427]              havoc __ret_0_transferFrom;
[L4428]              havoc __ret_0_totalSupply;
[L4429]              havoc owner_s233;
[L4430]              havoc __ret_0_balanceOf;
[L4431]              havoc owner_s249;
[L4432]              havoc spender_s249;
[L4433]              havoc __ret_0_allowance;
[L4434]              havoc spender_s349;
[L4435]              havoc addedValue_s349;
[L4436]              havoc __ret_0_increaseAllowance;
[L4437]              havoc spender_s376;
[L4438]              havoc subtractedValue_s376;
[L4439]              havoc __ret_0_decreaseAllowance;
[L4440]              havoc name_s606;
[L4441]              havoc symbol_s606;
[L4442]              havoc decimals_s606;
[L4443]              havoc __ret_0_name;
[L4444]              havoc __ret_0_symbol;
[L4445]              havoc __ret_0_decimals;
[L4446]              havoc value_s646;
[L4447]              havoc from_s659;
[L4448]              havoc value_s659;
[L4449]              havoc tmpNow;
[L4450]              havoc gas;
[L4451]              assume gas > 4000000 && gas <= 8000000;
[L4452]              tmpNow := now;
[L4453]              havoc now;
[L4454]              assume now > tmpNow;
[L4455]              assume msgsender_MSG != null;
[L4456]              assume DType[msgsender_MSG] != IERC20;
[L4457]              assume DType[msgsender_MSG] != SafeMath;
[L4458]              assume DType[msgsender_MSG] != ERC20;
[L4459]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4460]              assume DType[msgsender_MSG] != ERC20Burnable;
[L4461]              assume DType[msgsender_MSG] != BNS;
[L4462]              Alloc[msgsender_MSG] := true;
[L4463]  COND TRUE   choice == 13
[L4464]              gas := gas - 21000;
[L4465]  COND TRUE   gas >= 0
[L4466]              assume value_s268 >= 0 && value_s268 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4467]              assume msgvalue_MSG == 0;
[L4468]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s268 && value_s268 <= _balances_ERC20[this][msgsender_MSG]) && value_s268 >= 0) && value_s268 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s268] >= 0) && _balances_ERC20[this][to_s268] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L404]               havoc __exception;
[L405]               revert := false;
[L406]   COND TRUE   __exception
[L407]               __tmp__Balance := Balance;
[L408]               __tmp__DType := DType;
[L409]               __tmp__Alloc := Alloc;
[L410]               __tmp__balance_ADDR := balance_ADDR;
[L411]               __tmp__M_Ref_int := M_Ref_int;
[L412]               __tmp__sum__balances0 := sum__balances0;
[L413]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L414]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L415]               __tmp__sum__allowed1 := sum__allowed1;
[L416]               __tmp__Length := Length;
[L417]               __tmp__now := now;
[L418]               __tmp___balances_ERC20 := _balances_ERC20;
[L419]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L420]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L421]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L422]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L423]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L424]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L1943]  COND TRUE   __tmp__DType[this] == BNS
[L1944]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L2252]              __var_4 := null;
[L2253]  COND FALSE  !(!(to_s422 != null))
[L2257]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s422], value_s422);
[L1790]  COND FALSE  !(!(b_s150 <= a_s150))
[L1794]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1795]              __ret_0_ := c_s150;
[L2257]  RET         call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s422], value_s422);
[L2258]  COND FALSE  !(revert)
[L2261]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][from_s422];
[L2262]              __tmp___balances_ERC20[this][from_s422] := __var_5;
[L2263]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][from_s422];
[L2264]  CALL        call __var_6 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][to_s422], value_s422);
[L1814]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1815]  COND FALSE  !(!(c_s174 >= a_s174))
[L1819]              __ret_0_ := c_s174;
[L2264]  RET         call __var_6 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][to_s422], value_s422);
[L2265]  COND FALSE  !(revert)
[L2268]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][to_s422];
[L2269]              __tmp___balances_ERC20[this][to_s422] := __var_6;
[L2270]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][to_s422];
[L1944]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L1945]  COND FALSE  !(revert)
[L1961]              __ret_0_ := true;
[L424]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L425]               assume revert || gas < 0;
[L4468]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L4566]  RET         call CorralChoice_BNS(this);

Loop:
[L4566]  CALL        call CorralChoice_BNS(this);
[L4415]              havoc msgsender_MSG;
[L4416]              havoc msgvalue_MSG;
[L4417]              havoc choice;
[L4418]              havoc to_s268;
[L4419]              havoc value_s268;
[L4420]              havoc __ret_0_transfer;
[L4421]              havoc spender_s287;
[L4422]              havoc value_s287;
[L4423]              havoc __ret_0_approve;
[L4424]              havoc from_s322;
[L4425]              havoc to_s322;
[L4426]              havoc value_s322;
[L4427]              havoc __ret_0_transferFrom;
[L4428]              havoc __ret_0_totalSupply;
[L4429]              havoc owner_s233;
[L4430]              havoc __ret_0_balanceOf;
[L4431]              havoc owner_s249;
[L4432]              havoc spender_s249;
[L4433]              havoc __ret_0_allowance;
[L4434]              havoc spender_s349;
[L4435]              havoc addedValue_s349;
[L4436]              havoc __ret_0_increaseAllowance;
[L4437]              havoc spender_s376;
[L4438]              havoc subtractedValue_s376;
[L4439]              havoc __ret_0_decreaseAllowance;
[L4440]              havoc name_s606;
[L4441]              havoc symbol_s606;
[L4442]              havoc decimals_s606;
[L4443]              havoc __ret_0_name;
[L4444]              havoc __ret_0_symbol;
[L4445]              havoc __ret_0_decimals;
[L4446]              havoc value_s646;
[L4447]              havoc from_s659;
[L4448]              havoc value_s659;
[L4449]              havoc tmpNow;
[L4450]              havoc gas;
[L4451]              assume gas > 4000000 && gas <= 8000000;
[L4452]              tmpNow := now;
[L4453]              havoc now;
[L4454]              assume now > tmpNow;
[L4455]              assume msgsender_MSG != null;
[L4456]              assume DType[msgsender_MSG] != IERC20;
[L4457]              assume DType[msgsender_MSG] != SafeMath;
[L4458]              assume DType[msgsender_MSG] != ERC20;
[L4459]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4460]              assume DType[msgsender_MSG] != ERC20Burnable;
[L4461]              assume DType[msgsender_MSG] != BNS;
[L4462]              Alloc[msgsender_MSG] := true;
[L4463]  COND TRUE   choice == 13
[L4464]              gas := gas - 21000;
[L4465]  COND FALSE  !(gas >= 0)
[L4566]  RET         call CorralChoice_BNS(this);

[2020-11-25 01:13:49,896 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:13:49,896 INFO  L82        PathProgramCache]: Analyzing trace with hash 1399804398, now seen corresponding path program 1 times
[2020-11-25 01:13:49,897 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:13:49,905 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:13:49,940 INFO  L134       CoverageAnalysis]: Checked inductivity of 124 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 124 trivial. 0 not checked.
[2020-11-25 01:13:49,941 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:13:49,941 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 01:13:49,941 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:13:49,941 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 01:13:49,941 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 01:13:49,941 INFO  L87              Difference]: Start difference. First operand 2723 states and 3099 transitions. cyclomatic complexity: 380 Second operand 5 states.
[2020-11-25 01:13:50,425 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:13:50,426 INFO  L93              Difference]: Finished difference Result 3277 states and 3768 transitions.
[2020-11-25 01:13:50,426 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 01:13:50,426 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3277 states and 3768 transitions.
[2020-11-25 01:13:50,432 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 01:13:50,439 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3277 states to 2635 states and 3090 transitions.
[2020-11-25 01:13:50,439 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 605
[2020-11-25 01:13:50,439 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 605
[2020-11-25 01:13:50,439 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2635 states and 3090 transitions.
[2020-11-25 01:13:50,441 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:13:50,442 INFO  L728         BuchiCegarLoop]: Abstraction has 2635 states and 3090 transitions.
[2020-11-25 01:13:50,443 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2635 states and 3090 transitions.
[2020-11-25 01:13:50,455 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2635 to 2099.
[2020-11-25 01:13:50,455 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2099 states.
[2020-11-25 01:13:50,457 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2099 states to 2099 states and 2403 transitions.
[2020-11-25 01:13:50,457 INFO  L751         BuchiCegarLoop]: Abstraction has 2099 states and 2403 transitions.
[2020-11-25 01:13:50,457 INFO  L631         BuchiCegarLoop]: Abstraction has 2099 states and 2403 transitions.
[2020-11-25 01:13:50,457 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 01:13:50,458 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2099 states and 2403 transitions.
[2020-11-25 01:13:50,460 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:13:50,460 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:13:50,460 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:13:50,461 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:13:50,461 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4556]              assume null == 0;
[L4557]  CALL        call this := FreshRefGenerator__success();
[L1661]              havoc newRef;
[L1662]              assume Alloc[newRef] == false;
[L1663]              Alloc[newRef] := true;
[L1664]              assume newRef != null;
[L4557]  RET         call this := FreshRefGenerator__success();
[L4558]              assume now >= 0;
[L4559]              assume DType[this] == BNS;
[L4560]              assume msgvalue_MSG == 0;
[L4561]              gas := gas - 53000;
[L4562]  CALL        call BNS_BNS(this, msgsender_MSG, msgvalue_MSG);
[L1082]              havoc __exception;
[L1083]              revert := false;
[L1084]  COND FALSE  !(__exception)
[L1105]  CALL        call BNS_BNS__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1895]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L1895]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  COND FALSE  !(revert)
[L1899]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1871]              assume msgsender_MSG != null;
[L1872]              Balance[this] := 0;
[L1873]              _balances_ERC20[this] := zeroRefintArr();
[L1874]              sum__balances0[this] := 0;
[L1875]              _allowed_ERC20[this] := zeroRefRefintArr();
[L1876]              sum__allowed1[this] := 0;
[L1877]              _totalSupply_ERC20[this] := 0;
[L1899]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1900]  COND FALSE  !(revert)
[L2799]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L2803]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 2048224778, 26805932, 8);
[L2569]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L2569]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2570]  COND FALSE  !(revert)
[L2573]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s606, symbol_s606, decimals_s606);
[L2544]              assume msgsender_MSG != null;
[L2545]              Balance[this] := 0;
[L2546]              _name_ERC20Detailed[this] := -2028290499;
[L2547]              _symbol_ERC20Detailed[this] := -2028290499;
[L2548]              _decimals_ERC20Detailed[this] := 0;
[L2550]              _name_ERC20Detailed[this] := name_s606;
[L2551]              _symbol_ERC20Detailed[this] := symbol_s606;
[L2552]              _decimals_ERC20Detailed[this] := decimals_s606;
[L2573]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s606, symbol_s606, decimals_s606);
[L2574]  COND FALSE  !(revert)
[L2803]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 2048224778, 26805932, 8);
[L2804]  COND FALSE  !(revert)
[L2807]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L2649]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L2649]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2650]  COND FALSE  !(revert)
[L2653]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1895]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L1895]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  COND FALSE  !(revert)
[L1899]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1871]              assume msgsender_MSG != null;
[L1872]              Balance[this] := 0;
[L1873]              _balances_ERC20[this] := zeroRefintArr();
[L1874]              sum__balances0[this] := 0;
[L1875]              _allowed_ERC20[this] := zeroRefRefintArr();
[L1876]              sum__allowed1[this] := 0;
[L1877]              _totalSupply_ERC20[this] := 0;
[L1899]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1900]  COND FALSE  !(revert)
[L2653]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2654]  COND FALSE  !(revert)
[L2657]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2626]              assume msgsender_MSG != null;
[L2627]              Balance[this] := 0;
[L2657]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2658]  COND FALSE  !(revert)
[L2807]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L2808]  COND FALSE  !(revert)
[L2811]  CALL        call BNS_BNS_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2753]              assume msgsender_MSG != null;
[L2754]              Balance[this] := 0;
[L2756]              __var_16 := 250000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2757]  COND TRUE   DType[this] == BNS
[L2758]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 250000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2329]              __var_7 := null;
[L2330]  COND FALSE  !(!(account_s464 != null))
[L2334]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L1826]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]  COND FALSE  !(!(c_s174 >= a_s174))
[L1831]              __ret_0_ := c_s174;
[L2334]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L2335]  COND FALSE  !(revert)
[L2338]              _totalSupply_ERC20[this] := __var_8;
[L2339]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s464], value_s464);
[L1826]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]  COND FALSE  !(!(c_s174 >= a_s174))
[L1831]              __ret_0_ := c_s174;
[L2339]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s464], value_s464);
[L2340]  COND FALSE  !(revert)
[L2343]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s464];
[L2344]              _balances_ERC20[this][account_s464] := __var_9;
[L2345]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s464];
[L2346]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2758]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 250000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2759]  COND FALSE  !(revert)
[L2811]  RET         call BNS_BNS_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]  COND FALSE  !(revert)
[L1105]  RET         call BNS_BNS__success(this, msgsender_MSG, msgvalue_MSG);
[L1106]              assume !revert && gas >= 0;
[L4562]  RET         call BNS_BNS(this, msgsender_MSG, msgvalue_MSG);
[L4563]              assume !revert && gas >= 0;
[L4566]  CALL        call CorralChoice_BNS(this);
[L4415]              havoc msgsender_MSG;
[L4416]              havoc msgvalue_MSG;
[L4417]              havoc choice;
[L4418]              havoc to_s268;
[L4419]              havoc value_s268;
[L4420]              havoc __ret_0_transfer;
[L4421]              havoc spender_s287;
[L4422]              havoc value_s287;
[L4423]              havoc __ret_0_approve;
[L4424]              havoc from_s322;
[L4425]              havoc to_s322;
[L4426]              havoc value_s322;
[L4427]              havoc __ret_0_transferFrom;
[L4428]              havoc __ret_0_totalSupply;
[L4429]              havoc owner_s233;
[L4430]              havoc __ret_0_balanceOf;
[L4431]              havoc owner_s249;
[L4432]              havoc spender_s249;
[L4433]              havoc __ret_0_allowance;
[L4434]              havoc spender_s349;
[L4435]              havoc addedValue_s349;
[L4436]              havoc __ret_0_increaseAllowance;
[L4437]              havoc spender_s376;
[L4438]              havoc subtractedValue_s376;
[L4439]              havoc __ret_0_decreaseAllowance;
[L4440]              havoc name_s606;
[L4441]              havoc symbol_s606;
[L4442]              havoc decimals_s606;
[L4443]              havoc __ret_0_name;
[L4444]              havoc __ret_0_symbol;
[L4445]              havoc __ret_0_decimals;
[L4446]              havoc value_s646;
[L4447]              havoc from_s659;
[L4448]              havoc value_s659;
[L4449]              havoc tmpNow;
[L4450]              havoc gas;
[L4451]              assume gas > 4000000 && gas <= 8000000;
[L4452]              tmpNow := now;
[L4453]              havoc now;
[L4454]              assume now > tmpNow;
[L4455]              assume msgsender_MSG != null;
[L4456]              assume DType[msgsender_MSG] != IERC20;
[L4457]              assume DType[msgsender_MSG] != SafeMath;
[L4458]              assume DType[msgsender_MSG] != ERC20;
[L4459]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4460]              assume DType[msgsender_MSG] != ERC20Burnable;
[L4461]              assume DType[msgsender_MSG] != BNS;
[L4462]              Alloc[msgsender_MSG] := true;
[L4463]  COND FALSE  !(choice == 13)
[L4470]  COND FALSE  !(choice == 12)
[L4477]  COND FALSE  !(choice == 11)
[L4484]  COND FALSE  !(choice == 10)
[L4490]  COND FALSE  !(choice == 9)
[L4496]  COND FALSE  !(choice == 8)
[L4502]  COND FALSE  !(choice == 7)
[L4509]  COND FALSE  !(choice == 6)
[L4516]  COND FALSE  !(choice == 5)
[L4522]  COND FALSE  !(choice == 4)
[L4528]  COND FALSE  !(choice == 3)
[L4534]  COND TRUE   choice == 2
[L4535]              gas := gas - 21000;
[L4536]  COND TRUE   gas >= 0
[L4537]              assume value_s646 >= 0 && value_s646 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4538]              assume msgvalue_MSG == 0;
[L4539]  CALL        call burn~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, value_s646);
[L962]               havoc __exception;
[L963]               revert := false;
[L964]   COND FALSE  !(__exception)
[L985]   CALL        call burn~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, value_s646);
[L2682]  COND TRUE   DType[this] == BNS
[L2683]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, value_s646);
[L2378]              __var_10 := null;
[L2379]  COND FALSE  !(!(account_s506 != null))
[L2383]  CALL        call __var_11 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s506);
[L1802]  COND FALSE  !(!(b_s150 <= a_s150))
[L1806]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1807]              __ret_0_ := c_s150;
[L2383]  RET         call __var_11 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s506);
[L2384]  COND FALSE  !(revert)
[L2387]              _totalSupply_ERC20[this] := __var_11;
[L2388]  CALL        call __var_12 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s506], value_s506);
[L1802]  COND FALSE  !(!(b_s150 <= a_s150))
[L1806]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1807]              __ret_0_ := c_s150;
[L2388]  RET         call __var_12 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s506], value_s506);
[L2389]  COND FALSE  !(revert)
[L2392]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s506];
[L2393]              _balances_ERC20[this][account_s506] := __var_12;
[L2394]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s506];
[L2395]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2683]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, value_s646);
[L2684]  COND FALSE  !(revert)
[L985]   RET         call burn~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, value_s646);
[L986]               assume !revert && gas >= 0;
[L4539]  RET         call burn~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, value_s646);
[L4566]  RET         call CorralChoice_BNS(this);
[L4566]  CALL        call CorralChoice_BNS(this);
[L4415]              havoc msgsender_MSG;
[L4416]              havoc msgvalue_MSG;
[L4417]              havoc choice;
[L4418]              havoc to_s268;
[L4419]              havoc value_s268;
[L4420]              havoc __ret_0_transfer;
[L4421]              havoc spender_s287;
[L4422]              havoc value_s287;
[L4423]              havoc __ret_0_approve;
[L4424]              havoc from_s322;
[L4425]              havoc to_s322;
[L4426]              havoc value_s322;
[L4427]              havoc __ret_0_transferFrom;
[L4428]              havoc __ret_0_totalSupply;
[L4429]              havoc owner_s233;
[L4430]              havoc __ret_0_balanceOf;
[L4431]              havoc owner_s249;
[L4432]              havoc spender_s249;
[L4433]              havoc __ret_0_allowance;
[L4434]              havoc spender_s349;
[L4435]              havoc addedValue_s349;
[L4436]              havoc __ret_0_increaseAllowance;
[L4437]              havoc spender_s376;
[L4438]              havoc subtractedValue_s376;
[L4439]              havoc __ret_0_decreaseAllowance;
[L4440]              havoc name_s606;
[L4441]              havoc symbol_s606;
[L4442]              havoc decimals_s606;
[L4443]              havoc __ret_0_name;
[L4444]              havoc __ret_0_symbol;
[L4445]              havoc __ret_0_decimals;
[L4446]              havoc value_s646;
[L4447]              havoc from_s659;
[L4448]              havoc value_s659;
[L4449]              havoc tmpNow;
[L4450]              havoc gas;
[L4451]              assume gas > 4000000 && gas <= 8000000;
[L4452]              tmpNow := now;
[L4453]              havoc now;
[L4454]              assume now > tmpNow;
[L4455]              assume msgsender_MSG != null;
[L4456]              assume DType[msgsender_MSG] != IERC20;
[L4457]              assume DType[msgsender_MSG] != SafeMath;
[L4458]              assume DType[msgsender_MSG] != ERC20;
[L4459]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4460]              assume DType[msgsender_MSG] != ERC20Burnable;
[L4461]              assume DType[msgsender_MSG] != BNS;
[L4462]              Alloc[msgsender_MSG] := true;
[L4463]  COND TRUE   choice == 13
[L4464]              gas := gas - 21000;
[L4465]  COND TRUE   gas >= 0
[L4466]              assume value_s268 >= 0 && value_s268 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4467]              assume msgvalue_MSG == 0;
[L4468]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s268 && value_s268 <= _balances_ERC20[this][msgsender_MSG]) && value_s268 >= 0) && value_s268 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s268] >= 0) && _balances_ERC20[this][to_s268] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L404]               havoc __exception;
[L405]               revert := false;
[L406]   COND FALSE  !(__exception)
[L427]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L1967]  COND TRUE   DType[this] == BNS
[L1968]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L2278]              __var_4 := null;
[L2279]  COND FALSE  !(!(to_s422 != null))
[L2283]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L1802]  COND FALSE  !(!(b_s150 <= a_s150))
[L1806]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1807]              __ret_0_ := c_s150;
[L2283]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L2284]  COND FALSE  !(revert)
[L2287]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s422];
[L2288]              _balances_ERC20[this][from_s422] := __var_5;
[L2289]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s422];
[L2290]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L1826]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]  COND FALSE  !(!(c_s174 >= a_s174))
[L1831]              __ret_0_ := c_s174;
[L2290]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L2291]  COND FALSE  !(revert)
[L2294]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s422];
[L2295]              _balances_ERC20[this][to_s422] := __var_6;
[L2296]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s422];
[L2297]              assert { :EventEmitted "Transfer_ERC20" } true;
[L1968]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L1969]  COND FALSE  !(revert)
[L1985]              __ret_0_ := true;
[L427]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L428]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4468]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L4566]  RET         call CorralChoice_BNS(this);

Loop:
[L4566]  CALL        call CorralChoice_BNS(this);
[L4415]              havoc msgsender_MSG;
[L4416]              havoc msgvalue_MSG;
[L4417]              havoc choice;
[L4418]              havoc to_s268;
[L4419]              havoc value_s268;
[L4420]              havoc __ret_0_transfer;
[L4421]              havoc spender_s287;
[L4422]              havoc value_s287;
[L4423]              havoc __ret_0_approve;
[L4424]              havoc from_s322;
[L4425]              havoc to_s322;
[L4426]              havoc value_s322;
[L4427]              havoc __ret_0_transferFrom;
[L4428]              havoc __ret_0_totalSupply;
[L4429]              havoc owner_s233;
[L4430]              havoc __ret_0_balanceOf;
[L4431]              havoc owner_s249;
[L4432]              havoc spender_s249;
[L4433]              havoc __ret_0_allowance;
[L4434]              havoc spender_s349;
[L4435]              havoc addedValue_s349;
[L4436]              havoc __ret_0_increaseAllowance;
[L4437]              havoc spender_s376;
[L4438]              havoc subtractedValue_s376;
[L4439]              havoc __ret_0_decreaseAllowance;
[L4440]              havoc name_s606;
[L4441]              havoc symbol_s606;
[L4442]              havoc decimals_s606;
[L4443]              havoc __ret_0_name;
[L4444]              havoc __ret_0_symbol;
[L4445]              havoc __ret_0_decimals;
[L4446]              havoc value_s646;
[L4447]              havoc from_s659;
[L4448]              havoc value_s659;
[L4449]              havoc tmpNow;
[L4450]              havoc gas;
[L4451]              assume gas > 4000000 && gas <= 8000000;
[L4452]              tmpNow := now;
[L4453]              havoc now;
[L4454]              assume now > tmpNow;
[L4455]              assume msgsender_MSG != null;
[L4456]              assume DType[msgsender_MSG] != IERC20;
[L4457]              assume DType[msgsender_MSG] != SafeMath;
[L4458]              assume DType[msgsender_MSG] != ERC20;
[L4459]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4460]              assume DType[msgsender_MSG] != ERC20Burnable;
[L4461]              assume DType[msgsender_MSG] != BNS;
[L4462]              Alloc[msgsender_MSG] := true;
[L4463]  COND TRUE   choice == 13
[L4464]              gas := gas - 21000;
[L4465]  COND FALSE  !(gas >= 0)
[L4566]  RET         call CorralChoice_BNS(this);

[2020-11-25 01:13:50,464 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:13:50,464 INFO  L82        PathProgramCache]: Analyzing trace with hash -2050538024, now seen corresponding path program 1 times
[2020-11-25 01:13:50,465 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:13:50,515 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:13:52,326 INFO  L134       CoverageAnalysis]: Checked inductivity of 180 backedges. 14 proven. 51 refuted. 0 times theorem prover too weak. 115 trivial. 0 not checked.
[2020-11-25 01:13:52,326 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:13:52,326 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [48] total 48
[2020-11-25 01:13:52,326 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:13:52,327 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 49 interpolants.
[2020-11-25 01:13:52,327 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=154, Invalid=2198, Unknown=0, NotChecked=0, Total=2352
[2020-11-25 01:13:52,327 INFO  L87              Difference]: Start difference. First operand 2099 states and 2403 transitions. cyclomatic complexity: 307 Second operand 49 states.
[2020-11-25 01:14:03,738 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:14:03,738 INFO  L93              Difference]: Finished difference Result 2274 states and 2635 transitions.
[2020-11-25 01:14:03,738 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 48 states. 
[2020-11-25 01:14:03,738 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2274 states and 2635 transitions.
[2020-11-25 01:14:03,742 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:14:03,748 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2274 states to 2274 states and 2635 transitions.
[2020-11-25 01:14:03,748 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 585
[2020-11-25 01:14:03,748 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 585
[2020-11-25 01:14:03,748 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2274 states and 2635 transitions.
[2020-11-25 01:14:03,750 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:14:03,750 INFO  L728         BuchiCegarLoop]: Abstraction has 2274 states and 2635 transitions.
[2020-11-25 01:14:03,751 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2274 states and 2635 transitions.
[2020-11-25 01:14:03,762 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2274 to 2254.
[2020-11-25 01:14:03,762 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2254 states.
[2020-11-25 01:14:03,765 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2254 states to 2254 states and 2611 transitions.
[2020-11-25 01:14:03,765 INFO  L751         BuchiCegarLoop]: Abstraction has 2254 states and 2611 transitions.
[2020-11-25 01:14:03,765 INFO  L631         BuchiCegarLoop]: Abstraction has 2254 states and 2611 transitions.
[2020-11-25 01:14:03,765 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 01:14:03,765 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2254 states and 2611 transitions.
[2020-11-25 01:14:03,767 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:14:03,767 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:14:03,767 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:14:03,768 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:14:03,768 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4556]              assume null == 0;
[L4557]  CALL        call this := FreshRefGenerator__success();
[L1661]              havoc newRef;
[L1662]              assume Alloc[newRef] == false;
[L1663]              Alloc[newRef] := true;
[L1664]              assume newRef != null;
[L4557]  RET         call this := FreshRefGenerator__success();
[L4558]              assume now >= 0;
[L4559]              assume DType[this] == BNS;
[L4560]              assume msgvalue_MSG == 0;
[L4561]              gas := gas - 53000;
[L4562]  CALL        call BNS_BNS(this, msgsender_MSG, msgvalue_MSG);
[L1082]              havoc __exception;
[L1083]              revert := false;
[L1084]  COND FALSE  !(__exception)
[L1105]  CALL        call BNS_BNS__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1895]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L1895]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  COND FALSE  !(revert)
[L1899]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1871]              assume msgsender_MSG != null;
[L1872]              Balance[this] := 0;
[L1873]              _balances_ERC20[this] := zeroRefintArr();
[L1874]              sum__balances0[this] := 0;
[L1875]              _allowed_ERC20[this] := zeroRefRefintArr();
[L1876]              sum__allowed1[this] := 0;
[L1877]              _totalSupply_ERC20[this] := 0;
[L1899]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1900]  COND FALSE  !(revert)
[L2799]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L2803]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 2048224778, 26805932, 8);
[L2569]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L2569]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2570]  COND FALSE  !(revert)
[L2573]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s606, symbol_s606, decimals_s606);
[L2544]              assume msgsender_MSG != null;
[L2545]              Balance[this] := 0;
[L2546]              _name_ERC20Detailed[this] := -2028290499;
[L2547]              _symbol_ERC20Detailed[this] := -2028290499;
[L2548]              _decimals_ERC20Detailed[this] := 0;
[L2550]              _name_ERC20Detailed[this] := name_s606;
[L2551]              _symbol_ERC20Detailed[this] := symbol_s606;
[L2552]              _decimals_ERC20Detailed[this] := decimals_s606;
[L2573]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s606, symbol_s606, decimals_s606);
[L2574]  COND FALSE  !(revert)
[L2803]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 2048224778, 26805932, 8);
[L2804]  COND FALSE  !(revert)
[L2807]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L2649]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L2649]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2650]  COND FALSE  !(revert)
[L2653]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1895]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L1895]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  COND FALSE  !(revert)
[L1899]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1871]              assume msgsender_MSG != null;
[L1872]              Balance[this] := 0;
[L1873]              _balances_ERC20[this] := zeroRefintArr();
[L1874]              sum__balances0[this] := 0;
[L1875]              _allowed_ERC20[this] := zeroRefRefintArr();
[L1876]              sum__allowed1[this] := 0;
[L1877]              _totalSupply_ERC20[this] := 0;
[L1899]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1900]  COND FALSE  !(revert)
[L2653]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2654]  COND FALSE  !(revert)
[L2657]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2626]              assume msgsender_MSG != null;
[L2627]              Balance[this] := 0;
[L2657]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2658]  COND FALSE  !(revert)
[L2807]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L2808]  COND FALSE  !(revert)
[L2811]  CALL        call BNS_BNS_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2753]              assume msgsender_MSG != null;
[L2754]              Balance[this] := 0;
[L2756]              __var_16 := 250000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2757]  COND TRUE   DType[this] == BNS
[L2758]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 250000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2329]              __var_7 := null;
[L2330]  COND FALSE  !(!(account_s464 != null))
[L2334]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L1826]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]  COND FALSE  !(!(c_s174 >= a_s174))
[L1831]              __ret_0_ := c_s174;
[L2334]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L2335]  COND FALSE  !(revert)
[L2338]              _totalSupply_ERC20[this] := __var_8;
[L2339]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s464], value_s464);
[L1826]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]  COND FALSE  !(!(c_s174 >= a_s174))
[L1831]              __ret_0_ := c_s174;
[L2339]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s464], value_s464);
[L2340]  COND FALSE  !(revert)
[L2343]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s464];
[L2344]              _balances_ERC20[this][account_s464] := __var_9;
[L2345]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s464];
[L2346]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2758]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 250000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2759]  COND FALSE  !(revert)
[L2811]  RET         call BNS_BNS_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]  COND FALSE  !(revert)
[L1105]  RET         call BNS_BNS__success(this, msgsender_MSG, msgvalue_MSG);
[L1106]              assume !revert && gas >= 0;
[L4562]  RET         call BNS_BNS(this, msgsender_MSG, msgvalue_MSG);
[L4563]              assume !revert && gas >= 0;
[L4566]  CALL        call CorralChoice_BNS(this);
[L4415]              havoc msgsender_MSG;
[L4416]              havoc msgvalue_MSG;
[L4417]              havoc choice;
[L4418]              havoc to_s268;
[L4419]              havoc value_s268;
[L4420]              havoc __ret_0_transfer;
[L4421]              havoc spender_s287;
[L4422]              havoc value_s287;
[L4423]              havoc __ret_0_approve;
[L4424]              havoc from_s322;
[L4425]              havoc to_s322;
[L4426]              havoc value_s322;
[L4427]              havoc __ret_0_transferFrom;
[L4428]              havoc __ret_0_totalSupply;
[L4429]              havoc owner_s233;
[L4430]              havoc __ret_0_balanceOf;
[L4431]              havoc owner_s249;
[L4432]              havoc spender_s249;
[L4433]              havoc __ret_0_allowance;
[L4434]              havoc spender_s349;
[L4435]              havoc addedValue_s349;
[L4436]              havoc __ret_0_increaseAllowance;
[L4437]              havoc spender_s376;
[L4438]              havoc subtractedValue_s376;
[L4439]              havoc __ret_0_decreaseAllowance;
[L4440]              havoc name_s606;
[L4441]              havoc symbol_s606;
[L4442]              havoc decimals_s606;
[L4443]              havoc __ret_0_name;
[L4444]              havoc __ret_0_symbol;
[L4445]              havoc __ret_0_decimals;
[L4446]              havoc value_s646;
[L4447]              havoc from_s659;
[L4448]              havoc value_s659;
[L4449]              havoc tmpNow;
[L4450]              havoc gas;
[L4451]              assume gas > 4000000 && gas <= 8000000;
[L4452]              tmpNow := now;
[L4453]              havoc now;
[L4454]              assume now > tmpNow;
[L4455]              assume msgsender_MSG != null;
[L4456]              assume DType[msgsender_MSG] != IERC20;
[L4457]              assume DType[msgsender_MSG] != SafeMath;
[L4458]              assume DType[msgsender_MSG] != ERC20;
[L4459]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4460]              assume DType[msgsender_MSG] != ERC20Burnable;
[L4461]              assume DType[msgsender_MSG] != BNS;
[L4462]              Alloc[msgsender_MSG] := true;
[L4463]  COND TRUE   choice == 13
[L4464]              gas := gas - 21000;
[L4465]  COND TRUE   gas >= 0
[L4466]              assume value_s268 >= 0 && value_s268 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4467]              assume msgvalue_MSG == 0;
[L4468]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == to_s268 && value_s268 <= _balances_ERC20[this][msgsender_MSG]) && value_s268 >= 0) && value_s268 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s268] >= 0) && _balances_ERC20[this][to_s268] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L404]               havoc __exception;
[L405]               revert := false;
[L406]   COND FALSE  !(__exception)
[L427]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L1967]  COND FALSE  !(DType[this] == BNS)
[L1972]  COND FALSE  !(DType[this] == ERC20Burnable)
[L1977]  COND TRUE   DType[this] == ERC20
[L1978]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L2278]              __var_4 := null;
[L2279]  COND FALSE  !(!(to_s422 != null))
[L2283]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L1802]  COND FALSE  !(!(b_s150 <= a_s150))
[L1806]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1807]              __ret_0_ := c_s150;
[L2283]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L2284]  COND FALSE  !(revert)
[L2287]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s422];
[L2288]              _balances_ERC20[this][from_s422] := __var_5;
[L2289]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s422];
[L2290]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L1826]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]  COND FALSE  !(!(c_s174 >= a_s174))
[L1831]              __ret_0_ := c_s174;
[L2290]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L2291]  COND FALSE  !(revert)
[L2294]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s422];
[L2295]              _balances_ERC20[this][to_s422] := __var_6;
[L2296]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s422];
[L2297]              assert { :EventEmitted "Transfer_ERC20" } true;
[L1978]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L1979]  COND FALSE  !(revert)
[L1985]              __ret_0_ := true;
[L427]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L428]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4468]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L4566]  RET         call CorralChoice_BNS(this);
[L4566]  CALL        call CorralChoice_BNS(this);
[L4415]              havoc msgsender_MSG;
[L4416]              havoc msgvalue_MSG;
[L4417]              havoc choice;
[L4418]              havoc to_s268;
[L4419]              havoc value_s268;
[L4420]              havoc __ret_0_transfer;
[L4421]              havoc spender_s287;
[L4422]              havoc value_s287;
[L4423]              havoc __ret_0_approve;
[L4424]              havoc from_s322;
[L4425]              havoc to_s322;
[L4426]              havoc value_s322;
[L4427]              havoc __ret_0_transferFrom;
[L4428]              havoc __ret_0_totalSupply;
[L4429]              havoc owner_s233;
[L4430]              havoc __ret_0_balanceOf;
[L4431]              havoc owner_s249;
[L4432]              havoc spender_s249;
[L4433]              havoc __ret_0_allowance;
[L4434]              havoc spender_s349;
[L4435]              havoc addedValue_s349;
[L4436]              havoc __ret_0_increaseAllowance;
[L4437]              havoc spender_s376;
[L4438]              havoc subtractedValue_s376;
[L4439]              havoc __ret_0_decreaseAllowance;
[L4440]              havoc name_s606;
[L4441]              havoc symbol_s606;
[L4442]              havoc decimals_s606;
[L4443]              havoc __ret_0_name;
[L4444]              havoc __ret_0_symbol;
[L4445]              havoc __ret_0_decimals;
[L4446]              havoc value_s646;
[L4447]              havoc from_s659;
[L4448]              havoc value_s659;
[L4449]              havoc tmpNow;
[L4450]              havoc gas;
[L4451]              assume gas > 4000000 && gas <= 8000000;
[L4452]              tmpNow := now;
[L4453]              havoc now;
[L4454]              assume now > tmpNow;
[L4455]              assume msgsender_MSG != null;
[L4456]              assume DType[msgsender_MSG] != IERC20;
[L4457]              assume DType[msgsender_MSG] != SafeMath;
[L4458]              assume DType[msgsender_MSG] != ERC20;
[L4459]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4460]              assume DType[msgsender_MSG] != ERC20Burnable;
[L4461]              assume DType[msgsender_MSG] != BNS;
[L4462]              Alloc[msgsender_MSG] := true;
[L4463]  COND TRUE   choice == 13
[L4464]              gas := gas - 21000;
[L4465]  COND TRUE   gas >= 0
[L4466]              assume value_s268 >= 0 && value_s268 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4467]              assume msgvalue_MSG == 0;
[L4468]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s268 && value_s268 <= _balances_ERC20[this][msgsender_MSG]) && value_s268 >= 0) && value_s268 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s268] >= 0) && _balances_ERC20[this][to_s268] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L404]               havoc __exception;
[L405]               revert := false;
[L406]   COND FALSE  !(__exception)
[L427]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L1967]  COND FALSE  !(DType[this] == BNS)
[L1972]  COND TRUE   DType[this] == ERC20Burnable
[L1973]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L2278]              __var_4 := null;
[L2279]  COND FALSE  !(!(to_s422 != null))
[L2283]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L1802]  COND FALSE  !(!(b_s150 <= a_s150))
[L1806]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1807]              __ret_0_ := c_s150;
[L2283]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L2284]  COND FALSE  !(revert)
[L2287]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s422];
[L2288]              _balances_ERC20[this][from_s422] := __var_5;
[L2289]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s422];
[L2290]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L1826]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]  COND FALSE  !(!(c_s174 >= a_s174))
[L1831]              __ret_0_ := c_s174;
[L2290]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L2291]  COND FALSE  !(revert)
[L2294]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s422];
[L2295]              _balances_ERC20[this][to_s422] := __var_6;
[L2296]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s422];
[L2297]              assert { :EventEmitted "Transfer_ERC20" } true;
[L1973]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L1974]  COND FALSE  !(revert)
[L1985]              __ret_0_ := true;
[L427]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L428]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4468]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L4566]  RET         call CorralChoice_BNS(this);

Loop:
[L4566]  CALL        call CorralChoice_BNS(this);
[L4415]              havoc msgsender_MSG;
[L4416]              havoc msgvalue_MSG;
[L4417]              havoc choice;
[L4418]              havoc to_s268;
[L4419]              havoc value_s268;
[L4420]              havoc __ret_0_transfer;
[L4421]              havoc spender_s287;
[L4422]              havoc value_s287;
[L4423]              havoc __ret_0_approve;
[L4424]              havoc from_s322;
[L4425]              havoc to_s322;
[L4426]              havoc value_s322;
[L4427]              havoc __ret_0_transferFrom;
[L4428]              havoc __ret_0_totalSupply;
[L4429]              havoc owner_s233;
[L4430]              havoc __ret_0_balanceOf;
[L4431]              havoc owner_s249;
[L4432]              havoc spender_s249;
[L4433]              havoc __ret_0_allowance;
[L4434]              havoc spender_s349;
[L4435]              havoc addedValue_s349;
[L4436]              havoc __ret_0_increaseAllowance;
[L4437]              havoc spender_s376;
[L4438]              havoc subtractedValue_s376;
[L4439]              havoc __ret_0_decreaseAllowance;
[L4440]              havoc name_s606;
[L4441]              havoc symbol_s606;
[L4442]              havoc decimals_s606;
[L4443]              havoc __ret_0_name;
[L4444]              havoc __ret_0_symbol;
[L4445]              havoc __ret_0_decimals;
[L4446]              havoc value_s646;
[L4447]              havoc from_s659;
[L4448]              havoc value_s659;
[L4449]              havoc tmpNow;
[L4450]              havoc gas;
[L4451]              assume gas > 4000000 && gas <= 8000000;
[L4452]              tmpNow := now;
[L4453]              havoc now;
[L4454]              assume now > tmpNow;
[L4455]              assume msgsender_MSG != null;
[L4456]              assume DType[msgsender_MSG] != IERC20;
[L4457]              assume DType[msgsender_MSG] != SafeMath;
[L4458]              assume DType[msgsender_MSG] != ERC20;
[L4459]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4460]              assume DType[msgsender_MSG] != ERC20Burnable;
[L4461]              assume DType[msgsender_MSG] != BNS;
[L4462]              Alloc[msgsender_MSG] := true;
[L4463]  COND TRUE   choice == 13
[L4464]              gas := gas - 21000;
[L4465]  COND FALSE  !(gas >= 0)
[L4566]  RET         call CorralChoice_BNS(this);

[2020-11-25 01:14:03,771 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:14:03,771 INFO  L82        PathProgramCache]: Analyzing trace with hash 1679551368, now seen corresponding path program 1 times
[2020-11-25 01:14:03,772 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:14:03,782 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:14:03,840 INFO  L134       CoverageAnalysis]: Checked inductivity of 194 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 193 trivial. 0 not checked.
[2020-11-25 01:14:03,840 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:14:03,840 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 01:14:03,841 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:14:03,841 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 01:14:03,841 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 01:14:03,841 INFO  L87              Difference]: Start difference. First operand 2254 states and 2611 transitions. cyclomatic complexity: 363 Second operand 6 states.
[2020-11-25 01:14:03,879 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:14:03,879 INFO  L93              Difference]: Finished difference Result 2309 states and 2668 transitions.
[2020-11-25 01:14:03,879 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 01:14:03,879 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2309 states and 2668 transitions.
[2020-11-25 01:14:03,883 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:14:03,888 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2309 states to 2244 states and 2597 transitions.
[2020-11-25 01:14:03,888 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 568
[2020-11-25 01:14:03,888 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 568
[2020-11-25 01:14:03,888 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2244 states and 2597 transitions.
[2020-11-25 01:14:03,889 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:14:03,890 INFO  L728         BuchiCegarLoop]: Abstraction has 2244 states and 2597 transitions.
[2020-11-25 01:14:03,891 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2244 states and 2597 transitions.
[2020-11-25 01:14:03,901 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2244 to 2244.
[2020-11-25 01:14:03,901 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2244 states.
[2020-11-25 01:14:03,904 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2244 states to 2244 states and 2597 transitions.
[2020-11-25 01:14:03,904 INFO  L751         BuchiCegarLoop]: Abstraction has 2244 states and 2597 transitions.
[2020-11-25 01:14:03,904 INFO  L631         BuchiCegarLoop]: Abstraction has 2244 states and 2597 transitions.
[2020-11-25 01:14:03,904 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 01:14:03,904 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2244 states and 2597 transitions.
[2020-11-25 01:14:03,906 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:14:03,906 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:14:03,906 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:14:03,907 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:14:03,907 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4556]              assume null == 0;
[L4557]  CALL        call this := FreshRefGenerator__success();
[L1661]              havoc newRef;
[L1662]              assume Alloc[newRef] == false;
[L1663]              Alloc[newRef] := true;
[L1664]              assume newRef != null;
[L4557]  RET         call this := FreshRefGenerator__success();
[L4558]              assume now >= 0;
[L4559]              assume DType[this] == BNS;
[L4560]              assume msgvalue_MSG == 0;
[L4561]              gas := gas - 53000;
[L4562]  CALL        call BNS_BNS(this, msgsender_MSG, msgvalue_MSG);
[L1082]              havoc __exception;
[L1083]              revert := false;
[L1084]  COND FALSE  !(__exception)
[L1105]  CALL        call BNS_BNS__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1895]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L1895]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  COND FALSE  !(revert)
[L1899]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1871]              assume msgsender_MSG != null;
[L1872]              Balance[this] := 0;
[L1873]              _balances_ERC20[this] := zeroRefintArr();
[L1874]              sum__balances0[this] := 0;
[L1875]              _allowed_ERC20[this] := zeroRefRefintArr();
[L1876]              sum__allowed1[this] := 0;
[L1877]              _totalSupply_ERC20[this] := 0;
[L1899]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1900]  COND FALSE  !(revert)
[L2799]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L2803]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 2048224778, 26805932, 8);
[L2569]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L2569]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2570]  COND FALSE  !(revert)
[L2573]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s606, symbol_s606, decimals_s606);
[L2544]              assume msgsender_MSG != null;
[L2545]              Balance[this] := 0;
[L2546]              _name_ERC20Detailed[this] := -2028290499;
[L2547]              _symbol_ERC20Detailed[this] := -2028290499;
[L2548]              _decimals_ERC20Detailed[this] := 0;
[L2550]              _name_ERC20Detailed[this] := name_s606;
[L2551]              _symbol_ERC20Detailed[this] := symbol_s606;
[L2552]              _decimals_ERC20Detailed[this] := decimals_s606;
[L2573]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s606, symbol_s606, decimals_s606);
[L2574]  COND FALSE  !(revert)
[L2803]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 2048224778, 26805932, 8);
[L2804]  COND FALSE  !(revert)
[L2807]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L2649]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L2649]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2650]  COND FALSE  !(revert)
[L2653]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1895]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L1895]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  COND FALSE  !(revert)
[L1899]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1871]              assume msgsender_MSG != null;
[L1872]              Balance[this] := 0;
[L1873]              _balances_ERC20[this] := zeroRefintArr();
[L1874]              sum__balances0[this] := 0;
[L1875]              _allowed_ERC20[this] := zeroRefRefintArr();
[L1876]              sum__allowed1[this] := 0;
[L1877]              _totalSupply_ERC20[this] := 0;
[L1899]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1900]  COND FALSE  !(revert)
[L2653]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2654]  COND FALSE  !(revert)
[L2657]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2626]              assume msgsender_MSG != null;
[L2627]              Balance[this] := 0;
[L2657]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2658]  COND FALSE  !(revert)
[L2807]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L2808]  COND FALSE  !(revert)
[L2811]  CALL        call BNS_BNS_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2753]              assume msgsender_MSG != null;
[L2754]              Balance[this] := 0;
[L2756]              __var_16 := 250000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2757]  COND TRUE   DType[this] == BNS
[L2758]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 250000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2329]              __var_7 := null;
[L2330]  COND FALSE  !(!(account_s464 != null))
[L2334]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L1826]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]  COND FALSE  !(!(c_s174 >= a_s174))
[L1831]              __ret_0_ := c_s174;
[L2334]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L2335]  COND FALSE  !(revert)
[L2338]              _totalSupply_ERC20[this] := __var_8;
[L2339]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s464], value_s464);
[L1826]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]  COND FALSE  !(!(c_s174 >= a_s174))
[L1831]              __ret_0_ := c_s174;
[L2339]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s464], value_s464);
[L2340]  COND FALSE  !(revert)
[L2343]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s464];
[L2344]              _balances_ERC20[this][account_s464] := __var_9;
[L2345]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s464];
[L2346]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2758]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 250000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2759]  COND FALSE  !(revert)
[L2811]  RET         call BNS_BNS_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]  COND FALSE  !(revert)
[L1105]  RET         call BNS_BNS__success(this, msgsender_MSG, msgvalue_MSG);
[L1106]              assume !revert && gas >= 0;
[L4562]  RET         call BNS_BNS(this, msgsender_MSG, msgvalue_MSG);
[L4563]              assume !revert && gas >= 0;
[L4566]  CALL        call CorralChoice_BNS(this);
[L4415]              havoc msgsender_MSG;
[L4416]              havoc msgvalue_MSG;
[L4417]              havoc choice;
[L4418]              havoc to_s268;
[L4419]              havoc value_s268;
[L4420]              havoc __ret_0_transfer;
[L4421]              havoc spender_s287;
[L4422]              havoc value_s287;
[L4423]              havoc __ret_0_approve;
[L4424]              havoc from_s322;
[L4425]              havoc to_s322;
[L4426]              havoc value_s322;
[L4427]              havoc __ret_0_transferFrom;
[L4428]              havoc __ret_0_totalSupply;
[L4429]              havoc owner_s233;
[L4430]              havoc __ret_0_balanceOf;
[L4431]              havoc owner_s249;
[L4432]              havoc spender_s249;
[L4433]              havoc __ret_0_allowance;
[L4434]              havoc spender_s349;
[L4435]              havoc addedValue_s349;
[L4436]              havoc __ret_0_increaseAllowance;
[L4437]              havoc spender_s376;
[L4438]              havoc subtractedValue_s376;
[L4439]              havoc __ret_0_decreaseAllowance;
[L4440]              havoc name_s606;
[L4441]              havoc symbol_s606;
[L4442]              havoc decimals_s606;
[L4443]              havoc __ret_0_name;
[L4444]              havoc __ret_0_symbol;
[L4445]              havoc __ret_0_decimals;
[L4446]              havoc value_s646;
[L4447]              havoc from_s659;
[L4448]              havoc value_s659;
[L4449]              havoc tmpNow;
[L4450]              havoc gas;
[L4451]              assume gas > 4000000 && gas <= 8000000;
[L4452]              tmpNow := now;
[L4453]              havoc now;
[L4454]              assume now > tmpNow;
[L4455]              assume msgsender_MSG != null;
[L4456]              assume DType[msgsender_MSG] != IERC20;
[L4457]              assume DType[msgsender_MSG] != SafeMath;
[L4458]              assume DType[msgsender_MSG] != ERC20;
[L4459]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4460]              assume DType[msgsender_MSG] != ERC20Burnable;
[L4461]              assume DType[msgsender_MSG] != BNS;
[L4462]              Alloc[msgsender_MSG] := true;
[L4463]  COND TRUE   choice == 13
[L4464]              gas := gas - 21000;
[L4465]  COND TRUE   gas >= 0
[L4466]              assume value_s268 >= 0 && value_s268 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4467]              assume msgvalue_MSG == 0;
[L4468]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == to_s268 && value_s268 <= _balances_ERC20[this][msgsender_MSG]) && value_s268 >= 0) && value_s268 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s268] >= 0) && _balances_ERC20[this][to_s268] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L404]               havoc __exception;
[L405]               revert := false;
[L406]   COND FALSE  !(__exception)
[L427]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L1967]  COND TRUE   DType[this] == BNS
[L1968]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L2278]              __var_4 := null;
[L2279]  COND FALSE  !(!(to_s422 != null))
[L2283]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L1802]  COND FALSE  !(!(b_s150 <= a_s150))
[L1806]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1807]              __ret_0_ := c_s150;
[L2283]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L2284]  COND FALSE  !(revert)
[L2287]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s422];
[L2288]              _balances_ERC20[this][from_s422] := __var_5;
[L2289]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s422];
[L2290]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L1826]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]  COND FALSE  !(!(c_s174 >= a_s174))
[L1831]              __ret_0_ := c_s174;
[L2290]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L2291]  COND FALSE  !(revert)
[L2294]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s422];
[L2295]              _balances_ERC20[this][to_s422] := __var_6;
[L2296]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s422];
[L2297]              assert { :EventEmitted "Transfer_ERC20" } true;
[L1968]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L1969]  COND FALSE  !(revert)
[L1985]              __ret_0_ := true;
[L427]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L428]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4468]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L4566]  RET         call CorralChoice_BNS(this);
[L4566]  CALL        call CorralChoice_BNS(this);
[L4415]              havoc msgsender_MSG;
[L4416]              havoc msgvalue_MSG;
[L4417]              havoc choice;
[L4418]              havoc to_s268;
[L4419]              havoc value_s268;
[L4420]              havoc __ret_0_transfer;
[L4421]              havoc spender_s287;
[L4422]              havoc value_s287;
[L4423]              havoc __ret_0_approve;
[L4424]              havoc from_s322;
[L4425]              havoc to_s322;
[L4426]              havoc value_s322;
[L4427]              havoc __ret_0_transferFrom;
[L4428]              havoc __ret_0_totalSupply;
[L4429]              havoc owner_s233;
[L4430]              havoc __ret_0_balanceOf;
[L4431]              havoc owner_s249;
[L4432]              havoc spender_s249;
[L4433]              havoc __ret_0_allowance;
[L4434]              havoc spender_s349;
[L4435]              havoc addedValue_s349;
[L4436]              havoc __ret_0_increaseAllowance;
[L4437]              havoc spender_s376;
[L4438]              havoc subtractedValue_s376;
[L4439]              havoc __ret_0_decreaseAllowance;
[L4440]              havoc name_s606;
[L4441]              havoc symbol_s606;
[L4442]              havoc decimals_s606;
[L4443]              havoc __ret_0_name;
[L4444]              havoc __ret_0_symbol;
[L4445]              havoc __ret_0_decimals;
[L4446]              havoc value_s646;
[L4447]              havoc from_s659;
[L4448]              havoc value_s659;
[L4449]              havoc tmpNow;
[L4450]              havoc gas;
[L4451]              assume gas > 4000000 && gas <= 8000000;
[L4452]              tmpNow := now;
[L4453]              havoc now;
[L4454]              assume now > tmpNow;
[L4455]              assume msgsender_MSG != null;
[L4456]              assume DType[msgsender_MSG] != IERC20;
[L4457]              assume DType[msgsender_MSG] != SafeMath;
[L4458]              assume DType[msgsender_MSG] != ERC20;
[L4459]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4460]              assume DType[msgsender_MSG] != ERC20Burnable;
[L4461]              assume DType[msgsender_MSG] != BNS;
[L4462]              Alloc[msgsender_MSG] := true;
[L4463]  COND TRUE   choice == 13
[L4464]              gas := gas - 21000;
[L4465]  COND TRUE   gas >= 0
[L4466]              assume value_s268 >= 0 && value_s268 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4467]              assume msgvalue_MSG == 0;
[L4468]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s268 && value_s268 <= _balances_ERC20[this][msgsender_MSG]) && value_s268 >= 0) && value_s268 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s268] >= 0) && _balances_ERC20[this][to_s268] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L404]               havoc __exception;
[L405]               revert := false;
[L406]   COND FALSE  !(__exception)
[L427]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L1967]  COND TRUE   DType[this] == BNS
[L1968]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L2278]              __var_4 := null;
[L2279]  COND FALSE  !(!(to_s422 != null))
[L2283]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L1802]  COND FALSE  !(!(b_s150 <= a_s150))
[L1806]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1807]              __ret_0_ := c_s150;
[L2283]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L2284]  COND FALSE  !(revert)
[L2287]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s422];
[L2288]              _balances_ERC20[this][from_s422] := __var_5;
[L2289]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s422];
[L2290]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L1826]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]  COND FALSE  !(!(c_s174 >= a_s174))
[L1831]              __ret_0_ := c_s174;
[L2290]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L2291]  COND FALSE  !(revert)
[L2294]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s422];
[L2295]              _balances_ERC20[this][to_s422] := __var_6;
[L2296]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s422];
[L2297]              assert { :EventEmitted "Transfer_ERC20" } true;
[L1968]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L1969]  COND FALSE  !(revert)
[L1985]              __ret_0_ := true;
[L427]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L428]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4468]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s268, value_s268);
[L4566]  RET         call CorralChoice_BNS(this);

Loop:
[L4566]  CALL        call CorralChoice_BNS(this);
[L4415]              havoc msgsender_MSG;
[L4416]              havoc msgvalue_MSG;
[L4417]              havoc choice;
[L4418]              havoc to_s268;
[L4419]              havoc value_s268;
[L4420]              havoc __ret_0_transfer;
[L4421]              havoc spender_s287;
[L4422]              havoc value_s287;
[L4423]              havoc __ret_0_approve;
[L4424]              havoc from_s322;
[L4425]              havoc to_s322;
[L4426]              havoc value_s322;
[L4427]              havoc __ret_0_transferFrom;
[L4428]              havoc __ret_0_totalSupply;
[L4429]              havoc owner_s233;
[L4430]              havoc __ret_0_balanceOf;
[L4431]              havoc owner_s249;
[L4432]              havoc spender_s249;
[L4433]              havoc __ret_0_allowance;
[L4434]              havoc spender_s349;
[L4435]              havoc addedValue_s349;
[L4436]              havoc __ret_0_increaseAllowance;
[L4437]              havoc spender_s376;
[L4438]              havoc subtractedValue_s376;
[L4439]              havoc __ret_0_decreaseAllowance;
[L4440]              havoc name_s606;
[L4441]              havoc symbol_s606;
[L4442]              havoc decimals_s606;
[L4443]              havoc __ret_0_name;
[L4444]              havoc __ret_0_symbol;
[L4445]              havoc __ret_0_decimals;
[L4446]              havoc value_s646;
[L4447]              havoc from_s659;
[L4448]              havoc value_s659;
[L4449]              havoc tmpNow;
[L4450]              havoc gas;
[L4451]              assume gas > 4000000 && gas <= 8000000;
[L4452]              tmpNow := now;
[L4453]              havoc now;
[L4454]              assume now > tmpNow;
[L4455]              assume msgsender_MSG != null;
[L4456]              assume DType[msgsender_MSG] != IERC20;
[L4457]              assume DType[msgsender_MSG] != SafeMath;
[L4458]              assume DType[msgsender_MSG] != ERC20;
[L4459]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4460]              assume DType[msgsender_MSG] != ERC20Burnable;
[L4461]              assume DType[msgsender_MSG] != BNS;
[L4462]              Alloc[msgsender_MSG] := true;
[L4463]  COND TRUE   choice == 13
[L4464]              gas := gas - 21000;
[L4465]  COND FALSE  !(gas >= 0)
[L4566]  RET         call CorralChoice_BNS(this);

[2020-11-25 01:14:03,910 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:14:03,910 INFO  L82        PathProgramCache]: Analyzing trace with hash -820941417, now seen corresponding path program 1 times
[2020-11-25 01:14:03,910 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:14:03,983 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:14:04,486 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 01:14:05,198 INFO  L134       CoverageAnalysis]: Checked inductivity of 194 backedges. 10 proven. 15 refuted. 0 times theorem prover too weak. 169 trivial. 0 not checked.
[2020-11-25 01:14:05,199 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:14:05,199 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [54] total 54
[2020-11-25 01:14:05,199 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:14:05,199 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 54 interpolants.
[2020-11-25 01:14:05,200 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=151, Invalid=2711, Unknown=0, NotChecked=0, Total=2862
[2020-11-25 01:14:05,200 INFO  L87              Difference]: Start difference. First operand 2244 states and 2597 transitions. cyclomatic complexity: 359 Second operand 54 states.
[2020-11-25 01:14:10,101 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:14:10,101 INFO  L93              Difference]: Finished difference Result 1202 states and 1374 transitions.
[2020-11-25 01:14:10,102 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 43 states. 
[2020-11-25 01:14:10,102 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1202 states and 1374 transitions.
[2020-11-25 01:14:10,104 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 01:14:10,104 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1202 states to 0 states and 0 transitions.
[2020-11-25 01:14:10,104 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 01:14:10,104 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 01:14:10,104 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 01:14:10,104 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:14:10,104 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 01:14:10,104 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 01:14:10,104 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 01:14:10,104 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 01:14:10,104 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 01:14:10,104 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 01:14:10,104 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 01:14:10,107 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 01:14:10 BasicIcfg
[2020-11-25 01:14:10,107 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 01:14:10,107 INFO  L168              Benchmark]: Toolchain (without parser) took 36963.12 ms. Allocated memory was 1.0 GB in the beginning and 2.7 GB in the end (delta: 1.7 GB). Free memory was 935.2 MB in the beginning and 1.5 GB in the end (delta: -594.2 MB). Peak memory consumption was 1.1 GB. Max. memory is 15.3 GB.
[2020-11-25 01:14:10,108 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 01:14:10,108 INFO  L168              Benchmark]: Boogie Preprocessor took 112.32 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 01:14:10,108 INFO  L168              Benchmark]: UtopiaSpecLang took 58.56 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 01:14:10,108 INFO  L168              Benchmark]: Boogie Printer took 17.50 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 913.7 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 01:14:10,109 INFO  L168              Benchmark]: RCFGBuilder took 849.04 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 790.2 MB in the end (delta: 123.5 MB). Peak memory consumption was 123.5 MB. Max. memory is 15.3 GB.
[2020-11-25 01:14:10,109 INFO  L168              Benchmark]: UtopiaLTL2Aut took 47.51 ms. Allocated memory is still 1.0 GB. Free memory was 790.2 MB in the beginning and 786.6 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-25 01:14:10,109 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1287.54 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 216.0 MB). Free memory was 786.6 MB in the beginning and 966.1 MB in the end (delta: -179.5 MB). Peak memory consumption was 178.0 MB. Max. memory is 15.3 GB.
[2020-11-25 01:14:10,109 INFO  L168              Benchmark]: BlockEncodingV2 took 151.35 ms. Allocated memory is still 1.2 GB. Free memory was 966.1 MB in the beginning and 891.0 MB in the end (delta: 75.2 MB). Peak memory consumption was 75.2 MB. Max. memory is 15.3 GB.
[2020-11-25 01:14:10,110 INFO  L168              Benchmark]: BuchiAutomizer took 34436.26 ms. Allocated memory was 1.2 GB in the beginning and 2.7 GB in the end (delta: 1.5 GB). Free memory was 891.0 MB in the beginning and 1.5 GB in the end (delta: -638.5 MB). Peak memory consumption was 835.3 MB. Max. memory is 15.3 GB.
[2020-11-25 01:14:10,112 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    4092 locations, 7555 edges
  - StatisticsResult: Encoded RCFG
    4012 locations, 7338 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 112.32 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 58.56 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 17.50 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 913.7 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 849.04 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 790.2 MB in the end (delta: 123.5 MB). Peak memory consumption was 123.5 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 47.51 ms. Allocated memory is still 1.0 GB. Free memory was 790.2 MB in the beginning and 786.6 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1287.54 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 216.0 MB). Free memory was 786.6 MB in the beginning and 966.1 MB in the end (delta: -179.5 MB). Peak memory consumption was 178.0 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 151.35 ms. Allocated memory is still 1.2 GB. Free memory was 966.1 MB in the beginning and 891.0 MB in the end (delta: 75.2 MB). Peak memory consumption was 75.2 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 34436.26 ms. Allocated memory was 1.2 GB in the beginning and 2.7 GB in the end (delta: 1.5 GB). Free memory was 891.0 MB in the beginning and 1.5 GB in the end (delta: -638.5 MB). Peak memory consumption was 835.3 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1599 locations, 2300 edges
  - StatisticsResult: BuchiProgram size
    4092 locations, 7555 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 12 terminating modules (12 trivial, 0 deterministic, 0 nondeterministic). 12 modules have a trivial ranking function, the largest among these consists of 54 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 34.4s and 13 iterations.  TraceHistogramMax:5. Analysis of lassos took 5.3s. Construction of modules took 22.8s. BÃ¼chi inclusion checks took 5.5s. Highest rank in rank-based complementation 0. Minimization of det autom 12. Minimization of nondet autom 0. Automata minimization 0.2s AutomataMinimizationTime, 11 MinimizatonAttempts, 1752 StatesRemovedByMinimization, 8 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 2770 states and ocurred in iteration 2.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 31286 SDtfs, 37453 SDslu, 126005 SDs, 0 SdLazy, 147536 SolverSat, 8752 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 22.8s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU12 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transfer_ERC200) ==> ( <>(success_transfer_ERC200) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
