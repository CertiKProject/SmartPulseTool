This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 13:56:50,517 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 13:56:50,518 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 13:56:50,529 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 13:56:50,529 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 13:56:50,530 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 13:56:50,531 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 13:56:50,532 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 13:56:50,533 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 13:56:50,534 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 13:56:50,535 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 13:56:50,535 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 13:56:50,536 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 13:56:50,536 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 13:56:50,537 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 13:56:50,538 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 13:56:50,538 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 13:56:50,539 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 13:56:50,541 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 13:56:50,542 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 13:56:50,543 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 13:56:50,543 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 13:56:50,545 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 13:56:50,545 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 13:56:50,545 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 13:56:50,546 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 13:56:50,546 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 13:56:50,547 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 13:56:50,547 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 13:56:50,547 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 13:56:50,548 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 13:56:50,548 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 13:56:50,548 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 13:56:50,549 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 13:56:50,550 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 13:56:50,550 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 13:56:50,550 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 13:56:50,550 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 13:56:50,551 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 13:56:50,551 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 13:56:50,552 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 13:56:50,552 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 13:56:50,560 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 13:56:50,560 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 13:56:50,560 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 13:56:50,561 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 13:56:50,561 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 13:56:50,561 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 13:56:50,561 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 13:56:50,561 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 13:56:50,561 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 13:56:50,561 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 13:56:50,562 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 13:56:50,562 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 13:56:50,562 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 13:56:50,562 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 13:56:50,562 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 13:56:50,562 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 13:56:50,562 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 13:56:50,562 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 13:56:50,562 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 13:56:50,563 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 13:56:50,563 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 13:56:50,563 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 13:56:50,563 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 13:56:50,563 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 13:56:50,563 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 13:56:50,563 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 13:56:50,583 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 13:56:50,596 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 13:56:50,599 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 13:56:50,601 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 13:56:50,601 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 13:56:50,602 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/DiceToken_0xcf67ced76e8356366291246a9222169f4dbdbe64_transfer-self.bpl
[2020-11-25 13:56:50,602 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/DiceToken_0xcf67ced76e8356366291246a9222169f4dbdbe64_transfer-self.bpl'
[2020-11-25 13:56:50,674 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 13:56:50,675 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 13:56:50,675 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 13:56:50,675 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 13:56:50,675 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 13:56:50,692 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "DiceToken_0xcf67ced76e8356366291246a9222169f4dbdbe64_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:56:50" (1/1) ...
[2020-11-25 13:56:50,694 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "DiceToken_0xcf67ced76e8356366291246a9222169f4dbdbe64_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:56:50" (1/1) ...
[2020-11-25 13:56:50,719 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "DiceToken_0xcf67ced76e8356366291246a9222169f4dbdbe64_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:56:50" (1/1) ...
[2020-11-25 13:56:50,720 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "DiceToken_0xcf67ced76e8356366291246a9222169f4dbdbe64_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:56:50" (1/1) ...
[2020-11-25 13:56:50,737 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "DiceToken_0xcf67ced76e8356366291246a9222169f4dbdbe64_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:56:50" (1/1) ...
[2020-11-25 13:56:50,745 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "DiceToken_0xcf67ced76e8356366291246a9222169f4dbdbe64_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:56:50" (1/1) ...
[2020-11-25 13:56:50,753 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "DiceToken_0xcf67ced76e8356366291246a9222169f4dbdbe64_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:56:50" (1/1) ...
[2020-11-25 13:56:50,763 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 13:56:50,764 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 13:56:50,764 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 13:56:50,766 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 13:56:50,769 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "DiceToken_0xcf67ced76e8356366291246a9222169f4dbdbe64_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:56:50" (1/1) ...
[2020-11-25 13:56:50,786 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(DiceToken.transfer(to, value), msg.sender == to && value <= balances_DiceToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_DiceToken[this][to] >= 0 && balances_DiceToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_DiceToken[this][msg.sender] >= 0 &&  balances_DiceToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(DiceToken.transfer(to, value), return == true && _totalSupply_DiceToken[this] == old(_totalSupply_DiceToken[this]) && balances_DiceToken[this] == old(balances_DiceToken[this]) && allowed_DiceToken[this] == old(allowed_DiceToken[this]) && symbol_DiceToken[this] == old(symbol_DiceToken[this]) && name_DiceToken[this] == old(name_DiceToken[this]) && decimals_DiceToken[this] == old(decimals_DiceToken[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 13:56:50,791 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(DiceToken.transfer(to, value), msg.sender == to && value <= balances_DiceToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_DiceToken[this][to] >= 0 && balances_DiceToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_DiceToken[this][msg.sender] >= 0 &&  balances_DiceToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(DiceToken.transfer(to, value), return == true && _totalSupply_DiceToken[this] == old(_totalSupply_DiceToken[this]) && balances_DiceToken[this] == old(balances_DiceToken[this]) && allowed_DiceToken[this] == old(allowed_DiceToken[this]) && symbol_DiceToken[this] == old(symbol_DiceToken[this]) && name_DiceToken[this] == old(name_DiceToken[this]) && decimals_DiceToken[this] == old(decimals_DiceToken[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 13:56:50,799 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(DiceToken.transfer(to, value), msg.sender == to && value <= balances_DiceToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_DiceToken[this][to] >= 0 && balances_DiceToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_DiceToken[this][msg.sender] >= 0 &&  balances_DiceToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(DiceToken.transfer(to, value), return == true && _totalSupply_DiceToken[this] == old(_totalSupply_DiceToken[this]) && balances_DiceToken[this] == old(balances_DiceToken[this]) && allowed_DiceToken[this] == old(allowed_DiceToken[this]) && symbol_DiceToken[this] == old(symbol_DiceToken[this]) && name_DiceToken[this] == old(name_DiceToken[this]) && decimals_DiceToken[this] == old(decimals_DiceToken[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 13:56:50,806 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==to_s366 && tokens_s366<=balances_DiceToken[this][msg.sender] ) && tokens_s366>=0 ) && tokens_s366<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_DiceToken[this][to_s366]>=0 ) && balances_DiceToken[this][to_s366]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_DiceToken[this][msg.sender]>=0 ) && balances_DiceToken[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>],IdentifierExpression[to_s366,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>]],BinaryExpression[COMPLEQ,IdentifierExpression[tokens_s366,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_DiceToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[tokens_s366,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[tokens_s366,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_DiceToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>]]],[IdentifierExpression[to_s366,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_DiceToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>]]],[IdentifierExpression[to_s366,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_DiceToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_DiceToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 13:56:50,808 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( success_s366==true && _totalSupply_DiceToken[this]==( old(_totalSupply_DiceToken[this]) ) ) && balances_DiceToken[this]==( old(balances_DiceToken[this]) ) ) && allowed_DiceToken[this]==( old(allowed_DiceToken[this]) ) ) && symbol_DiceToken[this]==( old(symbol_DiceToken[this]) ) ) && name_DiceToken[this]==( old(name_DiceToken[this]) ) ) && decimals_DiceToken[this]==( old(decimals_DiceToken[this]) ) ) && owner_Owned[this]==( old(owner_Owned[this]) ) ) && newOwner_Owned[this]==( old(newOwner_Owned[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[success_s366,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_DiceToken>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_DiceToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_DiceToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[balances_DiceToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[balances_DiceToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[allowed_DiceToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[allowed_DiceToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_DiceToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_DiceToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_DiceToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_DiceToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_DiceToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_DiceToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[newOwner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[newOwner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>]]]]]]
[2020-11-25 13:56:50,813 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(DiceToken.transfer(to, value), msg.sender == to && value <= balances_DiceToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_DiceToken[this][to] >= 0 && balances_DiceToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_DiceToken[this][msg.sender] >= 0 &&  balances_DiceToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(DiceToken.transfer(to, value), return == true && _totalSupply_DiceToken[this] == old(_totalSupply_DiceToken[this]) && balances_DiceToken[this] == old(balances_DiceToken[this]) && allowed_DiceToken[this] == old(allowed_DiceToken[this]) && symbol_DiceToken[this] == old(symbol_DiceToken[this]) && name_DiceToken[this] == old(name_DiceToken[this]) && decimals_DiceToken[this] == old(decimals_DiceToken[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 13:56:50,813 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_DiceToken0) ==> ( <>AP(success_transfer_DiceToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 13:56:50,821 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:56:50 PropertyContainer
[2020-11-25 13:56:50,821 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 13:56:50,821 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 13:56:50,821 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 13:56:50,821 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 13:56:50,822 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "DiceToken_0xcf67ced76e8356366291246a9222169f4dbdbe64_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:56:50" (1/2) ...
[2020-11-25 13:56:50,822 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 13:56:50,823 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 13:56:50,834 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:56:50" (2/2) ...
[2020-11-25 13:56:50,834 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 13:56:50,835 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 13:56:50,835 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 13:56:50,835 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 13:56:50,835 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "DiceToken_0xcf67ced76e8356366291246a9222169f4dbdbe64_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:56:50" (1/2) ...
[2020-11-25 13:56:50,887 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 13:56:50,887 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 13:56:50,887 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 13:56:50,887 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 13:56:50,887 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 13:56:50,887 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 13:56:50,887 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 13:56:50,887 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 13:56:50,888 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 13:56:50,888 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface
[2020-11-25 13:56:50,888 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface
[2020-11-25 13:56:50,888 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Interface
[2020-11-25 13:56:50,888 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Interface
[2020-11-25 13:56:50,888 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20Interface
[2020-11-25 13:56:50,888 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Interface
[2020-11-25 13:56:50,888 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Interface
[2020-11-25 13:56:50,889 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Interface
[2020-11-25 13:56:50,889 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 13:56:50,889 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned
[2020-11-25 13:56:50,889 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned
[2020-11-25 13:56:50,889 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned
[2020-11-25 13:56:50,889 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned
[2020-11-25 13:56:50,889 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned
[2020-11-25 13:56:50,889 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned
[2020-11-25 13:56:50,889 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned
[2020-11-25 13:56:50,889 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned
[2020-11-25 13:56:50,889 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned
[2020-11-25 13:56:50,890 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned
[2020-11-25 13:56:50,890 INFO  L130     BoogieDeclarations]: Found specification of procedure DiceToken_DiceToken_NoBaseCtor__success
[2020-11-25 13:56:50,890 INFO  L130     BoogieDeclarations]: Found specification of procedure DiceToken_DiceToken
[2020-11-25 13:56:50,890 INFO  L138     BoogieDeclarations]: Found implementation of procedure DiceToken_DiceToken
[2020-11-25 13:56:50,890 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_DiceToken
[2020-11-25 13:56:50,890 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_DiceToken
[2020-11-25 13:56:50,890 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_DiceToken
[2020-11-25 13:56:50,890 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_DiceToken
[2020-11-25 13:56:50,890 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_DiceToken
[2020-11-25 13:56:50,890 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_DiceToken
[2020-11-25 13:56:50,890 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_DiceToken
[2020-11-25 13:56:50,890 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_DiceToken
[2020-11-25 13:56:50,890 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_DiceToken
[2020-11-25 13:56:50,891 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_DiceToken
[2020-11-25 13:56:50,891 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_DiceToken
[2020-11-25 13:56:50,891 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_DiceToken
[2020-11-25 13:56:50,891 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_DiceToken__success
[2020-11-25 13:56:50,891 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~uint256_DiceToken
[2020-11-25 13:56:50,891 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~uint256_DiceToken
[2020-11-25 13:56:50,891 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_DiceToken
[2020-11-25 13:56:50,891 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_DiceToken
[2020-11-25 13:56:50,891 INFO  L130     BoogieDeclarations]: Found specification of procedure name_DiceToken
[2020-11-25 13:56:50,891 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_DiceToken
[2020-11-25 13:56:50,891 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_DiceToken
[2020-11-25 13:56:50,891 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_DiceToken
[2020-11-25 13:56:50,891 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_DiceToken
[2020-11-25 13:56:50,891 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_DiceToken
[2020-11-25 13:56:50,892 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 13:56:50,892 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 13:56:50,892 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 13:56:50,892 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 13:56:50,892 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 13:56:50,892 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 13:56:50,892 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Interface
[2020-11-25 13:56:50,892 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Interface
[2020-11-25 13:56:50,892 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Owned
[2020-11-25 13:56:50,892 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Owned
[2020-11-25 13:56:50,892 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_DiceToken
[2020-11-25 13:56:50,892 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 13:56:50,892 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 13:56:50,893 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 13:56:50,893 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 13:56:50,893 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 13:56:50,893 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 13:56:50,893 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 13:56:50,893 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 13:56:50,893 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 13:56:50,893 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 13:56:50,893 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 13:56:50,893 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 13:56:50,893 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 13:56:50,893 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__success
[2020-11-25 13:56:50,893 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__fail
[2020-11-25 13:56:50,894 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__success
[2020-11-25 13:56:50,894 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__fail
[2020-11-25 13:56:50,894 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__success
[2020-11-25 13:56:50,894 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__fail
[2020-11-25 13:56:50,894 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__success
[2020-11-25 13:56:50,894 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__fail
[2020-11-25 13:56:50,894 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__success
[2020-11-25 13:56:50,894 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__fail
[2020-11-25 13:56:50,894 INFO  L130     BoogieDeclarations]: Found specification of procedure DiceToken_DiceToken_NoBaseCtor__fail
[2020-11-25 13:56:50,894 INFO  L130     BoogieDeclarations]: Found specification of procedure DiceToken_DiceToken__success
[2020-11-25 13:56:50,894 INFO  L130     BoogieDeclarations]: Found specification of procedure DiceToken_DiceToken__fail
[2020-11-25 13:56:50,894 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_DiceToken__success
[2020-11-25 13:56:50,895 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_DiceToken__fail
[2020-11-25 13:56:50,895 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_DiceToken__success
[2020-11-25 13:56:50,895 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_DiceToken__fail
[2020-11-25 13:56:50,895 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_DiceToken__success
[2020-11-25 13:56:50,895 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_DiceToken__fail
[2020-11-25 13:56:50,895 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_DiceToken__success
[2020-11-25 13:56:50,895 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_DiceToken__fail
[2020-11-25 13:56:50,895 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_DiceToken__success
[2020-11-25 13:56:50,895 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_DiceToken__fail
[2020-11-25 13:56:50,895 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_DiceToken__success
[2020-11-25 13:56:50,895 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_DiceToken__fail
[2020-11-25 13:56:50,895 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_DiceToken__fail
[2020-11-25 13:56:50,895 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~uint256_DiceToken__success
[2020-11-25 13:56:50,896 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~uint256_DiceToken__fail
[2020-11-25 13:56:50,896 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_DiceToken__success
[2020-11-25 13:56:50,896 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_DiceToken__fail
[2020-11-25 13:56:50,896 INFO  L130     BoogieDeclarations]: Found specification of procedure name_DiceToken__success
[2020-11-25 13:56:50,896 INFO  L130     BoogieDeclarations]: Found specification of procedure name_DiceToken__fail
[2020-11-25 13:56:50,896 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_DiceToken__success
[2020-11-25 13:56:50,896 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_DiceToken__fail
[2020-11-25 13:56:50,896 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_DiceToken__success
[2020-11-25 13:56:50,896 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_DiceToken__fail
[2020-11-25 13:56:50,896 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 13:56:50,896 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 13:56:50,896 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 13:56:50,896 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 13:56:50,897 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 13:56:50,897 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 13:56:50,897 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 13:56:50,897 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 13:56:50,897 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 13:56:50,897 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 13:56:50,897 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 13:56:50,897 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 13:56:50,897 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 13:56:50,897 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 13:56:50,897 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 13:56:50,897 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 13:56:50,897 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 13:56:50,898 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 13:56:50,898 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 13:56:50,898 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 13:56:50,898 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 13:56:50,898 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 13:56:50,898 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 13:56:50,898 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 13:56:50,898 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__fail
[2020-11-25 13:56:50,898 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__success
[2020-11-25 13:56:50,898 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__fail
[2020-11-25 13:56:50,898 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__success
[2020-11-25 13:56:50,898 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__fail
[2020-11-25 13:56:50,899 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__success
[2020-11-25 13:56:50,899 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__fail
[2020-11-25 13:56:50,899 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__success
[2020-11-25 13:56:50,899 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__fail
[2020-11-25 13:56:50,899 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__success
[2020-11-25 13:56:50,899 INFO  L138     BoogieDeclarations]: Found implementation of procedure DiceToken_DiceToken_NoBaseCtor__fail
[2020-11-25 13:56:50,899 INFO  L138     BoogieDeclarations]: Found implementation of procedure DiceToken_DiceToken_NoBaseCtor__success
[2020-11-25 13:56:50,899 INFO  L138     BoogieDeclarations]: Found implementation of procedure DiceToken_DiceToken__fail
[2020-11-25 13:56:50,899 INFO  L138     BoogieDeclarations]: Found implementation of procedure DiceToken_DiceToken__success
[2020-11-25 13:56:50,899 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_DiceToken__fail
[2020-11-25 13:56:50,899 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_DiceToken__success
[2020-11-25 13:56:50,900 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_DiceToken__fail
[2020-11-25 13:56:50,900 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_DiceToken__success
[2020-11-25 13:56:50,900 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_DiceToken__fail
[2020-11-25 13:56:50,900 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_DiceToken__success
[2020-11-25 13:56:50,900 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_DiceToken__fail
[2020-11-25 13:56:50,900 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_DiceToken__success
[2020-11-25 13:56:50,900 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_DiceToken__fail
[2020-11-25 13:56:50,900 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_DiceToken__success
[2020-11-25 13:56:50,900 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_DiceToken__fail
[2020-11-25 13:56:50,900 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_DiceToken__success
[2020-11-25 13:56:50,901 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_DiceToken__fail
[2020-11-25 13:56:50,901 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_DiceToken__success
[2020-11-25 13:56:50,901 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~uint256_DiceToken__fail
[2020-11-25 13:56:50,901 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~uint256_DiceToken__success
[2020-11-25 13:56:50,901 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_DiceToken__fail
[2020-11-25 13:56:50,901 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_DiceToken__success
[2020-11-25 13:56:50,901 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_DiceToken__fail
[2020-11-25 13:56:50,901 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_DiceToken__success
[2020-11-25 13:56:50,901 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_DiceToken__fail
[2020-11-25 13:56:50,901 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_DiceToken__success
[2020-11-25 13:56:50,902 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_DiceToken__fail
[2020-11-25 13:56:50,902 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_DiceToken__success
[2020-11-25 13:56:50,902 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 13:56:50,902 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 13:56:50,902 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 13:56:50,902 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 13:56:50,902 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 13:56:50,902 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 13:56:50,902 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 13:56:50,902 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 13:56:50,902 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 13:56:50,902 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 13:56:50,903 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Interface
[2020-11-25 13:56:50,903 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Interface
[2020-11-25 13:56:50,903 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Owned
[2020-11-25 13:56:50,903 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Owned
[2020-11-25 13:56:50,903 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_DiceToken
[2020-11-25 13:56:50,903 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 13:56:50,903 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 13:56:50,903 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 13:56:51,332 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 13:56:51,333 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 13:56:51,333 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 13:56:51,460 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 13:56:51,461 INFO  L286             CfgBuilder]: Removed 4 assue(true) statements.
[2020-11-25 13:56:51,462 INFO  L202        PluginConnector]: Adding new model DiceToken_0xcf67ced76e8356366291246a9222169f4dbdbe64_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:56:51 BoogieIcfgContainer
[2020-11-25 13:56:51,462 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:56:50" (2/2) ...
[2020-11-25 13:56:51,462 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 13:56:51,463 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@3e2870c4 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:56:51, skipping insertion in model container
[2020-11-25 13:56:51,463 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 13:56:51,463 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 13:56:51,463 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 13:56:51,464 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 13:56:51,465 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "DiceToken_0xcf67ced76e8356366291246a9222169f4dbdbe64_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:56:50" (1/3) ...
[2020-11-25 13:56:51,465 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@26cc6b43 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:56:51, skipping insertion in model container
[2020-11-25 13:56:51,465 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:56:50" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 13:56:51,501 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:56:51 NWAContainer
[2020-11-25 13:56:51,501 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 13:56:51,501 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 13:56:51,501 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 13:56:51,502 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 13:56:51,503 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "DiceToken_0xcf67ced76e8356366291246a9222169f4dbdbe64_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:56:51" (3/4) ...
[2020-11-25 13:56:51,503 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@4651d71e and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:56:51, skipping insertion in model container
[2020-11-25 13:56:51,504 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:56:51" (4/4) ...
[2020-11-25 13:56:51,506 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 13:56:51,509 INFO  L110   BuchiProductObserver]: Initial RCFG 1190 locations, 1487 edges
[2020-11-25 13:56:51,510 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 13:56:51,520 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 13:56:52,649 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 13:56:52,653 INFO  L110   BuchiProductObserver]: BuchiProgram size 2830 locations, 4813 edges
[2020-11-25 13:56:52,654 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:56:52 BoogieIcfgContainer
[2020-11-25 13:56:52,654 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 13:56:52,654 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 13:56:52,654 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 13:56:52,656 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 13:56:52,657 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:56:52" (1/1) ...
[2020-11-25 13:56:52,807 INFO  L313           BlockEncoder]: Initial Icfg 2830 locations, 4813 edges
[2020-11-25 13:56:52,807 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 13:56:52,808 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 13:56:52,808 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 13:56:52,809 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 13:56:52,817 INFO  L70    emoveInfeasibleEdges]: Removed 51 edges and 11 locations because of local infeasibility
[2020-11-25 13:56:52,822 INFO  L70        RemoveSinkStates]: Removed 8 edges and 5 locations by removing sink states
[2020-11-25 13:56:52,835 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 13:56:52,839 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 13:56:52,842 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 13:56:52,843 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 13:56:52,847 INFO  L313           BlockEncoder]: Encoded RCFG 2796 locations, 4728 edges
[2020-11-25 13:56:52,848 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 01:56:52 BasicIcfg
[2020-11-25 13:56:52,848 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 13:56:52,848 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 13:56:52,848 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 13:56:52,850 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 13:56:52,851 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 13:56:52,851 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "DiceToken_0xcf67ced76e8356366291246a9222169f4dbdbe64_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:56:50" (1/6) ...
[2020-11-25 13:56:52,853 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6517e810 and model type DiceToken_0xcf67ced76e8356366291246a9222169f4dbdbe64_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:56:52, skipping insertion in model container
[2020-11-25 13:56:52,853 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 13:56:52,853 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:56:50" (2/6) ...
[2020-11-25 13:56:52,853 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6517e810 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:56:52, skipping insertion in model container
[2020-11-25 13:56:52,853 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 13:56:52,853 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "DiceToken_0xcf67ced76e8356366291246a9222169f4dbdbe64_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:56:51" (3/6) ...
[2020-11-25 13:56:52,854 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6517e810 and model type DiceToken_0xcf67ced76e8356366291246a9222169f4dbdbe64_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 01:56:52, skipping insertion in model container
[2020-11-25 13:56:52,854 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 13:56:52,854 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:56:51" (4/6) ...
[2020-11-25 13:56:52,854 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6517e810 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:56:52, skipping insertion in model container
[2020-11-25 13:56:52,854 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 13:56:52,854 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:56:52" (5/6) ...
[2020-11-25 13:56:52,854 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6517e810 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 01:56:52, skipping insertion in model container
[2020-11-25 13:56:52,854 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 13:56:52,854 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 01:56:52" (6/6) ...
[2020-11-25 13:56:52,855 INFO  L404   chiAutomizerObserver]: Analyzing ICFG DiceToken_0xcf67ced76e8356366291246a9222169f4dbdbe64_transfer-self.bpl_BEv2
[2020-11-25 13:56:52,895 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 13:56:52,895 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 13:56:52,896 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 13:56:52,896 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 13:56:52,896 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 13:56:52,896 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 13:56:52,896 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 13:56:52,896 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 13:56:52,896 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 13:56:52,927 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2796 states.
[2020-11-25 13:56:52,976 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:56:52,977 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:56:52,977 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:56:52,986 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:56:52,986 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:56:52,986 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 13:56:52,986 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2796 states.
[2020-11-25 13:56:53,008 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:56:53,008 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:56:53,008 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:56:53,010 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:56:53,011 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_DiceToken0 := false;
[L2]                 call_transfer_DiceToken0 := false;
[L2]     CALL        call main();
[L3294]              assume null == 0;
[L3295]  CALL        call this := FreshRefGenerator__success();
[L1535]              havoc newRef;
[L1536]              assume Alloc[newRef] == false;
[L1537]              Alloc[newRef] := true;
[L1538]              assume newRef != null;
[L3295]  RET         call this := FreshRefGenerator__success();
[L3296]              assume now >= 0;
[L3297]              assume DType[this] == DiceToken;
[L3298]              assume msgvalue_MSG == 0;
[L3299]              gas := gas - 53000;
[L3300]  CALL        call DiceToken_DiceToken(this, msgsender_MSG, msgvalue_MSG);
[L501]               havoc __exception;
[L502]               revert := false;
[L503]   COND FALSE  !(__exception)
[L526]   CALL        call DiceToken_DiceToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1853]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1671]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1656]              assume msgsender_MSG != null;
[L1657]              Balance[this] := 0;
[L1671]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1672]  COND FALSE  !(revert)
[L1853]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1854]  COND TRUE   revert
[L526]   RET         call DiceToken_DiceToken__success(this, msgsender_MSG, msgvalue_MSG);
[L527]               assume !revert && gas >= 0;
[L3300]  RET         call DiceToken_DiceToken(this, msgsender_MSG, msgvalue_MSG);
[L3301]              assume !revert && gas >= 0;

Loop:
[L3304]  CALL        call CorralChoice_DiceToken(this);
[L3151]              havoc msgsender_MSG;
[L3152]              havoc msgvalue_MSG;
[L3153]              havoc choice;
[L3154]              havoc __ret_0_totalSupply;
[L3155]              havoc tokenOwner_s323;
[L3156]              havoc balance_s323;
[L3157]              havoc tokenOwner_s469;
[L3158]              havoc spender_s469;
[L3159]              havoc remaining_s469;
[L3160]              havoc to_s366;
[L3161]              havoc tokens_s366;
[L3162]              havoc success_s366;
[L3163]              havoc spender_s394;
[L3164]              havoc tokens_s394;
[L3165]              havoc success_s394;
[L3166]              havoc from_s453;
[L3167]              havoc to_s453;
[L3168]              havoc tokens_s453;
[L3169]              havoc success_s453;
[L3170]              havoc __ret_0_owner;
[L3171]              havoc __ret_0_newOwner;
[L3172]              havoc _newOwner_s205;
[L3173]              havoc __ret_0_symbol;
[L3174]              havoc __ret_0_name;
[L3175]              havoc __ret_0_decimals;
[L3176]              havoc __ret_0__totalSupply;
[L3177]              havoc tokenAddress_s496;
[L3178]              havoc tokens_s496;
[L3179]              havoc success_s496;
[L3180]              havoc tmpNow;
[L3181]              havoc gas;
[L3182]              assume gas > 4000000 && gas <= 8000000;
[L3183]              tmpNow := now;
[L3184]              havoc now;
[L3185]              assume now > tmpNow;
[L3186]              assume msgsender_MSG != null;
[L3187]              assume DType[msgsender_MSG] != SafeMath;
[L3188]              assume DType[msgsender_MSG] != ERC20Interface;
[L3189]              assume DType[msgsender_MSG] != Owned;
[L3190]              assume DType[msgsender_MSG] != DiceToken;
[L3191]              Alloc[msgsender_MSG] := true;
[L3192]  COND TRUE   choice == 15
[L3193]              gas := gas - 21000;
[L3194]  COND FALSE  !(gas >= 0)
[L3304]  RET         call CorralChoice_DiceToken(this);

[2020-11-25 13:56:53,028 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:56:53,029 INFO  L82        PathProgramCache]: Analyzing trace with hash 521843744, now seen corresponding path program 1 times
[2020-11-25 13:56:53,036 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:56:53,059 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:56:53,102 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 13:56:53,104 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:56:53,104 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 13:56:53,108 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:56:53,219 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 13:56:53,219 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 13:56:53,221 INFO  L87              Difference]: Start difference. First operand 2796 states. Second operand 3 states.
[2020-11-25 13:56:53,350 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:56:53,350 INFO  L93              Difference]: Finished difference Result 1944 states and 2123 transitions.
[2020-11-25 13:56:53,350 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 13:56:53,352 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1944 states and 2123 transitions.
[2020-11-25 13:56:53,360 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:56:53,374 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1944 states to 1944 states and 2123 transitions.
[2020-11-25 13:56:53,375 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 13:56:53,377 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 647
[2020-11-25 13:56:53,377 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1944 states and 2123 transitions.
[2020-11-25 13:56:53,384 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:56:53,384 INFO  L728         BuchiCegarLoop]: Abstraction has 1944 states and 2123 transitions.
[2020-11-25 13:56:53,402 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1944 states and 2123 transitions.
[2020-11-25 13:56:53,442 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1944 to 1944.
[2020-11-25 13:56:53,443 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1944 states.
[2020-11-25 13:56:53,448 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1944 states to 1944 states and 2123 transitions.
[2020-11-25 13:56:53,449 INFO  L751         BuchiCegarLoop]: Abstraction has 1944 states and 2123 transitions.
[2020-11-25 13:56:53,449 INFO  L631         BuchiCegarLoop]: Abstraction has 1944 states and 2123 transitions.
[2020-11-25 13:56:53,449 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 13:56:53,449 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1944 states and 2123 transitions.
[2020-11-25 13:56:53,457 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:56:53,457 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:56:53,457 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:56:53,459 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:56:53,459 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_DiceToken0 := false;
[L2]                 call_transfer_DiceToken0 := false;
[L2]     CALL        call main();
[L3294]              assume null == 0;
[L3295]  CALL        call this := FreshRefGenerator__success();
[L1535]              havoc newRef;
[L1536]              assume Alloc[newRef] == false;
[L1537]              Alloc[newRef] := true;
[L1538]              assume newRef != null;
[L3295]  RET         call this := FreshRefGenerator__success();
[L3296]              assume now >= 0;
[L3297]              assume DType[this] == DiceToken;
[L3298]              assume msgvalue_MSG == 0;
[L3299]              gas := gas - 53000;
[L3300]  CALL        call DiceToken_DiceToken(this, msgsender_MSG, msgvalue_MSG);
[L501]               havoc __exception;
[L502]               revert := false;
[L503]   COND FALSE  !(__exception)
[L526]   CALL        call DiceToken_DiceToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1853]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1671]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1656]              assume msgsender_MSG != null;
[L1657]              Balance[this] := 0;
[L1671]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1672]  COND FALSE  !(revert)
[L1853]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1854]  COND TRUE   revert
[L526]   RET         call DiceToken_DiceToken__success(this, msgsender_MSG, msgvalue_MSG);
[L527]               assume !revert && gas >= 0;
[L3300]  RET         call DiceToken_DiceToken(this, msgsender_MSG, msgvalue_MSG);
[L3301]              assume !revert && gas >= 0;
[L3304]  CALL        call CorralChoice_DiceToken(this);
[L3151]              havoc msgsender_MSG;
[L3152]              havoc msgvalue_MSG;
[L3153]              havoc choice;
[L3154]              havoc __ret_0_totalSupply;
[L3155]              havoc tokenOwner_s323;
[L3156]              havoc balance_s323;
[L3157]              havoc tokenOwner_s469;
[L3158]              havoc spender_s469;
[L3159]              havoc remaining_s469;
[L3160]              havoc to_s366;
[L3161]              havoc tokens_s366;
[L3162]              havoc success_s366;
[L3163]              havoc spender_s394;
[L3164]              havoc tokens_s394;
[L3165]              havoc success_s394;
[L3166]              havoc from_s453;
[L3167]              havoc to_s453;
[L3168]              havoc tokens_s453;
[L3169]              havoc success_s453;
[L3170]              havoc __ret_0_owner;
[L3171]              havoc __ret_0_newOwner;
[L3172]              havoc _newOwner_s205;
[L3173]              havoc __ret_0_symbol;
[L3174]              havoc __ret_0_name;
[L3175]              havoc __ret_0_decimals;
[L3176]              havoc __ret_0__totalSupply;
[L3177]              havoc tokenAddress_s496;
[L3178]              havoc tokens_s496;
[L3179]              havoc success_s496;
[L3180]              havoc tmpNow;
[L3181]              havoc gas;
[L3182]              assume gas > 4000000 && gas <= 8000000;
[L3183]              tmpNow := now;
[L3184]              havoc now;
[L3185]              assume now > tmpNow;
[L3186]              assume msgsender_MSG != null;
[L3187]              assume DType[msgsender_MSG] != SafeMath;
[L3188]              assume DType[msgsender_MSG] != ERC20Interface;
[L3189]              assume DType[msgsender_MSG] != Owned;
[L3190]              assume DType[msgsender_MSG] != DiceToken;
[L3191]              Alloc[msgsender_MSG] := true;
[L3192]  COND FALSE  !(choice == 15)
[L3198]  COND FALSE  !(choice == 14)
[L3204]  COND FALSE  !(choice == 13)
[L3210]  COND TRUE   choice == 12
[L3211]              gas := gas - 21000;
[L3212]  COND TRUE   gas >= 0
[L3213]              assume tokens_s366 >= 0 && tokens_s366 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3214]              assume msgvalue_MSG == 0;
[L3215]  CALL        call success_s366 := transfer~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s366 && tokens_s366 <= balances_DiceToken[this][msgsender_MSG]) && tokens_s366 >= 0) && tokens_s366 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][to_s366] >= 0) && balances_DiceToken[this][to_s366] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][msgsender_MSG] >= 0) && balances_DiceToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DiceToken0 := true;
[L2]                 call_transfer_DiceToken0 := false;
[L2]                 revert := revert_hold;
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call success_s366 := transfer~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L1921]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][msgsender_MSG], tokens_s366);
[L1602]  COND TRUE   !(b_s45 <= a_s45)
[L1603]              revert := true;
[L1921]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][msgsender_MSG], tokens_s366);
[L1922]  COND TRUE   revert
[L690]   RET         call success_s366 := transfer~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L691]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((success_s366 == true && _totalSupply_DiceToken[this] == old(_totalSupply_DiceToken[this])) && balances_DiceToken[this] == old(balances_DiceToken[this])) && allowed_DiceToken[this] == old(allowed_DiceToken[this])) && symbol_DiceToken[this] == old(symbol_DiceToken[this])) && name_DiceToken[this] == old(name_DiceToken[this])) && decimals_DiceToken[this] == old(decimals_DiceToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L3215]  RET         call success_s366 := transfer~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L3304]  RET         call CorralChoice_DiceToken(this);

Loop:
[L3304]  CALL        call CorralChoice_DiceToken(this);
[L3151]              havoc msgsender_MSG;
[L3152]              havoc msgvalue_MSG;
[L3153]              havoc choice;
[L3154]              havoc __ret_0_totalSupply;
[L3155]              havoc tokenOwner_s323;
[L3156]              havoc balance_s323;
[L3157]              havoc tokenOwner_s469;
[L3158]              havoc spender_s469;
[L3159]              havoc remaining_s469;
[L3160]              havoc to_s366;
[L3161]              havoc tokens_s366;
[L3162]              havoc success_s366;
[L3163]              havoc spender_s394;
[L3164]              havoc tokens_s394;
[L3165]              havoc success_s394;
[L3166]              havoc from_s453;
[L3167]              havoc to_s453;
[L3168]              havoc tokens_s453;
[L3169]              havoc success_s453;
[L3170]              havoc __ret_0_owner;
[L3171]              havoc __ret_0_newOwner;
[L3172]              havoc _newOwner_s205;
[L3173]              havoc __ret_0_symbol;
[L3174]              havoc __ret_0_name;
[L3175]              havoc __ret_0_decimals;
[L3176]              havoc __ret_0__totalSupply;
[L3177]              havoc tokenAddress_s496;
[L3178]              havoc tokens_s496;
[L3179]              havoc success_s496;
[L3180]              havoc tmpNow;
[L3181]              havoc gas;
[L3182]              assume gas > 4000000 && gas <= 8000000;
[L3183]              tmpNow := now;
[L3184]              havoc now;
[L3185]              assume now > tmpNow;
[L3186]              assume msgsender_MSG != null;
[L3187]              assume DType[msgsender_MSG] != SafeMath;
[L3188]              assume DType[msgsender_MSG] != ERC20Interface;
[L3189]              assume DType[msgsender_MSG] != Owned;
[L3190]              assume DType[msgsender_MSG] != DiceToken;
[L3191]              Alloc[msgsender_MSG] := true;
[L3192]  COND FALSE  !(choice == 15)
[L3198]  COND FALSE  !(choice == 14)
[L3204]  COND FALSE  !(choice == 13)
[L3210]  COND TRUE   choice == 12
[L3211]              gas := gas - 21000;
[L3212]  COND TRUE   gas >= 0
[L3213]              assume tokens_s366 >= 0 && tokens_s366 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3214]              assume msgvalue_MSG == 0;
[L3215]  CALL        call success_s366 := transfer~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s366 && tokens_s366 <= balances_DiceToken[this][msgsender_MSG]) && tokens_s366 >= 0) && tokens_s366 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][to_s366] >= 0) && balances_DiceToken[this][to_s366] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][msgsender_MSG] >= 0) && balances_DiceToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DiceToken0 := true;
[L2]                 call_transfer_DiceToken0 := false;
[L2]                 revert := revert_hold;
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call success_s366 := transfer~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L1921]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][msgsender_MSG], tokens_s366);
[L1602]  COND TRUE   !(b_s45 <= a_s45)
[L1603]              revert := true;
[L1921]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][msgsender_MSG], tokens_s366);
[L1922]  COND TRUE   revert
[L690]   RET         call success_s366 := transfer~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L691]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((success_s366 == true && _totalSupply_DiceToken[this] == old(_totalSupply_DiceToken[this])) && balances_DiceToken[this] == old(balances_DiceToken[this])) && allowed_DiceToken[this] == old(allowed_DiceToken[this])) && symbol_DiceToken[this] == old(symbol_DiceToken[this])) && name_DiceToken[this] == old(name_DiceToken[this])) && decimals_DiceToken[this] == old(decimals_DiceToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L3215]  RET         call success_s366 := transfer~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L3304]  RET         call CorralChoice_DiceToken(this);

[2020-11-25 13:56:53,464 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:56:53,465 INFO  L82        PathProgramCache]: Analyzing trace with hash 216350992, now seen corresponding path program 1 times
[2020-11-25 13:56:53,466 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:56:53,478 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:56:53,501 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 13:56:53,502 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:56:53,502 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 13:56:53,503 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:56:53,503 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 13:56:53,504 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 13:56:53,504 INFO  L87              Difference]: Start difference. First operand 1944 states and 2123 transitions. cyclomatic complexity: 181 Second operand 4 states.
[2020-11-25 13:56:53,844 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:56:53,844 INFO  L93              Difference]: Finished difference Result 2828 states and 3207 transitions.
[2020-11-25 13:56:53,844 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 13:56:53,844 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2828 states and 3207 transitions.
[2020-11-25 13:56:53,857 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 13:56:53,870 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2828 states to 2736 states and 3107 transitions.
[2020-11-25 13:56:53,870 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 877
[2020-11-25 13:56:53,871 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 887
[2020-11-25 13:56:53,872 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2736 states and 3107 transitions.
[2020-11-25 13:56:53,876 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:56:53,876 INFO  L728         BuchiCegarLoop]: Abstraction has 2736 states and 3107 transitions.
[2020-11-25 13:56:53,878 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2736 states and 3107 transitions.
[2020-11-25 13:56:53,899 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2736 to 1984.
[2020-11-25 13:56:53,899 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1984 states.
[2020-11-25 13:56:53,902 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1984 states to 1984 states and 2123 transitions.
[2020-11-25 13:56:53,902 INFO  L751         BuchiCegarLoop]: Abstraction has 1984 states and 2123 transitions.
[2020-11-25 13:56:53,902 INFO  L631         BuchiCegarLoop]: Abstraction has 1984 states and 2123 transitions.
[2020-11-25 13:56:53,903 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 13:56:53,903 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1984 states and 2123 transitions.
[2020-11-25 13:56:53,907 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:56:53,907 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:56:53,907 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:56:53,909 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:56:53,909 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_DiceToken0 := false;
[L2]                 call_transfer_DiceToken0 := false;
[L2]     CALL        call main();
[L3294]              assume null == 0;
[L3295]  CALL        call this := FreshRefGenerator__success();
[L1535]              havoc newRef;
[L1536]              assume Alloc[newRef] == false;
[L1537]              Alloc[newRef] := true;
[L1538]              assume newRef != null;
[L3295]  RET         call this := FreshRefGenerator__success();
[L3296]              assume now >= 0;
[L3297]              assume DType[this] == DiceToken;
[L3298]              assume msgvalue_MSG == 0;
[L3299]              gas := gas - 53000;
[L3300]  CALL        call DiceToken_DiceToken(this, msgsender_MSG, msgvalue_MSG);
[L501]               havoc __exception;
[L502]               revert := false;
[L503]   COND FALSE  !(__exception)
[L526]   CALL        call DiceToken_DiceToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1853]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1671]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1656]              assume msgsender_MSG != null;
[L1657]              Balance[this] := 0;
[L1671]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1672]  COND FALSE  !(revert)
[L1853]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1854]  COND FALSE  !(revert)
[L1857]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1709]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1691]              assume msgsender_MSG != null;
[L1692]              Balance[this] := 0;
[L1693]              owner_Owned[this] := null;
[L1694]              newOwner_Owned[this] := null;
[L1696]              owner_Owned[this] := msgsender_MSG;
[L1709]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1710]  COND FALSE  !(revert)
[L1857]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1858]  COND FALSE  !(revert)
[L1861]  CALL        call DiceToken_DiceToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1811]              assume msgsender_MSG != null;
[L1812]              Balance[this] := 0;
[L1813]              symbol_DiceToken[this] := 31320490;
[L1814]              name_DiceToken[this] := 31320490;
[L1815]              decimals_DiceToken[this] := 0;
[L1816]              _totalSupply_DiceToken[this] := 0;
[L1817]              balances_DiceToken[this] := zeroRefintArr();
[L1818]              sum_balances0[this] := 0;
[L1819]              allowed_DiceToken[this] := zeroRefRefintArr();
[L1820]              sum_allowed1[this] := 0;
[L1822]              decimals_DiceToken[this] := 18;
[L1823]              symbol_DiceToken[this] := 884691297;
[L1824]              name_DiceToken[this] := 869301625;
[L1825]              __var_2 := decimals_DiceToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1826]              _totalSupply_DiceToken[this] := 30678 * (nonlinearPow(10, decimals_DiceToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][owner_Owned[this]];
[L1828]              balances_DiceToken[this][owner_Owned[this]] := _totalSupply_DiceToken[this];
[L1829]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][owner_Owned[this]];
[L1830]              assert { :EventEmitted "Transfer_DiceToken" } true;
[L1861]  RET         call DiceToken_DiceToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1862]  COND FALSE  !(revert)
[L526]   RET         call DiceToken_DiceToken__success(this, msgsender_MSG, msgvalue_MSG);
[L527]               assume !revert && gas >= 0;
[L3300]  RET         call DiceToken_DiceToken(this, msgsender_MSG, msgvalue_MSG);
[L3301]              assume !revert && gas >= 0;
[L3304]  CALL        call CorralChoice_DiceToken(this);
[L3151]              havoc msgsender_MSG;
[L3152]              havoc msgvalue_MSG;
[L3153]              havoc choice;
[L3154]              havoc __ret_0_totalSupply;
[L3155]              havoc tokenOwner_s323;
[L3156]              havoc balance_s323;
[L3157]              havoc tokenOwner_s469;
[L3158]              havoc spender_s469;
[L3159]              havoc remaining_s469;
[L3160]              havoc to_s366;
[L3161]              havoc tokens_s366;
[L3162]              havoc success_s366;
[L3163]              havoc spender_s394;
[L3164]              havoc tokens_s394;
[L3165]              havoc success_s394;
[L3166]              havoc from_s453;
[L3167]              havoc to_s453;
[L3168]              havoc tokens_s453;
[L3169]              havoc success_s453;
[L3170]              havoc __ret_0_owner;
[L3171]              havoc __ret_0_newOwner;
[L3172]              havoc _newOwner_s205;
[L3173]              havoc __ret_0_symbol;
[L3174]              havoc __ret_0_name;
[L3175]              havoc __ret_0_decimals;
[L3176]              havoc __ret_0__totalSupply;
[L3177]              havoc tokenAddress_s496;
[L3178]              havoc tokens_s496;
[L3179]              havoc success_s496;
[L3180]              havoc tmpNow;
[L3181]              havoc gas;
[L3182]              assume gas > 4000000 && gas <= 8000000;
[L3183]              tmpNow := now;
[L3184]              havoc now;
[L3185]              assume now > tmpNow;
[L3186]              assume msgsender_MSG != null;
[L3187]              assume DType[msgsender_MSG] != SafeMath;
[L3188]              assume DType[msgsender_MSG] != ERC20Interface;
[L3189]              assume DType[msgsender_MSG] != Owned;
[L3190]              assume DType[msgsender_MSG] != DiceToken;
[L3191]              Alloc[msgsender_MSG] := true;
[L3192]  COND FALSE  !(choice == 15)
[L3198]  COND FALSE  !(choice == 14)
[L3204]  COND FALSE  !(choice == 13)
[L3210]  COND TRUE   choice == 12
[L3211]              gas := gas - 21000;
[L3212]  COND TRUE   gas >= 0
[L3213]              assume tokens_s366 >= 0 && tokens_s366 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3214]              assume msgvalue_MSG == 0;
[L3215]  CALL        call success_s366 := transfer~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s366 && tokens_s366 <= balances_DiceToken[this][msgsender_MSG]) && tokens_s366 >= 0) && tokens_s366 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][to_s366] >= 0) && balances_DiceToken[this][to_s366] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][msgsender_MSG] >= 0) && balances_DiceToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DiceToken0 := true;
[L2]                 call_transfer_DiceToken0 := false;
[L2]                 revert := revert_hold;
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND TRUE   __exception
[L668]               __tmp__Balance := Balance;
[L669]               __tmp__DType := DType;
[L670]               __tmp__Alloc := Alloc;
[L671]               __tmp__balance_ADDR := balance_ADDR;
[L672]               __tmp__M_Ref_int := M_Ref_int;
[L673]               __tmp__sum_balances0 := sum_balances0;
[L674]               __tmp__alloc_allowed_DiceToken_lvl0 := alloc_allowed_DiceToken_lvl0;
[L675]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L676]               __tmp__sum_allowed1 := sum_allowed1;
[L677]               __tmp__Length := Length;
[L678]               __tmp__now := now;
[L679]               __tmp__owner_Owned := owner_Owned;
[L680]               __tmp__newOwner_Owned := newOwner_Owned;
[L681]               __tmp__symbol_DiceToken := symbol_DiceToken;
[L682]               __tmp__name_DiceToken := name_DiceToken;
[L683]               __tmp__decimals_DiceToken := decimals_DiceToken;
[L684]               __tmp___totalSupply_DiceToken := _totalSupply_DiceToken;
[L685]               __tmp__balances_DiceToken := balances_DiceToken;
[L686]               __tmp__allowed_DiceToken := allowed_DiceToken;
[L687]   CALL        call success_s366 := transfer~address~uint256_DiceToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L1899]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_DiceToken[this][msgsender_MSG], tokens_s366);
[L1593]  COND TRUE   !(b_s45 <= a_s45)
[L1594]              revert := true;
[L1899]  RET         call __var_4 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_DiceToken[this][msgsender_MSG], tokens_s366);
[L1900]  COND TRUE   revert
[L687]   RET         call success_s366 := transfer~address~uint256_DiceToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L688]               assume revert || gas < 0;
[L3215]  RET         call success_s366 := transfer~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L3304]  RET         call CorralChoice_DiceToken(this);

Loop:
[L3304]  CALL        call CorralChoice_DiceToken(this);
[L3151]              havoc msgsender_MSG;
[L3152]              havoc msgvalue_MSG;
[L3153]              havoc choice;
[L3154]              havoc __ret_0_totalSupply;
[L3155]              havoc tokenOwner_s323;
[L3156]              havoc balance_s323;
[L3157]              havoc tokenOwner_s469;
[L3158]              havoc spender_s469;
[L3159]              havoc remaining_s469;
[L3160]              havoc to_s366;
[L3161]              havoc tokens_s366;
[L3162]              havoc success_s366;
[L3163]              havoc spender_s394;
[L3164]              havoc tokens_s394;
[L3165]              havoc success_s394;
[L3166]              havoc from_s453;
[L3167]              havoc to_s453;
[L3168]              havoc tokens_s453;
[L3169]              havoc success_s453;
[L3170]              havoc __ret_0_owner;
[L3171]              havoc __ret_0_newOwner;
[L3172]              havoc _newOwner_s205;
[L3173]              havoc __ret_0_symbol;
[L3174]              havoc __ret_0_name;
[L3175]              havoc __ret_0_decimals;
[L3176]              havoc __ret_0__totalSupply;
[L3177]              havoc tokenAddress_s496;
[L3178]              havoc tokens_s496;
[L3179]              havoc success_s496;
[L3180]              havoc tmpNow;
[L3181]              havoc gas;
[L3182]              assume gas > 4000000 && gas <= 8000000;
[L3183]              tmpNow := now;
[L3184]              havoc now;
[L3185]              assume now > tmpNow;
[L3186]              assume msgsender_MSG != null;
[L3187]              assume DType[msgsender_MSG] != SafeMath;
[L3188]              assume DType[msgsender_MSG] != ERC20Interface;
[L3189]              assume DType[msgsender_MSG] != Owned;
[L3190]              assume DType[msgsender_MSG] != DiceToken;
[L3191]              Alloc[msgsender_MSG] := true;
[L3192]  COND FALSE  !(choice == 15)
[L3198]  COND FALSE  !(choice == 14)
[L3204]  COND FALSE  !(choice == 13)
[L3210]  COND TRUE   choice == 12
[L3211]              gas := gas - 21000;
[L3212]  COND TRUE   gas >= 0
[L3213]              assume tokens_s366 >= 0 && tokens_s366 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3214]              assume msgvalue_MSG == 0;
[L3215]  CALL        call success_s366 := transfer~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s366 && tokens_s366 <= balances_DiceToken[this][msgsender_MSG]) && tokens_s366 >= 0) && tokens_s366 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][to_s366] >= 0) && balances_DiceToken[this][to_s366] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][msgsender_MSG] >= 0) && balances_DiceToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DiceToken0 := true;
[L2]                 call_transfer_DiceToken0 := false;
[L2]                 revert := revert_hold;
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND TRUE   __exception
[L668]               __tmp__Balance := Balance;
[L669]               __tmp__DType := DType;
[L670]               __tmp__Alloc := Alloc;
[L671]               __tmp__balance_ADDR := balance_ADDR;
[L672]               __tmp__M_Ref_int := M_Ref_int;
[L673]               __tmp__sum_balances0 := sum_balances0;
[L674]               __tmp__alloc_allowed_DiceToken_lvl0 := alloc_allowed_DiceToken_lvl0;
[L675]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L676]               __tmp__sum_allowed1 := sum_allowed1;
[L677]               __tmp__Length := Length;
[L678]               __tmp__now := now;
[L679]               __tmp__owner_Owned := owner_Owned;
[L680]               __tmp__newOwner_Owned := newOwner_Owned;
[L681]               __tmp__symbol_DiceToken := symbol_DiceToken;
[L682]               __tmp__name_DiceToken := name_DiceToken;
[L683]               __tmp__decimals_DiceToken := decimals_DiceToken;
[L684]               __tmp___totalSupply_DiceToken := _totalSupply_DiceToken;
[L685]               __tmp__balances_DiceToken := balances_DiceToken;
[L686]               __tmp__allowed_DiceToken := allowed_DiceToken;
[L687]   CALL        call success_s366 := transfer~address~uint256_DiceToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L1899]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_DiceToken[this][msgsender_MSG], tokens_s366);
[L1593]  COND TRUE   !(b_s45 <= a_s45)
[L1594]              revert := true;
[L1899]  RET         call __var_4 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_DiceToken[this][msgsender_MSG], tokens_s366);
[L1900]  COND TRUE   revert
[L687]   RET         call success_s366 := transfer~address~uint256_DiceToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L688]               assume revert || gas < 0;
[L3215]  RET         call success_s366 := transfer~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L3304]  RET         call CorralChoice_DiceToken(this);

[2020-11-25 13:56:53,912 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:56:53,912 INFO  L82        PathProgramCache]: Analyzing trace with hash -843670804, now seen corresponding path program 1 times
[2020-11-25 13:56:53,913 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:56:53,925 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:56:53,988 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 13:56:53,988 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:56:53,988 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 13:56:53,989 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:56:53,989 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 13:56:53,989 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 13:56:53,989 INFO  L87              Difference]: Start difference. First operand 1984 states and 2123 transitions. cyclomatic complexity: 141 Second operand 7 states.
[2020-11-25 13:56:54,765 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:56:54,766 INFO  L93              Difference]: Finished difference Result 2162 states and 2319 transitions.
[2020-11-25 13:56:54,766 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 13:56:54,766 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2162 states and 2319 transitions.
[2020-11-25 13:56:54,775 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 13:56:54,783 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2162 states to 2162 states and 2319 transitions.
[2020-11-25 13:56:54,783 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 734
[2020-11-25 13:56:54,783 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 734
[2020-11-25 13:56:54,784 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2162 states and 2319 transitions.
[2020-11-25 13:56:54,786 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:56:54,786 INFO  L728         BuchiCegarLoop]: Abstraction has 2162 states and 2319 transitions.
[2020-11-25 13:56:54,788 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2162 states and 2319 transitions.
[2020-11-25 13:56:54,807 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2162 to 2040.
[2020-11-25 13:56:54,807 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2040 states.
[2020-11-25 13:56:54,810 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2040 states to 2040 states and 2187 transitions.
[2020-11-25 13:56:54,810 INFO  L751         BuchiCegarLoop]: Abstraction has 2040 states and 2187 transitions.
[2020-11-25 13:56:54,810 INFO  L631         BuchiCegarLoop]: Abstraction has 2040 states and 2187 transitions.
[2020-11-25 13:56:54,810 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 13:56:54,810 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2040 states and 2187 transitions.
[2020-11-25 13:56:54,815 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:56:54,815 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:56:54,815 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:56:54,816 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:56:54,816 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_DiceToken0 := false;
[L2]                 call_transfer_DiceToken0 := false;
[L2]     CALL        call main();
[L3294]              assume null == 0;
[L3295]  CALL        call this := FreshRefGenerator__success();
[L1535]              havoc newRef;
[L1536]              assume Alloc[newRef] == false;
[L1537]              Alloc[newRef] := true;
[L1538]              assume newRef != null;
[L3295]  RET         call this := FreshRefGenerator__success();
[L3296]              assume now >= 0;
[L3297]              assume DType[this] == DiceToken;
[L3298]              assume msgvalue_MSG == 0;
[L3299]              gas := gas - 53000;
[L3300]  CALL        call DiceToken_DiceToken(this, msgsender_MSG, msgvalue_MSG);
[L501]               havoc __exception;
[L502]               revert := false;
[L503]   COND FALSE  !(__exception)
[L526]   CALL        call DiceToken_DiceToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1853]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1671]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1656]              assume msgsender_MSG != null;
[L1657]              Balance[this] := 0;
[L1671]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1672]  COND FALSE  !(revert)
[L1853]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1854]  COND FALSE  !(revert)
[L1857]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1709]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1691]              assume msgsender_MSG != null;
[L1692]              Balance[this] := 0;
[L1693]              owner_Owned[this] := null;
[L1694]              newOwner_Owned[this] := null;
[L1696]              owner_Owned[this] := msgsender_MSG;
[L1709]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1710]  COND FALSE  !(revert)
[L1857]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1858]  COND FALSE  !(revert)
[L1861]  CALL        call DiceToken_DiceToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1811]              assume msgsender_MSG != null;
[L1812]              Balance[this] := 0;
[L1813]              symbol_DiceToken[this] := 31320490;
[L1814]              name_DiceToken[this] := 31320490;
[L1815]              decimals_DiceToken[this] := 0;
[L1816]              _totalSupply_DiceToken[this] := 0;
[L1817]              balances_DiceToken[this] := zeroRefintArr();
[L1818]              sum_balances0[this] := 0;
[L1819]              allowed_DiceToken[this] := zeroRefRefintArr();
[L1820]              sum_allowed1[this] := 0;
[L1822]              decimals_DiceToken[this] := 18;
[L1823]              symbol_DiceToken[this] := 884691297;
[L1824]              name_DiceToken[this] := 869301625;
[L1825]              __var_2 := decimals_DiceToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1826]              _totalSupply_DiceToken[this] := 30678 * (nonlinearPow(10, decimals_DiceToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][owner_Owned[this]];
[L1828]              balances_DiceToken[this][owner_Owned[this]] := _totalSupply_DiceToken[this];
[L1829]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][owner_Owned[this]];
[L1830]              assert { :EventEmitted "Transfer_DiceToken" } true;
[L1861]  RET         call DiceToken_DiceToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1862]  COND FALSE  !(revert)
[L526]   RET         call DiceToken_DiceToken__success(this, msgsender_MSG, msgvalue_MSG);
[L527]               assume !revert && gas >= 0;
[L3300]  RET         call DiceToken_DiceToken(this, msgsender_MSG, msgvalue_MSG);
[L3301]              assume !revert && gas >= 0;
[L3304]  CALL        call CorralChoice_DiceToken(this);
[L3151]              havoc msgsender_MSG;
[L3152]              havoc msgvalue_MSG;
[L3153]              havoc choice;
[L3154]              havoc __ret_0_totalSupply;
[L3155]              havoc tokenOwner_s323;
[L3156]              havoc balance_s323;
[L3157]              havoc tokenOwner_s469;
[L3158]              havoc spender_s469;
[L3159]              havoc remaining_s469;
[L3160]              havoc to_s366;
[L3161]              havoc tokens_s366;
[L3162]              havoc success_s366;
[L3163]              havoc spender_s394;
[L3164]              havoc tokens_s394;
[L3165]              havoc success_s394;
[L3166]              havoc from_s453;
[L3167]              havoc to_s453;
[L3168]              havoc tokens_s453;
[L3169]              havoc success_s453;
[L3170]              havoc __ret_0_owner;
[L3171]              havoc __ret_0_newOwner;
[L3172]              havoc _newOwner_s205;
[L3173]              havoc __ret_0_symbol;
[L3174]              havoc __ret_0_name;
[L3175]              havoc __ret_0_decimals;
[L3176]              havoc __ret_0__totalSupply;
[L3177]              havoc tokenAddress_s496;
[L3178]              havoc tokens_s496;
[L3179]              havoc success_s496;
[L3180]              havoc tmpNow;
[L3181]              havoc gas;
[L3182]              assume gas > 4000000 && gas <= 8000000;
[L3183]              tmpNow := now;
[L3184]              havoc now;
[L3185]              assume now > tmpNow;
[L3186]              assume msgsender_MSG != null;
[L3187]              assume DType[msgsender_MSG] != SafeMath;
[L3188]              assume DType[msgsender_MSG] != ERC20Interface;
[L3189]              assume DType[msgsender_MSG] != Owned;
[L3190]              assume DType[msgsender_MSG] != DiceToken;
[L3191]              Alloc[msgsender_MSG] := true;
[L3192]  COND FALSE  !(choice == 15)
[L3198]  COND FALSE  !(choice == 14)
[L3204]  COND FALSE  !(choice == 13)
[L3210]  COND TRUE   choice == 12
[L3211]              gas := gas - 21000;
[L3212]  COND TRUE   gas >= 0
[L3213]              assume tokens_s366 >= 0 && tokens_s366 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3214]              assume msgvalue_MSG == 0;
[L3215]  CALL        call success_s366 := transfer~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s366 && tokens_s366 <= balances_DiceToken[this][msgsender_MSG]) && tokens_s366 >= 0) && tokens_s366 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][to_s366] >= 0) && balances_DiceToken[this][to_s366] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][msgsender_MSG] >= 0) && balances_DiceToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DiceToken0 := true;
[L2]                 call_transfer_DiceToken0 := false;
[L2]                 revert := revert_hold;
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call success_s366 := transfer~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L1921]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][msgsender_MSG], tokens_s366);
[L1602]  COND FALSE  !(!(b_s45 <= a_s45))
[L1606]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1921]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][msgsender_MSG], tokens_s366);
[L1922]  COND FALSE  !(revert)
[L1925]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][msgsender_MSG];
[L1926]              balances_DiceToken[this][msgsender_MSG] := __var_4;
[L1927]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][msgsender_MSG];
[L1928]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][to_s366], tokens_s366);
[L1584]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1585]  COND FALSE  !(!(c_s23 >= a_s23))
[L1928]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][to_s366], tokens_s366);
[L1929]  COND FALSE  !(revert)
[L1932]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][to_s366];
[L1933]              balances_DiceToken[this][to_s366] := __var_5;
[L1934]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][to_s366];
[L1935]              assert { :EventEmitted "Transfer_DiceToken" } true;
[L1936]              success_s366 := true;
[L690]   RET         call success_s366 := transfer~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L691]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((success_s366 == true && _totalSupply_DiceToken[this] == old(_totalSupply_DiceToken[this])) && balances_DiceToken[this] == old(balances_DiceToken[this])) && allowed_DiceToken[this] == old(allowed_DiceToken[this])) && symbol_DiceToken[this] == old(symbol_DiceToken[this])) && name_DiceToken[this] == old(name_DiceToken[this])) && decimals_DiceToken[this] == old(decimals_DiceToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L3215]  RET         call success_s366 := transfer~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L3304]  RET         call CorralChoice_DiceToken(this);

Loop:
[L3304]  CALL        call CorralChoice_DiceToken(this);
[L3151]              havoc msgsender_MSG;
[L3152]              havoc msgvalue_MSG;
[L3153]              havoc choice;
[L3154]              havoc __ret_0_totalSupply;
[L3155]              havoc tokenOwner_s323;
[L3156]              havoc balance_s323;
[L3157]              havoc tokenOwner_s469;
[L3158]              havoc spender_s469;
[L3159]              havoc remaining_s469;
[L3160]              havoc to_s366;
[L3161]              havoc tokens_s366;
[L3162]              havoc success_s366;
[L3163]              havoc spender_s394;
[L3164]              havoc tokens_s394;
[L3165]              havoc success_s394;
[L3166]              havoc from_s453;
[L3167]              havoc to_s453;
[L3168]              havoc tokens_s453;
[L3169]              havoc success_s453;
[L3170]              havoc __ret_0_owner;
[L3171]              havoc __ret_0_newOwner;
[L3172]              havoc _newOwner_s205;
[L3173]              havoc __ret_0_symbol;
[L3174]              havoc __ret_0_name;
[L3175]              havoc __ret_0_decimals;
[L3176]              havoc __ret_0__totalSupply;
[L3177]              havoc tokenAddress_s496;
[L3178]              havoc tokens_s496;
[L3179]              havoc success_s496;
[L3180]              havoc tmpNow;
[L3181]              havoc gas;
[L3182]              assume gas > 4000000 && gas <= 8000000;
[L3183]              tmpNow := now;
[L3184]              havoc now;
[L3185]              assume now > tmpNow;
[L3186]              assume msgsender_MSG != null;
[L3187]              assume DType[msgsender_MSG] != SafeMath;
[L3188]              assume DType[msgsender_MSG] != ERC20Interface;
[L3189]              assume DType[msgsender_MSG] != Owned;
[L3190]              assume DType[msgsender_MSG] != DiceToken;
[L3191]              Alloc[msgsender_MSG] := true;
[L3192]  COND FALSE  !(choice == 15)
[L3198]  COND FALSE  !(choice == 14)
[L3204]  COND FALSE  !(choice == 13)
[L3210]  COND TRUE   choice == 12
[L3211]              gas := gas - 21000;
[L3212]  COND TRUE   gas >= 0
[L3213]              assume tokens_s366 >= 0 && tokens_s366 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3214]              assume msgvalue_MSG == 0;
[L3215]  CALL        call success_s366 := transfer~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s366 && tokens_s366 <= balances_DiceToken[this][msgsender_MSG]) && tokens_s366 >= 0) && tokens_s366 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][to_s366] >= 0) && balances_DiceToken[this][to_s366] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][msgsender_MSG] >= 0) && balances_DiceToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DiceToken0 := true;
[L2]                 call_transfer_DiceToken0 := false;
[L2]                 revert := revert_hold;
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call success_s366 := transfer~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L1921]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][msgsender_MSG], tokens_s366);
[L1602]  COND FALSE  !(!(b_s45 <= a_s45))
[L1606]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1921]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][msgsender_MSG], tokens_s366);
[L1922]  COND FALSE  !(revert)
[L1925]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][msgsender_MSG];
[L1926]              balances_DiceToken[this][msgsender_MSG] := __var_4;
[L1927]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][msgsender_MSG];
[L1928]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][to_s366], tokens_s366);
[L1584]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1585]  COND FALSE  !(!(c_s23 >= a_s23))
[L1928]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][to_s366], tokens_s366);
[L1929]  COND FALSE  !(revert)
[L1932]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][to_s366];
[L1933]              balances_DiceToken[this][to_s366] := __var_5;
[L1934]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][to_s366];
[L1935]              assert { :EventEmitted "Transfer_DiceToken" } true;
[L1936]              success_s366 := true;
[L690]   RET         call success_s366 := transfer~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L691]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((success_s366 == true && _totalSupply_DiceToken[this] == old(_totalSupply_DiceToken[this])) && balances_DiceToken[this] == old(balances_DiceToken[this])) && allowed_DiceToken[this] == old(allowed_DiceToken[this])) && symbol_DiceToken[this] == old(symbol_DiceToken[this])) && name_DiceToken[this] == old(name_DiceToken[this])) && decimals_DiceToken[this] == old(decimals_DiceToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L3215]  RET         call success_s366 := transfer~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L3304]  RET         call CorralChoice_DiceToken(this);

[2020-11-25 13:56:54,819 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:56:54,819 INFO  L82        PathProgramCache]: Analyzing trace with hash -2098685325, now seen corresponding path program 1 times
[2020-11-25 13:56:54,820 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:56:54,880 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:56:55,575 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 13:56:55,575 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:56:55,575 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [27] imperfect sequences [] total 27
[2020-11-25 13:56:55,575 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:56:55,576 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 28 interpolants.
[2020-11-25 13:56:55,576 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=78, Invalid=678, Unknown=0, NotChecked=0, Total=756
[2020-11-25 13:56:55,576 INFO  L87              Difference]: Start difference. First operand 2040 states and 2187 transitions. cyclomatic complexity: 149 Second operand 28 states.
[2020-11-25 13:56:59,845 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:56:59,845 INFO  L93              Difference]: Finished difference Result 2119 states and 2292 transitions.
[2020-11-25 13:56:59,845 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 28 states. 
[2020-11-25 13:56:59,845 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2119 states and 2292 transitions.
[2020-11-25 13:56:59,852 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 13:56:59,857 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2119 states to 2119 states and 2292 transitions.
[2020-11-25 13:56:59,858 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 711
[2020-11-25 13:56:59,858 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 711
[2020-11-25 13:56:59,858 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2119 states and 2292 transitions.
[2020-11-25 13:56:59,860 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:56:59,860 INFO  L728         BuchiCegarLoop]: Abstraction has 2119 states and 2292 transitions.
[2020-11-25 13:56:59,862 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2119 states and 2292 transitions.
[2020-11-25 13:56:59,879 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2119 to 2104.
[2020-11-25 13:56:59,879 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2104 states.
[2020-11-25 13:56:59,882 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2104 states to 2104 states and 2261 transitions.
[2020-11-25 13:56:59,882 INFO  L751         BuchiCegarLoop]: Abstraction has 2104 states and 2261 transitions.
[2020-11-25 13:56:59,882 INFO  L631         BuchiCegarLoop]: Abstraction has 2104 states and 2261 transitions.
[2020-11-25 13:56:59,882 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 13:56:59,882 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2104 states and 2261 transitions.
[2020-11-25 13:56:59,887 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 13:56:59,887 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:56:59,887 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:56:59,889 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:56:59,890 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_DiceToken0 := false;
[L2]                 call_transfer_DiceToken0 := false;
[L2]     CALL        call main();
[L3294]              assume null == 0;
[L3295]  CALL        call this := FreshRefGenerator__success();
[L1535]              havoc newRef;
[L1536]              assume Alloc[newRef] == false;
[L1537]              Alloc[newRef] := true;
[L1538]              assume newRef != null;
[L3295]  RET         call this := FreshRefGenerator__success();
[L3296]              assume now >= 0;
[L3297]              assume DType[this] == DiceToken;
[L3298]              assume msgvalue_MSG == 0;
[L3299]              gas := gas - 53000;
[L3300]  CALL        call DiceToken_DiceToken(this, msgsender_MSG, msgvalue_MSG);
[L501]               havoc __exception;
[L502]               revert := false;
[L503]   COND FALSE  !(__exception)
[L526]   CALL        call DiceToken_DiceToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1853]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1671]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1656]              assume msgsender_MSG != null;
[L1657]              Balance[this] := 0;
[L1671]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1672]  COND FALSE  !(revert)
[L1853]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1854]  COND FALSE  !(revert)
[L1857]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1709]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1691]              assume msgsender_MSG != null;
[L1692]              Balance[this] := 0;
[L1693]              owner_Owned[this] := null;
[L1694]              newOwner_Owned[this] := null;
[L1696]              owner_Owned[this] := msgsender_MSG;
[L1709]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1710]  COND FALSE  !(revert)
[L1857]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1858]  COND FALSE  !(revert)
[L1861]  CALL        call DiceToken_DiceToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1811]              assume msgsender_MSG != null;
[L1812]              Balance[this] := 0;
[L1813]              symbol_DiceToken[this] := 31320490;
[L1814]              name_DiceToken[this] := 31320490;
[L1815]              decimals_DiceToken[this] := 0;
[L1816]              _totalSupply_DiceToken[this] := 0;
[L1817]              balances_DiceToken[this] := zeroRefintArr();
[L1818]              sum_balances0[this] := 0;
[L1819]              allowed_DiceToken[this] := zeroRefRefintArr();
[L1820]              sum_allowed1[this] := 0;
[L1822]              decimals_DiceToken[this] := 18;
[L1823]              symbol_DiceToken[this] := 884691297;
[L1824]              name_DiceToken[this] := 869301625;
[L1825]              __var_2 := decimals_DiceToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1826]              _totalSupply_DiceToken[this] := 30678 * (nonlinearPow(10, decimals_DiceToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][owner_Owned[this]];
[L1828]              balances_DiceToken[this][owner_Owned[this]] := _totalSupply_DiceToken[this];
[L1829]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][owner_Owned[this]];
[L1830]              assert { :EventEmitted "Transfer_DiceToken" } true;
[L1861]  RET         call DiceToken_DiceToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1862]  COND FALSE  !(revert)
[L526]   RET         call DiceToken_DiceToken__success(this, msgsender_MSG, msgvalue_MSG);
[L527]               assume !revert && gas >= 0;
[L3300]  RET         call DiceToken_DiceToken(this, msgsender_MSG, msgvalue_MSG);
[L3301]              assume !revert && gas >= 0;
[L3304]  CALL        call CorralChoice_DiceToken(this);
[L3151]              havoc msgsender_MSG;
[L3152]              havoc msgvalue_MSG;
[L3153]              havoc choice;
[L3154]              havoc __ret_0_totalSupply;
[L3155]              havoc tokenOwner_s323;
[L3156]              havoc balance_s323;
[L3157]              havoc tokenOwner_s469;
[L3158]              havoc spender_s469;
[L3159]              havoc remaining_s469;
[L3160]              havoc to_s366;
[L3161]              havoc tokens_s366;
[L3162]              havoc success_s366;
[L3163]              havoc spender_s394;
[L3164]              havoc tokens_s394;
[L3165]              havoc success_s394;
[L3166]              havoc from_s453;
[L3167]              havoc to_s453;
[L3168]              havoc tokens_s453;
[L3169]              havoc success_s453;
[L3170]              havoc __ret_0_owner;
[L3171]              havoc __ret_0_newOwner;
[L3172]              havoc _newOwner_s205;
[L3173]              havoc __ret_0_symbol;
[L3174]              havoc __ret_0_name;
[L3175]              havoc __ret_0_decimals;
[L3176]              havoc __ret_0__totalSupply;
[L3177]              havoc tokenAddress_s496;
[L3178]              havoc tokens_s496;
[L3179]              havoc success_s496;
[L3180]              havoc tmpNow;
[L3181]              havoc gas;
[L3182]              assume gas > 4000000 && gas <= 8000000;
[L3183]              tmpNow := now;
[L3184]              havoc now;
[L3185]              assume now > tmpNow;
[L3186]              assume msgsender_MSG != null;
[L3187]              assume DType[msgsender_MSG] != SafeMath;
[L3188]              assume DType[msgsender_MSG] != ERC20Interface;
[L3189]              assume DType[msgsender_MSG] != Owned;
[L3190]              assume DType[msgsender_MSG] != DiceToken;
[L3191]              Alloc[msgsender_MSG] := true;
[L3192]  COND FALSE  !(choice == 15)
[L3198]  COND FALSE  !(choice == 14)
[L3204]  COND FALSE  !(choice == 13)
[L3210]  COND TRUE   choice == 12
[L3211]              gas := gas - 21000;
[L3212]  COND TRUE   gas >= 0
[L3213]              assume tokens_s366 >= 0 && tokens_s366 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3214]              assume msgvalue_MSG == 0;
[L3215]  CALL        call success_s366 := transfer~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s366 && tokens_s366 <= balances_DiceToken[this][msgsender_MSG]) && tokens_s366 >= 0) && tokens_s366 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][to_s366] >= 0) && balances_DiceToken[this][to_s366] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][msgsender_MSG] >= 0) && balances_DiceToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DiceToken0 := true;
[L2]                 call_transfer_DiceToken0 := false;
[L2]                 revert := revert_hold;
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND TRUE   __exception
[L668]               __tmp__Balance := Balance;
[L669]               __tmp__DType := DType;
[L670]               __tmp__Alloc := Alloc;
[L671]               __tmp__balance_ADDR := balance_ADDR;
[L672]               __tmp__M_Ref_int := M_Ref_int;
[L673]               __tmp__sum_balances0 := sum_balances0;
[L674]               __tmp__alloc_allowed_DiceToken_lvl0 := alloc_allowed_DiceToken_lvl0;
[L675]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L676]               __tmp__sum_allowed1 := sum_allowed1;
[L677]               __tmp__Length := Length;
[L678]               __tmp__now := now;
[L679]               __tmp__owner_Owned := owner_Owned;
[L680]               __tmp__newOwner_Owned := newOwner_Owned;
[L681]               __tmp__symbol_DiceToken := symbol_DiceToken;
[L682]               __tmp__name_DiceToken := name_DiceToken;
[L683]               __tmp__decimals_DiceToken := decimals_DiceToken;
[L684]               __tmp___totalSupply_DiceToken := _totalSupply_DiceToken;
[L685]               __tmp__balances_DiceToken := balances_DiceToken;
[L686]               __tmp__allowed_DiceToken := allowed_DiceToken;
[L687]   CALL        call success_s366 := transfer~address~uint256_DiceToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L1899]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_DiceToken[this][msgsender_MSG], tokens_s366);
[L1593]  COND FALSE  !(!(b_s45 <= a_s45))
[L1597]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1899]  RET         call __var_4 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_DiceToken[this][msgsender_MSG], tokens_s366);
[L1900]  COND FALSE  !(revert)
[L1903]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_DiceToken[this][msgsender_MSG];
[L1904]              __tmp__balances_DiceToken[this][msgsender_MSG] := __var_4;
[L1905]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_DiceToken[this][msgsender_MSG];
[L1906]  CALL        call __var_5 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_DiceToken[this][to_s366], tokens_s366);
[L1575]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1576]  COND TRUE   !(c_s23 >= a_s23)
[L1577]              revert := true;
[L1906]  RET         call __var_5 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_DiceToken[this][to_s366], tokens_s366);
[L1907]  COND TRUE   revert
[L687]   RET         call success_s366 := transfer~address~uint256_DiceToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L688]               assume revert || gas < 0;
[L3215]  RET         call success_s366 := transfer~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L3304]  RET         call CorralChoice_DiceToken(this);

Loop:
[L3304]  CALL        call CorralChoice_DiceToken(this);
[L3151]              havoc msgsender_MSG;
[L3152]              havoc msgvalue_MSG;
[L3153]              havoc choice;
[L3154]              havoc __ret_0_totalSupply;
[L3155]              havoc tokenOwner_s323;
[L3156]              havoc balance_s323;
[L3157]              havoc tokenOwner_s469;
[L3158]              havoc spender_s469;
[L3159]              havoc remaining_s469;
[L3160]              havoc to_s366;
[L3161]              havoc tokens_s366;
[L3162]              havoc success_s366;
[L3163]              havoc spender_s394;
[L3164]              havoc tokens_s394;
[L3165]              havoc success_s394;
[L3166]              havoc from_s453;
[L3167]              havoc to_s453;
[L3168]              havoc tokens_s453;
[L3169]              havoc success_s453;
[L3170]              havoc __ret_0_owner;
[L3171]              havoc __ret_0_newOwner;
[L3172]              havoc _newOwner_s205;
[L3173]              havoc __ret_0_symbol;
[L3174]              havoc __ret_0_name;
[L3175]              havoc __ret_0_decimals;
[L3176]              havoc __ret_0__totalSupply;
[L3177]              havoc tokenAddress_s496;
[L3178]              havoc tokens_s496;
[L3179]              havoc success_s496;
[L3180]              havoc tmpNow;
[L3181]              havoc gas;
[L3182]              assume gas > 4000000 && gas <= 8000000;
[L3183]              tmpNow := now;
[L3184]              havoc now;
[L3185]              assume now > tmpNow;
[L3186]              assume msgsender_MSG != null;
[L3187]              assume DType[msgsender_MSG] != SafeMath;
[L3188]              assume DType[msgsender_MSG] != ERC20Interface;
[L3189]              assume DType[msgsender_MSG] != Owned;
[L3190]              assume DType[msgsender_MSG] != DiceToken;
[L3191]              Alloc[msgsender_MSG] := true;
[L3192]  COND FALSE  !(choice == 15)
[L3198]  COND FALSE  !(choice == 14)
[L3204]  COND FALSE  !(choice == 13)
[L3210]  COND TRUE   choice == 12
[L3211]              gas := gas - 21000;
[L3212]  COND TRUE   gas >= 0
[L3213]              assume tokens_s366 >= 0 && tokens_s366 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3214]              assume msgvalue_MSG == 0;
[L3215]  CALL        call success_s366 := transfer~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s366 && tokens_s366 <= balances_DiceToken[this][msgsender_MSG]) && tokens_s366 >= 0) && tokens_s366 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][to_s366] >= 0) && balances_DiceToken[this][to_s366] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][msgsender_MSG] >= 0) && balances_DiceToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DiceToken0 := true;
[L2]                 call_transfer_DiceToken0 := false;
[L2]                 revert := revert_hold;
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND TRUE   __exception
[L668]               __tmp__Balance := Balance;
[L669]               __tmp__DType := DType;
[L670]               __tmp__Alloc := Alloc;
[L671]               __tmp__balance_ADDR := balance_ADDR;
[L672]               __tmp__M_Ref_int := M_Ref_int;
[L673]               __tmp__sum_balances0 := sum_balances0;
[L674]               __tmp__alloc_allowed_DiceToken_lvl0 := alloc_allowed_DiceToken_lvl0;
[L675]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L676]               __tmp__sum_allowed1 := sum_allowed1;
[L677]               __tmp__Length := Length;
[L678]               __tmp__now := now;
[L679]               __tmp__owner_Owned := owner_Owned;
[L680]               __tmp__newOwner_Owned := newOwner_Owned;
[L681]               __tmp__symbol_DiceToken := symbol_DiceToken;
[L682]               __tmp__name_DiceToken := name_DiceToken;
[L683]               __tmp__decimals_DiceToken := decimals_DiceToken;
[L684]               __tmp___totalSupply_DiceToken := _totalSupply_DiceToken;
[L685]               __tmp__balances_DiceToken := balances_DiceToken;
[L686]               __tmp__allowed_DiceToken := allowed_DiceToken;
[L687]   CALL        call success_s366 := transfer~address~uint256_DiceToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L1899]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_DiceToken[this][msgsender_MSG], tokens_s366);
[L1593]  COND FALSE  !(!(b_s45 <= a_s45))
[L1597]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1899]  RET         call __var_4 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_DiceToken[this][msgsender_MSG], tokens_s366);
[L1900]  COND FALSE  !(revert)
[L1903]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_DiceToken[this][msgsender_MSG];
[L1904]              __tmp__balances_DiceToken[this][msgsender_MSG] := __var_4;
[L1905]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_DiceToken[this][msgsender_MSG];
[L1906]  CALL        call __var_5 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_DiceToken[this][to_s366], tokens_s366);
[L1575]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1576]  COND TRUE   !(c_s23 >= a_s23)
[L1577]              revert := true;
[L1906]  RET         call __var_5 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_DiceToken[this][to_s366], tokens_s366);
[L1907]  COND TRUE   revert
[L687]   RET         call success_s366 := transfer~address~uint256_DiceToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L688]               assume revert || gas < 0;
[L3215]  RET         call success_s366 := transfer~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L3304]  RET         call CorralChoice_DiceToken(this);

[2020-11-25 13:56:59,893 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:56:59,893 INFO  L82        PathProgramCache]: Analyzing trace with hash -1169939679, now seen corresponding path program 1 times
[2020-11-25 13:56:59,894 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:56:59,906 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:57:00,007 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 13:57:00,008 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:57:00,008 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [12] imperfect sequences [] total 12
[2020-11-25 13:57:00,008 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:57:00,008 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-25 13:57:00,008 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=23, Invalid=109, Unknown=0, NotChecked=0, Total=132
[2020-11-25 13:57:00,008 INFO  L87              Difference]: Start difference. First operand 2104 states and 2261 transitions. cyclomatic complexity: 161 Second operand 12 states.
[2020-11-25 13:57:00,644 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:57:00,644 INFO  L93              Difference]: Finished difference Result 2210 states and 2381 transitions.
[2020-11-25 13:57:00,644 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-11-25 13:57:00,644 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2210 states and 2381 transitions.
[2020-11-25 13:57:00,649 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 13:57:00,654 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2210 states to 2210 states and 2381 transitions.
[2020-11-25 13:57:00,654 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 757
[2020-11-25 13:57:00,655 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 757
[2020-11-25 13:57:00,655 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2210 states and 2381 transitions.
[2020-11-25 13:57:00,656 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:57:00,656 INFO  L728         BuchiCegarLoop]: Abstraction has 2210 states and 2381 transitions.
[2020-11-25 13:57:00,658 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2210 states and 2381 transitions.
[2020-11-25 13:57:00,672 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2210 to 2141.
[2020-11-25 13:57:00,672 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2141 states.
[2020-11-25 13:57:00,674 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2141 states to 2141 states and 2295 transitions.
[2020-11-25 13:57:00,674 INFO  L751         BuchiCegarLoop]: Abstraction has 2141 states and 2295 transitions.
[2020-11-25 13:57:00,674 INFO  L631         BuchiCegarLoop]: Abstraction has 2141 states and 2295 transitions.
[2020-11-25 13:57:00,674 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 13:57:00,674 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2141 states and 2295 transitions.
[2020-11-25 13:57:00,677 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 13:57:00,677 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:57:00,677 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:57:00,678 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:57:00,678 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_DiceToken0 := false;
[L2]                 call_transfer_DiceToken0 := false;
[L2]     CALL        call main();
[L3294]              assume null == 0;
[L3295]  CALL        call this := FreshRefGenerator__success();
[L1535]              havoc newRef;
[L1536]              assume Alloc[newRef] == false;
[L1537]              Alloc[newRef] := true;
[L1538]              assume newRef != null;
[L3295]  RET         call this := FreshRefGenerator__success();
[L3296]              assume now >= 0;
[L3297]              assume DType[this] == DiceToken;
[L3298]              assume msgvalue_MSG == 0;
[L3299]              gas := gas - 53000;
[L3300]  CALL        call DiceToken_DiceToken(this, msgsender_MSG, msgvalue_MSG);
[L501]               havoc __exception;
[L502]               revert := false;
[L503]   COND FALSE  !(__exception)
[L526]   CALL        call DiceToken_DiceToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1853]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1671]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1656]              assume msgsender_MSG != null;
[L1657]              Balance[this] := 0;
[L1671]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1672]  COND FALSE  !(revert)
[L1853]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1854]  COND FALSE  !(revert)
[L1857]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1709]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1691]              assume msgsender_MSG != null;
[L1692]              Balance[this] := 0;
[L1693]              owner_Owned[this] := null;
[L1694]              newOwner_Owned[this] := null;
[L1696]              owner_Owned[this] := msgsender_MSG;
[L1709]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1710]  COND FALSE  !(revert)
[L1857]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1858]  COND FALSE  !(revert)
[L1861]  CALL        call DiceToken_DiceToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1811]              assume msgsender_MSG != null;
[L1812]              Balance[this] := 0;
[L1813]              symbol_DiceToken[this] := 31320490;
[L1814]              name_DiceToken[this] := 31320490;
[L1815]              decimals_DiceToken[this] := 0;
[L1816]              _totalSupply_DiceToken[this] := 0;
[L1817]              balances_DiceToken[this] := zeroRefintArr();
[L1818]              sum_balances0[this] := 0;
[L1819]              allowed_DiceToken[this] := zeroRefRefintArr();
[L1820]              sum_allowed1[this] := 0;
[L1822]              decimals_DiceToken[this] := 18;
[L1823]              symbol_DiceToken[this] := 884691297;
[L1824]              name_DiceToken[this] := 869301625;
[L1825]              __var_2 := decimals_DiceToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1826]              _totalSupply_DiceToken[this] := 30678 * (nonlinearPow(10, decimals_DiceToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][owner_Owned[this]];
[L1828]              balances_DiceToken[this][owner_Owned[this]] := _totalSupply_DiceToken[this];
[L1829]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][owner_Owned[this]];
[L1830]              assert { :EventEmitted "Transfer_DiceToken" } true;
[L1861]  RET         call DiceToken_DiceToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1862]  COND FALSE  !(revert)
[L526]   RET         call DiceToken_DiceToken__success(this, msgsender_MSG, msgvalue_MSG);
[L527]               assume !revert && gas >= 0;
[L3300]  RET         call DiceToken_DiceToken(this, msgsender_MSG, msgvalue_MSG);
[L3301]              assume !revert && gas >= 0;
[L3304]  CALL        call CorralChoice_DiceToken(this);
[L3151]              havoc msgsender_MSG;
[L3152]              havoc msgvalue_MSG;
[L3153]              havoc choice;
[L3154]              havoc __ret_0_totalSupply;
[L3155]              havoc tokenOwner_s323;
[L3156]              havoc balance_s323;
[L3157]              havoc tokenOwner_s469;
[L3158]              havoc spender_s469;
[L3159]              havoc remaining_s469;
[L3160]              havoc to_s366;
[L3161]              havoc tokens_s366;
[L3162]              havoc success_s366;
[L3163]              havoc spender_s394;
[L3164]              havoc tokens_s394;
[L3165]              havoc success_s394;
[L3166]              havoc from_s453;
[L3167]              havoc to_s453;
[L3168]              havoc tokens_s453;
[L3169]              havoc success_s453;
[L3170]              havoc __ret_0_owner;
[L3171]              havoc __ret_0_newOwner;
[L3172]              havoc _newOwner_s205;
[L3173]              havoc __ret_0_symbol;
[L3174]              havoc __ret_0_name;
[L3175]              havoc __ret_0_decimals;
[L3176]              havoc __ret_0__totalSupply;
[L3177]              havoc tokenAddress_s496;
[L3178]              havoc tokens_s496;
[L3179]              havoc success_s496;
[L3180]              havoc tmpNow;
[L3181]              havoc gas;
[L3182]              assume gas > 4000000 && gas <= 8000000;
[L3183]              tmpNow := now;
[L3184]              havoc now;
[L3185]              assume now > tmpNow;
[L3186]              assume msgsender_MSG != null;
[L3187]              assume DType[msgsender_MSG] != SafeMath;
[L3188]              assume DType[msgsender_MSG] != ERC20Interface;
[L3189]              assume DType[msgsender_MSG] != Owned;
[L3190]              assume DType[msgsender_MSG] != DiceToken;
[L3191]              Alloc[msgsender_MSG] := true;
[L3192]  COND FALSE  !(choice == 15)
[L3198]  COND FALSE  !(choice == 14)
[L3204]  COND FALSE  !(choice == 13)
[L3210]  COND TRUE   choice == 12
[L3211]              gas := gas - 21000;
[L3212]  COND TRUE   gas >= 0
[L3213]              assume tokens_s366 >= 0 && tokens_s366 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3214]              assume msgvalue_MSG == 0;
[L3215]  CALL        call success_s366 := transfer~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s366 && tokens_s366 <= balances_DiceToken[this][msgsender_MSG]) && tokens_s366 >= 0) && tokens_s366 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][to_s366] >= 0) && balances_DiceToken[this][to_s366] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][msgsender_MSG] >= 0) && balances_DiceToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DiceToken0 := true;
[L2]                 call_transfer_DiceToken0 := false;
[L2]                 revert := revert_hold;
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND TRUE   __exception
[L668]               __tmp__Balance := Balance;
[L669]               __tmp__DType := DType;
[L670]               __tmp__Alloc := Alloc;
[L671]               __tmp__balance_ADDR := balance_ADDR;
[L672]               __tmp__M_Ref_int := M_Ref_int;
[L673]               __tmp__sum_balances0 := sum_balances0;
[L674]               __tmp__alloc_allowed_DiceToken_lvl0 := alloc_allowed_DiceToken_lvl0;
[L675]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L676]               __tmp__sum_allowed1 := sum_allowed1;
[L677]               __tmp__Length := Length;
[L678]               __tmp__now := now;
[L679]               __tmp__owner_Owned := owner_Owned;
[L680]               __tmp__newOwner_Owned := newOwner_Owned;
[L681]               __tmp__symbol_DiceToken := symbol_DiceToken;
[L682]               __tmp__name_DiceToken := name_DiceToken;
[L683]               __tmp__decimals_DiceToken := decimals_DiceToken;
[L684]               __tmp___totalSupply_DiceToken := _totalSupply_DiceToken;
[L685]               __tmp__balances_DiceToken := balances_DiceToken;
[L686]               __tmp__allowed_DiceToken := allowed_DiceToken;
[L687]   CALL        call success_s366 := transfer~address~uint256_DiceToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L1899]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_DiceToken[this][msgsender_MSG], tokens_s366);
[L1593]  COND FALSE  !(!(b_s45 <= a_s45))
[L1597]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1899]  RET         call __var_4 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_DiceToken[this][msgsender_MSG], tokens_s366);
[L1900]  COND FALSE  !(revert)
[L1903]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_DiceToken[this][msgsender_MSG];
[L1904]              __tmp__balances_DiceToken[this][msgsender_MSG] := __var_4;
[L1905]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_DiceToken[this][msgsender_MSG];
[L1906]  CALL        call __var_5 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_DiceToken[this][to_s366], tokens_s366);
[L1575]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1576]  COND FALSE  !(!(c_s23 >= a_s23))
[L1906]  RET         call __var_5 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_DiceToken[this][to_s366], tokens_s366);
[L1907]  COND FALSE  !(revert)
[L1910]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_DiceToken[this][to_s366];
[L1911]              __tmp__balances_DiceToken[this][to_s366] := __var_5;
[L1912]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_DiceToken[this][to_s366];
[L1913]              success_s366 := true;
[L687]   RET         call success_s366 := transfer~address~uint256_DiceToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L688]               assume revert || gas < 0;
[L3215]  RET         call success_s366 := transfer~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L3304]  RET         call CorralChoice_DiceToken(this);

Loop:
[L3304]  CALL        call CorralChoice_DiceToken(this);
[L3151]              havoc msgsender_MSG;
[L3152]              havoc msgvalue_MSG;
[L3153]              havoc choice;
[L3154]              havoc __ret_0_totalSupply;
[L3155]              havoc tokenOwner_s323;
[L3156]              havoc balance_s323;
[L3157]              havoc tokenOwner_s469;
[L3158]              havoc spender_s469;
[L3159]              havoc remaining_s469;
[L3160]              havoc to_s366;
[L3161]              havoc tokens_s366;
[L3162]              havoc success_s366;
[L3163]              havoc spender_s394;
[L3164]              havoc tokens_s394;
[L3165]              havoc success_s394;
[L3166]              havoc from_s453;
[L3167]              havoc to_s453;
[L3168]              havoc tokens_s453;
[L3169]              havoc success_s453;
[L3170]              havoc __ret_0_owner;
[L3171]              havoc __ret_0_newOwner;
[L3172]              havoc _newOwner_s205;
[L3173]              havoc __ret_0_symbol;
[L3174]              havoc __ret_0_name;
[L3175]              havoc __ret_0_decimals;
[L3176]              havoc __ret_0__totalSupply;
[L3177]              havoc tokenAddress_s496;
[L3178]              havoc tokens_s496;
[L3179]              havoc success_s496;
[L3180]              havoc tmpNow;
[L3181]              havoc gas;
[L3182]              assume gas > 4000000 && gas <= 8000000;
[L3183]              tmpNow := now;
[L3184]              havoc now;
[L3185]              assume now > tmpNow;
[L3186]              assume msgsender_MSG != null;
[L3187]              assume DType[msgsender_MSG] != SafeMath;
[L3188]              assume DType[msgsender_MSG] != ERC20Interface;
[L3189]              assume DType[msgsender_MSG] != Owned;
[L3190]              assume DType[msgsender_MSG] != DiceToken;
[L3191]              Alloc[msgsender_MSG] := true;
[L3192]  COND TRUE   choice == 15
[L3193]              gas := gas - 21000;
[L3194]  COND FALSE  !(gas >= 0)
[L3304]  RET         call CorralChoice_DiceToken(this);

[2020-11-25 13:57:00,680 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:57:00,681 INFO  L82        PathProgramCache]: Analyzing trace with hash 12124214, now seen corresponding path program 1 times
[2020-11-25 13:57:00,681 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:57:00,691 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:57:00,711 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 13:57:00,711 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:57:00,711 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 13:57:00,712 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:57:00,712 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 13:57:00,712 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 13:57:00,712 INFO  L87              Difference]: Start difference. First operand 2141 states and 2295 transitions. cyclomatic complexity: 158 Second operand 5 states.
[2020-11-25 13:57:00,975 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:57:00,975 INFO  L93              Difference]: Finished difference Result 2646 states and 2923 transitions.
[2020-11-25 13:57:00,975 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 13:57:00,975 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2646 states and 2923 transitions.
[2020-11-25 13:57:00,980 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 13:57:00,985 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2646 states to 1902 states and 2174 transitions.
[2020-11-25 13:57:00,986 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 519
[2020-11-25 13:57:00,986 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 519
[2020-11-25 13:57:00,986 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1902 states and 2174 transitions.
[2020-11-25 13:57:00,988 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:57:00,988 INFO  L728         BuchiCegarLoop]: Abstraction has 1902 states and 2174 transitions.
[2020-11-25 13:57:00,989 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1902 states and 2174 transitions.
[2020-11-25 13:57:00,997 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1902 to 1372.
[2020-11-25 13:57:00,997 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1372 states.
[2020-11-25 13:57:00,998 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1372 states to 1372 states and 1483 transitions.
[2020-11-25 13:57:00,998 INFO  L751         BuchiCegarLoop]: Abstraction has 1372 states and 1483 transitions.
[2020-11-25 13:57:00,998 INFO  L631         BuchiCegarLoop]: Abstraction has 1372 states and 1483 transitions.
[2020-11-25 13:57:00,999 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 13:57:00,999 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1372 states and 1483 transitions.
[2020-11-25 13:57:01,000 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:57:01,000 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:57:01,000 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:57:01,001 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:57:01,001 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_DiceToken0 := false;
[L2]                 call_transfer_DiceToken0 := false;
[L2]     CALL        call main();
[L3294]              assume null == 0;
[L3295]  CALL        call this := FreshRefGenerator__success();
[L1535]              havoc newRef;
[L1536]              assume Alloc[newRef] == false;
[L1537]              Alloc[newRef] := true;
[L1538]              assume newRef != null;
[L3295]  RET         call this := FreshRefGenerator__success();
[L3296]              assume now >= 0;
[L3297]              assume DType[this] == DiceToken;
[L3298]              assume msgvalue_MSG == 0;
[L3299]              gas := gas - 53000;
[L3300]  CALL        call DiceToken_DiceToken(this, msgsender_MSG, msgvalue_MSG);
[L501]               havoc __exception;
[L502]               revert := false;
[L503]   COND FALSE  !(__exception)
[L526]   CALL        call DiceToken_DiceToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1853]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1671]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1656]              assume msgsender_MSG != null;
[L1657]              Balance[this] := 0;
[L1671]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1672]  COND FALSE  !(revert)
[L1853]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1854]  COND FALSE  !(revert)
[L1857]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1709]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1691]              assume msgsender_MSG != null;
[L1692]              Balance[this] := 0;
[L1693]              owner_Owned[this] := null;
[L1694]              newOwner_Owned[this] := null;
[L1696]              owner_Owned[this] := msgsender_MSG;
[L1709]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1710]  COND FALSE  !(revert)
[L1857]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1858]  COND FALSE  !(revert)
[L1861]  CALL        call DiceToken_DiceToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1811]              assume msgsender_MSG != null;
[L1812]              Balance[this] := 0;
[L1813]              symbol_DiceToken[this] := 31320490;
[L1814]              name_DiceToken[this] := 31320490;
[L1815]              decimals_DiceToken[this] := 0;
[L1816]              _totalSupply_DiceToken[this] := 0;
[L1817]              balances_DiceToken[this] := zeroRefintArr();
[L1818]              sum_balances0[this] := 0;
[L1819]              allowed_DiceToken[this] := zeroRefRefintArr();
[L1820]              sum_allowed1[this] := 0;
[L1822]              decimals_DiceToken[this] := 18;
[L1823]              symbol_DiceToken[this] := 884691297;
[L1824]              name_DiceToken[this] := 869301625;
[L1825]              __var_2 := decimals_DiceToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1826]              _totalSupply_DiceToken[this] := 30678 * (nonlinearPow(10, decimals_DiceToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][owner_Owned[this]];
[L1828]              balances_DiceToken[this][owner_Owned[this]] := _totalSupply_DiceToken[this];
[L1829]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][owner_Owned[this]];
[L1830]              assert { :EventEmitted "Transfer_DiceToken" } true;
[L1861]  RET         call DiceToken_DiceToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1862]  COND FALSE  !(revert)
[L526]   RET         call DiceToken_DiceToken__success(this, msgsender_MSG, msgvalue_MSG);
[L527]               assume !revert && gas >= 0;
[L3300]  RET         call DiceToken_DiceToken(this, msgsender_MSG, msgvalue_MSG);
[L3301]              assume !revert && gas >= 0;
[L3304]  CALL        call CorralChoice_DiceToken(this);
[L3151]              havoc msgsender_MSG;
[L3152]              havoc msgvalue_MSG;
[L3153]              havoc choice;
[L3154]              havoc __ret_0_totalSupply;
[L3155]              havoc tokenOwner_s323;
[L3156]              havoc balance_s323;
[L3157]              havoc tokenOwner_s469;
[L3158]              havoc spender_s469;
[L3159]              havoc remaining_s469;
[L3160]              havoc to_s366;
[L3161]              havoc tokens_s366;
[L3162]              havoc success_s366;
[L3163]              havoc spender_s394;
[L3164]              havoc tokens_s394;
[L3165]              havoc success_s394;
[L3166]              havoc from_s453;
[L3167]              havoc to_s453;
[L3168]              havoc tokens_s453;
[L3169]              havoc success_s453;
[L3170]              havoc __ret_0_owner;
[L3171]              havoc __ret_0_newOwner;
[L3172]              havoc _newOwner_s205;
[L3173]              havoc __ret_0_symbol;
[L3174]              havoc __ret_0_name;
[L3175]              havoc __ret_0_decimals;
[L3176]              havoc __ret_0__totalSupply;
[L3177]              havoc tokenAddress_s496;
[L3178]              havoc tokens_s496;
[L3179]              havoc success_s496;
[L3180]              havoc tmpNow;
[L3181]              havoc gas;
[L3182]              assume gas > 4000000 && gas <= 8000000;
[L3183]              tmpNow := now;
[L3184]              havoc now;
[L3185]              assume now > tmpNow;
[L3186]              assume msgsender_MSG != null;
[L3187]              assume DType[msgsender_MSG] != SafeMath;
[L3188]              assume DType[msgsender_MSG] != ERC20Interface;
[L3189]              assume DType[msgsender_MSG] != Owned;
[L3190]              assume DType[msgsender_MSG] != DiceToken;
[L3191]              Alloc[msgsender_MSG] := true;
[L3192]  COND FALSE  !(choice == 15)
[L3198]  COND FALSE  !(choice == 14)
[L3204]  COND FALSE  !(choice == 13)
[L3210]  COND FALSE  !(choice == 12)
[L3217]  COND FALSE  !(choice == 11)
[L3224]  COND TRUE   choice == 10
[L3225]              gas := gas - 21000;
[L3226]  COND TRUE   gas >= 0
[L3227]              assume tokens_s453 >= 0 && tokens_s453 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3228]              assume msgvalue_MSG == 0;
[L3229]  CALL        call success_s453 := transferFrom~address~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L779]               havoc __exception;
[L780]               revert := false;
[L781]   COND FALSE  !(__exception)
[L804]   CALL        call success_s453 := transferFrom~address~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L1994]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][from_s453], tokens_s453);
[L1602]  COND FALSE  !(!(b_s45 <= a_s45))
[L1606]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1994]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][from_s453], tokens_s453);
[L1995]  COND FALSE  !(revert)
[L1998]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][from_s453];
[L1999]              balances_DiceToken[this][from_s453] := __var_6;
[L2000]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][from_s453];
[L2001]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_DiceToken[this][from_s453][msgsender_MSG], tokens_s453);
[L1602]  COND FALSE  !(!(b_s45 <= a_s45))
[L1606]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2001]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_DiceToken[this][from_s453][msgsender_MSG], tokens_s453);
[L2002]  COND FALSE  !(revert)
[L2005]              sum_allowed1[from_s453] := sum_allowed1[from_s453] - allowed_DiceToken[this][from_s453][msgsender_MSG];
[L2006]              allowed_DiceToken[this][from_s453][msgsender_MSG] := __var_7;
[L2007]              sum_allowed1[from_s453] := sum_allowed1[from_s453] + allowed_DiceToken[this][from_s453][msgsender_MSG];
[L2008]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][to_s453], tokens_s453);
[L1584]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1585]  COND FALSE  !(!(c_s23 >= a_s23))
[L2008]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][to_s453], tokens_s453);
[L2009]  COND FALSE  !(revert)
[L2012]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][to_s453];
[L2013]              balances_DiceToken[this][to_s453] := __var_8;
[L2014]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][to_s453];
[L2015]              assert { :EventEmitted "Transfer_DiceToken" } true;
[L2016]              success_s453 := true;
[L804]   RET         call success_s453 := transferFrom~address~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L805]               assume !revert && gas >= 0;
[L3229]  RET         call success_s453 := transferFrom~address~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L3304]  RET         call CorralChoice_DiceToken(this);
[L3304]  CALL        call CorralChoice_DiceToken(this);
[L3151]              havoc msgsender_MSG;
[L3152]              havoc msgvalue_MSG;
[L3153]              havoc choice;
[L3154]              havoc __ret_0_totalSupply;
[L3155]              havoc tokenOwner_s323;
[L3156]              havoc balance_s323;
[L3157]              havoc tokenOwner_s469;
[L3158]              havoc spender_s469;
[L3159]              havoc remaining_s469;
[L3160]              havoc to_s366;
[L3161]              havoc tokens_s366;
[L3162]              havoc success_s366;
[L3163]              havoc spender_s394;
[L3164]              havoc tokens_s394;
[L3165]              havoc success_s394;
[L3166]              havoc from_s453;
[L3167]              havoc to_s453;
[L3168]              havoc tokens_s453;
[L3169]              havoc success_s453;
[L3170]              havoc __ret_0_owner;
[L3171]              havoc __ret_0_newOwner;
[L3172]              havoc _newOwner_s205;
[L3173]              havoc __ret_0_symbol;
[L3174]              havoc __ret_0_name;
[L3175]              havoc __ret_0_decimals;
[L3176]              havoc __ret_0__totalSupply;
[L3177]              havoc tokenAddress_s496;
[L3178]              havoc tokens_s496;
[L3179]              havoc success_s496;
[L3180]              havoc tmpNow;
[L3181]              havoc gas;
[L3182]              assume gas > 4000000 && gas <= 8000000;
[L3183]              tmpNow := now;
[L3184]              havoc now;
[L3185]              assume now > tmpNow;
[L3186]              assume msgsender_MSG != null;
[L3187]              assume DType[msgsender_MSG] != SafeMath;
[L3188]              assume DType[msgsender_MSG] != ERC20Interface;
[L3189]              assume DType[msgsender_MSG] != Owned;
[L3190]              assume DType[msgsender_MSG] != DiceToken;
[L3191]              Alloc[msgsender_MSG] := true;
[L3192]  COND FALSE  !(choice == 15)
[L3198]  COND FALSE  !(choice == 14)
[L3204]  COND FALSE  !(choice == 13)
[L3210]  COND TRUE   choice == 12
[L3211]              gas := gas - 21000;
[L3212]  COND TRUE   gas >= 0
[L3213]              assume tokens_s366 >= 0 && tokens_s366 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3214]              assume msgvalue_MSG == 0;
[L3215]  CALL        call success_s366 := transfer~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s366 && tokens_s366 <= balances_DiceToken[this][msgsender_MSG]) && tokens_s366 >= 0) && tokens_s366 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][to_s366] >= 0) && balances_DiceToken[this][to_s366] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][msgsender_MSG] >= 0) && balances_DiceToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DiceToken0 := true;
[L2]                 call_transfer_DiceToken0 := false;
[L2]                 revert := revert_hold;
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call success_s366 := transfer~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L1921]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][msgsender_MSG], tokens_s366);
[L1602]  COND FALSE  !(!(b_s45 <= a_s45))
[L1606]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1921]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][msgsender_MSG], tokens_s366);
[L1922]  COND FALSE  !(revert)
[L1925]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][msgsender_MSG];
[L1926]              balances_DiceToken[this][msgsender_MSG] := __var_4;
[L1927]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][msgsender_MSG];
[L1928]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][to_s366], tokens_s366);
[L1584]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1585]  COND FALSE  !(!(c_s23 >= a_s23))
[L1928]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][to_s366], tokens_s366);
[L1929]  COND FALSE  !(revert)
[L1932]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][to_s366];
[L1933]              balances_DiceToken[this][to_s366] := __var_5;
[L1934]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][to_s366];
[L1935]              assert { :EventEmitted "Transfer_DiceToken" } true;
[L1936]              success_s366 := true;
[L690]   RET         call success_s366 := transfer~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L691]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((success_s366 == true && _totalSupply_DiceToken[this] == old(_totalSupply_DiceToken[this])) && balances_DiceToken[this] == old(balances_DiceToken[this])) && allowed_DiceToken[this] == old(allowed_DiceToken[this])) && symbol_DiceToken[this] == old(symbol_DiceToken[this])) && name_DiceToken[this] == old(name_DiceToken[this])) && decimals_DiceToken[this] == old(decimals_DiceToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L3215]  RET         call success_s366 := transfer~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L3304]  RET         call CorralChoice_DiceToken(this);

Loop:
[L3304]  CALL        call CorralChoice_DiceToken(this);
[L3151]              havoc msgsender_MSG;
[L3152]              havoc msgvalue_MSG;
[L3153]              havoc choice;
[L3154]              havoc __ret_0_totalSupply;
[L3155]              havoc tokenOwner_s323;
[L3156]              havoc balance_s323;
[L3157]              havoc tokenOwner_s469;
[L3158]              havoc spender_s469;
[L3159]              havoc remaining_s469;
[L3160]              havoc to_s366;
[L3161]              havoc tokens_s366;
[L3162]              havoc success_s366;
[L3163]              havoc spender_s394;
[L3164]              havoc tokens_s394;
[L3165]              havoc success_s394;
[L3166]              havoc from_s453;
[L3167]              havoc to_s453;
[L3168]              havoc tokens_s453;
[L3169]              havoc success_s453;
[L3170]              havoc __ret_0_owner;
[L3171]              havoc __ret_0_newOwner;
[L3172]              havoc _newOwner_s205;
[L3173]              havoc __ret_0_symbol;
[L3174]              havoc __ret_0_name;
[L3175]              havoc __ret_0_decimals;
[L3176]              havoc __ret_0__totalSupply;
[L3177]              havoc tokenAddress_s496;
[L3178]              havoc tokens_s496;
[L3179]              havoc success_s496;
[L3180]              havoc tmpNow;
[L3181]              havoc gas;
[L3182]              assume gas > 4000000 && gas <= 8000000;
[L3183]              tmpNow := now;
[L3184]              havoc now;
[L3185]              assume now > tmpNow;
[L3186]              assume msgsender_MSG != null;
[L3187]              assume DType[msgsender_MSG] != SafeMath;
[L3188]              assume DType[msgsender_MSG] != ERC20Interface;
[L3189]              assume DType[msgsender_MSG] != Owned;
[L3190]              assume DType[msgsender_MSG] != DiceToken;
[L3191]              Alloc[msgsender_MSG] := true;
[L3192]  COND FALSE  !(choice == 15)
[L3198]  COND FALSE  !(choice == 14)
[L3204]  COND FALSE  !(choice == 13)
[L3210]  COND TRUE   choice == 12
[L3211]              gas := gas - 21000;
[L3212]  COND TRUE   gas >= 0
[L3213]              assume tokens_s366 >= 0 && tokens_s366 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3214]              assume msgvalue_MSG == 0;
[L3215]  CALL        call success_s366 := transfer~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s366 && tokens_s366 <= balances_DiceToken[this][msgsender_MSG]) && tokens_s366 >= 0) && tokens_s366 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][to_s366] >= 0) && balances_DiceToken[this][to_s366] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][msgsender_MSG] >= 0) && balances_DiceToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DiceToken0 := true;
[L2]                 call_transfer_DiceToken0 := false;
[L2]                 revert := revert_hold;
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call success_s366 := transfer~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L1921]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][msgsender_MSG], tokens_s366);
[L1602]  COND FALSE  !(!(b_s45 <= a_s45))
[L1606]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1921]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][msgsender_MSG], tokens_s366);
[L1922]  COND FALSE  !(revert)
[L1925]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][msgsender_MSG];
[L1926]              balances_DiceToken[this][msgsender_MSG] := __var_4;
[L1927]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][msgsender_MSG];
[L1928]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][to_s366], tokens_s366);
[L1584]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1585]  COND FALSE  !(!(c_s23 >= a_s23))
[L1928]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][to_s366], tokens_s366);
[L1929]  COND FALSE  !(revert)
[L1932]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][to_s366];
[L1933]              balances_DiceToken[this][to_s366] := __var_5;
[L1934]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][to_s366];
[L1935]              assert { :EventEmitted "Transfer_DiceToken" } true;
[L1936]              success_s366 := true;
[L690]   RET         call success_s366 := transfer~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L691]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((success_s366 == true && _totalSupply_DiceToken[this] == old(_totalSupply_DiceToken[this])) && balances_DiceToken[this] == old(balances_DiceToken[this])) && allowed_DiceToken[this] == old(allowed_DiceToken[this])) && symbol_DiceToken[this] == old(symbol_DiceToken[this])) && name_DiceToken[this] == old(name_DiceToken[this])) && decimals_DiceToken[this] == old(decimals_DiceToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L3215]  RET         call success_s366 := transfer~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L3304]  RET         call CorralChoice_DiceToken(this);

[2020-11-25 13:57:01,004 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:57:01,004 INFO  L82        PathProgramCache]: Analyzing trace with hash 723904422, now seen corresponding path program 1 times
[2020-11-25 13:57:01,005 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:57:01,073 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:57:02,919 INFO  L134       CoverageAnalysis]: Checked inductivity of 51 backedges. 0 proven. 50 refuted. 0 times theorem prover too weak. 1 trivial. 0 not checked.
[2020-11-25 13:57:02,919 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 13:57:02,919 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [41] total 41
[2020-11-25 13:57:02,920 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:57:02,920 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 42 interpolants.
[2020-11-25 13:57:02,920 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=140, Invalid=1582, Unknown=0, NotChecked=0, Total=1722
[2020-11-25 13:57:02,920 INFO  L87              Difference]: Start difference. First operand 1372 states and 1483 transitions. cyclomatic complexity: 114 Second operand 42 states.
[2020-11-25 13:57:07,715 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:57:07,715 INFO  L93              Difference]: Finished difference Result 1560 states and 1741 transitions.
[2020-11-25 13:57:07,715 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 40 states. 
[2020-11-25 13:57:07,715 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1560 states and 1741 transitions.
[2020-11-25 13:57:07,718 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 13:57:07,722 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1560 states to 1560 states and 1741 transitions.
[2020-11-25 13:57:07,722 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 493
[2020-11-25 13:57:07,722 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 493
[2020-11-25 13:57:07,723 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1560 states and 1741 transitions.
[2020-11-25 13:57:07,724 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:57:07,724 INFO  L728         BuchiCegarLoop]: Abstraction has 1560 states and 1741 transitions.
[2020-11-25 13:57:07,725 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1560 states and 1741 transitions.
[2020-11-25 13:57:07,733 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1560 to 1537.
[2020-11-25 13:57:07,733 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1537 states.
[2020-11-25 13:57:07,734 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1537 states to 1537 states and 1709 transitions.
[2020-11-25 13:57:07,734 INFO  L751         BuchiCegarLoop]: Abstraction has 1537 states and 1709 transitions.
[2020-11-25 13:57:07,734 INFO  L631         BuchiCegarLoop]: Abstraction has 1537 states and 1709 transitions.
[2020-11-25 13:57:07,734 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 13:57:07,734 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1537 states and 1709 transitions.
[2020-11-25 13:57:07,736 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 13:57:07,736 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:57:07,736 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:57:07,737 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:57:07,737 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_DiceToken0 := false;
[L2]                 call_transfer_DiceToken0 := false;
[L2]     CALL        call main();
[L3294]              assume null == 0;
[L3295]  CALL        call this := FreshRefGenerator__success();
[L1535]              havoc newRef;
[L1536]              assume Alloc[newRef] == false;
[L1537]              Alloc[newRef] := true;
[L1538]              assume newRef != null;
[L3295]  RET         call this := FreshRefGenerator__success();
[L3296]              assume now >= 0;
[L3297]              assume DType[this] == DiceToken;
[L3298]              assume msgvalue_MSG == 0;
[L3299]              gas := gas - 53000;
[L3300]  CALL        call DiceToken_DiceToken(this, msgsender_MSG, msgvalue_MSG);
[L501]               havoc __exception;
[L502]               revert := false;
[L503]   COND FALSE  !(__exception)
[L526]   CALL        call DiceToken_DiceToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1853]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1671]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1656]              assume msgsender_MSG != null;
[L1657]              Balance[this] := 0;
[L1671]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1672]  COND FALSE  !(revert)
[L1853]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1854]  COND FALSE  !(revert)
[L1857]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1709]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1691]              assume msgsender_MSG != null;
[L1692]              Balance[this] := 0;
[L1693]              owner_Owned[this] := null;
[L1694]              newOwner_Owned[this] := null;
[L1696]              owner_Owned[this] := msgsender_MSG;
[L1709]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1710]  COND FALSE  !(revert)
[L1857]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1858]  COND FALSE  !(revert)
[L1861]  CALL        call DiceToken_DiceToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1811]              assume msgsender_MSG != null;
[L1812]              Balance[this] := 0;
[L1813]              symbol_DiceToken[this] := 31320490;
[L1814]              name_DiceToken[this] := 31320490;
[L1815]              decimals_DiceToken[this] := 0;
[L1816]              _totalSupply_DiceToken[this] := 0;
[L1817]              balances_DiceToken[this] := zeroRefintArr();
[L1818]              sum_balances0[this] := 0;
[L1819]              allowed_DiceToken[this] := zeroRefRefintArr();
[L1820]              sum_allowed1[this] := 0;
[L1822]              decimals_DiceToken[this] := 18;
[L1823]              symbol_DiceToken[this] := 884691297;
[L1824]              name_DiceToken[this] := 869301625;
[L1825]              __var_2 := decimals_DiceToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1826]              _totalSupply_DiceToken[this] := 30678 * (nonlinearPow(10, decimals_DiceToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][owner_Owned[this]];
[L1828]              balances_DiceToken[this][owner_Owned[this]] := _totalSupply_DiceToken[this];
[L1829]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][owner_Owned[this]];
[L1830]              assert { :EventEmitted "Transfer_DiceToken" } true;
[L1861]  RET         call DiceToken_DiceToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1862]  COND FALSE  !(revert)
[L526]   RET         call DiceToken_DiceToken__success(this, msgsender_MSG, msgvalue_MSG);
[L527]               assume !revert && gas >= 0;
[L3300]  RET         call DiceToken_DiceToken(this, msgsender_MSG, msgvalue_MSG);
[L3301]              assume !revert && gas >= 0;
[L3304]  CALL        call CorralChoice_DiceToken(this);
[L3151]              havoc msgsender_MSG;
[L3152]              havoc msgvalue_MSG;
[L3153]              havoc choice;
[L3154]              havoc __ret_0_totalSupply;
[L3155]              havoc tokenOwner_s323;
[L3156]              havoc balance_s323;
[L3157]              havoc tokenOwner_s469;
[L3158]              havoc spender_s469;
[L3159]              havoc remaining_s469;
[L3160]              havoc to_s366;
[L3161]              havoc tokens_s366;
[L3162]              havoc success_s366;
[L3163]              havoc spender_s394;
[L3164]              havoc tokens_s394;
[L3165]              havoc success_s394;
[L3166]              havoc from_s453;
[L3167]              havoc to_s453;
[L3168]              havoc tokens_s453;
[L3169]              havoc success_s453;
[L3170]              havoc __ret_0_owner;
[L3171]              havoc __ret_0_newOwner;
[L3172]              havoc _newOwner_s205;
[L3173]              havoc __ret_0_symbol;
[L3174]              havoc __ret_0_name;
[L3175]              havoc __ret_0_decimals;
[L3176]              havoc __ret_0__totalSupply;
[L3177]              havoc tokenAddress_s496;
[L3178]              havoc tokens_s496;
[L3179]              havoc success_s496;
[L3180]              havoc tmpNow;
[L3181]              havoc gas;
[L3182]              assume gas > 4000000 && gas <= 8000000;
[L3183]              tmpNow := now;
[L3184]              havoc now;
[L3185]              assume now > tmpNow;
[L3186]              assume msgsender_MSG != null;
[L3187]              assume DType[msgsender_MSG] != SafeMath;
[L3188]              assume DType[msgsender_MSG] != ERC20Interface;
[L3189]              assume DType[msgsender_MSG] != Owned;
[L3190]              assume DType[msgsender_MSG] != DiceToken;
[L3191]              Alloc[msgsender_MSG] := true;
[L3192]  COND FALSE  !(choice == 15)
[L3198]  COND FALSE  !(choice == 14)
[L3204]  COND FALSE  !(choice == 13)
[L3210]  COND TRUE   choice == 12
[L3211]              gas := gas - 21000;
[L3212]  COND TRUE   gas >= 0
[L3213]              assume tokens_s366 >= 0 && tokens_s366 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3214]              assume msgvalue_MSG == 0;
[L3215]  CALL        call success_s366 := transfer~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == to_s366 && tokens_s366 <= balances_DiceToken[this][msgsender_MSG]) && tokens_s366 >= 0) && tokens_s366 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][to_s366] >= 0) && balances_DiceToken[this][to_s366] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][msgsender_MSG] >= 0) && balances_DiceToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call success_s366 := transfer~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L1921]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][msgsender_MSG], tokens_s366);
[L1602]  COND FALSE  !(!(b_s45 <= a_s45))
[L1606]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1921]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][msgsender_MSG], tokens_s366);
[L1922]  COND FALSE  !(revert)
[L1925]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][msgsender_MSG];
[L1926]              balances_DiceToken[this][msgsender_MSG] := __var_4;
[L1927]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][msgsender_MSG];
[L1928]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][to_s366], tokens_s366);
[L1584]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1585]  COND FALSE  !(!(c_s23 >= a_s23))
[L1928]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][to_s366], tokens_s366);
[L1929]  COND FALSE  !(revert)
[L1932]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][to_s366];
[L1933]              balances_DiceToken[this][to_s366] := __var_5;
[L1934]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][to_s366];
[L1935]              assert { :EventEmitted "Transfer_DiceToken" } true;
[L1936]              success_s366 := true;
[L690]   RET         call success_s366 := transfer~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L691]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((success_s366 == true && _totalSupply_DiceToken[this] == old(_totalSupply_DiceToken[this])) && balances_DiceToken[this] == old(balances_DiceToken[this])) && allowed_DiceToken[this] == old(allowed_DiceToken[this])) && symbol_DiceToken[this] == old(symbol_DiceToken[this])) && name_DiceToken[this] == old(name_DiceToken[this])) && decimals_DiceToken[this] == old(decimals_DiceToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L3215]  RET         call success_s366 := transfer~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L3304]  RET         call CorralChoice_DiceToken(this);
[L3304]  CALL        call CorralChoice_DiceToken(this);
[L3151]              havoc msgsender_MSG;
[L3152]              havoc msgvalue_MSG;
[L3153]              havoc choice;
[L3154]              havoc __ret_0_totalSupply;
[L3155]              havoc tokenOwner_s323;
[L3156]              havoc balance_s323;
[L3157]              havoc tokenOwner_s469;
[L3158]              havoc spender_s469;
[L3159]              havoc remaining_s469;
[L3160]              havoc to_s366;
[L3161]              havoc tokens_s366;
[L3162]              havoc success_s366;
[L3163]              havoc spender_s394;
[L3164]              havoc tokens_s394;
[L3165]              havoc success_s394;
[L3166]              havoc from_s453;
[L3167]              havoc to_s453;
[L3168]              havoc tokens_s453;
[L3169]              havoc success_s453;
[L3170]              havoc __ret_0_owner;
[L3171]              havoc __ret_0_newOwner;
[L3172]              havoc _newOwner_s205;
[L3173]              havoc __ret_0_symbol;
[L3174]              havoc __ret_0_name;
[L3175]              havoc __ret_0_decimals;
[L3176]              havoc __ret_0__totalSupply;
[L3177]              havoc tokenAddress_s496;
[L3178]              havoc tokens_s496;
[L3179]              havoc success_s496;
[L3180]              havoc tmpNow;
[L3181]              havoc gas;
[L3182]              assume gas > 4000000 && gas <= 8000000;
[L3183]              tmpNow := now;
[L3184]              havoc now;
[L3185]              assume now > tmpNow;
[L3186]              assume msgsender_MSG != null;
[L3187]              assume DType[msgsender_MSG] != SafeMath;
[L3188]              assume DType[msgsender_MSG] != ERC20Interface;
[L3189]              assume DType[msgsender_MSG] != Owned;
[L3190]              assume DType[msgsender_MSG] != DiceToken;
[L3191]              Alloc[msgsender_MSG] := true;
[L3192]  COND FALSE  !(choice == 15)
[L3198]  COND FALSE  !(choice == 14)
[L3204]  COND FALSE  !(choice == 13)
[L3210]  COND TRUE   choice == 12
[L3211]              gas := gas - 21000;
[L3212]  COND TRUE   gas >= 0
[L3213]              assume tokens_s366 >= 0 && tokens_s366 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3214]              assume msgvalue_MSG == 0;
[L3215]  CALL        call success_s366 := transfer~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s366 && tokens_s366 <= balances_DiceToken[this][msgsender_MSG]) && tokens_s366 >= 0) && tokens_s366 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][to_s366] >= 0) && balances_DiceToken[this][to_s366] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][msgsender_MSG] >= 0) && balances_DiceToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DiceToken0 := true;
[L2]                 call_transfer_DiceToken0 := false;
[L2]                 revert := revert_hold;
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call success_s366 := transfer~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L1921]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][msgsender_MSG], tokens_s366);
[L1602]  COND FALSE  !(!(b_s45 <= a_s45))
[L1606]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1921]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][msgsender_MSG], tokens_s366);
[L1922]  COND FALSE  !(revert)
[L1925]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][msgsender_MSG];
[L1926]              balances_DiceToken[this][msgsender_MSG] := __var_4;
[L1927]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][msgsender_MSG];
[L1928]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][to_s366], tokens_s366);
[L1584]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1585]  COND FALSE  !(!(c_s23 >= a_s23))
[L1928]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][to_s366], tokens_s366);
[L1929]  COND FALSE  !(revert)
[L1932]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][to_s366];
[L1933]              balances_DiceToken[this][to_s366] := __var_5;
[L1934]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][to_s366];
[L1935]              assert { :EventEmitted "Transfer_DiceToken" } true;
[L1936]              success_s366 := true;
[L690]   RET         call success_s366 := transfer~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L691]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((success_s366 == true && _totalSupply_DiceToken[this] == old(_totalSupply_DiceToken[this])) && balances_DiceToken[this] == old(balances_DiceToken[this])) && allowed_DiceToken[this] == old(allowed_DiceToken[this])) && symbol_DiceToken[this] == old(symbol_DiceToken[this])) && name_DiceToken[this] == old(name_DiceToken[this])) && decimals_DiceToken[this] == old(decimals_DiceToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L3215]  RET         call success_s366 := transfer~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L3304]  RET         call CorralChoice_DiceToken(this);

Loop:
[L3304]  CALL        call CorralChoice_DiceToken(this);
[L3151]              havoc msgsender_MSG;
[L3152]              havoc msgvalue_MSG;
[L3153]              havoc choice;
[L3154]              havoc __ret_0_totalSupply;
[L3155]              havoc tokenOwner_s323;
[L3156]              havoc balance_s323;
[L3157]              havoc tokenOwner_s469;
[L3158]              havoc spender_s469;
[L3159]              havoc remaining_s469;
[L3160]              havoc to_s366;
[L3161]              havoc tokens_s366;
[L3162]              havoc success_s366;
[L3163]              havoc spender_s394;
[L3164]              havoc tokens_s394;
[L3165]              havoc success_s394;
[L3166]              havoc from_s453;
[L3167]              havoc to_s453;
[L3168]              havoc tokens_s453;
[L3169]              havoc success_s453;
[L3170]              havoc __ret_0_owner;
[L3171]              havoc __ret_0_newOwner;
[L3172]              havoc _newOwner_s205;
[L3173]              havoc __ret_0_symbol;
[L3174]              havoc __ret_0_name;
[L3175]              havoc __ret_0_decimals;
[L3176]              havoc __ret_0__totalSupply;
[L3177]              havoc tokenAddress_s496;
[L3178]              havoc tokens_s496;
[L3179]              havoc success_s496;
[L3180]              havoc tmpNow;
[L3181]              havoc gas;
[L3182]              assume gas > 4000000 && gas <= 8000000;
[L3183]              tmpNow := now;
[L3184]              havoc now;
[L3185]              assume now > tmpNow;
[L3186]              assume msgsender_MSG != null;
[L3187]              assume DType[msgsender_MSG] != SafeMath;
[L3188]              assume DType[msgsender_MSG] != ERC20Interface;
[L3189]              assume DType[msgsender_MSG] != Owned;
[L3190]              assume DType[msgsender_MSG] != DiceToken;
[L3191]              Alloc[msgsender_MSG] := true;
[L3192]  COND FALSE  !(choice == 15)
[L3198]  COND FALSE  !(choice == 14)
[L3204]  COND FALSE  !(choice == 13)
[L3210]  COND TRUE   choice == 12
[L3211]              gas := gas - 21000;
[L3212]  COND TRUE   gas >= 0
[L3213]              assume tokens_s366 >= 0 && tokens_s366 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3214]              assume msgvalue_MSG == 0;
[L3215]  CALL        call success_s366 := transfer~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == to_s366 && tokens_s366 <= balances_DiceToken[this][msgsender_MSG]) && tokens_s366 >= 0) && tokens_s366 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][to_s366] >= 0) && balances_DiceToken[this][to_s366] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][msgsender_MSG] >= 0) && balances_DiceToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call success_s366 := transfer~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L1921]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][msgsender_MSG], tokens_s366);
[L1602]  COND FALSE  !(!(b_s45 <= a_s45))
[L1606]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1921]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][msgsender_MSG], tokens_s366);
[L1922]  COND FALSE  !(revert)
[L1925]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][msgsender_MSG];
[L1926]              balances_DiceToken[this][msgsender_MSG] := __var_4;
[L1927]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][msgsender_MSG];
[L1928]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][to_s366], tokens_s366);
[L1584]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1585]  COND FALSE  !(!(c_s23 >= a_s23))
[L1928]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][to_s366], tokens_s366);
[L1929]  COND FALSE  !(revert)
[L1932]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][to_s366];
[L1933]              balances_DiceToken[this][to_s366] := __var_5;
[L1934]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][to_s366];
[L1935]              assert { :EventEmitted "Transfer_DiceToken" } true;
[L1936]              success_s366 := true;
[L690]   RET         call success_s366 := transfer~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L691]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((success_s366 == true && _totalSupply_DiceToken[this] == old(_totalSupply_DiceToken[this])) && balances_DiceToken[this] == old(balances_DiceToken[this])) && allowed_DiceToken[this] == old(allowed_DiceToken[this])) && symbol_DiceToken[this] == old(symbol_DiceToken[this])) && name_DiceToken[this] == old(name_DiceToken[this])) && decimals_DiceToken[this] == old(decimals_DiceToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L3215]  RET         call success_s366 := transfer~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L3304]  RET         call CorralChoice_DiceToken(this);

[2020-11-25 13:57:07,741 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:57:07,741 INFO  L82        PathProgramCache]: Analyzing trace with hash 1917104191, now seen corresponding path program 1 times
[2020-11-25 13:57:07,741 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:57:07,792 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:57:07,897 INFO  L134       CoverageAnalysis]: Checked inductivity of 56 backedges. 55 proven. 0 refuted. 0 times theorem prover too weak. 1 trivial. 0 not checked.
[2020-11-25 13:57:07,897 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:57:07,897 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [14] imperfect sequences [] total 14
[2020-11-25 13:57:07,897 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:57:07,897 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 13:57:07,898 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=31, Invalid=151, Unknown=0, NotChecked=0, Total=182
[2020-11-25 13:57:07,898 INFO  L87              Difference]: Start difference. First operand 1537 states and 1709 transitions. cyclomatic complexity: 178 Second operand 14 states.
[2020-11-25 13:57:08,495 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:57:08,495 INFO  L93              Difference]: Finished difference Result 784 states and 849 transitions.
[2020-11-25 13:57:08,495 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-11-25 13:57:08,495 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 784 states and 849 transitions.
[2020-11-25 13:57:08,496 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 13:57:08,496 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 784 states to 0 states and 0 transitions.
[2020-11-25 13:57:08,497 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 13:57:08,497 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 13:57:08,497 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 13:57:08,497 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:57:08,497 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 13:57:08,497 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 13:57:08,497 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 13:57:08,497 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 13:57:08,497 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 13:57:08,497 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 13:57:08,497 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 13:57:08,500 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 01:57:08 BasicIcfg
[2020-11-25 13:57:08,500 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 13:57:08,500 INFO  L168              Benchmark]: Toolchain (without parser) took 17826.33 ms. Allocated memory was 1.0 GB in the beginning and 2.5 GB in the end (delta: 1.4 GB). Free memory was 940.6 MB in the beginning and 2.3 GB in the end (delta: -1.3 GB). Peak memory consumption was 120.0 MB. Max. memory is 15.3 GB.
[2020-11-25 13:57:08,501 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 13:57:08,503 INFO  L168              Benchmark]: Boogie Preprocessor took 88.49 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 929.8 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 13:57:08,503 INFO  L168              Benchmark]: UtopiaSpecLang took 57.14 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.5 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 13:57:08,503 INFO  L168              Benchmark]: Boogie Printer took 13.12 ms. Allocated memory is still 1.0 GB. Free memory is still 924.5 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 13:57:08,503 INFO  L168              Benchmark]: RCFGBuilder took 628.32 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 833.2 MB in the end (delta: 91.3 MB). Peak memory consumption was 91.3 MB. Max. memory is 15.3 GB.
[2020-11-25 13:57:08,503 INFO  L168              Benchmark]: UtopiaLTL2Aut took 37.91 ms. Allocated memory is still 1.0 GB. Free memory was 833.2 MB in the beginning and 824.2 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
[2020-11-25 13:57:08,504 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1152.65 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 72.4 MB). Free memory was 824.2 MB in the beginning and 722.4 MB in the end (delta: 101.9 MB). Peak memory consumption was 174.2 MB. Max. memory is 15.3 GB.
[2020-11-25 13:57:08,504 INFO  L168              Benchmark]: BlockEncodingV2 took 193.60 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 165.2 MB). Free memory was 716.2 MB in the beginning and 1.2 GB in the end (delta: -457.1 MB). Peak memory consumption was 35.2 MB. Max. memory is 15.3 GB.
[2020-11-25 13:57:08,505 INFO  L168              Benchmark]: BuchiAutomizer took 15652.06 ms. Allocated memory was 1.3 GB in the beginning and 2.5 GB in the end (delta: 1.2 GB). Free memory was 1.2 GB in the beginning and 2.3 GB in the end (delta: -1.1 GB). Peak memory consumption was 115.2 MB. Max. memory is 15.3 GB.
[2020-11-25 13:57:08,507 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    2830 locations, 4813 edges
  - StatisticsResult: Encoded RCFG
    2796 locations, 4728 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 88.49 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 929.8 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 57.14 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.5 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 13.12 ms. Allocated memory is still 1.0 GB. Free memory is still 924.5 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 628.32 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 833.2 MB in the end (delta: 91.3 MB). Peak memory consumption was 91.3 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 37.91 ms. Allocated memory is still 1.0 GB. Free memory was 833.2 MB in the beginning and 824.2 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1152.65 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 72.4 MB). Free memory was 824.2 MB in the beginning and 722.4 MB in the end (delta: 101.9 MB). Peak memory consumption was 174.2 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 193.60 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 165.2 MB). Free memory was 716.2 MB in the beginning and 1.2 GB in the end (delta: -457.1 MB). Peak memory consumption was 35.2 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 15652.06 ms. Allocated memory was 1.3 GB in the beginning and 2.5 GB in the end (delta: 1.2 GB). Free memory was 1.2 GB in the beginning and 2.3 GB in the end (delta: -1.1 GB). Peak memory consumption was 115.2 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1190 locations, 1487 edges
  - StatisticsResult: BuchiProgram size
    2830 locations, 4813 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 8 terminating modules (8 trivial, 0 deterministic, 0 nondeterministic). 8 modules have a trivial ranking function, the largest among these consists of 42 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 15.6s and 9 iterations.  TraceHistogramMax:2. Analysis of lassos took 3.2s. Construction of modules took 9.5s. BÃ¼chi inclusion checks took 2.3s. Highest rank in rank-based complementation 0. Minimization of det autom 8. Minimization of nondet autom 0. Automata minimization 0.1s AutomataMinimizationTime, 7 MinimizatonAttempts, 1511 StatesRemovedByMinimization, 6 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 2141 states and ocurred in iteration 5.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 15111 SDtfs, 21697 SDslu, 53947 SDs, 0 SdLazy, 66176 SolverSat, 3869 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 9.5s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU8 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transfer_DiceToken0) ==> ( <>(success_transfer_DiceToken0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
