This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 07:15:43,191 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 07:15:43,192 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 07:15:43,198 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 07:15:43,199 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 07:15:43,199 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 07:15:43,200 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 07:15:43,201 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 07:15:43,202 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 07:15:43,202 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 07:15:43,202 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 07:15:43,202 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 07:15:43,203 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 07:15:43,203 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 07:15:43,204 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 07:15:43,204 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 07:15:43,205 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 07:15:43,206 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 07:15:43,207 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 07:15:43,207 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 07:15:43,208 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 07:15:43,208 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 07:15:43,210 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 07:15:43,210 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 07:15:43,210 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 07:15:43,210 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 07:15:43,210 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 07:15:43,211 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 07:15:43,211 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 07:15:43,211 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 07:15:43,211 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 07:15:43,212 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 07:15:43,212 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 07:15:43,212 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 07:15:43,213 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 07:15:43,213 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 07:15:43,213 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 07:15:43,213 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 07:15:43,213 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 07:15:43,214 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 07:15:43,214 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 07:15:43,214 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 07:15:43,219 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 07:15:43,219 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 07:15:43,220 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 07:15:43,220 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 07:15:43,220 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 07:15:43,220 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 07:15:43,220 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 07:15:43,220 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 07:15:43,220 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 07:15:43,220 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 07:15:43,221 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 07:15:43,221 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 07:15:43,221 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 07:15:43,221 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 07:15:43,221 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 07:15:43,221 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 07:15:43,221 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 07:15:43,221 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 07:15:43,221 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 07:15:43,221 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 07:15:43,221 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 07:15:43,221 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 07:15:43,221 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 07:15:43,222 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 07:15:43,222 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 07:15:43,222 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 07:15:43,237 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 07:15:43,250 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 07:15:43,252 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 07:15:43,253 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 07:15:43,253 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 07:15:43,254 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/ULMC_0x44f946f93272322341eeb42977b0b0ed090c8f9c_transfer-self.bpl
[2020-11-25 07:15:43,254 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/ULMC_0x44f946f93272322341eeb42977b0b0ed090c8f9c_transfer-self.bpl'
[2020-11-25 07:15:43,328 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 07:15:43,329 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 07:15:43,330 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 07:15:43,330 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 07:15:43,330 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 07:15:43,346 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "ULMC_0x44f946f93272322341eeb42977b0b0ed090c8f9c_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 07:15:43" (1/1) ...
[2020-11-25 07:15:43,348 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "ULMC_0x44f946f93272322341eeb42977b0b0ed090c8f9c_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 07:15:43" (1/1) ...
[2020-11-25 07:15:43,376 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "ULMC_0x44f946f93272322341eeb42977b0b0ed090c8f9c_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 07:15:43" (1/1) ...
[2020-11-25 07:15:43,376 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "ULMC_0x44f946f93272322341eeb42977b0b0ed090c8f9c_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 07:15:43" (1/1) ...
[2020-11-25 07:15:43,394 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "ULMC_0x44f946f93272322341eeb42977b0b0ed090c8f9c_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 07:15:43" (1/1) ...
[2020-11-25 07:15:43,403 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "ULMC_0x44f946f93272322341eeb42977b0b0ed090c8f9c_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 07:15:43" (1/1) ...
[2020-11-25 07:15:43,409 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "ULMC_0x44f946f93272322341eeb42977b0b0ed090c8f9c_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 07:15:43" (1/1) ...
[2020-11-25 07:15:43,418 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 07:15:43,419 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 07:15:43,419 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 07:15:43,421 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 07:15:43,424 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "ULMC_0x44f946f93272322341eeb42977b0b0ed090c8f9c_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 07:15:43" (1/1) ...
[2020-11-25 07:15:43,441 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 07:15:43,446 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 07:15:43,453 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 07:15:43,459 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==recipient_s255 && amount_s255<=_balances_ERC20[this][msg.sender] ) && amount_s255>=0 ) && amount_s255<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][recipient_s255]>=0 ) && _balances_ERC20[this][recipient_s255]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][msg.sender]>=0 ) && _balances_ERC20[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IdentifierExpression[recipient_s255,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]],BinaryExpression[COMPLEQ,IdentifierExpression[amount_s255,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[amount_s255,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[amount_s255,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s255,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s255,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 07:15:43,462 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( __ret_0_==true && _totalSupply_ERC20[this]==( old(_totalSupply_ERC20[this]) ) ) && _balances_ERC20[this]==( old(_balances_ERC20[this]) ) ) && _allowances_ERC20[this]==( old(_allowances_ERC20[this]) ) ) && _name_ERC20Detailed[this]==( old(_name_ERC20Detailed[this]) ) ) && _symbol_ERC20Detailed[this]==( old(_symbol_ERC20Detailed[this]) ) ) && _decimals_ERC20Detailed[this]==( old(_decimals_ERC20Detailed[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_ERC20>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]]
[2020-11-25 07:15:43,466 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 07:15:43,467 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_ERC200) ==> ( <>AP(success_transfer_ERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 07:15:43,473 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 07:15:43 PropertyContainer
[2020-11-25 07:15:43,473 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 07:15:43,474 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 07:15:43,474 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 07:15:43,474 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 07:15:43,475 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "ULMC_0x44f946f93272322341eeb42977b0b0ed090c8f9c_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 07:15:43" (1/2) ...
[2020-11-25 07:15:43,475 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 07:15:43,475 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 07:15:43,487 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 07:15:43" (2/2) ...
[2020-11-25 07:15:43,487 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 07:15:43,487 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 07:15:43,487 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 07:15:43,487 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 07:15:43,489 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "ULMC_0x44f946f93272322341eeb42977b0b0ed090c8f9c_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 07:15:43" (1/2) ...
[2020-11-25 07:15:43,538 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 07:15:43,539 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 07:15:43,539 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 07:15:43,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 07:15:43,539 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 07:15:43,539 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 07:15:43,539 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 07:15:43,539 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 07:15:43,539 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 07:15:43,539 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 07:15:43,539 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 07:15:43,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 07:15:43,540 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 07:15:43,540 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 07:15:43,540 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 07:15:43,540 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 07:15:43,540 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 07:15:43,540 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 07:15:43,540 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 07:15:43,540 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 07:15:43,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 07:15:43,541 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 07:15:43,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 07:15:43,541 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 07:15:43,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 07:15:43,541 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 07:15:43,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 07:15:43,541 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 07:15:43,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 07:15:43,541 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 07:15:43,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 07:15:43,541 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 07:15:43,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 07:15:43,541 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 07:15:43,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 07:15:43,542 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 07:15:43,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 07:15:43,542 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 07:15:43,542 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 07:15:43,542 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 07:15:43,542 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 07:15:43,542 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 07:15:43,542 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 07:15:43,542 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 07:15:43,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 07:15:43,542 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 07:15:43,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 07:15:43,543 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 07:15:43,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 07:15:43,543 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 07:15:43,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 07:15:43,543 INFO  L130     BoogieDeclarations]: Found specification of procedure ULMC_ULMC_NoBaseCtor__success
[2020-11-25 07:15:43,543 INFO  L130     BoogieDeclarations]: Found specification of procedure ULMC_ULMC
[2020-11-25 07:15:43,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULMC_ULMC
[2020-11-25 07:15:43,543 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 07:15:43,543 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 07:15:43,543 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 07:15:43,543 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 07:15:43,543 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 07:15:43,543 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 07:15:43,543 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 07:15:43,544 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 07:15:43,544 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 07:15:43,544 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 07:15:43,544 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 07:15:43,544 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ULMC
[2020-11-25 07:15:43,544 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 07:15:43,544 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 07:15:43,544 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 07:15:43,544 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 07:15:43,544 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 07:15:43,544 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 07:15:43,544 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 07:15:43,544 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 07:15:43,545 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 07:15:43,545 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 07:15:43,545 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 07:15:43,545 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 07:15:43,545 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 07:15:43,545 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 07:15:43,545 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 07:15:43,545 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 07:15:43,545 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 07:15:43,545 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 07:15:43,545 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 07:15:43,545 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 07:15:43,546 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 07:15:43,546 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 07:15:43,546 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 07:15:43,546 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 07:15:43,546 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 07:15:43,546 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 07:15:43,546 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 07:15:43,546 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 07:15:43,546 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 07:15:43,546 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 07:15:43,546 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 07:15:43,546 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 07:15:43,546 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 07:15:43,547 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 07:15:43,547 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 07:15:43,547 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 07:15:43,547 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 07:15:43,547 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 07:15:43,547 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 07:15:43,547 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 07:15:43,547 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 07:15:43,547 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 07:15:43,547 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 07:15:43,547 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 07:15:43,547 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 07:15:43,547 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 07:15:43,548 INFO  L130     BoogieDeclarations]: Found specification of procedure ULMC_ULMC_NoBaseCtor__fail
[2020-11-25 07:15:43,548 INFO  L130     BoogieDeclarations]: Found specification of procedure ULMC_ULMC__success
[2020-11-25 07:15:43,548 INFO  L130     BoogieDeclarations]: Found specification of procedure ULMC_ULMC__fail
[2020-11-25 07:15:43,548 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 07:15:43,548 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 07:15:43,548 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 07:15:43,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 07:15:43,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 07:15:43,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 07:15:43,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 07:15:43,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 07:15:43,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 07:15:43,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 07:15:43,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 07:15:43,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 07:15:43,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 07:15:43,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 07:15:43,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 07:15:43,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 07:15:43,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 07:15:43,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 07:15:43,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 07:15:43,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 07:15:43,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 07:15:43,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 07:15:43,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 07:15:43,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 07:15:43,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 07:15:43,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 07:15:43,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 07:15:43,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 07:15:43,551 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 07:15:43,551 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 07:15:43,551 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 07:15:43,551 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 07:15:43,551 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 07:15:43,551 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 07:15:43,551 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 07:15:43,551 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 07:15:43,551 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 07:15:43,551 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 07:15:43,552 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 07:15:43,552 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 07:15:43,552 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 07:15:43,552 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 07:15:43,552 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 07:15:43,552 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 07:15:43,552 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 07:15:43,552 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 07:15:43,552 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 07:15:43,552 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 07:15:43,553 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 07:15:43,553 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 07:15:43,553 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 07:15:43,553 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 07:15:43,553 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 07:15:43,553 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 07:15:43,553 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 07:15:43,553 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 07:15:43,553 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 07:15:43,553 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 07:15:43,553 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 07:15:43,554 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 07:15:43,554 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 07:15:43,554 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 07:15:43,554 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 07:15:43,554 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULMC_ULMC_NoBaseCtor__fail
[2020-11-25 07:15:43,554 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULMC_ULMC_NoBaseCtor__success
[2020-11-25 07:15:43,554 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULMC_ULMC__fail
[2020-11-25 07:15:43,554 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULMC_ULMC__success
[2020-11-25 07:15:43,554 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 07:15:43,554 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 07:15:43,554 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 07:15:43,554 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 07:15:43,555 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 07:15:43,555 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 07:15:43,555 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 07:15:43,555 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 07:15:43,555 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 07:15:43,555 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 07:15:43,555 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 07:15:43,555 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 07:15:43,555 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 07:15:43,555 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 07:15:43,555 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ULMC
[2020-11-25 07:15:43,555 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 07:15:43,556 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 07:15:43,556 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 07:15:43,777 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 07:15:43,777 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 07:15:43,778 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 07:15:44,225 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 07:15:44,225 INFO  L286             CfgBuilder]: Removed 5 assue(true) statements.
[2020-11-25 07:15:44,227 INFO  L202        PluginConnector]: Adding new model ULMC_0x44f946f93272322341eeb42977b0b0ed090c8f9c_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 07:15:44 BoogieIcfgContainer
[2020-11-25 07:15:44,227 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 07:15:43" (2/2) ...
[2020-11-25 07:15:44,227 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 07:15:44,227 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@371d2a0e and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 07:15:44, skipping insertion in model container
[2020-11-25 07:15:44,228 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 07:15:44,228 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 07:15:44,228 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 07:15:44,229 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 07:15:44,230 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "ULMC_0x44f946f93272322341eeb42977b0b0ed090c8f9c_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 07:15:43" (1/3) ...
[2020-11-25 07:15:44,230 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@1ae0fa85 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 07:15:44, skipping insertion in model container
[2020-11-25 07:15:44,230 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 07:15:43" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 07:15:44,268 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 07:15:44 NWAContainer
[2020-11-25 07:15:44,269 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 07:15:44,269 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 07:15:44,269 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 07:15:44,270 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 07:15:44,271 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "ULMC_0x44f946f93272322341eeb42977b0b0ed090c8f9c_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 07:15:44" (3/4) ...
[2020-11-25 07:15:44,272 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@1f157a94 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 07:15:44, skipping insertion in model container
[2020-11-25 07:15:44,272 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 07:15:44" (4/4) ...
[2020-11-25 07:15:44,275 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 07:15:44,278 INFO  L110   BuchiProductObserver]: Initial RCFG 1273 locations, 1751 edges
[2020-11-25 07:15:44,279 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 07:15:44,289 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 07:15:45,561 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 07:15:45,565 INFO  L110   BuchiProductObserver]: BuchiProgram size 3182 locations, 5737 edges
[2020-11-25 07:15:45,566 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 07:15:45 BoogieIcfgContainer
[2020-11-25 07:15:45,566 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 07:15:45,566 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 07:15:45,566 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 07:15:45,567 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 07:15:45,568 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 07:15:45" (1/1) ...
[2020-11-25 07:15:45,635 INFO  L313           BlockEncoder]: Initial Icfg 3182 locations, 5737 edges
[2020-11-25 07:15:45,635 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 07:15:45,635 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 07:15:45,636 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 07:15:45,636 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 07:15:45,645 INFO  L70    emoveInfeasibleEdges]: Removed 102 edges and 13 locations because of local infeasibility
[2020-11-25 07:15:45,652 INFO  L70        RemoveSinkStates]: Removed 56 edges and 37 locations by removing sink states
[2020-11-25 07:15:45,661 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 07:15:45,665 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 07:15:45,668 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 07:15:45,668 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 07:15:45,672 INFO  L313           BlockEncoder]: Encoded RCFG 3114 locations, 5553 edges
[2020-11-25 07:15:45,672 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 07:15:45 BasicIcfg
[2020-11-25 07:15:45,672 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 07:15:45,673 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 07:15:45,673 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 07:15:45,675 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 07:15:45,675 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 07:15:45,675 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ULMC_0x44f946f93272322341eeb42977b0b0ed090c8f9c_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 07:15:43" (1/6) ...
[2020-11-25 07:15:45,676 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@27e1dc10 and model type ULMC_0x44f946f93272322341eeb42977b0b0ed090c8f9c_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 07:15:45, skipping insertion in model container
[2020-11-25 07:15:45,676 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 07:15:45,677 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 07:15:43" (2/6) ...
[2020-11-25 07:15:45,677 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@27e1dc10 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 07:15:45, skipping insertion in model container
[2020-11-25 07:15:45,677 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 07:15:45,677 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ULMC_0x44f946f93272322341eeb42977b0b0ed090c8f9c_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 07:15:44" (3/6) ...
[2020-11-25 07:15:45,677 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@27e1dc10 and model type ULMC_0x44f946f93272322341eeb42977b0b0ed090c8f9c_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 07:15:45, skipping insertion in model container
[2020-11-25 07:15:45,677 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 07:15:45,677 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 07:15:44" (4/6) ...
[2020-11-25 07:15:45,677 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@27e1dc10 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 07:15:45, skipping insertion in model container
[2020-11-25 07:15:45,677 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 07:15:45,677 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 07:15:45" (5/6) ...
[2020-11-25 07:15:45,677 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@27e1dc10 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 07:15:45, skipping insertion in model container
[2020-11-25 07:15:45,678 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 07:15:45,678 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 07:15:45" (6/6) ...
[2020-11-25 07:15:45,679 INFO  L404   chiAutomizerObserver]: Analyzing ICFG ULMC_0x44f946f93272322341eeb42977b0b0ed090c8f9c_transfer-self.bpl_BEv2
[2020-11-25 07:15:45,706 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 07:15:45,707 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 07:15:45,707 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 07:15:45,707 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 07:15:45,707 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 07:15:45,707 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 07:15:45,707 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 07:15:45,707 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 07:15:45,707 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 07:15:45,733 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3114 states.
[2020-11-25 07:15:45,776 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 07:15:45,777 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:15:45,777 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:15:45,786 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:15:45,786 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:15:45,786 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 07:15:45,786 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3114 states.
[2020-11-25 07:15:45,805 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 07:15:45,805 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:15:45,805 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:15:45,807 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:15:45,807 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L3681]              assume null == 0;
[L3682]  CALL        call this := FreshRefGenerator__success();
[L1393]              havoc newRef;
[L1394]              assume Alloc[newRef] == false;
[L1395]              Alloc[newRef] := true;
[L1396]              assume newRef != null;
[L3682]  RET         call this := FreshRefGenerator__success();
[L3683]              assume now >= 0;
[L3684]              assume DType[this] == ULMC;
[L3685]              assume msgvalue_MSG == 0;
[L3686]              gas := gas - 53000;
[L3687]  CALL        call ULMC_ULMC(this, msgsender_MSG, msgvalue_MSG);
[L915]               havoc __exception;
[L916]               revert := false;
[L917]   COND FALSE  !(__exception)
[L938]   CALL        call ULMC_ULMC__success(this, msgsender_MSG, msgvalue_MSG);
[L2359]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1581]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1566]              assume msgsender_MSG != null;
[L1567]              Balance[this] := 0;
[L1581]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1582]  COND TRUE   revert
[L2359]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2360]  COND TRUE   revert
[L938]   RET         call ULMC_ULMC__success(this, msgsender_MSG, msgvalue_MSG);
[L939]               assume !revert && gas >= 0;
[L3687]  RET         call ULMC_ULMC(this, msgsender_MSG, msgvalue_MSG);
[L3688]              assume !revert && gas >= 0;

Loop:
[L3691]  CALL        call CorralChoice_ULMC(this);
[L3558]              havoc msgsender_MSG;
[L3559]              havoc msgvalue_MSG;
[L3560]              havoc choice;
[L3561]              havoc __ret_0_totalSupply;
[L3562]              havoc account_s236;
[L3563]              havoc __ret_0_balanceOf;
[L3564]              havoc recipient_s255;
[L3565]              havoc amount_s255;
[L3566]              havoc __ret_0_transfer;
[L3567]              havoc owner_s271;
[L3568]              havoc spender_s271;
[L3569]              havoc __ret_0_allowance;
[L3570]              havoc spender_s290;
[L3571]              havoc value_s290;
[L3572]              havoc __ret_0_approve;
[L3573]              havoc sender_s325;
[L3574]              havoc recipient_s325;
[L3575]              havoc amount_s325;
[L3576]              havoc __ret_0_transferFrom;
[L3577]              havoc spender_s352;
[L3578]              havoc addedValue_s352;
[L3579]              havoc __ret_0_increaseAllowance;
[L3580]              havoc spender_s379;
[L3581]              havoc subtractedValue_s379;
[L3582]              havoc __ret_0_decreaseAllowance;
[L3583]              havoc name_s622;
[L3584]              havoc symbol_s622;
[L3585]              havoc decimals_s622;
[L3586]              havoc __ret_0_name;
[L3587]              havoc __ret_0_symbol;
[L3588]              havoc __ret_0_decimals;
[L3589]              havoc tmpNow;
[L3590]              havoc gas;
[L3591]              assume gas > 4000000 && gas <= 8000000;
[L3592]              tmpNow := now;
[L3593]              havoc now;
[L3594]              assume now > tmpNow;
[L3595]              assume msgsender_MSG != null;
[L3596]              assume DType[msgsender_MSG] != SafeMath;
[L3597]              assume DType[msgsender_MSG] != IERC20;
[L3598]              assume DType[msgsender_MSG] != ERC20;
[L3599]              assume DType[msgsender_MSG] != ERC20Detailed;
[L3600]              assume DType[msgsender_MSG] != ULMC;
[L3601]              Alloc[msgsender_MSG] := true;
[L3602]  COND TRUE   choice == 11
[L3603]              gas := gas - 21000;
[L3604]  COND FALSE  !(gas >= 0)
[L3691]  RET         call CorralChoice_ULMC(this);

[2020-11-25 07:15:45,825 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:15:45,825 INFO  L82        PathProgramCache]: Analyzing trace with hash 1515639216, now seen corresponding path program 1 times
[2020-11-25 07:15:45,830 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:15:45,854 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:15:45,892 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 07:15:45,894 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 07:15:45,895 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 07:15:45,898 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 07:15:46,045 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 07:15:46,046 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 07:15:46,048 INFO  L87              Difference]: Start difference. First operand 3114 states. Second operand 4 states.
[2020-11-25 07:15:46,376 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:15:46,376 INFO  L93              Difference]: Finished difference Result 1798 states and 2077 transitions.
[2020-11-25 07:15:46,376 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 07:15:46,378 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1798 states and 2077 transitions.
[2020-11-25 07:15:46,390 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 07:15:46,414 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1798 states to 1798 states and 2077 transitions.
[2020-11-25 07:15:46,415 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 07:15:46,418 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 493
[2020-11-25 07:15:46,419 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1798 states and 2077 transitions.
[2020-11-25 07:15:46,425 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:15:46,425 INFO  L728         BuchiCegarLoop]: Abstraction has 1798 states and 2077 transitions.
[2020-11-25 07:15:46,446 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1798 states and 2077 transitions.
[2020-11-25 07:15:46,483 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1798 to 1798.
[2020-11-25 07:15:46,484 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1798 states.
[2020-11-25 07:15:46,489 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1798 states to 1798 states and 2077 transitions.
[2020-11-25 07:15:46,489 INFO  L751         BuchiCegarLoop]: Abstraction has 1798 states and 2077 transitions.
[2020-11-25 07:15:46,490 INFO  L631         BuchiCegarLoop]: Abstraction has 1798 states and 2077 transitions.
[2020-11-25 07:15:46,490 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 07:15:46,490 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1798 states and 2077 transitions.
[2020-11-25 07:15:46,495 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 07:15:46,495 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:15:46,495 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:15:46,497 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:15:46,497 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L3681]              assume null == 0;
[L3682]  CALL        call this := FreshRefGenerator__success();
[L1393]              havoc newRef;
[L1394]              assume Alloc[newRef] == false;
[L1395]              Alloc[newRef] := true;
[L1396]              assume newRef != null;
[L3682]  RET         call this := FreshRefGenerator__success();
[L3683]              assume now >= 0;
[L3684]              assume DType[this] == ULMC;
[L3685]              assume msgvalue_MSG == 0;
[L3686]              gas := gas - 53000;
[L3687]  CALL        call ULMC_ULMC(this, msgsender_MSG, msgvalue_MSG);
[L915]               havoc __exception;
[L916]               revert := false;
[L917]   COND FALSE  !(__exception)
[L938]   CALL        call ULMC_ULMC__success(this, msgsender_MSG, msgvalue_MSG);
[L2359]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1581]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1566]              assume msgsender_MSG != null;
[L1567]              Balance[this] := 0;
[L1581]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1582]  COND FALSE  !(revert)
[L2359]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2360]  COND TRUE   revert
[L938]   RET         call ULMC_ULMC__success(this, msgsender_MSG, msgvalue_MSG);
[L939]               assume !revert && gas >= 0;
[L3687]  RET         call ULMC_ULMC(this, msgsender_MSG, msgvalue_MSG);
[L3688]              assume !revert && gas >= 0;
[L3691]  CALL        call CorralChoice_ULMC(this);
[L3558]              havoc msgsender_MSG;
[L3559]              havoc msgvalue_MSG;
[L3560]              havoc choice;
[L3561]              havoc __ret_0_totalSupply;
[L3562]              havoc account_s236;
[L3563]              havoc __ret_0_balanceOf;
[L3564]              havoc recipient_s255;
[L3565]              havoc amount_s255;
[L3566]              havoc __ret_0_transfer;
[L3567]              havoc owner_s271;
[L3568]              havoc spender_s271;
[L3569]              havoc __ret_0_allowance;
[L3570]              havoc spender_s290;
[L3571]              havoc value_s290;
[L3572]              havoc __ret_0_approve;
[L3573]              havoc sender_s325;
[L3574]              havoc recipient_s325;
[L3575]              havoc amount_s325;
[L3576]              havoc __ret_0_transferFrom;
[L3577]              havoc spender_s352;
[L3578]              havoc addedValue_s352;
[L3579]              havoc __ret_0_increaseAllowance;
[L3580]              havoc spender_s379;
[L3581]              havoc subtractedValue_s379;
[L3582]              havoc __ret_0_decreaseAllowance;
[L3583]              havoc name_s622;
[L3584]              havoc symbol_s622;
[L3585]              havoc decimals_s622;
[L3586]              havoc __ret_0_name;
[L3587]              havoc __ret_0_symbol;
[L3588]              havoc __ret_0_decimals;
[L3589]              havoc tmpNow;
[L3590]              havoc gas;
[L3591]              assume gas > 4000000 && gas <= 8000000;
[L3592]              tmpNow := now;
[L3593]              havoc now;
[L3594]              assume now > tmpNow;
[L3595]              assume msgsender_MSG != null;
[L3596]              assume DType[msgsender_MSG] != SafeMath;
[L3597]              assume DType[msgsender_MSG] != IERC20;
[L3598]              assume DType[msgsender_MSG] != ERC20;
[L3599]              assume DType[msgsender_MSG] != ERC20Detailed;
[L3600]              assume DType[msgsender_MSG] != ULMC;
[L3601]              Alloc[msgsender_MSG] := true;
[L3602]  COND FALSE  !(choice == 11)
[L3608]  COND FALSE  !(choice == 10)
[L3614]  COND TRUE   choice == 9
[L3615]              gas := gas - 21000;
[L3616]  COND TRUE   gas >= 0
[L3617]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3618]              assume msgvalue_MSG == 0;
[L3619]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s255 && amount_s255 <= _balances_ERC20[this][msgsender_MSG]) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L353]               havoc __exception;
[L354]               revert := false;
[L355]   COND FALSE  !(__exception)
[L376]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L1682]  COND TRUE   DType[this] == ULMC
[L1683]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L1957]              __var_4 := null;
[L1958]  COND TRUE   !(sender_s435 != null)
[L1959]              revert := true;
[L1683]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L1684]  COND TRUE   revert
[L376]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L377]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L3619]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L3691]  RET         call CorralChoice_ULMC(this);

Loop:
[L3691]  CALL        call CorralChoice_ULMC(this);
[L3558]              havoc msgsender_MSG;
[L3559]              havoc msgvalue_MSG;
[L3560]              havoc choice;
[L3561]              havoc __ret_0_totalSupply;
[L3562]              havoc account_s236;
[L3563]              havoc __ret_0_balanceOf;
[L3564]              havoc recipient_s255;
[L3565]              havoc amount_s255;
[L3566]              havoc __ret_0_transfer;
[L3567]              havoc owner_s271;
[L3568]              havoc spender_s271;
[L3569]              havoc __ret_0_allowance;
[L3570]              havoc spender_s290;
[L3571]              havoc value_s290;
[L3572]              havoc __ret_0_approve;
[L3573]              havoc sender_s325;
[L3574]              havoc recipient_s325;
[L3575]              havoc amount_s325;
[L3576]              havoc __ret_0_transferFrom;
[L3577]              havoc spender_s352;
[L3578]              havoc addedValue_s352;
[L3579]              havoc __ret_0_increaseAllowance;
[L3580]              havoc spender_s379;
[L3581]              havoc subtractedValue_s379;
[L3582]              havoc __ret_0_decreaseAllowance;
[L3583]              havoc name_s622;
[L3584]              havoc symbol_s622;
[L3585]              havoc decimals_s622;
[L3586]              havoc __ret_0_name;
[L3587]              havoc __ret_0_symbol;
[L3588]              havoc __ret_0_decimals;
[L3589]              havoc tmpNow;
[L3590]              havoc gas;
[L3591]              assume gas > 4000000 && gas <= 8000000;
[L3592]              tmpNow := now;
[L3593]              havoc now;
[L3594]              assume now > tmpNow;
[L3595]              assume msgsender_MSG != null;
[L3596]              assume DType[msgsender_MSG] != SafeMath;
[L3597]              assume DType[msgsender_MSG] != IERC20;
[L3598]              assume DType[msgsender_MSG] != ERC20;
[L3599]              assume DType[msgsender_MSG] != ERC20Detailed;
[L3600]              assume DType[msgsender_MSG] != ULMC;
[L3601]              Alloc[msgsender_MSG] := true;
[L3602]  COND FALSE  !(choice == 11)
[L3608]  COND FALSE  !(choice == 10)
[L3614]  COND TRUE   choice == 9
[L3615]              gas := gas - 21000;
[L3616]  COND TRUE   gas >= 0
[L3617]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3618]              assume msgvalue_MSG == 0;
[L3619]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s255 && amount_s255 <= _balances_ERC20[this][msgsender_MSG]) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L353]               havoc __exception;
[L354]               revert := false;
[L355]   COND FALSE  !(__exception)
[L376]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L1682]  COND TRUE   DType[this] == ULMC
[L1683]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L1957]              __var_4 := null;
[L1958]  COND TRUE   !(sender_s435 != null)
[L1959]              revert := true;
[L1683]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L1684]  COND TRUE   revert
[L376]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L377]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L3619]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L3691]  RET         call CorralChoice_ULMC(this);

[2020-11-25 07:15:46,502 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:15:46,502 INFO  L82        PathProgramCache]: Analyzing trace with hash 141903831, now seen corresponding path program 1 times
[2020-11-25 07:15:46,504 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:15:46,513 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:15:46,535 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 07:15:46,535 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 07:15:46,535 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 07:15:46,537 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 07:15:46,537 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 07:15:46,537 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 07:15:46,537 INFO  L87              Difference]: Start difference. First operand 1798 states and 2077 transitions. cyclomatic complexity: 281 Second operand 3 states.
[2020-11-25 07:15:46,610 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:15:46,610 INFO  L93              Difference]: Finished difference Result 2396 states and 2799 transitions.
[2020-11-25 07:15:46,610 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 07:15:46,611 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2396 states and 2799 transitions.
[2020-11-25 07:15:46,623 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 07:15:46,635 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2396 states to 2396 states and 2799 transitions.
[2020-11-25 07:15:46,635 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 669
[2020-11-25 07:15:46,637 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 669
[2020-11-25 07:15:46,637 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2396 states and 2799 transitions.
[2020-11-25 07:15:46,641 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:15:46,641 INFO  L728         BuchiCegarLoop]: Abstraction has 2396 states and 2799 transitions.
[2020-11-25 07:15:46,644 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2396 states and 2799 transitions.
[2020-11-25 07:15:46,668 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2396 to 1990.
[2020-11-25 07:15:46,668 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1990 states.
[2020-11-25 07:15:46,672 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1990 states to 1990 states and 2307 transitions.
[2020-11-25 07:15:46,672 INFO  L751         BuchiCegarLoop]: Abstraction has 1990 states and 2307 transitions.
[2020-11-25 07:15:46,672 INFO  L631         BuchiCegarLoop]: Abstraction has 1990 states and 2307 transitions.
[2020-11-25 07:15:46,672 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 07:15:46,672 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1990 states and 2307 transitions.
[2020-11-25 07:15:46,678 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 07:15:46,678 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:15:46,678 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:15:46,680 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:15:46,681 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L3681]              assume null == 0;
[L3682]  CALL        call this := FreshRefGenerator__success();
[L1393]              havoc newRef;
[L1394]              assume Alloc[newRef] == false;
[L1395]              Alloc[newRef] := true;
[L1396]              assume newRef != null;
[L3682]  RET         call this := FreshRefGenerator__success();
[L3683]              assume now >= 0;
[L3684]              assume DType[this] == ULMC;
[L3685]              assume msgvalue_MSG == 0;
[L3686]              gas := gas - 53000;
[L3687]  CALL        call ULMC_ULMC(this, msgsender_MSG, msgvalue_MSG);
[L915]               havoc __exception;
[L916]               revert := false;
[L917]   COND FALSE  !(__exception)
[L938]   CALL        call ULMC_ULMC__success(this, msgsender_MSG, msgvalue_MSG);
[L2359]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1581]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1566]              assume msgsender_MSG != null;
[L1567]              Balance[this] := 0;
[L1581]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1582]  COND FALSE  !(revert)
[L2359]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2360]  COND FALSE  !(revert)
[L2363]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1627]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1581]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1566]              assume msgsender_MSG != null;
[L1567]              Balance[this] := 0;
[L1581]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1582]  COND FALSE  !(revert)
[L1627]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1628]  COND FALSE  !(revert)
[L1631]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1603]              assume msgsender_MSG != null;
[L1604]              Balance[this] := 0;
[L1605]              _balances_ERC20[this] := zeroRefintArr();
[L1606]              sum__balances0[this] := 0;
[L1607]              _allowances_ERC20[this] := zeroRefRefintArr();
[L1608]              sum__allowances1[this] := 0;
[L1609]              _totalSupply_ERC20[this] := 0;
[L1631]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1632]  COND FALSE  !(revert)
[L2363]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2364]  COND FALSE  !(revert)
[L2367]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 536458469, -382440921, 18);
[L2233]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1581]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1566]              assume msgsender_MSG != null;
[L1567]              Balance[this] := 0;
[L1581]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1582]  COND FALSE  !(revert)
[L2233]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2234]  COND FALSE  !(revert)
[L2237]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s622, symbol_s622, decimals_s622);
[L2208]              assume msgsender_MSG != null;
[L2209]              Balance[this] := 0;
[L2210]              _name_ERC20Detailed[this] := -930759658;
[L2211]              _symbol_ERC20Detailed[this] := -930759658;
[L2212]              _decimals_ERC20Detailed[this] := 0;
[L2214]              _name_ERC20Detailed[this] := name_s622;
[L2215]              _symbol_ERC20Detailed[this] := symbol_s622;
[L2216]              _decimals_ERC20Detailed[this] := decimals_s622;
[L2237]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s622, symbol_s622, decimals_s622);
[L2238]  COND FALSE  !(revert)
[L2367]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 536458469, -382440921, 18);
[L2368]  COND FALSE  !(revert)
[L2371]  CALL        call ULMC_ULMC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2311]              assume msgsender_MSG != null;
[L2312]              Balance[this] := 0;
[L2314]  COND TRUE   DType[this] == ULMC
[L2315]  CALL        call __var_18 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L2275]              __ret_0_ := _decimals_ERC20Detailed[this];
[L2315]  RET         call __var_18 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]  COND FALSE  !(revert)
[L2322]              __var_17 := __var_18 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2323]  COND TRUE   DType[this] == ULMC
[L2324]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_18 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2013]              __var_8 := null;
[L2014]  COND TRUE   !(account_s478 != null)
[L2015]              revert := true;
[L2324]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_18 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2325]  COND TRUE   revert
[L2371]  RET         call ULMC_ULMC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2372]  COND FALSE  !(revert)
[L938]   RET         call ULMC_ULMC__success(this, msgsender_MSG, msgvalue_MSG);
[L939]               assume !revert && gas >= 0;
[L3687]  RET         call ULMC_ULMC(this, msgsender_MSG, msgvalue_MSG);
[L3688]              assume !revert && gas >= 0;
[L3691]  CALL        call CorralChoice_ULMC(this);
[L3558]              havoc msgsender_MSG;
[L3559]              havoc msgvalue_MSG;
[L3560]              havoc choice;
[L3561]              havoc __ret_0_totalSupply;
[L3562]              havoc account_s236;
[L3563]              havoc __ret_0_balanceOf;
[L3564]              havoc recipient_s255;
[L3565]              havoc amount_s255;
[L3566]              havoc __ret_0_transfer;
[L3567]              havoc owner_s271;
[L3568]              havoc spender_s271;
[L3569]              havoc __ret_0_allowance;
[L3570]              havoc spender_s290;
[L3571]              havoc value_s290;
[L3572]              havoc __ret_0_approve;
[L3573]              havoc sender_s325;
[L3574]              havoc recipient_s325;
[L3575]              havoc amount_s325;
[L3576]              havoc __ret_0_transferFrom;
[L3577]              havoc spender_s352;
[L3578]              havoc addedValue_s352;
[L3579]              havoc __ret_0_increaseAllowance;
[L3580]              havoc spender_s379;
[L3581]              havoc subtractedValue_s379;
[L3582]              havoc __ret_0_decreaseAllowance;
[L3583]              havoc name_s622;
[L3584]              havoc symbol_s622;
[L3585]              havoc decimals_s622;
[L3586]              havoc __ret_0_name;
[L3587]              havoc __ret_0_symbol;
[L3588]              havoc __ret_0_decimals;
[L3589]              havoc tmpNow;
[L3590]              havoc gas;
[L3591]              assume gas > 4000000 && gas <= 8000000;
[L3592]              tmpNow := now;
[L3593]              havoc now;
[L3594]              assume now > tmpNow;
[L3595]              assume msgsender_MSG != null;
[L3596]              assume DType[msgsender_MSG] != SafeMath;
[L3597]              assume DType[msgsender_MSG] != IERC20;
[L3598]              assume DType[msgsender_MSG] != ERC20;
[L3599]              assume DType[msgsender_MSG] != ERC20Detailed;
[L3600]              assume DType[msgsender_MSG] != ULMC;
[L3601]              Alloc[msgsender_MSG] := true;
[L3602]  COND FALSE  !(choice == 11)
[L3608]  COND FALSE  !(choice == 10)
[L3614]  COND TRUE   choice == 9
[L3615]              gas := gas - 21000;
[L3616]  COND TRUE   gas >= 0
[L3617]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3618]              assume msgvalue_MSG == 0;
[L3619]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s255 && amount_s255 <= _balances_ERC20[this][msgsender_MSG]) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L353]               havoc __exception;
[L354]               revert := false;
[L355]   COND FALSE  !(__exception)
[L376]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L1682]  COND TRUE   DType[this] == ULMC
[L1683]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L1957]              __var_4 := null;
[L1958]  COND TRUE   !(sender_s435 != null)
[L1959]              revert := true;
[L1683]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L1684]  COND TRUE   revert
[L376]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L377]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L3619]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L3691]  RET         call CorralChoice_ULMC(this);

Loop:
[L3691]  CALL        call CorralChoice_ULMC(this);
[L3558]              havoc msgsender_MSG;
[L3559]              havoc msgvalue_MSG;
[L3560]              havoc choice;
[L3561]              havoc __ret_0_totalSupply;
[L3562]              havoc account_s236;
[L3563]              havoc __ret_0_balanceOf;
[L3564]              havoc recipient_s255;
[L3565]              havoc amount_s255;
[L3566]              havoc __ret_0_transfer;
[L3567]              havoc owner_s271;
[L3568]              havoc spender_s271;
[L3569]              havoc __ret_0_allowance;
[L3570]              havoc spender_s290;
[L3571]              havoc value_s290;
[L3572]              havoc __ret_0_approve;
[L3573]              havoc sender_s325;
[L3574]              havoc recipient_s325;
[L3575]              havoc amount_s325;
[L3576]              havoc __ret_0_transferFrom;
[L3577]              havoc spender_s352;
[L3578]              havoc addedValue_s352;
[L3579]              havoc __ret_0_increaseAllowance;
[L3580]              havoc spender_s379;
[L3581]              havoc subtractedValue_s379;
[L3582]              havoc __ret_0_decreaseAllowance;
[L3583]              havoc name_s622;
[L3584]              havoc symbol_s622;
[L3585]              havoc decimals_s622;
[L3586]              havoc __ret_0_name;
[L3587]              havoc __ret_0_symbol;
[L3588]              havoc __ret_0_decimals;
[L3589]              havoc tmpNow;
[L3590]              havoc gas;
[L3591]              assume gas > 4000000 && gas <= 8000000;
[L3592]              tmpNow := now;
[L3593]              havoc now;
[L3594]              assume now > tmpNow;
[L3595]              assume msgsender_MSG != null;
[L3596]              assume DType[msgsender_MSG] != SafeMath;
[L3597]              assume DType[msgsender_MSG] != IERC20;
[L3598]              assume DType[msgsender_MSG] != ERC20;
[L3599]              assume DType[msgsender_MSG] != ERC20Detailed;
[L3600]              assume DType[msgsender_MSG] != ULMC;
[L3601]              Alloc[msgsender_MSG] := true;
[L3602]  COND FALSE  !(choice == 11)
[L3608]  COND FALSE  !(choice == 10)
[L3614]  COND TRUE   choice == 9
[L3615]              gas := gas - 21000;
[L3616]  COND TRUE   gas >= 0
[L3617]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3618]              assume msgvalue_MSG == 0;
[L3619]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s255 && amount_s255 <= _balances_ERC20[this][msgsender_MSG]) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L353]               havoc __exception;
[L354]               revert := false;
[L355]   COND FALSE  !(__exception)
[L376]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L1682]  COND TRUE   DType[this] == ULMC
[L1683]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L1957]              __var_4 := null;
[L1958]  COND TRUE   !(sender_s435 != null)
[L1959]              revert := true;
[L1683]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L1684]  COND TRUE   revert
[L376]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L377]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L3619]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L3691]  RET         call CorralChoice_ULMC(this);

[2020-11-25 07:15:46,685 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:15:46,685 INFO  L82        PathProgramCache]: Analyzing trace with hash 1621794104, now seen corresponding path program 1 times
[2020-11-25 07:15:46,686 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:15:46,699 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:15:46,752 INFO  L134       CoverageAnalysis]: Checked inductivity of 30 backedges. 0 proven. 14 refuted. 0 times theorem prover too weak. 16 trivial. 0 not checked.
[2020-11-25 07:15:46,752 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 07:15:46,752 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 07:15:46,753 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 07:15:46,753 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 07:15:46,753 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 07:15:46,753 INFO  L87              Difference]: Start difference. First operand 1990 states and 2307 transitions. cyclomatic complexity: 319 Second operand 7 states.
[2020-11-25 07:15:46,794 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:15:46,794 INFO  L93              Difference]: Finished difference Result 1998 states and 2314 transitions.
[2020-11-25 07:15:46,794 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 07:15:46,795 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1998 states and 2314 transitions.
[2020-11-25 07:15:46,803 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 07:15:46,811 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1998 states to 1989 states and 2305 transitions.
[2020-11-25 07:15:46,812 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 549
[2020-11-25 07:15:46,812 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 549
[2020-11-25 07:15:46,812 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1989 states and 2305 transitions.
[2020-11-25 07:15:46,815 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:15:46,815 INFO  L728         BuchiCegarLoop]: Abstraction has 1989 states and 2305 transitions.
[2020-11-25 07:15:46,817 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1989 states and 2305 transitions.
[2020-11-25 07:15:46,835 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1989 to 1989.
[2020-11-25 07:15:46,835 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1989 states.
[2020-11-25 07:15:46,838 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1989 states to 1989 states and 2305 transitions.
[2020-11-25 07:15:46,838 INFO  L751         BuchiCegarLoop]: Abstraction has 1989 states and 2305 transitions.
[2020-11-25 07:15:46,839 INFO  L631         BuchiCegarLoop]: Abstraction has 1989 states and 2305 transitions.
[2020-11-25 07:15:46,839 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 07:15:46,839 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1989 states and 2305 transitions.
[2020-11-25 07:15:46,844 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 07:15:46,844 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:15:46,844 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:15:46,846 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:15:46,846 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L3681]              assume null == 0;
[L3682]  CALL        call this := FreshRefGenerator__success();
[L1393]              havoc newRef;
[L1394]              assume Alloc[newRef] == false;
[L1395]              Alloc[newRef] := true;
[L1396]              assume newRef != null;
[L3682]  RET         call this := FreshRefGenerator__success();
[L3683]              assume now >= 0;
[L3684]              assume DType[this] == ULMC;
[L3685]              assume msgvalue_MSG == 0;
[L3686]              gas := gas - 53000;
[L3687]  CALL        call ULMC_ULMC(this, msgsender_MSG, msgvalue_MSG);
[L915]               havoc __exception;
[L916]               revert := false;
[L917]   COND FALSE  !(__exception)
[L938]   CALL        call ULMC_ULMC__success(this, msgsender_MSG, msgvalue_MSG);
[L2359]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1581]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1566]              assume msgsender_MSG != null;
[L1567]              Balance[this] := 0;
[L1581]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1582]  COND FALSE  !(revert)
[L2359]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2360]  COND FALSE  !(revert)
[L2363]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1627]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1581]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1566]              assume msgsender_MSG != null;
[L1567]              Balance[this] := 0;
[L1581]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1582]  COND FALSE  !(revert)
[L1627]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1628]  COND FALSE  !(revert)
[L1631]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1603]              assume msgsender_MSG != null;
[L1604]              Balance[this] := 0;
[L1605]              _balances_ERC20[this] := zeroRefintArr();
[L1606]              sum__balances0[this] := 0;
[L1607]              _allowances_ERC20[this] := zeroRefRefintArr();
[L1608]              sum__allowances1[this] := 0;
[L1609]              _totalSupply_ERC20[this] := 0;
[L1631]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1632]  COND FALSE  !(revert)
[L2363]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2364]  COND FALSE  !(revert)
[L2367]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 536458469, -382440921, 18);
[L2233]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1581]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1566]              assume msgsender_MSG != null;
[L1567]              Balance[this] := 0;
[L1581]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1582]  COND FALSE  !(revert)
[L2233]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2234]  COND FALSE  !(revert)
[L2237]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s622, symbol_s622, decimals_s622);
[L2208]              assume msgsender_MSG != null;
[L2209]              Balance[this] := 0;
[L2210]              _name_ERC20Detailed[this] := -930759658;
[L2211]              _symbol_ERC20Detailed[this] := -930759658;
[L2212]              _decimals_ERC20Detailed[this] := 0;
[L2214]              _name_ERC20Detailed[this] := name_s622;
[L2215]              _symbol_ERC20Detailed[this] := symbol_s622;
[L2216]              _decimals_ERC20Detailed[this] := decimals_s622;
[L2237]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s622, symbol_s622, decimals_s622);
[L2238]  COND FALSE  !(revert)
[L2367]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 536458469, -382440921, 18);
[L2368]  COND FALSE  !(revert)
[L2371]  CALL        call ULMC_ULMC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2311]              assume msgsender_MSG != null;
[L2312]              Balance[this] := 0;
[L2314]  COND TRUE   DType[this] == ULMC
[L2315]  CALL        call __var_18 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L2275]              __ret_0_ := _decimals_ERC20Detailed[this];
[L2315]  RET         call __var_18 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]  COND FALSE  !(revert)
[L2322]              __var_17 := __var_18 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2323]  COND TRUE   DType[this] == ULMC
[L2324]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_18 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2013]              __var_8 := null;
[L2014]  COND FALSE  !(!(account_s478 != null))
[L2018]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s478);
[L1446]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1447]  COND TRUE   !(c_s26 >= a_s26)
[L1448]              revert := true;
[L2018]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s478);
[L2019]  COND TRUE   revert
[L2324]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_18 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2325]  COND TRUE   revert
[L2371]  RET         call ULMC_ULMC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2372]  COND FALSE  !(revert)
[L938]   RET         call ULMC_ULMC__success(this, msgsender_MSG, msgvalue_MSG);
[L939]               assume !revert && gas >= 0;
[L3687]  RET         call ULMC_ULMC(this, msgsender_MSG, msgvalue_MSG);
[L3688]              assume !revert && gas >= 0;
[L3691]  CALL        call CorralChoice_ULMC(this);
[L3558]              havoc msgsender_MSG;
[L3559]              havoc msgvalue_MSG;
[L3560]              havoc choice;
[L3561]              havoc __ret_0_totalSupply;
[L3562]              havoc account_s236;
[L3563]              havoc __ret_0_balanceOf;
[L3564]              havoc recipient_s255;
[L3565]              havoc amount_s255;
[L3566]              havoc __ret_0_transfer;
[L3567]              havoc owner_s271;
[L3568]              havoc spender_s271;
[L3569]              havoc __ret_0_allowance;
[L3570]              havoc spender_s290;
[L3571]              havoc value_s290;
[L3572]              havoc __ret_0_approve;
[L3573]              havoc sender_s325;
[L3574]              havoc recipient_s325;
[L3575]              havoc amount_s325;
[L3576]              havoc __ret_0_transferFrom;
[L3577]              havoc spender_s352;
[L3578]              havoc addedValue_s352;
[L3579]              havoc __ret_0_increaseAllowance;
[L3580]              havoc spender_s379;
[L3581]              havoc subtractedValue_s379;
[L3582]              havoc __ret_0_decreaseAllowance;
[L3583]              havoc name_s622;
[L3584]              havoc symbol_s622;
[L3585]              havoc decimals_s622;
[L3586]              havoc __ret_0_name;
[L3587]              havoc __ret_0_symbol;
[L3588]              havoc __ret_0_decimals;
[L3589]              havoc tmpNow;
[L3590]              havoc gas;
[L3591]              assume gas > 4000000 && gas <= 8000000;
[L3592]              tmpNow := now;
[L3593]              havoc now;
[L3594]              assume now > tmpNow;
[L3595]              assume msgsender_MSG != null;
[L3596]              assume DType[msgsender_MSG] != SafeMath;
[L3597]              assume DType[msgsender_MSG] != IERC20;
[L3598]              assume DType[msgsender_MSG] != ERC20;
[L3599]              assume DType[msgsender_MSG] != ERC20Detailed;
[L3600]              assume DType[msgsender_MSG] != ULMC;
[L3601]              Alloc[msgsender_MSG] := true;
[L3602]  COND FALSE  !(choice == 11)
[L3608]  COND FALSE  !(choice == 10)
[L3614]  COND TRUE   choice == 9
[L3615]              gas := gas - 21000;
[L3616]  COND TRUE   gas >= 0
[L3617]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3618]              assume msgvalue_MSG == 0;
[L3619]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s255 && amount_s255 <= _balances_ERC20[this][msgsender_MSG]) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L353]               havoc __exception;
[L354]               revert := false;
[L355]   COND FALSE  !(__exception)
[L376]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L1682]  COND TRUE   DType[this] == ULMC
[L1683]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L1957]              __var_4 := null;
[L1958]  COND TRUE   !(sender_s435 != null)
[L1959]              revert := true;
[L1683]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L1684]  COND TRUE   revert
[L376]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L377]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L3619]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L3691]  RET         call CorralChoice_ULMC(this);

Loop:
[L3691]  CALL        call CorralChoice_ULMC(this);
[L3558]              havoc msgsender_MSG;
[L3559]              havoc msgvalue_MSG;
[L3560]              havoc choice;
[L3561]              havoc __ret_0_totalSupply;
[L3562]              havoc account_s236;
[L3563]              havoc __ret_0_balanceOf;
[L3564]              havoc recipient_s255;
[L3565]              havoc amount_s255;
[L3566]              havoc __ret_0_transfer;
[L3567]              havoc owner_s271;
[L3568]              havoc spender_s271;
[L3569]              havoc __ret_0_allowance;
[L3570]              havoc spender_s290;
[L3571]              havoc value_s290;
[L3572]              havoc __ret_0_approve;
[L3573]              havoc sender_s325;
[L3574]              havoc recipient_s325;
[L3575]              havoc amount_s325;
[L3576]              havoc __ret_0_transferFrom;
[L3577]              havoc spender_s352;
[L3578]              havoc addedValue_s352;
[L3579]              havoc __ret_0_increaseAllowance;
[L3580]              havoc spender_s379;
[L3581]              havoc subtractedValue_s379;
[L3582]              havoc __ret_0_decreaseAllowance;
[L3583]              havoc name_s622;
[L3584]              havoc symbol_s622;
[L3585]              havoc decimals_s622;
[L3586]              havoc __ret_0_name;
[L3587]              havoc __ret_0_symbol;
[L3588]              havoc __ret_0_decimals;
[L3589]              havoc tmpNow;
[L3590]              havoc gas;
[L3591]              assume gas > 4000000 && gas <= 8000000;
[L3592]              tmpNow := now;
[L3593]              havoc now;
[L3594]              assume now > tmpNow;
[L3595]              assume msgsender_MSG != null;
[L3596]              assume DType[msgsender_MSG] != SafeMath;
[L3597]              assume DType[msgsender_MSG] != IERC20;
[L3598]              assume DType[msgsender_MSG] != ERC20;
[L3599]              assume DType[msgsender_MSG] != ERC20Detailed;
[L3600]              assume DType[msgsender_MSG] != ULMC;
[L3601]              Alloc[msgsender_MSG] := true;
[L3602]  COND FALSE  !(choice == 11)
[L3608]  COND FALSE  !(choice == 10)
[L3614]  COND TRUE   choice == 9
[L3615]              gas := gas - 21000;
[L3616]  COND TRUE   gas >= 0
[L3617]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3618]              assume msgvalue_MSG == 0;
[L3619]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s255 && amount_s255 <= _balances_ERC20[this][msgsender_MSG]) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L353]               havoc __exception;
[L354]               revert := false;
[L355]   COND FALSE  !(__exception)
[L376]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L1682]  COND TRUE   DType[this] == ULMC
[L1683]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L1957]              __var_4 := null;
[L1958]  COND TRUE   !(sender_s435 != null)
[L1959]              revert := true;
[L1683]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L1684]  COND TRUE   revert
[L376]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L377]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L3619]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L3691]  RET         call CorralChoice_ULMC(this);

[2020-11-25 07:15:46,850 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:15:46,850 INFO  L82        PathProgramCache]: Analyzing trace with hash 558120564, now seen corresponding path program 1 times
[2020-11-25 07:15:46,851 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:15:46,859 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:15:46,895 INFO  L134       CoverageAnalysis]: Checked inductivity of 30 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 30 trivial. 0 not checked.
[2020-11-25 07:15:46,895 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 07:15:46,895 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 07:15:46,896 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 07:15:46,896 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 07:15:46,896 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 07:15:46,896 INFO  L87              Difference]: Start difference. First operand 1989 states and 2305 transitions. cyclomatic complexity: 318 Second operand 3 states.
[2020-11-25 07:15:46,957 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:15:46,957 INFO  L93              Difference]: Finished difference Result 2395 states and 2709 transitions.
[2020-11-25 07:15:46,958 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 07:15:46,959 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2395 states and 2709 transitions.
[2020-11-25 07:15:46,973 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 07:15:46,982 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2395 states to 2222 states and 2505 transitions.
[2020-11-25 07:15:46,982 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 619
[2020-11-25 07:15:46,983 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 637
[2020-11-25 07:15:46,983 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2222 states and 2505 transitions.
[2020-11-25 07:15:46,986 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:15:46,987 INFO  L728         BuchiCegarLoop]: Abstraction has 2222 states and 2505 transitions.
[2020-11-25 07:15:46,989 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2222 states and 2505 transitions.
[2020-11-25 07:15:47,008 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2222 to 1868.
[2020-11-25 07:15:47,008 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1868 states.
[2020-11-25 07:15:47,011 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1868 states to 1868 states and 2065 transitions.
[2020-11-25 07:15:47,012 INFO  L751         BuchiCegarLoop]: Abstraction has 1868 states and 2065 transitions.
[2020-11-25 07:15:47,012 INFO  L631         BuchiCegarLoop]: Abstraction has 1868 states and 2065 transitions.
[2020-11-25 07:15:47,012 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 07:15:47,012 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1868 states and 2065 transitions.
[2020-11-25 07:15:47,016 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 07:15:47,016 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:15:47,016 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:15:47,018 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:15:47,018 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L3681]              assume null == 0;
[L3682]  CALL        call this := FreshRefGenerator__success();
[L1393]              havoc newRef;
[L1394]              assume Alloc[newRef] == false;
[L1395]              Alloc[newRef] := true;
[L1396]              assume newRef != null;
[L3682]  RET         call this := FreshRefGenerator__success();
[L3683]              assume now >= 0;
[L3684]              assume DType[this] == ULMC;
[L3685]              assume msgvalue_MSG == 0;
[L3686]              gas := gas - 53000;
[L3687]  CALL        call ULMC_ULMC(this, msgsender_MSG, msgvalue_MSG);
[L915]               havoc __exception;
[L916]               revert := false;
[L917]   COND FALSE  !(__exception)
[L938]   CALL        call ULMC_ULMC__success(this, msgsender_MSG, msgvalue_MSG);
[L2359]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1581]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1566]              assume msgsender_MSG != null;
[L1567]              Balance[this] := 0;
[L1581]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1582]  COND FALSE  !(revert)
[L2359]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2360]  COND FALSE  !(revert)
[L2363]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1627]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1581]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1566]              assume msgsender_MSG != null;
[L1567]              Balance[this] := 0;
[L1581]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1582]  COND FALSE  !(revert)
[L1627]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1628]  COND FALSE  !(revert)
[L1631]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1603]              assume msgsender_MSG != null;
[L1604]              Balance[this] := 0;
[L1605]              _balances_ERC20[this] := zeroRefintArr();
[L1606]              sum__balances0[this] := 0;
[L1607]              _allowances_ERC20[this] := zeroRefRefintArr();
[L1608]              sum__allowances1[this] := 0;
[L1609]              _totalSupply_ERC20[this] := 0;
[L1631]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1632]  COND FALSE  !(revert)
[L2363]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2364]  COND FALSE  !(revert)
[L2367]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 536458469, -382440921, 18);
[L2233]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1581]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1566]              assume msgsender_MSG != null;
[L1567]              Balance[this] := 0;
[L1581]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1582]  COND FALSE  !(revert)
[L2233]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2234]  COND FALSE  !(revert)
[L2237]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s622, symbol_s622, decimals_s622);
[L2208]              assume msgsender_MSG != null;
[L2209]              Balance[this] := 0;
[L2210]              _name_ERC20Detailed[this] := -930759658;
[L2211]              _symbol_ERC20Detailed[this] := -930759658;
[L2212]              _decimals_ERC20Detailed[this] := 0;
[L2214]              _name_ERC20Detailed[this] := name_s622;
[L2215]              _symbol_ERC20Detailed[this] := symbol_s622;
[L2216]              _decimals_ERC20Detailed[this] := decimals_s622;
[L2237]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s622, symbol_s622, decimals_s622);
[L2238]  COND FALSE  !(revert)
[L2367]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 536458469, -382440921, 18);
[L2368]  COND FALSE  !(revert)
[L2371]  CALL        call ULMC_ULMC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2311]              assume msgsender_MSG != null;
[L2312]              Balance[this] := 0;
[L2314]  COND TRUE   DType[this] == ULMC
[L2315]  CALL        call __var_18 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L2275]              __ret_0_ := _decimals_ERC20Detailed[this];
[L2315]  RET         call __var_18 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]  COND FALSE  !(revert)
[L2322]              __var_17 := __var_18 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2323]  COND TRUE   DType[this] == ULMC
[L2324]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_18 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2013]              __var_8 := null;
[L2014]  COND FALSE  !(!(account_s478 != null))
[L2018]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s478);
[L1446]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1447]  COND FALSE  !(!(c_s26 >= a_s26))
[L1451]              __ret_0_ := c_s26;
[L2018]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s478);
[L2019]  COND FALSE  !(revert)
[L2022]              _totalSupply_ERC20[this] := __var_9;
[L2023]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s478], amount_s478);
[L1446]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1447]  COND FALSE  !(!(c_s26 >= a_s26))
[L1451]              __ret_0_ := c_s26;
[L2023]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s478], amount_s478);
[L2024]  COND FALSE  !(revert)
[L2027]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s478];
[L2028]              _balances_ERC20[this][account_s478] := __var_10;
[L2029]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s478];
[L2030]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2324]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_18 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2325]  COND FALSE  !(revert)
[L2371]  RET         call ULMC_ULMC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2372]  COND FALSE  !(revert)
[L938]   RET         call ULMC_ULMC__success(this, msgsender_MSG, msgvalue_MSG);
[L939]               assume !revert && gas >= 0;
[L3687]  RET         call ULMC_ULMC(this, msgsender_MSG, msgvalue_MSG);
[L3688]              assume !revert && gas >= 0;
[L3691]  CALL        call CorralChoice_ULMC(this);
[L3558]              havoc msgsender_MSG;
[L3559]              havoc msgvalue_MSG;
[L3560]              havoc choice;
[L3561]              havoc __ret_0_totalSupply;
[L3562]              havoc account_s236;
[L3563]              havoc __ret_0_balanceOf;
[L3564]              havoc recipient_s255;
[L3565]              havoc amount_s255;
[L3566]              havoc __ret_0_transfer;
[L3567]              havoc owner_s271;
[L3568]              havoc spender_s271;
[L3569]              havoc __ret_0_allowance;
[L3570]              havoc spender_s290;
[L3571]              havoc value_s290;
[L3572]              havoc __ret_0_approve;
[L3573]              havoc sender_s325;
[L3574]              havoc recipient_s325;
[L3575]              havoc amount_s325;
[L3576]              havoc __ret_0_transferFrom;
[L3577]              havoc spender_s352;
[L3578]              havoc addedValue_s352;
[L3579]              havoc __ret_0_increaseAllowance;
[L3580]              havoc spender_s379;
[L3581]              havoc subtractedValue_s379;
[L3582]              havoc __ret_0_decreaseAllowance;
[L3583]              havoc name_s622;
[L3584]              havoc symbol_s622;
[L3585]              havoc decimals_s622;
[L3586]              havoc __ret_0_name;
[L3587]              havoc __ret_0_symbol;
[L3588]              havoc __ret_0_decimals;
[L3589]              havoc tmpNow;
[L3590]              havoc gas;
[L3591]              assume gas > 4000000 && gas <= 8000000;
[L3592]              tmpNow := now;
[L3593]              havoc now;
[L3594]              assume now > tmpNow;
[L3595]              assume msgsender_MSG != null;
[L3596]              assume DType[msgsender_MSG] != SafeMath;
[L3597]              assume DType[msgsender_MSG] != IERC20;
[L3598]              assume DType[msgsender_MSG] != ERC20;
[L3599]              assume DType[msgsender_MSG] != ERC20Detailed;
[L3600]              assume DType[msgsender_MSG] != ULMC;
[L3601]              Alloc[msgsender_MSG] := true;
[L3602]  COND FALSE  !(choice == 11)
[L3608]  COND FALSE  !(choice == 10)
[L3614]  COND TRUE   choice == 9
[L3615]              gas := gas - 21000;
[L3616]  COND TRUE   gas >= 0
[L3617]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3618]              assume msgvalue_MSG == 0;
[L3619]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s255 && amount_s255 <= _balances_ERC20[this][msgsender_MSG]) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L353]               havoc __exception;
[L354]               revert := false;
[L355]   COND TRUE   __exception
[L356]               __tmp__Balance := Balance;
[L357]               __tmp__DType := DType;
[L358]               __tmp__Alloc := Alloc;
[L359]               __tmp__balance_ADDR := balance_ADDR;
[L360]               __tmp__M_Ref_int := M_Ref_int;
[L361]               __tmp__sum__balances0 := sum__balances0;
[L362]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L363]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L364]               __tmp__sum__allowances1 := sum__allowances1;
[L365]               __tmp__Length := Length;
[L366]               __tmp__now := now;
[L367]               __tmp___balances_ERC20 := _balances_ERC20;
[L368]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L369]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L370]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L371]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L372]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L373]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L1663]  COND TRUE   __tmp__DType[this] == ULMC
[L1664]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L1925]              __var_4 := null;
[L1926]  COND TRUE   !(sender_s435 != null)
[L1927]              revert := true;
[L1664]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L1665]  COND TRUE   revert
[L373]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L374]               assume revert || gas < 0;
[L3619]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L3691]  RET         call CorralChoice_ULMC(this);

Loop:
[L3691]  CALL        call CorralChoice_ULMC(this);
[L3558]              havoc msgsender_MSG;
[L3559]              havoc msgvalue_MSG;
[L3560]              havoc choice;
[L3561]              havoc __ret_0_totalSupply;
[L3562]              havoc account_s236;
[L3563]              havoc __ret_0_balanceOf;
[L3564]              havoc recipient_s255;
[L3565]              havoc amount_s255;
[L3566]              havoc __ret_0_transfer;
[L3567]              havoc owner_s271;
[L3568]              havoc spender_s271;
[L3569]              havoc __ret_0_allowance;
[L3570]              havoc spender_s290;
[L3571]              havoc value_s290;
[L3572]              havoc __ret_0_approve;
[L3573]              havoc sender_s325;
[L3574]              havoc recipient_s325;
[L3575]              havoc amount_s325;
[L3576]              havoc __ret_0_transferFrom;
[L3577]              havoc spender_s352;
[L3578]              havoc addedValue_s352;
[L3579]              havoc __ret_0_increaseAllowance;
[L3580]              havoc spender_s379;
[L3581]              havoc subtractedValue_s379;
[L3582]              havoc __ret_0_decreaseAllowance;
[L3583]              havoc name_s622;
[L3584]              havoc symbol_s622;
[L3585]              havoc decimals_s622;
[L3586]              havoc __ret_0_name;
[L3587]              havoc __ret_0_symbol;
[L3588]              havoc __ret_0_decimals;
[L3589]              havoc tmpNow;
[L3590]              havoc gas;
[L3591]              assume gas > 4000000 && gas <= 8000000;
[L3592]              tmpNow := now;
[L3593]              havoc now;
[L3594]              assume now > tmpNow;
[L3595]              assume msgsender_MSG != null;
[L3596]              assume DType[msgsender_MSG] != SafeMath;
[L3597]              assume DType[msgsender_MSG] != IERC20;
[L3598]              assume DType[msgsender_MSG] != ERC20;
[L3599]              assume DType[msgsender_MSG] != ERC20Detailed;
[L3600]              assume DType[msgsender_MSG] != ULMC;
[L3601]              Alloc[msgsender_MSG] := true;
[L3602]  COND FALSE  !(choice == 11)
[L3608]  COND FALSE  !(choice == 10)
[L3614]  COND TRUE   choice == 9
[L3615]              gas := gas - 21000;
[L3616]  COND TRUE   gas >= 0
[L3617]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3618]              assume msgvalue_MSG == 0;
[L3619]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s255 && amount_s255 <= _balances_ERC20[this][msgsender_MSG]) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L353]               havoc __exception;
[L354]               revert := false;
[L355]   COND TRUE   __exception
[L356]               __tmp__Balance := Balance;
[L357]               __tmp__DType := DType;
[L358]               __tmp__Alloc := Alloc;
[L359]               __tmp__balance_ADDR := balance_ADDR;
[L360]               __tmp__M_Ref_int := M_Ref_int;
[L361]               __tmp__sum__balances0 := sum__balances0;
[L362]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L363]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L364]               __tmp__sum__allowances1 := sum__allowances1;
[L365]               __tmp__Length := Length;
[L366]               __tmp__now := now;
[L367]               __tmp___balances_ERC20 := _balances_ERC20;
[L368]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L369]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L370]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L371]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L372]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L373]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L1663]  COND TRUE   __tmp__DType[this] == ULMC
[L1664]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L1925]              __var_4 := null;
[L1926]  COND TRUE   !(sender_s435 != null)
[L1927]              revert := true;
[L1664]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L1665]  COND TRUE   revert
[L373]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L374]               assume revert || gas < 0;
[L3619]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L3691]  RET         call CorralChoice_ULMC(this);

[2020-11-25 07:15:47,021 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:15:47,021 INFO  L82        PathProgramCache]: Analyzing trace with hash 80645540, now seen corresponding path program 1 times
[2020-11-25 07:15:47,022 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:15:47,035 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:15:47,124 INFO  L134       CoverageAnalysis]: Checked inductivity of 35 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 35 trivial. 0 not checked.
[2020-11-25 07:15:47,124 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 07:15:47,124 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 07:15:47,125 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 07:15:47,125 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 07:15:47,125 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 07:15:47,125 INFO  L87              Difference]: Start difference. First operand 1868 states and 2065 transitions. cyclomatic complexity: 199 Second operand 6 states.
[2020-11-25 07:15:47,164 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:15:47,164 INFO  L93              Difference]: Finished difference Result 1892 states and 2093 transitions.
[2020-11-25 07:15:47,164 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 07:15:47,164 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1892 states and 2093 transitions.
[2020-11-25 07:15:47,169 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 07:15:47,174 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1892 states to 1872 states and 2071 transitions.
[2020-11-25 07:15:47,175 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 539
[2020-11-25 07:15:47,175 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 539
[2020-11-25 07:15:47,175 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1872 states and 2071 transitions.
[2020-11-25 07:15:47,177 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:15:47,177 INFO  L728         BuchiCegarLoop]: Abstraction has 1872 states and 2071 transitions.
[2020-11-25 07:15:47,179 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1872 states and 2071 transitions.
[2020-11-25 07:15:47,193 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1872 to 1872.
[2020-11-25 07:15:47,193 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1872 states.
[2020-11-25 07:15:47,196 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1872 states to 1872 states and 2071 transitions.
[2020-11-25 07:15:47,196 INFO  L751         BuchiCegarLoop]: Abstraction has 1872 states and 2071 transitions.
[2020-11-25 07:15:47,196 INFO  L631         BuchiCegarLoop]: Abstraction has 1872 states and 2071 transitions.
[2020-11-25 07:15:47,196 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 07:15:47,196 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1872 states and 2071 transitions.
[2020-11-25 07:15:47,199 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 07:15:47,199 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:15:47,199 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:15:47,201 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:15:47,201 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L3681]              assume null == 0;
[L3682]  CALL        call this := FreshRefGenerator__success();
[L1393]              havoc newRef;
[L1394]              assume Alloc[newRef] == false;
[L1395]              Alloc[newRef] := true;
[L1396]              assume newRef != null;
[L3682]  RET         call this := FreshRefGenerator__success();
[L3683]              assume now >= 0;
[L3684]              assume DType[this] == ULMC;
[L3685]              assume msgvalue_MSG == 0;
[L3686]              gas := gas - 53000;
[L3687]  CALL        call ULMC_ULMC(this, msgsender_MSG, msgvalue_MSG);
[L915]               havoc __exception;
[L916]               revert := false;
[L917]   COND FALSE  !(__exception)
[L938]   CALL        call ULMC_ULMC__success(this, msgsender_MSG, msgvalue_MSG);
[L2359]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1581]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1566]              assume msgsender_MSG != null;
[L1567]              Balance[this] := 0;
[L1581]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1582]  COND FALSE  !(revert)
[L2359]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2360]  COND FALSE  !(revert)
[L2363]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1627]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1581]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1566]              assume msgsender_MSG != null;
[L1567]              Balance[this] := 0;
[L1581]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1582]  COND FALSE  !(revert)
[L1627]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1628]  COND FALSE  !(revert)
[L1631]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1603]              assume msgsender_MSG != null;
[L1604]              Balance[this] := 0;
[L1605]              _balances_ERC20[this] := zeroRefintArr();
[L1606]              sum__balances0[this] := 0;
[L1607]              _allowances_ERC20[this] := zeroRefRefintArr();
[L1608]              sum__allowances1[this] := 0;
[L1609]              _totalSupply_ERC20[this] := 0;
[L1631]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1632]  COND FALSE  !(revert)
[L2363]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2364]  COND FALSE  !(revert)
[L2367]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 536458469, -382440921, 18);
[L2233]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1581]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1566]              assume msgsender_MSG != null;
[L1567]              Balance[this] := 0;
[L1581]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1582]  COND FALSE  !(revert)
[L2233]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2234]  COND FALSE  !(revert)
[L2237]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s622, symbol_s622, decimals_s622);
[L2208]              assume msgsender_MSG != null;
[L2209]              Balance[this] := 0;
[L2210]              _name_ERC20Detailed[this] := -930759658;
[L2211]              _symbol_ERC20Detailed[this] := -930759658;
[L2212]              _decimals_ERC20Detailed[this] := 0;
[L2214]              _name_ERC20Detailed[this] := name_s622;
[L2215]              _symbol_ERC20Detailed[this] := symbol_s622;
[L2216]              _decimals_ERC20Detailed[this] := decimals_s622;
[L2237]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s622, symbol_s622, decimals_s622);
[L2238]  COND FALSE  !(revert)
[L2367]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 536458469, -382440921, 18);
[L2368]  COND FALSE  !(revert)
[L2371]  CALL        call ULMC_ULMC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2311]              assume msgsender_MSG != null;
[L2312]              Balance[this] := 0;
[L2314]  COND TRUE   DType[this] == ULMC
[L2315]  CALL        call __var_18 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L2275]              __ret_0_ := _decimals_ERC20Detailed[this];
[L2315]  RET         call __var_18 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]  COND FALSE  !(revert)
[L2322]              __var_17 := __var_18 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2323]  COND TRUE   DType[this] == ULMC
[L2324]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_18 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2013]              __var_8 := null;
[L2014]  COND FALSE  !(!(account_s478 != null))
[L2018]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s478);
[L1446]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1447]  COND FALSE  !(!(c_s26 >= a_s26))
[L1451]              __ret_0_ := c_s26;
[L2018]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s478);
[L2019]  COND FALSE  !(revert)
[L2022]              _totalSupply_ERC20[this] := __var_9;
[L2023]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s478], amount_s478);
[L1446]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1447]  COND FALSE  !(!(c_s26 >= a_s26))
[L1451]              __ret_0_ := c_s26;
[L2023]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s478], amount_s478);
[L2024]  COND FALSE  !(revert)
[L2027]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s478];
[L2028]              _balances_ERC20[this][account_s478] := __var_10;
[L2029]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s478];
[L2030]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2324]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_18 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2325]  COND FALSE  !(revert)
[L2371]  RET         call ULMC_ULMC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2372]  COND FALSE  !(revert)
[L938]   RET         call ULMC_ULMC__success(this, msgsender_MSG, msgvalue_MSG);
[L939]               assume !revert && gas >= 0;
[L3687]  RET         call ULMC_ULMC(this, msgsender_MSG, msgvalue_MSG);
[L3688]              assume !revert && gas >= 0;
[L3691]  CALL        call CorralChoice_ULMC(this);
[L3558]              havoc msgsender_MSG;
[L3559]              havoc msgvalue_MSG;
[L3560]              havoc choice;
[L3561]              havoc __ret_0_totalSupply;
[L3562]              havoc account_s236;
[L3563]              havoc __ret_0_balanceOf;
[L3564]              havoc recipient_s255;
[L3565]              havoc amount_s255;
[L3566]              havoc __ret_0_transfer;
[L3567]              havoc owner_s271;
[L3568]              havoc spender_s271;
[L3569]              havoc __ret_0_allowance;
[L3570]              havoc spender_s290;
[L3571]              havoc value_s290;
[L3572]              havoc __ret_0_approve;
[L3573]              havoc sender_s325;
[L3574]              havoc recipient_s325;
[L3575]              havoc amount_s325;
[L3576]              havoc __ret_0_transferFrom;
[L3577]              havoc spender_s352;
[L3578]              havoc addedValue_s352;
[L3579]              havoc __ret_0_increaseAllowance;
[L3580]              havoc spender_s379;
[L3581]              havoc subtractedValue_s379;
[L3582]              havoc __ret_0_decreaseAllowance;
[L3583]              havoc name_s622;
[L3584]              havoc symbol_s622;
[L3585]              havoc decimals_s622;
[L3586]              havoc __ret_0_name;
[L3587]              havoc __ret_0_symbol;
[L3588]              havoc __ret_0_decimals;
[L3589]              havoc tmpNow;
[L3590]              havoc gas;
[L3591]              assume gas > 4000000 && gas <= 8000000;
[L3592]              tmpNow := now;
[L3593]              havoc now;
[L3594]              assume now > tmpNow;
[L3595]              assume msgsender_MSG != null;
[L3596]              assume DType[msgsender_MSG] != SafeMath;
[L3597]              assume DType[msgsender_MSG] != IERC20;
[L3598]              assume DType[msgsender_MSG] != ERC20;
[L3599]              assume DType[msgsender_MSG] != ERC20Detailed;
[L3600]              assume DType[msgsender_MSG] != ULMC;
[L3601]              Alloc[msgsender_MSG] := true;
[L3602]  COND FALSE  !(choice == 11)
[L3608]  COND FALSE  !(choice == 10)
[L3614]  COND TRUE   choice == 9
[L3615]              gas := gas - 21000;
[L3616]  COND TRUE   gas >= 0
[L3617]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3618]              assume msgvalue_MSG == 0;
[L3619]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s255 && amount_s255 <= _balances_ERC20[this][msgsender_MSG]) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L353]               havoc __exception;
[L354]               revert := false;
[L355]   COND TRUE   __exception
[L356]               __tmp__Balance := Balance;
[L357]               __tmp__DType := DType;
[L358]               __tmp__Alloc := Alloc;
[L359]               __tmp__balance_ADDR := balance_ADDR;
[L360]               __tmp__M_Ref_int := M_Ref_int;
[L361]               __tmp__sum__balances0 := sum__balances0;
[L362]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L363]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L364]               __tmp__sum__allowances1 := sum__allowances1;
[L365]               __tmp__Length := Length;
[L366]               __tmp__now := now;
[L367]               __tmp___balances_ERC20 := _balances_ERC20;
[L368]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L369]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L370]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L371]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L372]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L373]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L1663]  COND TRUE   __tmp__DType[this] == ULMC
[L1664]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L1925]              __var_4 := null;
[L1926]  COND FALSE  !(!(sender_s435 != null))
[L1930]              __var_5 := null;
[L1931]  COND TRUE   !(recipient_s435 != null)
[L1932]              revert := true;
[L1664]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L1665]  COND TRUE   revert
[L373]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L374]               assume revert || gas < 0;
[L3619]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L3691]  RET         call CorralChoice_ULMC(this);

Loop:
[L3691]  CALL        call CorralChoice_ULMC(this);
[L3558]              havoc msgsender_MSG;
[L3559]              havoc msgvalue_MSG;
[L3560]              havoc choice;
[L3561]              havoc __ret_0_totalSupply;
[L3562]              havoc account_s236;
[L3563]              havoc __ret_0_balanceOf;
[L3564]              havoc recipient_s255;
[L3565]              havoc amount_s255;
[L3566]              havoc __ret_0_transfer;
[L3567]              havoc owner_s271;
[L3568]              havoc spender_s271;
[L3569]              havoc __ret_0_allowance;
[L3570]              havoc spender_s290;
[L3571]              havoc value_s290;
[L3572]              havoc __ret_0_approve;
[L3573]              havoc sender_s325;
[L3574]              havoc recipient_s325;
[L3575]              havoc amount_s325;
[L3576]              havoc __ret_0_transferFrom;
[L3577]              havoc spender_s352;
[L3578]              havoc addedValue_s352;
[L3579]              havoc __ret_0_increaseAllowance;
[L3580]              havoc spender_s379;
[L3581]              havoc subtractedValue_s379;
[L3582]              havoc __ret_0_decreaseAllowance;
[L3583]              havoc name_s622;
[L3584]              havoc symbol_s622;
[L3585]              havoc decimals_s622;
[L3586]              havoc __ret_0_name;
[L3587]              havoc __ret_0_symbol;
[L3588]              havoc __ret_0_decimals;
[L3589]              havoc tmpNow;
[L3590]              havoc gas;
[L3591]              assume gas > 4000000 && gas <= 8000000;
[L3592]              tmpNow := now;
[L3593]              havoc now;
[L3594]              assume now > tmpNow;
[L3595]              assume msgsender_MSG != null;
[L3596]              assume DType[msgsender_MSG] != SafeMath;
[L3597]              assume DType[msgsender_MSG] != IERC20;
[L3598]              assume DType[msgsender_MSG] != ERC20;
[L3599]              assume DType[msgsender_MSG] != ERC20Detailed;
[L3600]              assume DType[msgsender_MSG] != ULMC;
[L3601]              Alloc[msgsender_MSG] := true;
[L3602]  COND FALSE  !(choice == 11)
[L3608]  COND FALSE  !(choice == 10)
[L3614]  COND TRUE   choice == 9
[L3615]              gas := gas - 21000;
[L3616]  COND TRUE   gas >= 0
[L3617]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3618]              assume msgvalue_MSG == 0;
[L3619]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s255 && amount_s255 <= _balances_ERC20[this][msgsender_MSG]) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L353]               havoc __exception;
[L354]               revert := false;
[L355]   COND TRUE   __exception
[L356]               __tmp__Balance := Balance;
[L357]               __tmp__DType := DType;
[L358]               __tmp__Alloc := Alloc;
[L359]               __tmp__balance_ADDR := balance_ADDR;
[L360]               __tmp__M_Ref_int := M_Ref_int;
[L361]               __tmp__sum__balances0 := sum__balances0;
[L362]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L363]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L364]               __tmp__sum__allowances1 := sum__allowances1;
[L365]               __tmp__Length := Length;
[L366]               __tmp__now := now;
[L367]               __tmp___balances_ERC20 := _balances_ERC20;
[L368]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L369]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L370]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L371]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L372]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L373]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L1663]  COND TRUE   __tmp__DType[this] == ULMC
[L1664]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L1925]              __var_4 := null;
[L1926]  COND FALSE  !(!(sender_s435 != null))
[L1930]              __var_5 := null;
[L1931]  COND TRUE   !(recipient_s435 != null)
[L1932]              revert := true;
[L1664]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L1665]  COND TRUE   revert
[L373]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L374]               assume revert || gas < 0;
[L3619]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L3691]  RET         call CorralChoice_ULMC(this);

[2020-11-25 07:15:47,205 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:15:47,205 INFO  L82        PathProgramCache]: Analyzing trace with hash -76998416, now seen corresponding path program 1 times
[2020-11-25 07:15:47,206 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:15:47,219 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:15:47,267 INFO  L134       CoverageAnalysis]: Checked inductivity of 35 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 35 trivial. 0 not checked.
[2020-11-25 07:15:47,267 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 07:15:47,267 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 07:15:47,268 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 07:15:47,268 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 07:15:47,268 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 07:15:47,268 INFO  L87              Difference]: Start difference. First operand 1872 states and 2071 transitions. cyclomatic complexity: 201 Second operand 7 states.
[2020-11-25 07:15:47,320 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:15:47,320 INFO  L93              Difference]: Finished difference Result 1964 states and 2176 transitions.
[2020-11-25 07:15:47,320 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 07:15:47,320 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1964 states and 2176 transitions.
[2020-11-25 07:15:47,327 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 07:15:47,334 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1964 states to 1956 states and 2168 transitions.
[2020-11-25 07:15:47,335 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 558
[2020-11-25 07:15:47,335 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 558
[2020-11-25 07:15:47,335 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1956 states and 2168 transitions.
[2020-11-25 07:15:47,337 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:15:47,337 INFO  L728         BuchiCegarLoop]: Abstraction has 1956 states and 2168 transitions.
[2020-11-25 07:15:47,339 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1956 states and 2168 transitions.
[2020-11-25 07:15:47,358 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1956 to 1943.
[2020-11-25 07:15:47,359 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1943 states.
[2020-11-25 07:15:47,361 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1943 states to 1943 states and 2153 transitions.
[2020-11-25 07:15:47,361 INFO  L751         BuchiCegarLoop]: Abstraction has 1943 states and 2153 transitions.
[2020-11-25 07:15:47,361 INFO  L631         BuchiCegarLoop]: Abstraction has 1943 states and 2153 transitions.
[2020-11-25 07:15:47,362 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 07:15:47,362 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1943 states and 2153 transitions.
[2020-11-25 07:15:47,365 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 07:15:47,365 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:15:47,365 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:15:47,367 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:15:47,367 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L3681]              assume null == 0;
[L3682]  CALL        call this := FreshRefGenerator__success();
[L1393]              havoc newRef;
[L1394]              assume Alloc[newRef] == false;
[L1395]              Alloc[newRef] := true;
[L1396]              assume newRef != null;
[L3682]  RET         call this := FreshRefGenerator__success();
[L3683]              assume now >= 0;
[L3684]              assume DType[this] == ULMC;
[L3685]              assume msgvalue_MSG == 0;
[L3686]              gas := gas - 53000;
[L3687]  CALL        call ULMC_ULMC(this, msgsender_MSG, msgvalue_MSG);
[L915]               havoc __exception;
[L916]               revert := false;
[L917]   COND FALSE  !(__exception)
[L938]   CALL        call ULMC_ULMC__success(this, msgsender_MSG, msgvalue_MSG);
[L2359]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1581]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1566]              assume msgsender_MSG != null;
[L1567]              Balance[this] := 0;
[L1581]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1582]  COND FALSE  !(revert)
[L2359]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2360]  COND FALSE  !(revert)
[L2363]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1627]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1581]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1566]              assume msgsender_MSG != null;
[L1567]              Balance[this] := 0;
[L1581]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1582]  COND FALSE  !(revert)
[L1627]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1628]  COND FALSE  !(revert)
[L1631]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1603]              assume msgsender_MSG != null;
[L1604]              Balance[this] := 0;
[L1605]              _balances_ERC20[this] := zeroRefintArr();
[L1606]              sum__balances0[this] := 0;
[L1607]              _allowances_ERC20[this] := zeroRefRefintArr();
[L1608]              sum__allowances1[this] := 0;
[L1609]              _totalSupply_ERC20[this] := 0;
[L1631]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1632]  COND FALSE  !(revert)
[L2363]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2364]  COND FALSE  !(revert)
[L2367]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 536458469, -382440921, 18);
[L2233]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1581]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1566]              assume msgsender_MSG != null;
[L1567]              Balance[this] := 0;
[L1581]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1582]  COND FALSE  !(revert)
[L2233]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2234]  COND FALSE  !(revert)
[L2237]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s622, symbol_s622, decimals_s622);
[L2208]              assume msgsender_MSG != null;
[L2209]              Balance[this] := 0;
[L2210]              _name_ERC20Detailed[this] := -930759658;
[L2211]              _symbol_ERC20Detailed[this] := -930759658;
[L2212]              _decimals_ERC20Detailed[this] := 0;
[L2214]              _name_ERC20Detailed[this] := name_s622;
[L2215]              _symbol_ERC20Detailed[this] := symbol_s622;
[L2216]              _decimals_ERC20Detailed[this] := decimals_s622;
[L2237]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s622, symbol_s622, decimals_s622);
[L2238]  COND FALSE  !(revert)
[L2367]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 536458469, -382440921, 18);
[L2368]  COND FALSE  !(revert)
[L2371]  CALL        call ULMC_ULMC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2311]              assume msgsender_MSG != null;
[L2312]              Balance[this] := 0;
[L2314]  COND TRUE   DType[this] == ULMC
[L2315]  CALL        call __var_18 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L2275]              __ret_0_ := _decimals_ERC20Detailed[this];
[L2315]  RET         call __var_18 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]  COND FALSE  !(revert)
[L2322]              __var_17 := __var_18 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2323]  COND TRUE   DType[this] == ULMC
[L2324]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_18 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2013]              __var_8 := null;
[L2014]  COND FALSE  !(!(account_s478 != null))
[L2018]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s478);
[L1446]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1447]  COND FALSE  !(!(c_s26 >= a_s26))
[L1451]              __ret_0_ := c_s26;
[L2018]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s478);
[L2019]  COND FALSE  !(revert)
[L2022]              _totalSupply_ERC20[this] := __var_9;
[L2023]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s478], amount_s478);
[L1446]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1447]  COND FALSE  !(!(c_s26 >= a_s26))
[L1451]              __ret_0_ := c_s26;
[L2023]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s478], amount_s478);
[L2024]  COND FALSE  !(revert)
[L2027]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s478];
[L2028]              _balances_ERC20[this][account_s478] := __var_10;
[L2029]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s478];
[L2030]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2324]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_18 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2325]  COND FALSE  !(revert)
[L2371]  RET         call ULMC_ULMC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2372]  COND FALSE  !(revert)
[L938]   RET         call ULMC_ULMC__success(this, msgsender_MSG, msgvalue_MSG);
[L939]               assume !revert && gas >= 0;
[L3687]  RET         call ULMC_ULMC(this, msgsender_MSG, msgvalue_MSG);
[L3688]              assume !revert && gas >= 0;
[L3691]  CALL        call CorralChoice_ULMC(this);
[L3558]              havoc msgsender_MSG;
[L3559]              havoc msgvalue_MSG;
[L3560]              havoc choice;
[L3561]              havoc __ret_0_totalSupply;
[L3562]              havoc account_s236;
[L3563]              havoc __ret_0_balanceOf;
[L3564]              havoc recipient_s255;
[L3565]              havoc amount_s255;
[L3566]              havoc __ret_0_transfer;
[L3567]              havoc owner_s271;
[L3568]              havoc spender_s271;
[L3569]              havoc __ret_0_allowance;
[L3570]              havoc spender_s290;
[L3571]              havoc value_s290;
[L3572]              havoc __ret_0_approve;
[L3573]              havoc sender_s325;
[L3574]              havoc recipient_s325;
[L3575]              havoc amount_s325;
[L3576]              havoc __ret_0_transferFrom;
[L3577]              havoc spender_s352;
[L3578]              havoc addedValue_s352;
[L3579]              havoc __ret_0_increaseAllowance;
[L3580]              havoc spender_s379;
[L3581]              havoc subtractedValue_s379;
[L3582]              havoc __ret_0_decreaseAllowance;
[L3583]              havoc name_s622;
[L3584]              havoc symbol_s622;
[L3585]              havoc decimals_s622;
[L3586]              havoc __ret_0_name;
[L3587]              havoc __ret_0_symbol;
[L3588]              havoc __ret_0_decimals;
[L3589]              havoc tmpNow;
[L3590]              havoc gas;
[L3591]              assume gas > 4000000 && gas <= 8000000;
[L3592]              tmpNow := now;
[L3593]              havoc now;
[L3594]              assume now > tmpNow;
[L3595]              assume msgsender_MSG != null;
[L3596]              assume DType[msgsender_MSG] != SafeMath;
[L3597]              assume DType[msgsender_MSG] != IERC20;
[L3598]              assume DType[msgsender_MSG] != ERC20;
[L3599]              assume DType[msgsender_MSG] != ERC20Detailed;
[L3600]              assume DType[msgsender_MSG] != ULMC;
[L3601]              Alloc[msgsender_MSG] := true;
[L3602]  COND FALSE  !(choice == 11)
[L3608]  COND FALSE  !(choice == 10)
[L3614]  COND TRUE   choice == 9
[L3615]              gas := gas - 21000;
[L3616]  COND TRUE   gas >= 0
[L3617]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3618]              assume msgvalue_MSG == 0;
[L3619]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s255 && amount_s255 <= _balances_ERC20[this][msgsender_MSG]) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L353]               havoc __exception;
[L354]               revert := false;
[L355]   COND TRUE   __exception
[L356]               __tmp__Balance := Balance;
[L357]               __tmp__DType := DType;
[L358]               __tmp__Alloc := Alloc;
[L359]               __tmp__balance_ADDR := balance_ADDR;
[L360]               __tmp__M_Ref_int := M_Ref_int;
[L361]               __tmp__sum__balances0 := sum__balances0;
[L362]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L363]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L364]               __tmp__sum__allowances1 := sum__allowances1;
[L365]               __tmp__Length := Length;
[L366]               __tmp__now := now;
[L367]               __tmp___balances_ERC20 := _balances_ERC20;
[L368]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L369]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L370]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L371]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L372]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L373]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L1663]  COND TRUE   __tmp__DType[this] == ULMC
[L1664]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L1925]              __var_4 := null;
[L1926]  COND FALSE  !(!(sender_s435 != null))
[L1930]              __var_5 := null;
[L1931]  COND FALSE  !(!(recipient_s435 != null))
[L1935]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s435], amount_s435);
[L1458]  COND TRUE   !(b_s51 <= a_s51)
[L1459]              revert := true;
[L1935]  RET         call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s435], amount_s435);
[L1936]  COND TRUE   revert
[L1664]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L1665]  COND TRUE   revert
[L373]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L374]               assume revert || gas < 0;
[L3619]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L3691]  RET         call CorralChoice_ULMC(this);

Loop:
[L3691]  CALL        call CorralChoice_ULMC(this);
[L3558]              havoc msgsender_MSG;
[L3559]              havoc msgvalue_MSG;
[L3560]              havoc choice;
[L3561]              havoc __ret_0_totalSupply;
[L3562]              havoc account_s236;
[L3563]              havoc __ret_0_balanceOf;
[L3564]              havoc recipient_s255;
[L3565]              havoc amount_s255;
[L3566]              havoc __ret_0_transfer;
[L3567]              havoc owner_s271;
[L3568]              havoc spender_s271;
[L3569]              havoc __ret_0_allowance;
[L3570]              havoc spender_s290;
[L3571]              havoc value_s290;
[L3572]              havoc __ret_0_approve;
[L3573]              havoc sender_s325;
[L3574]              havoc recipient_s325;
[L3575]              havoc amount_s325;
[L3576]              havoc __ret_0_transferFrom;
[L3577]              havoc spender_s352;
[L3578]              havoc addedValue_s352;
[L3579]              havoc __ret_0_increaseAllowance;
[L3580]              havoc spender_s379;
[L3581]              havoc subtractedValue_s379;
[L3582]              havoc __ret_0_decreaseAllowance;
[L3583]              havoc name_s622;
[L3584]              havoc symbol_s622;
[L3585]              havoc decimals_s622;
[L3586]              havoc __ret_0_name;
[L3587]              havoc __ret_0_symbol;
[L3588]              havoc __ret_0_decimals;
[L3589]              havoc tmpNow;
[L3590]              havoc gas;
[L3591]              assume gas > 4000000 && gas <= 8000000;
[L3592]              tmpNow := now;
[L3593]              havoc now;
[L3594]              assume now > tmpNow;
[L3595]              assume msgsender_MSG != null;
[L3596]              assume DType[msgsender_MSG] != SafeMath;
[L3597]              assume DType[msgsender_MSG] != IERC20;
[L3598]              assume DType[msgsender_MSG] != ERC20;
[L3599]              assume DType[msgsender_MSG] != ERC20Detailed;
[L3600]              assume DType[msgsender_MSG] != ULMC;
[L3601]              Alloc[msgsender_MSG] := true;
[L3602]  COND FALSE  !(choice == 11)
[L3608]  COND FALSE  !(choice == 10)
[L3614]  COND TRUE   choice == 9
[L3615]              gas := gas - 21000;
[L3616]  COND TRUE   gas >= 0
[L3617]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3618]              assume msgvalue_MSG == 0;
[L3619]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s255 && amount_s255 <= _balances_ERC20[this][msgsender_MSG]) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L353]               havoc __exception;
[L354]               revert := false;
[L355]   COND TRUE   __exception
[L356]               __tmp__Balance := Balance;
[L357]               __tmp__DType := DType;
[L358]               __tmp__Alloc := Alloc;
[L359]               __tmp__balance_ADDR := balance_ADDR;
[L360]               __tmp__M_Ref_int := M_Ref_int;
[L361]               __tmp__sum__balances0 := sum__balances0;
[L362]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L363]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L364]               __tmp__sum__allowances1 := sum__allowances1;
[L365]               __tmp__Length := Length;
[L366]               __tmp__now := now;
[L367]               __tmp___balances_ERC20 := _balances_ERC20;
[L368]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L369]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L370]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L371]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L372]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L373]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L1663]  COND TRUE   __tmp__DType[this] == ULMC
[L1664]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L1925]              __var_4 := null;
[L1926]  COND FALSE  !(!(sender_s435 != null))
[L1930]              __var_5 := null;
[L1931]  COND FALSE  !(!(recipient_s435 != null))
[L1935]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s435], amount_s435);
[L1458]  COND TRUE   !(b_s51 <= a_s51)
[L1459]              revert := true;
[L1935]  RET         call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s435], amount_s435);
[L1936]  COND TRUE   revert
[L1664]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L1665]  COND TRUE   revert
[L373]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L374]               assume revert || gas < 0;
[L3619]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L3691]  RET         call CorralChoice_ULMC(this);

[2020-11-25 07:15:47,372 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:15:47,372 INFO  L82        PathProgramCache]: Analyzing trace with hash 1399216777, now seen corresponding path program 1 times
[2020-11-25 07:15:47,373 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:15:47,387 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:15:47,463 INFO  L134       CoverageAnalysis]: Checked inductivity of 35 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 35 trivial. 0 not checked.
[2020-11-25 07:15:47,463 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 07:15:47,463 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 07:15:47,464 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 07:15:47,464 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 07:15:47,464 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 07:15:47,464 INFO  L87              Difference]: Start difference. First operand 1943 states and 2153 transitions. cyclomatic complexity: 212 Second operand 8 states.
[2020-11-25 07:15:48,046 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:15:48,046 INFO  L93              Difference]: Finished difference Result 2056 states and 2281 transitions.
[2020-11-25 07:15:48,046 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 07:15:48,046 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2056 states and 2281 transitions.
[2020-11-25 07:15:48,050 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 07:15:48,055 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2056 states to 2056 states and 2281 transitions.
[2020-11-25 07:15:48,056 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 611
[2020-11-25 07:15:48,056 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 611
[2020-11-25 07:15:48,056 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2056 states and 2281 transitions.
[2020-11-25 07:15:48,057 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:15:48,057 INFO  L728         BuchiCegarLoop]: Abstraction has 2056 states and 2281 transitions.
[2020-11-25 07:15:48,059 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2056 states and 2281 transitions.
[2020-11-25 07:15:48,070 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2056 to 1943.
[2020-11-25 07:15:48,071 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1943 states.
[2020-11-25 07:15:48,072 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1943 states to 1943 states and 2153 transitions.
[2020-11-25 07:15:48,072 INFO  L751         BuchiCegarLoop]: Abstraction has 1943 states and 2153 transitions.
[2020-11-25 07:15:48,072 INFO  L631         BuchiCegarLoop]: Abstraction has 1943 states and 2153 transitions.
[2020-11-25 07:15:48,072 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 07:15:48,073 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1943 states and 2153 transitions.
[2020-11-25 07:15:48,075 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 07:15:48,075 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:15:48,075 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:15:48,076 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:15:48,076 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L3681]              assume null == 0;
[L3682]  CALL        call this := FreshRefGenerator__success();
[L1393]              havoc newRef;
[L1394]              assume Alloc[newRef] == false;
[L1395]              Alloc[newRef] := true;
[L1396]              assume newRef != null;
[L3682]  RET         call this := FreshRefGenerator__success();
[L3683]              assume now >= 0;
[L3684]              assume DType[this] == ULMC;
[L3685]              assume msgvalue_MSG == 0;
[L3686]              gas := gas - 53000;
[L3687]  CALL        call ULMC_ULMC(this, msgsender_MSG, msgvalue_MSG);
[L915]               havoc __exception;
[L916]               revert := false;
[L917]   COND FALSE  !(__exception)
[L938]   CALL        call ULMC_ULMC__success(this, msgsender_MSG, msgvalue_MSG);
[L2359]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1581]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1566]              assume msgsender_MSG != null;
[L1567]              Balance[this] := 0;
[L1581]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1582]  COND FALSE  !(revert)
[L2359]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2360]  COND FALSE  !(revert)
[L2363]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1627]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1581]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1566]              assume msgsender_MSG != null;
[L1567]              Balance[this] := 0;
[L1581]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1582]  COND FALSE  !(revert)
[L1627]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1628]  COND FALSE  !(revert)
[L1631]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1603]              assume msgsender_MSG != null;
[L1604]              Balance[this] := 0;
[L1605]              _balances_ERC20[this] := zeroRefintArr();
[L1606]              sum__balances0[this] := 0;
[L1607]              _allowances_ERC20[this] := zeroRefRefintArr();
[L1608]              sum__allowances1[this] := 0;
[L1609]              _totalSupply_ERC20[this] := 0;
[L1631]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1632]  COND FALSE  !(revert)
[L2363]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2364]  COND FALSE  !(revert)
[L2367]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 536458469, -382440921, 18);
[L2233]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1581]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1566]              assume msgsender_MSG != null;
[L1567]              Balance[this] := 0;
[L1581]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1582]  COND FALSE  !(revert)
[L2233]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2234]  COND FALSE  !(revert)
[L2237]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s622, symbol_s622, decimals_s622);
[L2208]              assume msgsender_MSG != null;
[L2209]              Balance[this] := 0;
[L2210]              _name_ERC20Detailed[this] := -930759658;
[L2211]              _symbol_ERC20Detailed[this] := -930759658;
[L2212]              _decimals_ERC20Detailed[this] := 0;
[L2214]              _name_ERC20Detailed[this] := name_s622;
[L2215]              _symbol_ERC20Detailed[this] := symbol_s622;
[L2216]              _decimals_ERC20Detailed[this] := decimals_s622;
[L2237]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s622, symbol_s622, decimals_s622);
[L2238]  COND FALSE  !(revert)
[L2367]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 536458469, -382440921, 18);
[L2368]  COND FALSE  !(revert)
[L2371]  CALL        call ULMC_ULMC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2311]              assume msgsender_MSG != null;
[L2312]              Balance[this] := 0;
[L2314]  COND TRUE   DType[this] == ULMC
[L2315]  CALL        call __var_18 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L2275]              __ret_0_ := _decimals_ERC20Detailed[this];
[L2315]  RET         call __var_18 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]  COND FALSE  !(revert)
[L2322]              __var_17 := __var_18 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2323]  COND TRUE   DType[this] == ULMC
[L2324]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_18 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2013]              __var_8 := null;
[L2014]  COND FALSE  !(!(account_s478 != null))
[L2018]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s478);
[L1446]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1447]  COND FALSE  !(!(c_s26 >= a_s26))
[L1451]              __ret_0_ := c_s26;
[L2018]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s478);
[L2019]  COND FALSE  !(revert)
[L2022]              _totalSupply_ERC20[this] := __var_9;
[L2023]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s478], amount_s478);
[L1446]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1447]  COND FALSE  !(!(c_s26 >= a_s26))
[L1451]              __ret_0_ := c_s26;
[L2023]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s478], amount_s478);
[L2024]  COND FALSE  !(revert)
[L2027]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s478];
[L2028]              _balances_ERC20[this][account_s478] := __var_10;
[L2029]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s478];
[L2030]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2324]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_18 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2325]  COND FALSE  !(revert)
[L2371]  RET         call ULMC_ULMC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2372]  COND FALSE  !(revert)
[L938]   RET         call ULMC_ULMC__success(this, msgsender_MSG, msgvalue_MSG);
[L939]               assume !revert && gas >= 0;
[L3687]  RET         call ULMC_ULMC(this, msgsender_MSG, msgvalue_MSG);
[L3688]              assume !revert && gas >= 0;
[L3691]  CALL        call CorralChoice_ULMC(this);
[L3558]              havoc msgsender_MSG;
[L3559]              havoc msgvalue_MSG;
[L3560]              havoc choice;
[L3561]              havoc __ret_0_totalSupply;
[L3562]              havoc account_s236;
[L3563]              havoc __ret_0_balanceOf;
[L3564]              havoc recipient_s255;
[L3565]              havoc amount_s255;
[L3566]              havoc __ret_0_transfer;
[L3567]              havoc owner_s271;
[L3568]              havoc spender_s271;
[L3569]              havoc __ret_0_allowance;
[L3570]              havoc spender_s290;
[L3571]              havoc value_s290;
[L3572]              havoc __ret_0_approve;
[L3573]              havoc sender_s325;
[L3574]              havoc recipient_s325;
[L3575]              havoc amount_s325;
[L3576]              havoc __ret_0_transferFrom;
[L3577]              havoc spender_s352;
[L3578]              havoc addedValue_s352;
[L3579]              havoc __ret_0_increaseAllowance;
[L3580]              havoc spender_s379;
[L3581]              havoc subtractedValue_s379;
[L3582]              havoc __ret_0_decreaseAllowance;
[L3583]              havoc name_s622;
[L3584]              havoc symbol_s622;
[L3585]              havoc decimals_s622;
[L3586]              havoc __ret_0_name;
[L3587]              havoc __ret_0_symbol;
[L3588]              havoc __ret_0_decimals;
[L3589]              havoc tmpNow;
[L3590]              havoc gas;
[L3591]              assume gas > 4000000 && gas <= 8000000;
[L3592]              tmpNow := now;
[L3593]              havoc now;
[L3594]              assume now > tmpNow;
[L3595]              assume msgsender_MSG != null;
[L3596]              assume DType[msgsender_MSG] != SafeMath;
[L3597]              assume DType[msgsender_MSG] != IERC20;
[L3598]              assume DType[msgsender_MSG] != ERC20;
[L3599]              assume DType[msgsender_MSG] != ERC20Detailed;
[L3600]              assume DType[msgsender_MSG] != ULMC;
[L3601]              Alloc[msgsender_MSG] := true;
[L3602]  COND FALSE  !(choice == 11)
[L3608]  COND FALSE  !(choice == 10)
[L3614]  COND TRUE   choice == 9
[L3615]              gas := gas - 21000;
[L3616]  COND TRUE   gas >= 0
[L3617]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3618]              assume msgvalue_MSG == 0;
[L3619]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s255 && amount_s255 <= _balances_ERC20[this][msgsender_MSG]) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L353]               havoc __exception;
[L354]               revert := false;
[L355]   COND FALSE  !(__exception)
[L376]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L1682]  COND TRUE   DType[this] == ULMC
[L1683]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L1957]              __var_4 := null;
[L1958]  COND FALSE  !(!(sender_s435 != null))
[L1962]              __var_5 := null;
[L1963]  COND FALSE  !(!(recipient_s435 != null))
[L1967]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L1470]  COND FALSE  !(!(b_s51 <= a_s51))
[L1474]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1475]              __ret_0_ := c_s51;
[L1967]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L1968]  COND FALSE  !(revert)
[L1971]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s435];
[L1972]              _balances_ERC20[this][sender_s435] := __var_6;
[L1973]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s435];
[L1974]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L1446]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1447]  COND FALSE  !(!(c_s26 >= a_s26))
[L1451]              __ret_0_ := c_s26;
[L1974]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L1975]  COND FALSE  !(revert)
[L1978]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s435];
[L1979]              _balances_ERC20[this][recipient_s435] := __var_7;
[L1980]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s435];
[L1981]              assert { :EventEmitted "Transfer_ERC20" } true;
[L1683]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L1684]  COND FALSE  !(revert)
[L1695]              __ret_0_ := true;
[L376]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L377]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L3619]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L3691]  RET         call CorralChoice_ULMC(this);

Loop:
[L3691]  CALL        call CorralChoice_ULMC(this);
[L3558]              havoc msgsender_MSG;
[L3559]              havoc msgvalue_MSG;
[L3560]              havoc choice;
[L3561]              havoc __ret_0_totalSupply;
[L3562]              havoc account_s236;
[L3563]              havoc __ret_0_balanceOf;
[L3564]              havoc recipient_s255;
[L3565]              havoc amount_s255;
[L3566]              havoc __ret_0_transfer;
[L3567]              havoc owner_s271;
[L3568]              havoc spender_s271;
[L3569]              havoc __ret_0_allowance;
[L3570]              havoc spender_s290;
[L3571]              havoc value_s290;
[L3572]              havoc __ret_0_approve;
[L3573]              havoc sender_s325;
[L3574]              havoc recipient_s325;
[L3575]              havoc amount_s325;
[L3576]              havoc __ret_0_transferFrom;
[L3577]              havoc spender_s352;
[L3578]              havoc addedValue_s352;
[L3579]              havoc __ret_0_increaseAllowance;
[L3580]              havoc spender_s379;
[L3581]              havoc subtractedValue_s379;
[L3582]              havoc __ret_0_decreaseAllowance;
[L3583]              havoc name_s622;
[L3584]              havoc symbol_s622;
[L3585]              havoc decimals_s622;
[L3586]              havoc __ret_0_name;
[L3587]              havoc __ret_0_symbol;
[L3588]              havoc __ret_0_decimals;
[L3589]              havoc tmpNow;
[L3590]              havoc gas;
[L3591]              assume gas > 4000000 && gas <= 8000000;
[L3592]              tmpNow := now;
[L3593]              havoc now;
[L3594]              assume now > tmpNow;
[L3595]              assume msgsender_MSG != null;
[L3596]              assume DType[msgsender_MSG] != SafeMath;
[L3597]              assume DType[msgsender_MSG] != IERC20;
[L3598]              assume DType[msgsender_MSG] != ERC20;
[L3599]              assume DType[msgsender_MSG] != ERC20Detailed;
[L3600]              assume DType[msgsender_MSG] != ULMC;
[L3601]              Alloc[msgsender_MSG] := true;
[L3602]  COND FALSE  !(choice == 11)
[L3608]  COND FALSE  !(choice == 10)
[L3614]  COND TRUE   choice == 9
[L3615]              gas := gas - 21000;
[L3616]  COND TRUE   gas >= 0
[L3617]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3618]              assume msgvalue_MSG == 0;
[L3619]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s255 && amount_s255 <= _balances_ERC20[this][msgsender_MSG]) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L353]               havoc __exception;
[L354]               revert := false;
[L355]   COND FALSE  !(__exception)
[L376]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L1682]  COND TRUE   DType[this] == ULMC
[L1683]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L1957]              __var_4 := null;
[L1958]  COND FALSE  !(!(sender_s435 != null))
[L1962]              __var_5 := null;
[L1963]  COND FALSE  !(!(recipient_s435 != null))
[L1967]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L1470]  COND FALSE  !(!(b_s51 <= a_s51))
[L1474]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1475]              __ret_0_ := c_s51;
[L1967]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L1968]  COND FALSE  !(revert)
[L1971]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s435];
[L1972]              _balances_ERC20[this][sender_s435] := __var_6;
[L1973]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s435];
[L1974]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L1446]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1447]  COND FALSE  !(!(c_s26 >= a_s26))
[L1451]              __ret_0_ := c_s26;
[L1974]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L1975]  COND FALSE  !(revert)
[L1978]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s435];
[L1979]              _balances_ERC20[this][recipient_s435] := __var_7;
[L1980]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s435];
[L1981]              assert { :EventEmitted "Transfer_ERC20" } true;
[L1683]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L1684]  COND FALSE  !(revert)
[L1695]              __ret_0_ := true;
[L376]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L377]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L3619]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L3691]  RET         call CorralChoice_ULMC(this);

[2020-11-25 07:15:48,079 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:15:48,079 INFO  L82        PathProgramCache]: Analyzing trace with hash -820912795, now seen corresponding path program 1 times
[2020-11-25 07:15:48,080 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:15:48,137 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
Received shutdown request...
[2020-11-25 07:30:42,380 FATAL L265        ToolchainWalker]: An unrecoverable error occured during an interaction with an SMT solver:
de.uni_freiburg.informatik.ultimate.logic.SMTLIBException: Timeout exceeded
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$IntegerInterpolator.interpolate(Interpolator.java:1432)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$MixedLAInterpolator.convert(Interpolator.java:1288)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer.cacheConvert(TermTransformer.java:131)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer.access$0(TermTransformer.java:127)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer$Convert.walk(TermTransformer.java:79)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:122)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:113)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer.transform(TermTransformer.java:253)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.mixedPivotLA(Interpolator.java:1478)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.combine(Interpolator.java:359)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.access$2(Interpolator.java:328)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$CombineInterpolants.walk(Interpolator.java:153)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:122)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:113)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.interpolate(Interpolator.java:220)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.getInterpolants(Interpolator.java:201)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.smtlib2.SMTInterpol.getInterpolants(SMTInterpol.java:919)
	at de.uni_freiburg.informatik.ultimate.modelcheckerutils.smt.managedscript.ManagedScript.getInterpolants(ManagedScript.java:200)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.NestedInterpolantsBuilder.computeCraigInterpolants(NestedInterpolantsBuilder.java:303)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.NestedInterpolantsBuilder.<init>(NestedInterpolantsBuilder.java:167)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.NestedInterpolantsBuilder.<init>(NestedInterpolantsBuilder.java:182)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.InterpolatingTraceCheckCraig.computeInterpolantsTree(InterpolatingTraceCheckCraig.java:271)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.InterpolatingTraceCheckCraig.computeInterpolants(InterpolatingTraceCheckCraig.java:207)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.InterpolatingTraceCheckCraig.<init>(InterpolatingTraceCheckCraig.java:109)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceCheckConstructor.constructCraig(TraceCheckConstructor.java:211)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceCheckConstructor.constructTraceCheck(TraceCheckConstructor.java:183)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceCheckConstructor.get(TraceCheckConstructor.java:165)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.FixedRefinementStrategy.getTraceCheck(FixedRefinementStrategy.java:134)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.BaseRefinementStrategy.checkFeasibility(BaseRefinementStrategy.java:223)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.BaseRefinementStrategy.executeStrategy(BaseRefinementStrategy.java:197)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceAbstractionRefinementEngine.<init>(TraceAbstractionRefinementEngine.java:70)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.checkFeasibilityAndComputeInterpolants(LassoCheck.java:1126)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.checkStemFeasibility(LassoCheck.java:1080)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.<init>(LassoCheck.java:994)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck.<init>(LassoCheck.java:276)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiCegarLoop.iterate(BuchiCegarLoop.java:479)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver.doTerminationAnalysis(BuchiAutomizerObserver.java:153)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver.finish(BuchiAutomizerObserver.java:413)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.runObserver(PluginConnector.java:168)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.runTool(PluginConnector.java:151)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.run(PluginConnector.java:128)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.executePluginConnector(ToolchainWalker.java:232)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.processPlugin(ToolchainWalker.java:226)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.walkUnprotected(ToolchainWalker.java:142)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.walk(ToolchainWalker.java:104)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainManager$Toolchain.processToolchain(ToolchainManager.java:317)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.toolchain.DefaultToolchainJob.run(DefaultToolchainJob.java:145)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)
[2020-11-25 07:30:42,381 INFO  L168              Benchmark]: Toolchain (without parser) took 899052.72 ms. Allocated memory was 1.0 GB in the beginning and 6.5 GB in the end (delta: 5.5 GB). Free memory was 935.2 MB in the beginning and 5.8 GB in the end (delta: -4.8 GB). Peak memory consumption was 6.1 GB. Max. memory is 15.3 GB.
[2020-11-25 07:30:42,382 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 07:30:42,383 INFO  L168              Benchmark]: Boogie Preprocessor took 88.63 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 929.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 07:30:42,383 INFO  L168              Benchmark]: UtopiaSpecLang took 54.81 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.5 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 07:30:42,383 INFO  L168              Benchmark]: Boogie Printer took 13.42 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 07:30:42,384 INFO  L168              Benchmark]: RCFGBuilder took 740.32 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 822.3 MB in the end (delta: 96.8 MB). Peak memory consumption was 96.8 MB. Max. memory is 15.3 GB.
[2020-11-25 07:30:42,384 INFO  L168              Benchmark]: UtopiaLTL2Aut took 40.87 ms. Allocated memory is still 1.0 GB. Free memory was 822.3 MB in the beginning and 818.7 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-25 07:30:42,384 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1296.97 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 195.0 MB). Free memory was 818.7 MB in the beginning and 1.1 GB in the end (delta: -302.6 MB). Peak memory consumption was 193.8 MB. Max. memory is 15.3 GB.
[2020-11-25 07:30:42,385 INFO  L168              Benchmark]: BlockEncodingV2 took 106.34 ms. Allocated memory is still 1.2 GB. Free memory was 1.1 GB in the beginning and 1.1 GB in the end (delta: 66.5 MB). Peak memory consumption was 66.5 MB. Max. memory is 15.3 GB.
[2020-11-25 07:30:42,385 INFO  L168              Benchmark]: BuchiAutomizer took 896708.57 ms. Allocated memory was 1.2 GB in the beginning and 6.5 GB in the end (delta: 5.3 GB). Free memory was 1.1 GB in the beginning and 5.8 GB in the end (delta: -4.7 GB). Peak memory consumption was 6.0 GB. Max. memory is 15.3 GB.
[2020-11-25 07:30:42,388 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    3182 locations, 5737 edges
  - StatisticsResult: Encoded RCFG
    3114 locations, 5553 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 88.63 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 929.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 54.81 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.5 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 13.42 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 740.32 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 822.3 MB in the end (delta: 96.8 MB). Peak memory consumption was 96.8 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 40.87 ms. Allocated memory is still 1.0 GB. Free memory was 822.3 MB in the beginning and 818.7 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1296.97 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 195.0 MB). Free memory was 818.7 MB in the beginning and 1.1 GB in the end (delta: -302.6 MB). Peak memory consumption was 193.8 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 106.34 ms. Allocated memory is still 1.2 GB. Free memory was 1.1 GB in the beginning and 1.1 GB in the end (delta: 66.5 MB). Peak memory consumption was 66.5 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 896708.57 ms. Allocated memory was 1.2 GB in the beginning and 6.5 GB in the end (delta: 5.3 GB). Free memory was 1.1 GB in the beginning and 5.8 GB in the end (delta: -4.7 GB). Peak memory consumption was 6.0 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1273 locations, 1751 edges
  - StatisticsResult: BuchiProgram size
    3182 locations, 5737 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer:
  - ExceptionOrErrorResult: SMTLIBException: Timeout exceeded
    de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer: SMTLIBException: Timeout exceeded: de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$IntegerInterpolator.interpolate(Interpolator.java:1432)
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Completed graceful shutdown
