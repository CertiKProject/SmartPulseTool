This is Ultimate 0.1.24-f1553f5-m
[2020-11-24 21:43:16,727 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-24 21:43:16,728 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-24 21:43:16,735 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-24 21:43:16,735 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-24 21:43:16,736 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-24 21:43:16,736 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-24 21:43:16,737 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-24 21:43:16,738 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-24 21:43:16,739 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-24 21:43:16,739 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-24 21:43:16,739 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-24 21:43:16,740 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-24 21:43:16,741 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-24 21:43:16,741 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-24 21:43:16,741 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-24 21:43:16,742 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-24 21:43:16,743 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-24 21:43:16,744 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-24 21:43:16,744 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-24 21:43:16,745 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-24 21:43:16,746 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-24 21:43:16,747 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-24 21:43:16,747 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-24 21:43:16,747 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-24 21:43:16,748 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-24 21:43:16,748 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-24 21:43:16,748 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-24 21:43:16,749 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-24 21:43:16,749 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-24 21:43:16,749 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-24 21:43:16,749 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-24 21:43:16,750 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-24 21:43:16,750 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-24 21:43:16,751 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-24 21:43:16,751 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-24 21:43:16,751 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-24 21:43:16,751 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-24 21:43:16,751 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-24 21:43:16,752 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-24 21:43:16,752 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-24 21:43:16,752 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-24 21:43:16,760 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-24 21:43:16,760 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-24 21:43:16,761 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-24 21:43:16,761 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-24 21:43:16,761 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-24 21:43:16,761 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-24 21:43:16,761 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-24 21:43:16,761 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-24 21:43:16,761 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-24 21:43:16,762 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-24 21:43:16,762 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-24 21:43:16,762 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-24 21:43:16,762 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-24 21:43:16,762 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-24 21:43:16,762 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-24 21:43:16,762 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-24 21:43:16,762 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-24 21:43:16,762 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-24 21:43:16,762 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-24 21:43:16,763 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-24 21:43:16,763 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-24 21:43:16,763 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-24 21:43:16,763 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-24 21:43:16,763 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-24 21:43:16,763 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-24 21:43:16,763 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-24 21:43:16,783 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-24 21:43:16,794 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-24 21:43:16,797 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-24 21:43:16,798 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-24 21:43:16,798 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-24 21:43:16,799 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_balanceof.bpl
[2020-11-24 21:43:16,799 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_balanceof.bpl'
[2020-11-24 21:43:16,942 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-24 21:43:16,943 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-24 21:43:16,943 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-24 21:43:16,944 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-24 21:43:16,944 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-24 21:43:16,960 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:43:16" (1/1) ...
[2020-11-24 21:43:16,961 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:43:16" (1/1) ...
[2020-11-24 21:43:17,012 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:43:16" (1/1) ...
[2020-11-24 21:43:17,013 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:43:16" (1/1) ...
[2020-11-24 21:43:17,065 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:43:16" (1/1) ...
[2020-11-24 21:43:17,092 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:43:16" (1/1) ...
[2020-11-24 21:43:17,111 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:43:16" (1/1) ...
[2020-11-24 21:43:17,138 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-24 21:43:17,138 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-24 21:43:17,138 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-24 21:43:17,141 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-24 21:43:17,145 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:43:16" (1/1) ...
[2020-11-24 21:43:17,175 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(FreezableToken.balanceOf(owner), balances_BasicToken[this][owner] >= 0 && balances_BasicToken[this][owner] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(FreezableToken.balanceOf(owner), return == balances_BasicToken[this][owner] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && initialized_MainToken[this] == old(initialized_MainToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && chains_FreezableToken[this] == old(chains_FreezableToken[this]) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this]) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]))))
[2020-11-24 21:43:17,181 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(FreezableToken.balanceOf(owner), balances_BasicToken[this][owner] >= 0 && balances_BasicToken[this][owner] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(FreezableToken.balanceOf(owner), return == balances_BasicToken[this][owner] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && initialized_MainToken[this] == old(initialized_MainToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && chains_FreezableToken[this] == old(chains_FreezableToken[this]) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this]) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]))))
[2020-11-24 21:43:17,189 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(FreezableToken.balanceOf(owner), balances_BasicToken[this][owner] >= 0 && balances_BasicToken[this][owner] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(FreezableToken.balanceOf(owner), return == balances_BasicToken[this][owner] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && initialized_MainToken[this] == old(initialized_MainToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && chains_FreezableToken[this] == old(chains_FreezableToken[this]) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this]) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]))))
[2020-11-24 21:43:17,197 INFO  L636   opiaSpecLangObserver]: Parsed ( balances_BasicToken[this][_owner_s729]>=0 && balances_BasicToken[this][_owner_s729]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]],[IdentifierExpression[_owner_s729,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]],IntegerLiteral[0]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]],[IdentifierExpression[_owner_s729,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-24 21:43:17,200 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( balance_s729==balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this]==( old(totalSupply__BasicToken[this]) ) ) && balances_BasicToken[this]==( old(balances_BasicToken[this]) ) ) && allowed_StandardToken[this]==( old(allowed_StandardToken[this]) ) ) && initialized_MainToken[this]==( old(initialized_MainToken[this]) ) ) && paused_Pausable[this]==( old(paused_Pausable[this]) ) ) && mintingFinished_MintableToken[this]==( old(mintingFinished_MintableToken[this]) ) ) && owner_Ownable[this]==( old(owner_Ownable[this]) ) ) && chains_FreezableToken[this]==( old(chains_FreezableToken[this]) ) ) && freezings_FreezableToken[this]==( old(freezings_FreezableToken[this]) ) ) && freezingBalance_FreezableToken[this]==( old(freezingBalance_FreezableToken[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[balance_s729,<IMPLEMENTATION_OUTPARAM,balanceOf~address_FreezableToken>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]],[IdentifierExpression[_owner_s729,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[initialized_MainToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[initialized_MainToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[mintingFinished_MintableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[mintingFinished_MintableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[chains_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[chains_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[freezings_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[freezings_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[freezingBalance_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[freezingBalance_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]]]]]
[2020-11-24 21:43:17,208 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(FreezableToken.balanceOf(owner), balances_BasicToken[this][owner] >= 0 && balances_BasicToken[this][owner] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(FreezableToken.balanceOf(owner), return == balances_BasicToken[this][owner] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && initialized_MainToken[this] == old(initialized_MainToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && chains_FreezableToken[this] == old(chains_FreezableToken[this]) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this]) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]))))
[2020-11-24 21:43:17,209 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_balanceOf_FreezableToken0) ==> ( <>AP(success_balanceOf_FreezableToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-24 21:43:17,234 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:43:17 PropertyContainer
[2020-11-24 21:43:17,234 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-24 21:43:17,234 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-24 21:43:17,234 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-24 21:43:17,234 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-24 21:43:17,235 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:43:16" (1/2) ...
[2020-11-24 21:43:17,236 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-24 21:43:17,236 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-24 21:43:17,267 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:43:17" (2/2) ...
[2020-11-24 21:43:17,268 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-24 21:43:17,268 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-24 21:43:17,268 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-24 21:43:17,268 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-24 21:43:17,269 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:43:16" (1/2) ...
[2020-11-24 21:43:17,327 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-24 21:43:17,327 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-24 21:43:17,327 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic
[2020-11-24 21:43:17,327 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic
[2020-11-24 21:43:17,327 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Basic
[2020-11-24 21:43:17,327 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Basic
[2020-11-24 21:43:17,328 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Basic
[2020-11-24 21:43:17,328 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 21:43:17,328 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-24 21:43:17,328 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-24 21:43:17,328 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 21:43:17,328 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 21:43:17,328 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 21:43:17,329 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 21:43:17,329 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-24 21:43:17,329 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken
[2020-11-24 21:43:17,329 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken
[2020-11-24 21:43:17,329 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken
[2020-11-24 21:43:17,329 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken
[2020-11-24 21:43:17,329 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken
[2020-11-24 21:43:17,329 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken
[2020-11-24 21:43:17,330 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken
[2020-11-24 21:43:17,330 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken
[2020-11-24 21:43:17,330 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-24 21:43:17,330 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-24 21:43:17,330 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-24 21:43:17,330 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-24 21:43:17,330 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-24 21:43:17,330 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-24 21:43:17,330 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-24 21:43:17,330 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken
[2020-11-24 21:43:17,331 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken
[2020-11-24 21:43:17,331 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-24 21:43:17,331 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-24 21:43:17,331 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken
[2020-11-24 21:43:17,331 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken
[2020-11-24 21:43:17,331 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken
[2020-11-24 21:43:17,331 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken
[2020-11-24 21:43:17,331 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken
[2020-11-24 21:43:17,331 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken
[2020-11-24 21:43:17,331 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-24 21:43:17,332 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-24 21:43:17,332 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-24 21:43:17,332 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-24 21:43:17,332 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-24 21:43:17,332 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable
[2020-11-24 21:43:17,332 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable
[2020-11-24 21:43:17,332 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-24 21:43:17,332 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-24 21:43:17,332 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__success
[2020-11-24 21:43:17,332 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-24 21:43:17,333 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-24 21:43:17,333 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-24 21:43:17,333 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken
[2020-11-24 21:43:17,333 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken
[2020-11-24 21:43:17,333 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken
[2020-11-24 21:43:17,333 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken
[2020-11-24 21:43:17,333 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken
[2020-11-24 21:43:17,333 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken
[2020-11-24 21:43:17,333 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken
[2020-11-24 21:43:17,333 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken
[2020-11-24 21:43:17,333 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken_NoBaseCtor__success
[2020-11-24 21:43:17,334 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken
[2020-11-24 21:43:17,334 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken
[2020-11-24 21:43:17,334 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FreezableToken
[2020-11-24 21:43:17,334 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FreezableToken
[2020-11-24 21:43:17,334 INFO  L130     BoogieDeclarations]: Found specification of procedure actualBalanceOf~address_FreezableToken
[2020-11-24 21:43:17,334 INFO  L138     BoogieDeclarations]: Found implementation of procedure actualBalanceOf~address_FreezableToken
[2020-11-24 21:43:17,334 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingBalanceOf~address_FreezableToken
[2020-11-24 21:43:17,334 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingBalanceOf~address_FreezableToken
[2020-11-24 21:43:17,334 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingCount~address_FreezableToken
[2020-11-24 21:43:17,334 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingCount~address_FreezableToken
[2020-11-24 21:43:17,334 INFO  L130     BoogieDeclarations]: Found specification of procedure getFreezing~address~uint256_FreezableToken
[2020-11-24 21:43:17,335 INFO  L138     BoogieDeclarations]: Found implementation of procedure getFreezing~address~uint256_FreezableToken
[2020-11-24 21:43:17,335 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeTo~address~uint256~uint64_FreezableToken
[2020-11-24 21:43:17,335 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeTo~address~uint256~uint64_FreezableToken
[2020-11-24 21:43:17,335 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseOnce_FreezableToken
[2020-11-24 21:43:17,335 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseOnce_FreezableToken
[2020-11-24 21:43:17,335 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseAll_FreezableToken
[2020-11-24 21:43:17,335 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseAll_FreezableToken
[2020-11-24 21:43:17,335 INFO  L130     BoogieDeclarations]: Found specification of procedure toKey~address~uint256_FreezableToken__success
[2020-11-24 21:43:17,335 INFO  L130     BoogieDeclarations]: Found specification of procedure freeze~address~uint64_FreezableToken__success
[2020-11-24 21:43:17,336 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken_NoBaseCtor__success
[2020-11-24 21:43:17,336 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken
[2020-11-24 21:43:17,336 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken
[2020-11-24 21:43:17,336 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken
[2020-11-24 21:43:17,336 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken
[2020-11-24 21:43:17,336 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_BurnableToken__success
[2020-11-24 21:43:17,336 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-24 21:43:17,336 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable
[2020-11-24 21:43:17,336 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable
[2020-11-24 21:43:17,336 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable
[2020-11-24 21:43:17,336 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable
[2020-11-24 21:43:17,337 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable
[2020-11-24 21:43:17,337 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable
[2020-11-24 21:43:17,337 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable
[2020-11-24 21:43:17,337 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable
[2020-11-24 21:43:17,337 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success
[2020-11-24 21:43:17,337 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken
[2020-11-24 21:43:17,337 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken
[2020-11-24 21:43:17,337 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken
[2020-11-24 21:43:17,337 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken
[2020-11-24 21:43:17,337 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts_NoBaseCtor__success
[2020-11-24 21:43:17,337 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts
[2020-11-24 21:43:17,338 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts
[2020-11-24 21:43:17,338 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_Consts
[2020-11-24 21:43:17,338 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_Consts
[2020-11-24 21:43:17,338 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_UINT8_Consts
[2020-11-24 21:43:17,338 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_UINT8_Consts
[2020-11-24 21:43:17,338 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMAL_MULTIPLIER_Consts
[2020-11-24 21:43:17,338 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMAL_MULTIPLIER_Consts
[2020-11-24 21:43:17,338 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_NAME_Consts
[2020-11-24 21:43:17,338 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_NAME_Consts
[2020-11-24 21:43:17,338 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_SYMBOL_Consts
[2020-11-24 21:43:17,339 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_SYMBOL_Consts
[2020-11-24 21:43:17,339 INFO  L130     BoogieDeclarations]: Found specification of procedure PAUSED_Consts
[2020-11-24 21:43:17,339 INFO  L138     BoogieDeclarations]: Found implementation of procedure PAUSED_Consts
[2020-11-24 21:43:17,339 INFO  L130     BoogieDeclarations]: Found specification of procedure TARGET_USER_Consts
[2020-11-24 21:43:17,339 INFO  L138     BoogieDeclarations]: Found implementation of procedure TARGET_USER_Consts
[2020-11-24 21:43:17,339 INFO  L130     BoogieDeclarations]: Found specification of procedure CONTINUE_MINTING_Consts
[2020-11-24 21:43:17,339 INFO  L138     BoogieDeclarations]: Found implementation of procedure CONTINUE_MINTING_Consts
[2020-11-24 21:43:17,339 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken_NoBaseCtor__success
[2020-11-24 21:43:17,339 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken
[2020-11-24 21:43:17,339 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken
[2020-11-24 21:43:17,340 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MainToken
[2020-11-24 21:43:17,340 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MainToken
[2020-11-24 21:43:17,340 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MainToken
[2020-11-24 21:43:17,340 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MainToken
[2020-11-24 21:43:17,340 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MainToken
[2020-11-24 21:43:17,340 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MainToken
[2020-11-24 21:43:17,340 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MainToken
[2020-11-24 21:43:17,340 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MainToken
[2020-11-24 21:43:17,340 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MainToken
[2020-11-24 21:43:17,341 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MainToken
[2020-11-24 21:43:17,341 INFO  L130     BoogieDeclarations]: Found specification of procedure init_MainToken__success
[2020-11-24 21:43:17,341 INFO  L130     BoogieDeclarations]: Found specification of procedure initialized_MainToken
[2020-11-24 21:43:17,341 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialized_MainToken
[2020-11-24 21:43:17,341 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-24 21:43:17,341 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-24 21:43:17,341 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-24 21:43:17,341 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-24 21:43:17,341 INFO  L130     BoogieDeclarations]: Found specification of procedure canMint_pre__success
[2020-11-24 21:43:17,341 INFO  L130     BoogieDeclarations]: Found specification of procedure hasMintPermission_pre__success
[2020-11-24 21:43:17,342 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__success
[2020-11-24 21:43:17,342 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__success
[2020-11-24 21:43:17,342 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Basic
[2020-11-24 21:43:17,342 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Basic
[2020-11-24 21:43:17,342 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-24 21:43:17,342 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-24 21:43:17,342 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BasicToken
[2020-11-24 21:43:17,342 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BasicToken
[2020-11-24 21:43:17,342 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-24 21:43:17,342 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-24 21:43:17,343 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_StandardToken
[2020-11-24 21:43:17,343 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_StandardToken
[2020-11-24 21:43:17,343 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-24 21:43:17,343 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-24 21:43:17,343 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MintableToken
[2020-11-24 21:43:17,343 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MintableToken
[2020-11-24 21:43:17,343 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_FreezableToken
[2020-11-24 21:43:17,343 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_FreezableToken
[2020-11-24 21:43:17,343 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BurnableToken
[2020-11-24 21:43:17,343 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BurnableToken
[2020-11-24 21:43:17,343 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Pausable
[2020-11-24 21:43:17,344 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Pausable
[2020-11-24 21:43:17,344 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_FreezableMintableToken
[2020-11-24 21:43:17,344 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_FreezableMintableToken
[2020-11-24 21:43:17,344 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Consts
[2020-11-24 21:43:17,344 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Consts
[2020-11-24 21:43:17,344 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MainToken
[2020-11-24 21:43:17,344 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-24 21:43:17,344 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-24 21:43:17,344 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-24 21:43:17,344 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__success
[2020-11-24 21:43:17,345 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__fail
[2020-11-24 21:43:17,345 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 21:43:17,345 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-24 21:43:17,345 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-24 21:43:17,345 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 21:43:17,345 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 21:43:17,345 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 21:43:17,345 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 21:43:17,345 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-24 21:43:17,345 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__success
[2020-11-24 21:43:17,345 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__fail
[2020-11-24 21:43:17,345 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__success
[2020-11-24 21:43:17,346 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__fail
[2020-11-24 21:43:17,346 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__success
[2020-11-24 21:43:17,346 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__fail
[2020-11-24 21:43:17,346 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__success
[2020-11-24 21:43:17,346 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__fail
[2020-11-24 21:43:17,346 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-24 21:43:17,346 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-24 21:43:17,346 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-24 21:43:17,346 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-24 21:43:17,346 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__success
[2020-11-24 21:43:17,346 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__fail
[2020-11-24 21:43:17,347 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-24 21:43:17,347 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-24 21:43:17,347 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__success
[2020-11-24 21:43:17,347 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__fail
[2020-11-24 21:43:17,347 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__success
[2020-11-24 21:43:17,347 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__fail
[2020-11-24 21:43:17,347 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-24 21:43:17,347 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-24 21:43:17,347 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-24 21:43:17,347 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-24 21:43:17,347 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-24 21:43:17,347 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-24 21:43:17,348 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-24 21:43:17,348 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__success
[2020-11-24 21:43:17,348 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__fail
[2020-11-24 21:43:17,348 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-24 21:43:17,348 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-24 21:43:17,348 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__fail
[2020-11-24 21:43:17,348 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-24 21:43:17,348 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-24 21:43:17,348 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-24 21:43:17,348 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__success
[2020-11-24 21:43:17,348 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__fail
[2020-11-24 21:43:17,348 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__success
[2020-11-24 21:43:17,349 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__fail
[2020-11-24 21:43:17,349 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken__success
[2020-11-24 21:43:17,349 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken__fail
[2020-11-24 21:43:17,349 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken__success
[2020-11-24 21:43:17,349 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken__fail
[2020-11-24 21:43:17,349 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken_NoBaseCtor__fail
[2020-11-24 21:43:17,349 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken__success
[2020-11-24 21:43:17,349 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken__fail
[2020-11-24 21:43:17,349 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FreezableToken__success
[2020-11-24 21:43:17,349 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FreezableToken__fail
[2020-11-24 21:43:17,349 INFO  L130     BoogieDeclarations]: Found specification of procedure actualBalanceOf~address_FreezableToken__success
[2020-11-24 21:43:17,349 INFO  L130     BoogieDeclarations]: Found specification of procedure actualBalanceOf~address_FreezableToken__fail
[2020-11-24 21:43:17,350 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingBalanceOf~address_FreezableToken__success
[2020-11-24 21:43:17,350 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingBalanceOf~address_FreezableToken__fail
[2020-11-24 21:43:17,350 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingCount~address_FreezableToken__success
[2020-11-24 21:43:17,350 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingCount~address_FreezableToken__fail
[2020-11-24 21:43:17,350 INFO  L130     BoogieDeclarations]: Found specification of procedure getFreezing~address~uint256_FreezableToken__success
[2020-11-24 21:43:17,350 INFO  L130     BoogieDeclarations]: Found specification of procedure getFreezing~address~uint256_FreezableToken__fail
[2020-11-24 21:43:17,350 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeTo~address~uint256~uint64_FreezableToken__success
[2020-11-24 21:43:17,350 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeTo~address~uint256~uint64_FreezableToken__fail
[2020-11-24 21:43:17,350 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseOnce_FreezableToken__success
[2020-11-24 21:43:17,350 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseOnce_FreezableToken__fail
[2020-11-24 21:43:17,350 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseAll_FreezableToken__success
[2020-11-24 21:43:17,350 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseAll_FreezableToken__fail
[2020-11-24 21:43:17,351 INFO  L130     BoogieDeclarations]: Found specification of procedure toKey~address~uint256_FreezableToken__fail
[2020-11-24 21:43:17,351 INFO  L130     BoogieDeclarations]: Found specification of procedure freeze~address~uint64_FreezableToken__fail
[2020-11-24 21:43:17,351 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken_NoBaseCtor__fail
[2020-11-24 21:43:17,351 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken__success
[2020-11-24 21:43:17,351 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken__fail
[2020-11-24 21:43:17,351 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken__success
[2020-11-24 21:43:17,351 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken__fail
[2020-11-24 21:43:17,351 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_BurnableToken__fail
[2020-11-24 21:43:17,351 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-24 21:43:17,351 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__success
[2020-11-24 21:43:17,351 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__fail
[2020-11-24 21:43:17,352 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__success
[2020-11-24 21:43:17,352 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__fail
[2020-11-24 21:43:17,352 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__success
[2020-11-24 21:43:17,352 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__fail
[2020-11-24 21:43:17,352 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__success
[2020-11-24 21:43:17,352 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__fail
[2020-11-24 21:43:17,352 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__fail
[2020-11-24 21:43:17,352 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken__success
[2020-11-24 21:43:17,352 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken__fail
[2020-11-24 21:43:17,352 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success
[2020-11-24 21:43:17,352 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__fail
[2020-11-24 21:43:17,352 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts_NoBaseCtor__fail
[2020-11-24 21:43:17,353 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts__success
[2020-11-24 21:43:17,353 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts__fail
[2020-11-24 21:43:17,353 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_Consts__success
[2020-11-24 21:43:17,353 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_Consts__fail
[2020-11-24 21:43:17,353 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_UINT8_Consts__success
[2020-11-24 21:43:17,353 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_UINT8_Consts__fail
[2020-11-24 21:43:17,353 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__success
[2020-11-24 21:43:17,354 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__fail
[2020-11-24 21:43:17,354 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_NAME_Consts__success
[2020-11-24 21:43:17,354 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_NAME_Consts__fail
[2020-11-24 21:43:17,354 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_SYMBOL_Consts__success
[2020-11-24 21:43:17,354 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_SYMBOL_Consts__fail
[2020-11-24 21:43:17,354 INFO  L130     BoogieDeclarations]: Found specification of procedure PAUSED_Consts__success
[2020-11-24 21:43:17,354 INFO  L130     BoogieDeclarations]: Found specification of procedure PAUSED_Consts__fail
[2020-11-24 21:43:17,354 INFO  L130     BoogieDeclarations]: Found specification of procedure TARGET_USER_Consts__success
[2020-11-24 21:43:17,354 INFO  L130     BoogieDeclarations]: Found specification of procedure TARGET_USER_Consts__fail
[2020-11-24 21:43:17,354 INFO  L130     BoogieDeclarations]: Found specification of procedure CONTINUE_MINTING_Consts__success
[2020-11-24 21:43:17,354 INFO  L130     BoogieDeclarations]: Found specification of procedure CONTINUE_MINTING_Consts__fail
[2020-11-24 21:43:17,355 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken_NoBaseCtor__fail
[2020-11-24 21:43:17,355 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken__success
[2020-11-24 21:43:17,355 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken__fail
[2020-11-24 21:43:17,355 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MainToken__success
[2020-11-24 21:43:17,355 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MainToken__fail
[2020-11-24 21:43:17,355 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MainToken__success
[2020-11-24 21:43:17,355 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MainToken__fail
[2020-11-24 21:43:17,355 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MainToken__success
[2020-11-24 21:43:17,355 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MainToken__fail
[2020-11-24 21:43:17,355 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MainToken__success
[2020-11-24 21:43:17,355 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MainToken__fail
[2020-11-24 21:43:17,356 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MainToken__success
[2020-11-24 21:43:17,356 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MainToken__fail
[2020-11-24 21:43:17,356 INFO  L130     BoogieDeclarations]: Found specification of procedure init_MainToken__fail
[2020-11-24 21:43:17,356 INFO  L130     BoogieDeclarations]: Found specification of procedure initialized_MainToken__success
[2020-11-24 21:43:17,356 INFO  L130     BoogieDeclarations]: Found specification of procedure initialized_MainToken__fail
[2020-11-24 21:43:17,356 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-24 21:43:17,356 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-24 21:43:17,356 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-24 21:43:17,356 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-24 21:43:17,356 INFO  L130     BoogieDeclarations]: Found specification of procedure canMint_pre__fail
[2020-11-24 21:43:17,356 INFO  L130     BoogieDeclarations]: Found specification of procedure hasMintPermission_pre__fail
[2020-11-24 21:43:17,356 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__fail
[2020-11-24 21:43:17,357 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__fail
[2020-11-24 21:43:17,357 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-24 21:43:17,357 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-24 21:43:17,357 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-24 21:43:17,357 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-24 21:43:17,357 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__fail
[2020-11-24 21:43:17,357 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__success
[2020-11-24 21:43:17,357 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 21:43:17,357 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 21:43:17,357 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-24 21:43:17,357 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-24 21:43:17,357 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 21:43:17,357 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 21:43:17,358 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 21:43:17,358 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 21:43:17,358 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 21:43:17,358 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 21:43:17,358 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 21:43:17,358 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 21:43:17,358 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-24 21:43:17,358 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-24 21:43:17,358 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__fail
[2020-11-24 21:43:17,358 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__success
[2020-11-24 21:43:17,358 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__fail
[2020-11-24 21:43:17,358 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__success
[2020-11-24 21:43:17,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__fail
[2020-11-24 21:43:17,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__success
[2020-11-24 21:43:17,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__fail
[2020-11-24 21:43:17,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__success
[2020-11-24 21:43:17,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-24 21:43:17,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-24 21:43:17,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-24 21:43:17,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-24 21:43:17,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-24 21:43:17,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-24 21:43:17,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__fail
[2020-11-24 21:43:17,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__success
[2020-11-24 21:43:17,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-24 21:43:17,360 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-24 21:43:17,360 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__fail
[2020-11-24 21:43:17,360 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__success
[2020-11-24 21:43:17,360 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__fail
[2020-11-24 21:43:17,360 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__success
[2020-11-24 21:43:17,360 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-24 21:43:17,360 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-24 21:43:17,360 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-24 21:43:17,360 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-24 21:43:17,360 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-24 21:43:17,360 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-24 21:43:17,360 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-24 21:43:17,361 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-24 21:43:17,361 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__fail
[2020-11-24 21:43:17,361 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__success
[2020-11-24 21:43:17,361 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-24 21:43:17,361 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-24 21:43:17,361 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__fail
[2020-11-24 21:43:17,361 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__success
[2020-11-24 21:43:17,361 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-24 21:43:17,361 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-24 21:43:17,361 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-24 21:43:17,361 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-24 21:43:17,361 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__fail
[2020-11-24 21:43:17,361 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__success
[2020-11-24 21:43:17,362 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__fail
[2020-11-24 21:43:17,362 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__success
[2020-11-24 21:43:17,362 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken__fail
[2020-11-24 21:43:17,362 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken__success
[2020-11-24 21:43:17,362 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken__fail
[2020-11-24 21:43:17,362 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken__success
[2020-11-24 21:43:17,362 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken_NoBaseCtor__fail
[2020-11-24 21:43:17,362 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken_NoBaseCtor__success
[2020-11-24 21:43:17,363 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken__fail
[2020-11-24 21:43:17,363 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken__success
[2020-11-24 21:43:17,363 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FreezableToken__fail
[2020-11-24 21:43:17,363 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FreezableToken__success
[2020-11-24 21:43:17,363 INFO  L138     BoogieDeclarations]: Found implementation of procedure actualBalanceOf~address_FreezableToken__fail
[2020-11-24 21:43:17,363 INFO  L138     BoogieDeclarations]: Found implementation of procedure actualBalanceOf~address_FreezableToken__success
[2020-11-24 21:43:17,364 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingBalanceOf~address_FreezableToken__fail
[2020-11-24 21:43:17,364 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingBalanceOf~address_FreezableToken__success
[2020-11-24 21:43:17,364 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingCount~address_FreezableToken__fail
[2020-11-24 21:43:17,364 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingCount~address_FreezableToken__success
[2020-11-24 21:43:17,364 INFO  L138     BoogieDeclarations]: Found implementation of procedure getFreezing~address~uint256_FreezableToken__fail
[2020-11-24 21:43:17,364 INFO  L138     BoogieDeclarations]: Found implementation of procedure getFreezing~address~uint256_FreezableToken__success
[2020-11-24 21:43:17,364 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeTo~address~uint256~uint64_FreezableToken__fail
[2020-11-24 21:43:17,365 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeTo~address~uint256~uint64_FreezableToken__success
[2020-11-24 21:43:17,365 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseOnce_FreezableToken__fail
[2020-11-24 21:43:17,365 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseOnce_FreezableToken__success
[2020-11-24 21:43:17,365 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseAll_FreezableToken__fail
[2020-11-24 21:43:17,365 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseAll_FreezableToken__success
[2020-11-24 21:43:17,365 INFO  L138     BoogieDeclarations]: Found implementation of procedure toKey~address~uint256_FreezableToken__fail
[2020-11-24 21:43:17,365 INFO  L138     BoogieDeclarations]: Found implementation of procedure toKey~address~uint256_FreezableToken__success
[2020-11-24 21:43:17,365 INFO  L138     BoogieDeclarations]: Found implementation of procedure freeze~address~uint64_FreezableToken__fail
[2020-11-24 21:43:17,366 INFO  L138     BoogieDeclarations]: Found implementation of procedure freeze~address~uint64_FreezableToken__success
[2020-11-24 21:43:17,366 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken_NoBaseCtor__fail
[2020-11-24 21:43:17,366 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken_NoBaseCtor__success
[2020-11-24 21:43:17,366 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken__fail
[2020-11-24 21:43:17,366 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken__success
[2020-11-24 21:43:17,366 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken__fail
[2020-11-24 21:43:17,366 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken__success
[2020-11-24 21:43:17,367 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_BurnableToken__fail
[2020-11-24 21:43:17,367 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_BurnableToken__success
[2020-11-24 21:43:17,367 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-24 21:43:17,367 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-24 21:43:17,367 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__fail
[2020-11-24 21:43:17,367 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__success
[2020-11-24 21:43:17,367 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__fail
[2020-11-24 21:43:17,367 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__success
[2020-11-24 21:43:17,368 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__fail
[2020-11-24 21:43:17,368 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__success
[2020-11-24 21:43:17,368 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__fail
[2020-11-24 21:43:17,368 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__success
[2020-11-24 21:43:17,368 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__fail
[2020-11-24 21:43:17,368 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success
[2020-11-24 21:43:17,368 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken__fail
[2020-11-24 21:43:17,368 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken__success
[2020-11-24 21:43:17,369 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__fail
[2020-11-24 21:43:17,369 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success
[2020-11-24 21:43:17,369 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts_NoBaseCtor__fail
[2020-11-24 21:43:17,369 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts_NoBaseCtor__success
[2020-11-24 21:43:17,369 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts__fail
[2020-11-24 21:43:17,369 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts__success
[2020-11-24 21:43:17,369 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_Consts__fail
[2020-11-24 21:43:17,369 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_Consts__success
[2020-11-24 21:43:17,370 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_UINT8_Consts__fail
[2020-11-24 21:43:17,370 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_UINT8_Consts__success
[2020-11-24 21:43:17,370 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__fail
[2020-11-24 21:43:17,370 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__success
[2020-11-24 21:43:17,370 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_NAME_Consts__fail
[2020-11-24 21:43:17,370 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_NAME_Consts__success
[2020-11-24 21:43:17,370 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_SYMBOL_Consts__fail
[2020-11-24 21:43:17,371 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_SYMBOL_Consts__success
[2020-11-24 21:43:17,371 INFO  L138     BoogieDeclarations]: Found implementation of procedure PAUSED_Consts__fail
[2020-11-24 21:43:17,371 INFO  L138     BoogieDeclarations]: Found implementation of procedure PAUSED_Consts__success
[2020-11-24 21:43:17,371 INFO  L138     BoogieDeclarations]: Found implementation of procedure TARGET_USER_Consts__fail
[2020-11-24 21:43:17,371 INFO  L138     BoogieDeclarations]: Found implementation of procedure TARGET_USER_Consts__success
[2020-11-24 21:43:17,371 INFO  L138     BoogieDeclarations]: Found implementation of procedure CONTINUE_MINTING_Consts__fail
[2020-11-24 21:43:17,371 INFO  L138     BoogieDeclarations]: Found implementation of procedure CONTINUE_MINTING_Consts__success
[2020-11-24 21:43:17,371 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken_NoBaseCtor__fail
[2020-11-24 21:43:17,371 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken_NoBaseCtor__success
[2020-11-24 21:43:17,372 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken__fail
[2020-11-24 21:43:17,372 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken__success
[2020-11-24 21:43:17,372 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MainToken__fail
[2020-11-24 21:43:17,372 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MainToken__success
[2020-11-24 21:43:17,372 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MainToken__fail
[2020-11-24 21:43:17,372 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MainToken__success
[2020-11-24 21:43:17,372 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MainToken__fail
[2020-11-24 21:43:17,372 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MainToken__success
[2020-11-24 21:43:17,373 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MainToken__fail
[2020-11-24 21:43:17,373 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MainToken__success
[2020-11-24 21:43:17,373 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MainToken__fail
[2020-11-24 21:43:17,373 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MainToken__success
[2020-11-24 21:43:17,373 INFO  L138     BoogieDeclarations]: Found implementation of procedure init_MainToken__fail
[2020-11-24 21:43:17,373 INFO  L138     BoogieDeclarations]: Found implementation of procedure init_MainToken__success
[2020-11-24 21:43:17,373 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialized_MainToken__fail
[2020-11-24 21:43:17,373 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialized_MainToken__success
[2020-11-24 21:43:17,374 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-24 21:43:17,374 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-24 21:43:17,374 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-24 21:43:17,374 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-24 21:43:17,374 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-24 21:43:17,374 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-24 21:43:17,374 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-24 21:43:17,374 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-24 21:43:17,375 INFO  L138     BoogieDeclarations]: Found implementation of procedure canMint_pre__fail
[2020-11-24 21:43:17,375 INFO  L138     BoogieDeclarations]: Found implementation of procedure canMint_pre__success
[2020-11-24 21:43:17,375 INFO  L138     BoogieDeclarations]: Found implementation of procedure hasMintPermission_pre__fail
[2020-11-24 21:43:17,375 INFO  L138     BoogieDeclarations]: Found implementation of procedure hasMintPermission_pre__success
[2020-11-24 21:43:17,375 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__fail
[2020-11-24 21:43:17,375 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__success
[2020-11-24 21:43:17,375 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__fail
[2020-11-24 21:43:17,375 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__success
[2020-11-24 21:43:17,375 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Basic
[2020-11-24 21:43:17,376 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Basic
[2020-11-24 21:43:17,376 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-24 21:43:17,376 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-24 21:43:17,376 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BasicToken
[2020-11-24 21:43:17,376 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BasicToken
[2020-11-24 21:43:17,376 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-24 21:43:17,376 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-24 21:43:17,376 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_StandardToken
[2020-11-24 21:43:17,376 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_StandardToken
[2020-11-24 21:43:17,376 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-24 21:43:17,376 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-24 21:43:17,376 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MintableToken
[2020-11-24 21:43:17,377 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MintableToken
[2020-11-24 21:43:17,377 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_FreezableToken
[2020-11-24 21:43:17,377 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_FreezableToken
[2020-11-24 21:43:17,377 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BurnableToken
[2020-11-24 21:43:17,377 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BurnableToken
[2020-11-24 21:43:17,377 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Pausable
[2020-11-24 21:43:17,377 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Pausable
[2020-11-24 21:43:17,377 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_FreezableMintableToken
[2020-11-24 21:43:17,377 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_FreezableMintableToken
[2020-11-24 21:43:17,377 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Consts
[2020-11-24 21:43:17,377 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Consts
[2020-11-24 21:43:17,377 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MainToken
[2020-11-24 21:43:17,377 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-24 21:43:17,378 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-24 21:43:17,378 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-24 21:43:17,733 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 21:43:17,734 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 21:43:17,734 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 21:43:18,886 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-24 21:43:18,887 INFO  L286             CfgBuilder]: Removed 13 assue(true) statements.
[2020-11-24 21:43:18,889 INFO  L202        PluginConnector]: Adding new model MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_balanceof.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 09:43:18 BoogieIcfgContainer
[2020-11-24 21:43:18,889 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:43:17" (2/2) ...
[2020-11-24 21:43:18,890 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-24 21:43:18,890 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@33cbfaf6 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 09:43:18, skipping insertion in model container
[2020-11-24 21:43:18,890 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-24 21:43:18,890 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-24 21:43:18,890 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-24 21:43:18,891 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-24 21:43:18,891 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:43:16" (1/3) ...
[2020-11-24 21:43:18,891 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@46bea845 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 09:43:18, skipping insertion in model container
[2020-11-24 21:43:18,891 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:43:17" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-24 21:43:18,921 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 09:43:18 NWAContainer
[2020-11-24 21:43:18,921 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-24 21:43:18,921 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-24 21:43:18,921 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-24 21:43:18,922 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-24 21:43:18,922 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_balanceof.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 09:43:18" (3/4) ...
[2020-11-24 21:43:18,923 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@3179b3d6 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 09:43:18, skipping insertion in model container
[2020-11-24 21:43:18,923 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 09:43:18" (4/4) ...
[2020-11-24 21:43:18,925 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-24 21:43:18,933 INFO  L110   BuchiProductObserver]: Initial RCFG 5384 locations, 7560 edges
[2020-11-24 21:43:18,933 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-24 21:43:18,948 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-24 21:43:23,111 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-24 21:43:23,127 INFO  L110   BuchiProductObserver]: BuchiProgram size 13448 locations, 24717 edges
[2020-11-24 21:43:23,127 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 09:43:23 BoogieIcfgContainer
[2020-11-24 21:43:23,127 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-24 21:43:23,128 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-24 21:43:23,128 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-24 21:43:23,129 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-24 21:43:23,129 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 09:43:23" (1/1) ...
[2020-11-24 21:43:23,423 INFO  L313           BlockEncoder]: Initial Icfg 13448 locations, 24717 edges
[2020-11-24 21:43:23,423 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-24 21:43:23,424 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-24 21:43:23,424 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-24 21:43:23,424 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-24 21:43:23,458 INFO  L70    emoveInfeasibleEdges]: Removed 315 edges and 29 locations because of local infeasibility
[2020-11-24 21:43:23,482 INFO  L70        RemoveSinkStates]: Removed 170 edges and 113 locations by removing sink states
[2020-11-24 21:43:23,513 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-24 21:43:23,523 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-24 21:43:23,534 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-24 21:43:23,534 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-24 21:43:23,541 INFO  L313           BlockEncoder]: Encoded RCFG 13238 locations, 24131 edges
[2020-11-24 21:43:23,542 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 09:43:23 BasicIcfg
[2020-11-24 21:43:23,542 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-24 21:43:23,542 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-24 21:43:23,542 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-24 21:43:23,545 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-24 21:43:23,545 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:43:23,545 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:43:16" (1/6) ...
[2020-11-24 21:43:23,546 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@bf80389 and model type MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_balanceof.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 09:43:23, skipping insertion in model container
[2020-11-24 21:43:23,546 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:43:23,547 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:43:17" (2/6) ...
[2020-11-24 21:43:23,547 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@bf80389 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 09:43:23, skipping insertion in model container
[2020-11-24 21:43:23,547 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:43:23,547 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_balanceof.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 09:43:18" (3/6) ...
[2020-11-24 21:43:23,548 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@bf80389 and model type MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_balanceof.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 09:43:23, skipping insertion in model container
[2020-11-24 21:43:23,548 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:43:23,548 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 09:43:18" (4/6) ...
[2020-11-24 21:43:23,548 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@bf80389 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 09:43:23, skipping insertion in model container
[2020-11-24 21:43:23,548 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:43:23,548 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 09:43:23" (5/6) ...
[2020-11-24 21:43:23,548 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@bf80389 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 24.11 09:43:23, skipping insertion in model container
[2020-11-24 21:43:23,549 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:43:23,549 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 09:43:23" (6/6) ...
[2020-11-24 21:43:23,550 INFO  L404   chiAutomizerObserver]: Analyzing ICFG MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_balanceof.bpl_BEv2
[2020-11-24 21:43:23,589 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-24 21:43:23,589 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-24 21:43:23,589 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-24 21:43:23,589 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-24 21:43:23,589 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-24 21:43:23,589 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-24 21:43:23,589 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-24 21:43:23,589 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-24 21:43:23,590 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-24 21:43:23,690 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 13238 states.
[2020-11-24 21:43:23,801 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:43:23,801 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:43:23,801 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:43:23,811 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:43:23,812 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:43:23,812 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-24 21:43:23,812 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 13238 states.
[2020-11-24 21:43:23,871 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:43:23,871 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:43:23,871 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:43:23,873 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:43:23,873 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14767]              assume null == 0;
[L14768]  CALL        call this := FreshRefGenerator__success();
[L6697]               havoc newRef;
[L6698]               assume Alloc[newRef] == false;
[L6699]               Alloc[newRef] := true;
[L6700]               assume newRef != null;
[L14768]  RET         call this := FreshRefGenerator__success();
[L14769]              assume now >= 0;
[L14770]              assume DType[this] == MainToken;
[L14771]              assume msgvalue_MSG == 0;
[L14772]              gas := gas - 53000;
[L14773]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4385]               havoc __exception;
[L4386]               revert := false;
[L4387]   COND FALSE  !(__exception)
[L4426]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9506]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9284]               assume msgsender_MSG != null;
[L9285]               Balance[this] := 0;
[L9286]               TOKEN_DECIMALS_Consts[this] := 18;
[L9287]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9288]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9289]               TOKEN_NAME_Consts[this] := -1298559559;
[L9290]               TOKEN_SYMBOL_Consts[this] := 120673937;
[L9291]               PAUSED_Consts[this] := false;
[L9292]               __var_52 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9293]               TARGET_USER_Consts[this] := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9294]               CONTINUE_MINTING_Consts[this] := false;
[L9308]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]   COND FALSE  !(revert)
[L9506]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9507]   COND TRUE   revert
[L4426]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4427]               assume !revert && gas >= 0;
[L14773]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14774]              assume !revert && gas >= 0;

Loop:
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND TRUE   choice == 38
[L14520]              gas := gas - 21000;
[L14521]  COND FALSE  !(gas >= 0)
[L14777]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:43:23,900 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:43:23,900 INFO  L82        PathProgramCache]: Analyzing trace with hash -1087413238, now seen corresponding path program 1 times
[2020-11-24 21:43:23,905 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:43:23,931 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:43:23,977 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 21:43:23,979 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:43:23,979 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 21:43:24,397 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:43:24,406 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 21:43:24,406 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 21:43:24,407 INFO  L87              Difference]: Start difference. First operand 13238 states. Second operand 3 states.
[2020-11-24 21:43:24,944 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:43:24,944 INFO  L93              Difference]: Finished difference Result 8276 states and 9691 transitions.
[2020-11-24 21:43:24,944 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 21:43:24,945 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8276 states and 9691 transitions.
[2020-11-24 21:43:24,980 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:43:25,025 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8276 states to 8272 states and 9683 transitions.
[2020-11-24 21:43:25,026 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-24 21:43:25,030 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1857
[2020-11-24 21:43:25,030 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8272 states and 9683 transitions.
[2020-11-24 21:43:25,047 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:43:25,048 INFO  L728         BuchiCegarLoop]: Abstraction has 8272 states and 9683 transitions.
[2020-11-24 21:43:25,068 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8272 states and 9683 transitions.
[2020-11-24 21:43:25,168 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8272 to 8272.
[2020-11-24 21:43:25,169 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8272 states.
[2020-11-24 21:43:25,182 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8272 states to 8272 states and 9683 transitions.
[2020-11-24 21:43:25,183 INFO  L751         BuchiCegarLoop]: Abstraction has 8272 states and 9683 transitions.
[2020-11-24 21:43:25,183 INFO  L631         BuchiCegarLoop]: Abstraction has 8272 states and 9683 transitions.
[2020-11-24 21:43:25,183 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-24 21:43:25,183 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8272 states and 9683 transitions.
[2020-11-24 21:43:25,198 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:43:25,198 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:43:25,198 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:43:25,200 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:43:25,200 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14767]              assume null == 0;
[L14768]  CALL        call this := FreshRefGenerator__success();
[L6697]               havoc newRef;
[L6698]               assume Alloc[newRef] == false;
[L6699]               Alloc[newRef] := true;
[L6700]               assume newRef != null;
[L14768]  RET         call this := FreshRefGenerator__success();
[L14769]              assume now >= 0;
[L14770]              assume DType[this] == MainToken;
[L14771]              assume msgvalue_MSG == 0;
[L14772]              gas := gas - 53000;
[L14773]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4385]               havoc __exception;
[L4386]               revert := false;
[L4387]   COND FALSE  !(__exception)
[L4426]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9506]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9284]               assume msgsender_MSG != null;
[L9285]               Balance[this] := 0;
[L9286]               TOKEN_DECIMALS_Consts[this] := 18;
[L9287]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9288]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9289]               TOKEN_NAME_Consts[this] := -1298559559;
[L9290]               TOKEN_SYMBOL_Consts[this] := 120673937;
[L9291]               PAUSED_Consts[this] := false;
[L9292]               __var_52 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9293]               TARGET_USER_Consts[this] := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9294]               CONTINUE_MINTING_Consts[this] := false;
[L9308]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]   COND FALSE  !(revert)
[L9506]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9507]   COND TRUE   revert
[L4426]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4427]               assume !revert && gas >= 0;
[L14773]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14774]              assume !revert && gas >= 0;
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND TRUE   choice == 37
[L14526]              gas := gas - 21000;
[L14527]  COND TRUE   gas >= 0
[L14528]              assume msgvalue_MSG == 0;
[L14529]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7706]   COND FALSE  !(DType[this] == MainToken)
[L7711]   COND TRUE   DType[this] == FreezableMintableToken
[L7712]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6961]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7712]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7713]   COND TRUE   revert
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14529]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14777]  RET         call CorralChoice_MainToken(this);

Loop:
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND TRUE   choice == 37
[L14526]              gas := gas - 21000;
[L14527]  COND TRUE   gas >= 0
[L14528]              assume msgvalue_MSG == 0;
[L14529]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7706]   COND FALSE  !(DType[this] == MainToken)
[L7711]   COND TRUE   DType[this] == FreezableMintableToken
[L7712]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6961]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7712]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7713]   COND TRUE   revert
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14529]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14777]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:43:25,203 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:43:25,204 INFO  L82        PathProgramCache]: Analyzing trace with hash 799321807, now seen corresponding path program 1 times
[2020-11-24 21:43:25,205 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:43:25,218 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:43:25,251 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 21:43:25,251 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:43:25,251 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 21:43:25,253 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:43:25,253 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 21:43:25,253 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 21:43:25,253 INFO  L87              Difference]: Start difference. First operand 8272 states and 9683 transitions. cyclomatic complexity: 1431 Second operand 3 states.
[2020-11-24 21:43:25,444 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:43:25,444 INFO  L93              Difference]: Finished difference Result 9736 states and 11143 transitions.
[2020-11-24 21:43:25,444 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 21:43:25,444 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9736 states and 11143 transitions.
[2020-11-24 21:43:25,471 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 21:43:25,524 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9736 states to 9736 states and 11143 transitions.
[2020-11-24 21:43:25,524 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2275
[2020-11-24 21:43:25,526 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2275
[2020-11-24 21:43:25,526 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9736 states and 11143 transitions.
[2020-11-24 21:43:25,538 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:43:25,538 INFO  L728         BuchiCegarLoop]: Abstraction has 9736 states and 11143 transitions.
[2020-11-24 21:43:25,550 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9736 states and 11143 transitions.
[2020-11-24 21:43:25,673 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9736 to 8648.
[2020-11-24 21:43:25,673 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8648 states.
[2020-11-24 21:43:25,688 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8648 states to 8648 states and 9789 transitions.
[2020-11-24 21:43:25,688 INFO  L751         BuchiCegarLoop]: Abstraction has 8648 states and 9789 transitions.
[2020-11-24 21:43:25,688 INFO  L631         BuchiCegarLoop]: Abstraction has 8648 states and 9789 transitions.
[2020-11-24 21:43:25,688 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-24 21:43:25,688 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8648 states and 9789 transitions.
[2020-11-24 21:43:25,705 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:43:25,705 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:43:25,705 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:43:25,714 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:43:25,714 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14767]              assume null == 0;
[L14768]  CALL        call this := FreshRefGenerator__success();
[L6697]               havoc newRef;
[L6698]               assume Alloc[newRef] == false;
[L6699]               Alloc[newRef] := true;
[L6700]               assume newRef != null;
[L14768]  RET         call this := FreshRefGenerator__success();
[L14769]              assume now >= 0;
[L14770]              assume DType[this] == MainToken;
[L14771]              assume msgvalue_MSG == 0;
[L14772]              gas := gas - 53000;
[L14773]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4385]               havoc __exception;
[L4386]               revert := false;
[L4387]   COND FALSE  !(__exception)
[L4426]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9506]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9284]               assume msgsender_MSG != null;
[L9285]               Balance[this] := 0;
[L9286]               TOKEN_DECIMALS_Consts[this] := 18;
[L9287]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9288]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9289]               TOKEN_NAME_Consts[this] := -1298559559;
[L9290]               TOKEN_SYMBOL_Consts[this] := 120673937;
[L9291]               PAUSED_Consts[this] := false;
[L9292]               __var_52 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9293]               TARGET_USER_Consts[this] := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9294]               CONTINUE_MINTING_Consts[this] := false;
[L9308]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]   COND FALSE  !(revert)
[L9506]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9507]   COND FALSE  !(revert)
[L9510]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9510]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9511]   COND FALSE  !(revert)
[L9514]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9514]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9515]   COND FALSE  !(revert)
[L9518]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9518]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9519]   COND FALSE  !(revert)
[L9522]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9522]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9523]   COND FALSE  !(revert)
[L9526]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9526]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9527]   COND FALSE  !(revert)
[L9530]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9530]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9534]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9093]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9093]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9094]   COND FALSE  !(revert)
[L9097]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9097]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9098]   COND FALSE  !(revert)
[L9101]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9101]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9102]   COND FALSE  !(revert)
[L9105]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9105]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9106]   COND FALSE  !(revert)
[L9109]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9109]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9110]   COND FALSE  !(revert)
[L9113]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9113]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9114]   COND FALSE  !(revert)
[L9117]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9117]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9050]               assume msgsender_MSG != null;
[L9051]               Balance[this] := 0;
[L9121]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9538]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8837]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L8837]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]   COND FALSE  !(revert)
[L8841]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L8841]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8842]   COND FALSE  !(revert)
[L8845]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8814]               assume msgsender_MSG != null;
[L8815]               Balance[this] := 0;
[L8845]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8846]   COND FALSE  !(revert)
[L9542]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8963]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L8963]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8964]   COND FALSE  !(revert)
[L8967]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8943]               assume msgsender_MSG != null;
[L8944]               Balance[this] := 0;
[L8945]               paused_Pausable[this] := false;
[L8967]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8968]   COND FALSE  !(revert)
[L9546]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9434]               assume msgsender_MSG != null;
[L9435]               Balance[this] := 0;
[L9436]               initialized_MainToken[this] := false;
[L9438]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9754]   COND TRUE   !!initialized_MainToken[this]
[L9755]               revert := true;
[L9438]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9439]   COND TRUE   revert
[L9550]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L4426]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4427]               assume !revert && gas >= 0;
[L14773]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14774]              assume !revert && gas >= 0;
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND TRUE   choice == 37
[L14526]              gas := gas - 21000;
[L14527]  COND TRUE   gas >= 0
[L14528]              assume msgvalue_MSG == 0;
[L14529]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7706]   COND TRUE   DType[this] == MainToken
[L7707]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6961]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7707]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7708]   COND FALSE  !(revert)
[L7724]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14529]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14777]  RET         call CorralChoice_MainToken(this);

Loop:
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND TRUE   choice == 37
[L14526]              gas := gas - 21000;
[L14527]  COND TRUE   gas >= 0
[L14528]              assume msgvalue_MSG == 0;
[L14529]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7706]   COND TRUE   DType[this] == MainToken
[L7707]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6961]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7707]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7708]   COND FALSE  !(revert)
[L7724]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14529]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14777]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:43:25,728 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:43:25,729 INFO  L82        PathProgramCache]: Analyzing trace with hash -1319344747, now seen corresponding path program 1 times
[2020-11-24 21:43:25,730 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:43:25,772 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:43:26,352 INFO  L134       CoverageAnalysis]: Checked inductivity of 9823 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9823 trivial. 0 not checked.
[2020-11-24 21:43:26,352 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:43:26,352 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 21:43:26,353 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:43:26,354 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 21:43:26,354 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 21:43:26,354 INFO  L87              Difference]: Start difference. First operand 8648 states and 9789 transitions. cyclomatic complexity: 1161 Second operand 3 states.
[2020-11-24 21:43:26,547 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:43:26,547 INFO  L93              Difference]: Finished difference Result 9730 states and 10973 transitions.
[2020-11-24 21:43:26,548 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 21:43:26,548 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9730 states and 10973 transitions.
[2020-11-24 21:43:26,579 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 21:43:26,625 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9730 states to 9382 states and 10565 transitions.
[2020-11-24 21:43:26,625 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2152
[2020-11-24 21:43:26,626 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2181
[2020-11-24 21:43:26,626 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9382 states and 10565 transitions.
[2020-11-24 21:43:26,635 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:43:26,635 INFO  L728         BuchiCegarLoop]: Abstraction has 9382 states and 10565 transitions.
[2020-11-24 21:43:26,645 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9382 states and 10565 transitions.
[2020-11-24 21:43:26,721 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9382 to 8695.
[2020-11-24 21:43:26,721 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8695 states.
[2020-11-24 21:43:26,734 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8695 states to 8695 states and 9696 transitions.
[2020-11-24 21:43:26,734 INFO  L751         BuchiCegarLoop]: Abstraction has 8695 states and 9696 transitions.
[2020-11-24 21:43:26,734 INFO  L631         BuchiCegarLoop]: Abstraction has 8695 states and 9696 transitions.
[2020-11-24 21:43:26,734 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-24 21:43:26,734 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8695 states and 9696 transitions.
[2020-11-24 21:43:26,749 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 21:43:26,749 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:43:26,749 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:43:26,759 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:43:26,759 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14767]              assume null == 0;
[L14768]  CALL        call this := FreshRefGenerator__success();
[L6697]               havoc newRef;
[L6698]               assume Alloc[newRef] == false;
[L6699]               Alloc[newRef] := true;
[L6700]               assume newRef != null;
[L14768]  RET         call this := FreshRefGenerator__success();
[L14769]              assume now >= 0;
[L14770]              assume DType[this] == MainToken;
[L14771]              assume msgvalue_MSG == 0;
[L14772]              gas := gas - 53000;
[L14773]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4385]               havoc __exception;
[L4386]               revert := false;
[L4387]   COND FALSE  !(__exception)
[L4426]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9506]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9284]               assume msgsender_MSG != null;
[L9285]               Balance[this] := 0;
[L9286]               TOKEN_DECIMALS_Consts[this] := 18;
[L9287]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9288]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9289]               TOKEN_NAME_Consts[this] := -1298559559;
[L9290]               TOKEN_SYMBOL_Consts[this] := 120673937;
[L9291]               PAUSED_Consts[this] := false;
[L9292]               __var_52 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9293]               TARGET_USER_Consts[this] := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9294]               CONTINUE_MINTING_Consts[this] := false;
[L9308]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]   COND FALSE  !(revert)
[L9506]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9507]   COND FALSE  !(revert)
[L9510]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9510]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9511]   COND FALSE  !(revert)
[L9514]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9514]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9515]   COND FALSE  !(revert)
[L9518]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9518]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9519]   COND FALSE  !(revert)
[L9522]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9522]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9523]   COND FALSE  !(revert)
[L9526]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9526]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9527]   COND FALSE  !(revert)
[L9530]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9530]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9534]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9093]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9093]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9094]   COND FALSE  !(revert)
[L9097]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9097]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9098]   COND FALSE  !(revert)
[L9101]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9101]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9102]   COND FALSE  !(revert)
[L9105]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9105]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9106]   COND FALSE  !(revert)
[L9109]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9109]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9110]   COND FALSE  !(revert)
[L9113]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9113]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9114]   COND FALSE  !(revert)
[L9117]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9117]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9050]               assume msgsender_MSG != null;
[L9051]               Balance[this] := 0;
[L9121]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9538]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8837]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L8837]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]   COND FALSE  !(revert)
[L8841]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L8841]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8842]   COND FALSE  !(revert)
[L8845]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8814]               assume msgsender_MSG != null;
[L8815]               Balance[this] := 0;
[L8845]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8846]   COND FALSE  !(revert)
[L9542]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8963]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L8963]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8964]   COND FALSE  !(revert)
[L8967]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8943]               assume msgsender_MSG != null;
[L8944]               Balance[this] := 0;
[L8945]               paused_Pausable[this] := false;
[L8967]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8968]   COND FALSE  !(revert)
[L9546]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9434]               assume msgsender_MSG != null;
[L9435]               Balance[this] := 0;
[L9436]               initialized_MainToken[this] := false;
[L9438]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9754]   COND FALSE  !(!!initialized_MainToken[this])
[L9758]               initialized_MainToken[this] := true;
[L9759]   COND FALSE  !(PAUSED_Consts[this])
[L9769]               __var_57 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9770]               addresses_s1673 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9771]               __var_58 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9772]               amounts_s1673 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9773]               __var_59 := 0 % 18446744073709551616;
[L9774]               freezes_s1673 := 0 % 18446744073709551616;
[L9775]               i_s1673 := 0;
[L9776]   COND FALSE  !(i_s1673 < Length[addresses_s1673])
[L9800]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9810]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9438]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9439]   COND FALSE  !(revert)
[L9442]   COND TRUE   DType[this] == MainToken
[L9443]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7356]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12721]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7356]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   COND TRUE   DType[this] == MainToken
[L7361]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7404]               __var_11 := null;
[L7405]   COND FALSE  !(!(_newOwner_s581 != null))
[L7409]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7410]               owner_Ownable[this] := _newOwner_s581;
[L7361]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7362]   COND FALSE  !(revert)
[L9443]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9444]   COND FALSE  !(revert)
[L9550]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L4426]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4427]               assume !revert && gas >= 0;
[L14773]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14774]              assume !revert && gas >= 0;
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND TRUE   choice == 37
[L14526]              gas := gas - 21000;
[L14527]  COND TRUE   gas >= 0
[L14528]              assume msgvalue_MSG == 0;
[L14529]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7706]   COND FALSE  !(DType[this] == MainToken)
[L7711]   COND TRUE   DType[this] == FreezableMintableToken
[L7712]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6961]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7712]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7713]   COND FALSE  !(revert)
[L7724]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14529]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14777]  RET         call CorralChoice_MainToken(this);

Loop:
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND TRUE   choice == 37
[L14526]              gas := gas - 21000;
[L14527]  COND TRUE   gas >= 0
[L14528]              assume msgvalue_MSG == 0;
[L14529]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7706]   COND FALSE  !(DType[this] == MainToken)
[L7711]   COND TRUE   DType[this] == FreezableMintableToken
[L7712]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6961]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7712]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7713]   COND FALSE  !(revert)
[L7724]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14529]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14777]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:43:26,773 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:43:26,773 INFO  L82        PathProgramCache]: Analyzing trace with hash 589560887, now seen corresponding path program 1 times
[2020-11-24 21:43:26,775 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:43:26,822 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:43:27,398 INFO  L134       CoverageAnalysis]: Checked inductivity of 9823 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9823 trivial. 0 not checked.
[2020-11-24 21:43:27,399 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:43:27,399 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-24 21:43:27,400 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:43:27,400 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-24 21:43:27,400 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-24 21:43:27,400 INFO  L87              Difference]: Start difference. First operand 8695 states and 9696 transitions. cyclomatic complexity: 1021 Second operand 6 states.
[2020-11-24 21:43:27,619 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:43:27,619 INFO  L93              Difference]: Finished difference Result 8725 states and 9726 transitions.
[2020-11-24 21:43:27,620 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-24 21:43:27,620 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8725 states and 9726 transitions.
[2020-11-24 21:43:27,638 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 21:43:27,667 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8725 states to 8687 states and 9684 transitions.
[2020-11-24 21:43:27,667 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2071
[2020-11-24 21:43:27,668 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2071
[2020-11-24 21:43:27,668 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8687 states and 9684 transitions.
[2020-11-24 21:43:27,674 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:43:27,674 INFO  L728         BuchiCegarLoop]: Abstraction has 8687 states and 9684 transitions.
[2020-11-24 21:43:27,683 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8687 states and 9684 transitions.
[2020-11-24 21:43:27,736 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8687 to 8687.
[2020-11-24 21:43:27,736 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8687 states.
[2020-11-24 21:43:27,746 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8687 states to 8687 states and 9684 transitions.
[2020-11-24 21:43:27,746 INFO  L751         BuchiCegarLoop]: Abstraction has 8687 states and 9684 transitions.
[2020-11-24 21:43:27,746 INFO  L631         BuchiCegarLoop]: Abstraction has 8687 states and 9684 transitions.
[2020-11-24 21:43:27,746 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-24 21:43:27,746 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8687 states and 9684 transitions.
[2020-11-24 21:43:27,759 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 21:43:27,759 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:43:27,759 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:43:27,763 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:43:27,763 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14767]              assume null == 0;
[L14768]  CALL        call this := FreshRefGenerator__success();
[L6697]               havoc newRef;
[L6698]               assume Alloc[newRef] == false;
[L6699]               Alloc[newRef] := true;
[L6700]               assume newRef != null;
[L14768]  RET         call this := FreshRefGenerator__success();
[L14769]              assume now >= 0;
[L14770]              assume DType[this] == MainToken;
[L14771]              assume msgvalue_MSG == 0;
[L14772]              gas := gas - 53000;
[L14773]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4385]               havoc __exception;
[L4386]               revert := false;
[L4387]   COND FALSE  !(__exception)
[L4426]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9506]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9284]               assume msgsender_MSG != null;
[L9285]               Balance[this] := 0;
[L9286]               TOKEN_DECIMALS_Consts[this] := 18;
[L9287]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9288]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9289]               TOKEN_NAME_Consts[this] := -1298559559;
[L9290]               TOKEN_SYMBOL_Consts[this] := 120673937;
[L9291]               PAUSED_Consts[this] := false;
[L9292]               __var_52 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9293]               TARGET_USER_Consts[this] := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9294]               CONTINUE_MINTING_Consts[this] := false;
[L9308]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]   COND FALSE  !(revert)
[L9506]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9507]   COND FALSE  !(revert)
[L9510]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9510]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9511]   COND FALSE  !(revert)
[L9514]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9514]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9515]   COND FALSE  !(revert)
[L9518]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9518]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9519]   COND FALSE  !(revert)
[L9522]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9522]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9523]   COND FALSE  !(revert)
[L9526]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9526]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9527]   COND FALSE  !(revert)
[L9530]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9530]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9534]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9093]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9093]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9094]   COND FALSE  !(revert)
[L9097]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9097]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9098]   COND FALSE  !(revert)
[L9101]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9101]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9102]   COND FALSE  !(revert)
[L9105]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9105]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9106]   COND FALSE  !(revert)
[L9109]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9109]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9110]   COND FALSE  !(revert)
[L9113]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9113]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9114]   COND FALSE  !(revert)
[L9117]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9117]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9050]               assume msgsender_MSG != null;
[L9051]               Balance[this] := 0;
[L9121]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9538]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8837]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L8837]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]   COND FALSE  !(revert)
[L8841]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L8841]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8842]   COND FALSE  !(revert)
[L8845]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8814]               assume msgsender_MSG != null;
[L8815]               Balance[this] := 0;
[L8845]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8846]   COND FALSE  !(revert)
[L9542]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8963]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L8963]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8964]   COND FALSE  !(revert)
[L8967]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8943]               assume msgsender_MSG != null;
[L8944]               Balance[this] := 0;
[L8945]               paused_Pausable[this] := false;
[L8967]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8968]   COND FALSE  !(revert)
[L9546]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9434]               assume msgsender_MSG != null;
[L9435]               Balance[this] := 0;
[L9436]               initialized_MainToken[this] := false;
[L9438]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9754]   COND FALSE  !(!!initialized_MainToken[this])
[L9758]               initialized_MainToken[this] := true;
[L9759]   COND FALSE  !(PAUSED_Consts[this])
[L9769]               __var_57 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9770]               addresses_s1673 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9771]               __var_58 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9772]               amounts_s1673 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9773]               __var_59 := 0 % 18446744073709551616;
[L9774]               freezes_s1673 := 0 % 18446744073709551616;
[L9775]               i_s1673 := 0;
[L9776]   COND FALSE  !(i_s1673 < Length[addresses_s1673])
[L9800]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9810]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9438]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9439]   COND FALSE  !(revert)
[L9442]   COND TRUE   DType[this] == MainToken
[L9443]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7356]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12721]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7356]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   COND TRUE   DType[this] == MainToken
[L7361]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7404]               __var_11 := null;
[L7405]   COND FALSE  !(!(_newOwner_s581 != null))
[L7409]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7410]               owner_Ownable[this] := _newOwner_s581;
[L7361]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7362]   COND FALSE  !(revert)
[L9443]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9444]   COND FALSE  !(revert)
[L9550]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L4426]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4427]               assume !revert && gas >= 0;
[L14773]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14774]              assume !revert && gas >= 0;
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND TRUE   choice == 37
[L14526]              gas := gas - 21000;
[L14527]  COND TRUE   gas >= 0
[L14528]              assume msgvalue_MSG == 0;
[L14529]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7706]   COND TRUE   DType[this] == MainToken
[L7707]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6961]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7707]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7708]   COND FALSE  !(revert)
[L7724]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14529]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14777]  RET         call CorralChoice_MainToken(this);

Loop:
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND TRUE   choice == 37
[L14526]              gas := gas - 21000;
[L14527]  COND TRUE   gas >= 0
[L14528]              assume msgvalue_MSG == 0;
[L14529]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7706]   COND TRUE   DType[this] == MainToken
[L7707]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6961]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7707]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7708]   COND FALSE  !(revert)
[L7724]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14529]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14777]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:43:27,772 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:43:27,772 INFO  L82        PathProgramCache]: Analyzing trace with hash 1620698962, now seen corresponding path program 1 times
[2020-11-24 21:43:27,773 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:43:27,804 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:43:28,321 INFO  L134       CoverageAnalysis]: Checked inductivity of 9823 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9823 trivial. 0 not checked.
[2020-11-24 21:43:28,321 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:43:28,322 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-24 21:43:28,323 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:43:28,323 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 21:43:28,323 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-24 21:43:28,323 INFO  L87              Difference]: Start difference. First operand 8687 states and 9684 transitions. cyclomatic complexity: 1017 Second operand 7 states.
[2020-11-24 21:43:28,444 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:43:28,445 INFO  L93              Difference]: Finished difference Result 8698 states and 9695 transitions.
[2020-11-24 21:43:28,445 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 21:43:28,445 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8698 states and 9695 transitions.
[2020-11-24 21:43:28,461 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 21:43:28,480 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8698 states to 8687 states and 9683 transitions.
[2020-11-24 21:43:28,480 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2071
[2020-11-24 21:43:28,481 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2071
[2020-11-24 21:43:28,481 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8687 states and 9683 transitions.
[2020-11-24 21:43:28,486 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:43:28,486 INFO  L728         BuchiCegarLoop]: Abstraction has 8687 states and 9683 transitions.
[2020-11-24 21:43:28,492 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8687 states and 9683 transitions.
[2020-11-24 21:43:28,532 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8687 to 8687.
[2020-11-24 21:43:28,532 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8687 states.
[2020-11-24 21:43:28,540 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8687 states to 8687 states and 9683 transitions.
[2020-11-24 21:43:28,540 INFO  L751         BuchiCegarLoop]: Abstraction has 8687 states and 9683 transitions.
[2020-11-24 21:43:28,541 INFO  L631         BuchiCegarLoop]: Abstraction has 8687 states and 9683 transitions.
[2020-11-24 21:43:28,541 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-24 21:43:28,541 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8687 states and 9683 transitions.
[2020-11-24 21:43:28,549 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 21:43:28,549 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:43:28,549 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:43:28,552 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:43:28,552 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14767]              assume null == 0;
[L14768]  CALL        call this := FreshRefGenerator__success();
[L6697]               havoc newRef;
[L6698]               assume Alloc[newRef] == false;
[L6699]               Alloc[newRef] := true;
[L6700]               assume newRef != null;
[L14768]  RET         call this := FreshRefGenerator__success();
[L14769]              assume now >= 0;
[L14770]              assume DType[this] == MainToken;
[L14771]              assume msgvalue_MSG == 0;
[L14772]              gas := gas - 53000;
[L14773]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4385]               havoc __exception;
[L4386]               revert := false;
[L4387]   COND TRUE   __exception
[L4388]               __tmp__Balance := Balance;
[L4389]               __tmp__DType := DType;
[L4390]               __tmp__Alloc := Alloc;
[L4391]               __tmp__balance_ADDR := balance_ADDR;
[L4392]               __tmp__M_Ref_int := M_Ref_int;
[L4393]               __tmp__sum_balances0 := sum_balances0;
[L4394]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4395]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4396]               __tmp__sum_allowed1 := sum_allowed1;
[L4397]               __tmp__M_int_int := M_int_int;
[L4398]               __tmp__sum_chains2 := sum_chains2;
[L4399]               __tmp__sum_freezings3 := sum_freezings3;
[L4400]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4401]               __tmp__M_int_Ref := M_int_Ref;
[L4402]               __tmp__sum := sum;
[L4403]               __tmp__Length := Length;
[L4404]               __tmp__now := now;
[L4405]               __tmp__balances_BasicToken := balances_BasicToken;
[L4406]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4407]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4408]               __tmp__owner_Ownable := owner_Ownable;
[L4409]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4410]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4411]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4412]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4413]               __tmp__paused_Pausable := paused_Pausable;
[L4414]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4415]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4416]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4417]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4418]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4419]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4420]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4421]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4422]               __tmp__initialized_MainToken := initialized_MainToken;
[L4423]   CALL        call MainToken_MainToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9454]   CALL        call Consts_Consts__fail(this, msgsender_MSG, msgvalue_MSG);
[L9300]   CALL        call Consts_Consts_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L9266]               assume msgsender_MSG != null;
[L9267]               __tmp__Balance[this] := 0;
[L9268]               __tmp__TOKEN_DECIMALS_Consts[this] := 18;
[L9269]               __tmp__TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9270]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, __tmp__TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9271]               __tmp__TOKEN_NAME_Consts[this] := -1298559559;
[L9272]               __tmp__TOKEN_SYMBOL_Consts[this] := 120673937;
[L9273]               __tmp__PAUSED_Consts[this] := false;
[L9274]               __var_52 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9275]               __tmp__TARGET_USER_Consts[this] := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9276]               __tmp__CONTINUE_MINTING_Consts[this] := false;
[L9300]   RET         call Consts_Consts_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L9301]   COND FALSE  !(revert)
[L9454]   RET         call Consts_Consts__fail(this, msgsender_MSG, msgvalue_MSG);
[L9455]   COND FALSE  !(revert)
[L9458]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L9458]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L9459]   COND FALSE  !(revert)
[L9462]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6983]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L6983]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6984]   COND FALSE  !(revert)
[L6987]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6968]               assume msgsender_MSG != null;
[L6969]               __tmp__Balance[this] := 0;
[L6987]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6988]   COND FALSE  !(revert)
[L9462]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L9463]   COND FALSE  !(revert)
[L9466]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6854]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L6854]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6855]   COND FALSE  !(revert)
[L6858]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6833]               assume msgsender_MSG != null;
[L6834]               __tmp__Balance[this] := 0;
[L6835]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6836]               __tmp__sum_balances0[this] := 0;
[L6837]               __tmp__totalSupply__BasicToken[this] := 0;
[L6858]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6859]   COND FALSE  !(revert)
[L9466]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9467]   COND FALSE  !(revert)
[L9470]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7027]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L7027]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7028]   COND FALSE  !(revert)
[L7031]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6983]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L6983]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6984]   COND FALSE  !(revert)
[L6987]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6968]               assume msgsender_MSG != null;
[L6969]               __tmp__Balance[this] := 0;
[L6987]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6988]   COND FALSE  !(revert)
[L7031]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7032]   COND FALSE  !(revert)
[L7035]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6854]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L6854]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6855]   COND FALSE  !(revert)
[L6858]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6833]               assume msgsender_MSG != null;
[L6834]               __tmp__Balance[this] := 0;
[L6835]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6836]               __tmp__sum_balances0[this] := 0;
[L6837]               __tmp__totalSupply__BasicToken[this] := 0;
[L6858]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6859]   COND FALSE  !(revert)
[L7035]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7036]   COND FALSE  !(revert)
[L7039]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7008]               assume msgsender_MSG != null;
[L7009]               __tmp__Balance[this] := 0;
[L7010]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L7011]               __tmp__sum_allowed1[this] := 0;
[L7039]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7040]   COND FALSE  !(revert)
[L9470]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9471]   COND FALSE  !(revert)
[L9474]   CALL        call FreezableToken_FreezableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7630]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L7630]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7631]   COND FALSE  !(revert)
[L7634]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6983]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L6983]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6984]   COND FALSE  !(revert)
[L6987]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6968]               assume msgsender_MSG != null;
[L6969]               __tmp__Balance[this] := 0;
[L6987]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6988]   COND FALSE  !(revert)
[L7634]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7635]   COND FALSE  !(revert)
[L7638]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6854]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L6854]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6855]   COND FALSE  !(revert)
[L6858]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6833]               assume msgsender_MSG != null;
[L6834]               __tmp__Balance[this] := 0;
[L6835]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6836]               __tmp__sum_balances0[this] := 0;
[L6837]               __tmp__totalSupply__BasicToken[this] := 0;
[L6858]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6859]   COND FALSE  !(revert)
[L7638]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7639]   COND FALSE  !(revert)
[L7642]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7027]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L7027]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7028]   COND FALSE  !(revert)
[L7031]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6983]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L6983]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6984]   COND FALSE  !(revert)
[L6987]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6968]               assume msgsender_MSG != null;
[L6969]               __tmp__Balance[this] := 0;
[L6987]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6988]   COND FALSE  !(revert)
[L7031]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7032]   COND FALSE  !(revert)
[L7035]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6854]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L6854]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6855]   COND FALSE  !(revert)
[L6858]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6833]               assume msgsender_MSG != null;
[L6834]               __tmp__Balance[this] := 0;
[L6835]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6836]               __tmp__sum_balances0[this] := 0;
[L6837]               __tmp__totalSupply__BasicToken[this] := 0;
[L6858]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6859]   COND FALSE  !(revert)
[L7035]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7036]   COND FALSE  !(revert)
[L7039]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7008]               assume msgsender_MSG != null;
[L7009]               __tmp__Balance[this] := 0;
[L7010]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L7011]               __tmp__sum_allowed1[this] := 0;
[L7039]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7040]   COND FALSE  !(revert)
[L7642]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7643]   COND FALSE  !(revert)
[L7646]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7603]               assume msgsender_MSG != null;
[L7604]               __tmp__Balance[this] := 0;
[L7605]               __tmp__chains_FreezableToken[this] := zerointintArr();
[L7606]               __tmp__sum_chains2[this] := 0;
[L7607]               __tmp__freezings_FreezableToken[this] := zerointintArr();
[L7608]               __tmp__sum_freezings3[this] := 0;
[L7609]               __tmp__freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7610]               __tmp__sum_freezingBalance4[this] := 0;
[L7646]   RET         call FreezableToken_FreezableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7647]   COND FALSE  !(revert)
[L9474]   RET         call FreezableToken_FreezableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9475]   COND FALSE  !(revert)
[L9478]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7281]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7262]               assume msgsender_MSG != null;
[L7263]               __tmp__Balance[this] := 0;
[L7264]               __tmp__owner_Ownable[this] := null;
[L7266]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L7281]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7282]   COND FALSE  !(revert)
[L9478]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L9479]   COND FALSE  !(revert)
[L9482]   CALL        call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7445]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L7445]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6983]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L6983]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6984]   COND FALSE  !(revert)
[L6987]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6968]               assume msgsender_MSG != null;
[L6969]               __tmp__Balance[this] := 0;
[L6987]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6988]   COND FALSE  !(revert)
[L7449]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6854]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L6854]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6855]   COND FALSE  !(revert)
[L6858]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6833]               assume msgsender_MSG != null;
[L6834]               __tmp__Balance[this] := 0;
[L6835]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6836]               __tmp__sum_balances0[this] := 0;
[L6837]               __tmp__totalSupply__BasicToken[this] := 0;
[L6858]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6859]   COND FALSE  !(revert)
[L7453]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7027]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L7027]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7028]   COND FALSE  !(revert)
[L7031]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6983]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L6983]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6984]   COND FALSE  !(revert)
[L6987]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6968]               assume msgsender_MSG != null;
[L6969]               __tmp__Balance[this] := 0;
[L6987]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6988]   COND FALSE  !(revert)
[L7031]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7032]   COND FALSE  !(revert)
[L7035]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6854]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L6854]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6855]   COND FALSE  !(revert)
[L6858]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6833]               assume msgsender_MSG != null;
[L6834]               __tmp__Balance[this] := 0;
[L6835]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6836]               __tmp__sum_balances0[this] := 0;
[L6837]               __tmp__totalSupply__BasicToken[this] := 0;
[L6858]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6859]   COND FALSE  !(revert)
[L7035]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7036]   COND FALSE  !(revert)
[L7039]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7008]               assume msgsender_MSG != null;
[L7009]               __tmp__Balance[this] := 0;
[L7010]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L7011]               __tmp__sum_allowed1[this] := 0;
[L7039]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7040]   COND FALSE  !(revert)
[L7457]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7281]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7262]               assume msgsender_MSG != null;
[L7263]               __tmp__Balance[this] := 0;
[L7264]               __tmp__owner_Ownable[this] := null;
[L7266]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L7281]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7282]   COND FALSE  !(revert)
[L7461]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L7465]   CALL        call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7428]               assume msgsender_MSG != null;
[L7429]               __tmp__Balance[this] := 0;
[L7430]               __tmp__mintingFinished_MintableToken[this] := false;
[L7465]   RET         call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7466]   COND FALSE  !(revert)
[L9482]   RET         call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9483]   COND FALSE  !(revert)
[L9486]   CALL        call FreezableMintableToken_FreezableMintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9057]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L9057]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L9058]   COND FALSE  !(revert)
[L9061]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6983]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L6983]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6984]   COND FALSE  !(revert)
[L6987]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6968]               assume msgsender_MSG != null;
[L6969]               __tmp__Balance[this] := 0;
[L6987]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6988]   COND FALSE  !(revert)
[L9061]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L9062]   COND FALSE  !(revert)
[L9065]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6854]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L6854]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6855]   COND FALSE  !(revert)
[L6858]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6833]               assume msgsender_MSG != null;
[L6834]               __tmp__Balance[this] := 0;
[L6835]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6836]               __tmp__sum_balances0[this] := 0;
[L6837]               __tmp__totalSupply__BasicToken[this] := 0;
[L6858]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6859]   COND FALSE  !(revert)
[L9065]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9066]   COND FALSE  !(revert)
[L9069]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7027]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L7027]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7028]   COND FALSE  !(revert)
[L7031]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6983]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L6983]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6984]   COND FALSE  !(revert)
[L6987]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6968]               assume msgsender_MSG != null;
[L6969]               __tmp__Balance[this] := 0;
[L6987]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6988]   COND FALSE  !(revert)
[L7031]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7032]   COND FALSE  !(revert)
[L7035]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6854]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L6854]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6855]   COND FALSE  !(revert)
[L6858]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6833]               assume msgsender_MSG != null;
[L6834]               __tmp__Balance[this] := 0;
[L6835]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6836]               __tmp__sum_balances0[this] := 0;
[L6837]               __tmp__totalSupply__BasicToken[this] := 0;
[L6858]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6859]   COND FALSE  !(revert)
[L7035]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7036]   COND FALSE  !(revert)
[L7039]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7008]               assume msgsender_MSG != null;
[L7009]               __tmp__Balance[this] := 0;
[L7010]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L7011]               __tmp__sum_allowed1[this] := 0;
[L7039]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7040]   COND FALSE  !(revert)
[L9069]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9070]   COND FALSE  !(revert)
[L9073]   CALL        call FreezableToken_FreezableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7630]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L7630]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7631]   COND FALSE  !(revert)
[L7634]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6983]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L6983]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6984]   COND FALSE  !(revert)
[L6987]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6968]               assume msgsender_MSG != null;
[L6969]               __tmp__Balance[this] := 0;
[L6987]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6988]   COND FALSE  !(revert)
[L7634]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7635]   COND FALSE  !(revert)
[L7638]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6854]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L6854]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6855]   COND FALSE  !(revert)
[L6858]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6833]               assume msgsender_MSG != null;
[L6834]               __tmp__Balance[this] := 0;
[L6835]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6836]               __tmp__sum_balances0[this] := 0;
[L6837]               __tmp__totalSupply__BasicToken[this] := 0;
[L6858]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6859]   COND FALSE  !(revert)
[L7638]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7639]   COND FALSE  !(revert)
[L7642]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7027]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L7027]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7028]   COND FALSE  !(revert)
[L7031]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6983]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L6983]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6984]   COND FALSE  !(revert)
[L6987]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6968]               assume msgsender_MSG != null;
[L6969]               __tmp__Balance[this] := 0;
[L6987]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6988]   COND FALSE  !(revert)
[L7031]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7032]   COND FALSE  !(revert)
[L7035]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6854]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L6854]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6855]   COND FALSE  !(revert)
[L6858]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6833]               assume msgsender_MSG != null;
[L6834]               __tmp__Balance[this] := 0;
[L6835]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6836]               __tmp__sum_balances0[this] := 0;
[L6837]               __tmp__totalSupply__BasicToken[this] := 0;
[L6858]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6859]   COND FALSE  !(revert)
[L7035]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7036]   COND FALSE  !(revert)
[L7039]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7008]               assume msgsender_MSG != null;
[L7009]               __tmp__Balance[this] := 0;
[L7010]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L7011]               __tmp__sum_allowed1[this] := 0;
[L7039]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7040]   COND FALSE  !(revert)
[L7642]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7643]   COND FALSE  !(revert)
[L7646]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7603]               assume msgsender_MSG != null;
[L7604]               __tmp__Balance[this] := 0;
[L7605]               __tmp__chains_FreezableToken[this] := zerointintArr();
[L7606]               __tmp__sum_chains2[this] := 0;
[L7607]               __tmp__freezings_FreezableToken[this] := zerointintArr();
[L7608]               __tmp__sum_freezings3[this] := 0;
[L7609]               __tmp__freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7610]               __tmp__sum_freezingBalance4[this] := 0;
[L7646]   RET         call FreezableToken_FreezableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7647]   COND FALSE  !(revert)
[L9073]   RET         call FreezableToken_FreezableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9074]   COND FALSE  !(revert)
[L9077]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7281]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7262]               assume msgsender_MSG != null;
[L7263]               __tmp__Balance[this] := 0;
[L7264]               __tmp__owner_Ownable[this] := null;
[L7266]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L7281]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7282]   COND FALSE  !(revert)
[L9077]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L9078]   COND FALSE  !(revert)
[L9081]   CALL        call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7445]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L7445]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6983]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L6983]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6984]   COND FALSE  !(revert)
[L6987]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6968]               assume msgsender_MSG != null;
[L6969]               __tmp__Balance[this] := 0;
[L6987]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6988]   COND FALSE  !(revert)
[L7449]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6854]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L6854]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6855]   COND FALSE  !(revert)
[L6858]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6833]               assume msgsender_MSG != null;
[L6834]               __tmp__Balance[this] := 0;
[L6835]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6836]               __tmp__sum_balances0[this] := 0;
[L6837]               __tmp__totalSupply__BasicToken[this] := 0;
[L6858]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6859]   COND FALSE  !(revert)
[L7453]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7027]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L7027]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7028]   COND FALSE  !(revert)
[L7031]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6983]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L6983]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6984]   COND FALSE  !(revert)
[L6987]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6968]               assume msgsender_MSG != null;
[L6969]               __tmp__Balance[this] := 0;
[L6987]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6988]   COND FALSE  !(revert)
[L7031]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7032]   COND FALSE  !(revert)
[L7035]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6854]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L6854]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6855]   COND FALSE  !(revert)
[L6858]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6833]               assume msgsender_MSG != null;
[L6834]               __tmp__Balance[this] := 0;
[L6835]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6836]               __tmp__sum_balances0[this] := 0;
[L6837]               __tmp__totalSupply__BasicToken[this] := 0;
[L6858]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6859]   COND FALSE  !(revert)
[L7035]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7036]   COND FALSE  !(revert)
[L7039]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7008]               assume msgsender_MSG != null;
[L7009]               __tmp__Balance[this] := 0;
[L7010]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L7011]               __tmp__sum_allowed1[this] := 0;
[L7039]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7040]   COND FALSE  !(revert)
[L7457]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7281]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7262]               assume msgsender_MSG != null;
[L7263]               __tmp__Balance[this] := 0;
[L7264]               __tmp__owner_Ownable[this] := null;
[L7266]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L7281]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7282]   COND FALSE  !(revert)
[L7461]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L7465]   CALL        call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7428]               assume msgsender_MSG != null;
[L7429]               __tmp__Balance[this] := 0;
[L7430]               __tmp__mintingFinished_MintableToken[this] := false;
[L7465]   RET         call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7466]   COND FALSE  !(revert)
[L9081]   RET         call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9082]   COND FALSE  !(revert)
[L9085]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L9042]               assume msgsender_MSG != null;
[L9043]               __tmp__Balance[this] := 0;
[L9085]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L9086]   COND FALSE  !(revert)
[L9486]   RET         call FreezableMintableToken_FreezableMintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9487]   COND FALSE  !(revert)
[L9490]   CALL        call BurnableToken_BurnableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L8821]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L8821]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L8822]   COND FALSE  !(revert)
[L8825]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6854]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L6854]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6855]   COND FALSE  !(revert)
[L6858]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6833]               assume msgsender_MSG != null;
[L6834]               __tmp__Balance[this] := 0;
[L6835]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6836]               __tmp__sum_balances0[this] := 0;
[L6837]               __tmp__totalSupply__BasicToken[this] := 0;
[L6858]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6859]   COND FALSE  !(revert)
[L8825]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L8826]   COND FALSE  !(revert)
[L8829]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L8806]               assume msgsender_MSG != null;
[L8807]               __tmp__Balance[this] := 0;
[L8829]   RET         call BurnableToken_BurnableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L8830]   COND FALSE  !(revert)
[L9490]   RET         call BurnableToken_BurnableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9491]   COND FALSE  !(revert)
[L9494]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L8951]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7281]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7262]               assume msgsender_MSG != null;
[L7263]               __tmp__Balance[this] := 0;
[L7264]               __tmp__owner_Ownable[this] := null;
[L7266]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L7281]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7282]   COND FALSE  !(revert)
[L8951]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L8952]   COND FALSE  !(revert)
[L8955]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L8934]               assume msgsender_MSG != null;
[L8935]               __tmp__Balance[this] := 0;
[L8936]               __tmp__paused_Pausable[this] := false;
[L8955]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L8956]   COND FALSE  !(revert)
[L9494]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L9495]   COND FALSE  !(revert)
[L9498]   CALL        call MainToken_MainToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L9413]               assume msgsender_MSG != null;
[L9414]               __tmp__Balance[this] := 0;
[L9415]               __tmp__initialized_MainToken[this] := false;
[L9417]   CALL        call init_MainToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9684]   COND FALSE  !(!!__tmp__initialized_MainToken[this])
[L9688]               __tmp__initialized_MainToken[this] := true;
[L9689]   COND FALSE  !(__tmp__PAUSED_Consts[this])
[L9699]               __var_57 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9700]               addresses_s1673 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9701]               __var_58 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9702]               amounts_s1673 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9703]               __var_59 := 0 % 18446744073709551616;
[L9704]               freezes_s1673 := 0 % 18446744073709551616;
[L9705]               i_s1673 := 0;
[L9706]   COND FALSE  !(i_s1673 < __tmp__Length[addresses_s1673])
[L9730]   COND FALSE  !(!__tmp__CONTINUE_MINTING_Consts[this])
[L9417]   RET         call init_MainToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9418]   COND FALSE  !(revert)
[L9421]   COND TRUE   __tmp__DType[this] == MainToken
[L9422]   CALL        call transferOwnership~address_Ownable__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__TARGET_USER_Consts[this]);
[L7320]   CALL        call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L12713]  COND FALSE  !(!(msgsender_MSG == __tmp__owner_Ownable[this]))
[L7320]   RET         call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7321]   COND FALSE  !(revert)
[L7324]   COND TRUE   __tmp__DType[this] == MainToken
[L7325]   CALL        call _transferOwnership~address_Ownable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7393]               __var_11 := null;
[L7394]   COND FALSE  !(!(_newOwner_s581 != null))
[L7398]               __tmp__owner_Ownable[this] := _newOwner_s581;
[L7325]   RET         call _transferOwnership~address_Ownable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7326]   COND FALSE  !(revert)
[L9422]   RET         call transferOwnership~address_Ownable__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__TARGET_USER_Consts[this]);
[L9423]   COND FALSE  !(revert)
[L9498]   RET         call MainToken_MainToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L9499]   COND FALSE  !(revert)
[L4423]   RET         call MainToken_MainToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4424]               assume revert || gas < 0;
[L14773]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14774]              assume !revert && gas >= 0;
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND TRUE   choice == 37
[L14526]              gas := gas - 21000;
[L14527]  COND TRUE   gas >= 0
[L14528]              assume msgvalue_MSG == 0;
[L14529]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7706]   COND TRUE   DType[this] == MainToken
[L7707]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6961]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7707]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7708]   COND FALSE  !(revert)
[L7724]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14529]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14777]  RET         call CorralChoice_MainToken(this);

Loop:
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND TRUE   choice == 37
[L14526]              gas := gas - 21000;
[L14527]  COND TRUE   gas >= 0
[L14528]              assume msgvalue_MSG == 0;
[L14529]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7706]   COND TRUE   DType[this] == MainToken
[L7707]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6961]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7707]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7708]   COND FALSE  !(revert)
[L7724]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14529]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14777]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:43:28,560 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:43:28,561 INFO  L82        PathProgramCache]: Analyzing trace with hash -609993961, now seen corresponding path program 1 times
[2020-11-24 21:43:28,561 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:43:28,592 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:43:29,136 INFO  L134       CoverageAnalysis]: Checked inductivity of 9823 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9823 trivial. 0 not checked.
[2020-11-24 21:43:29,136 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:43:29,136 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 21:43:29,137 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:43:29,137 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 21:43:29,137 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-24 21:43:29,137 INFO  L87              Difference]: Start difference. First operand 8687 states and 9683 transitions. cyclomatic complexity: 1016 Second operand 4 states.
[2020-11-24 21:43:30,411 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:43:30,412 INFO  L93              Difference]: Finished difference Result 10887 states and 12429 transitions.
[2020-11-24 21:43:30,412 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 21:43:30,412 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10887 states and 12429 transitions.
[2020-11-24 21:43:30,435 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-24 21:43:30,458 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10887 states to 9978 states and 11378 transitions.
[2020-11-24 21:43:30,458 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2386
[2020-11-24 21:43:30,459 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2395
[2020-11-24 21:43:30,459 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9978 states and 11378 transitions.
[2020-11-24 21:43:30,465 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:43:30,465 INFO  L728         BuchiCegarLoop]: Abstraction has 9978 states and 11378 transitions.
[2020-11-24 21:43:30,471 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9978 states and 11378 transitions.
[2020-11-24 21:43:30,528 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9978 to 8961.
[2020-11-24 21:43:30,528 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8961 states.
[2020-11-24 21:43:30,537 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8961 states to 8961 states and 10083 transitions.
[2020-11-24 21:43:30,538 INFO  L751         BuchiCegarLoop]: Abstraction has 8961 states and 10083 transitions.
[2020-11-24 21:43:30,538 INFO  L631         BuchiCegarLoop]: Abstraction has 8961 states and 10083 transitions.
[2020-11-24 21:43:30,538 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-24 21:43:30,538 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8961 states and 10083 transitions.
[2020-11-24 21:43:30,547 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-24 21:43:30,547 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:43:30,547 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:43:30,549 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:43:30,549 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14767]              assume null == 0;
[L14768]  CALL        call this := FreshRefGenerator__success();
[L6697]               havoc newRef;
[L6698]               assume Alloc[newRef] == false;
[L6699]               Alloc[newRef] := true;
[L6700]               assume newRef != null;
[L14768]  RET         call this := FreshRefGenerator__success();
[L14769]              assume now >= 0;
[L14770]              assume DType[this] == MainToken;
[L14771]              assume msgvalue_MSG == 0;
[L14772]              gas := gas - 53000;
[L14773]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4385]               havoc __exception;
[L4386]               revert := false;
[L4387]   COND FALSE  !(__exception)
[L4426]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9506]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9284]               assume msgsender_MSG != null;
[L9285]               Balance[this] := 0;
[L9286]               TOKEN_DECIMALS_Consts[this] := 18;
[L9287]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9288]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9289]               TOKEN_NAME_Consts[this] := -1298559559;
[L9290]               TOKEN_SYMBOL_Consts[this] := 120673937;
[L9291]               PAUSED_Consts[this] := false;
[L9292]               __var_52 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9293]               TARGET_USER_Consts[this] := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9294]               CONTINUE_MINTING_Consts[this] := false;
[L9308]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]   COND FALSE  !(revert)
[L9506]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9507]   COND FALSE  !(revert)
[L9510]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9510]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9511]   COND FALSE  !(revert)
[L9514]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9514]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9515]   COND FALSE  !(revert)
[L9518]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9518]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9519]   COND FALSE  !(revert)
[L9522]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9522]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9523]   COND FALSE  !(revert)
[L9526]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9526]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9527]   COND FALSE  !(revert)
[L9530]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9530]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9534]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9093]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9093]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9094]   COND FALSE  !(revert)
[L9097]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9097]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9098]   COND FALSE  !(revert)
[L9101]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9101]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9102]   COND FALSE  !(revert)
[L9105]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9105]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9106]   COND FALSE  !(revert)
[L9109]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9109]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9110]   COND FALSE  !(revert)
[L9113]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9113]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9114]   COND FALSE  !(revert)
[L9117]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9117]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9050]               assume msgsender_MSG != null;
[L9051]               Balance[this] := 0;
[L9121]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9538]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8837]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L8837]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]   COND FALSE  !(revert)
[L8841]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L8841]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8842]   COND FALSE  !(revert)
[L8845]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8814]               assume msgsender_MSG != null;
[L8815]               Balance[this] := 0;
[L8845]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8846]   COND FALSE  !(revert)
[L9542]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8963]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L8963]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8964]   COND FALSE  !(revert)
[L8967]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8943]               assume msgsender_MSG != null;
[L8944]               Balance[this] := 0;
[L8945]               paused_Pausable[this] := false;
[L8967]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8968]   COND FALSE  !(revert)
[L9546]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9434]               assume msgsender_MSG != null;
[L9435]               Balance[this] := 0;
[L9436]               initialized_MainToken[this] := false;
[L9438]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9754]   COND FALSE  !(!!initialized_MainToken[this])
[L9758]               initialized_MainToken[this] := true;
[L9759]   COND FALSE  !(PAUSED_Consts[this])
[L9769]               __var_57 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9770]               addresses_s1673 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9771]               __var_58 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9772]               amounts_s1673 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9773]               __var_59 := 0 % 18446744073709551616;
[L9774]               freezes_s1673 := 0 % 18446744073709551616;
[L9775]               i_s1673 := 0;
[L9776]   COND FALSE  !(i_s1673 < Length[addresses_s1673])
[L9800]   COND TRUE   !CONTINUE_MINTING_Consts[this]
[L9801]   COND TRUE   DType[this] == MainToken
[L9802]   CALL        call __var_62 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7574]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12721]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7574]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7575]   COND FALSE  !(revert)
[L7578]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12737]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7578]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7579]   COND FALSE  !(revert)
[L7582]               mintingFinished_MintableToken[this] := true;
[L7583]               assert { :EventEmitted "MintFinished_MintableToken" } true;
[L7584]               __ret_0_ := true;
[L9802]   RET         call __var_62 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9803]   COND FALSE  !(revert)
[L9810]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9438]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9439]   COND FALSE  !(revert)
[L9442]   COND TRUE   DType[this] == MainToken
[L9443]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7356]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12721]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7356]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   COND TRUE   DType[this] == MainToken
[L7361]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7404]               __var_11 := null;
[L7405]   COND FALSE  !(!(_newOwner_s581 != null))
[L7409]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7410]               owner_Ownable[this] := _newOwner_s581;
[L7361]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7362]   COND FALSE  !(revert)
[L9443]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9444]   COND FALSE  !(revert)
[L9550]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L4426]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4427]               assume !revert && gas >= 0;
[L14773]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14774]              assume !revert && gas >= 0;
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND TRUE   choice == 37
[L14526]              gas := gas - 21000;
[L14527]  COND TRUE   gas >= 0
[L14528]              assume msgvalue_MSG == 0;
[L14529]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7706]   COND TRUE   DType[this] == MainToken
[L7707]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6961]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7707]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7708]   COND FALSE  !(revert)
[L7724]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14529]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14777]  RET         call CorralChoice_MainToken(this);

Loop:
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND TRUE   choice == 37
[L14526]              gas := gas - 21000;
[L14527]  COND TRUE   gas >= 0
[L14528]              assume msgvalue_MSG == 0;
[L14529]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7706]   COND TRUE   DType[this] == MainToken
[L7707]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6961]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7707]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7708]   COND FALSE  !(revert)
[L7724]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14529]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14777]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:43:30,556 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:43:30,556 INFO  L82        PathProgramCache]: Analyzing trace with hash 1884115385, now seen corresponding path program 1 times
[2020-11-24 21:43:30,557 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:43:30,644 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:43:31,679 INFO  L134       CoverageAnalysis]: Checked inductivity of 9826 backedges. 103 proven. 0 refuted. 0 times theorem prover too weak. 9723 trivial. 0 not checked.
[2020-11-24 21:43:31,679 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:43:31,679 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [18] imperfect sequences [] total 18
[2020-11-24 21:43:31,680 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:43:31,680 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 19 interpolants.
[2020-11-24 21:43:31,680 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=37, Invalid=305, Unknown=0, NotChecked=0, Total=342
[2020-11-24 21:43:31,680 INFO  L87              Difference]: Start difference. First operand 8961 states and 10083 transitions. cyclomatic complexity: 1141 Second operand 19 states.
[2020-11-24 21:43:41,013 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:43:41,013 INFO  L93              Difference]: Finished difference Result 9189 states and 10355 transitions.
[2020-11-24 21:43:41,014 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 22 states. 
[2020-11-24 21:43:41,014 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9189 states and 10355 transitions.
[2020-11-24 21:43:41,030 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 10
[2020-11-24 21:43:41,050 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9189 states to 9189 states and 10355 transitions.
[2020-11-24 21:43:41,050 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2322
[2020-11-24 21:43:41,053 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2322
[2020-11-24 21:43:41,053 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9189 states and 10355 transitions.
[2020-11-24 21:43:41,059 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:43:41,059 INFO  L728         BuchiCegarLoop]: Abstraction has 9189 states and 10355 transitions.
[2020-11-24 21:43:41,066 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9189 states and 10355 transitions.
[2020-11-24 21:43:41,125 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9189 to 9140.
[2020-11-24 21:43:41,125 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9140 states.
[2020-11-24 21:43:41,135 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9140 states to 9140 states and 10288 transitions.
[2020-11-24 21:43:41,135 INFO  L751         BuchiCegarLoop]: Abstraction has 9140 states and 10288 transitions.
[2020-11-24 21:43:41,135 INFO  L631         BuchiCegarLoop]: Abstraction has 9140 states and 10288 transitions.
[2020-11-24 21:43:41,135 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-24 21:43:41,136 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9140 states and 10288 transitions.
[2020-11-24 21:43:41,145 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 10
[2020-11-24 21:43:41,145 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:43:41,145 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:43:41,149 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:43:41,149 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14767]              assume null == 0;
[L14768]  CALL        call this := FreshRefGenerator__success();
[L6697]               havoc newRef;
[L6698]               assume Alloc[newRef] == false;
[L6699]               Alloc[newRef] := true;
[L6700]               assume newRef != null;
[L14768]  RET         call this := FreshRefGenerator__success();
[L14769]              assume now >= 0;
[L14770]              assume DType[this] == MainToken;
[L14771]              assume msgvalue_MSG == 0;
[L14772]              gas := gas - 53000;
[L14773]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4385]               havoc __exception;
[L4386]               revert := false;
[L4387]   COND FALSE  !(__exception)
[L4426]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9506]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9284]               assume msgsender_MSG != null;
[L9285]               Balance[this] := 0;
[L9286]               TOKEN_DECIMALS_Consts[this] := 18;
[L9287]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9288]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9289]               TOKEN_NAME_Consts[this] := -1298559559;
[L9290]               TOKEN_SYMBOL_Consts[this] := 120673937;
[L9291]               PAUSED_Consts[this] := false;
[L9292]               __var_52 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9293]               TARGET_USER_Consts[this] := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9294]               CONTINUE_MINTING_Consts[this] := false;
[L9308]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]   COND FALSE  !(revert)
[L9506]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9507]   COND FALSE  !(revert)
[L9510]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9510]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9511]   COND FALSE  !(revert)
[L9514]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9514]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9515]   COND FALSE  !(revert)
[L9518]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9518]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9519]   COND FALSE  !(revert)
[L9522]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9522]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9523]   COND FALSE  !(revert)
[L9526]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9526]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9527]   COND FALSE  !(revert)
[L9530]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9530]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9534]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9093]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9093]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9094]   COND FALSE  !(revert)
[L9097]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9097]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9098]   COND FALSE  !(revert)
[L9101]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9101]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9102]   COND FALSE  !(revert)
[L9105]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9105]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9106]   COND FALSE  !(revert)
[L9109]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9109]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9110]   COND FALSE  !(revert)
[L9113]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9113]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9114]   COND FALSE  !(revert)
[L9117]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9117]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9050]               assume msgsender_MSG != null;
[L9051]               Balance[this] := 0;
[L9121]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9538]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8837]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L8837]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]   COND FALSE  !(revert)
[L8841]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L8841]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8842]   COND FALSE  !(revert)
[L8845]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8814]               assume msgsender_MSG != null;
[L8815]               Balance[this] := 0;
[L8845]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8846]   COND FALSE  !(revert)
[L9542]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8963]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L8963]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8964]   COND FALSE  !(revert)
[L8967]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8943]               assume msgsender_MSG != null;
[L8944]               Balance[this] := 0;
[L8945]               paused_Pausable[this] := false;
[L8967]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8968]   COND FALSE  !(revert)
[L9546]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9434]               assume msgsender_MSG != null;
[L9435]               Balance[this] := 0;
[L9436]               initialized_MainToken[this] := false;
[L9438]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9754]   COND FALSE  !(!!initialized_MainToken[this])
[L9758]               initialized_MainToken[this] := true;
[L9759]   COND FALSE  !(PAUSED_Consts[this])
[L9769]               __var_57 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9770]               addresses_s1673 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9771]               __var_58 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9772]               amounts_s1673 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9773]               __var_59 := 0 % 18446744073709551616;
[L9774]               freezes_s1673 := 0 % 18446744073709551616;
[L9775]               i_s1673 := 0;
[L9776]   COND FALSE  !(i_s1673 < Length[addresses_s1673])
[L9800]   COND TRUE   !CONTINUE_MINTING_Consts[this]
[L9801]   COND TRUE   DType[this] == MainToken
[L9802]   CALL        call __var_62 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7574]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12721]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7574]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7575]   COND FALSE  !(revert)
[L7578]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12737]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7578]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7579]   COND FALSE  !(revert)
[L7582]               mintingFinished_MintableToken[this] := true;
[L7583]               assert { :EventEmitted "MintFinished_MintableToken" } true;
[L7584]               __ret_0_ := true;
[L9802]   RET         call __var_62 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9803]   COND FALSE  !(revert)
[L9810]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9438]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9439]   COND FALSE  !(revert)
[L9442]   COND TRUE   DType[this] == MainToken
[L9443]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7356]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12721]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7356]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   COND TRUE   DType[this] == MainToken
[L7361]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7404]               __var_11 := null;
[L7405]   COND FALSE  !(!(_newOwner_s581 != null))
[L7409]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7410]               owner_Ownable[this] := _newOwner_s581;
[L7361]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7362]   COND FALSE  !(revert)
[L9443]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9444]   COND FALSE  !(revert)
[L9550]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L4426]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4427]               assume !revert && gas >= 0;
[L14773]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14774]              assume !revert && gas >= 0;
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND TRUE   choice == 37
[L14526]              gas := gas - 21000;
[L14527]  COND TRUE   gas >= 0
[L14528]              assume msgvalue_MSG == 0;
[L14529]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND TRUE   __exception
[L2095]               __tmp__Balance := Balance;
[L2096]               __tmp__DType := DType;
[L2097]               __tmp__Alloc := Alloc;
[L2098]               __tmp__balance_ADDR := balance_ADDR;
[L2099]               __tmp__M_Ref_int := M_Ref_int;
[L2100]               __tmp__sum_balances0 := sum_balances0;
[L2101]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L2102]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2103]               __tmp__sum_allowed1 := sum_allowed1;
[L2104]               __tmp__M_int_int := M_int_int;
[L2105]               __tmp__sum_chains2 := sum_chains2;
[L2106]               __tmp__sum_freezings3 := sum_freezings3;
[L2107]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L2108]               __tmp__M_int_Ref := M_int_Ref;
[L2109]               __tmp__sum := sum;
[L2110]               __tmp__Length := Length;
[L2111]               __tmp__now := now;
[L2112]               __tmp__balances_BasicToken := balances_BasicToken;
[L2113]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L2114]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L2115]               __tmp__owner_Ownable := owner_Ownable;
[L2116]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L2117]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L2118]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L2119]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L2120]               __tmp__paused_Pausable := paused_Pausable;
[L2121]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L2122]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L2123]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L2124]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L2125]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L2126]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L2127]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L2128]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L2129]               __tmp__initialized_MainToken := initialized_MainToken;
[L2130]   CALL        call balance_s729 := balanceOf~address_FreezableToken__fail(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7680]   COND TRUE   __tmp__DType[this] == MainToken
[L7681]   CALL        call __var_14 := balanceOf~address_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6955]               __ret_0_ := __tmp__balances_BasicToken[this][_owner_s214];
[L7681]   RET         call __var_14 := balanceOf~address_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7682]   COND FALSE  !(revert)
[L7698]               balance_s729 := (__var_14 + __tmp__freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2130]   RET         call balance_s729 := balanceOf~address_FreezableToken__fail(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2131]               assume revert || gas < 0;
[L14529]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14777]  RET         call CorralChoice_MainToken(this);

Loop:
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND TRUE   choice == 38
[L14520]              gas := gas - 21000;
[L14521]  COND TRUE   gas >= 0
[L14522]              assume msgvalue_MSG == 0;
[L14523]  CALL        call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L379]                havoc __exception;
[L380]                revert := false;
[L381]    COND FALSE  !(__exception)
[L420]    CALL        call __ret_0_ := totalSupply_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6884]               __ret_0_ := totalSupply__BasicToken[this];
[L420]    RET         call __ret_0_ := totalSupply_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L421]                assume !revert && gas >= 0;
[L14523]  RET         call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L14777]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:43:41,156 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:43:41,157 INFO  L82        PathProgramCache]: Analyzing trace with hash -1014857959, now seen corresponding path program 1 times
[2020-11-24 21:43:41,157 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:43:41,186 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:43:41,660 INFO  L134       CoverageAnalysis]: Checked inductivity of 9826 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9826 trivial. 0 not checked.
[2020-11-24 21:43:41,661 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:43:41,661 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-24 21:43:41,661 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:43:41,661 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-24 21:43:41,662 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-24 21:43:41,662 INFO  L87              Difference]: Start difference. First operand 9140 states and 10288 transitions. cyclomatic complexity: 1169 Second operand 5 states.
[2020-11-24 21:43:42,930 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:43:42,930 INFO  L93              Difference]: Finished difference Result 9989 states and 11225 transitions.
[2020-11-24 21:43:42,930 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 21:43:42,930 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9989 states and 11225 transitions.
[2020-11-24 21:43:42,952 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 12
[2020-11-24 21:43:42,968 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9989 states to 7115 states and 8219 transitions.
[2020-11-24 21:43:42,968 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1173
[2020-11-24 21:43:42,969 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1332
[2020-11-24 21:43:42,969 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7115 states and 8219 transitions.
[2020-11-24 21:43:42,973 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:43:42,973 INFO  L728         BuchiCegarLoop]: Abstraction has 7115 states and 8219 transitions.
[2020-11-24 21:43:42,978 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7115 states and 8219 transitions.
[2020-11-24 21:43:43,007 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7115 to 5653.
[2020-11-24 21:43:43,007 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5653 states.
[2020-11-24 21:43:43,013 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5653 states to 5653 states and 6367 transitions.
[2020-11-24 21:43:43,013 INFO  L751         BuchiCegarLoop]: Abstraction has 5653 states and 6367 transitions.
[2020-11-24 21:43:43,013 INFO  L631         BuchiCegarLoop]: Abstraction has 5653 states and 6367 transitions.
[2020-11-24 21:43:43,013 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-24 21:43:43,013 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5653 states and 6367 transitions.
[2020-11-24 21:43:43,019 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:43:43,019 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:43:43,019 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:43:43,022 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:43:43,022 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14767]              assume null == 0;
[L14768]  CALL        call this := FreshRefGenerator__success();
[L6697]               havoc newRef;
[L6698]               assume Alloc[newRef] == false;
[L6699]               Alloc[newRef] := true;
[L6700]               assume newRef != null;
[L14768]  RET         call this := FreshRefGenerator__success();
[L14769]              assume now >= 0;
[L14770]              assume DType[this] == MainToken;
[L14771]              assume msgvalue_MSG == 0;
[L14772]              gas := gas - 53000;
[L14773]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4385]               havoc __exception;
[L4386]               revert := false;
[L4387]   COND FALSE  !(__exception)
[L4426]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9506]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9284]               assume msgsender_MSG != null;
[L9285]               Balance[this] := 0;
[L9286]               TOKEN_DECIMALS_Consts[this] := 18;
[L9287]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9288]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9289]               TOKEN_NAME_Consts[this] := -1298559559;
[L9290]               TOKEN_SYMBOL_Consts[this] := 120673937;
[L9291]               PAUSED_Consts[this] := false;
[L9292]               __var_52 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9293]               TARGET_USER_Consts[this] := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9294]               CONTINUE_MINTING_Consts[this] := false;
[L9308]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]   COND FALSE  !(revert)
[L9506]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9507]   COND FALSE  !(revert)
[L9510]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9510]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9511]   COND FALSE  !(revert)
[L9514]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9514]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9515]   COND FALSE  !(revert)
[L9518]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9518]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9519]   COND FALSE  !(revert)
[L9522]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9522]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9523]   COND FALSE  !(revert)
[L9526]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9526]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9527]   COND FALSE  !(revert)
[L9530]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9530]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9534]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9093]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9093]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9094]   COND FALSE  !(revert)
[L9097]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9097]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9098]   COND FALSE  !(revert)
[L9101]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9101]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9102]   COND FALSE  !(revert)
[L9105]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9105]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9106]   COND FALSE  !(revert)
[L9109]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9109]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9110]   COND FALSE  !(revert)
[L9113]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9113]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9114]   COND FALSE  !(revert)
[L9117]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9117]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9050]               assume msgsender_MSG != null;
[L9051]               Balance[this] := 0;
[L9121]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9538]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8837]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L8837]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]   COND FALSE  !(revert)
[L8841]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L8841]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8842]   COND FALSE  !(revert)
[L8845]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8814]               assume msgsender_MSG != null;
[L8815]               Balance[this] := 0;
[L8845]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8846]   COND FALSE  !(revert)
[L9542]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8963]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L8963]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8964]   COND FALSE  !(revert)
[L8967]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8943]               assume msgsender_MSG != null;
[L8944]               Balance[this] := 0;
[L8945]               paused_Pausable[this] := false;
[L8967]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8968]   COND FALSE  !(revert)
[L9546]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9434]               assume msgsender_MSG != null;
[L9435]               Balance[this] := 0;
[L9436]               initialized_MainToken[this] := false;
[L9438]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9754]   COND FALSE  !(!!initialized_MainToken[this])
[L9758]               initialized_MainToken[this] := true;
[L9759]   COND FALSE  !(PAUSED_Consts[this])
[L9769]               __var_57 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9770]               addresses_s1673 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9771]               __var_58 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9772]               amounts_s1673 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9773]               __var_59 := 0 % 18446744073709551616;
[L9774]               freezes_s1673 := 0 % 18446744073709551616;
[L9775]               i_s1673 := 0;
[L9776]   COND TRUE   i_s1673 < Length[addresses_s1673]
[L9778]   COND TRUE   M_int_int[freezes_s1673][i_s1673] == 0
[L9779]   COND TRUE   DType[this] == MainToken
[L9780]   CALL        call __var_60 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, M_int_Ref[addresses_s1673][i_s1673], M_int_int[amounts_s1673][i_s1673]);
[L7531]   CALL        call hasMintPermission_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12753]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7531]   RET         call hasMintPermission_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7532]   COND FALSE  !(revert)
[L7535]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12737]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7535]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7536]   COND FALSE  !(revert)
[L7539]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s664);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L7539]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s664);
[L7540]   COND FALSE  !(revert)
[L7543]               totalSupply__BasicToken[this] := __var_12;
[L7544]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s664], _amount_s664);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L7544]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s664], _amount_s664);
[L7545]   COND FALSE  !(revert)
[L7548]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s664];
[L7549]               balances_BasicToken[this][_to_s664] := __var_13;
[L7550]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s664];
[L7551]               assert { :EventEmitted "Mint_MintableToken" } true;
[L7552]               assert { :EventEmitted "Transfer_MintableToken" } true;
[L7553]               __ret_0_ := true;
[L9780]   RET         call __var_60 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, M_int_Ref[addresses_s1673][i_s1673], M_int_int[amounts_s1673][i_s1673]);
[L9781]   COND FALSE  !(revert)
[L9795]               i_s1673 := (i_s1673 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9796]   COND FALSE  !(gas < 0)
[L9776]   COND FALSE  !(i_s1673 < Length[addresses_s1673])
[L9800]   COND TRUE   !CONTINUE_MINTING_Consts[this]
[L9801]   COND TRUE   DType[this] == MainToken
[L9802]   CALL        call __var_62 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7574]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12721]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7574]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7575]   COND FALSE  !(revert)
[L7578]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12737]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7578]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7579]   COND FALSE  !(revert)
[L7582]               mintingFinished_MintableToken[this] := true;
[L7583]               assert { :EventEmitted "MintFinished_MintableToken" } true;
[L7584]               __ret_0_ := true;
[L9802]   RET         call __var_62 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9803]   COND FALSE  !(revert)
[L9810]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9438]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9439]   COND FALSE  !(revert)
[L9442]   COND TRUE   DType[this] == MainToken
[L9443]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7356]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12721]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7356]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   COND TRUE   DType[this] == MainToken
[L7361]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7404]               __var_11 := null;
[L7405]   COND FALSE  !(!(_newOwner_s581 != null))
[L7409]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7410]               owner_Ownable[this] := _newOwner_s581;
[L7361]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7362]   COND FALSE  !(revert)
[L9443]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9444]   COND FALSE  !(revert)
[L9550]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L4426]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4427]               assume !revert && gas >= 0;
[L14773]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14774]              assume !revert && gas >= 0;
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND TRUE   choice == 37
[L14526]              gas := gas - 21000;
[L14527]  COND TRUE   gas >= 0
[L14528]              assume msgvalue_MSG == 0;
[L14529]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7706]   COND TRUE   DType[this] == MainToken
[L7707]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6961]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7707]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7708]   COND FALSE  !(revert)
[L7724]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14529]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14777]  RET         call CorralChoice_MainToken(this);

Loop:
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND TRUE   choice == 37
[L14526]              gas := gas - 21000;
[L14527]  COND TRUE   gas >= 0
[L14528]              assume msgvalue_MSG == 0;
[L14529]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7706]   COND TRUE   DType[this] == MainToken
[L7707]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6961]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7707]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7708]   COND FALSE  !(revert)
[L7724]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14529]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14777]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:43:43,028 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:43:43,029 INFO  L82        PathProgramCache]: Analyzing trace with hash -2050136625, now seen corresponding path program 1 times
[2020-11-24 21:43:43,029 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:43:43,083 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:43:43,781 INFO  L134       CoverageAnalysis]: Checked inductivity of 9835 backedges. 7 proven. 0 refuted. 0 times theorem prover too weak. 9828 trivial. 0 not checked.
[2020-11-24 21:43:43,781 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:43:43,782 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [15] imperfect sequences [] total 15
[2020-11-24 21:43:43,782 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:43:43,782 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-11-24 21:43:43,782 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=30, Invalid=210, Unknown=0, NotChecked=0, Total=240
[2020-11-24 21:43:43,783 INFO  L87              Difference]: Start difference. First operand 5653 states and 6367 transitions. cyclomatic complexity: 730 Second operand 16 states.
[2020-11-24 21:43:48,544 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:43:48,544 INFO  L93              Difference]: Finished difference Result 5777 states and 6517 transitions.
[2020-11-24 21:43:48,544 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 19 states. 
[2020-11-24 21:43:48,545 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5777 states and 6517 transitions.
[2020-11-24 21:43:48,555 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:43:48,565 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5777 states to 5777 states and 6517 transitions.
[2020-11-24 21:43:48,565 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1080
[2020-11-24 21:43:48,566 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1080
[2020-11-24 21:43:48,566 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5777 states and 6517 transitions.
[2020-11-24 21:43:48,569 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:43:48,569 INFO  L728         BuchiCegarLoop]: Abstraction has 5777 states and 6517 transitions.
[2020-11-24 21:43:48,573 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5777 states and 6517 transitions.
[2020-11-24 21:43:48,602 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5777 to 5739.
[2020-11-24 21:43:48,602 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5739 states.
[2020-11-24 21:43:48,608 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5739 states to 5739 states and 6467 transitions.
[2020-11-24 21:43:48,608 INFO  L751         BuchiCegarLoop]: Abstraction has 5739 states and 6467 transitions.
[2020-11-24 21:43:48,608 INFO  L631         BuchiCegarLoop]: Abstraction has 5739 states and 6467 transitions.
[2020-11-24 21:43:48,608 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-24 21:43:48,608 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5739 states and 6467 transitions.
[2020-11-24 21:43:48,613 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:43:48,614 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:43:48,614 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:43:48,616 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:43:48,616 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14767]              assume null == 0;
[L14768]  CALL        call this := FreshRefGenerator__success();
[L6697]               havoc newRef;
[L6698]               assume Alloc[newRef] == false;
[L6699]               Alloc[newRef] := true;
[L6700]               assume newRef != null;
[L14768]  RET         call this := FreshRefGenerator__success();
[L14769]              assume now >= 0;
[L14770]              assume DType[this] == MainToken;
[L14771]              assume msgvalue_MSG == 0;
[L14772]              gas := gas - 53000;
[L14773]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4385]               havoc __exception;
[L4386]               revert := false;
[L4387]   COND FALSE  !(__exception)
[L4426]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9506]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9284]               assume msgsender_MSG != null;
[L9285]               Balance[this] := 0;
[L9286]               TOKEN_DECIMALS_Consts[this] := 18;
[L9287]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9288]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9289]               TOKEN_NAME_Consts[this] := -1298559559;
[L9290]               TOKEN_SYMBOL_Consts[this] := 120673937;
[L9291]               PAUSED_Consts[this] := false;
[L9292]               __var_52 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9293]               TARGET_USER_Consts[this] := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9294]               CONTINUE_MINTING_Consts[this] := false;
[L9308]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]   COND FALSE  !(revert)
[L9506]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9507]   COND FALSE  !(revert)
[L9510]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9510]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9511]   COND FALSE  !(revert)
[L9514]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9514]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9515]   COND FALSE  !(revert)
[L9518]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9518]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9519]   COND FALSE  !(revert)
[L9522]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9522]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9523]   COND FALSE  !(revert)
[L9526]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9526]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9527]   COND FALSE  !(revert)
[L9530]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9530]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9534]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9093]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9093]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9094]   COND FALSE  !(revert)
[L9097]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9097]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9098]   COND FALSE  !(revert)
[L9101]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9101]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9102]   COND FALSE  !(revert)
[L9105]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9105]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9106]   COND FALSE  !(revert)
[L9109]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9109]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9110]   COND FALSE  !(revert)
[L9113]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9113]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9114]   COND FALSE  !(revert)
[L9117]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9117]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9050]               assume msgsender_MSG != null;
[L9051]               Balance[this] := 0;
[L9121]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9538]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8837]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L8837]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]   COND FALSE  !(revert)
[L8841]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L8841]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8842]   COND FALSE  !(revert)
[L8845]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8814]               assume msgsender_MSG != null;
[L8815]               Balance[this] := 0;
[L8845]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8846]   COND FALSE  !(revert)
[L9542]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8963]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L8963]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8964]   COND FALSE  !(revert)
[L8967]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8943]               assume msgsender_MSG != null;
[L8944]               Balance[this] := 0;
[L8945]               paused_Pausable[this] := false;
[L8967]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8968]   COND FALSE  !(revert)
[L9546]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9434]               assume msgsender_MSG != null;
[L9435]               Balance[this] := 0;
[L9436]               initialized_MainToken[this] := false;
[L9438]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9754]   COND FALSE  !(!!initialized_MainToken[this])
[L9758]               initialized_MainToken[this] := true;
[L9759]   COND FALSE  !(PAUSED_Consts[this])
[L9769]               __var_57 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9770]               addresses_s1673 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9771]               __var_58 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9772]               amounts_s1673 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9773]               __var_59 := 0 % 18446744073709551616;
[L9774]               freezes_s1673 := 0 % 18446744073709551616;
[L9775]               i_s1673 := 0;
[L9776]   COND TRUE   i_s1673 < Length[addresses_s1673]
[L9778]   COND TRUE   M_int_int[freezes_s1673][i_s1673] == 0
[L9779]   COND TRUE   DType[this] == MainToken
[L9780]   CALL        call __var_60 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, M_int_Ref[addresses_s1673][i_s1673], M_int_int[amounts_s1673][i_s1673]);
[L7531]   CALL        call hasMintPermission_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12753]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7531]   RET         call hasMintPermission_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7532]   COND FALSE  !(revert)
[L7535]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12737]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7535]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7536]   COND FALSE  !(revert)
[L7539]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s664);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L7539]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s664);
[L7540]   COND FALSE  !(revert)
[L7543]               totalSupply__BasicToken[this] := __var_12;
[L7544]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s664], _amount_s664);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L7544]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s664], _amount_s664);
[L7545]   COND FALSE  !(revert)
[L7548]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s664];
[L7549]               balances_BasicToken[this][_to_s664] := __var_13;
[L7550]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s664];
[L7551]               assert { :EventEmitted "Mint_MintableToken" } true;
[L7552]               assert { :EventEmitted "Transfer_MintableToken" } true;
[L7553]               __ret_0_ := true;
[L9780]   RET         call __var_60 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, M_int_Ref[addresses_s1673][i_s1673], M_int_int[amounts_s1673][i_s1673]);
[L9781]   COND FALSE  !(revert)
[L9795]               i_s1673 := (i_s1673 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9796]   COND FALSE  !(gas < 0)
[L9776]   COND FALSE  !(i_s1673 < Length[addresses_s1673])
[L9800]   COND TRUE   !CONTINUE_MINTING_Consts[this]
[L9801]   COND TRUE   DType[this] == MainToken
[L9802]   CALL        call __var_62 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7574]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12721]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7574]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7575]   COND FALSE  !(revert)
[L7578]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12737]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7578]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7579]   COND FALSE  !(revert)
[L7582]               mintingFinished_MintableToken[this] := true;
[L7583]               assert { :EventEmitted "MintFinished_MintableToken" } true;
[L7584]               __ret_0_ := true;
[L9802]   RET         call __var_62 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9803]   COND FALSE  !(revert)
[L9810]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9438]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9439]   COND FALSE  !(revert)
[L9442]   COND TRUE   DType[this] == MainToken
[L9443]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7356]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12721]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7356]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   COND TRUE   DType[this] == MainToken
[L7361]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7404]               __var_11 := null;
[L7405]   COND FALSE  !(!(_newOwner_s581 != null))
[L7409]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7410]               owner_Ownable[this] := _newOwner_s581;
[L7361]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7362]   COND FALSE  !(revert)
[L9443]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9444]   COND FALSE  !(revert)
[L9550]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L4426]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4427]               assume !revert && gas >= 0;
[L14773]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14774]              assume !revert && gas >= 0;
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND FALSE  !(choice == 37)
[L14531]  COND FALSE  !(choice == 36)
[L14538]  COND FALSE  !(choice == 35)
[L14544]  COND FALSE  !(choice == 34)
[L14551]  COND FALSE  !(choice == 33)
[L14558]  COND FALSE  !(choice == 32)
[L14565]  COND FALSE  !(choice == 31)
[L14572]  COND FALSE  !(choice == 30)
[L14578]  COND FALSE  !(choice == 29)
[L14584]  COND FALSE  !(choice == 28)
[L14590]  COND FALSE  !(choice == 27)
[L14596]  COND FALSE  !(choice == 26)
[L14603]  COND FALSE  !(choice == 25)
[L14609]  COND FALSE  !(choice == 24)
[L14615]  COND FALSE  !(choice == 23)
[L14621]  COND FALSE  !(choice == 22)
[L14627]  COND FALSE  !(choice == 21)
[L14634]  COND FALSE  !(choice == 20)
[L14642]  COND TRUE   choice == 19
[L14643]              gas := gas - 21000;
[L14644]  COND TRUE   gas >= 0
[L14645]              assume msgvalue_MSG == 0;
[L14646]  CALL        call releaseOnce_FreezableToken(this, msgsender_MSG, msgvalue_MSG);
[L2624]               havoc __exception;
[L2625]               revert := false;
[L2626]   COND FALSE  !(__exception)
[L2665]   CALL        call releaseOnce_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8290]               __var_31 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8291]   COND TRUE   DType[this] == MainToken
[L8292]   CALL        call headKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8545]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8547]               havoc result_s1122;
[L8548]               havoc result_s1122;
[L8549]               havoc result_s1122;
[L8550]               havoc result_s1122;
[L8292]   RET         call headKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8293]   COND FALSE  !(revert)
[L8309]               headKey_s1054 := headKey_s1054;
[L8310]               head_s1054 := chains_FreezableToken[this][headKey_s1054];
[L8311]   COND FALSE  !(!(head_s1054 != 0))
[L8315]               __var_32 := now % 18446744073709551616;
[L8316]   COND FALSE  !(!(now % 18446744073709551616 > head_s1054))
[L8320]               __var_33 := head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8321]   COND FALSE  !(DType[this] == MainToken)
[L8326]   COND FALSE  !(DType[this] == FreezableMintableToken)
[L8331]   COND TRUE   DType[this] == FreezableToken
[L8332]   CALL        call currentKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8545]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8547]               havoc result_s1122;
[L8548]               havoc result_s1122;
[L8549]               havoc result_s1122;
[L8550]               havoc result_s1122;
[L8332]   RET         call currentKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8333]   COND FALSE  !(revert)
[L8339]               currentKey_s1054 := currentKey_s1054;
[L8340]               next_s1054 := chains_FreezableToken[this][currentKey_s1054];
[L8341]               amount_s1054 := freezings_FreezableToken[this][currentKey_s1054];
[L8342]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s1054];
[L8343]               freezings_FreezableToken[this][currentKey_s1054] := 0;
[L8344]   CALL        call __var_34 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], amount_s1054);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L8344]   RET         call __var_34 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], amount_s1054);
[L8345]   COND FALSE  !(revert)
[L8348]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L8349]               balances_BasicToken[this][msgsender_MSG] := __var_34;
[L8350]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L8351]   CALL        call __var_35 := sub~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][msgsender_MSG], amount_s1054);
[L6810]               assert b_s98 <= a_s98;
[L6811]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8351]   RET         call __var_35 := sub~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][msgsender_MSG], amount_s1054);
[L8352]   COND FALSE  !(revert)
[L8355]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][msgsender_MSG];
[L8356]               freezingBalance_FreezableToken[this][msgsender_MSG] := __var_35;
[L8357]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][msgsender_MSG];
[L8358]   COND TRUE   next_s1054 == 0
[L8359]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][headKey_s1054];
[L8360]               chains_FreezableToken[this][headKey_s1054] := 0;
[L8368]               assert { :EventEmitted "Released_FreezableToken" } true;
[L2665]   RET         call releaseOnce_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2666]               assume !revert && gas >= 0;
[L14646]  RET         call releaseOnce_FreezableToken(this, msgsender_MSG, msgvalue_MSG);
[L14777]  RET         call CorralChoice_MainToken(this);
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND TRUE   choice == 37
[L14526]              gas := gas - 21000;
[L14527]  COND TRUE   gas >= 0
[L14528]              assume msgvalue_MSG == 0;
[L14529]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7706]   COND TRUE   DType[this] == MainToken
[L7707]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6961]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7707]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7708]   COND FALSE  !(revert)
[L7724]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14529]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14777]  RET         call CorralChoice_MainToken(this);

Loop:
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND TRUE   choice == 37
[L14526]              gas := gas - 21000;
[L14527]  COND TRUE   gas >= 0
[L14528]              assume msgvalue_MSG == 0;
[L14529]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7706]   COND TRUE   DType[this] == MainToken
[L7707]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6961]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7707]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7708]   COND FALSE  !(revert)
[L7724]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14529]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14777]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:43:48,623 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:43:48,623 INFO  L82        PathProgramCache]: Analyzing trace with hash 52223197, now seen corresponding path program 1 times
[2020-11-24 21:43:48,624 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:43:48,657 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:43:49,293 INFO  L134       CoverageAnalysis]: Checked inductivity of 9941 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 9940 trivial. 0 not checked.
[2020-11-24 21:43:49,293 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:43:49,293 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 21:43:49,294 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:43:49,294 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 21:43:49,294 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 21:43:49,295 INFO  L87              Difference]: Start difference. First operand 5739 states and 6467 transitions. cyclomatic complexity: 746 Second operand 3 states.
[2020-11-24 21:43:49,345 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:43:49,346 INFO  L93              Difference]: Finished difference Result 5809 states and 6549 transitions.
[2020-11-24 21:43:49,346 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 21:43:49,346 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5809 states and 6549 transitions.
[2020-11-24 21:43:49,354 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:43:49,363 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5809 states to 5809 states and 6549 transitions.
[2020-11-24 21:43:49,363 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1060
[2020-11-24 21:43:49,364 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1060
[2020-11-24 21:43:49,364 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5809 states and 6549 transitions.
[2020-11-24 21:43:49,366 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:43:49,367 INFO  L728         BuchiCegarLoop]: Abstraction has 5809 states and 6549 transitions.
[2020-11-24 21:43:49,370 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5809 states and 6549 transitions.
[2020-11-24 21:43:49,393 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5809 to 5753.
[2020-11-24 21:43:49,393 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5753 states.
[2020-11-24 21:43:49,398 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5753 states to 5753 states and 6481 transitions.
[2020-11-24 21:43:49,398 INFO  L751         BuchiCegarLoop]: Abstraction has 5753 states and 6481 transitions.
[2020-11-24 21:43:49,398 INFO  L631         BuchiCegarLoop]: Abstraction has 5753 states and 6481 transitions.
[2020-11-24 21:43:49,398 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-24 21:43:49,398 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5753 states and 6481 transitions.
[2020-11-24 21:43:49,403 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:43:49,403 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:43:49,403 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:43:49,406 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:43:49,406 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14767]              assume null == 0;
[L14768]  CALL        call this := FreshRefGenerator__success();
[L6697]               havoc newRef;
[L6698]               assume Alloc[newRef] == false;
[L6699]               Alloc[newRef] := true;
[L6700]               assume newRef != null;
[L14768]  RET         call this := FreshRefGenerator__success();
[L14769]              assume now >= 0;
[L14770]              assume DType[this] == MainToken;
[L14771]              assume msgvalue_MSG == 0;
[L14772]              gas := gas - 53000;
[L14773]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4385]               havoc __exception;
[L4386]               revert := false;
[L4387]   COND FALSE  !(__exception)
[L4426]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9506]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9284]               assume msgsender_MSG != null;
[L9285]               Balance[this] := 0;
[L9286]               TOKEN_DECIMALS_Consts[this] := 18;
[L9287]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9288]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9289]               TOKEN_NAME_Consts[this] := -1298559559;
[L9290]               TOKEN_SYMBOL_Consts[this] := 120673937;
[L9291]               PAUSED_Consts[this] := false;
[L9292]               __var_52 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9293]               TARGET_USER_Consts[this] := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9294]               CONTINUE_MINTING_Consts[this] := false;
[L9308]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]   COND FALSE  !(revert)
[L9506]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9507]   COND FALSE  !(revert)
[L9510]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9510]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9511]   COND FALSE  !(revert)
[L9514]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9514]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9515]   COND FALSE  !(revert)
[L9518]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9518]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9519]   COND FALSE  !(revert)
[L9522]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9522]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9523]   COND FALSE  !(revert)
[L9526]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9526]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9527]   COND FALSE  !(revert)
[L9530]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9530]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9534]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9093]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9093]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9094]   COND FALSE  !(revert)
[L9097]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9097]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9098]   COND FALSE  !(revert)
[L9101]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9101]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9102]   COND FALSE  !(revert)
[L9105]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9105]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9106]   COND FALSE  !(revert)
[L9109]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9109]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9110]   COND FALSE  !(revert)
[L9113]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9113]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9114]   COND FALSE  !(revert)
[L9117]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9117]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9050]               assume msgsender_MSG != null;
[L9051]               Balance[this] := 0;
[L9121]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9538]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8837]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L8837]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]   COND FALSE  !(revert)
[L8841]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L8841]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8842]   COND FALSE  !(revert)
[L8845]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8814]               assume msgsender_MSG != null;
[L8815]               Balance[this] := 0;
[L8845]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8846]   COND FALSE  !(revert)
[L9542]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8963]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L8963]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8964]   COND FALSE  !(revert)
[L8967]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8943]               assume msgsender_MSG != null;
[L8944]               Balance[this] := 0;
[L8945]               paused_Pausable[this] := false;
[L8967]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8968]   COND FALSE  !(revert)
[L9546]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9434]               assume msgsender_MSG != null;
[L9435]               Balance[this] := 0;
[L9436]               initialized_MainToken[this] := false;
[L9438]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9754]   COND FALSE  !(!!initialized_MainToken[this])
[L9758]               initialized_MainToken[this] := true;
[L9759]   COND FALSE  !(PAUSED_Consts[this])
[L9769]               __var_57 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9770]               addresses_s1673 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9771]               __var_58 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9772]               amounts_s1673 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9773]               __var_59 := 0 % 18446744073709551616;
[L9774]               freezes_s1673 := 0 % 18446744073709551616;
[L9775]               i_s1673 := 0;
[L9776]   COND TRUE   i_s1673 < Length[addresses_s1673]
[L9778]   COND TRUE   M_int_int[freezes_s1673][i_s1673] == 0
[L9779]   COND TRUE   DType[this] == MainToken
[L9780]   CALL        call __var_60 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, M_int_Ref[addresses_s1673][i_s1673], M_int_int[amounts_s1673][i_s1673]);
[L7531]   CALL        call hasMintPermission_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12753]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7531]   RET         call hasMintPermission_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7532]   COND FALSE  !(revert)
[L7535]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12737]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7535]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7536]   COND FALSE  !(revert)
[L7539]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s664);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L7539]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s664);
[L7540]   COND FALSE  !(revert)
[L7543]               totalSupply__BasicToken[this] := __var_12;
[L7544]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s664], _amount_s664);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L7544]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s664], _amount_s664);
[L7545]   COND FALSE  !(revert)
[L7548]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s664];
[L7549]               balances_BasicToken[this][_to_s664] := __var_13;
[L7550]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s664];
[L7551]               assert { :EventEmitted "Mint_MintableToken" } true;
[L7552]               assert { :EventEmitted "Transfer_MintableToken" } true;
[L7553]               __ret_0_ := true;
[L9780]   RET         call __var_60 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, M_int_Ref[addresses_s1673][i_s1673], M_int_int[amounts_s1673][i_s1673]);
[L9781]   COND FALSE  !(revert)
[L9795]               i_s1673 := (i_s1673 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9796]   COND FALSE  !(gas < 0)
[L9776]   COND FALSE  !(i_s1673 < Length[addresses_s1673])
[L9800]   COND TRUE   !CONTINUE_MINTING_Consts[this]
[L9801]   COND TRUE   DType[this] == MainToken
[L9802]   CALL        call __var_62 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7574]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12721]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7574]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7575]   COND FALSE  !(revert)
[L7578]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12737]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7578]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7579]   COND FALSE  !(revert)
[L7582]               mintingFinished_MintableToken[this] := true;
[L7583]               assert { :EventEmitted "MintFinished_MintableToken" } true;
[L7584]               __ret_0_ := true;
[L9802]   RET         call __var_62 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9803]   COND FALSE  !(revert)
[L9810]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9438]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9439]   COND FALSE  !(revert)
[L9442]   COND TRUE   DType[this] == MainToken
[L9443]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7356]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12721]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7356]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   COND TRUE   DType[this] == MainToken
[L7361]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7404]               __var_11 := null;
[L7405]   COND FALSE  !(!(_newOwner_s581 != null))
[L7409]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7410]               owner_Ownable[this] := _newOwner_s581;
[L7361]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7362]   COND FALSE  !(revert)
[L9443]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9444]   COND FALSE  !(revert)
[L9550]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L4426]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4427]               assume !revert && gas >= 0;
[L14773]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14774]              assume !revert && gas >= 0;
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND FALSE  !(choice == 37)
[L14531]  COND FALSE  !(choice == 36)
[L14538]  COND FALSE  !(choice == 35)
[L14544]  COND FALSE  !(choice == 34)
[L14551]  COND FALSE  !(choice == 33)
[L14558]  COND FALSE  !(choice == 32)
[L14565]  COND FALSE  !(choice == 31)
[L14572]  COND FALSE  !(choice == 30)
[L14578]  COND FALSE  !(choice == 29)
[L14584]  COND FALSE  !(choice == 28)
[L14590]  COND FALSE  !(choice == 27)
[L14596]  COND FALSE  !(choice == 26)
[L14603]  COND FALSE  !(choice == 25)
[L14609]  COND FALSE  !(choice == 24)
[L14615]  COND FALSE  !(choice == 23)
[L14621]  COND FALSE  !(choice == 22)
[L14627]  COND FALSE  !(choice == 21)
[L14634]  COND FALSE  !(choice == 20)
[L14642]  COND TRUE   choice == 19
[L14643]              gas := gas - 21000;
[L14644]  COND TRUE   gas >= 0
[L14645]              assume msgvalue_MSG == 0;
[L14646]  CALL        call releaseOnce_FreezableToken(this, msgsender_MSG, msgvalue_MSG);
[L2624]               havoc __exception;
[L2625]               revert := false;
[L2626]   COND FALSE  !(__exception)
[L2665]   CALL        call releaseOnce_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8290]               __var_31 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8291]   COND FALSE  !(DType[this] == MainToken)
[L8296]   COND FALSE  !(DType[this] == FreezableMintableToken)
[L8301]   COND TRUE   DType[this] == FreezableToken
[L8302]   CALL        call headKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8545]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8547]               havoc result_s1122;
[L8548]               havoc result_s1122;
[L8549]               havoc result_s1122;
[L8550]               havoc result_s1122;
[L8302]   RET         call headKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8303]   COND FALSE  !(revert)
[L8309]               headKey_s1054 := headKey_s1054;
[L8310]               head_s1054 := chains_FreezableToken[this][headKey_s1054];
[L8311]   COND FALSE  !(!(head_s1054 != 0))
[L8315]               __var_32 := now % 18446744073709551616;
[L8316]   COND FALSE  !(!(now % 18446744073709551616 > head_s1054))
[L8320]               __var_33 := head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8321]   COND FALSE  !(DType[this] == MainToken)
[L8326]   COND TRUE   DType[this] == FreezableMintableToken
[L8327]   CALL        call currentKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8545]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8547]               havoc result_s1122;
[L8548]               havoc result_s1122;
[L8549]               havoc result_s1122;
[L8550]               havoc result_s1122;
[L8327]   RET         call currentKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8328]   COND FALSE  !(revert)
[L8339]               currentKey_s1054 := currentKey_s1054;
[L8340]               next_s1054 := chains_FreezableToken[this][currentKey_s1054];
[L8341]               amount_s1054 := freezings_FreezableToken[this][currentKey_s1054];
[L8342]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s1054];
[L8343]               freezings_FreezableToken[this][currentKey_s1054] := 0;
[L8344]   CALL        call __var_34 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], amount_s1054);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L8344]   RET         call __var_34 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], amount_s1054);
[L8345]   COND FALSE  !(revert)
[L8348]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L8349]               balances_BasicToken[this][msgsender_MSG] := __var_34;
[L8350]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L8351]   CALL        call __var_35 := sub~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][msgsender_MSG], amount_s1054);
[L6810]               assert b_s98 <= a_s98;
[L6811]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8351]   RET         call __var_35 := sub~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][msgsender_MSG], amount_s1054);
[L8352]   COND FALSE  !(revert)
[L8355]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][msgsender_MSG];
[L8356]               freezingBalance_FreezableToken[this][msgsender_MSG] := __var_35;
[L8357]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][msgsender_MSG];
[L8358]   COND TRUE   next_s1054 == 0
[L8359]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][headKey_s1054];
[L8360]               chains_FreezableToken[this][headKey_s1054] := 0;
[L8368]               assert { :EventEmitted "Released_FreezableToken" } true;
[L2665]   RET         call releaseOnce_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2666]               assume !revert && gas >= 0;
[L14646]  RET         call releaseOnce_FreezableToken(this, msgsender_MSG, msgvalue_MSG);
[L14777]  RET         call CorralChoice_MainToken(this);
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND TRUE   choice == 37
[L14526]              gas := gas - 21000;
[L14527]  COND TRUE   gas >= 0
[L14528]              assume msgvalue_MSG == 0;
[L14529]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7706]   COND TRUE   DType[this] == MainToken
[L7707]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6961]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7707]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7708]   COND FALSE  !(revert)
[L7724]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14529]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14777]  RET         call CorralChoice_MainToken(this);

Loop:
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND TRUE   choice == 38
[L14520]              gas := gas - 21000;
[L14521]  COND FALSE  !(gas >= 0)
[L14777]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:43:49,413 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:43:49,413 INFO  L82        PathProgramCache]: Analyzing trace with hash 1965909074, now seen corresponding path program 1 times
[2020-11-24 21:43:49,414 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:43:49,444 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:43:50,035 INFO  L134       CoverageAnalysis]: Checked inductivity of 9941 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 9940 trivial. 0 not checked.
[2020-11-24 21:43:50,035 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:43:50,035 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 21:43:50,036 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:43:50,036 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 21:43:50,036 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 21:43:50,036 INFO  L87              Difference]: Start difference. First operand 5753 states and 6481 transitions. cyclomatic complexity: 746 Second operand 3 states.
[2020-11-24 21:43:50,084 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:43:50,084 INFO  L93              Difference]: Finished difference Result 5825 states and 6567 transitions.
[2020-11-24 21:43:50,084 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 21:43:50,084 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5825 states and 6567 transitions.
[2020-11-24 21:43:50,093 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:43:50,102 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5825 states to 5825 states and 6567 transitions.
[2020-11-24 21:43:50,102 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1060
[2020-11-24 21:43:50,103 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1060
[2020-11-24 21:43:50,103 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5825 states and 6567 transitions.
[2020-11-24 21:43:50,105 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:43:50,106 INFO  L728         BuchiCegarLoop]: Abstraction has 5825 states and 6567 transitions.
[2020-11-24 21:43:50,109 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5825 states and 6567 transitions.
[2020-11-24 21:43:50,131 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5825 to 5769.
[2020-11-24 21:43:50,131 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5769 states.
[2020-11-24 21:43:50,137 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5769 states to 5769 states and 6499 transitions.
[2020-11-24 21:43:50,137 INFO  L751         BuchiCegarLoop]: Abstraction has 5769 states and 6499 transitions.
[2020-11-24 21:43:50,137 INFO  L631         BuchiCegarLoop]: Abstraction has 5769 states and 6499 transitions.
[2020-11-24 21:43:50,137 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-24 21:43:50,137 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5769 states and 6499 transitions.
[2020-11-24 21:43:50,142 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:43:50,142 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:43:50,142 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:43:50,145 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:43:50,145 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14767]              assume null == 0;
[L14768]  CALL        call this := FreshRefGenerator__success();
[L6697]               havoc newRef;
[L6698]               assume Alloc[newRef] == false;
[L6699]               Alloc[newRef] := true;
[L6700]               assume newRef != null;
[L14768]  RET         call this := FreshRefGenerator__success();
[L14769]              assume now >= 0;
[L14770]              assume DType[this] == MainToken;
[L14771]              assume msgvalue_MSG == 0;
[L14772]              gas := gas - 53000;
[L14773]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4385]               havoc __exception;
[L4386]               revert := false;
[L4387]   COND FALSE  !(__exception)
[L4426]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9506]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9284]               assume msgsender_MSG != null;
[L9285]               Balance[this] := 0;
[L9286]               TOKEN_DECIMALS_Consts[this] := 18;
[L9287]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9288]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9289]               TOKEN_NAME_Consts[this] := -1298559559;
[L9290]               TOKEN_SYMBOL_Consts[this] := 120673937;
[L9291]               PAUSED_Consts[this] := false;
[L9292]               __var_52 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9293]               TARGET_USER_Consts[this] := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9294]               CONTINUE_MINTING_Consts[this] := false;
[L9308]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]   COND FALSE  !(revert)
[L9506]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9507]   COND FALSE  !(revert)
[L9510]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9510]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9511]   COND FALSE  !(revert)
[L9514]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9514]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9515]   COND FALSE  !(revert)
[L9518]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9518]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9519]   COND FALSE  !(revert)
[L9522]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9522]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9523]   COND FALSE  !(revert)
[L9526]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9526]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9527]   COND FALSE  !(revert)
[L9530]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9530]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9534]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9093]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9093]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9094]   COND FALSE  !(revert)
[L9097]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9097]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9098]   COND FALSE  !(revert)
[L9101]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9101]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9102]   COND FALSE  !(revert)
[L9105]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9105]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9106]   COND FALSE  !(revert)
[L9109]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9109]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9110]   COND FALSE  !(revert)
[L9113]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9113]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9114]   COND FALSE  !(revert)
[L9117]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9117]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9050]               assume msgsender_MSG != null;
[L9051]               Balance[this] := 0;
[L9121]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9538]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8837]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L8837]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]   COND FALSE  !(revert)
[L8841]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L8841]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8842]   COND FALSE  !(revert)
[L8845]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8814]               assume msgsender_MSG != null;
[L8815]               Balance[this] := 0;
[L8845]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8846]   COND FALSE  !(revert)
[L9542]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8963]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L8963]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8964]   COND FALSE  !(revert)
[L8967]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8943]               assume msgsender_MSG != null;
[L8944]               Balance[this] := 0;
[L8945]               paused_Pausable[this] := false;
[L8967]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8968]   COND FALSE  !(revert)
[L9546]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9434]               assume msgsender_MSG != null;
[L9435]               Balance[this] := 0;
[L9436]               initialized_MainToken[this] := false;
[L9438]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9754]   COND FALSE  !(!!initialized_MainToken[this])
[L9758]               initialized_MainToken[this] := true;
[L9759]   COND FALSE  !(PAUSED_Consts[this])
[L9769]               __var_57 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9770]               addresses_s1673 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9771]               __var_58 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9772]               amounts_s1673 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9773]               __var_59 := 0 % 18446744073709551616;
[L9774]               freezes_s1673 := 0 % 18446744073709551616;
[L9775]               i_s1673 := 0;
[L9776]   COND TRUE   i_s1673 < Length[addresses_s1673]
[L9778]   COND TRUE   M_int_int[freezes_s1673][i_s1673] == 0
[L9779]   COND TRUE   DType[this] == MainToken
[L9780]   CALL        call __var_60 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, M_int_Ref[addresses_s1673][i_s1673], M_int_int[amounts_s1673][i_s1673]);
[L7531]   CALL        call hasMintPermission_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12753]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7531]   RET         call hasMintPermission_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7532]   COND FALSE  !(revert)
[L7535]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12737]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7535]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7536]   COND FALSE  !(revert)
[L7539]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s664);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L7539]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s664);
[L7540]   COND FALSE  !(revert)
[L7543]               totalSupply__BasicToken[this] := __var_12;
[L7544]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s664], _amount_s664);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L7544]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s664], _amount_s664);
[L7545]   COND FALSE  !(revert)
[L7548]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s664];
[L7549]               balances_BasicToken[this][_to_s664] := __var_13;
[L7550]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s664];
[L7551]               assert { :EventEmitted "Mint_MintableToken" } true;
[L7552]               assert { :EventEmitted "Transfer_MintableToken" } true;
[L7553]               __ret_0_ := true;
[L9780]   RET         call __var_60 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, M_int_Ref[addresses_s1673][i_s1673], M_int_int[amounts_s1673][i_s1673]);
[L9781]   COND FALSE  !(revert)
[L9795]               i_s1673 := (i_s1673 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9796]   COND FALSE  !(gas < 0)
[L9776]   COND FALSE  !(i_s1673 < Length[addresses_s1673])
[L9800]   COND TRUE   !CONTINUE_MINTING_Consts[this]
[L9801]   COND TRUE   DType[this] == MainToken
[L9802]   CALL        call __var_62 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7574]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12721]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7574]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7575]   COND FALSE  !(revert)
[L7578]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12737]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7578]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7579]   COND FALSE  !(revert)
[L7582]               mintingFinished_MintableToken[this] := true;
[L7583]               assert { :EventEmitted "MintFinished_MintableToken" } true;
[L7584]               __ret_0_ := true;
[L9802]   RET         call __var_62 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9803]   COND FALSE  !(revert)
[L9810]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9438]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9439]   COND FALSE  !(revert)
[L9442]   COND TRUE   DType[this] == MainToken
[L9443]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7356]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12721]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7356]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   COND TRUE   DType[this] == MainToken
[L7361]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7404]               __var_11 := null;
[L7405]   COND FALSE  !(!(_newOwner_s581 != null))
[L7409]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7410]               owner_Ownable[this] := _newOwner_s581;
[L7361]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7362]   COND FALSE  !(revert)
[L9443]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9444]   COND FALSE  !(revert)
[L9550]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L4426]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4427]               assume !revert && gas >= 0;
[L14773]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14774]              assume !revert && gas >= 0;
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND FALSE  !(choice == 37)
[L14531]  COND FALSE  !(choice == 36)
[L14538]  COND FALSE  !(choice == 35)
[L14544]  COND FALSE  !(choice == 34)
[L14551]  COND FALSE  !(choice == 33)
[L14558]  COND FALSE  !(choice == 32)
[L14565]  COND FALSE  !(choice == 31)
[L14572]  COND FALSE  !(choice == 30)
[L14578]  COND FALSE  !(choice == 29)
[L14584]  COND FALSE  !(choice == 28)
[L14590]  COND FALSE  !(choice == 27)
[L14596]  COND FALSE  !(choice == 26)
[L14603]  COND FALSE  !(choice == 25)
[L14609]  COND FALSE  !(choice == 24)
[L14615]  COND FALSE  !(choice == 23)
[L14621]  COND FALSE  !(choice == 22)
[L14627]  COND FALSE  !(choice == 21)
[L14634]  COND FALSE  !(choice == 20)
[L14642]  COND TRUE   choice == 19
[L14643]              gas := gas - 21000;
[L14644]  COND TRUE   gas >= 0
[L14645]              assume msgvalue_MSG == 0;
[L14646]  CALL        call releaseOnce_FreezableToken(this, msgsender_MSG, msgvalue_MSG);
[L2624]               havoc __exception;
[L2625]               revert := false;
[L2626]   COND FALSE  !(__exception)
[L2665]   CALL        call releaseOnce_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8290]               __var_31 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8291]   COND FALSE  !(DType[this] == MainToken)
[L8296]   COND TRUE   DType[this] == FreezableMintableToken
[L8297]   CALL        call headKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8545]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8547]               havoc result_s1122;
[L8548]               havoc result_s1122;
[L8549]               havoc result_s1122;
[L8550]               havoc result_s1122;
[L8297]   RET         call headKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8298]   COND FALSE  !(revert)
[L8309]               headKey_s1054 := headKey_s1054;
[L8310]               head_s1054 := chains_FreezableToken[this][headKey_s1054];
[L8311]   COND FALSE  !(!(head_s1054 != 0))
[L8315]               __var_32 := now % 18446744073709551616;
[L8316]   COND FALSE  !(!(now % 18446744073709551616 > head_s1054))
[L8320]               __var_33 := head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8321]   COND FALSE  !(DType[this] == MainToken)
[L8326]   COND FALSE  !(DType[this] == FreezableMintableToken)
[L8331]   COND TRUE   DType[this] == FreezableToken
[L8332]   CALL        call currentKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8545]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8547]               havoc result_s1122;
[L8548]               havoc result_s1122;
[L8549]               havoc result_s1122;
[L8550]               havoc result_s1122;
[L8332]   RET         call currentKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8333]   COND FALSE  !(revert)
[L8339]               currentKey_s1054 := currentKey_s1054;
[L8340]               next_s1054 := chains_FreezableToken[this][currentKey_s1054];
[L8341]               amount_s1054 := freezings_FreezableToken[this][currentKey_s1054];
[L8342]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s1054];
[L8343]               freezings_FreezableToken[this][currentKey_s1054] := 0;
[L8344]   CALL        call __var_34 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], amount_s1054);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L8344]   RET         call __var_34 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], amount_s1054);
[L8345]   COND FALSE  !(revert)
[L8348]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L8349]               balances_BasicToken[this][msgsender_MSG] := __var_34;
[L8350]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L8351]   CALL        call __var_35 := sub~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][msgsender_MSG], amount_s1054);
[L6810]               assert b_s98 <= a_s98;
[L6811]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8351]   RET         call __var_35 := sub~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][msgsender_MSG], amount_s1054);
[L8352]   COND FALSE  !(revert)
[L8355]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][msgsender_MSG];
[L8356]               freezingBalance_FreezableToken[this][msgsender_MSG] := __var_35;
[L8357]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][msgsender_MSG];
[L8358]   COND TRUE   next_s1054 == 0
[L8359]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][headKey_s1054];
[L8360]               chains_FreezableToken[this][headKey_s1054] := 0;
[L8368]               assert { :EventEmitted "Released_FreezableToken" } true;
[L2665]   RET         call releaseOnce_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2666]               assume !revert && gas >= 0;
[L14646]  RET         call releaseOnce_FreezableToken(this, msgsender_MSG, msgvalue_MSG);
[L14777]  RET         call CorralChoice_MainToken(this);
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND TRUE   choice == 37
[L14526]              gas := gas - 21000;
[L14527]  COND TRUE   gas >= 0
[L14528]              assume msgvalue_MSG == 0;
[L14529]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7706]   COND TRUE   DType[this] == MainToken
[L7707]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6961]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7707]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7708]   COND FALSE  !(revert)
[L7724]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14529]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14777]  RET         call CorralChoice_MainToken(this);

Loop:
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND TRUE   choice == 38
[L14520]              gas := gas - 21000;
[L14521]  COND FALSE  !(gas >= 0)
[L14777]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:43:50,152 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:43:50,152 INFO  L82        PathProgramCache]: Analyzing trace with hash 1631392342, now seen corresponding path program 1 times
[2020-11-24 21:43:50,153 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:43:50,183 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:43:50,806 INFO  L134       CoverageAnalysis]: Checked inductivity of 9941 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 9940 trivial. 0 not checked.
[2020-11-24 21:43:50,807 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:43:50,807 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 21:43:50,807 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:43:50,808 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 21:43:50,808 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 21:43:50,808 INFO  L87              Difference]: Start difference. First operand 5769 states and 6499 transitions. cyclomatic complexity: 748 Second operand 3 states.
[2020-11-24 21:43:50,855 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:43:50,855 INFO  L93              Difference]: Finished difference Result 5825 states and 6563 transitions.
[2020-11-24 21:43:50,855 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 21:43:50,855 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5825 states and 6563 transitions.
[2020-11-24 21:43:50,864 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:43:50,873 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5825 states to 5825 states and 6563 transitions.
[2020-11-24 21:43:50,873 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1060
[2020-11-24 21:43:50,874 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1060
[2020-11-24 21:43:50,874 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5825 states and 6563 transitions.
[2020-11-24 21:43:50,877 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:43:50,877 INFO  L728         BuchiCegarLoop]: Abstraction has 5825 states and 6563 transitions.
[2020-11-24 21:43:50,881 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5825 states and 6563 transitions.
[2020-11-24 21:43:50,903 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5825 to 5769.
[2020-11-24 21:43:50,903 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5769 states.
[2020-11-24 21:43:50,908 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5769 states to 5769 states and 6495 transitions.
[2020-11-24 21:43:50,908 INFO  L751         BuchiCegarLoop]: Abstraction has 5769 states and 6495 transitions.
[2020-11-24 21:43:50,908 INFO  L631         BuchiCegarLoop]: Abstraction has 5769 states and 6495 transitions.
[2020-11-24 21:43:50,908 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-24 21:43:50,908 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5769 states and 6495 transitions.
[2020-11-24 21:43:50,913 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:43:50,913 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:43:50,913 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:43:50,915 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:43:50,915 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14767]              assume null == 0;
[L14768]  CALL        call this := FreshRefGenerator__success();
[L6697]               havoc newRef;
[L6698]               assume Alloc[newRef] == false;
[L6699]               Alloc[newRef] := true;
[L6700]               assume newRef != null;
[L14768]  RET         call this := FreshRefGenerator__success();
[L14769]              assume now >= 0;
[L14770]              assume DType[this] == MainToken;
[L14771]              assume msgvalue_MSG == 0;
[L14772]              gas := gas - 53000;
[L14773]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4385]               havoc __exception;
[L4386]               revert := false;
[L4387]   COND FALSE  !(__exception)
[L4426]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9506]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9284]               assume msgsender_MSG != null;
[L9285]               Balance[this] := 0;
[L9286]               TOKEN_DECIMALS_Consts[this] := 18;
[L9287]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9288]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9289]               TOKEN_NAME_Consts[this] := -1298559559;
[L9290]               TOKEN_SYMBOL_Consts[this] := 120673937;
[L9291]               PAUSED_Consts[this] := false;
[L9292]               __var_52 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9293]               TARGET_USER_Consts[this] := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9294]               CONTINUE_MINTING_Consts[this] := false;
[L9308]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]   COND FALSE  !(revert)
[L9506]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9507]   COND FALSE  !(revert)
[L9510]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9510]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9511]   COND FALSE  !(revert)
[L9514]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9514]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9515]   COND FALSE  !(revert)
[L9518]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9518]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9519]   COND FALSE  !(revert)
[L9522]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9522]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9523]   COND FALSE  !(revert)
[L9526]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9526]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9527]   COND FALSE  !(revert)
[L9530]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9530]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9534]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9093]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9093]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9094]   COND FALSE  !(revert)
[L9097]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9097]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9098]   COND FALSE  !(revert)
[L9101]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9101]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9102]   COND FALSE  !(revert)
[L9105]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9105]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9106]   COND FALSE  !(revert)
[L9109]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9109]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9110]   COND FALSE  !(revert)
[L9113]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9113]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9114]   COND FALSE  !(revert)
[L9117]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9117]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9050]               assume msgsender_MSG != null;
[L9051]               Balance[this] := 0;
[L9121]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9538]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8837]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L8837]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]   COND FALSE  !(revert)
[L8841]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L8841]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8842]   COND FALSE  !(revert)
[L8845]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8814]               assume msgsender_MSG != null;
[L8815]               Balance[this] := 0;
[L8845]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8846]   COND FALSE  !(revert)
[L9542]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8963]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L8963]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8964]   COND FALSE  !(revert)
[L8967]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8943]               assume msgsender_MSG != null;
[L8944]               Balance[this] := 0;
[L8945]               paused_Pausable[this] := false;
[L8967]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8968]   COND FALSE  !(revert)
[L9546]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9434]               assume msgsender_MSG != null;
[L9435]               Balance[this] := 0;
[L9436]               initialized_MainToken[this] := false;
[L9438]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9754]   COND FALSE  !(!!initialized_MainToken[this])
[L9758]               initialized_MainToken[this] := true;
[L9759]   COND FALSE  !(PAUSED_Consts[this])
[L9769]               __var_57 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9770]               addresses_s1673 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9771]               __var_58 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9772]               amounts_s1673 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9773]               __var_59 := 0 % 18446744073709551616;
[L9774]               freezes_s1673 := 0 % 18446744073709551616;
[L9775]               i_s1673 := 0;
[L9776]   COND TRUE   i_s1673 < Length[addresses_s1673]
[L9778]   COND TRUE   M_int_int[freezes_s1673][i_s1673] == 0
[L9779]   COND TRUE   DType[this] == MainToken
[L9780]   CALL        call __var_60 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, M_int_Ref[addresses_s1673][i_s1673], M_int_int[amounts_s1673][i_s1673]);
[L7531]   CALL        call hasMintPermission_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12753]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7531]   RET         call hasMintPermission_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7532]   COND FALSE  !(revert)
[L7535]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12737]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7535]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7536]   COND FALSE  !(revert)
[L7539]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s664);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L7539]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s664);
[L7540]   COND FALSE  !(revert)
[L7543]               totalSupply__BasicToken[this] := __var_12;
[L7544]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s664], _amount_s664);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L7544]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s664], _amount_s664);
[L7545]   COND FALSE  !(revert)
[L7548]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s664];
[L7549]               balances_BasicToken[this][_to_s664] := __var_13;
[L7550]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s664];
[L7551]               assert { :EventEmitted "Mint_MintableToken" } true;
[L7552]               assert { :EventEmitted "Transfer_MintableToken" } true;
[L7553]               __ret_0_ := true;
[L9780]   RET         call __var_60 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, M_int_Ref[addresses_s1673][i_s1673], M_int_int[amounts_s1673][i_s1673]);
[L9781]   COND FALSE  !(revert)
[L9795]               i_s1673 := (i_s1673 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9796]   COND FALSE  !(gas < 0)
[L9776]   COND FALSE  !(i_s1673 < Length[addresses_s1673])
[L9800]   COND TRUE   !CONTINUE_MINTING_Consts[this]
[L9801]   COND TRUE   DType[this] == MainToken
[L9802]   CALL        call __var_62 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7574]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12721]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7574]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7575]   COND FALSE  !(revert)
[L7578]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12737]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7578]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7579]   COND FALSE  !(revert)
[L7582]               mintingFinished_MintableToken[this] := true;
[L7583]               assert { :EventEmitted "MintFinished_MintableToken" } true;
[L7584]               __ret_0_ := true;
[L9802]   RET         call __var_62 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9803]   COND FALSE  !(revert)
[L9810]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9438]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9439]   COND FALSE  !(revert)
[L9442]   COND TRUE   DType[this] == MainToken
[L9443]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7356]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12721]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7356]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   COND TRUE   DType[this] == MainToken
[L7361]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7404]               __var_11 := null;
[L7405]   COND FALSE  !(!(_newOwner_s581 != null))
[L7409]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7410]               owner_Ownable[this] := _newOwner_s581;
[L7361]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7362]   COND FALSE  !(revert)
[L9443]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9444]   COND FALSE  !(revert)
[L9550]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L4426]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4427]               assume !revert && gas >= 0;
[L14773]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14774]              assume !revert && gas >= 0;
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND FALSE  !(choice == 37)
[L14531]  COND FALSE  !(choice == 36)
[L14538]  COND FALSE  !(choice == 35)
[L14544]  COND FALSE  !(choice == 34)
[L14551]  COND FALSE  !(choice == 33)
[L14558]  COND FALSE  !(choice == 32)
[L14565]  COND FALSE  !(choice == 31)
[L14572]  COND FALSE  !(choice == 30)
[L14578]  COND FALSE  !(choice == 29)
[L14584]  COND FALSE  !(choice == 28)
[L14590]  COND FALSE  !(choice == 27)
[L14596]  COND FALSE  !(choice == 26)
[L14603]  COND FALSE  !(choice == 25)
[L14609]  COND FALSE  !(choice == 24)
[L14615]  COND FALSE  !(choice == 23)
[L14621]  COND FALSE  !(choice == 22)
[L14627]  COND FALSE  !(choice == 21)
[L14634]  COND FALSE  !(choice == 20)
[L14642]  COND TRUE   choice == 19
[L14643]              gas := gas - 21000;
[L14644]  COND TRUE   gas >= 0
[L14645]              assume msgvalue_MSG == 0;
[L14646]  CALL        call releaseOnce_FreezableToken(this, msgsender_MSG, msgvalue_MSG);
[L2624]               havoc __exception;
[L2625]               revert := false;
[L2626]   COND FALSE  !(__exception)
[L2665]   CALL        call releaseOnce_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8290]               __var_31 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8291]   COND FALSE  !(DType[this] == MainToken)
[L8296]   COND FALSE  !(DType[this] == FreezableMintableToken)
[L8301]   COND TRUE   DType[this] == FreezableToken
[L8302]   CALL        call headKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8545]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8547]               havoc result_s1122;
[L8548]               havoc result_s1122;
[L8549]               havoc result_s1122;
[L8550]               havoc result_s1122;
[L8302]   RET         call headKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8303]   COND FALSE  !(revert)
[L8309]               headKey_s1054 := headKey_s1054;
[L8310]               head_s1054 := chains_FreezableToken[this][headKey_s1054];
[L8311]   COND FALSE  !(!(head_s1054 != 0))
[L8315]               __var_32 := now % 18446744073709551616;
[L8316]   COND FALSE  !(!(now % 18446744073709551616 > head_s1054))
[L8320]               __var_33 := head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8321]   COND TRUE   DType[this] == MainToken
[L8322]   CALL        call currentKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8545]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8547]               havoc result_s1122;
[L8548]               havoc result_s1122;
[L8549]               havoc result_s1122;
[L8550]               havoc result_s1122;
[L8322]   RET         call currentKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8323]   COND FALSE  !(revert)
[L8339]               currentKey_s1054 := currentKey_s1054;
[L8340]               next_s1054 := chains_FreezableToken[this][currentKey_s1054];
[L8341]               amount_s1054 := freezings_FreezableToken[this][currentKey_s1054];
[L8342]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s1054];
[L8343]               freezings_FreezableToken[this][currentKey_s1054] := 0;
[L8344]   CALL        call __var_34 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], amount_s1054);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L8344]   RET         call __var_34 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], amount_s1054);
[L8345]   COND FALSE  !(revert)
[L8348]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L8349]               balances_BasicToken[this][msgsender_MSG] := __var_34;
[L8350]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L8351]   CALL        call __var_35 := sub~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][msgsender_MSG], amount_s1054);
[L6810]               assert b_s98 <= a_s98;
[L6811]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8351]   RET         call __var_35 := sub~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][msgsender_MSG], amount_s1054);
[L8352]   COND FALSE  !(revert)
[L8355]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][msgsender_MSG];
[L8356]               freezingBalance_FreezableToken[this][msgsender_MSG] := __var_35;
[L8357]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][msgsender_MSG];
[L8358]   COND TRUE   next_s1054 == 0
[L8359]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][headKey_s1054];
[L8360]               chains_FreezableToken[this][headKey_s1054] := 0;
[L8368]               assert { :EventEmitted "Released_FreezableToken" } true;
[L2665]   RET         call releaseOnce_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2666]               assume !revert && gas >= 0;
[L14646]  RET         call releaseOnce_FreezableToken(this, msgsender_MSG, msgvalue_MSG);
[L14777]  RET         call CorralChoice_MainToken(this);
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND TRUE   choice == 37
[L14526]              gas := gas - 21000;
[L14527]  COND TRUE   gas >= 0
[L14528]              assume msgvalue_MSG == 0;
[L14529]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7706]   COND TRUE   DType[this] == MainToken
[L7707]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6961]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7707]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7708]   COND FALSE  !(revert)
[L7724]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14529]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14777]  RET         call CorralChoice_MainToken(this);

Loop:
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND TRUE   choice == 38
[L14520]              gas := gas - 21000;
[L14521]  COND FALSE  !(gas >= 0)
[L14777]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:43:50,923 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:43:50,923 INFO  L82        PathProgramCache]: Analyzing trace with hash 2058654565, now seen corresponding path program 1 times
[2020-11-24 21:43:50,924 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:43:50,953 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:43:51,545 INFO  L134       CoverageAnalysis]: Checked inductivity of 9941 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 9940 trivial. 0 not checked.
[2020-11-24 21:43:51,545 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:43:51,545 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 21:43:51,546 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:43:51,546 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 21:43:51,546 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 21:43:51,546 INFO  L87              Difference]: Start difference. First operand 5769 states and 6495 transitions. cyclomatic complexity: 744 Second operand 3 states.
[2020-11-24 21:43:51,594 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:43:51,594 INFO  L93              Difference]: Finished difference Result 5825 states and 6561 transitions.
[2020-11-24 21:43:51,594 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 21:43:51,594 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5825 states and 6561 transitions.
[2020-11-24 21:43:51,603 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:43:51,612 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5825 states to 5825 states and 6561 transitions.
[2020-11-24 21:43:51,612 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1060
[2020-11-24 21:43:51,613 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1060
[2020-11-24 21:43:51,613 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5825 states and 6561 transitions.
[2020-11-24 21:43:51,615 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:43:51,615 INFO  L728         BuchiCegarLoop]: Abstraction has 5825 states and 6561 transitions.
[2020-11-24 21:43:51,619 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5825 states and 6561 transitions.
[2020-11-24 21:43:51,640 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5825 to 5769.
[2020-11-24 21:43:51,640 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5769 states.
[2020-11-24 21:43:51,645 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5769 states to 5769 states and 6493 transitions.
[2020-11-24 21:43:51,646 INFO  L751         BuchiCegarLoop]: Abstraction has 5769 states and 6493 transitions.
[2020-11-24 21:43:51,646 INFO  L631         BuchiCegarLoop]: Abstraction has 5769 states and 6493 transitions.
[2020-11-24 21:43:51,646 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-24 21:43:51,646 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5769 states and 6493 transitions.
[2020-11-24 21:43:51,651 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:43:51,651 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:43:51,651 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:43:51,653 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:43:51,653 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14767]              assume null == 0;
[L14768]  CALL        call this := FreshRefGenerator__success();
[L6697]               havoc newRef;
[L6698]               assume Alloc[newRef] == false;
[L6699]               Alloc[newRef] := true;
[L6700]               assume newRef != null;
[L14768]  RET         call this := FreshRefGenerator__success();
[L14769]              assume now >= 0;
[L14770]              assume DType[this] == MainToken;
[L14771]              assume msgvalue_MSG == 0;
[L14772]              gas := gas - 53000;
[L14773]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4385]               havoc __exception;
[L4386]               revert := false;
[L4387]   COND FALSE  !(__exception)
[L4426]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9506]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9284]               assume msgsender_MSG != null;
[L9285]               Balance[this] := 0;
[L9286]               TOKEN_DECIMALS_Consts[this] := 18;
[L9287]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9288]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9289]               TOKEN_NAME_Consts[this] := -1298559559;
[L9290]               TOKEN_SYMBOL_Consts[this] := 120673937;
[L9291]               PAUSED_Consts[this] := false;
[L9292]               __var_52 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9293]               TARGET_USER_Consts[this] := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9294]               CONTINUE_MINTING_Consts[this] := false;
[L9308]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]   COND FALSE  !(revert)
[L9506]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9507]   COND FALSE  !(revert)
[L9510]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9510]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9511]   COND FALSE  !(revert)
[L9514]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9514]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9515]   COND FALSE  !(revert)
[L9518]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9518]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9519]   COND FALSE  !(revert)
[L9522]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9522]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9523]   COND FALSE  !(revert)
[L9526]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9526]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9527]   COND FALSE  !(revert)
[L9530]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9530]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9534]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9093]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9093]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9094]   COND FALSE  !(revert)
[L9097]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9097]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9098]   COND FALSE  !(revert)
[L9101]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9101]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9102]   COND FALSE  !(revert)
[L9105]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9105]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9106]   COND FALSE  !(revert)
[L9109]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9109]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9110]   COND FALSE  !(revert)
[L9113]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9113]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9114]   COND FALSE  !(revert)
[L9117]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9117]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9050]               assume msgsender_MSG != null;
[L9051]               Balance[this] := 0;
[L9121]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9538]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8837]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L8837]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]   COND FALSE  !(revert)
[L8841]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L8841]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8842]   COND FALSE  !(revert)
[L8845]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8814]               assume msgsender_MSG != null;
[L8815]               Balance[this] := 0;
[L8845]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8846]   COND FALSE  !(revert)
[L9542]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8963]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L8963]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8964]   COND FALSE  !(revert)
[L8967]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8943]               assume msgsender_MSG != null;
[L8944]               Balance[this] := 0;
[L8945]               paused_Pausable[this] := false;
[L8967]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8968]   COND FALSE  !(revert)
[L9546]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9434]               assume msgsender_MSG != null;
[L9435]               Balance[this] := 0;
[L9436]               initialized_MainToken[this] := false;
[L9438]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9754]   COND FALSE  !(!!initialized_MainToken[this])
[L9758]               initialized_MainToken[this] := true;
[L9759]   COND FALSE  !(PAUSED_Consts[this])
[L9769]               __var_57 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9770]               addresses_s1673 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9771]               __var_58 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9772]               amounts_s1673 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9773]               __var_59 := 0 % 18446744073709551616;
[L9774]               freezes_s1673 := 0 % 18446744073709551616;
[L9775]               i_s1673 := 0;
[L9776]   COND TRUE   i_s1673 < Length[addresses_s1673]
[L9778]   COND TRUE   M_int_int[freezes_s1673][i_s1673] == 0
[L9779]   COND TRUE   DType[this] == MainToken
[L9780]   CALL        call __var_60 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, M_int_Ref[addresses_s1673][i_s1673], M_int_int[amounts_s1673][i_s1673]);
[L7531]   CALL        call hasMintPermission_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12753]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7531]   RET         call hasMintPermission_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7532]   COND FALSE  !(revert)
[L7535]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12737]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7535]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7536]   COND FALSE  !(revert)
[L7539]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s664);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L7539]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s664);
[L7540]   COND FALSE  !(revert)
[L7543]               totalSupply__BasicToken[this] := __var_12;
[L7544]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s664], _amount_s664);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L7544]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s664], _amount_s664);
[L7545]   COND FALSE  !(revert)
[L7548]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s664];
[L7549]               balances_BasicToken[this][_to_s664] := __var_13;
[L7550]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s664];
[L7551]               assert { :EventEmitted "Mint_MintableToken" } true;
[L7552]               assert { :EventEmitted "Transfer_MintableToken" } true;
[L7553]               __ret_0_ := true;
[L9780]   RET         call __var_60 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, M_int_Ref[addresses_s1673][i_s1673], M_int_int[amounts_s1673][i_s1673]);
[L9781]   COND FALSE  !(revert)
[L9795]               i_s1673 := (i_s1673 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9796]   COND FALSE  !(gas < 0)
[L9776]   COND FALSE  !(i_s1673 < Length[addresses_s1673])
[L9800]   COND TRUE   !CONTINUE_MINTING_Consts[this]
[L9801]   COND TRUE   DType[this] == MainToken
[L9802]   CALL        call __var_62 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7574]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12721]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7574]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7575]   COND FALSE  !(revert)
[L7578]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12737]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7578]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7579]   COND FALSE  !(revert)
[L7582]               mintingFinished_MintableToken[this] := true;
[L7583]               assert { :EventEmitted "MintFinished_MintableToken" } true;
[L7584]               __ret_0_ := true;
[L9802]   RET         call __var_62 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9803]   COND FALSE  !(revert)
[L9810]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9438]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9439]   COND FALSE  !(revert)
[L9442]   COND TRUE   DType[this] == MainToken
[L9443]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7356]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12721]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7356]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   COND TRUE   DType[this] == MainToken
[L7361]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7404]               __var_11 := null;
[L7405]   COND FALSE  !(!(_newOwner_s581 != null))
[L7409]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7410]               owner_Ownable[this] := _newOwner_s581;
[L7361]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7362]   COND FALSE  !(revert)
[L9443]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9444]   COND FALSE  !(revert)
[L9550]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L4426]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4427]               assume !revert && gas >= 0;
[L14773]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14774]              assume !revert && gas >= 0;
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND FALSE  !(choice == 37)
[L14531]  COND FALSE  !(choice == 36)
[L14538]  COND FALSE  !(choice == 35)
[L14544]  COND FALSE  !(choice == 34)
[L14551]  COND FALSE  !(choice == 33)
[L14558]  COND FALSE  !(choice == 32)
[L14565]  COND FALSE  !(choice == 31)
[L14572]  COND FALSE  !(choice == 30)
[L14578]  COND FALSE  !(choice == 29)
[L14584]  COND FALSE  !(choice == 28)
[L14590]  COND FALSE  !(choice == 27)
[L14596]  COND FALSE  !(choice == 26)
[L14603]  COND FALSE  !(choice == 25)
[L14609]  COND FALSE  !(choice == 24)
[L14615]  COND FALSE  !(choice == 23)
[L14621]  COND FALSE  !(choice == 22)
[L14627]  COND FALSE  !(choice == 21)
[L14634]  COND FALSE  !(choice == 20)
[L14642]  COND TRUE   choice == 19
[L14643]              gas := gas - 21000;
[L14644]  COND TRUE   gas >= 0
[L14645]              assume msgvalue_MSG == 0;
[L14646]  CALL        call releaseOnce_FreezableToken(this, msgsender_MSG, msgvalue_MSG);
[L2624]               havoc __exception;
[L2625]               revert := false;
[L2626]   COND FALSE  !(__exception)
[L2665]   CALL        call releaseOnce_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8290]               __var_31 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8291]   COND FALSE  !(DType[this] == MainToken)
[L8296]   COND TRUE   DType[this] == FreezableMintableToken
[L8297]   CALL        call headKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8545]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8547]               havoc result_s1122;
[L8548]               havoc result_s1122;
[L8549]               havoc result_s1122;
[L8550]               havoc result_s1122;
[L8297]   RET         call headKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8298]   COND FALSE  !(revert)
[L8309]               headKey_s1054 := headKey_s1054;
[L8310]               head_s1054 := chains_FreezableToken[this][headKey_s1054];
[L8311]   COND FALSE  !(!(head_s1054 != 0))
[L8315]               __var_32 := now % 18446744073709551616;
[L8316]   COND FALSE  !(!(now % 18446744073709551616 > head_s1054))
[L8320]               __var_33 := head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8321]   COND FALSE  !(DType[this] == MainToken)
[L8326]   COND TRUE   DType[this] == FreezableMintableToken
[L8327]   CALL        call currentKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8545]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8547]               havoc result_s1122;
[L8548]               havoc result_s1122;
[L8549]               havoc result_s1122;
[L8550]               havoc result_s1122;
[L8327]   RET         call currentKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8328]   COND FALSE  !(revert)
[L8339]               currentKey_s1054 := currentKey_s1054;
[L8340]               next_s1054 := chains_FreezableToken[this][currentKey_s1054];
[L8341]               amount_s1054 := freezings_FreezableToken[this][currentKey_s1054];
[L8342]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s1054];
[L8343]               freezings_FreezableToken[this][currentKey_s1054] := 0;
[L8344]   CALL        call __var_34 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], amount_s1054);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L8344]   RET         call __var_34 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], amount_s1054);
[L8345]   COND FALSE  !(revert)
[L8348]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L8349]               balances_BasicToken[this][msgsender_MSG] := __var_34;
[L8350]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L8351]   CALL        call __var_35 := sub~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][msgsender_MSG], amount_s1054);
[L6810]               assert b_s98 <= a_s98;
[L6811]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8351]   RET         call __var_35 := sub~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][msgsender_MSG], amount_s1054);
[L8352]   COND FALSE  !(revert)
[L8355]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][msgsender_MSG];
[L8356]               freezingBalance_FreezableToken[this][msgsender_MSG] := __var_35;
[L8357]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][msgsender_MSG];
[L8358]   COND TRUE   next_s1054 == 0
[L8359]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][headKey_s1054];
[L8360]               chains_FreezableToken[this][headKey_s1054] := 0;
[L8368]               assert { :EventEmitted "Released_FreezableToken" } true;
[L2665]   RET         call releaseOnce_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2666]               assume !revert && gas >= 0;
[L14646]  RET         call releaseOnce_FreezableToken(this, msgsender_MSG, msgvalue_MSG);
[L14777]  RET         call CorralChoice_MainToken(this);
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND TRUE   choice == 37
[L14526]              gas := gas - 21000;
[L14527]  COND TRUE   gas >= 0
[L14528]              assume msgvalue_MSG == 0;
[L14529]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7706]   COND TRUE   DType[this] == MainToken
[L7707]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6961]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7707]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7708]   COND FALSE  !(revert)
[L7724]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14529]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14777]  RET         call CorralChoice_MainToken(this);

Loop:
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND TRUE   choice == 38
[L14520]              gas := gas - 21000;
[L14521]  COND FALSE  !(gas >= 0)
[L14777]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:43:51,660 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:43:51,660 INFO  L82        PathProgramCache]: Analyzing trace with hash 488803825, now seen corresponding path program 1 times
[2020-11-24 21:43:51,661 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:43:51,692 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:43:52,359 INFO  L134       CoverageAnalysis]: Checked inductivity of 9941 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 9940 trivial. 0 not checked.
[2020-11-24 21:43:52,359 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:43:52,360 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-24 21:43:52,360 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:43:52,360 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-24 21:43:52,360 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-24 21:43:52,361 INFO  L87              Difference]: Start difference. First operand 5769 states and 6493 transitions. cyclomatic complexity: 742 Second operand 6 states.
[2020-11-24 21:43:52,551 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:43:52,552 INFO  L93              Difference]: Finished difference Result 5839 states and 6573 transitions.
[2020-11-24 21:43:52,552 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-24 21:43:52,552 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5839 states and 6573 transitions.
[2020-11-24 21:43:52,563 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:43:52,573 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5839 states to 5825 states and 6559 transitions.
[2020-11-24 21:43:52,573 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1060
[2020-11-24 21:43:52,574 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1060
[2020-11-24 21:43:52,574 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5825 states and 6559 transitions.
[2020-11-24 21:43:52,577 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:43:52,577 INFO  L728         BuchiCegarLoop]: Abstraction has 5825 states and 6559 transitions.
[2020-11-24 21:43:52,581 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5825 states and 6559 transitions.
[2020-11-24 21:43:52,603 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5825 to 5825.
[2020-11-24 21:43:52,603 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5825 states.
[2020-11-24 21:43:52,609 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5825 states to 5825 states and 6559 transitions.
[2020-11-24 21:43:52,609 INFO  L751         BuchiCegarLoop]: Abstraction has 5825 states and 6559 transitions.
[2020-11-24 21:43:52,609 INFO  L631         BuchiCegarLoop]: Abstraction has 5825 states and 6559 transitions.
[2020-11-24 21:43:52,609 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-24 21:43:52,609 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5825 states and 6559 transitions.
[2020-11-24 21:43:52,614 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:43:52,614 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:43:52,614 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:43:52,617 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:43:52,617 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14767]              assume null == 0;
[L14768]  CALL        call this := FreshRefGenerator__success();
[L6697]               havoc newRef;
[L6698]               assume Alloc[newRef] == false;
[L6699]               Alloc[newRef] := true;
[L6700]               assume newRef != null;
[L14768]  RET         call this := FreshRefGenerator__success();
[L14769]              assume now >= 0;
[L14770]              assume DType[this] == MainToken;
[L14771]              assume msgvalue_MSG == 0;
[L14772]              gas := gas - 53000;
[L14773]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4385]               havoc __exception;
[L4386]               revert := false;
[L4387]   COND FALSE  !(__exception)
[L4426]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9506]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9284]               assume msgsender_MSG != null;
[L9285]               Balance[this] := 0;
[L9286]               TOKEN_DECIMALS_Consts[this] := 18;
[L9287]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9288]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9289]               TOKEN_NAME_Consts[this] := -1298559559;
[L9290]               TOKEN_SYMBOL_Consts[this] := 120673937;
[L9291]               PAUSED_Consts[this] := false;
[L9292]               __var_52 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9293]               TARGET_USER_Consts[this] := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9294]               CONTINUE_MINTING_Consts[this] := false;
[L9308]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]   COND FALSE  !(revert)
[L9506]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9507]   COND FALSE  !(revert)
[L9510]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9510]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9511]   COND FALSE  !(revert)
[L9514]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9514]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9515]   COND FALSE  !(revert)
[L9518]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9518]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9519]   COND FALSE  !(revert)
[L9522]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9522]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9523]   COND FALSE  !(revert)
[L9526]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9526]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9527]   COND FALSE  !(revert)
[L9530]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9530]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9534]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9093]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9093]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9094]   COND FALSE  !(revert)
[L9097]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9097]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9098]   COND FALSE  !(revert)
[L9101]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9101]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9102]   COND FALSE  !(revert)
[L9105]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9105]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9106]   COND FALSE  !(revert)
[L9109]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9109]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9110]   COND FALSE  !(revert)
[L9113]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9113]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9114]   COND FALSE  !(revert)
[L9117]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9117]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9050]               assume msgsender_MSG != null;
[L9051]               Balance[this] := 0;
[L9121]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9538]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8837]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L8837]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]   COND FALSE  !(revert)
[L8841]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L8841]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8842]   COND FALSE  !(revert)
[L8845]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8814]               assume msgsender_MSG != null;
[L8815]               Balance[this] := 0;
[L8845]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8846]   COND FALSE  !(revert)
[L9542]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8963]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L8963]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8964]   COND FALSE  !(revert)
[L8967]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8943]               assume msgsender_MSG != null;
[L8944]               Balance[this] := 0;
[L8945]               paused_Pausable[this] := false;
[L8967]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8968]   COND FALSE  !(revert)
[L9546]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9434]               assume msgsender_MSG != null;
[L9435]               Balance[this] := 0;
[L9436]               initialized_MainToken[this] := false;
[L9438]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9754]   COND FALSE  !(!!initialized_MainToken[this])
[L9758]               initialized_MainToken[this] := true;
[L9759]   COND FALSE  !(PAUSED_Consts[this])
[L9769]               __var_57 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9770]               addresses_s1673 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9771]               __var_58 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9772]               amounts_s1673 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9773]               __var_59 := 0 % 18446744073709551616;
[L9774]               freezes_s1673 := 0 % 18446744073709551616;
[L9775]               i_s1673 := 0;
[L9776]   COND TRUE   i_s1673 < Length[addresses_s1673]
[L9778]   COND TRUE   M_int_int[freezes_s1673][i_s1673] == 0
[L9779]   COND TRUE   DType[this] == MainToken
[L9780]   CALL        call __var_60 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, M_int_Ref[addresses_s1673][i_s1673], M_int_int[amounts_s1673][i_s1673]);
[L7531]   CALL        call hasMintPermission_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12753]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7531]   RET         call hasMintPermission_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7532]   COND FALSE  !(revert)
[L7535]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12737]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7535]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7536]   COND FALSE  !(revert)
[L7539]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s664);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L7539]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s664);
[L7540]   COND FALSE  !(revert)
[L7543]               totalSupply__BasicToken[this] := __var_12;
[L7544]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s664], _amount_s664);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L7544]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s664], _amount_s664);
[L7545]   COND FALSE  !(revert)
[L7548]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s664];
[L7549]               balances_BasicToken[this][_to_s664] := __var_13;
[L7550]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s664];
[L7551]               assert { :EventEmitted "Mint_MintableToken" } true;
[L7552]               assert { :EventEmitted "Transfer_MintableToken" } true;
[L7553]               __ret_0_ := true;
[L9780]   RET         call __var_60 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, M_int_Ref[addresses_s1673][i_s1673], M_int_int[amounts_s1673][i_s1673]);
[L9781]   COND FALSE  !(revert)
[L9795]               i_s1673 := (i_s1673 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9796]   COND FALSE  !(gas < 0)
[L9776]   COND FALSE  !(i_s1673 < Length[addresses_s1673])
[L9800]   COND TRUE   !CONTINUE_MINTING_Consts[this]
[L9801]   COND TRUE   DType[this] == MainToken
[L9802]   CALL        call __var_62 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7574]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12721]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7574]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7575]   COND FALSE  !(revert)
[L7578]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12737]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7578]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7579]   COND FALSE  !(revert)
[L7582]               mintingFinished_MintableToken[this] := true;
[L7583]               assert { :EventEmitted "MintFinished_MintableToken" } true;
[L7584]               __ret_0_ := true;
[L9802]   RET         call __var_62 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9803]   COND FALSE  !(revert)
[L9810]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9438]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9439]   COND FALSE  !(revert)
[L9442]   COND TRUE   DType[this] == MainToken
[L9443]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7356]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12721]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7356]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   COND TRUE   DType[this] == MainToken
[L7361]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7404]               __var_11 := null;
[L7405]   COND FALSE  !(!(_newOwner_s581 != null))
[L7409]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7410]               owner_Ownable[this] := _newOwner_s581;
[L7361]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7362]   COND FALSE  !(revert)
[L9443]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9444]   COND FALSE  !(revert)
[L9550]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L4426]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4427]               assume !revert && gas >= 0;
[L14773]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14774]              assume !revert && gas >= 0;
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND FALSE  !(choice == 37)
[L14531]  COND FALSE  !(choice == 36)
[L14538]  COND FALSE  !(choice == 35)
[L14544]  COND FALSE  !(choice == 34)
[L14551]  COND FALSE  !(choice == 33)
[L14558]  COND FALSE  !(choice == 32)
[L14565]  COND FALSE  !(choice == 31)
[L14572]  COND FALSE  !(choice == 30)
[L14578]  COND FALSE  !(choice == 29)
[L14584]  COND FALSE  !(choice == 28)
[L14590]  COND FALSE  !(choice == 27)
[L14596]  COND FALSE  !(choice == 26)
[L14603]  COND FALSE  !(choice == 25)
[L14609]  COND FALSE  !(choice == 24)
[L14615]  COND FALSE  !(choice == 23)
[L14621]  COND FALSE  !(choice == 22)
[L14627]  COND FALSE  !(choice == 21)
[L14634]  COND FALSE  !(choice == 20)
[L14642]  COND TRUE   choice == 19
[L14643]              gas := gas - 21000;
[L14644]  COND TRUE   gas >= 0
[L14645]              assume msgvalue_MSG == 0;
[L14646]  CALL        call releaseOnce_FreezableToken(this, msgsender_MSG, msgvalue_MSG);
[L2624]               havoc __exception;
[L2625]               revert := false;
[L2626]   COND FALSE  !(__exception)
[L2665]   CALL        call releaseOnce_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8290]               __var_31 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8291]   COND TRUE   DType[this] == MainToken
[L8292]   CALL        call headKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8545]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8547]               havoc result_s1122;
[L8548]               havoc result_s1122;
[L8549]               havoc result_s1122;
[L8550]               havoc result_s1122;
[L8292]   RET         call headKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8293]   COND FALSE  !(revert)
[L8309]               headKey_s1054 := headKey_s1054;
[L8310]               head_s1054 := chains_FreezableToken[this][headKey_s1054];
[L8311]   COND FALSE  !(!(head_s1054 != 0))
[L8315]               __var_32 := now % 18446744073709551616;
[L8316]   COND FALSE  !(!(now % 18446744073709551616 > head_s1054))
[L8320]               __var_33 := head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8321]   COND TRUE   DType[this] == MainToken
[L8322]   CALL        call currentKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8545]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8547]               havoc result_s1122;
[L8548]               havoc result_s1122;
[L8549]               havoc result_s1122;
[L8550]               havoc result_s1122;
[L8322]   RET         call currentKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8323]   COND FALSE  !(revert)
[L8339]               currentKey_s1054 := currentKey_s1054;
[L8340]               next_s1054 := chains_FreezableToken[this][currentKey_s1054];
[L8341]               amount_s1054 := freezings_FreezableToken[this][currentKey_s1054];
[L8342]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s1054];
[L8343]               freezings_FreezableToken[this][currentKey_s1054] := 0;
[L8344]   CALL        call __var_34 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], amount_s1054);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L8344]   RET         call __var_34 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], amount_s1054);
[L8345]   COND FALSE  !(revert)
[L8348]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L8349]               balances_BasicToken[this][msgsender_MSG] := __var_34;
[L8350]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L8351]   CALL        call __var_35 := sub~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][msgsender_MSG], amount_s1054);
[L6810]               assert b_s98 <= a_s98;
[L6811]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8351]   RET         call __var_35 := sub~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][msgsender_MSG], amount_s1054);
[L8352]   COND FALSE  !(revert)
[L8355]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][msgsender_MSG];
[L8356]               freezingBalance_FreezableToken[this][msgsender_MSG] := __var_35;
[L8357]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][msgsender_MSG];
[L8358]   COND TRUE   next_s1054 == 0
[L8359]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][headKey_s1054];
[L8360]               chains_FreezableToken[this][headKey_s1054] := 0;
[L8368]               assert { :EventEmitted "Released_FreezableToken" } true;
[L2665]   RET         call releaseOnce_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2666]               assume !revert && gas >= 0;
[L14646]  RET         call releaseOnce_FreezableToken(this, msgsender_MSG, msgvalue_MSG);
[L14777]  RET         call CorralChoice_MainToken(this);
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND TRUE   choice == 37
[L14526]              gas := gas - 21000;
[L14527]  COND TRUE   gas >= 0
[L14528]              assume msgvalue_MSG == 0;
[L14529]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7706]   COND TRUE   DType[this] == MainToken
[L7707]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6961]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7707]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7708]   COND FALSE  !(revert)
[L7724]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14529]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14777]  RET         call CorralChoice_MainToken(this);

Loop:
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND TRUE   choice == 37
[L14526]              gas := gas - 21000;
[L14527]  COND TRUE   gas >= 0
[L14528]              assume msgvalue_MSG == 0;
[L14529]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7706]   COND TRUE   DType[this] == MainToken
[L7707]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6961]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7707]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7708]   COND FALSE  !(revert)
[L7724]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14529]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14777]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:43:52,624 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:43:52,624 INFO  L82        PathProgramCache]: Analyzing trace with hash -582813139, now seen corresponding path program 1 times
[2020-11-24 21:43:52,625 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:43:52,657 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:43:53,403 INFO  L134       CoverageAnalysis]: Checked inductivity of 9941 backedges. 12 proven. 88 refuted. 0 times theorem prover too weak. 9841 trivial. 0 not checked.
[2020-11-24 21:43:53,404 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-24 21:43:53,404 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [15] total 15
[2020-11-24 21:43:53,404 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:43:53,405 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 15 interpolants.
[2020-11-24 21:43:53,405 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=33, Invalid=177, Unknown=0, NotChecked=0, Total=210
[2020-11-24 21:43:53,405 INFO  L87              Difference]: Start difference. First operand 5825 states and 6559 transitions. cyclomatic complexity: 752 Second operand 15 states.
[2020-11-24 21:43:56,780 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:43:56,780 INFO  L93              Difference]: Finished difference Result 5992 states and 6797 transitions.
[2020-11-24 21:43:56,780 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-24 21:43:56,780 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5992 states and 6797 transitions.
[2020-11-24 21:43:56,792 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 21:43:56,803 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5992 states to 5992 states and 6797 transitions.
[2020-11-24 21:43:56,803 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1110
[2020-11-24 21:43:56,803 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1110
[2020-11-24 21:43:56,803 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5992 states and 6797 transitions.
[2020-11-24 21:43:56,806 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:43:56,806 INFO  L728         BuchiCegarLoop]: Abstraction has 5992 states and 6797 transitions.
[2020-11-24 21:43:56,810 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5992 states and 6797 transitions.
[2020-11-24 21:43:56,834 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5992 to 5962.
[2020-11-24 21:43:56,834 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5962 states.
[2020-11-24 21:43:56,840 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5962 states to 5962 states and 6729 transitions.
[2020-11-24 21:43:56,840 INFO  L751         BuchiCegarLoop]: Abstraction has 5962 states and 6729 transitions.
[2020-11-24 21:43:56,840 INFO  L631         BuchiCegarLoop]: Abstraction has 5962 states and 6729 transitions.
[2020-11-24 21:43:56,840 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-11-24 21:43:56,840 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5962 states and 6729 transitions.
[2020-11-24 21:43:56,845 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 21:43:56,845 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:43:56,845 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:43:56,848 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:43:56,848 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14767]              assume null == 0;
[L14768]  CALL        call this := FreshRefGenerator__success();
[L6697]               havoc newRef;
[L6698]               assume Alloc[newRef] == false;
[L6699]               Alloc[newRef] := true;
[L6700]               assume newRef != null;
[L14768]  RET         call this := FreshRefGenerator__success();
[L14769]              assume now >= 0;
[L14770]              assume DType[this] == MainToken;
[L14771]              assume msgvalue_MSG == 0;
[L14772]              gas := gas - 53000;
[L14773]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4385]               havoc __exception;
[L4386]               revert := false;
[L4387]   COND FALSE  !(__exception)
[L4426]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9506]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9284]               assume msgsender_MSG != null;
[L9285]               Balance[this] := 0;
[L9286]               TOKEN_DECIMALS_Consts[this] := 18;
[L9287]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9288]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9289]               TOKEN_NAME_Consts[this] := -1298559559;
[L9290]               TOKEN_SYMBOL_Consts[this] := 120673937;
[L9291]               PAUSED_Consts[this] := false;
[L9292]               __var_52 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9293]               TARGET_USER_Consts[this] := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9294]               CONTINUE_MINTING_Consts[this] := false;
[L9308]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]   COND FALSE  !(revert)
[L9506]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9507]   COND FALSE  !(revert)
[L9510]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9510]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9511]   COND FALSE  !(revert)
[L9514]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9514]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9515]   COND FALSE  !(revert)
[L9518]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9518]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9519]   COND FALSE  !(revert)
[L9522]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9522]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9523]   COND FALSE  !(revert)
[L9526]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9526]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9527]   COND FALSE  !(revert)
[L9530]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9530]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9534]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9093]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9093]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9094]   COND FALSE  !(revert)
[L9097]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9097]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9098]   COND FALSE  !(revert)
[L9101]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9101]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9102]   COND FALSE  !(revert)
[L9105]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9105]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9106]   COND FALSE  !(revert)
[L9109]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9109]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9110]   COND FALSE  !(revert)
[L9113]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9113]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9114]   COND FALSE  !(revert)
[L9117]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9117]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9050]               assume msgsender_MSG != null;
[L9051]               Balance[this] := 0;
[L9121]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9538]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8837]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L8837]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]   COND FALSE  !(revert)
[L8841]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L8841]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8842]   COND FALSE  !(revert)
[L8845]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8814]               assume msgsender_MSG != null;
[L8815]               Balance[this] := 0;
[L8845]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8846]   COND FALSE  !(revert)
[L9542]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8963]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L8963]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8964]   COND FALSE  !(revert)
[L8967]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8943]               assume msgsender_MSG != null;
[L8944]               Balance[this] := 0;
[L8945]               paused_Pausable[this] := false;
[L8967]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8968]   COND FALSE  !(revert)
[L9546]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9434]               assume msgsender_MSG != null;
[L9435]               Balance[this] := 0;
[L9436]               initialized_MainToken[this] := false;
[L9438]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9754]   COND FALSE  !(!!initialized_MainToken[this])
[L9758]               initialized_MainToken[this] := true;
[L9759]   COND FALSE  !(PAUSED_Consts[this])
[L9769]               __var_57 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9770]               addresses_s1673 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9771]               __var_58 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9772]               amounts_s1673 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9773]               __var_59 := 0 % 18446744073709551616;
[L9774]               freezes_s1673 := 0 % 18446744073709551616;
[L9775]               i_s1673 := 0;
[L9776]   COND TRUE   i_s1673 < Length[addresses_s1673]
[L9778]   COND TRUE   M_int_int[freezes_s1673][i_s1673] == 0
[L9779]   COND TRUE   DType[this] == MainToken
[L9780]   CALL        call __var_60 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, M_int_Ref[addresses_s1673][i_s1673], M_int_int[amounts_s1673][i_s1673]);
[L7531]   CALL        call hasMintPermission_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12753]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7531]   RET         call hasMintPermission_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7532]   COND FALSE  !(revert)
[L7535]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12737]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7535]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7536]   COND FALSE  !(revert)
[L7539]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s664);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L7539]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s664);
[L7540]   COND FALSE  !(revert)
[L7543]               totalSupply__BasicToken[this] := __var_12;
[L7544]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s664], _amount_s664);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L7544]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s664], _amount_s664);
[L7545]   COND FALSE  !(revert)
[L7548]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s664];
[L7549]               balances_BasicToken[this][_to_s664] := __var_13;
[L7550]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s664];
[L7551]               assert { :EventEmitted "Mint_MintableToken" } true;
[L7552]               assert { :EventEmitted "Transfer_MintableToken" } true;
[L7553]               __ret_0_ := true;
[L9780]   RET         call __var_60 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, M_int_Ref[addresses_s1673][i_s1673], M_int_int[amounts_s1673][i_s1673]);
[L9781]   COND FALSE  !(revert)
[L9795]               i_s1673 := (i_s1673 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9796]   COND FALSE  !(gas < 0)
[L9776]   COND FALSE  !(i_s1673 < Length[addresses_s1673])
[L9800]   COND TRUE   !CONTINUE_MINTING_Consts[this]
[L9801]   COND TRUE   DType[this] == MainToken
[L9802]   CALL        call __var_62 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7574]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12721]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7574]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7575]   COND FALSE  !(revert)
[L7578]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12737]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7578]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7579]   COND FALSE  !(revert)
[L7582]               mintingFinished_MintableToken[this] := true;
[L7583]               assert { :EventEmitted "MintFinished_MintableToken" } true;
[L7584]               __ret_0_ := true;
[L9802]   RET         call __var_62 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9803]   COND FALSE  !(revert)
[L9810]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9438]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9439]   COND FALSE  !(revert)
[L9442]   COND TRUE   DType[this] == MainToken
[L9443]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7356]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12721]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7356]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   COND TRUE   DType[this] == MainToken
[L7361]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7404]               __var_11 := null;
[L7405]   COND FALSE  !(!(_newOwner_s581 != null))
[L7409]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7410]               owner_Ownable[this] := _newOwner_s581;
[L7361]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7362]   COND FALSE  !(revert)
[L9443]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9444]   COND FALSE  !(revert)
[L9550]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L4426]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4427]               assume !revert && gas >= 0;
[L14773]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14774]              assume !revert && gas >= 0;
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND FALSE  !(choice == 37)
[L14531]  COND FALSE  !(choice == 36)
[L14538]  COND FALSE  !(choice == 35)
[L14544]  COND FALSE  !(choice == 34)
[L14551]  COND FALSE  !(choice == 33)
[L14558]  COND FALSE  !(choice == 32)
[L14565]  COND FALSE  !(choice == 31)
[L14572]  COND FALSE  !(choice == 30)
[L14578]  COND FALSE  !(choice == 29)
[L14584]  COND FALSE  !(choice == 28)
[L14590]  COND FALSE  !(choice == 27)
[L14596]  COND FALSE  !(choice == 26)
[L14603]  COND FALSE  !(choice == 25)
[L14609]  COND FALSE  !(choice == 24)
[L14615]  COND FALSE  !(choice == 23)
[L14621]  COND FALSE  !(choice == 22)
[L14627]  COND FALSE  !(choice == 21)
[L14634]  COND FALSE  !(choice == 20)
[L14642]  COND FALSE  !(choice == 19)
[L14648]  COND FALSE  !(choice == 18)
[L14654]  COND FALSE  !(choice == 17)
[L14661]  COND FALSE  !(choice == 16)
[L14667]  COND FALSE  !(choice == 15)
[L14673]  COND FALSE  !(choice == 14)
[L14679]  COND TRUE   choice == 13
[L14680]              gas := gas - 21000;
[L14681]  COND TRUE   gas >= 0
[L14682]              assume _amount_s1449 >= 0 && _amount_s1449 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14683]              assume _until_s1449 >= 0 && _until_s1449 < 18446744073709551616;
[L14684]              assume msgvalue_MSG == 0;
[L14685]  CALL        call __ret_0_mintAndFreeze := mintAndFreeze~address~uint256~uint64_FreezableMintableToken(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _amount_s1449, _until_s1449);
[L3457]               havoc __exception;
[L3458]               revert := false;
[L3459]   COND FALSE  !(__exception)
[L3498]   CALL        call __ret_0_ := mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _amount_s1449, _until_s1449);
[L9200]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12721]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L9200]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9201]   COND FALSE  !(revert)
[L9204]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12737]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L9204]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9205]   COND FALSE  !(revert)
[L9208]   CALL        call __var_48 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s1449);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L9208]   RET         call __var_48 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s1449);
[L9209]   COND FALSE  !(revert)
[L9212]               totalSupply__BasicToken[this] := __var_48;
[L9213]               __var_49 := _until_s1449 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9214]   COND TRUE   DType[this] == MainToken
[L9215]   CALL        call currentKey_s1449 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _until_s1449 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8545]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8547]               havoc result_s1122;
[L8548]               havoc result_s1122;
[L8549]               havoc result_s1122;
[L8550]               havoc result_s1122;
[L9215]   RET         call currentKey_s1449 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _until_s1449 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L9216]   COND FALSE  !(revert)
[L9227]               currentKey_s1449 := currentKey_s1449;
[L9228]   CALL        call __var_50 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s1449], _amount_s1449);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L9228]   RET         call __var_50 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s1449], _amount_s1449);
[L9229]   COND FALSE  !(revert)
[L9232]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s1449];
[L9233]               freezings_FreezableToken[this][currentKey_s1449] := __var_50;
[L9234]               sum_freezings3[this] := sum_freezings3[this] + freezings_FreezableToken[this][currentKey_s1449];
[L9235]   CALL        call __var_51 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s1449], _amount_s1449);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L9235]   RET         call __var_51 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s1449], _amount_s1449);
[L9236]   COND FALSE  !(revert)
[L9239]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][_to_s1449];
[L9240]               freezingBalance_FreezableToken[this][_to_s1449] := __var_51;
[L9241]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][_to_s1449];
[L9242]   COND TRUE   DType[this] == MainToken
[L9243]   CALL        call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _until_s1449);
[L8689]   COND FALSE  !(!(_until_s1240 > now))
[L8693]               __var_42 := _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8694]   COND TRUE   DType[this] == MainToken
[L8695]   CALL        call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8545]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8547]               havoc result_s1122;
[L8548]               havoc result_s1122;
[L8549]               havoc result_s1122;
[L8550]               havoc result_s1122;
[L8695]   RET         call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8696]   COND FALSE  !(revert)
[L8712]               key_s1240 := key_s1240;
[L8713]               __var_43 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8714]   COND FALSE  !(DType[this] == MainToken)
[L8719]   COND TRUE   DType[this] == FreezableMintableToken
[L8720]   CALL        call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8545]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8547]               havoc result_s1122;
[L8548]               havoc result_s1122;
[L8549]               havoc result_s1122;
[L8550]               havoc result_s1122;
[L8720]   RET         call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8721]   COND FALSE  !(revert)
[L8732]               parentKey_s1240 := parentKey_s1240;
[L8733]               next_s1240 := chains_FreezableToken[this][parentKey_s1240];
[L8734]   COND TRUE   next_s1240 == 0
[L8735]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][parentKey_s1240];
[L8736]               chains_FreezableToken[this][parentKey_s1240] := _until_s1240;
[L8737]               sum_chains2[this] := sum_chains2[this] + chains_FreezableToken[this][parentKey_s1240];
[L9243]   RET         call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _until_s1449);
[L9244]   COND FALSE  !(revert)
[L9255]               assert { :EventEmitted "Mint_FreezableMintableToken" } true;
[L9256]               assert { :EventEmitted "Freezed_FreezableMintableToken" } true;
[L9257]               assert { :EventEmitted "Transfer_FreezableMintableToken" } true;
[L9258]               __ret_0_ := true;
[L3498]   RET         call __ret_0_ := mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _amount_s1449, _until_s1449);
[L3499]               assume !revert && gas >= 0;
[L14685]  RET         call __ret_0_mintAndFreeze := mintAndFreeze~address~uint256~uint64_FreezableMintableToken(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _amount_s1449, _until_s1449);
[L14777]  RET         call CorralChoice_MainToken(this);
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND TRUE   choice == 37
[L14526]              gas := gas - 21000;
[L14527]  COND TRUE   gas >= 0
[L14528]              assume msgvalue_MSG == 0;
[L14529]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7706]   COND TRUE   DType[this] == MainToken
[L7707]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6961]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7707]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7708]   COND FALSE  !(revert)
[L7724]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14529]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14777]  RET         call CorralChoice_MainToken(this);

Loop:
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND FALSE  !(choice == 37)
[L14531]  COND FALSE  !(choice == 36)
[L14538]  COND FALSE  !(choice == 35)
[L14544]  COND FALSE  !(choice == 34)
[L14551]  COND FALSE  !(choice == 33)
[L14558]  COND FALSE  !(choice == 32)
[L14565]  COND FALSE  !(choice == 31)
[L14572]  COND FALSE  !(choice == 30)
[L14578]  COND FALSE  !(choice == 29)
[L14584]  COND FALSE  !(choice == 28)
[L14590]  COND FALSE  !(choice == 27)
[L14596]  COND FALSE  !(choice == 26)
[L14603]  COND FALSE  !(choice == 25)
[L14609]  COND FALSE  !(choice == 24)
[L14615]  COND FALSE  !(choice == 23)
[L14621]  COND FALSE  !(choice == 22)
[L14627]  COND FALSE  !(choice == 21)
[L14634]  COND TRUE   choice == 20
[L14635]              gas := gas - 21000;
[L14636]  COND TRUE   gas >= 0
[L14637]              assume _amount_s938 >= 0 && _amount_s938 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14638]              assume _until_s938 >= 0 && _until_s938 < 18446744073709551616;
[L14639]              assume msgvalue_MSG == 0;
[L14640]  CALL        call freezeTo~address~uint256~uint64_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L2530]               havoc __exception;
[L2531]               revert := false;
[L2532]   COND FALSE  !(__exception)
[L2571]   CALL        call freezeTo~address~uint256~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L8114]               __var_26 := null;
[L8115]   COND FALSE  !(!(_to_s938 != null))
[L8119]   COND FALSE  !(!(_amount_s938 <= balances_BasicToken[this][msgsender_MSG]))
[L8123]   CALL        call __var_27 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _amount_s938);
[L6810]               assert b_s98 <= a_s98;
[L6811]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8123]   RET         call __var_27 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _amount_s938);
[L8124]   COND FALSE  !(revert)
[L8127]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L8128]               balances_BasicToken[this][msgsender_MSG] := __var_27;
[L8129]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L8130]               __var_28 := _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8131]   COND FALSE  !(DType[this] == MainToken)
[L8136]   COND TRUE   DType[this] == FreezableMintableToken
[L8137]   CALL        call currentKey_s938 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8545]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8547]               havoc result_s1122;
[L8548]               havoc result_s1122;
[L8549]               havoc result_s1122;
[L8550]               havoc result_s1122;
[L8137]   RET         call currentKey_s938 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8138]   COND FALSE  !(revert)
[L8149]               currentKey_s938 := currentKey_s938;
[L8150]   CALL        call __var_29 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s938], _amount_s938);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L8150]   RET         call __var_29 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s938], _amount_s938);
[L8151]   COND FALSE  !(revert)
[L8154]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s938];
[L8155]               freezings_FreezableToken[this][currentKey_s938] := __var_29;
[L8156]               sum_freezings3[this] := sum_freezings3[this] + freezings_FreezableToken[this][currentKey_s938];
[L8157]   CALL        call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s938], _amount_s938);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L8157]   RET         call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s938], _amount_s938);
[L8158]   COND FALSE  !(revert)
[L8161]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][_to_s938];
[L8162]               freezingBalance_FreezableToken[this][_to_s938] := __var_30;
[L8163]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][_to_s938];
[L8164]   COND FALSE  !(DType[this] == MainToken)
[L8169]   COND FALSE  !(DType[this] == FreezableMintableToken)
[L8174]   COND TRUE   DType[this] == FreezableToken
[L8175]   CALL        call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938);
[L8689]   COND FALSE  !(!(_until_s1240 > now))
[L8693]               __var_42 := _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8694]   COND FALSE  !(DType[this] == MainToken)
[L8699]   COND TRUE   DType[this] == FreezableMintableToken
[L8700]   CALL        call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8545]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8547]               havoc result_s1122;
[L8548]               havoc result_s1122;
[L8549]               havoc result_s1122;
[L8550]               havoc result_s1122;
[L8700]   RET         call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8701]   COND FALSE  !(revert)
[L8712]               key_s1240 := key_s1240;
[L8713]               __var_43 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8714]   COND TRUE   DType[this] == MainToken
[L8715]   CALL        call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8545]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8547]               havoc result_s1122;
[L8548]               havoc result_s1122;
[L8549]               havoc result_s1122;
[L8550]               havoc result_s1122;
[L8715]   RET         call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8716]   COND FALSE  !(revert)
[L8732]               parentKey_s1240 := parentKey_s1240;
[L8733]               next_s1240 := chains_FreezableToken[this][parentKey_s1240];
[L8734]   COND TRUE   next_s1240 == 0
[L8735]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][parentKey_s1240];
[L8736]               chains_FreezableToken[this][parentKey_s1240] := _until_s1240;
[L8737]               sum_chains2[this] := sum_chains2[this] + chains_FreezableToken[this][parentKey_s1240];
[L8175]   RET         call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938);
[L8176]   COND FALSE  !(revert)
[L8182]               assert { :EventEmitted "Transfer_FreezableToken" } true;
[L8183]               assert { :EventEmitted "Freezed_FreezableToken" } true;
[L2571]   RET         call freezeTo~address~uint256~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L2572]               assume !revert && gas >= 0;
[L14640]  RET         call freezeTo~address~uint256~uint64_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L14777]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:43:56,855 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:43:56,856 INFO  L82        PathProgramCache]: Analyzing trace with hash 2037276747, now seen corresponding path program 1 times
[2020-11-24 21:43:56,856 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:43:56,888 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:43:57,558 INFO  L134       CoverageAnalysis]: Checked inductivity of 10002 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 10001 trivial. 0 not checked.
[2020-11-24 21:43:57,558 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:43:57,559 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 21:43:57,559 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:43:57,559 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 21:43:57,559 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 21:43:57,559 INFO  L87              Difference]: Start difference. First operand 5962 states and 6729 transitions. cyclomatic complexity: 788 Second operand 3 states.
[2020-11-24 21:43:57,618 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:43:57,618 INFO  L93              Difference]: Finished difference Result 6059 states and 6860 transitions.
[2020-11-24 21:43:57,619 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 21:43:57,619 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6059 states and 6860 transitions.
[2020-11-24 21:43:57,628 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 21:43:57,637 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6059 states to 6059 states and 6860 transitions.
[2020-11-24 21:43:57,637 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1123
[2020-11-24 21:43:57,637 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1123
[2020-11-24 21:43:57,637 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6059 states and 6860 transitions.
[2020-11-24 21:43:57,640 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:43:57,640 INFO  L728         BuchiCegarLoop]: Abstraction has 6059 states and 6860 transitions.
[2020-11-24 21:43:57,644 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6059 states and 6860 transitions.
[2020-11-24 21:43:57,666 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6059 to 6014.
[2020-11-24 21:43:57,667 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6014 states.
[2020-11-24 21:43:57,672 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6014 states to 6014 states and 6787 transitions.
[2020-11-24 21:43:57,672 INFO  L751         BuchiCegarLoop]: Abstraction has 6014 states and 6787 transitions.
[2020-11-24 21:43:57,672 INFO  L631         BuchiCegarLoop]: Abstraction has 6014 states and 6787 transitions.
[2020-11-24 21:43:57,673 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-11-24 21:43:57,673 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6014 states and 6787 transitions.
[2020-11-24 21:43:57,678 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 21:43:57,678 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:43:57,678 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:43:57,680 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:43:57,680 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14767]              assume null == 0;
[L14768]  CALL        call this := FreshRefGenerator__success();
[L6697]               havoc newRef;
[L6698]               assume Alloc[newRef] == false;
[L6699]               Alloc[newRef] := true;
[L6700]               assume newRef != null;
[L14768]  RET         call this := FreshRefGenerator__success();
[L14769]              assume now >= 0;
[L14770]              assume DType[this] == MainToken;
[L14771]              assume msgvalue_MSG == 0;
[L14772]              gas := gas - 53000;
[L14773]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4385]               havoc __exception;
[L4386]               revert := false;
[L4387]   COND FALSE  !(__exception)
[L4426]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9506]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9284]               assume msgsender_MSG != null;
[L9285]               Balance[this] := 0;
[L9286]               TOKEN_DECIMALS_Consts[this] := 18;
[L9287]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9288]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9289]               TOKEN_NAME_Consts[this] := -1298559559;
[L9290]               TOKEN_SYMBOL_Consts[this] := 120673937;
[L9291]               PAUSED_Consts[this] := false;
[L9292]               __var_52 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9293]               TARGET_USER_Consts[this] := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9294]               CONTINUE_MINTING_Consts[this] := false;
[L9308]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]   COND FALSE  !(revert)
[L9506]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9507]   COND FALSE  !(revert)
[L9510]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9510]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9511]   COND FALSE  !(revert)
[L9514]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9514]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9515]   COND FALSE  !(revert)
[L9518]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9518]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9519]   COND FALSE  !(revert)
[L9522]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9522]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9523]   COND FALSE  !(revert)
[L9526]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9526]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9527]   COND FALSE  !(revert)
[L9530]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9530]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9534]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9093]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9093]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9094]   COND FALSE  !(revert)
[L9097]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9097]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9098]   COND FALSE  !(revert)
[L9101]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9101]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9102]   COND FALSE  !(revert)
[L9105]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9105]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9106]   COND FALSE  !(revert)
[L9109]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9109]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9110]   COND FALSE  !(revert)
[L9113]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9113]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9114]   COND FALSE  !(revert)
[L9117]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9117]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9050]               assume msgsender_MSG != null;
[L9051]               Balance[this] := 0;
[L9121]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9538]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8837]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L8837]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]   COND FALSE  !(revert)
[L8841]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L8841]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8842]   COND FALSE  !(revert)
[L8845]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8814]               assume msgsender_MSG != null;
[L8815]               Balance[this] := 0;
[L8845]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8846]   COND FALSE  !(revert)
[L9542]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8963]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L8963]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8964]   COND FALSE  !(revert)
[L8967]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8943]               assume msgsender_MSG != null;
[L8944]               Balance[this] := 0;
[L8945]               paused_Pausable[this] := false;
[L8967]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8968]   COND FALSE  !(revert)
[L9546]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9434]               assume msgsender_MSG != null;
[L9435]               Balance[this] := 0;
[L9436]               initialized_MainToken[this] := false;
[L9438]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9754]   COND FALSE  !(!!initialized_MainToken[this])
[L9758]               initialized_MainToken[this] := true;
[L9759]   COND FALSE  !(PAUSED_Consts[this])
[L9769]               __var_57 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9770]               addresses_s1673 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9771]               __var_58 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9772]               amounts_s1673 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9773]               __var_59 := 0 % 18446744073709551616;
[L9774]               freezes_s1673 := 0 % 18446744073709551616;
[L9775]               i_s1673 := 0;
[L9776]   COND TRUE   i_s1673 < Length[addresses_s1673]
[L9778]   COND TRUE   M_int_int[freezes_s1673][i_s1673] == 0
[L9779]   COND TRUE   DType[this] == MainToken
[L9780]   CALL        call __var_60 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, M_int_Ref[addresses_s1673][i_s1673], M_int_int[amounts_s1673][i_s1673]);
[L7531]   CALL        call hasMintPermission_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12753]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7531]   RET         call hasMintPermission_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7532]   COND FALSE  !(revert)
[L7535]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12737]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7535]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7536]   COND FALSE  !(revert)
[L7539]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s664);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L7539]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s664);
[L7540]   COND FALSE  !(revert)
[L7543]               totalSupply__BasicToken[this] := __var_12;
[L7544]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s664], _amount_s664);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L7544]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s664], _amount_s664);
[L7545]   COND FALSE  !(revert)
[L7548]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s664];
[L7549]               balances_BasicToken[this][_to_s664] := __var_13;
[L7550]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s664];
[L7551]               assert { :EventEmitted "Mint_MintableToken" } true;
[L7552]               assert { :EventEmitted "Transfer_MintableToken" } true;
[L7553]               __ret_0_ := true;
[L9780]   RET         call __var_60 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, M_int_Ref[addresses_s1673][i_s1673], M_int_int[amounts_s1673][i_s1673]);
[L9781]   COND FALSE  !(revert)
[L9795]               i_s1673 := (i_s1673 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9796]   COND FALSE  !(gas < 0)
[L9776]   COND FALSE  !(i_s1673 < Length[addresses_s1673])
[L9800]   COND TRUE   !CONTINUE_MINTING_Consts[this]
[L9801]   COND TRUE   DType[this] == MainToken
[L9802]   CALL        call __var_62 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7574]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12721]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7574]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7575]   COND FALSE  !(revert)
[L7578]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12737]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7578]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7579]   COND FALSE  !(revert)
[L7582]               mintingFinished_MintableToken[this] := true;
[L7583]               assert { :EventEmitted "MintFinished_MintableToken" } true;
[L7584]               __ret_0_ := true;
[L9802]   RET         call __var_62 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9803]   COND FALSE  !(revert)
[L9810]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9438]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9439]   COND FALSE  !(revert)
[L9442]   COND TRUE   DType[this] == MainToken
[L9443]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7356]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12721]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7356]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   COND TRUE   DType[this] == MainToken
[L7361]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7404]               __var_11 := null;
[L7405]   COND FALSE  !(!(_newOwner_s581 != null))
[L7409]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7410]               owner_Ownable[this] := _newOwner_s581;
[L7361]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7362]   COND FALSE  !(revert)
[L9443]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9444]   COND FALSE  !(revert)
[L9550]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L4426]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4427]               assume !revert && gas >= 0;
[L14773]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14774]              assume !revert && gas >= 0;
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND FALSE  !(choice == 37)
[L14531]  COND FALSE  !(choice == 36)
[L14538]  COND FALSE  !(choice == 35)
[L14544]  COND FALSE  !(choice == 34)
[L14551]  COND FALSE  !(choice == 33)
[L14558]  COND FALSE  !(choice == 32)
[L14565]  COND FALSE  !(choice == 31)
[L14572]  COND FALSE  !(choice == 30)
[L14578]  COND FALSE  !(choice == 29)
[L14584]  COND FALSE  !(choice == 28)
[L14590]  COND FALSE  !(choice == 27)
[L14596]  COND FALSE  !(choice == 26)
[L14603]  COND FALSE  !(choice == 25)
[L14609]  COND FALSE  !(choice == 24)
[L14615]  COND FALSE  !(choice == 23)
[L14621]  COND FALSE  !(choice == 22)
[L14627]  COND FALSE  !(choice == 21)
[L14634]  COND FALSE  !(choice == 20)
[L14642]  COND FALSE  !(choice == 19)
[L14648]  COND FALSE  !(choice == 18)
[L14654]  COND FALSE  !(choice == 17)
[L14661]  COND FALSE  !(choice == 16)
[L14667]  COND FALSE  !(choice == 15)
[L14673]  COND FALSE  !(choice == 14)
[L14679]  COND TRUE   choice == 13
[L14680]              gas := gas - 21000;
[L14681]  COND TRUE   gas >= 0
[L14682]              assume _amount_s1449 >= 0 && _amount_s1449 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14683]              assume _until_s1449 >= 0 && _until_s1449 < 18446744073709551616;
[L14684]              assume msgvalue_MSG == 0;
[L14685]  CALL        call __ret_0_mintAndFreeze := mintAndFreeze~address~uint256~uint64_FreezableMintableToken(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _amount_s1449, _until_s1449);
[L3457]               havoc __exception;
[L3458]               revert := false;
[L3459]   COND FALSE  !(__exception)
[L3498]   CALL        call __ret_0_ := mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _amount_s1449, _until_s1449);
[L9200]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12721]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L9200]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9201]   COND FALSE  !(revert)
[L9204]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12737]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L9204]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9205]   COND FALSE  !(revert)
[L9208]   CALL        call __var_48 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s1449);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L9208]   RET         call __var_48 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s1449);
[L9209]   COND FALSE  !(revert)
[L9212]               totalSupply__BasicToken[this] := __var_48;
[L9213]               __var_49 := _until_s1449 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9214]   COND TRUE   DType[this] == MainToken
[L9215]   CALL        call currentKey_s1449 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _until_s1449 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8545]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8547]               havoc result_s1122;
[L8548]               havoc result_s1122;
[L8549]               havoc result_s1122;
[L8550]               havoc result_s1122;
[L9215]   RET         call currentKey_s1449 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _until_s1449 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L9216]   COND FALSE  !(revert)
[L9227]               currentKey_s1449 := currentKey_s1449;
[L9228]   CALL        call __var_50 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s1449], _amount_s1449);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L9228]   RET         call __var_50 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s1449], _amount_s1449);
[L9229]   COND FALSE  !(revert)
[L9232]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s1449];
[L9233]               freezings_FreezableToken[this][currentKey_s1449] := __var_50;
[L9234]               sum_freezings3[this] := sum_freezings3[this] + freezings_FreezableToken[this][currentKey_s1449];
[L9235]   CALL        call __var_51 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s1449], _amount_s1449);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L9235]   RET         call __var_51 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s1449], _amount_s1449);
[L9236]   COND FALSE  !(revert)
[L9239]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][_to_s1449];
[L9240]               freezingBalance_FreezableToken[this][_to_s1449] := __var_51;
[L9241]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][_to_s1449];
[L9242]   COND TRUE   DType[this] == MainToken
[L9243]   CALL        call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _until_s1449);
[L8689]   COND FALSE  !(!(_until_s1240 > now))
[L8693]               __var_42 := _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8694]   COND FALSE  !(DType[this] == MainToken)
[L8699]   COND TRUE   DType[this] == FreezableMintableToken
[L8700]   CALL        call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8545]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8547]               havoc result_s1122;
[L8548]               havoc result_s1122;
[L8549]               havoc result_s1122;
[L8550]               havoc result_s1122;
[L8700]   RET         call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8701]   COND FALSE  !(revert)
[L8712]               key_s1240 := key_s1240;
[L8713]               __var_43 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8714]   COND FALSE  !(DType[this] == MainToken)
[L8719]   COND FALSE  !(DType[this] == FreezableMintableToken)
[L8724]   COND TRUE   DType[this] == FreezableToken
[L8725]   CALL        call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8545]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8547]               havoc result_s1122;
[L8548]               havoc result_s1122;
[L8549]               havoc result_s1122;
[L8550]               havoc result_s1122;
[L8725]   RET         call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8726]   COND FALSE  !(revert)
[L8732]               parentKey_s1240 := parentKey_s1240;
[L8733]               next_s1240 := chains_FreezableToken[this][parentKey_s1240];
[L8734]   COND TRUE   next_s1240 == 0
[L8735]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][parentKey_s1240];
[L8736]               chains_FreezableToken[this][parentKey_s1240] := _until_s1240;
[L8737]               sum_chains2[this] := sum_chains2[this] + chains_FreezableToken[this][parentKey_s1240];
[L9243]   RET         call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _until_s1449);
[L9244]   COND FALSE  !(revert)
[L9255]               assert { :EventEmitted "Mint_FreezableMintableToken" } true;
[L9256]               assert { :EventEmitted "Freezed_FreezableMintableToken" } true;
[L9257]               assert { :EventEmitted "Transfer_FreezableMintableToken" } true;
[L9258]               __ret_0_ := true;
[L3498]   RET         call __ret_0_ := mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _amount_s1449, _until_s1449);
[L3499]               assume !revert && gas >= 0;
[L14685]  RET         call __ret_0_mintAndFreeze := mintAndFreeze~address~uint256~uint64_FreezableMintableToken(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _amount_s1449, _until_s1449);
[L14777]  RET         call CorralChoice_MainToken(this);
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND TRUE   choice == 37
[L14526]              gas := gas - 21000;
[L14527]  COND TRUE   gas >= 0
[L14528]              assume msgvalue_MSG == 0;
[L14529]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7706]   COND TRUE   DType[this] == MainToken
[L7707]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6961]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7707]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7708]   COND FALSE  !(revert)
[L7724]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14529]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14777]  RET         call CorralChoice_MainToken(this);

Loop:
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND FALSE  !(choice == 37)
[L14531]  COND FALSE  !(choice == 36)
[L14538]  COND FALSE  !(choice == 35)
[L14544]  COND FALSE  !(choice == 34)
[L14551]  COND FALSE  !(choice == 33)
[L14558]  COND FALSE  !(choice == 32)
[L14565]  COND FALSE  !(choice == 31)
[L14572]  COND FALSE  !(choice == 30)
[L14578]  COND FALSE  !(choice == 29)
[L14584]  COND FALSE  !(choice == 28)
[L14590]  COND FALSE  !(choice == 27)
[L14596]  COND FALSE  !(choice == 26)
[L14603]  COND FALSE  !(choice == 25)
[L14609]  COND FALSE  !(choice == 24)
[L14615]  COND FALSE  !(choice == 23)
[L14621]  COND FALSE  !(choice == 22)
[L14627]  COND FALSE  !(choice == 21)
[L14634]  COND FALSE  !(choice == 20)
[L14642]  COND TRUE   choice == 19
[L14643]              gas := gas - 21000;
[L14644]  COND TRUE   gas >= 0
[L14645]              assume msgvalue_MSG == 0;
[L14646]  CALL        call releaseOnce_FreezableToken(this, msgsender_MSG, msgvalue_MSG);
[L2624]               havoc __exception;
[L2625]               revert := false;
[L2626]   COND FALSE  !(__exception)
[L2665]   CALL        call releaseOnce_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8290]               __var_31 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8291]   COND FALSE  !(DType[this] == MainToken)
[L8296]   COND FALSE  !(DType[this] == FreezableMintableToken)
[L8301]   COND TRUE   DType[this] == FreezableToken
[L8302]   CALL        call headKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8545]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8547]               havoc result_s1122;
[L8548]               havoc result_s1122;
[L8549]               havoc result_s1122;
[L8550]               havoc result_s1122;
[L8302]   RET         call headKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8303]   COND FALSE  !(revert)
[L8309]               headKey_s1054 := headKey_s1054;
[L8310]               head_s1054 := chains_FreezableToken[this][headKey_s1054];
[L8311]   COND FALSE  !(!(head_s1054 != 0))
[L8315]               __var_32 := now % 18446744073709551616;
[L8316]   COND FALSE  !(!(now % 18446744073709551616 > head_s1054))
[L8320]               __var_33 := head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8321]   COND FALSE  !(DType[this] == MainToken)
[L8326]   COND FALSE  !(DType[this] == FreezableMintableToken)
[L8331]   COND TRUE   DType[this] == FreezableToken
[L8332]   CALL        call currentKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8545]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8547]               havoc result_s1122;
[L8548]               havoc result_s1122;
[L8549]               havoc result_s1122;
[L8550]               havoc result_s1122;
[L8332]   RET         call currentKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8333]   COND FALSE  !(revert)
[L8339]               currentKey_s1054 := currentKey_s1054;
[L8340]               next_s1054 := chains_FreezableToken[this][currentKey_s1054];
[L8341]               amount_s1054 := freezings_FreezableToken[this][currentKey_s1054];
[L8342]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s1054];
[L8343]               freezings_FreezableToken[this][currentKey_s1054] := 0;
[L8344]   CALL        call __var_34 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], amount_s1054);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L8344]   RET         call __var_34 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], amount_s1054);
[L8345]   COND FALSE  !(revert)
[L8348]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L8349]               balances_BasicToken[this][msgsender_MSG] := __var_34;
[L8350]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L8351]   CALL        call __var_35 := sub~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][msgsender_MSG], amount_s1054);
[L6810]               assert b_s98 <= a_s98;
[L6811]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8351]   RET         call __var_35 := sub~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][msgsender_MSG], amount_s1054);
[L8352]   COND FALSE  !(revert)
[L8355]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][msgsender_MSG];
[L8356]               freezingBalance_FreezableToken[this][msgsender_MSG] := __var_35;
[L8357]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][msgsender_MSG];
[L8358]   COND TRUE   next_s1054 == 0
[L8359]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][headKey_s1054];
[L8360]               chains_FreezableToken[this][headKey_s1054] := 0;
[L8368]               assert { :EventEmitted "Released_FreezableToken" } true;
[L2665]   RET         call releaseOnce_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2666]               assume !revert && gas >= 0;
[L14646]  RET         call releaseOnce_FreezableToken(this, msgsender_MSG, msgvalue_MSG);
[L14777]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:43:57,687 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:43:57,688 INFO  L82        PathProgramCache]: Analyzing trace with hash 1282040982, now seen corresponding path program 1 times
[2020-11-24 21:43:57,688 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:43:57,719 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:43:58,327 INFO  L134       CoverageAnalysis]: Checked inductivity of 10002 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 10001 trivial. 0 not checked.
[2020-11-24 21:43:58,327 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:43:58,328 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 21:43:58,328 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:43:58,328 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 21:43:58,328 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 21:43:58,328 INFO  L87              Difference]: Start difference. First operand 6014 states and 6787 transitions. cyclomatic complexity: 796 Second operand 3 states.
[2020-11-24 21:43:58,374 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:43:58,374 INFO  L93              Difference]: Finished difference Result 6120 states and 6927 transitions.
[2020-11-24 21:43:58,374 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 21:43:58,375 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6120 states and 6927 transitions.
[2020-11-24 21:43:58,383 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 21:43:58,393 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6120 states to 6120 states and 6927 transitions.
[2020-11-24 21:43:58,393 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1123
[2020-11-24 21:43:58,393 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1123
[2020-11-24 21:43:58,393 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6120 states and 6927 transitions.
[2020-11-24 21:43:58,396 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:43:58,396 INFO  L728         BuchiCegarLoop]: Abstraction has 6120 states and 6927 transitions.
[2020-11-24 21:43:58,400 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6120 states and 6927 transitions.
[2020-11-24 21:43:58,422 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6120 to 6075.
[2020-11-24 21:43:58,422 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6075 states.
[2020-11-24 21:43:58,428 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6075 states to 6075 states and 6854 transitions.
[2020-11-24 21:43:58,428 INFO  L751         BuchiCegarLoop]: Abstraction has 6075 states and 6854 transitions.
[2020-11-24 21:43:58,428 INFO  L631         BuchiCegarLoop]: Abstraction has 6075 states and 6854 transitions.
[2020-11-24 21:43:58,428 INFO  L445         BuchiCegarLoop]: ======== Iteration 18============
[2020-11-24 21:43:58,428 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6075 states and 6854 transitions.
[2020-11-24 21:43:58,434 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 21:43:58,434 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:43:58,434 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:43:58,436 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:43:58,436 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14767]              assume null == 0;
[L14768]  CALL        call this := FreshRefGenerator__success();
[L6697]               havoc newRef;
[L6698]               assume Alloc[newRef] == false;
[L6699]               Alloc[newRef] := true;
[L6700]               assume newRef != null;
[L14768]  RET         call this := FreshRefGenerator__success();
[L14769]              assume now >= 0;
[L14770]              assume DType[this] == MainToken;
[L14771]              assume msgvalue_MSG == 0;
[L14772]              gas := gas - 53000;
[L14773]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4385]               havoc __exception;
[L4386]               revert := false;
[L4387]   COND FALSE  !(__exception)
[L4426]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9506]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9284]               assume msgsender_MSG != null;
[L9285]               Balance[this] := 0;
[L9286]               TOKEN_DECIMALS_Consts[this] := 18;
[L9287]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9288]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9289]               TOKEN_NAME_Consts[this] := -1298559559;
[L9290]               TOKEN_SYMBOL_Consts[this] := 120673937;
[L9291]               PAUSED_Consts[this] := false;
[L9292]               __var_52 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9293]               TARGET_USER_Consts[this] := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9294]               CONTINUE_MINTING_Consts[this] := false;
[L9308]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]   COND FALSE  !(revert)
[L9506]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9507]   COND FALSE  !(revert)
[L9510]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9510]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9511]   COND FALSE  !(revert)
[L9514]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9514]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9515]   COND FALSE  !(revert)
[L9518]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9518]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9519]   COND FALSE  !(revert)
[L9522]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9522]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9523]   COND FALSE  !(revert)
[L9526]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9526]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9527]   COND FALSE  !(revert)
[L9530]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9530]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9534]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9093]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9093]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9094]   COND FALSE  !(revert)
[L9097]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9097]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9098]   COND FALSE  !(revert)
[L9101]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9101]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9102]   COND FALSE  !(revert)
[L9105]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9105]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9106]   COND FALSE  !(revert)
[L9109]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9109]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9110]   COND FALSE  !(revert)
[L9113]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9113]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9114]   COND FALSE  !(revert)
[L9117]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9117]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9050]               assume msgsender_MSG != null;
[L9051]               Balance[this] := 0;
[L9121]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9538]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8837]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L8837]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]   COND FALSE  !(revert)
[L8841]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L8841]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8842]   COND FALSE  !(revert)
[L8845]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8814]               assume msgsender_MSG != null;
[L8815]               Balance[this] := 0;
[L8845]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8846]   COND FALSE  !(revert)
[L9542]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8963]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L8963]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8964]   COND FALSE  !(revert)
[L8967]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8943]               assume msgsender_MSG != null;
[L8944]               Balance[this] := 0;
[L8945]               paused_Pausable[this] := false;
[L8967]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8968]   COND FALSE  !(revert)
[L9546]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9434]               assume msgsender_MSG != null;
[L9435]               Balance[this] := 0;
[L9436]               initialized_MainToken[this] := false;
[L9438]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9754]   COND FALSE  !(!!initialized_MainToken[this])
[L9758]               initialized_MainToken[this] := true;
[L9759]   COND FALSE  !(PAUSED_Consts[this])
[L9769]               __var_57 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9770]               addresses_s1673 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9771]               __var_58 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9772]               amounts_s1673 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9773]               __var_59 := 0 % 18446744073709551616;
[L9774]               freezes_s1673 := 0 % 18446744073709551616;
[L9775]               i_s1673 := 0;
[L9776]   COND TRUE   i_s1673 < Length[addresses_s1673]
[L9778]   COND TRUE   M_int_int[freezes_s1673][i_s1673] == 0
[L9779]   COND TRUE   DType[this] == MainToken
[L9780]   CALL        call __var_60 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, M_int_Ref[addresses_s1673][i_s1673], M_int_int[amounts_s1673][i_s1673]);
[L7531]   CALL        call hasMintPermission_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12753]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7531]   RET         call hasMintPermission_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7532]   COND FALSE  !(revert)
[L7535]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12737]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7535]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7536]   COND FALSE  !(revert)
[L7539]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s664);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L7539]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s664);
[L7540]   COND FALSE  !(revert)
[L7543]               totalSupply__BasicToken[this] := __var_12;
[L7544]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s664], _amount_s664);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L7544]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s664], _amount_s664);
[L7545]   COND FALSE  !(revert)
[L7548]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s664];
[L7549]               balances_BasicToken[this][_to_s664] := __var_13;
[L7550]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s664];
[L7551]               assert { :EventEmitted "Mint_MintableToken" } true;
[L7552]               assert { :EventEmitted "Transfer_MintableToken" } true;
[L7553]               __ret_0_ := true;
[L9780]   RET         call __var_60 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, M_int_Ref[addresses_s1673][i_s1673], M_int_int[amounts_s1673][i_s1673]);
[L9781]   COND FALSE  !(revert)
[L9795]               i_s1673 := (i_s1673 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9796]   COND FALSE  !(gas < 0)
[L9776]   COND FALSE  !(i_s1673 < Length[addresses_s1673])
[L9800]   COND TRUE   !CONTINUE_MINTING_Consts[this]
[L9801]   COND TRUE   DType[this] == MainToken
[L9802]   CALL        call __var_62 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7574]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12721]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7574]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7575]   COND FALSE  !(revert)
[L7578]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12737]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7578]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7579]   COND FALSE  !(revert)
[L7582]               mintingFinished_MintableToken[this] := true;
[L7583]               assert { :EventEmitted "MintFinished_MintableToken" } true;
[L7584]               __ret_0_ := true;
[L9802]   RET         call __var_62 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9803]   COND FALSE  !(revert)
[L9810]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9438]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9439]   COND FALSE  !(revert)
[L9442]   COND TRUE   DType[this] == MainToken
[L9443]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7356]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12721]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7356]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   COND TRUE   DType[this] == MainToken
[L7361]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7404]               __var_11 := null;
[L7405]   COND FALSE  !(!(_newOwner_s581 != null))
[L7409]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7410]               owner_Ownable[this] := _newOwner_s581;
[L7361]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7362]   COND FALSE  !(revert)
[L9443]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9444]   COND FALSE  !(revert)
[L9550]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L4426]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4427]               assume !revert && gas >= 0;
[L14773]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14774]              assume !revert && gas >= 0;
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND FALSE  !(choice == 37)
[L14531]  COND FALSE  !(choice == 36)
[L14538]  COND FALSE  !(choice == 35)
[L14544]  COND FALSE  !(choice == 34)
[L14551]  COND FALSE  !(choice == 33)
[L14558]  COND FALSE  !(choice == 32)
[L14565]  COND FALSE  !(choice == 31)
[L14572]  COND FALSE  !(choice == 30)
[L14578]  COND FALSE  !(choice == 29)
[L14584]  COND FALSE  !(choice == 28)
[L14590]  COND FALSE  !(choice == 27)
[L14596]  COND FALSE  !(choice == 26)
[L14603]  COND FALSE  !(choice == 25)
[L14609]  COND FALSE  !(choice == 24)
[L14615]  COND FALSE  !(choice == 23)
[L14621]  COND FALSE  !(choice == 22)
[L14627]  COND FALSE  !(choice == 21)
[L14634]  COND FALSE  !(choice == 20)
[L14642]  COND FALSE  !(choice == 19)
[L14648]  COND FALSE  !(choice == 18)
[L14654]  COND FALSE  !(choice == 17)
[L14661]  COND FALSE  !(choice == 16)
[L14667]  COND FALSE  !(choice == 15)
[L14673]  COND FALSE  !(choice == 14)
[L14679]  COND TRUE   choice == 13
[L14680]              gas := gas - 21000;
[L14681]  COND TRUE   gas >= 0
[L14682]              assume _amount_s1449 >= 0 && _amount_s1449 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14683]              assume _until_s1449 >= 0 && _until_s1449 < 18446744073709551616;
[L14684]              assume msgvalue_MSG == 0;
[L14685]  CALL        call __ret_0_mintAndFreeze := mintAndFreeze~address~uint256~uint64_FreezableMintableToken(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _amount_s1449, _until_s1449);
[L3457]               havoc __exception;
[L3458]               revert := false;
[L3459]   COND FALSE  !(__exception)
[L3498]   CALL        call __ret_0_ := mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _amount_s1449, _until_s1449);
[L9200]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12721]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L9200]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9201]   COND FALSE  !(revert)
[L9204]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12737]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L9204]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9205]   COND FALSE  !(revert)
[L9208]   CALL        call __var_48 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s1449);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L9208]   RET         call __var_48 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s1449);
[L9209]   COND FALSE  !(revert)
[L9212]               totalSupply__BasicToken[this] := __var_48;
[L9213]               __var_49 := _until_s1449 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9214]   COND TRUE   DType[this] == MainToken
[L9215]   CALL        call currentKey_s1449 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _until_s1449 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8545]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8547]               havoc result_s1122;
[L8548]               havoc result_s1122;
[L8549]               havoc result_s1122;
[L8550]               havoc result_s1122;
[L9215]   RET         call currentKey_s1449 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _until_s1449 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L9216]   COND FALSE  !(revert)
[L9227]               currentKey_s1449 := currentKey_s1449;
[L9228]   CALL        call __var_50 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s1449], _amount_s1449);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L9228]   RET         call __var_50 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s1449], _amount_s1449);
[L9229]   COND FALSE  !(revert)
[L9232]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s1449];
[L9233]               freezings_FreezableToken[this][currentKey_s1449] := __var_50;
[L9234]               sum_freezings3[this] := sum_freezings3[this] + freezings_FreezableToken[this][currentKey_s1449];
[L9235]   CALL        call __var_51 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s1449], _amount_s1449);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L9235]   RET         call __var_51 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s1449], _amount_s1449);
[L9236]   COND FALSE  !(revert)
[L9239]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][_to_s1449];
[L9240]               freezingBalance_FreezableToken[this][_to_s1449] := __var_51;
[L9241]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][_to_s1449];
[L9242]   COND FALSE  !(DType[this] == MainToken)
[L9247]   COND TRUE   DType[this] == FreezableMintableToken
[L9248]   CALL        call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _until_s1449);
[L8689]   COND FALSE  !(!(_until_s1240 > now))
[L8693]               __var_42 := _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8694]   COND FALSE  !(DType[this] == MainToken)
[L8699]   COND FALSE  !(DType[this] == FreezableMintableToken)
[L8704]   COND TRUE   DType[this] == FreezableToken
[L8705]   CALL        call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8545]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8547]               havoc result_s1122;
[L8548]               havoc result_s1122;
[L8549]               havoc result_s1122;
[L8550]               havoc result_s1122;
[L8705]   RET         call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8706]   COND FALSE  !(revert)
[L8712]               key_s1240 := key_s1240;
[L8713]               __var_43 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8714]   COND FALSE  !(DType[this] == MainToken)
[L8719]   COND FALSE  !(DType[this] == FreezableMintableToken)
[L8724]   COND TRUE   DType[this] == FreezableToken
[L8725]   CALL        call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8545]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8547]               havoc result_s1122;
[L8548]               havoc result_s1122;
[L8549]               havoc result_s1122;
[L8550]               havoc result_s1122;
[L8725]   RET         call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8726]   COND FALSE  !(revert)
[L8732]               parentKey_s1240 := parentKey_s1240;
[L8733]               next_s1240 := chains_FreezableToken[this][parentKey_s1240];
[L8734]   COND FALSE  !(next_s1240 == 0)
[L8740]               __var_44 := next_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8741]   COND TRUE   DType[this] == MainToken
[L8742]   CALL        call nextKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, next_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8545]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8547]               havoc result_s1122;
[L8548]               havoc result_s1122;
[L8549]               havoc result_s1122;
[L8550]               havoc result_s1122;
[L8742]   RET         call nextKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, next_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8743]   COND FALSE  !(revert)
[L8759]               nextKey_s1240 := nextKey_s1240;
[L8760]               havoc parent_s1240;
[L8761]   COND FALSE  !(next_s1240 != 0 && _until_s1240 > next_s1240)
[L8790]   COND TRUE   _until_s1240 == next_s1240
[L9248]   RET         call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _until_s1449);
[L9249]   COND FALSE  !(revert)
[L9255]               assert { :EventEmitted "Mint_FreezableMintableToken" } true;
[L9256]               assert { :EventEmitted "Freezed_FreezableMintableToken" } true;
[L9257]               assert { :EventEmitted "Transfer_FreezableMintableToken" } true;
[L9258]               __ret_0_ := true;
[L3498]   RET         call __ret_0_ := mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _amount_s1449, _until_s1449);
[L3499]               assume !revert && gas >= 0;
[L14685]  RET         call __ret_0_mintAndFreeze := mintAndFreeze~address~uint256~uint64_FreezableMintableToken(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _amount_s1449, _until_s1449);
[L14777]  RET         call CorralChoice_MainToken(this);
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND TRUE   choice == 37
[L14526]              gas := gas - 21000;
[L14527]  COND TRUE   gas >= 0
[L14528]              assume msgvalue_MSG == 0;
[L14529]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7706]   COND TRUE   DType[this] == MainToken
[L7707]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6961]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7707]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7708]   COND FALSE  !(revert)
[L7724]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14529]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14777]  RET         call CorralChoice_MainToken(this);

Loop:
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND TRUE   choice == 37
[L14526]              gas := gas - 21000;
[L14527]  COND TRUE   gas >= 0
[L14528]              assume msgvalue_MSG == 0;
[L14529]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7706]   COND TRUE   DType[this] == MainToken
[L7707]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6961]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7707]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7708]   COND FALSE  !(revert)
[L7724]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14529]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14777]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:43:58,442 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:43:58,442 INFO  L82        PathProgramCache]: Analyzing trace with hash 443736582, now seen corresponding path program 1 times
[2020-11-24 21:43:58,443 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:43:58,473 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:43:59,144 INFO  L134       CoverageAnalysis]: Checked inductivity of 10023 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 10022 trivial. 0 not checked.
[2020-11-24 21:43:59,145 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:43:59,145 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 21:43:59,145 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:43:59,145 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 21:43:59,145 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 21:43:59,146 INFO  L87              Difference]: Start difference. First operand 6075 states and 6854 transitions. cyclomatic complexity: 804 Second operand 3 states.
[2020-11-24 21:43:59,189 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:43:59,189 INFO  L93              Difference]: Finished difference Result 6153 states and 6944 transitions.
[2020-11-24 21:43:59,189 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 21:43:59,189 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6153 states and 6944 transitions.
[2020-11-24 21:43:59,198 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 21:43:59,208 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6153 states to 6153 states and 6944 transitions.
[2020-11-24 21:43:59,208 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1120
[2020-11-24 21:43:59,208 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1120
[2020-11-24 21:43:59,208 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6153 states and 6944 transitions.
[2020-11-24 21:43:59,211 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:43:59,211 INFO  L728         BuchiCegarLoop]: Abstraction has 6153 states and 6944 transitions.
[2020-11-24 21:43:59,215 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6153 states and 6944 transitions.
[2020-11-24 21:43:59,236 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6153 to 6117.
[2020-11-24 21:43:59,237 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6117 states.
[2020-11-24 21:43:59,242 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6117 states to 6117 states and 6902 transitions.
[2020-11-24 21:43:59,242 INFO  L751         BuchiCegarLoop]: Abstraction has 6117 states and 6902 transitions.
[2020-11-24 21:43:59,242 INFO  L631         BuchiCegarLoop]: Abstraction has 6117 states and 6902 transitions.
[2020-11-24 21:43:59,242 INFO  L445         BuchiCegarLoop]: ======== Iteration 19============
[2020-11-24 21:43:59,242 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6117 states and 6902 transitions.
[2020-11-24 21:43:59,247 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 21:43:59,247 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:43:59,247 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:43:59,250 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:43:59,250 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14767]              assume null == 0;
[L14768]  CALL        call this := FreshRefGenerator__success();
[L6697]               havoc newRef;
[L6698]               assume Alloc[newRef] == false;
[L6699]               Alloc[newRef] := true;
[L6700]               assume newRef != null;
[L14768]  RET         call this := FreshRefGenerator__success();
[L14769]              assume now >= 0;
[L14770]              assume DType[this] == MainToken;
[L14771]              assume msgvalue_MSG == 0;
[L14772]              gas := gas - 53000;
[L14773]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4385]               havoc __exception;
[L4386]               revert := false;
[L4387]   COND FALSE  !(__exception)
[L4426]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9506]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9284]               assume msgsender_MSG != null;
[L9285]               Balance[this] := 0;
[L9286]               TOKEN_DECIMALS_Consts[this] := 18;
[L9287]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9288]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9289]               TOKEN_NAME_Consts[this] := -1298559559;
[L9290]               TOKEN_SYMBOL_Consts[this] := 120673937;
[L9291]               PAUSED_Consts[this] := false;
[L9292]               __var_52 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9293]               TARGET_USER_Consts[this] := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9294]               CONTINUE_MINTING_Consts[this] := false;
[L9308]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]   COND FALSE  !(revert)
[L9506]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9507]   COND FALSE  !(revert)
[L9510]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9510]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9511]   COND FALSE  !(revert)
[L9514]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9514]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9515]   COND FALSE  !(revert)
[L9518]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9518]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9519]   COND FALSE  !(revert)
[L9522]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9522]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9523]   COND FALSE  !(revert)
[L9526]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9526]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9527]   COND FALSE  !(revert)
[L9530]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9530]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9534]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9093]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9093]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9094]   COND FALSE  !(revert)
[L9097]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9097]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9098]   COND FALSE  !(revert)
[L9101]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9101]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9102]   COND FALSE  !(revert)
[L9105]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9105]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9106]   COND FALSE  !(revert)
[L9109]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9109]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9110]   COND FALSE  !(revert)
[L9113]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9113]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9114]   COND FALSE  !(revert)
[L9117]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9117]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9050]               assume msgsender_MSG != null;
[L9051]               Balance[this] := 0;
[L9121]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9538]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8837]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L8837]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]   COND FALSE  !(revert)
[L8841]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L8841]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8842]   COND FALSE  !(revert)
[L8845]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8814]               assume msgsender_MSG != null;
[L8815]               Balance[this] := 0;
[L8845]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8846]   COND FALSE  !(revert)
[L9542]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8963]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L8963]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8964]   COND FALSE  !(revert)
[L8967]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8943]               assume msgsender_MSG != null;
[L8944]               Balance[this] := 0;
[L8945]               paused_Pausable[this] := false;
[L8967]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8968]   COND FALSE  !(revert)
[L9546]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9434]               assume msgsender_MSG != null;
[L9435]               Balance[this] := 0;
[L9436]               initialized_MainToken[this] := false;
[L9438]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9754]   COND FALSE  !(!!initialized_MainToken[this])
[L9758]               initialized_MainToken[this] := true;
[L9759]   COND FALSE  !(PAUSED_Consts[this])
[L9769]               __var_57 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9770]               addresses_s1673 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9771]               __var_58 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9772]               amounts_s1673 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9773]               __var_59 := 0 % 18446744073709551616;
[L9774]               freezes_s1673 := 0 % 18446744073709551616;
[L9775]               i_s1673 := 0;
[L9776]   COND TRUE   i_s1673 < Length[addresses_s1673]
[L9778]   COND TRUE   M_int_int[freezes_s1673][i_s1673] == 0
[L9779]   COND TRUE   DType[this] == MainToken
[L9780]   CALL        call __var_60 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, M_int_Ref[addresses_s1673][i_s1673], M_int_int[amounts_s1673][i_s1673]);
[L7531]   CALL        call hasMintPermission_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12753]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7531]   RET         call hasMintPermission_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7532]   COND FALSE  !(revert)
[L7535]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12737]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7535]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7536]   COND FALSE  !(revert)
[L7539]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s664);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L7539]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s664);
[L7540]   COND FALSE  !(revert)
[L7543]               totalSupply__BasicToken[this] := __var_12;
[L7544]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s664], _amount_s664);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L7544]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s664], _amount_s664);
[L7545]   COND FALSE  !(revert)
[L7548]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s664];
[L7549]               balances_BasicToken[this][_to_s664] := __var_13;
[L7550]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s664];
[L7551]               assert { :EventEmitted "Mint_MintableToken" } true;
[L7552]               assert { :EventEmitted "Transfer_MintableToken" } true;
[L7553]               __ret_0_ := true;
[L9780]   RET         call __var_60 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, M_int_Ref[addresses_s1673][i_s1673], M_int_int[amounts_s1673][i_s1673]);
[L9781]   COND FALSE  !(revert)
[L9795]               i_s1673 := (i_s1673 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9796]   COND FALSE  !(gas < 0)
[L9776]   COND FALSE  !(i_s1673 < Length[addresses_s1673])
[L9800]   COND TRUE   !CONTINUE_MINTING_Consts[this]
[L9801]   COND TRUE   DType[this] == MainToken
[L9802]   CALL        call __var_62 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7574]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12721]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7574]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7575]   COND FALSE  !(revert)
[L7578]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12737]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7578]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7579]   COND FALSE  !(revert)
[L7582]               mintingFinished_MintableToken[this] := true;
[L7583]               assert { :EventEmitted "MintFinished_MintableToken" } true;
[L7584]               __ret_0_ := true;
[L9802]   RET         call __var_62 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9803]   COND FALSE  !(revert)
[L9810]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9438]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9439]   COND FALSE  !(revert)
[L9442]   COND TRUE   DType[this] == MainToken
[L9443]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7356]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12721]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7356]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   COND TRUE   DType[this] == MainToken
[L7361]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7404]               __var_11 := null;
[L7405]   COND FALSE  !(!(_newOwner_s581 != null))
[L7409]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7410]               owner_Ownable[this] := _newOwner_s581;
[L7361]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7362]   COND FALSE  !(revert)
[L9443]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9444]   COND FALSE  !(revert)
[L9550]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L4426]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4427]               assume !revert && gas >= 0;
[L14773]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14774]              assume !revert && gas >= 0;
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND FALSE  !(choice == 37)
[L14531]  COND FALSE  !(choice == 36)
[L14538]  COND FALSE  !(choice == 35)
[L14544]  COND FALSE  !(choice == 34)
[L14551]  COND FALSE  !(choice == 33)
[L14558]  COND FALSE  !(choice == 32)
[L14565]  COND FALSE  !(choice == 31)
[L14572]  COND FALSE  !(choice == 30)
[L14578]  COND FALSE  !(choice == 29)
[L14584]  COND FALSE  !(choice == 28)
[L14590]  COND FALSE  !(choice == 27)
[L14596]  COND FALSE  !(choice == 26)
[L14603]  COND FALSE  !(choice == 25)
[L14609]  COND FALSE  !(choice == 24)
[L14615]  COND FALSE  !(choice == 23)
[L14621]  COND FALSE  !(choice == 22)
[L14627]  COND FALSE  !(choice == 21)
[L14634]  COND FALSE  !(choice == 20)
[L14642]  COND FALSE  !(choice == 19)
[L14648]  COND FALSE  !(choice == 18)
[L14654]  COND FALSE  !(choice == 17)
[L14661]  COND FALSE  !(choice == 16)
[L14667]  COND FALSE  !(choice == 15)
[L14673]  COND FALSE  !(choice == 14)
[L14679]  COND TRUE   choice == 13
[L14680]              gas := gas - 21000;
[L14681]  COND TRUE   gas >= 0
[L14682]              assume _amount_s1449 >= 0 && _amount_s1449 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14683]              assume _until_s1449 >= 0 && _until_s1449 < 18446744073709551616;
[L14684]              assume msgvalue_MSG == 0;
[L14685]  CALL        call __ret_0_mintAndFreeze := mintAndFreeze~address~uint256~uint64_FreezableMintableToken(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _amount_s1449, _until_s1449);
[L3457]               havoc __exception;
[L3458]               revert := false;
[L3459]   COND FALSE  !(__exception)
[L3498]   CALL        call __ret_0_ := mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _amount_s1449, _until_s1449);
[L9200]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12721]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L9200]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9201]   COND FALSE  !(revert)
[L9204]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12737]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L9204]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9205]   COND FALSE  !(revert)
[L9208]   CALL        call __var_48 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s1449);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L9208]   RET         call __var_48 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s1449);
[L9209]   COND FALSE  !(revert)
[L9212]               totalSupply__BasicToken[this] := __var_48;
[L9213]               __var_49 := _until_s1449 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9214]   COND TRUE   DType[this] == MainToken
[L9215]   CALL        call currentKey_s1449 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _until_s1449 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8545]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8547]               havoc result_s1122;
[L8548]               havoc result_s1122;
[L8549]               havoc result_s1122;
[L8550]               havoc result_s1122;
[L9215]   RET         call currentKey_s1449 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _until_s1449 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L9216]   COND FALSE  !(revert)
[L9227]               currentKey_s1449 := currentKey_s1449;
[L9228]   CALL        call __var_50 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s1449], _amount_s1449);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L9228]   RET         call __var_50 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s1449], _amount_s1449);
[L9229]   COND FALSE  !(revert)
[L9232]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s1449];
[L9233]               freezings_FreezableToken[this][currentKey_s1449] := __var_50;
[L9234]               sum_freezings3[this] := sum_freezings3[this] + freezings_FreezableToken[this][currentKey_s1449];
[L9235]   CALL        call __var_51 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s1449], _amount_s1449);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L9235]   RET         call __var_51 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s1449], _amount_s1449);
[L9236]   COND FALSE  !(revert)
[L9239]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][_to_s1449];
[L9240]               freezingBalance_FreezableToken[this][_to_s1449] := __var_51;
[L9241]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][_to_s1449];
[L9242]   COND TRUE   DType[this] == MainToken
[L9243]   CALL        call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _until_s1449);
[L8689]   COND FALSE  !(!(_until_s1240 > now))
[L8693]               __var_42 := _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8694]   COND TRUE   DType[this] == MainToken
[L8695]   CALL        call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8545]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8547]               havoc result_s1122;
[L8548]               havoc result_s1122;
[L8549]               havoc result_s1122;
[L8550]               havoc result_s1122;
[L8695]   RET         call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8696]   COND FALSE  !(revert)
[L8712]               key_s1240 := key_s1240;
[L8713]               __var_43 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8714]   COND TRUE   DType[this] == MainToken
[L8715]   CALL        call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8545]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8547]               havoc result_s1122;
[L8548]               havoc result_s1122;
[L8549]               havoc result_s1122;
[L8550]               havoc result_s1122;
[L8715]   RET         call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8716]   COND FALSE  !(revert)
[L8732]               parentKey_s1240 := parentKey_s1240;
[L8733]               next_s1240 := chains_FreezableToken[this][parentKey_s1240];
[L8734]   COND TRUE   next_s1240 == 0
[L8735]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][parentKey_s1240];
[L8736]               chains_FreezableToken[this][parentKey_s1240] := _until_s1240;
[L8737]               sum_chains2[this] := sum_chains2[this] + chains_FreezableToken[this][parentKey_s1240];
[L9243]   RET         call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _until_s1449);
[L9244]   COND FALSE  !(revert)
[L9255]               assert { :EventEmitted "Mint_FreezableMintableToken" } true;
[L9256]               assert { :EventEmitted "Freezed_FreezableMintableToken" } true;
[L9257]               assert { :EventEmitted "Transfer_FreezableMintableToken" } true;
[L9258]               __ret_0_ := true;
[L3498]   RET         call __ret_0_ := mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _amount_s1449, _until_s1449);
[L3499]               assume !revert && gas >= 0;
[L14685]  RET         call __ret_0_mintAndFreeze := mintAndFreeze~address~uint256~uint64_FreezableMintableToken(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _amount_s1449, _until_s1449);
[L14777]  RET         call CorralChoice_MainToken(this);
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND TRUE   choice == 37
[L14526]              gas := gas - 21000;
[L14527]  COND TRUE   gas >= 0
[L14528]              assume msgvalue_MSG == 0;
[L14529]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7706]   COND TRUE   DType[this] == MainToken
[L7707]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6961]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7707]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7708]   COND FALSE  !(revert)
[L7724]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14529]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14777]  RET         call CorralChoice_MainToken(this);

Loop:
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND FALSE  !(choice == 37)
[L14531]  COND FALSE  !(choice == 36)
[L14538]  COND FALSE  !(choice == 35)
[L14544]  COND FALSE  !(choice == 34)
[L14551]  COND FALSE  !(choice == 33)
[L14558]  COND FALSE  !(choice == 32)
[L14565]  COND FALSE  !(choice == 31)
[L14572]  COND FALSE  !(choice == 30)
[L14578]  COND FALSE  !(choice == 29)
[L14584]  COND FALSE  !(choice == 28)
[L14590]  COND FALSE  !(choice == 27)
[L14596]  COND FALSE  !(choice == 26)
[L14603]  COND FALSE  !(choice == 25)
[L14609]  COND FALSE  !(choice == 24)
[L14615]  COND FALSE  !(choice == 23)
[L14621]  COND FALSE  !(choice == 22)
[L14627]  COND FALSE  !(choice == 21)
[L14634]  COND FALSE  !(choice == 20)
[L14642]  COND TRUE   choice == 19
[L14643]              gas := gas - 21000;
[L14644]  COND TRUE   gas >= 0
[L14645]              assume msgvalue_MSG == 0;
[L14646]  CALL        call releaseOnce_FreezableToken(this, msgsender_MSG, msgvalue_MSG);
[L2624]               havoc __exception;
[L2625]               revert := false;
[L2626]   COND FALSE  !(__exception)
[L2665]   CALL        call releaseOnce_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8290]               __var_31 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8291]   COND TRUE   DType[this] == MainToken
[L8292]   CALL        call headKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8545]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8547]               havoc result_s1122;
[L8548]               havoc result_s1122;
[L8549]               havoc result_s1122;
[L8550]               havoc result_s1122;
[L8292]   RET         call headKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8293]   COND FALSE  !(revert)
[L8309]               headKey_s1054 := headKey_s1054;
[L8310]               head_s1054 := chains_FreezableToken[this][headKey_s1054];
[L8311]   COND FALSE  !(!(head_s1054 != 0))
[L8315]               __var_32 := now % 18446744073709551616;
[L8316]   COND FALSE  !(!(now % 18446744073709551616 > head_s1054))
[L8320]               __var_33 := head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8321]   COND TRUE   DType[this] == MainToken
[L8322]   CALL        call currentKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8545]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8547]               havoc result_s1122;
[L8548]               havoc result_s1122;
[L8549]               havoc result_s1122;
[L8550]               havoc result_s1122;
[L8322]   RET         call currentKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8323]   COND FALSE  !(revert)
[L8339]               currentKey_s1054 := currentKey_s1054;
[L8340]               next_s1054 := chains_FreezableToken[this][currentKey_s1054];
[L8341]               amount_s1054 := freezings_FreezableToken[this][currentKey_s1054];
[L8342]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s1054];
[L8343]               freezings_FreezableToken[this][currentKey_s1054] := 0;
[L8344]   CALL        call __var_34 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], amount_s1054);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L8344]   RET         call __var_34 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], amount_s1054);
[L8345]   COND FALSE  !(revert)
[L8348]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L8349]               balances_BasicToken[this][msgsender_MSG] := __var_34;
[L8350]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L8351]   CALL        call __var_35 := sub~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][msgsender_MSG], amount_s1054);
[L6810]               assert b_s98 <= a_s98;
[L6811]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8351]   RET         call __var_35 := sub~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][msgsender_MSG], amount_s1054);
[L8352]   COND FALSE  !(revert)
[L8355]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][msgsender_MSG];
[L8356]               freezingBalance_FreezableToken[this][msgsender_MSG] := __var_35;
[L8357]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][msgsender_MSG];
[L8358]   COND TRUE   next_s1054 == 0
[L8359]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][headKey_s1054];
[L8360]               chains_FreezableToken[this][headKey_s1054] := 0;
[L8368]               assert { :EventEmitted "Released_FreezableToken" } true;
[L2665]   RET         call releaseOnce_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2666]               assume !revert && gas >= 0;
[L14646]  RET         call releaseOnce_FreezableToken(this, msgsender_MSG, msgvalue_MSG);
[L14777]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:43:59,257 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:43:59,257 INFO  L82        PathProgramCache]: Analyzing trace with hash 263530737, now seen corresponding path program 1 times
[2020-11-24 21:43:59,258 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:43:59,288 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:43:59,967 INFO  L134       CoverageAnalysis]: Checked inductivity of 10002 backedges. 5 proven. 88 refuted. 0 times theorem prover too weak. 9909 trivial. 0 not checked.
[2020-11-24 21:43:59,968 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-24 21:43:59,968 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [13] total 13
[2020-11-24 21:43:59,968 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:43:59,969 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-11-24 21:43:59,969 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=24, Invalid=132, Unknown=0, NotChecked=0, Total=156
[2020-11-24 21:43:59,969 INFO  L87              Difference]: Start difference. First operand 6117 states and 6902 transitions. cyclomatic complexity: 810 Second operand 13 states.
[2020-11-24 21:44:03,818 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:44:03,818 INFO  L93              Difference]: Finished difference Result 6150 states and 6984 transitions.
[2020-11-24 21:44:03,818 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-11-24 21:44:03,818 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6150 states and 6984 transitions.
[2020-11-24 21:44:03,828 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-24 21:44:03,839 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6150 states to 6150 states and 6984 transitions.
[2020-11-24 21:44:03,839 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1124
[2020-11-24 21:44:03,839 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1124
[2020-11-24 21:44:03,839 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6150 states and 6984 transitions.
[2020-11-24 21:44:03,842 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:44:03,843 INFO  L728         BuchiCegarLoop]: Abstraction has 6150 states and 6984 transitions.
[2020-11-24 21:44:03,846 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6150 states and 6984 transitions.
[2020-11-24 21:44:03,869 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6150 to 6150.
[2020-11-24 21:44:03,869 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6150 states.
[2020-11-24 21:44:03,875 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6150 states to 6150 states and 6984 transitions.
[2020-11-24 21:44:03,875 INFO  L751         BuchiCegarLoop]: Abstraction has 6150 states and 6984 transitions.
[2020-11-24 21:44:03,875 INFO  L631         BuchiCegarLoop]: Abstraction has 6150 states and 6984 transitions.
[2020-11-24 21:44:03,875 INFO  L445         BuchiCegarLoop]: ======== Iteration 20============
[2020-11-24 21:44:03,875 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6150 states and 6984 transitions.
[2020-11-24 21:44:03,881 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-24 21:44:03,881 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:44:03,881 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:44:03,883 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:44:03,883 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14767]              assume null == 0;
[L14768]  CALL        call this := FreshRefGenerator__success();
[L6697]               havoc newRef;
[L6698]               assume Alloc[newRef] == false;
[L6699]               Alloc[newRef] := true;
[L6700]               assume newRef != null;
[L14768]  RET         call this := FreshRefGenerator__success();
[L14769]              assume now >= 0;
[L14770]              assume DType[this] == MainToken;
[L14771]              assume msgvalue_MSG == 0;
[L14772]              gas := gas - 53000;
[L14773]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4385]               havoc __exception;
[L4386]               revert := false;
[L4387]   COND FALSE  !(__exception)
[L4426]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9506]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9284]               assume msgsender_MSG != null;
[L9285]               Balance[this] := 0;
[L9286]               TOKEN_DECIMALS_Consts[this] := 18;
[L9287]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9288]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9289]               TOKEN_NAME_Consts[this] := -1298559559;
[L9290]               TOKEN_SYMBOL_Consts[this] := 120673937;
[L9291]               PAUSED_Consts[this] := false;
[L9292]               __var_52 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9293]               TARGET_USER_Consts[this] := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9294]               CONTINUE_MINTING_Consts[this] := false;
[L9308]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]   COND FALSE  !(revert)
[L9506]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9507]   COND FALSE  !(revert)
[L9510]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9510]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9511]   COND FALSE  !(revert)
[L9514]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9514]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9515]   COND FALSE  !(revert)
[L9518]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9518]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9519]   COND FALSE  !(revert)
[L9522]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9522]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9523]   COND FALSE  !(revert)
[L9526]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9526]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9527]   COND FALSE  !(revert)
[L9530]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9530]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9534]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9093]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9093]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9094]   COND FALSE  !(revert)
[L9097]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9097]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9098]   COND FALSE  !(revert)
[L9101]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9101]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9102]   COND FALSE  !(revert)
[L9105]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9105]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9106]   COND FALSE  !(revert)
[L9109]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9109]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9110]   COND FALSE  !(revert)
[L9113]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9113]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9114]   COND FALSE  !(revert)
[L9117]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9117]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9050]               assume msgsender_MSG != null;
[L9051]               Balance[this] := 0;
[L9121]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9538]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8837]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L8837]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]   COND FALSE  !(revert)
[L8841]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L8841]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8842]   COND FALSE  !(revert)
[L8845]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8814]               assume msgsender_MSG != null;
[L8815]               Balance[this] := 0;
[L8845]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8846]   COND FALSE  !(revert)
[L9542]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8963]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L8963]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8964]   COND FALSE  !(revert)
[L8967]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8943]               assume msgsender_MSG != null;
[L8944]               Balance[this] := 0;
[L8945]               paused_Pausable[this] := false;
[L8967]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8968]   COND FALSE  !(revert)
[L9546]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9434]               assume msgsender_MSG != null;
[L9435]               Balance[this] := 0;
[L9436]               initialized_MainToken[this] := false;
[L9438]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9754]   COND FALSE  !(!!initialized_MainToken[this])
[L9758]               initialized_MainToken[this] := true;
[L9759]   COND FALSE  !(PAUSED_Consts[this])
[L9769]               __var_57 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9770]               addresses_s1673 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9771]               __var_58 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9772]               amounts_s1673 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9773]               __var_59 := 0 % 18446744073709551616;
[L9774]               freezes_s1673 := 0 % 18446744073709551616;
[L9775]               i_s1673 := 0;
[L9776]   COND TRUE   i_s1673 < Length[addresses_s1673]
[L9778]   COND TRUE   M_int_int[freezes_s1673][i_s1673] == 0
[L9779]   COND TRUE   DType[this] == MainToken
[L9780]   CALL        call __var_60 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, M_int_Ref[addresses_s1673][i_s1673], M_int_int[amounts_s1673][i_s1673]);
[L7531]   CALL        call hasMintPermission_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12753]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7531]   RET         call hasMintPermission_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7532]   COND FALSE  !(revert)
[L7535]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12737]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7535]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7536]   COND FALSE  !(revert)
[L7539]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s664);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L7539]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s664);
[L7540]   COND FALSE  !(revert)
[L7543]               totalSupply__BasicToken[this] := __var_12;
[L7544]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s664], _amount_s664);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L7544]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s664], _amount_s664);
[L7545]   COND FALSE  !(revert)
[L7548]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s664];
[L7549]               balances_BasicToken[this][_to_s664] := __var_13;
[L7550]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s664];
[L7551]               assert { :EventEmitted "Mint_MintableToken" } true;
[L7552]               assert { :EventEmitted "Transfer_MintableToken" } true;
[L7553]               __ret_0_ := true;
[L9780]   RET         call __var_60 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, M_int_Ref[addresses_s1673][i_s1673], M_int_int[amounts_s1673][i_s1673]);
[L9781]   COND FALSE  !(revert)
[L9795]               i_s1673 := (i_s1673 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9796]   COND FALSE  !(gas < 0)
[L9776]   COND FALSE  !(i_s1673 < Length[addresses_s1673])
[L9800]   COND TRUE   !CONTINUE_MINTING_Consts[this]
[L9801]   COND TRUE   DType[this] == MainToken
[L9802]   CALL        call __var_62 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7574]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12721]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7574]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7575]   COND FALSE  !(revert)
[L7578]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12737]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7578]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7579]   COND FALSE  !(revert)
[L7582]               mintingFinished_MintableToken[this] := true;
[L7583]               assert { :EventEmitted "MintFinished_MintableToken" } true;
[L7584]               __ret_0_ := true;
[L9802]   RET         call __var_62 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9803]   COND FALSE  !(revert)
[L9810]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9438]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9439]   COND FALSE  !(revert)
[L9442]   COND TRUE   DType[this] == MainToken
[L9443]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7356]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12721]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7356]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   COND TRUE   DType[this] == MainToken
[L7361]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7404]               __var_11 := null;
[L7405]   COND FALSE  !(!(_newOwner_s581 != null))
[L7409]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7410]               owner_Ownable[this] := _newOwner_s581;
[L7361]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7362]   COND FALSE  !(revert)
[L9443]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9444]   COND FALSE  !(revert)
[L9550]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L4426]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4427]               assume !revert && gas >= 0;
[L14773]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14774]              assume !revert && gas >= 0;
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND FALSE  !(choice == 37)
[L14531]  COND FALSE  !(choice == 36)
[L14538]  COND FALSE  !(choice == 35)
[L14544]  COND FALSE  !(choice == 34)
[L14551]  COND FALSE  !(choice == 33)
[L14558]  COND FALSE  !(choice == 32)
[L14565]  COND FALSE  !(choice == 31)
[L14572]  COND FALSE  !(choice == 30)
[L14578]  COND FALSE  !(choice == 29)
[L14584]  COND FALSE  !(choice == 28)
[L14590]  COND FALSE  !(choice == 27)
[L14596]  COND FALSE  !(choice == 26)
[L14603]  COND FALSE  !(choice == 25)
[L14609]  COND FALSE  !(choice == 24)
[L14615]  COND FALSE  !(choice == 23)
[L14621]  COND FALSE  !(choice == 22)
[L14627]  COND FALSE  !(choice == 21)
[L14634]  COND TRUE   choice == 20
[L14635]              gas := gas - 21000;
[L14636]  COND TRUE   gas >= 0
[L14637]              assume _amount_s938 >= 0 && _amount_s938 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14638]              assume _until_s938 >= 0 && _until_s938 < 18446744073709551616;
[L14639]              assume msgvalue_MSG == 0;
[L14640]  CALL        call freezeTo~address~uint256~uint64_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L2530]               havoc __exception;
[L2531]               revert := false;
[L2532]   COND FALSE  !(__exception)
[L2571]   CALL        call freezeTo~address~uint256~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L8114]               __var_26 := null;
[L8115]   COND FALSE  !(!(_to_s938 != null))
[L8119]   COND FALSE  !(!(_amount_s938 <= balances_BasicToken[this][msgsender_MSG]))
[L8123]   CALL        call __var_27 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _amount_s938);
[L6810]               assert b_s98 <= a_s98;
[L6811]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8123]   RET         call __var_27 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _amount_s938);
[L8124]   COND FALSE  !(revert)
[L8127]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L8128]               balances_BasicToken[this][msgsender_MSG] := __var_27;
[L8129]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L8130]               __var_28 := _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8131]   COND FALSE  !(DType[this] == MainToken)
[L8136]   COND TRUE   DType[this] == FreezableMintableToken
[L8137]   CALL        call currentKey_s938 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8545]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8547]               havoc result_s1122;
[L8548]               havoc result_s1122;
[L8549]               havoc result_s1122;
[L8550]               havoc result_s1122;
[L8137]   RET         call currentKey_s938 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8138]   COND FALSE  !(revert)
[L8149]               currentKey_s938 := currentKey_s938;
[L8150]   CALL        call __var_29 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s938], _amount_s938);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L8150]   RET         call __var_29 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s938], _amount_s938);
[L8151]   COND FALSE  !(revert)
[L8154]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s938];
[L8155]               freezings_FreezableToken[this][currentKey_s938] := __var_29;
[L8156]               sum_freezings3[this] := sum_freezings3[this] + freezings_FreezableToken[this][currentKey_s938];
[L8157]   CALL        call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s938], _amount_s938);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L8157]   RET         call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s938], _amount_s938);
[L8158]   COND FALSE  !(revert)
[L8161]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][_to_s938];
[L8162]               freezingBalance_FreezableToken[this][_to_s938] := __var_30;
[L8163]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][_to_s938];
[L8164]   COND TRUE   DType[this] == MainToken
[L8165]   CALL        call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938);
[L8689]   COND FALSE  !(!(_until_s1240 > now))
[L8693]               __var_42 := _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8694]   COND FALSE  !(DType[this] == MainToken)
[L8699]   COND FALSE  !(DType[this] == FreezableMintableToken)
[L8704]   COND TRUE   DType[this] == FreezableToken
[L8705]   CALL        call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8545]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8547]               havoc result_s1122;
[L8548]               havoc result_s1122;
[L8549]               havoc result_s1122;
[L8550]               havoc result_s1122;
[L8705]   RET         call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8706]   COND FALSE  !(revert)
[L8712]               key_s1240 := key_s1240;
[L8713]               __var_43 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8714]   COND FALSE  !(DType[this] == MainToken)
[L8719]   COND FALSE  !(DType[this] == FreezableMintableToken)
[L8724]   COND TRUE   DType[this] == FreezableToken
[L8725]   CALL        call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8545]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8547]               havoc result_s1122;
[L8548]               havoc result_s1122;
[L8549]               havoc result_s1122;
[L8550]               havoc result_s1122;
[L8725]   RET         call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8726]   COND FALSE  !(revert)
[L8732]               parentKey_s1240 := parentKey_s1240;
[L8733]               next_s1240 := chains_FreezableToken[this][parentKey_s1240];
[L8734]   COND TRUE   next_s1240 == 0
[L8735]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][parentKey_s1240];
[L8736]               chains_FreezableToken[this][parentKey_s1240] := _until_s1240;
[L8737]               sum_chains2[this] := sum_chains2[this] + chains_FreezableToken[this][parentKey_s1240];
[L8165]   RET         call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938);
[L8166]   COND FALSE  !(revert)
[L8182]               assert { :EventEmitted "Transfer_FreezableToken" } true;
[L8183]               assert { :EventEmitted "Freezed_FreezableToken" } true;
[L2571]   RET         call freezeTo~address~uint256~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L2572]               assume !revert && gas >= 0;
[L14640]  RET         call freezeTo~address~uint256~uint64_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L14777]  RET         call CorralChoice_MainToken(this);
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND TRUE   choice == 37
[L14526]              gas := gas - 21000;
[L14527]  COND TRUE   gas >= 0
[L14528]              assume msgvalue_MSG == 0;
[L14529]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7706]   COND TRUE   DType[this] == MainToken
[L7707]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6961]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7707]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7708]   COND FALSE  !(revert)
[L7724]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14529]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14777]  RET         call CorralChoice_MainToken(this);

Loop:
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND FALSE  !(choice == 37)
[L14531]  COND FALSE  !(choice == 36)
[L14538]  COND FALSE  !(choice == 35)
[L14544]  COND FALSE  !(choice == 34)
[L14551]  COND FALSE  !(choice == 33)
[L14558]  COND FALSE  !(choice == 32)
[L14565]  COND FALSE  !(choice == 31)
[L14572]  COND FALSE  !(choice == 30)
[L14578]  COND FALSE  !(choice == 29)
[L14584]  COND FALSE  !(choice == 28)
[L14590]  COND FALSE  !(choice == 27)
[L14596]  COND FALSE  !(choice == 26)
[L14603]  COND FALSE  !(choice == 25)
[L14609]  COND FALSE  !(choice == 24)
[L14615]  COND FALSE  !(choice == 23)
[L14621]  COND FALSE  !(choice == 22)
[L14627]  COND FALSE  !(choice == 21)
[L14634]  COND FALSE  !(choice == 20)
[L14642]  COND TRUE   choice == 19
[L14643]              gas := gas - 21000;
[L14644]  COND TRUE   gas >= 0
[L14645]              assume msgvalue_MSG == 0;
[L14646]  CALL        call releaseOnce_FreezableToken(this, msgsender_MSG, msgvalue_MSG);
[L2624]               havoc __exception;
[L2625]               revert := false;
[L2626]   COND FALSE  !(__exception)
[L2665]   CALL        call releaseOnce_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8290]               __var_31 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8291]   COND FALSE  !(DType[this] == MainToken)
[L8296]   COND FALSE  !(DType[this] == FreezableMintableToken)
[L8301]   COND TRUE   DType[this] == FreezableToken
[L8302]   CALL        call headKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8545]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8547]               havoc result_s1122;
[L8548]               havoc result_s1122;
[L8549]               havoc result_s1122;
[L8550]               havoc result_s1122;
[L8302]   RET         call headKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8303]   COND FALSE  !(revert)
[L8309]               headKey_s1054 := headKey_s1054;
[L8310]               head_s1054 := chains_FreezableToken[this][headKey_s1054];
[L8311]   COND FALSE  !(!(head_s1054 != 0))
[L8315]               __var_32 := now % 18446744073709551616;
[L8316]   COND FALSE  !(!(now % 18446744073709551616 > head_s1054))
[L8320]               __var_33 := head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8321]   COND FALSE  !(DType[this] == MainToken)
[L8326]   COND FALSE  !(DType[this] == FreezableMintableToken)
[L8331]   COND TRUE   DType[this] == FreezableToken
[L8332]   CALL        call currentKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8545]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8547]               havoc result_s1122;
[L8548]               havoc result_s1122;
[L8549]               havoc result_s1122;
[L8550]               havoc result_s1122;
[L8332]   RET         call currentKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8333]   COND FALSE  !(revert)
[L8339]               currentKey_s1054 := currentKey_s1054;
[L8340]               next_s1054 := chains_FreezableToken[this][currentKey_s1054];
[L8341]               amount_s1054 := freezings_FreezableToken[this][currentKey_s1054];
[L8342]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s1054];
[L8343]               freezings_FreezableToken[this][currentKey_s1054] := 0;
[L8344]   CALL        call __var_34 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], amount_s1054);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L8344]   RET         call __var_34 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], amount_s1054);
[L8345]   COND FALSE  !(revert)
[L8348]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L8349]               balances_BasicToken[this][msgsender_MSG] := __var_34;
[L8350]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L8351]   CALL        call __var_35 := sub~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][msgsender_MSG], amount_s1054);
[L6810]               assert b_s98 <= a_s98;
[L6811]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8351]   RET         call __var_35 := sub~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][msgsender_MSG], amount_s1054);
[L8352]   COND FALSE  !(revert)
[L8355]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][msgsender_MSG];
[L8356]               freezingBalance_FreezableToken[this][msgsender_MSG] := __var_35;
[L8357]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][msgsender_MSG];
[L8358]   COND TRUE   next_s1054 == 0
[L8359]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][headKey_s1054];
[L8360]               chains_FreezableToken[this][headKey_s1054] := 0;
[L8368]               assert { :EventEmitted "Released_FreezableToken" } true;
[L2665]   RET         call releaseOnce_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2666]               assume !revert && gas >= 0;
[L14646]  RET         call releaseOnce_FreezableToken(this, msgsender_MSG, msgvalue_MSG);
[L14777]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:44:03,890 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:44:03,890 INFO  L82        PathProgramCache]: Analyzing trace with hash 251530251, now seen corresponding path program 1 times
[2020-11-24 21:44:03,891 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:44:03,922 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:44:04,521 INFO  L134       CoverageAnalysis]: Checked inductivity of 9970 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 9969 trivial. 0 not checked.
[2020-11-24 21:44:04,522 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:44:04,522 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 21:44:04,522 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:44:04,523 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 21:44:04,523 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 21:44:04,523 INFO  L87              Difference]: Start difference. First operand 6150 states and 6984 transitions. cyclomatic complexity: 865 Second operand 3 states.
[2020-11-24 21:44:04,568 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:44:04,569 INFO  L93              Difference]: Finished difference Result 6194 states and 7032 transitions.
[2020-11-24 21:44:04,569 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 21:44:04,569 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6194 states and 7032 transitions.
[2020-11-24 21:44:04,578 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-24 21:44:04,589 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6194 states to 6194 states and 7032 transitions.
[2020-11-24 21:44:04,589 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1132
[2020-11-24 21:44:04,590 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1132
[2020-11-24 21:44:04,590 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6194 states and 7032 transitions.
[2020-11-24 21:44:04,593 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:44:04,593 INFO  L728         BuchiCegarLoop]: Abstraction has 6194 states and 7032 transitions.
[2020-11-24 21:44:04,597 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6194 states and 7032 transitions.
[2020-11-24 21:44:04,620 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6194 to 6178.
[2020-11-24 21:44:04,620 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6178 states.
[2020-11-24 21:44:04,626 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6178 states to 6178 states and 7016 transitions.
[2020-11-24 21:44:04,626 INFO  L751         BuchiCegarLoop]: Abstraction has 6178 states and 7016 transitions.
[2020-11-24 21:44:04,627 INFO  L631         BuchiCegarLoop]: Abstraction has 6178 states and 7016 transitions.
[2020-11-24 21:44:04,627 INFO  L445         BuchiCegarLoop]: ======== Iteration 21============
[2020-11-24 21:44:04,627 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6178 states and 7016 transitions.
[2020-11-24 21:44:04,632 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-24 21:44:04,632 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:44:04,632 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:44:04,634 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:44:04,634 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14767]              assume null == 0;
[L14768]  CALL        call this := FreshRefGenerator__success();
[L6697]               havoc newRef;
[L6698]               assume Alloc[newRef] == false;
[L6699]               Alloc[newRef] := true;
[L6700]               assume newRef != null;
[L14768]  RET         call this := FreshRefGenerator__success();
[L14769]              assume now >= 0;
[L14770]              assume DType[this] == MainToken;
[L14771]              assume msgvalue_MSG == 0;
[L14772]              gas := gas - 53000;
[L14773]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4385]               havoc __exception;
[L4386]               revert := false;
[L4387]   COND FALSE  !(__exception)
[L4426]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9506]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9284]               assume msgsender_MSG != null;
[L9285]               Balance[this] := 0;
[L9286]               TOKEN_DECIMALS_Consts[this] := 18;
[L9287]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9288]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9289]               TOKEN_NAME_Consts[this] := -1298559559;
[L9290]               TOKEN_SYMBOL_Consts[this] := 120673937;
[L9291]               PAUSED_Consts[this] := false;
[L9292]               __var_52 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9293]               TARGET_USER_Consts[this] := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9294]               CONTINUE_MINTING_Consts[this] := false;
[L9308]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]   COND FALSE  !(revert)
[L9506]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9507]   COND FALSE  !(revert)
[L9510]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9510]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9511]   COND FALSE  !(revert)
[L9514]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9514]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9515]   COND FALSE  !(revert)
[L9518]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9518]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9519]   COND FALSE  !(revert)
[L9522]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9522]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9523]   COND FALSE  !(revert)
[L9526]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9526]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9527]   COND FALSE  !(revert)
[L9530]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9530]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9534]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9093]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9093]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9094]   COND FALSE  !(revert)
[L9097]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9097]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9098]   COND FALSE  !(revert)
[L9101]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9101]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9102]   COND FALSE  !(revert)
[L9105]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9105]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9106]   COND FALSE  !(revert)
[L9109]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9109]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9110]   COND FALSE  !(revert)
[L9113]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9113]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9114]   COND FALSE  !(revert)
[L9117]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9117]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9050]               assume msgsender_MSG != null;
[L9051]               Balance[this] := 0;
[L9121]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9538]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8837]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L8837]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]   COND FALSE  !(revert)
[L8841]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L8841]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8842]   COND FALSE  !(revert)
[L8845]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8814]               assume msgsender_MSG != null;
[L8815]               Balance[this] := 0;
[L8845]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8846]   COND FALSE  !(revert)
[L9542]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8963]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L8963]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8964]   COND FALSE  !(revert)
[L8967]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8943]               assume msgsender_MSG != null;
[L8944]               Balance[this] := 0;
[L8945]               paused_Pausable[this] := false;
[L8967]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8968]   COND FALSE  !(revert)
[L9546]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9434]               assume msgsender_MSG != null;
[L9435]               Balance[this] := 0;
[L9436]               initialized_MainToken[this] := false;
[L9438]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9754]   COND FALSE  !(!!initialized_MainToken[this])
[L9758]               initialized_MainToken[this] := true;
[L9759]   COND FALSE  !(PAUSED_Consts[this])
[L9769]               __var_57 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9770]               addresses_s1673 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9771]               __var_58 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9772]               amounts_s1673 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9773]               __var_59 := 0 % 18446744073709551616;
[L9774]               freezes_s1673 := 0 % 18446744073709551616;
[L9775]               i_s1673 := 0;
[L9776]   COND TRUE   i_s1673 < Length[addresses_s1673]
[L9778]   COND TRUE   M_int_int[freezes_s1673][i_s1673] == 0
[L9779]   COND TRUE   DType[this] == MainToken
[L9780]   CALL        call __var_60 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, M_int_Ref[addresses_s1673][i_s1673], M_int_int[amounts_s1673][i_s1673]);
[L7531]   CALL        call hasMintPermission_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12753]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7531]   RET         call hasMintPermission_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7532]   COND FALSE  !(revert)
[L7535]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12737]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7535]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7536]   COND FALSE  !(revert)
[L7539]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s664);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L7539]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s664);
[L7540]   COND FALSE  !(revert)
[L7543]               totalSupply__BasicToken[this] := __var_12;
[L7544]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s664], _amount_s664);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L7544]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s664], _amount_s664);
[L7545]   COND FALSE  !(revert)
[L7548]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s664];
[L7549]               balances_BasicToken[this][_to_s664] := __var_13;
[L7550]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s664];
[L7551]               assert { :EventEmitted "Mint_MintableToken" } true;
[L7552]               assert { :EventEmitted "Transfer_MintableToken" } true;
[L7553]               __ret_0_ := true;
[L9780]   RET         call __var_60 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, M_int_Ref[addresses_s1673][i_s1673], M_int_int[amounts_s1673][i_s1673]);
[L9781]   COND FALSE  !(revert)
[L9795]               i_s1673 := (i_s1673 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9796]   COND FALSE  !(gas < 0)
[L9776]   COND FALSE  !(i_s1673 < Length[addresses_s1673])
[L9800]   COND TRUE   !CONTINUE_MINTING_Consts[this]
[L9801]   COND TRUE   DType[this] == MainToken
[L9802]   CALL        call __var_62 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7574]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12721]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7574]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7575]   COND FALSE  !(revert)
[L7578]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12737]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7578]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7579]   COND FALSE  !(revert)
[L7582]               mintingFinished_MintableToken[this] := true;
[L7583]               assert { :EventEmitted "MintFinished_MintableToken" } true;
[L7584]               __ret_0_ := true;
[L9802]   RET         call __var_62 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9803]   COND FALSE  !(revert)
[L9810]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9438]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9439]   COND FALSE  !(revert)
[L9442]   COND TRUE   DType[this] == MainToken
[L9443]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7356]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12721]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7356]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   COND TRUE   DType[this] == MainToken
[L7361]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7404]               __var_11 := null;
[L7405]   COND FALSE  !(!(_newOwner_s581 != null))
[L7409]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7410]               owner_Ownable[this] := _newOwner_s581;
[L7361]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7362]   COND FALSE  !(revert)
[L9443]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9444]   COND FALSE  !(revert)
[L9550]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L4426]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4427]               assume !revert && gas >= 0;
[L14773]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14774]              assume !revert && gas >= 0;
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND FALSE  !(choice == 37)
[L14531]  COND FALSE  !(choice == 36)
[L14538]  COND FALSE  !(choice == 35)
[L14544]  COND FALSE  !(choice == 34)
[L14551]  COND FALSE  !(choice == 33)
[L14558]  COND FALSE  !(choice == 32)
[L14565]  COND FALSE  !(choice == 31)
[L14572]  COND FALSE  !(choice == 30)
[L14578]  COND FALSE  !(choice == 29)
[L14584]  COND FALSE  !(choice == 28)
[L14590]  COND FALSE  !(choice == 27)
[L14596]  COND FALSE  !(choice == 26)
[L14603]  COND FALSE  !(choice == 25)
[L14609]  COND FALSE  !(choice == 24)
[L14615]  COND FALSE  !(choice == 23)
[L14621]  COND FALSE  !(choice == 22)
[L14627]  COND FALSE  !(choice == 21)
[L14634]  COND TRUE   choice == 20
[L14635]              gas := gas - 21000;
[L14636]  COND TRUE   gas >= 0
[L14637]              assume _amount_s938 >= 0 && _amount_s938 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14638]              assume _until_s938 >= 0 && _until_s938 < 18446744073709551616;
[L14639]              assume msgvalue_MSG == 0;
[L14640]  CALL        call freezeTo~address~uint256~uint64_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L2530]               havoc __exception;
[L2531]               revert := false;
[L2532]   COND FALSE  !(__exception)
[L2571]   CALL        call freezeTo~address~uint256~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L8114]               __var_26 := null;
[L8115]   COND FALSE  !(!(_to_s938 != null))
[L8119]   COND FALSE  !(!(_amount_s938 <= balances_BasicToken[this][msgsender_MSG]))
[L8123]   CALL        call __var_27 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _amount_s938);
[L6810]               assert b_s98 <= a_s98;
[L6811]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8123]   RET         call __var_27 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _amount_s938);
[L8124]   COND FALSE  !(revert)
[L8127]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L8128]               balances_BasicToken[this][msgsender_MSG] := __var_27;
[L8129]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L8130]               __var_28 := _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8131]   COND TRUE   DType[this] == MainToken
[L8132]   CALL        call currentKey_s938 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8545]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8547]               havoc result_s1122;
[L8548]               havoc result_s1122;
[L8549]               havoc result_s1122;
[L8550]               havoc result_s1122;
[L8132]   RET         call currentKey_s938 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8133]   COND FALSE  !(revert)
[L8149]               currentKey_s938 := currentKey_s938;
[L8150]   CALL        call __var_29 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s938], _amount_s938);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L8150]   RET         call __var_29 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s938], _amount_s938);
[L8151]   COND FALSE  !(revert)
[L8154]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s938];
[L8155]               freezings_FreezableToken[this][currentKey_s938] := __var_29;
[L8156]               sum_freezings3[this] := sum_freezings3[this] + freezings_FreezableToken[this][currentKey_s938];
[L8157]   CALL        call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s938], _amount_s938);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L8157]   RET         call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s938], _amount_s938);
[L8158]   COND FALSE  !(revert)
[L8161]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][_to_s938];
[L8162]               freezingBalance_FreezableToken[this][_to_s938] := __var_30;
[L8163]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][_to_s938];
[L8164]   COND FALSE  !(DType[this] == MainToken)
[L8169]   COND TRUE   DType[this] == FreezableMintableToken
[L8170]   CALL        call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938);
[L8689]   COND FALSE  !(!(_until_s1240 > now))
[L8693]               __var_42 := _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8694]   COND FALSE  !(DType[this] == MainToken)
[L8699]   COND FALSE  !(DType[this] == FreezableMintableToken)
[L8704]   COND TRUE   DType[this] == FreezableToken
[L8705]   CALL        call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8545]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8547]               havoc result_s1122;
[L8548]               havoc result_s1122;
[L8549]               havoc result_s1122;
[L8550]               havoc result_s1122;
[L8705]   RET         call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8706]   COND FALSE  !(revert)
[L8712]               key_s1240 := key_s1240;
[L8713]               __var_43 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8714]   COND FALSE  !(DType[this] == MainToken)
[L8719]   COND TRUE   DType[this] == FreezableMintableToken
[L8720]   CALL        call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8545]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8547]               havoc result_s1122;
[L8548]               havoc result_s1122;
[L8549]               havoc result_s1122;
[L8550]               havoc result_s1122;
[L8720]   RET         call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8721]   COND FALSE  !(revert)
[L8732]               parentKey_s1240 := parentKey_s1240;
[L8733]               next_s1240 := chains_FreezableToken[this][parentKey_s1240];
[L8734]   COND TRUE   next_s1240 == 0
[L8735]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][parentKey_s1240];
[L8736]               chains_FreezableToken[this][parentKey_s1240] := _until_s1240;
[L8737]               sum_chains2[this] := sum_chains2[this] + chains_FreezableToken[this][parentKey_s1240];
[L8170]   RET         call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938);
[L8171]   COND FALSE  !(revert)
[L8182]               assert { :EventEmitted "Transfer_FreezableToken" } true;
[L8183]               assert { :EventEmitted "Freezed_FreezableToken" } true;
[L2571]   RET         call freezeTo~address~uint256~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L2572]               assume !revert && gas >= 0;
[L14640]  RET         call freezeTo~address~uint256~uint64_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L14777]  RET         call CorralChoice_MainToken(this);
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND TRUE   choice == 37
[L14526]              gas := gas - 21000;
[L14527]  COND TRUE   gas >= 0
[L14528]              assume msgvalue_MSG == 0;
[L14529]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7706]   COND TRUE   DType[this] == MainToken
[L7707]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6961]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7707]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7708]   COND FALSE  !(revert)
[L7724]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14529]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14777]  RET         call CorralChoice_MainToken(this);

Loop:
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND TRUE   choice == 38
[L14520]              gas := gas - 21000;
[L14521]  COND FALSE  !(gas >= 0)
[L14777]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:44:04,641 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:44:04,642 INFO  L82        PathProgramCache]: Analyzing trace with hash -999361445, now seen corresponding path program 1 times
[2020-11-24 21:44:04,642 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:44:04,673 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:44:05,291 INFO  L134       CoverageAnalysis]: Checked inductivity of 9970 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 9969 trivial. 0 not checked.
[2020-11-24 21:44:05,291 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:44:05,291 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 21:44:05,292 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:44:05,292 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 21:44:05,292 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 21:44:05,292 INFO  L87              Difference]: Start difference. First operand 6178 states and 7016 transitions. cyclomatic complexity: 869 Second operand 3 states.
[2020-11-24 21:44:05,336 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:44:05,336 INFO  L93              Difference]: Finished difference Result 6194 states and 7030 transitions.
[2020-11-24 21:44:05,336 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 21:44:05,336 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6194 states and 7030 transitions.
[2020-11-24 21:44:05,346 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-24 21:44:05,357 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6194 states to 6194 states and 7030 transitions.
[2020-11-24 21:44:05,357 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1132
[2020-11-24 21:44:05,357 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1132
[2020-11-24 21:44:05,357 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6194 states and 7030 transitions.
[2020-11-24 21:44:05,361 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:44:05,361 INFO  L728         BuchiCegarLoop]: Abstraction has 6194 states and 7030 transitions.
[2020-11-24 21:44:05,364 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6194 states and 7030 transitions.
[2020-11-24 21:44:05,388 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6194 to 6178.
[2020-11-24 21:44:05,388 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6178 states.
[2020-11-24 21:44:05,395 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6178 states to 6178 states and 7014 transitions.
[2020-11-24 21:44:05,395 INFO  L751         BuchiCegarLoop]: Abstraction has 6178 states and 7014 transitions.
[2020-11-24 21:44:05,395 INFO  L631         BuchiCegarLoop]: Abstraction has 6178 states and 7014 transitions.
[2020-11-24 21:44:05,395 INFO  L445         BuchiCegarLoop]: ======== Iteration 22============
[2020-11-24 21:44:05,395 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6178 states and 7014 transitions.
[2020-11-24 21:44:05,400 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-24 21:44:05,400 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:44:05,400 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:44:05,403 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:44:05,403 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14767]              assume null == 0;
[L14768]  CALL        call this := FreshRefGenerator__success();
[L6697]               havoc newRef;
[L6698]               assume Alloc[newRef] == false;
[L6699]               Alloc[newRef] := true;
[L6700]               assume newRef != null;
[L14768]  RET         call this := FreshRefGenerator__success();
[L14769]              assume now >= 0;
[L14770]              assume DType[this] == MainToken;
[L14771]              assume msgvalue_MSG == 0;
[L14772]              gas := gas - 53000;
[L14773]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4385]               havoc __exception;
[L4386]               revert := false;
[L4387]   COND FALSE  !(__exception)
[L4426]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9506]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9284]               assume msgsender_MSG != null;
[L9285]               Balance[this] := 0;
[L9286]               TOKEN_DECIMALS_Consts[this] := 18;
[L9287]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9288]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9289]               TOKEN_NAME_Consts[this] := -1298559559;
[L9290]               TOKEN_SYMBOL_Consts[this] := 120673937;
[L9291]               PAUSED_Consts[this] := false;
[L9292]               __var_52 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9293]               TARGET_USER_Consts[this] := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9294]               CONTINUE_MINTING_Consts[this] := false;
[L9308]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]   COND FALSE  !(revert)
[L9506]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9507]   COND FALSE  !(revert)
[L9510]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9510]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9511]   COND FALSE  !(revert)
[L9514]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9514]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9515]   COND FALSE  !(revert)
[L9518]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9518]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9519]   COND FALSE  !(revert)
[L9522]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9522]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9523]   COND FALSE  !(revert)
[L9526]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9526]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9527]   COND FALSE  !(revert)
[L9530]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9530]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9534]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9093]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9093]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9094]   COND FALSE  !(revert)
[L9097]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9097]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9098]   COND FALSE  !(revert)
[L9101]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9101]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9102]   COND FALSE  !(revert)
[L9105]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9105]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9106]   COND FALSE  !(revert)
[L9109]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9109]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9110]   COND FALSE  !(revert)
[L9113]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9113]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9114]   COND FALSE  !(revert)
[L9117]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9117]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9050]               assume msgsender_MSG != null;
[L9051]               Balance[this] := 0;
[L9121]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9538]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8837]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L8837]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]   COND FALSE  !(revert)
[L8841]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L8841]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8842]   COND FALSE  !(revert)
[L8845]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8814]               assume msgsender_MSG != null;
[L8815]               Balance[this] := 0;
[L8845]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8846]   COND FALSE  !(revert)
[L9542]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8963]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L8963]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8964]   COND FALSE  !(revert)
[L8967]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8943]               assume msgsender_MSG != null;
[L8944]               Balance[this] := 0;
[L8945]               paused_Pausable[this] := false;
[L8967]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8968]   COND FALSE  !(revert)
[L9546]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9434]               assume msgsender_MSG != null;
[L9435]               Balance[this] := 0;
[L9436]               initialized_MainToken[this] := false;
[L9438]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9754]   COND FALSE  !(!!initialized_MainToken[this])
[L9758]               initialized_MainToken[this] := true;
[L9759]   COND FALSE  !(PAUSED_Consts[this])
[L9769]               __var_57 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9770]               addresses_s1673 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9771]               __var_58 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9772]               amounts_s1673 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9773]               __var_59 := 0 % 18446744073709551616;
[L9774]               freezes_s1673 := 0 % 18446744073709551616;
[L9775]               i_s1673 := 0;
[L9776]   COND TRUE   i_s1673 < Length[addresses_s1673]
[L9778]   COND TRUE   M_int_int[freezes_s1673][i_s1673] == 0
[L9779]   COND TRUE   DType[this] == MainToken
[L9780]   CALL        call __var_60 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, M_int_Ref[addresses_s1673][i_s1673], M_int_int[amounts_s1673][i_s1673]);
[L7531]   CALL        call hasMintPermission_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12753]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7531]   RET         call hasMintPermission_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7532]   COND FALSE  !(revert)
[L7535]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12737]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7535]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7536]   COND FALSE  !(revert)
[L7539]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s664);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L7539]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s664);
[L7540]   COND FALSE  !(revert)
[L7543]               totalSupply__BasicToken[this] := __var_12;
[L7544]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s664], _amount_s664);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L7544]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s664], _amount_s664);
[L7545]   COND FALSE  !(revert)
[L7548]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s664];
[L7549]               balances_BasicToken[this][_to_s664] := __var_13;
[L7550]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s664];
[L7551]               assert { :EventEmitted "Mint_MintableToken" } true;
[L7552]               assert { :EventEmitted "Transfer_MintableToken" } true;
[L7553]               __ret_0_ := true;
[L9780]   RET         call __var_60 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, M_int_Ref[addresses_s1673][i_s1673], M_int_int[amounts_s1673][i_s1673]);
[L9781]   COND FALSE  !(revert)
[L9795]               i_s1673 := (i_s1673 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9796]   COND FALSE  !(gas < 0)
[L9776]   COND FALSE  !(i_s1673 < Length[addresses_s1673])
[L9800]   COND TRUE   !CONTINUE_MINTING_Consts[this]
[L9801]   COND TRUE   DType[this] == MainToken
[L9802]   CALL        call __var_62 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7574]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12721]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7574]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7575]   COND FALSE  !(revert)
[L7578]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12737]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7578]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7579]   COND FALSE  !(revert)
[L7582]               mintingFinished_MintableToken[this] := true;
[L7583]               assert { :EventEmitted "MintFinished_MintableToken" } true;
[L7584]               __ret_0_ := true;
[L9802]   RET         call __var_62 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9803]   COND FALSE  !(revert)
[L9810]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9438]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9439]   COND FALSE  !(revert)
[L9442]   COND TRUE   DType[this] == MainToken
[L9443]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7356]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12721]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7356]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   COND TRUE   DType[this] == MainToken
[L7361]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7404]               __var_11 := null;
[L7405]   COND FALSE  !(!(_newOwner_s581 != null))
[L7409]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7410]               owner_Ownable[this] := _newOwner_s581;
[L7361]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7362]   COND FALSE  !(revert)
[L9443]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9444]   COND FALSE  !(revert)
[L9550]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L4426]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4427]               assume !revert && gas >= 0;
[L14773]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14774]              assume !revert && gas >= 0;
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND FALSE  !(choice == 37)
[L14531]  COND FALSE  !(choice == 36)
[L14538]  COND FALSE  !(choice == 35)
[L14544]  COND FALSE  !(choice == 34)
[L14551]  COND FALSE  !(choice == 33)
[L14558]  COND FALSE  !(choice == 32)
[L14565]  COND FALSE  !(choice == 31)
[L14572]  COND FALSE  !(choice == 30)
[L14578]  COND FALSE  !(choice == 29)
[L14584]  COND FALSE  !(choice == 28)
[L14590]  COND FALSE  !(choice == 27)
[L14596]  COND FALSE  !(choice == 26)
[L14603]  COND FALSE  !(choice == 25)
[L14609]  COND FALSE  !(choice == 24)
[L14615]  COND FALSE  !(choice == 23)
[L14621]  COND FALSE  !(choice == 22)
[L14627]  COND FALSE  !(choice == 21)
[L14634]  COND TRUE   choice == 20
[L14635]              gas := gas - 21000;
[L14636]  COND TRUE   gas >= 0
[L14637]              assume _amount_s938 >= 0 && _amount_s938 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14638]              assume _until_s938 >= 0 && _until_s938 < 18446744073709551616;
[L14639]              assume msgvalue_MSG == 0;
[L14640]  CALL        call freezeTo~address~uint256~uint64_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L2530]               havoc __exception;
[L2531]               revert := false;
[L2532]   COND FALSE  !(__exception)
[L2571]   CALL        call freezeTo~address~uint256~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L8114]               __var_26 := null;
[L8115]   COND FALSE  !(!(_to_s938 != null))
[L8119]   COND FALSE  !(!(_amount_s938 <= balances_BasicToken[this][msgsender_MSG]))
[L8123]   CALL        call __var_27 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _amount_s938);
[L6810]               assert b_s98 <= a_s98;
[L6811]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8123]   RET         call __var_27 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _amount_s938);
[L8124]   COND FALSE  !(revert)
[L8127]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L8128]               balances_BasicToken[this][msgsender_MSG] := __var_27;
[L8129]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L8130]               __var_28 := _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8131]   COND TRUE   DType[this] == MainToken
[L8132]   CALL        call currentKey_s938 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8545]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8547]               havoc result_s1122;
[L8548]               havoc result_s1122;
[L8549]               havoc result_s1122;
[L8550]               havoc result_s1122;
[L8132]   RET         call currentKey_s938 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8133]   COND FALSE  !(revert)
[L8149]               currentKey_s938 := currentKey_s938;
[L8150]   CALL        call __var_29 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s938], _amount_s938);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L8150]   RET         call __var_29 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s938], _amount_s938);
[L8151]   COND FALSE  !(revert)
[L8154]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s938];
[L8155]               freezings_FreezableToken[this][currentKey_s938] := __var_29;
[L8156]               sum_freezings3[this] := sum_freezings3[this] + freezings_FreezableToken[this][currentKey_s938];
[L8157]   CALL        call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s938], _amount_s938);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L8157]   RET         call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s938], _amount_s938);
[L8158]   COND FALSE  !(revert)
[L8161]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][_to_s938];
[L8162]               freezingBalance_FreezableToken[this][_to_s938] := __var_30;
[L8163]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][_to_s938];
[L8164]   COND TRUE   DType[this] == MainToken
[L8165]   CALL        call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938);
[L8689]   COND FALSE  !(!(_until_s1240 > now))
[L8693]               __var_42 := _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8694]   COND FALSE  !(DType[this] == MainToken)
[L8699]   COND FALSE  !(DType[this] == FreezableMintableToken)
[L8704]   COND TRUE   DType[this] == FreezableToken
[L8705]   CALL        call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8545]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8547]               havoc result_s1122;
[L8548]               havoc result_s1122;
[L8549]               havoc result_s1122;
[L8550]               havoc result_s1122;
[L8705]   RET         call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8706]   COND FALSE  !(revert)
[L8712]               key_s1240 := key_s1240;
[L8713]               __var_43 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8714]   COND TRUE   DType[this] == MainToken
[L8715]   CALL        call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8545]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8547]               havoc result_s1122;
[L8548]               havoc result_s1122;
[L8549]               havoc result_s1122;
[L8550]               havoc result_s1122;
[L8715]   RET         call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8716]   COND FALSE  !(revert)
[L8732]               parentKey_s1240 := parentKey_s1240;
[L8733]               next_s1240 := chains_FreezableToken[this][parentKey_s1240];
[L8734]   COND TRUE   next_s1240 == 0
[L8735]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][parentKey_s1240];
[L8736]               chains_FreezableToken[this][parentKey_s1240] := _until_s1240;
[L8737]               sum_chains2[this] := sum_chains2[this] + chains_FreezableToken[this][parentKey_s1240];
[L8165]   RET         call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938);
[L8166]   COND FALSE  !(revert)
[L8182]               assert { :EventEmitted "Transfer_FreezableToken" } true;
[L8183]               assert { :EventEmitted "Freezed_FreezableToken" } true;
[L2571]   RET         call freezeTo~address~uint256~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L2572]               assume !revert && gas >= 0;
[L14640]  RET         call freezeTo~address~uint256~uint64_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L14777]  RET         call CorralChoice_MainToken(this);
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND TRUE   choice == 37
[L14526]              gas := gas - 21000;
[L14527]  COND TRUE   gas >= 0
[L14528]              assume msgvalue_MSG == 0;
[L14529]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7706]   COND TRUE   DType[this] == MainToken
[L7707]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6961]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7707]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7708]   COND FALSE  !(revert)
[L7724]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14529]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14777]  RET         call CorralChoice_MainToken(this);

Loop:
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND TRUE   choice == 37
[L14526]              gas := gas - 21000;
[L14527]  COND TRUE   gas >= 0
[L14528]              assume msgvalue_MSG == 0;
[L14529]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7706]   COND TRUE   DType[this] == MainToken
[L7707]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6961]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7707]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7708]   COND FALSE  !(revert)
[L7724]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14529]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14777]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:44:05,409 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:44:05,410 INFO  L82        PathProgramCache]: Analyzing trace with hash -284361919, now seen corresponding path program 1 times
[2020-11-24 21:44:05,410 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:44:05,440 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:44:06,082 INFO  L134       CoverageAnalysis]: Checked inductivity of 9970 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 9969 trivial. 0 not checked.
[2020-11-24 21:44:06,082 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:44:06,082 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 21:44:06,083 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:44:06,083 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 21:44:06,083 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 21:44:06,083 INFO  L87              Difference]: Start difference. First operand 6178 states and 7014 transitions. cyclomatic complexity: 867 Second operand 3 states.
[2020-11-24 21:44:06,132 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:44:06,133 INFO  L93              Difference]: Finished difference Result 6223 states and 7078 transitions.
[2020-11-24 21:44:06,133 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 21:44:06,133 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6223 states and 7078 transitions.
[2020-11-24 21:44:06,143 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-24 21:44:06,154 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6223 states to 6223 states and 7078 transitions.
[2020-11-24 21:44:06,154 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1139
[2020-11-24 21:44:06,154 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1139
[2020-11-24 21:44:06,154 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6223 states and 7078 transitions.
[2020-11-24 21:44:06,157 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:44:06,157 INFO  L728         BuchiCegarLoop]: Abstraction has 6223 states and 7078 transitions.
[2020-11-24 21:44:06,161 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6223 states and 7078 transitions.
[2020-11-24 21:44:06,185 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6223 to 6178.
[2020-11-24 21:44:06,185 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6178 states.
[2020-11-24 21:44:06,192 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6178 states to 6178 states and 7005 transitions.
[2020-11-24 21:44:06,192 INFO  L751         BuchiCegarLoop]: Abstraction has 6178 states and 7005 transitions.
[2020-11-24 21:44:06,192 INFO  L631         BuchiCegarLoop]: Abstraction has 6178 states and 7005 transitions.
[2020-11-24 21:44:06,192 INFO  L445         BuchiCegarLoop]: ======== Iteration 23============
[2020-11-24 21:44:06,192 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6178 states and 7005 transitions.
[2020-11-24 21:44:06,198 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-24 21:44:06,198 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:44:06,198 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:44:06,200 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:44:06,200 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14767]              assume null == 0;
[L14768]  CALL        call this := FreshRefGenerator__success();
[L6697]               havoc newRef;
[L6698]               assume Alloc[newRef] == false;
[L6699]               Alloc[newRef] := true;
[L6700]               assume newRef != null;
[L14768]  RET         call this := FreshRefGenerator__success();
[L14769]              assume now >= 0;
[L14770]              assume DType[this] == MainToken;
[L14771]              assume msgvalue_MSG == 0;
[L14772]              gas := gas - 53000;
[L14773]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4385]               havoc __exception;
[L4386]               revert := false;
[L4387]   COND FALSE  !(__exception)
[L4426]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9506]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9284]               assume msgsender_MSG != null;
[L9285]               Balance[this] := 0;
[L9286]               TOKEN_DECIMALS_Consts[this] := 18;
[L9287]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9288]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9289]               TOKEN_NAME_Consts[this] := -1298559559;
[L9290]               TOKEN_SYMBOL_Consts[this] := 120673937;
[L9291]               PAUSED_Consts[this] := false;
[L9292]               __var_52 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9293]               TARGET_USER_Consts[this] := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9294]               CONTINUE_MINTING_Consts[this] := false;
[L9308]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]   COND FALSE  !(revert)
[L9506]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9507]   COND FALSE  !(revert)
[L9510]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9510]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9511]   COND FALSE  !(revert)
[L9514]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9514]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9515]   COND FALSE  !(revert)
[L9518]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9518]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9519]   COND FALSE  !(revert)
[L9522]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9522]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9523]   COND FALSE  !(revert)
[L9526]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9526]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9527]   COND FALSE  !(revert)
[L9530]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9530]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9534]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9093]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9093]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9094]   COND FALSE  !(revert)
[L9097]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9097]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9098]   COND FALSE  !(revert)
[L9101]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9101]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9102]   COND FALSE  !(revert)
[L9105]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9105]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9106]   COND FALSE  !(revert)
[L9109]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9109]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9110]   COND FALSE  !(revert)
[L9113]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9113]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9114]   COND FALSE  !(revert)
[L9117]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9117]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9050]               assume msgsender_MSG != null;
[L9051]               Balance[this] := 0;
[L9121]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9538]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8837]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L8837]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]   COND FALSE  !(revert)
[L8841]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L8841]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8842]   COND FALSE  !(revert)
[L8845]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8814]               assume msgsender_MSG != null;
[L8815]               Balance[this] := 0;
[L8845]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8846]   COND FALSE  !(revert)
[L9542]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8963]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L8963]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8964]   COND FALSE  !(revert)
[L8967]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8943]               assume msgsender_MSG != null;
[L8944]               Balance[this] := 0;
[L8945]               paused_Pausable[this] := false;
[L8967]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8968]   COND FALSE  !(revert)
[L9546]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9434]               assume msgsender_MSG != null;
[L9435]               Balance[this] := 0;
[L9436]               initialized_MainToken[this] := false;
[L9438]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9754]   COND FALSE  !(!!initialized_MainToken[this])
[L9758]               initialized_MainToken[this] := true;
[L9759]   COND FALSE  !(PAUSED_Consts[this])
[L9769]               __var_57 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9770]               addresses_s1673 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9771]               __var_58 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9772]               amounts_s1673 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9773]               __var_59 := 0 % 18446744073709551616;
[L9774]               freezes_s1673 := 0 % 18446744073709551616;
[L9775]               i_s1673 := 0;
[L9776]   COND TRUE   i_s1673 < Length[addresses_s1673]
[L9778]   COND TRUE   M_int_int[freezes_s1673][i_s1673] == 0
[L9779]   COND TRUE   DType[this] == MainToken
[L9780]   CALL        call __var_60 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, M_int_Ref[addresses_s1673][i_s1673], M_int_int[amounts_s1673][i_s1673]);
[L7531]   CALL        call hasMintPermission_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12753]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7531]   RET         call hasMintPermission_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7532]   COND FALSE  !(revert)
[L7535]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12737]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7535]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7536]   COND FALSE  !(revert)
[L7539]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s664);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L7539]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s664);
[L7540]   COND FALSE  !(revert)
[L7543]               totalSupply__BasicToken[this] := __var_12;
[L7544]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s664], _amount_s664);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L7544]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s664], _amount_s664);
[L7545]   COND FALSE  !(revert)
[L7548]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s664];
[L7549]               balances_BasicToken[this][_to_s664] := __var_13;
[L7550]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s664];
[L7551]               assert { :EventEmitted "Mint_MintableToken" } true;
[L7552]               assert { :EventEmitted "Transfer_MintableToken" } true;
[L7553]               __ret_0_ := true;
[L9780]   RET         call __var_60 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, M_int_Ref[addresses_s1673][i_s1673], M_int_int[amounts_s1673][i_s1673]);
[L9781]   COND FALSE  !(revert)
[L9795]               i_s1673 := (i_s1673 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9796]   COND FALSE  !(gas < 0)
[L9776]   COND FALSE  !(i_s1673 < Length[addresses_s1673])
[L9800]   COND TRUE   !CONTINUE_MINTING_Consts[this]
[L9801]   COND TRUE   DType[this] == MainToken
[L9802]   CALL        call __var_62 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7574]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12721]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7574]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7575]   COND FALSE  !(revert)
[L7578]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12737]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7578]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7579]   COND FALSE  !(revert)
[L7582]               mintingFinished_MintableToken[this] := true;
[L7583]               assert { :EventEmitted "MintFinished_MintableToken" } true;
[L7584]               __ret_0_ := true;
[L9802]   RET         call __var_62 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9803]   COND FALSE  !(revert)
[L9810]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9438]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9439]   COND FALSE  !(revert)
[L9442]   COND TRUE   DType[this] == MainToken
[L9443]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7356]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12721]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7356]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   COND TRUE   DType[this] == MainToken
[L7361]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7404]               __var_11 := null;
[L7405]   COND FALSE  !(!(_newOwner_s581 != null))
[L7409]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7410]               owner_Ownable[this] := _newOwner_s581;
[L7361]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7362]   COND FALSE  !(revert)
[L9443]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9444]   COND FALSE  !(revert)
[L9550]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L4426]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4427]               assume !revert && gas >= 0;
[L14773]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14774]              assume !revert && gas >= 0;
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND FALSE  !(choice == 37)
[L14531]  COND FALSE  !(choice == 36)
[L14538]  COND FALSE  !(choice == 35)
[L14544]  COND FALSE  !(choice == 34)
[L14551]  COND FALSE  !(choice == 33)
[L14558]  COND FALSE  !(choice == 32)
[L14565]  COND FALSE  !(choice == 31)
[L14572]  COND FALSE  !(choice == 30)
[L14578]  COND FALSE  !(choice == 29)
[L14584]  COND FALSE  !(choice == 28)
[L14590]  COND FALSE  !(choice == 27)
[L14596]  COND FALSE  !(choice == 26)
[L14603]  COND FALSE  !(choice == 25)
[L14609]  COND FALSE  !(choice == 24)
[L14615]  COND FALSE  !(choice == 23)
[L14621]  COND FALSE  !(choice == 22)
[L14627]  COND FALSE  !(choice == 21)
[L14634]  COND TRUE   choice == 20
[L14635]              gas := gas - 21000;
[L14636]  COND TRUE   gas >= 0
[L14637]              assume _amount_s938 >= 0 && _amount_s938 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14638]              assume _until_s938 >= 0 && _until_s938 < 18446744073709551616;
[L14639]              assume msgvalue_MSG == 0;
[L14640]  CALL        call freezeTo~address~uint256~uint64_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L2530]               havoc __exception;
[L2531]               revert := false;
[L2532]   COND FALSE  !(__exception)
[L2571]   CALL        call freezeTo~address~uint256~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L8114]               __var_26 := null;
[L8115]   COND FALSE  !(!(_to_s938 != null))
[L8119]   COND FALSE  !(!(_amount_s938 <= balances_BasicToken[this][msgsender_MSG]))
[L8123]   CALL        call __var_27 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _amount_s938);
[L6810]               assert b_s98 <= a_s98;
[L6811]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8123]   RET         call __var_27 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _amount_s938);
[L8124]   COND FALSE  !(revert)
[L8127]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L8128]               balances_BasicToken[this][msgsender_MSG] := __var_27;
[L8129]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L8130]               __var_28 := _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8131]   COND FALSE  !(DType[this] == MainToken)
[L8136]   COND FALSE  !(DType[this] == FreezableMintableToken)
[L8141]   COND TRUE   DType[this] == FreezableToken
[L8142]   CALL        call currentKey_s938 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8545]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8547]               havoc result_s1122;
[L8548]               havoc result_s1122;
[L8549]               havoc result_s1122;
[L8550]               havoc result_s1122;
[L8142]   RET         call currentKey_s938 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8143]   COND FALSE  !(revert)
[L8149]               currentKey_s938 := currentKey_s938;
[L8150]   CALL        call __var_29 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s938], _amount_s938);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L8150]   RET         call __var_29 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s938], _amount_s938);
[L8151]   COND FALSE  !(revert)
[L8154]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s938];
[L8155]               freezings_FreezableToken[this][currentKey_s938] := __var_29;
[L8156]               sum_freezings3[this] := sum_freezings3[this] + freezings_FreezableToken[this][currentKey_s938];
[L8157]   CALL        call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s938], _amount_s938);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L8157]   RET         call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s938], _amount_s938);
[L8158]   COND FALSE  !(revert)
[L8161]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][_to_s938];
[L8162]               freezingBalance_FreezableToken[this][_to_s938] := __var_30;
[L8163]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][_to_s938];
[L8164]   COND FALSE  !(DType[this] == MainToken)
[L8169]   COND FALSE  !(DType[this] == FreezableMintableToken)
[L8174]   COND TRUE   DType[this] == FreezableToken
[L8175]   CALL        call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938);
[L8689]   COND FALSE  !(!(_until_s1240 > now))
[L8693]               __var_42 := _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8694]   COND TRUE   DType[this] == MainToken
[L8695]   CALL        call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8545]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8547]               havoc result_s1122;
[L8548]               havoc result_s1122;
[L8549]               havoc result_s1122;
[L8550]               havoc result_s1122;
[L8695]   RET         call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8696]   COND FALSE  !(revert)
[L8712]               key_s1240 := key_s1240;
[L8713]               __var_43 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8714]   COND TRUE   DType[this] == MainToken
[L8715]   CALL        call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8545]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8547]               havoc result_s1122;
[L8548]               havoc result_s1122;
[L8549]               havoc result_s1122;
[L8550]               havoc result_s1122;
[L8715]   RET         call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8716]   COND FALSE  !(revert)
[L8732]               parentKey_s1240 := parentKey_s1240;
[L8733]               next_s1240 := chains_FreezableToken[this][parentKey_s1240];
[L8734]   COND TRUE   next_s1240 == 0
[L8735]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][parentKey_s1240];
[L8736]               chains_FreezableToken[this][parentKey_s1240] := _until_s1240;
[L8737]               sum_chains2[this] := sum_chains2[this] + chains_FreezableToken[this][parentKey_s1240];
[L8175]   RET         call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938);
[L8176]   COND FALSE  !(revert)
[L8182]               assert { :EventEmitted "Transfer_FreezableToken" } true;
[L8183]               assert { :EventEmitted "Freezed_FreezableToken" } true;
[L2571]   RET         call freezeTo~address~uint256~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L2572]               assume !revert && gas >= 0;
[L14640]  RET         call freezeTo~address~uint256~uint64_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L14777]  RET         call CorralChoice_MainToken(this);
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND TRUE   choice == 37
[L14526]              gas := gas - 21000;
[L14527]  COND TRUE   gas >= 0
[L14528]              assume msgvalue_MSG == 0;
[L14529]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7706]   COND TRUE   DType[this] == MainToken
[L7707]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6961]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7707]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7708]   COND FALSE  !(revert)
[L7724]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14529]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14777]  RET         call CorralChoice_MainToken(this);

Loop:
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND FALSE  !(choice == 37)
[L14531]  COND FALSE  !(choice == 36)
[L14538]  COND FALSE  !(choice == 35)
[L14544]  COND FALSE  !(choice == 34)
[L14551]  COND FALSE  !(choice == 33)
[L14558]  COND FALSE  !(choice == 32)
[L14565]  COND FALSE  !(choice == 31)
[L14572]  COND FALSE  !(choice == 30)
[L14578]  COND FALSE  !(choice == 29)
[L14584]  COND FALSE  !(choice == 28)
[L14590]  COND FALSE  !(choice == 27)
[L14596]  COND FALSE  !(choice == 26)
[L14603]  COND FALSE  !(choice == 25)
[L14609]  COND FALSE  !(choice == 24)
[L14615]  COND FALSE  !(choice == 23)
[L14621]  COND FALSE  !(choice == 22)
[L14627]  COND FALSE  !(choice == 21)
[L14634]  COND FALSE  !(choice == 20)
[L14642]  COND TRUE   choice == 19
[L14643]              gas := gas - 21000;
[L14644]  COND TRUE   gas >= 0
[L14645]              assume msgvalue_MSG == 0;
[L14646]  CALL        call releaseOnce_FreezableToken(this, msgsender_MSG, msgvalue_MSG);
[L2624]               havoc __exception;
[L2625]               revert := false;
[L2626]   COND FALSE  !(__exception)
[L2665]   CALL        call releaseOnce_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8290]               __var_31 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8291]   COND FALSE  !(DType[this] == MainToken)
[L8296]   COND FALSE  !(DType[this] == FreezableMintableToken)
[L8301]   COND TRUE   DType[this] == FreezableToken
[L8302]   CALL        call headKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8545]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8547]               havoc result_s1122;
[L8548]               havoc result_s1122;
[L8549]               havoc result_s1122;
[L8550]               havoc result_s1122;
[L8302]   RET         call headKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8303]   COND FALSE  !(revert)
[L8309]               headKey_s1054 := headKey_s1054;
[L8310]               head_s1054 := chains_FreezableToken[this][headKey_s1054];
[L8311]   COND FALSE  !(!(head_s1054 != 0))
[L8315]               __var_32 := now % 18446744073709551616;
[L8316]   COND FALSE  !(!(now % 18446744073709551616 > head_s1054))
[L8320]               __var_33 := head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8321]   COND FALSE  !(DType[this] == MainToken)
[L8326]   COND FALSE  !(DType[this] == FreezableMintableToken)
[L8331]   COND TRUE   DType[this] == FreezableToken
[L8332]   CALL        call currentKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8545]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8547]               havoc result_s1122;
[L8548]               havoc result_s1122;
[L8549]               havoc result_s1122;
[L8550]               havoc result_s1122;
[L8332]   RET         call currentKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8333]   COND FALSE  !(revert)
[L8339]               currentKey_s1054 := currentKey_s1054;
[L8340]               next_s1054 := chains_FreezableToken[this][currentKey_s1054];
[L8341]               amount_s1054 := freezings_FreezableToken[this][currentKey_s1054];
[L8342]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s1054];
[L8343]               freezings_FreezableToken[this][currentKey_s1054] := 0;
[L8344]   CALL        call __var_34 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], amount_s1054);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L8344]   RET         call __var_34 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], amount_s1054);
[L8345]   COND FALSE  !(revert)
[L8348]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L8349]               balances_BasicToken[this][msgsender_MSG] := __var_34;
[L8350]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L8351]   CALL        call __var_35 := sub~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][msgsender_MSG], amount_s1054);
[L6810]               assert b_s98 <= a_s98;
[L6811]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8351]   RET         call __var_35 := sub~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][msgsender_MSG], amount_s1054);
[L8352]   COND FALSE  !(revert)
[L8355]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][msgsender_MSG];
[L8356]               freezingBalance_FreezableToken[this][msgsender_MSG] := __var_35;
[L8357]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][msgsender_MSG];
[L8358]   COND TRUE   next_s1054 == 0
[L8359]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][headKey_s1054];
[L8360]               chains_FreezableToken[this][headKey_s1054] := 0;
[L8368]               assert { :EventEmitted "Released_FreezableToken" } true;
[L2665]   RET         call releaseOnce_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2666]               assume !revert && gas >= 0;
[L14646]  RET         call releaseOnce_FreezableToken(this, msgsender_MSG, msgvalue_MSG);
[L14777]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:44:06,207 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:44:06,207 INFO  L82        PathProgramCache]: Analyzing trace with hash -1894388706, now seen corresponding path program 1 times
[2020-11-24 21:44:06,208 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:44:06,238 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:44:06,876 INFO  L134       CoverageAnalysis]: Checked inductivity of 9970 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 9969 trivial. 0 not checked.
[2020-11-24 21:44:06,876 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:44:06,876 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-24 21:44:06,877 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:44:06,877 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-24 21:44:06,877 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-24 21:44:06,877 INFO  L87              Difference]: Start difference. First operand 6178 states and 7005 transitions. cyclomatic complexity: 858 Second operand 6 states.
[2020-11-24 21:44:06,985 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:44:06,985 INFO  L93              Difference]: Finished difference Result 6222 states and 7045 transitions.
[2020-11-24 21:44:06,985 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-24 21:44:06,985 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6222 states and 7045 transitions.
[2020-11-24 21:44:06,996 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-24 21:44:07,006 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6222 states to 6102 states and 6907 transitions.
[2020-11-24 21:44:07,006 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1116
[2020-11-24 21:44:07,007 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1116
[2020-11-24 21:44:07,007 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6102 states and 6907 transitions.
[2020-11-24 21:44:07,010 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:44:07,010 INFO  L728         BuchiCegarLoop]: Abstraction has 6102 states and 6907 transitions.
[2020-11-24 21:44:07,014 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6102 states and 6907 transitions.
[2020-11-24 21:44:07,037 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6102 to 6102.
[2020-11-24 21:44:07,037 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6102 states.
[2020-11-24 21:44:07,044 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6102 states to 6102 states and 6907 transitions.
[2020-11-24 21:44:07,045 INFO  L751         BuchiCegarLoop]: Abstraction has 6102 states and 6907 transitions.
[2020-11-24 21:44:07,045 INFO  L631         BuchiCegarLoop]: Abstraction has 6102 states and 6907 transitions.
[2020-11-24 21:44:07,045 INFO  L445         BuchiCegarLoop]: ======== Iteration 24============
[2020-11-24 21:44:07,045 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6102 states and 6907 transitions.
[2020-11-24 21:44:07,050 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-24 21:44:07,050 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:44:07,050 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:44:07,052 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:44:07,052 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14767]              assume null == 0;
[L14768]  CALL        call this := FreshRefGenerator__success();
[L6697]               havoc newRef;
[L6698]               assume Alloc[newRef] == false;
[L6699]               Alloc[newRef] := true;
[L6700]               assume newRef != null;
[L14768]  RET         call this := FreshRefGenerator__success();
[L14769]              assume now >= 0;
[L14770]              assume DType[this] == MainToken;
[L14771]              assume msgvalue_MSG == 0;
[L14772]              gas := gas - 53000;
[L14773]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4385]               havoc __exception;
[L4386]               revert := false;
[L4387]   COND FALSE  !(__exception)
[L4426]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9506]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9284]               assume msgsender_MSG != null;
[L9285]               Balance[this] := 0;
[L9286]               TOKEN_DECIMALS_Consts[this] := 18;
[L9287]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9288]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9289]               TOKEN_NAME_Consts[this] := -1298559559;
[L9290]               TOKEN_SYMBOL_Consts[this] := 120673937;
[L9291]               PAUSED_Consts[this] := false;
[L9292]               __var_52 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9293]               TARGET_USER_Consts[this] := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9294]               CONTINUE_MINTING_Consts[this] := false;
[L9308]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]   COND FALSE  !(revert)
[L9506]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9507]   COND FALSE  !(revert)
[L9510]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9510]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9511]   COND FALSE  !(revert)
[L9514]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9514]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9515]   COND FALSE  !(revert)
[L9518]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9518]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9519]   COND FALSE  !(revert)
[L9522]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9522]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9523]   COND FALSE  !(revert)
[L9526]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9526]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9527]   COND FALSE  !(revert)
[L9530]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9530]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9534]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9093]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9093]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9094]   COND FALSE  !(revert)
[L9097]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9097]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9098]   COND FALSE  !(revert)
[L9101]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9101]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9102]   COND FALSE  !(revert)
[L9105]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9105]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9106]   COND FALSE  !(revert)
[L9109]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9109]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9110]   COND FALSE  !(revert)
[L9113]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9113]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9114]   COND FALSE  !(revert)
[L9117]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9117]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9050]               assume msgsender_MSG != null;
[L9051]               Balance[this] := 0;
[L9121]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9538]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8837]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L8837]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]   COND FALSE  !(revert)
[L8841]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L8841]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8842]   COND FALSE  !(revert)
[L8845]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8814]               assume msgsender_MSG != null;
[L8815]               Balance[this] := 0;
[L8845]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8846]   COND FALSE  !(revert)
[L9542]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8963]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L8963]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8964]   COND FALSE  !(revert)
[L8967]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8943]               assume msgsender_MSG != null;
[L8944]               Balance[this] := 0;
[L8945]               paused_Pausable[this] := false;
[L8967]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8968]   COND FALSE  !(revert)
[L9546]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9434]               assume msgsender_MSG != null;
[L9435]               Balance[this] := 0;
[L9436]               initialized_MainToken[this] := false;
[L9438]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9754]   COND FALSE  !(!!initialized_MainToken[this])
[L9758]               initialized_MainToken[this] := true;
[L9759]   COND FALSE  !(PAUSED_Consts[this])
[L9769]               __var_57 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9770]               addresses_s1673 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9771]               __var_58 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9772]               amounts_s1673 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9773]               __var_59 := 0 % 18446744073709551616;
[L9774]               freezes_s1673 := 0 % 18446744073709551616;
[L9775]               i_s1673 := 0;
[L9776]   COND TRUE   i_s1673 < Length[addresses_s1673]
[L9778]   COND TRUE   M_int_int[freezes_s1673][i_s1673] == 0
[L9779]   COND TRUE   DType[this] == MainToken
[L9780]   CALL        call __var_60 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, M_int_Ref[addresses_s1673][i_s1673], M_int_int[amounts_s1673][i_s1673]);
[L7531]   CALL        call hasMintPermission_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12753]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7531]   RET         call hasMintPermission_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7532]   COND FALSE  !(revert)
[L7535]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12737]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7535]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7536]   COND FALSE  !(revert)
[L7539]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s664);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L7539]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s664);
[L7540]   COND FALSE  !(revert)
[L7543]               totalSupply__BasicToken[this] := __var_12;
[L7544]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s664], _amount_s664);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L7544]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s664], _amount_s664);
[L7545]   COND FALSE  !(revert)
[L7548]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s664];
[L7549]               balances_BasicToken[this][_to_s664] := __var_13;
[L7550]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s664];
[L7551]               assert { :EventEmitted "Mint_MintableToken" } true;
[L7552]               assert { :EventEmitted "Transfer_MintableToken" } true;
[L7553]               __ret_0_ := true;
[L9780]   RET         call __var_60 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, M_int_Ref[addresses_s1673][i_s1673], M_int_int[amounts_s1673][i_s1673]);
[L9781]   COND FALSE  !(revert)
[L9795]               i_s1673 := (i_s1673 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9796]   COND FALSE  !(gas < 0)
[L9776]   COND FALSE  !(i_s1673 < Length[addresses_s1673])
[L9800]   COND TRUE   !CONTINUE_MINTING_Consts[this]
[L9801]   COND TRUE   DType[this] == MainToken
[L9802]   CALL        call __var_62 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7574]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12721]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7574]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7575]   COND FALSE  !(revert)
[L7578]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12737]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7578]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7579]   COND FALSE  !(revert)
[L7582]               mintingFinished_MintableToken[this] := true;
[L7583]               assert { :EventEmitted "MintFinished_MintableToken" } true;
[L7584]               __ret_0_ := true;
[L9802]   RET         call __var_62 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9803]   COND FALSE  !(revert)
[L9810]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9438]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9439]   COND FALSE  !(revert)
[L9442]   COND TRUE   DType[this] == MainToken
[L9443]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7356]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12721]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7356]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   COND TRUE   DType[this] == MainToken
[L7361]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7404]               __var_11 := null;
[L7405]   COND FALSE  !(!(_newOwner_s581 != null))
[L7409]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7410]               owner_Ownable[this] := _newOwner_s581;
[L7361]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7362]   COND FALSE  !(revert)
[L9443]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9444]   COND FALSE  !(revert)
[L9550]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L4426]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4427]               assume !revert && gas >= 0;
[L14773]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14774]              assume !revert && gas >= 0;
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND FALSE  !(choice == 37)
[L14531]  COND FALSE  !(choice == 36)
[L14538]  COND FALSE  !(choice == 35)
[L14544]  COND FALSE  !(choice == 34)
[L14551]  COND FALSE  !(choice == 33)
[L14558]  COND FALSE  !(choice == 32)
[L14565]  COND FALSE  !(choice == 31)
[L14572]  COND FALSE  !(choice == 30)
[L14578]  COND FALSE  !(choice == 29)
[L14584]  COND FALSE  !(choice == 28)
[L14590]  COND FALSE  !(choice == 27)
[L14596]  COND FALSE  !(choice == 26)
[L14603]  COND FALSE  !(choice == 25)
[L14609]  COND FALSE  !(choice == 24)
[L14615]  COND FALSE  !(choice == 23)
[L14621]  COND FALSE  !(choice == 22)
[L14627]  COND FALSE  !(choice == 21)
[L14634]  COND TRUE   choice == 20
[L14635]              gas := gas - 21000;
[L14636]  COND TRUE   gas >= 0
[L14637]              assume _amount_s938 >= 0 && _amount_s938 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14638]              assume _until_s938 >= 0 && _until_s938 < 18446744073709551616;
[L14639]              assume msgvalue_MSG == 0;
[L14640]  CALL        call freezeTo~address~uint256~uint64_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L2530]               havoc __exception;
[L2531]               revert := false;
[L2532]   COND FALSE  !(__exception)
[L2571]   CALL        call freezeTo~address~uint256~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L8114]               __var_26 := null;
[L8115]   COND FALSE  !(!(_to_s938 != null))
[L8119]   COND FALSE  !(!(_amount_s938 <= balances_BasicToken[this][msgsender_MSG]))
[L8123]   CALL        call __var_27 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _amount_s938);
[L6810]               assert b_s98 <= a_s98;
[L6811]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8123]   RET         call __var_27 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _amount_s938);
[L8124]   COND FALSE  !(revert)
[L8127]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L8128]               balances_BasicToken[this][msgsender_MSG] := __var_27;
[L8129]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L8130]               __var_28 := _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8131]   COND TRUE   DType[this] == MainToken
[L8132]   CALL        call currentKey_s938 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8545]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8547]               havoc result_s1122;
[L8548]               havoc result_s1122;
[L8549]               havoc result_s1122;
[L8550]               havoc result_s1122;
[L8132]   RET         call currentKey_s938 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8133]   COND FALSE  !(revert)
[L8149]               currentKey_s938 := currentKey_s938;
[L8150]   CALL        call __var_29 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s938], _amount_s938);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L8150]   RET         call __var_29 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s938], _amount_s938);
[L8151]   COND FALSE  !(revert)
[L8154]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s938];
[L8155]               freezings_FreezableToken[this][currentKey_s938] := __var_29;
[L8156]               sum_freezings3[this] := sum_freezings3[this] + freezings_FreezableToken[this][currentKey_s938];
[L8157]   CALL        call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s938], _amount_s938);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L8157]   RET         call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s938], _amount_s938);
[L8158]   COND FALSE  !(revert)
[L8161]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][_to_s938];
[L8162]               freezingBalance_FreezableToken[this][_to_s938] := __var_30;
[L8163]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][_to_s938];
[L8164]   COND TRUE   DType[this] == MainToken
[L8165]   CALL        call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938);
[L8689]   COND FALSE  !(!(_until_s1240 > now))
[L8693]               __var_42 := _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8694]   COND FALSE  !(DType[this] == MainToken)
[L8699]   COND FALSE  !(DType[this] == FreezableMintableToken)
[L8704]   COND TRUE   DType[this] == FreezableToken
[L8705]   CALL        call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8545]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8547]               havoc result_s1122;
[L8548]               havoc result_s1122;
[L8549]               havoc result_s1122;
[L8550]               havoc result_s1122;
[L8705]   RET         call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8706]   COND FALSE  !(revert)
[L8712]               key_s1240 := key_s1240;
[L8713]               __var_43 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8714]   COND FALSE  !(DType[this] == MainToken)
[L8719]   COND FALSE  !(DType[this] == FreezableMintableToken)
[L8724]   COND TRUE   DType[this] == FreezableToken
[L8725]   CALL        call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8545]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8547]               havoc result_s1122;
[L8548]               havoc result_s1122;
[L8549]               havoc result_s1122;
[L8550]               havoc result_s1122;
[L8725]   RET         call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8726]   COND FALSE  !(revert)
[L8732]               parentKey_s1240 := parentKey_s1240;
[L8733]               next_s1240 := chains_FreezableToken[this][parentKey_s1240];
[L8734]   COND TRUE   next_s1240 == 0
[L8735]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][parentKey_s1240];
[L8736]               chains_FreezableToken[this][parentKey_s1240] := _until_s1240;
[L8737]               sum_chains2[this] := sum_chains2[this] + chains_FreezableToken[this][parentKey_s1240];
[L8165]   RET         call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938);
[L8166]   COND FALSE  !(revert)
[L8182]               assert { :EventEmitted "Transfer_FreezableToken" } true;
[L8183]               assert { :EventEmitted "Freezed_FreezableToken" } true;
[L2571]   RET         call freezeTo~address~uint256~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L2572]               assume !revert && gas >= 0;
[L14640]  RET         call freezeTo~address~uint256~uint64_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L14777]  RET         call CorralChoice_MainToken(this);
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND TRUE   choice == 37
[L14526]              gas := gas - 21000;
[L14527]  COND TRUE   gas >= 0
[L14528]              assume msgvalue_MSG == 0;
[L14529]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7706]   COND TRUE   DType[this] == MainToken
[L7707]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6961]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7707]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7708]   COND FALSE  !(revert)
[L7724]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14529]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14777]  RET         call CorralChoice_MainToken(this);

Loop:
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND TRUE   choice == 38
[L14520]              gas := gas - 21000;
[L14521]  COND FALSE  !(gas >= 0)
[L14777]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:44:07,058 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:44:07,059 INFO  L82        PathProgramCache]: Analyzing trace with hash -143699884, now seen corresponding path program 1 times
[2020-11-24 21:44:07,060 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:44:07,089 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:44:07,716 INFO  L134       CoverageAnalysis]: Checked inductivity of 9970 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 9969 trivial. 0 not checked.
[2020-11-24 21:44:07,716 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:44:07,717 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-24 21:44:07,717 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:44:07,717 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 21:44:07,717 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-24 21:44:07,718 INFO  L87              Difference]: Start difference. First operand 6102 states and 6907 transitions. cyclomatic complexity: 836 Second operand 7 states.
[2020-11-24 21:44:07,876 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:44:07,876 INFO  L93              Difference]: Finished difference Result 6199 states and 7020 transitions.
[2020-11-24 21:44:07,876 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 21:44:07,876 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6199 states and 7020 transitions.
[2020-11-24 21:44:07,890 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-24 21:44:07,903 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6199 states to 6147 states and 6968 transitions.
[2020-11-24 21:44:07,903 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1131
[2020-11-24 21:44:07,903 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1131
[2020-11-24 21:44:07,904 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6147 states and 6968 transitions.
[2020-11-24 21:44:07,907 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:44:07,907 INFO  L728         BuchiCegarLoop]: Abstraction has 6147 states and 6968 transitions.
[2020-11-24 21:44:07,919 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6147 states and 6968 transitions.
[2020-11-24 21:44:07,982 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6147 to 6132.
[2020-11-24 21:44:07,982 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6132 states.
[2020-11-24 21:44:07,993 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6132 states to 6132 states and 6949 transitions.
[2020-11-24 21:44:07,993 INFO  L751         BuchiCegarLoop]: Abstraction has 6132 states and 6949 transitions.
[2020-11-24 21:44:07,993 INFO  L631         BuchiCegarLoop]: Abstraction has 6132 states and 6949 transitions.
[2020-11-24 21:44:07,993 INFO  L445         BuchiCegarLoop]: ======== Iteration 25============
[2020-11-24 21:44:07,993 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6132 states and 6949 transitions.
[2020-11-24 21:44:08,001 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-24 21:44:08,001 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:44:08,001 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:44:08,005 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:44:08,005 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14767]              assume null == 0;
[L14768]  CALL        call this := FreshRefGenerator__success();
[L6697]               havoc newRef;
[L6698]               assume Alloc[newRef] == false;
[L6699]               Alloc[newRef] := true;
[L6700]               assume newRef != null;
[L14768]  RET         call this := FreshRefGenerator__success();
[L14769]              assume now >= 0;
[L14770]              assume DType[this] == MainToken;
[L14771]              assume msgvalue_MSG == 0;
[L14772]              gas := gas - 53000;
[L14773]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4385]               havoc __exception;
[L4386]               revert := false;
[L4387]   COND FALSE  !(__exception)
[L4426]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9506]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9284]               assume msgsender_MSG != null;
[L9285]               Balance[this] := 0;
[L9286]               TOKEN_DECIMALS_Consts[this] := 18;
[L9287]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9288]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9289]               TOKEN_NAME_Consts[this] := -1298559559;
[L9290]               TOKEN_SYMBOL_Consts[this] := 120673937;
[L9291]               PAUSED_Consts[this] := false;
[L9292]               __var_52 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9293]               TARGET_USER_Consts[this] := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9294]               CONTINUE_MINTING_Consts[this] := false;
[L9308]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]   COND FALSE  !(revert)
[L9506]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9507]   COND FALSE  !(revert)
[L9510]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9510]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9511]   COND FALSE  !(revert)
[L9514]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9514]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9515]   COND FALSE  !(revert)
[L9518]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9518]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9519]   COND FALSE  !(revert)
[L9522]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9522]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9523]   COND FALSE  !(revert)
[L9526]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9526]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9527]   COND FALSE  !(revert)
[L9530]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9530]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9534]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9093]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9093]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9094]   COND FALSE  !(revert)
[L9097]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9097]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9098]   COND FALSE  !(revert)
[L9101]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9101]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9102]   COND FALSE  !(revert)
[L9105]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9105]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9106]   COND FALSE  !(revert)
[L9109]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9109]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9110]   COND FALSE  !(revert)
[L9113]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9113]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9114]   COND FALSE  !(revert)
[L9117]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9117]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9050]               assume msgsender_MSG != null;
[L9051]               Balance[this] := 0;
[L9121]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9538]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8837]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L8837]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]   COND FALSE  !(revert)
[L8841]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L8841]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8842]   COND FALSE  !(revert)
[L8845]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8814]               assume msgsender_MSG != null;
[L8815]               Balance[this] := 0;
[L8845]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8846]   COND FALSE  !(revert)
[L9542]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8963]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L8963]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8964]   COND FALSE  !(revert)
[L8967]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8943]               assume msgsender_MSG != null;
[L8944]               Balance[this] := 0;
[L8945]               paused_Pausable[this] := false;
[L8967]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8968]   COND FALSE  !(revert)
[L9546]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9434]               assume msgsender_MSG != null;
[L9435]               Balance[this] := 0;
[L9436]               initialized_MainToken[this] := false;
[L9438]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9754]   COND FALSE  !(!!initialized_MainToken[this])
[L9758]               initialized_MainToken[this] := true;
[L9759]   COND FALSE  !(PAUSED_Consts[this])
[L9769]               __var_57 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9770]               addresses_s1673 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9771]               __var_58 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9772]               amounts_s1673 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9773]               __var_59 := 0 % 18446744073709551616;
[L9774]               freezes_s1673 := 0 % 18446744073709551616;
[L9775]               i_s1673 := 0;
[L9776]   COND TRUE   i_s1673 < Length[addresses_s1673]
[L9778]   COND TRUE   M_int_int[freezes_s1673][i_s1673] == 0
[L9779]   COND TRUE   DType[this] == MainToken
[L9780]   CALL        call __var_60 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, M_int_Ref[addresses_s1673][i_s1673], M_int_int[amounts_s1673][i_s1673]);
[L7531]   CALL        call hasMintPermission_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12753]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7531]   RET         call hasMintPermission_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7532]   COND FALSE  !(revert)
[L7535]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12737]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7535]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7536]   COND FALSE  !(revert)
[L7539]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s664);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L7539]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s664);
[L7540]   COND FALSE  !(revert)
[L7543]               totalSupply__BasicToken[this] := __var_12;
[L7544]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s664], _amount_s664);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L7544]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s664], _amount_s664);
[L7545]   COND FALSE  !(revert)
[L7548]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s664];
[L7549]               balances_BasicToken[this][_to_s664] := __var_13;
[L7550]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s664];
[L7551]               assert { :EventEmitted "Mint_MintableToken" } true;
[L7552]               assert { :EventEmitted "Transfer_MintableToken" } true;
[L7553]               __ret_0_ := true;
[L9780]   RET         call __var_60 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, M_int_Ref[addresses_s1673][i_s1673], M_int_int[amounts_s1673][i_s1673]);
[L9781]   COND FALSE  !(revert)
[L9795]               i_s1673 := (i_s1673 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9796]   COND FALSE  !(gas < 0)
[L9776]   COND FALSE  !(i_s1673 < Length[addresses_s1673])
[L9800]   COND TRUE   !CONTINUE_MINTING_Consts[this]
[L9801]   COND TRUE   DType[this] == MainToken
[L9802]   CALL        call __var_62 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7574]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12721]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7574]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7575]   COND FALSE  !(revert)
[L7578]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12737]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7578]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7579]   COND FALSE  !(revert)
[L7582]               mintingFinished_MintableToken[this] := true;
[L7583]               assert { :EventEmitted "MintFinished_MintableToken" } true;
[L7584]               __ret_0_ := true;
[L9802]   RET         call __var_62 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9803]   COND FALSE  !(revert)
[L9810]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9438]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9439]   COND FALSE  !(revert)
[L9442]   COND TRUE   DType[this] == MainToken
[L9443]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7356]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12721]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7356]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   COND TRUE   DType[this] == MainToken
[L7361]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7404]               __var_11 := null;
[L7405]   COND FALSE  !(!(_newOwner_s581 != null))
[L7409]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7410]               owner_Ownable[this] := _newOwner_s581;
[L7361]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7362]   COND FALSE  !(revert)
[L9443]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9444]   COND FALSE  !(revert)
[L9550]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L4426]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4427]               assume !revert && gas >= 0;
[L14773]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14774]              assume !revert && gas >= 0;
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND FALSE  !(choice == 37)
[L14531]  COND FALSE  !(choice == 36)
[L14538]  COND FALSE  !(choice == 35)
[L14544]  COND FALSE  !(choice == 34)
[L14551]  COND FALSE  !(choice == 33)
[L14558]  COND FALSE  !(choice == 32)
[L14565]  COND FALSE  !(choice == 31)
[L14572]  COND FALSE  !(choice == 30)
[L14578]  COND FALSE  !(choice == 29)
[L14584]  COND FALSE  !(choice == 28)
[L14590]  COND FALSE  !(choice == 27)
[L14596]  COND FALSE  !(choice == 26)
[L14603]  COND FALSE  !(choice == 25)
[L14609]  COND FALSE  !(choice == 24)
[L14615]  COND FALSE  !(choice == 23)
[L14621]  COND FALSE  !(choice == 22)
[L14627]  COND FALSE  !(choice == 21)
[L14634]  COND TRUE   choice == 20
[L14635]              gas := gas - 21000;
[L14636]  COND TRUE   gas >= 0
[L14637]              assume _amount_s938 >= 0 && _amount_s938 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14638]              assume _until_s938 >= 0 && _until_s938 < 18446744073709551616;
[L14639]              assume msgvalue_MSG == 0;
[L14640]  CALL        call freezeTo~address~uint256~uint64_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L2530]               havoc __exception;
[L2531]               revert := false;
[L2532]   COND FALSE  !(__exception)
[L2571]   CALL        call freezeTo~address~uint256~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L8114]               __var_26 := null;
[L8115]   COND FALSE  !(!(_to_s938 != null))
[L8119]   COND FALSE  !(!(_amount_s938 <= balances_BasicToken[this][msgsender_MSG]))
[L8123]   CALL        call __var_27 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _amount_s938);
[L6810]               assert b_s98 <= a_s98;
[L6811]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8123]   RET         call __var_27 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _amount_s938);
[L8124]   COND FALSE  !(revert)
[L8127]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L8128]               balances_BasicToken[this][msgsender_MSG] := __var_27;
[L8129]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L8130]               __var_28 := _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8131]   COND TRUE   DType[this] == MainToken
[L8132]   CALL        call currentKey_s938 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8545]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8547]               havoc result_s1122;
[L8548]               havoc result_s1122;
[L8549]               havoc result_s1122;
[L8550]               havoc result_s1122;
[L8132]   RET         call currentKey_s938 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8133]   COND FALSE  !(revert)
[L8149]               currentKey_s938 := currentKey_s938;
[L8150]   CALL        call __var_29 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s938], _amount_s938);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L8150]   RET         call __var_29 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s938], _amount_s938);
[L8151]   COND FALSE  !(revert)
[L8154]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s938];
[L8155]               freezings_FreezableToken[this][currentKey_s938] := __var_29;
[L8156]               sum_freezings3[this] := sum_freezings3[this] + freezings_FreezableToken[this][currentKey_s938];
[L8157]   CALL        call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s938], _amount_s938);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L8157]   RET         call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s938], _amount_s938);
[L8158]   COND FALSE  !(revert)
[L8161]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][_to_s938];
[L8162]               freezingBalance_FreezableToken[this][_to_s938] := __var_30;
[L8163]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][_to_s938];
[L8164]   COND TRUE   DType[this] == MainToken
[L8165]   CALL        call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938);
[L8689]   COND FALSE  !(!(_until_s1240 > now))
[L8693]               __var_42 := _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8694]   COND TRUE   DType[this] == MainToken
[L8695]   CALL        call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8545]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8547]               havoc result_s1122;
[L8548]               havoc result_s1122;
[L8549]               havoc result_s1122;
[L8550]               havoc result_s1122;
[L8695]   RET         call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8696]   COND FALSE  !(revert)
[L8712]               key_s1240 := key_s1240;
[L8713]               __var_43 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8714]   COND TRUE   DType[this] == MainToken
[L8715]   CALL        call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8545]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8547]               havoc result_s1122;
[L8548]               havoc result_s1122;
[L8549]               havoc result_s1122;
[L8550]               havoc result_s1122;
[L8715]   RET         call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8716]   COND FALSE  !(revert)
[L8732]               parentKey_s1240 := parentKey_s1240;
[L8733]               next_s1240 := chains_FreezableToken[this][parentKey_s1240];
[L8734]   COND TRUE   next_s1240 == 0
[L8735]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][parentKey_s1240];
[L8736]               chains_FreezableToken[this][parentKey_s1240] := _until_s1240;
[L8737]               sum_chains2[this] := sum_chains2[this] + chains_FreezableToken[this][parentKey_s1240];
[L8165]   RET         call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938);
[L8166]   COND FALSE  !(revert)
[L8182]               assert { :EventEmitted "Transfer_FreezableToken" } true;
[L8183]               assert { :EventEmitted "Freezed_FreezableToken" } true;
[L2571]   RET         call freezeTo~address~uint256~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L2572]               assume !revert && gas >= 0;
[L14640]  RET         call freezeTo~address~uint256~uint64_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L14777]  RET         call CorralChoice_MainToken(this);
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND TRUE   choice == 37
[L14526]              gas := gas - 21000;
[L14527]  COND TRUE   gas >= 0
[L14528]              assume msgvalue_MSG == 0;
[L14529]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7706]   COND TRUE   DType[this] == MainToken
[L7707]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6961]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7707]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7708]   COND FALSE  !(revert)
[L7724]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14529]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14777]  RET         call CorralChoice_MainToken(this);

Loop:
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND FALSE  !(choice == 37)
[L14531]  COND FALSE  !(choice == 36)
[L14538]  COND FALSE  !(choice == 35)
[L14544]  COND FALSE  !(choice == 34)
[L14551]  COND FALSE  !(choice == 33)
[L14558]  COND FALSE  !(choice == 32)
[L14565]  COND FALSE  !(choice == 31)
[L14572]  COND FALSE  !(choice == 30)
[L14578]  COND FALSE  !(choice == 29)
[L14584]  COND FALSE  !(choice == 28)
[L14590]  COND FALSE  !(choice == 27)
[L14596]  COND FALSE  !(choice == 26)
[L14603]  COND FALSE  !(choice == 25)
[L14609]  COND FALSE  !(choice == 24)
[L14615]  COND FALSE  !(choice == 23)
[L14621]  COND FALSE  !(choice == 22)
[L14627]  COND FALSE  !(choice == 21)
[L14634]  COND FALSE  !(choice == 20)
[L14642]  COND TRUE   choice == 19
[L14643]              gas := gas - 21000;
[L14644]  COND TRUE   gas >= 0
[L14645]              assume msgvalue_MSG == 0;
[L14646]  CALL        call releaseOnce_FreezableToken(this, msgsender_MSG, msgvalue_MSG);
[L2624]               havoc __exception;
[L2625]               revert := false;
[L2626]   COND FALSE  !(__exception)
[L2665]   CALL        call releaseOnce_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8290]               __var_31 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8291]   COND TRUE   DType[this] == MainToken
[L8292]   CALL        call headKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8545]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8547]               havoc result_s1122;
[L8548]               havoc result_s1122;
[L8549]               havoc result_s1122;
[L8550]               havoc result_s1122;
[L8292]   RET         call headKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8293]   COND FALSE  !(revert)
[L8309]               headKey_s1054 := headKey_s1054;
[L8310]               head_s1054 := chains_FreezableToken[this][headKey_s1054];
[L8311]   COND FALSE  !(!(head_s1054 != 0))
[L8315]               __var_32 := now % 18446744073709551616;
[L8316]   COND FALSE  !(!(now % 18446744073709551616 > head_s1054))
[L8320]               __var_33 := head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8321]   COND TRUE   DType[this] == MainToken
[L8322]   CALL        call currentKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8545]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8547]               havoc result_s1122;
[L8548]               havoc result_s1122;
[L8549]               havoc result_s1122;
[L8550]               havoc result_s1122;
[L8322]   RET         call currentKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8323]   COND FALSE  !(revert)
[L8339]               currentKey_s1054 := currentKey_s1054;
[L8340]               next_s1054 := chains_FreezableToken[this][currentKey_s1054];
[L8341]               amount_s1054 := freezings_FreezableToken[this][currentKey_s1054];
[L8342]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s1054];
[L8343]               freezings_FreezableToken[this][currentKey_s1054] := 0;
[L8344]   CALL        call __var_34 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], amount_s1054);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L8344]   RET         call __var_34 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], amount_s1054);
[L8345]   COND FALSE  !(revert)
[L8348]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L8349]               balances_BasicToken[this][msgsender_MSG] := __var_34;
[L8350]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L8351]   CALL        call __var_35 := sub~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][msgsender_MSG], amount_s1054);
[L6810]               assert b_s98 <= a_s98;
[L6811]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8351]   RET         call __var_35 := sub~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][msgsender_MSG], amount_s1054);
[L8352]   COND FALSE  !(revert)
[L8355]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][msgsender_MSG];
[L8356]               freezingBalance_FreezableToken[this][msgsender_MSG] := __var_35;
[L8357]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][msgsender_MSG];
[L8358]   COND TRUE   next_s1054 == 0
[L8359]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][headKey_s1054];
[L8360]               chains_FreezableToken[this][headKey_s1054] := 0;
[L8368]               assert { :EventEmitted "Released_FreezableToken" } true;
[L2665]   RET         call releaseOnce_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2666]               assume !revert && gas >= 0;
[L14646]  RET         call releaseOnce_FreezableToken(this, msgsender_MSG, msgvalue_MSG);
[L14777]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:44:08,015 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:44:08,016 INFO  L82        PathProgramCache]: Analyzing trace with hash -766662282, now seen corresponding path program 1 times
[2020-11-24 21:44:08,017 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:44:08,148 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 21:44:08,255 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 21:44:08,631 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:44:08,631 INFO  L82        PathProgramCache]: Analyzing trace with hash -364588067, now seen corresponding path program 1 times
[2020-11-24 21:44:08,632 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:44:08,640 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 21:44:08,648 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 21:44:08,663 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:44:08,663 INFO  L82        PathProgramCache]: Analyzing trace with hash 152559250, now seen corresponding path program 1 times
[2020-11-24 21:44:08,664 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:44:08,823 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 21:44:08,971 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 5 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 5 to 7
Garbage collection #1: 5 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5 to 7
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
[2020-11-24 21:44:09,417 WARN  L188               SmtUtils]: Spent 146.00 ms on a formula simplification that was a NOOP. DAG size: 172
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 673 to 1327
[2020-11-24 21:44:09,749 WARN  L188               SmtUtils]: Spent 108.00 ms on a formula simplification. DAG size of input: 141 DAG size of output: 140
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 619 to 1237
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
[2020-11-24 21:44:10,011 WARN  L188               SmtUtils]: Spent 208.00 ms on a formula simplification that was a NOOP. DAG size: 315
Garbage collection #1: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #2: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #3: 443 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 443 to 883
Garbage collection #4: 883 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 883 to 1759
Garbage collection #5: 1759 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 1759 to 3517
Garbage collection #6: 3517 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 3517 to 7027
Garbage collection #1: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3137 to 6271
[2020-11-24 21:44:10,208 WARN  L188               SmtUtils]: Spent 183.00 ms on a formula simplification that was a NOOP. DAG size: 297
[2020-11-24 21:44:10,682 WARN  L188               SmtUtils]: Spent 465.00 ms on a formula simplification. DAG size of input: 417 DAG size of output: 359
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 3967 to 7933
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
[2020-11-24 21:44:11,128 WARN  L188               SmtUtils]: Spent 347.00 ms on a formula simplification that was a NOOP. DAG size: 494
Garbage collection #1: 191 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 191 to 379
Garbage collection #2: 379 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 379 to 757
Garbage collection #3: 757 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 757 to 1511
Garbage collection #4: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #5: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #6: 6037 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 6037 to 12073
Garbage collection #7: 12073 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 12073 to 24137
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 9181 to 18353
[2020-11-24 21:44:11,367 WARN  L188               SmtUtils]: Spent 220.00 ms on a formula simplification that was a NOOP. DAG size: 400
[2020-11-24 21:44:11,627 WARN  L188               SmtUtils]: Spent 257.00 ms on a formula simplification that was a NOOP. DAG size: 400
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.002s total
Resizing node table from 9181 to 18353
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
[2020-11-24 21:44:11,745 WARN  L188               SmtUtils]: Spent 110.00 ms on a formula simplification that was a NOOP. DAG size: 277
[2020-11-24 21:44:11,757 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
[2020-11-24 21:44:13,173 WARN  L188               SmtUtils]: Spent 214.00 ms on a formula simplification. DAG size of input: 264 DAG size of output: 250
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 5 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5 to 7
Garbage collection #2: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #1: 5 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5 to 7
Garbage collection #2: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
[2020-11-24 21:44:13,640 WARN  L188               SmtUtils]: Spent 136.00 ms on a formula simplification that was a NOOP. DAG size: 165
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
[2020-11-24 21:44:13,814 WARN  L188               SmtUtils]: Spent 109.00 ms on a formula simplification. DAG size of input: 192 DAG size of output: 184
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
[2020-11-24 21:44:20,452 WARN  L188               SmtUtils]: Spent 6.52 s on a formula simplification. DAG size of input: 578 DAG size of output: 545
Garbage collection #1: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #2: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #3: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #4: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #5: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #6: 6661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6661 to 13313
Garbage collection #7: 13313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13313 to 26597
[2020-11-24 21:44:20,612 WARN  L188               SmtUtils]: Spent 110.00 ms on a formula simplification that was a NOOP. DAG size: 262
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
[2020-11-24 21:44:20,833 WARN  L188               SmtUtils]: Spent 147.00 ms on a formula simplification. DAG size of input: 216 DAG size of output: 213
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
[2020-11-24 21:44:21,127 WARN  L188               SmtUtils]: Spent 248.00 ms on a formula simplification that was a NOOP. DAG size: 437
Garbage collection #1: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #2: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #3: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #4: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #5: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #6: 5003 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5003 to 9973
Garbage collection #7: 9973 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 9973 to 19937
[2020-11-24 21:44:21,332 WARN  L188               SmtUtils]: Spent 201.00 ms on a formula simplification that was a NOOP. DAG size: 387
Garbage collection #1: 3 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3 to 5
Garbage collection #1: 5 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5 to 7
Garbage collection #2: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #1: 5 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5 to 7
Garbage collection #2: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #1: 3 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3 to 5
Garbage collection #1: 3 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3 to 5
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
[2020-11-24 21:44:21,682 WARN  L188               SmtUtils]: Spent 298.00 ms on a formula simplification. DAG size of input: 204 DAG size of output: 200
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 619 to 1237
[2020-11-24 21:44:21,988 WARN  L188               SmtUtils]: Spent 123.00 ms on a formula simplification. DAG size of input: 148 DAG size of output: 146
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
[2020-11-24 21:44:22,233 WARN  L188               SmtUtils]: Spent 219.00 ms on a formula simplification that was a NOOP. DAG size: 327
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 3967 to 7933
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
[2020-11-24 21:44:22,407 WARN  L188               SmtUtils]: Spent 171.00 ms on a formula simplification that was a NOOP. DAG size: 309
[2020-11-24 21:44:23,007 WARN  L188               SmtUtils]: Spent 595.00 ms on a formula simplification. DAG size of input: 430 DAG size of output: 375
Garbage collection #1: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
Garbage collection #7: 8053 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8053 to 16103
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
[2020-11-24 21:44:23,142 WARN  L188               SmtUtils]: Spent 129.00 ms on a formula simplification that was a NOOP. DAG size: 268
[2020-11-24 21:44:23,629 WARN  L188               SmtUtils]: Spent 485.00 ms on a formula simplification that was a NOOP. DAG size: 505
Garbage collection #1: 191 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 191 to 379
Garbage collection #2: 379 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 379 to 757
Garbage collection #3: 757 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 757 to 1511
Garbage collection #4: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #5: 3019 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3019 to 6037
Garbage collection #6: 6037 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 6037 to 12073
Garbage collection #7: 12073 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 12073 to 24137
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
[2020-11-24 21:44:23,907 WARN  L188               SmtUtils]: Spent 271.00 ms on a formula simplification that was a NOOP. DAG size: 411
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
[2020-11-24 21:44:24,173 WARN  L188               SmtUtils]: Spent 144.00 ms on a formula simplification. DAG size of input: 302 DAG size of output: 298
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2179 to 4357
[2020-11-24 21:44:24,362 WARN  L188               SmtUtils]: Spent 154.00 ms on a formula simplification that was a NOOP. DAG size: 443
Garbage collection #1: 181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 181 to 359
Garbage collection #2: 359 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 359 to 709
Garbage collection #3: 709 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 709 to 1409
Garbage collection #4: 1409 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1409 to 2803
Garbage collection #5: 2803 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2803 to 5591
Garbage collection #6: 5591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5591 to 11177
Garbage collection #7: 11177 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11177 to 22349
[2020-11-24 21:44:35,325 WARN  L188               SmtUtils]: Spent 10.86 s on a formula simplification. DAG size of input: 1039 DAG size of output: 1023
Garbage collection #1: 419 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 419 to 829
Garbage collection #2: 829 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 829 to 1657
Garbage collection #3: 1657 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1657 to 3313
Garbage collection #4: 3313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3313 to 6619
Garbage collection #5: 6619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6619 to 13229
Garbage collection #6: 13229 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 13229 to 26449
Garbage collection #7: 26449 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 26449 to 52889
Garbage collection #8: 52889 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 52889 to 102881
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
[2020-11-24 21:44:36,007 WARN  L188               SmtUtils]: Spent 639.00 ms on a formula simplification that was a NOOP. DAG size: 420
[2020-11-24 21:44:37,920 WARN  L188               SmtUtils]: Spent 1.87 s on a formula simplification that was a NOOP. DAG size: 555
Garbage collection #1: 181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 181 to 359
Garbage collection #2: 359 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 359 to 709
Garbage collection #3: 709 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 709 to 1409
Garbage collection #4: 1409 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1409 to 2803
Garbage collection #5: 2803 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2803 to 5591
Garbage collection #6: 5591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5591 to 11177
Garbage collection #7: 11177 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11177 to 22349
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
[2020-11-24 21:44:38,511 WARN  L188               SmtUtils]: Spent 581.00 ms on a formula simplification that was a NOOP. DAG size: 420
[2020-11-24 21:44:42,200 WARN  L188               SmtUtils]: Spent 3.69 s on a formula simplification. DAG size of input: 557 DAG size of output: 556
Garbage collection #1: 191 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 191 to 379
Garbage collection #2: 379 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 379 to 757
Garbage collection #3: 757 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 757 to 1511
Garbage collection #4: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #5: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #6: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
Garbage collection #7: 12073 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12073 to 24137
Garbage collection #1: 181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 181 to 359
Garbage collection #2: 359 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 359 to 709
Garbage collection #3: 709 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 709 to 1409
Garbage collection #4: 1409 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1409 to 2803
Garbage collection #5: 2803 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2803 to 5591
Garbage collection #6: 5591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5591 to 11177
Garbage collection #7: 11177 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 11177 to 22349
[2020-11-24 21:44:44,081 WARN  L188               SmtUtils]: Spent 1.87 s on a formula simplification that was a NOOP. DAG size: 552
[2020-11-24 21:44:44,117 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:44:44,130 INFO  L216          LassoAnalysis]: Preferences:
[2020-11-24 21:44:44,130 INFO  L124   ssoRankerPreferences]: Compute integeral hull: false
[2020-11-24 21:44:44,130 INFO  L125   ssoRankerPreferences]: Enable LassoPartitioneer: true
[2020-11-24 21:44:44,130 INFO  L126   ssoRankerPreferences]: Term annotations enabled: false
[2020-11-24 21:44:44,131 INFO  L127   ssoRankerPreferences]: Use exernal solver: true
[2020-11-24 21:44:44,131 INFO  L128   ssoRankerPreferences]: SMT solver command: z3 SMTLIB2_COMPLIANT=true -memory:1024 -smt2 -in -t:12000
[2020-11-24 21:44:44,131 INFO  L129   ssoRankerPreferences]: Dump SMT script to file: false
[2020-11-24 21:44:44,131 INFO  L130   ssoRankerPreferences]: Path of dumped script: 
[2020-11-24 21:44:44,131 INFO  L131   ssoRankerPreferences]: Filename of dumped script: MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_balanceof.bpl_BEv2_Iteration25_Lasso
[2020-11-24 21:44:44,131 INFO  L132   ssoRankerPreferences]: MapElimAlgo: Frank
[2020-11-24 21:44:44,131 INFO  L282          LassoAnalysis]: Starting lasso preprocessing...
Garbage collection #1: 263 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 263 to 523
Garbage collection #2: 523 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 523 to 1039
Garbage collection #3: 1039 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1039 to 2069
Garbage collection #4: 2069 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2069 to 4133
Garbage collection #5: 4133 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4133 to 8263
Garbage collection #6: 8263 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 8263 to 16519
Garbage collection #7: 16519 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 16519 to 33037
Garbage collection #8: 33037 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 33037 to 66071
Garbage collection #1: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #2: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #3: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #4: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #5: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #6: 5003 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5003 to 9973
Garbage collection #7: 9973 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9973 to 19937
[2020-11-24 21:44:44,733 FATAL L292        ToolchainWalker]: The Plugin de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer has thrown an exception:
java.lang.UnsupportedOperationException: function symbols not yet supported
	at de.uni_freiburg.informatik.ultimate.lassoranker.variables.LassoPartitioneer.addInOuAuxVar(LassoPartitioneer.java:238)
	at de.uni_freiburg.informatik.ultimate.lassoranker.variables.LassoPartitioneer.constructTransFormulaLR(LassoPartitioneer.java:210)
	at de.uni_freiburg.informatik.ultimate.lassoranker.variables.LassoPartitioneer.doPartition(LassoPartitioneer.java:165)
	at de.uni_freiburg.informatik.ultimate.lassoranker.variables.LassoPartitioneer.<init>(LassoPartitioneer.java:95)
	at de.uni_freiburg.informatik.ultimate.lassoranker.preprocessors.LassoPartitioneerPreprocessor.process(LassoPartitioneerPreprocessor.java:65)
	at de.uni_freiburg.informatik.ultimate.lassoranker.variables.LassoBuilder.applyPreprocessor(LassoBuilder.java:154)
	at de.uni_freiburg.informatik.ultimate.lassoranker.variables.LassoBuilder.preprocess(LassoBuilder.java:262)
	at de.uni_freiburg.informatik.ultimate.lassoranker.LassoAnalysis.preprocess(LassoAnalysis.java:286)
	at de.uni_freiburg.informatik.ultimate.lassoranker.LassoAnalysis.<init>(LassoAnalysis.java:235)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck.synthesize(LassoCheck.java:788)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck.access$18(LassoCheck.java:715)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.checkLassoTermination(LassoCheck.java:1163)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.<init>(LassoCheck.java:1062)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck.<init>(LassoCheck.java:276)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiCegarLoop.iterate(BuchiCegarLoop.java:479)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver.doTerminationAnalysis(BuchiAutomizerObserver.java:153)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver.finish(BuchiAutomizerObserver.java:413)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.runObserver(PluginConnector.java:168)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.runTool(PluginConnector.java:151)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.run(PluginConnector.java:128)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.executePluginConnector(ToolchainWalker.java:232)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.processPlugin(ToolchainWalker.java:226)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.walkUnprotected(ToolchainWalker.java:142)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.walk(ToolchainWalker.java:104)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainManager$Toolchain.processToolchain(ToolchainManager.java:317)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.toolchain.DefaultToolchainJob.run(DefaultToolchainJob.java:145)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)
[2020-11-24 21:44:44,734 INFO  L168              Benchmark]: Toolchain (without parser) took 87791.89 ms. Allocated memory was 1.0 GB in the beginning and 6.6 GB in the end (delta: 5.5 GB). Free memory was 913.7 MB in the beginning and 4.8 GB in the end (delta: -3.9 GB). Peak memory consumption was 5.7 GB. Max. memory is 15.3 GB.
[2020-11-24 21:44:44,735 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-24 21:44:44,735 INFO  L168              Benchmark]: Boogie Preprocessor took 194.57 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 886.9 MB in the end (delta: 26.8 MB). Peak memory consumption was 26.8 MB. Max. memory is 15.3 GB.
[2020-11-24 21:44:44,735 INFO  L168              Benchmark]: UtopiaSpecLang took 95.64 ms. Allocated memory is still 1.0 GB. Free memory was 886.9 MB in the beginning and 870.7 MB in the end (delta: 16.2 MB). Peak memory consumption was 16.2 MB. Max. memory is 15.3 GB.
[2020-11-24 21:44:44,735 INFO  L168              Benchmark]: Boogie Printer took 33.52 ms. Allocated memory is still 1.0 GB. Free memory was 870.7 MB in the beginning and 859.9 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-24 21:44:44,735 INFO  L168              Benchmark]: RCFGBuilder took 1621.82 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 176.2 MB). Free memory was 859.9 MB in the beginning and 1.1 GB in the end (delta: -216.5 MB). Peak memory consumption was 246.9 MB. Max. memory is 15.3 GB.
[2020-11-24 21:44:44,736 INFO  L168              Benchmark]: UtopiaLTL2Aut took 31.27 ms. Allocated memory is still 1.2 GB. Free memory was 1.1 GB in the beginning and 1.1 GB in the end (delta: 8.0 MB). Peak memory consumption was 8.0 MB. Max. memory is 15.3 GB.
[2020-11-24 21:44:44,736 INFO  L168              Benchmark]: BÃ¼chi Program Product took 4206.12 ms. Allocated memory was 1.2 GB in the beginning and 1.5 GB in the end (delta: 337.1 MB). Free memory was 1.1 GB in the beginning and 743.3 MB in the end (delta: 325.1 MB). Peak memory consumption was 784.0 MB. Max. memory is 15.3 GB.
[2020-11-24 21:44:44,736 INFO  L168              Benchmark]: BlockEncodingV2 took 414.21 ms. Allocated memory was 1.5 GB in the beginning and 1.9 GB in the end (delta: 384.8 MB). Free memory was 743.3 MB in the beginning and 1.6 GB in the end (delta: -859.8 MB). Peak memory consumption was 184.1 MB. Max. memory is 15.3 GB.
[2020-11-24 21:44:44,736 INFO  L168              Benchmark]: BuchiAutomizer took 81191.76 ms. Allocated memory was 1.9 GB in the beginning and 6.6 GB in the end (delta: 4.6 GB). Free memory was 1.6 GB in the beginning and 4.8 GB in the end (delta: -3.2 GB). Peak memory consumption was 5.5 GB. Max. memory is 15.3 GB.
[2020-11-24 21:44:44,740 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    13448 locations, 24717 edges
  - StatisticsResult: Encoded RCFG
    13238 locations, 24131 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 194.57 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 886.9 MB in the end (delta: 26.8 MB). Peak memory consumption was 26.8 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 95.64 ms. Allocated memory is still 1.0 GB. Free memory was 886.9 MB in the beginning and 870.7 MB in the end (delta: 16.2 MB). Peak memory consumption was 16.2 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 33.52 ms. Allocated memory is still 1.0 GB. Free memory was 870.7 MB in the beginning and 859.9 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1621.82 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 176.2 MB). Free memory was 859.9 MB in the beginning and 1.1 GB in the end (delta: -216.5 MB). Peak memory consumption was 246.9 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 31.27 ms. Allocated memory is still 1.2 GB. Free memory was 1.1 GB in the beginning and 1.1 GB in the end (delta: 8.0 MB). Peak memory consumption was 8.0 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 4206.12 ms. Allocated memory was 1.2 GB in the beginning and 1.5 GB in the end (delta: 337.1 MB). Free memory was 1.1 GB in the beginning and 743.3 MB in the end (delta: 325.1 MB). Peak memory consumption was 784.0 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 414.21 ms. Allocated memory was 1.5 GB in the beginning and 1.9 GB in the end (delta: 384.8 MB). Free memory was 743.3 MB in the beginning and 1.6 GB in the end (delta: -859.8 MB). Peak memory consumption was 184.1 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 81191.76 ms. Allocated memory was 1.9 GB in the beginning and 6.6 GB in the end (delta: 4.6 GB). Free memory was 1.6 GB in the beginning and 4.8 GB in the end (delta: -3.2 GB). Peak memory consumption was 5.5 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    5384 locations, 7560 edges
  - StatisticsResult: BuchiProgram size
    13448 locations, 24717 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer:
  - ExceptionOrErrorResult: UnsupportedOperationException: function symbols not yet supported
    de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer: UnsupportedOperationException: function symbols not yet supported: de.uni_freiburg.informatik.ultimate.lassoranker.variables.LassoPartitioneer.addInOuAuxVar(LassoPartitioneer.java:238)
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
