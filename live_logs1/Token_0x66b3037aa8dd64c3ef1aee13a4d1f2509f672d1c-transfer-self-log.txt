This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 05:57:42,439 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 05:57:42,440 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 05:57:42,451 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 05:57:42,451 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 05:57:42,452 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 05:57:42,453 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 05:57:42,455 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 05:57:42,457 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 05:57:42,458 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 05:57:42,459 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 05:57:42,460 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 05:57:42,460 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 05:57:42,461 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 05:57:42,462 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 05:57:42,463 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 05:57:42,464 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 05:57:42,465 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 05:57:42,467 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 05:57:42,468 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 05:57:42,469 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 05:57:42,470 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 05:57:42,472 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 05:57:42,473 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 05:57:42,473 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 05:57:42,473 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 05:57:42,474 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 05:57:42,475 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 05:57:42,475 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 05:57:42,475 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 05:57:42,476 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 05:57:42,476 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 05:57:42,477 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 05:57:42,477 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 05:57:42,478 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 05:57:42,478 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 05:57:42,479 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 05:57:42,479 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 05:57:42,480 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 05:57:42,480 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 05:57:42,481 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 05:57:42,481 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 05:57:42,489 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 05:57:42,489 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 05:57:42,490 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 05:57:42,490 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 05:57:42,490 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 05:57:42,490 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 05:57:42,491 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 05:57:42,491 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 05:57:42,491 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 05:57:42,491 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 05:57:42,491 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 05:57:42,491 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 05:57:42,491 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 05:57:42,491 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 05:57:42,491 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 05:57:42,492 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 05:57:42,492 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 05:57:42,492 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 05:57:42,492 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 05:57:42,492 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 05:57:42,492 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 05:57:42,492 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 05:57:42,492 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 05:57:42,492 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 05:57:42,493 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 05:57:42,493 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 05:57:42,514 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 05:57:42,528 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 05:57:42,532 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 05:57:42,534 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 05:57:42,534 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 05:57:42,535 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/Token_0x66b3037aa8dd64c3ef1aee13a4d1f2509f672d1c_transfer-self.bpl
[2020-11-25 05:57:42,536 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/Token_0x66b3037aa8dd64c3ef1aee13a4d1f2509f672d1c_transfer-self.bpl'
[2020-11-25 05:57:42,624 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 05:57:42,626 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 05:57:42,626 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 05:57:42,626 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 05:57:42,626 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 05:57:42,643 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "Token_0x66b3037aa8dd64c3ef1aee13a4d1f2509f672d1c_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:57:42" (1/1) ...
[2020-11-25 05:57:42,645 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "Token_0x66b3037aa8dd64c3ef1aee13a4d1f2509f672d1c_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:57:42" (1/1) ...
[2020-11-25 05:57:42,693 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "Token_0x66b3037aa8dd64c3ef1aee13a4d1f2509f672d1c_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:57:42" (1/1) ...
[2020-11-25 05:57:42,694 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "Token_0x66b3037aa8dd64c3ef1aee13a4d1f2509f672d1c_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:57:42" (1/1) ...
[2020-11-25 05:57:42,719 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "Token_0x66b3037aa8dd64c3ef1aee13a4d1f2509f672d1c_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:57:42" (1/1) ...
[2020-11-25 05:57:42,732 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "Token_0x66b3037aa8dd64c3ef1aee13a4d1f2509f672d1c_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:57:42" (1/1) ...
[2020-11-25 05:57:42,741 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "Token_0x66b3037aa8dd64c3ef1aee13a4d1f2509f672d1c_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:57:42" (1/1) ...
[2020-11-25 05:57:42,754 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 05:57:42,754 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 05:57:42,755 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 05:57:42,757 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 05:57:42,761 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "Token_0x66b3037aa8dd64c3ef1aee13a4d1f2509f672d1c_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:57:42" (1/1) ...
[2020-11-25 05:57:42,780 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && governance_Token[this] == old(governance_Token[this]) && minters_Token[this] == old(minters_Token[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]) && exceptions_ERC20[this] == old(exceptions_ERC20[this]) && uniswap_ERC20[this] == old(uniswap_ERC20[this]) && _owner_ERC20[this] == old(_owner_ERC20[this]))))
[2020-11-25 05:57:42,785 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && governance_Token[this] == old(governance_Token[this]) && minters_Token[this] == old(minters_Token[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]) && exceptions_ERC20[this] == old(exceptions_ERC20[this]) && uniswap_ERC20[this] == old(uniswap_ERC20[this]) && _owner_ERC20[this] == old(_owner_ERC20[this]))))
[2020-11-25 05:57:42,793 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && governance_Token[this] == old(governance_Token[this]) && minters_Token[this] == old(minters_Token[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]) && exceptions_ERC20[this] == old(exceptions_ERC20[this]) && uniswap_ERC20[this] == old(uniswap_ERC20[this]) && _owner_ERC20[this] == old(_owner_ERC20[this]))))
[2020-11-25 05:57:42,800 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==recipient_s200 && amount_s200<=_balances_ERC20[this][msg.sender] ) && amount_s200>=0 ) && amount_s200<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][recipient_s200]>=0 ) && _balances_ERC20[this][recipient_s200]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][msg.sender]>=0 ) && _balances_ERC20[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IdentifierExpression[recipient_s200,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]],BinaryExpression[COMPLEQ,IdentifierExpression[amount_s200,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[amount_s200,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[amount_s200,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s200,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s200,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 05:57:42,803 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( __ret_0_==true && _totalSupply_ERC20[this]==( old(_totalSupply_ERC20[this]) ) ) && _balances_ERC20[this]==( old(_balances_ERC20[this]) ) ) && _allowances_ERC20[this]==( old(_allowances_ERC20[this]) ) ) && governance_Token[this]==( old(governance_Token[this]) ) ) && minters_Token[this]==( old(minters_Token[this]) ) ) && _name_ERC20Detailed[this]==( old(_name_ERC20Detailed[this]) ) ) && _symbol_ERC20Detailed[this]==( old(_symbol_ERC20Detailed[this]) ) ) && _decimals_ERC20Detailed[this]==( old(_decimals_ERC20Detailed[this]) ) ) && exceptions_ERC20[this]==( old(exceptions_ERC20[this]) ) ) && uniswap_ERC20[this]==( old(uniswap_ERC20[this]) ) ) && _owner_ERC20[this]==( old(_owner_ERC20[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_ERC20>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[governance_Token,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[governance_Token,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[minters_Token,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[minters_Token,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[exceptions_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[exceptions_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[uniswap_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[uniswap_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_owner_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_owner_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]]
[2020-11-25 05:57:42,810 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && governance_Token[this] == old(governance_Token[this]) && minters_Token[this] == old(minters_Token[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]) && exceptions_ERC20[this] == old(exceptions_ERC20[this]) && uniswap_ERC20[this] == old(uniswap_ERC20[this]) && _owner_ERC20[this] == old(_owner_ERC20[this]))))
[2020-11-25 05:57:42,810 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_ERC200) ==> ( <>AP(success_transfer_ERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 05:57:42,821 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:57:42 PropertyContainer
[2020-11-25 05:57:42,822 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 05:57:42,822 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 05:57:42,822 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 05:57:42,822 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 05:57:42,823 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Token_0x66b3037aa8dd64c3ef1aee13a4d1f2509f672d1c_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:57:42" (1/2) ...
[2020-11-25 05:57:42,823 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 05:57:42,824 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 05:57:42,840 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:57:42" (2/2) ...
[2020-11-25 05:57:42,840 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 05:57:42,840 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 05:57:42,841 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 05:57:42,841 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 05:57:42,841 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Token_0x66b3037aa8dd64c3ef1aee13a4d1f2509f672d1c_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:57:42" (1/2) ...
[2020-11-25 05:57:42,895 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 05:57:42,896 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 05:57:42,896 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 05:57:42,896 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 05:57:42,896 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 05:57:42,896 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 05:57:42,896 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 05:57:42,896 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 05:57:42,896 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 05:57:42,897 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 05:57:42,897 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__success
[2020-11-25 05:57:42,897 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context
[2020-11-25 05:57:42,897 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context
[2020-11-25 05:57:42,897 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__success
[2020-11-25 05:57:42,897 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 05:57:42,897 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 05:57:42,898 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 05:57:42,898 INFO  L130     BoogieDeclarations]: Found specification of procedure setAllow_ERC20
[2020-11-25 05:57:42,898 INFO  L138     BoogieDeclarations]: Found implementation of procedure setAllow_ERC20
[2020-11-25 05:57:42,898 INFO  L130     BoogieDeclarations]: Found specification of procedure setExceptions~address_ERC20
[2020-11-25 05:57:42,898 INFO  L138     BoogieDeclarations]: Found implementation of procedure setExceptions~address_ERC20
[2020-11-25 05:57:42,898 INFO  L130     BoogieDeclarations]: Found specification of procedure burnOwner_ERC20
[2020-11-25 05:57:42,898 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnOwner_ERC20
[2020-11-25 05:57:42,898 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 05:57:42,899 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 05:57:42,899 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 05:57:42,899 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 05:57:42,899 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 05:57:42,899 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 05:57:42,899 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 05:57:42,899 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 05:57:42,899 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 05:57:42,899 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 05:57:42,899 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 05:57:42,899 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 05:57:42,900 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 05:57:42,900 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 05:57:42,900 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 05:57:42,900 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 05:57:42,900 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 05:57:42,900 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 05:57:42,900 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 05:57:42,900 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 05:57:42,900 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 05:57:42,900 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 05:57:42,901 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 05:57:42,901 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 05:57:42,901 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 05:57:42,901 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 05:57:42,901 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 05:57:42,901 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 05:57:42,901 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 05:57:42,901 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 05:57:42,901 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 05:57:42,901 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 05:57:42,901 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 05:57:42,902 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 05:57:42,902 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 05:57:42,902 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 05:57:42,902 INFO  L130     BoogieDeclarations]: Found specification of procedure Token_Token_NoBaseCtor__success
[2020-11-25 05:57:42,902 INFO  L130     BoogieDeclarations]: Found specification of procedure Token_Token
[2020-11-25 05:57:42,902 INFO  L138     BoogieDeclarations]: Found implementation of procedure Token_Token
[2020-11-25 05:57:42,902 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_Token
[2020-11-25 05:57:42,902 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_Token
[2020-11-25 05:57:42,902 INFO  L130     BoogieDeclarations]: Found specification of procedure setGovernance~address_Token
[2020-11-25 05:57:42,902 INFO  L138     BoogieDeclarations]: Found implementation of procedure setGovernance~address_Token
[2020-11-25 05:57:42,903 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_Token
[2020-11-25 05:57:42,903 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_Token
[2020-11-25 05:57:42,903 INFO  L130     BoogieDeclarations]: Found specification of procedure removeMinter~address_Token
[2020-11-25 05:57:42,903 INFO  L138     BoogieDeclarations]: Found implementation of procedure removeMinter~address_Token
[2020-11-25 05:57:42,903 INFO  L130     BoogieDeclarations]: Found specification of procedure governance_Token
[2020-11-25 05:57:42,903 INFO  L138     BoogieDeclarations]: Found implementation of procedure governance_Token
[2020-11-25 05:57:42,903 INFO  L130     BoogieDeclarations]: Found specification of procedure minters~address_Token
[2020-11-25 05:57:42,903 INFO  L138     BoogieDeclarations]: Found implementation of procedure minters~address_Token
[2020-11-25 05:57:42,903 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 05:57:42,903 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 05:57:42,904 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 05:57:42,904 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 05:57:42,904 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 05:57:42,904 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Context
[2020-11-25 05:57:42,904 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Context
[2020-11-25 05:57:42,904 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 05:57:42,904 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 05:57:42,904 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 05:57:42,904 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 05:57:42,905 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 05:57:42,905 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 05:57:42,905 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Token
[2020-11-25 05:57:42,905 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 05:57:42,905 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 05:57:42,905 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 05:57:42,905 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 05:57:42,905 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 05:57:42,905 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__fail
[2020-11-25 05:57:42,905 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__success
[2020-11-25 05:57:42,906 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__fail
[2020-11-25 05:57:42,906 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__fail
[2020-11-25 05:57:42,906 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 05:57:42,906 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 05:57:42,906 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 05:57:42,906 INFO  L130     BoogieDeclarations]: Found specification of procedure setAllow_ERC20__success
[2020-11-25 05:57:42,906 INFO  L130     BoogieDeclarations]: Found specification of procedure setAllow_ERC20__fail
[2020-11-25 05:57:42,906 INFO  L130     BoogieDeclarations]: Found specification of procedure setExceptions~address_ERC20__success
[2020-11-25 05:57:42,906 INFO  L130     BoogieDeclarations]: Found specification of procedure setExceptions~address_ERC20__fail
[2020-11-25 05:57:42,906 INFO  L130     BoogieDeclarations]: Found specification of procedure burnOwner_ERC20__success
[2020-11-25 05:57:42,907 INFO  L130     BoogieDeclarations]: Found specification of procedure burnOwner_ERC20__fail
[2020-11-25 05:57:42,907 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 05:57:42,907 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 05:57:42,907 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 05:57:42,907 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 05:57:42,907 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 05:57:42,907 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 05:57:42,907 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 05:57:42,907 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 05:57:42,907 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 05:57:42,908 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 05:57:42,908 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 05:57:42,908 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 05:57:42,908 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 05:57:42,908 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 05:57:42,908 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 05:57:42,908 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 05:57:42,908 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 05:57:42,908 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 05:57:42,908 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 05:57:42,909 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 05:57:42,909 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 05:57:42,909 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 05:57:42,909 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 05:57:42,909 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 05:57:42,909 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 05:57:42,909 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 05:57:42,909 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 05:57:42,909 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 05:57:42,909 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 05:57:42,909 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 05:57:42,909 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 05:57:42,909 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 05:57:42,910 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 05:57:42,910 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 05:57:42,910 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 05:57:42,910 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 05:57:42,910 INFO  L130     BoogieDeclarations]: Found specification of procedure Token_Token_NoBaseCtor__fail
[2020-11-25 05:57:42,910 INFO  L130     BoogieDeclarations]: Found specification of procedure Token_Token__success
[2020-11-25 05:57:42,910 INFO  L130     BoogieDeclarations]: Found specification of procedure Token_Token__fail
[2020-11-25 05:57:42,910 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_Token__success
[2020-11-25 05:57:42,910 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_Token__fail
[2020-11-25 05:57:42,910 INFO  L130     BoogieDeclarations]: Found specification of procedure setGovernance~address_Token__success
[2020-11-25 05:57:42,911 INFO  L130     BoogieDeclarations]: Found specification of procedure setGovernance~address_Token__fail
[2020-11-25 05:57:42,911 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_Token__success
[2020-11-25 05:57:42,911 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_Token__fail
[2020-11-25 05:57:42,911 INFO  L130     BoogieDeclarations]: Found specification of procedure removeMinter~address_Token__success
[2020-11-25 05:57:42,911 INFO  L130     BoogieDeclarations]: Found specification of procedure removeMinter~address_Token__fail
[2020-11-25 05:57:42,911 INFO  L130     BoogieDeclarations]: Found specification of procedure governance_Token__success
[2020-11-25 05:57:42,911 INFO  L130     BoogieDeclarations]: Found specification of procedure governance_Token__fail
[2020-11-25 05:57:42,911 INFO  L130     BoogieDeclarations]: Found specification of procedure minters~address_Token__success
[2020-11-25 05:57:42,911 INFO  L130     BoogieDeclarations]: Found specification of procedure minters~address_Token__fail
[2020-11-25 05:57:42,911 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 05:57:42,911 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 05:57:42,911 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 05:57:42,911 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 05:57:42,911 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 05:57:42,912 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 05:57:42,912 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 05:57:42,912 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 05:57:42,912 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 05:57:42,912 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__fail
[2020-11-25 05:57:42,912 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__success
[2020-11-25 05:57:42,912 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__fail
[2020-11-25 05:57:42,912 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__success
[2020-11-25 05:57:42,912 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__fail
[2020-11-25 05:57:42,912 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__success
[2020-11-25 05:57:42,912 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 05:57:42,912 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 05:57:42,912 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 05:57:42,912 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 05:57:42,913 INFO  L138     BoogieDeclarations]: Found implementation of procedure setAllow_ERC20__fail
[2020-11-25 05:57:42,913 INFO  L138     BoogieDeclarations]: Found implementation of procedure setAllow_ERC20__success
[2020-11-25 05:57:42,913 INFO  L138     BoogieDeclarations]: Found implementation of procedure setExceptions~address_ERC20__fail
[2020-11-25 05:57:42,913 INFO  L138     BoogieDeclarations]: Found implementation of procedure setExceptions~address_ERC20__success
[2020-11-25 05:57:42,913 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnOwner_ERC20__fail
[2020-11-25 05:57:42,913 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnOwner_ERC20__success
[2020-11-25 05:57:42,913 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 05:57:42,913 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 05:57:42,913 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 05:57:42,913 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 05:57:42,913 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 05:57:42,913 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 05:57:42,913 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 05:57:42,914 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 05:57:42,914 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 05:57:42,914 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 05:57:42,914 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 05:57:42,914 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 05:57:42,914 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 05:57:42,914 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 05:57:42,914 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 05:57:42,914 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 05:57:42,914 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 05:57:42,914 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 05:57:42,914 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 05:57:42,915 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 05:57:42,915 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 05:57:42,915 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 05:57:42,915 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 05:57:42,915 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 05:57:42,915 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 05:57:42,915 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 05:57:42,915 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 05:57:42,915 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 05:57:42,915 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 05:57:42,915 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 05:57:42,916 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 05:57:42,916 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 05:57:42,916 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 05:57:42,916 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 05:57:42,916 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 05:57:42,916 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 05:57:42,916 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 05:57:42,916 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 05:57:42,916 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 05:57:42,916 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 05:57:42,916 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 05:57:42,916 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 05:57:42,917 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 05:57:42,917 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 05:57:42,917 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 05:57:42,917 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 05:57:42,917 INFO  L138     BoogieDeclarations]: Found implementation of procedure Token_Token_NoBaseCtor__fail
[2020-11-25 05:57:42,917 INFO  L138     BoogieDeclarations]: Found implementation of procedure Token_Token_NoBaseCtor__success
[2020-11-25 05:57:42,917 INFO  L138     BoogieDeclarations]: Found implementation of procedure Token_Token__fail
[2020-11-25 05:57:42,917 INFO  L138     BoogieDeclarations]: Found implementation of procedure Token_Token__success
[2020-11-25 05:57:42,917 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_Token__fail
[2020-11-25 05:57:42,917 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_Token__success
[2020-11-25 05:57:42,917 INFO  L138     BoogieDeclarations]: Found implementation of procedure setGovernance~address_Token__fail
[2020-11-25 05:57:42,918 INFO  L138     BoogieDeclarations]: Found implementation of procedure setGovernance~address_Token__success
[2020-11-25 05:57:42,918 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_Token__fail
[2020-11-25 05:57:42,918 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_Token__success
[2020-11-25 05:57:42,918 INFO  L138     BoogieDeclarations]: Found implementation of procedure removeMinter~address_Token__fail
[2020-11-25 05:57:42,918 INFO  L138     BoogieDeclarations]: Found implementation of procedure removeMinter~address_Token__success
[2020-11-25 05:57:42,918 INFO  L138     BoogieDeclarations]: Found implementation of procedure governance_Token__fail
[2020-11-25 05:57:42,918 INFO  L138     BoogieDeclarations]: Found implementation of procedure governance_Token__success
[2020-11-25 05:57:42,918 INFO  L138     BoogieDeclarations]: Found implementation of procedure minters~address_Token__fail
[2020-11-25 05:57:42,918 INFO  L138     BoogieDeclarations]: Found implementation of procedure minters~address_Token__success
[2020-11-25 05:57:42,918 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 05:57:42,918 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 05:57:42,918 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 05:57:42,919 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 05:57:42,919 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 05:57:42,919 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 05:57:42,919 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 05:57:42,919 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 05:57:42,919 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Context
[2020-11-25 05:57:42,919 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Context
[2020-11-25 05:57:42,919 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 05:57:42,919 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 05:57:42,919 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 05:57:42,919 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 05:57:42,919 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 05:57:42,920 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 05:57:42,920 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Token
[2020-11-25 05:57:42,920 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 05:57:42,920 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 05:57:42,920 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 05:57:43,155 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 05:57:43,155 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 05:57:43,155 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 05:57:43,698 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 05:57:43,698 INFO  L286             CfgBuilder]: Removed 6 assue(true) statements.
[2020-11-25 05:57:43,702 INFO  L202        PluginConnector]: Adding new model Token_0x66b3037aa8dd64c3ef1aee13a4d1f2509f672d1c_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 05:57:43 BoogieIcfgContainer
[2020-11-25 05:57:43,702 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:57:42" (2/2) ...
[2020-11-25 05:57:43,703 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 05:57:43,703 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@2f7d3da1 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 05:57:43, skipping insertion in model container
[2020-11-25 05:57:43,703 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 05:57:43,704 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 05:57:43,704 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 05:57:43,705 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 05:57:43,706 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Token_0x66b3037aa8dd64c3ef1aee13a4d1f2509f672d1c_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:57:42" (1/3) ...
[2020-11-25 05:57:43,706 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@6c34fd25 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 05:57:43, skipping insertion in model container
[2020-11-25 05:57:43,706 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:57:42" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 05:57:43,750 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 05:57:43 NWAContainer
[2020-11-25 05:57:43,750 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 05:57:43,750 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 05:57:43,751 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 05:57:43,751 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 05:57:43,752 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Token_0x66b3037aa8dd64c3ef1aee13a4d1f2509f672d1c_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 05:57:43" (3/4) ...
[2020-11-25 05:57:43,753 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@642a4cfe and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 05:57:43, skipping insertion in model container
[2020-11-25 05:57:43,753 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 05:57:43" (4/4) ...
[2020-11-25 05:57:43,756 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 05:57:43,761 INFO  L110   BuchiProductObserver]: Initial RCFG 2126 locations, 2889 edges
[2020-11-25 05:57:43,761 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 05:57:43,774 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 05:57:45,307 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 05:57:45,314 INFO  L110   BuchiProductObserver]: BuchiProgram size 5238 locations, 9364 edges
[2020-11-25 05:57:45,314 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 05:57:45 BoogieIcfgContainer
[2020-11-25 05:57:45,315 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 05:57:45,315 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 05:57:45,315 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 05:57:45,316 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 05:57:45,317 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 05:57:45" (1/1) ...
[2020-11-25 05:57:45,471 INFO  L313           BlockEncoder]: Initial Icfg 5238 locations, 9364 edges
[2020-11-25 05:57:45,471 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 05:57:45,472 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 05:57:45,472 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 05:57:45,473 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 05:57:45,486 INFO  L70    emoveInfeasibleEdges]: Removed 156 edges and 15 locations because of local infeasibility
[2020-11-25 05:57:45,498 INFO  L70        RemoveSinkStates]: Removed 104 edges and 69 locations by removing sink states
[2020-11-25 05:57:45,511 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 05:57:45,517 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 05:57:45,523 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 05:57:45,523 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 05:57:45,528 INFO  L313           BlockEncoder]: Encoded RCFG 5134 locations, 9075 edges
[2020-11-25 05:57:45,529 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 05:57:45 BasicIcfg
[2020-11-25 05:57:45,529 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 05:57:45,529 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 05:57:45,529 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 05:57:45,532 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 05:57:45,532 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 05:57:45,532 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Token_0x66b3037aa8dd64c3ef1aee13a4d1f2509f672d1c_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:57:42" (1/6) ...
[2020-11-25 05:57:45,534 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@23faf1b4 and model type Token_0x66b3037aa8dd64c3ef1aee13a4d1f2509f672d1c_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 05:57:45, skipping insertion in model container
[2020-11-25 05:57:45,534 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 05:57:45,534 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:57:42" (2/6) ...
[2020-11-25 05:57:45,534 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@23faf1b4 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 05:57:45, skipping insertion in model container
[2020-11-25 05:57:45,534 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 05:57:45,534 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Token_0x66b3037aa8dd64c3ef1aee13a4d1f2509f672d1c_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 05:57:43" (3/6) ...
[2020-11-25 05:57:45,535 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@23faf1b4 and model type Token_0x66b3037aa8dd64c3ef1aee13a4d1f2509f672d1c_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 05:57:45, skipping insertion in model container
[2020-11-25 05:57:45,535 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 05:57:45,535 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 05:57:43" (4/6) ...
[2020-11-25 05:57:45,535 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@23faf1b4 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 05:57:45, skipping insertion in model container
[2020-11-25 05:57:45,535 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 05:57:45,535 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 05:57:45" (5/6) ...
[2020-11-25 05:57:45,536 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@23faf1b4 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 05:57:45, skipping insertion in model container
[2020-11-25 05:57:45,536 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 05:57:45,536 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 05:57:45" (6/6) ...
[2020-11-25 05:57:45,537 INFO  L404   chiAutomizerObserver]: Analyzing ICFG Token_0x66b3037aa8dd64c3ef1aee13a4d1f2509f672d1c_transfer-self.bpl_BEv2
[2020-11-25 05:57:45,572 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 05:57:45,572 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 05:57:45,572 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 05:57:45,572 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 05:57:45,572 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 05:57:45,572 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 05:57:45,572 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 05:57:45,572 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 05:57:45,572 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 05:57:45,615 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5134 states.
[2020-11-25 05:57:45,675 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:57:45,675 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:57:45,675 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:57:45,683 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:57:45,683 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:57:45,683 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 05:57:45,683 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5134 states.
[2020-11-25 05:57:45,709 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:57:45,709 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:57:45,709 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:57:45,711 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:57:45,711 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5691]              assume null == 0;
[L5692]  CALL        call this := FreshRefGenerator__success();
[L2547]              havoc newRef;
[L2548]              assume Alloc[newRef] == false;
[L2549]              Alloc[newRef] := true;
[L2550]              assume newRef != null;
[L5692]  RET         call this := FreshRefGenerator__success();
[L5693]              assume now >= 0;
[L5694]              assume DType[this] == Token;
[L5695]              assume msgvalue_MSG == 0;
[L5696]              gas := gas - 53000;
[L5697]  CALL        call Token_Token(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L1447]              havoc __exception;
[L1448]              revert := false;
[L1449]  COND FALSE  !(__exception)
[L1478]  CALL        call Token_Token__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L3817]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2611]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2596]              assume msgsender_MSG != null;
[L2597]              Balance[this] := 0;
[L2611]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2612]  COND FALSE  !(revert)
[L3817]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3818]  COND TRUE   revert
[L1478]  RET         call Token_Token__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L1479]              assume !revert && gas >= 0;
[L5697]  RET         call Token_Token(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L5698]              assume !revert && gas >= 0;

Loop:
[L5701]  CALL        call CorralChoice_Token(this);
[L5496]              havoc msgsender_MSG;
[L5497]              havoc msgvalue_MSG;
[L5498]              havoc choice;
[L5499]              havoc __ret_0_totalSupply;
[L5500]              havoc account_s181;
[L5501]              havoc __ret_0_balanceOf;
[L5502]              havoc recipient_s200;
[L5503]              havoc amount_s200;
[L5504]              havoc __ret_0_transfer;
[L5505]              havoc owner_s216;
[L5506]              havoc spender_s216;
[L5507]              havoc __ret_0_allowance;
[L5508]              havoc spender_s235;
[L5509]              havoc amount_s235;
[L5510]              havoc __ret_0_approve;
[L5511]              havoc sender_s271;
[L5512]              havoc recipient_s271;
[L5513]              havoc amount_s271;
[L5514]              havoc __ret_0_transferFrom;
[L5515]              havoc owner_s119;
[L5516]              havoc someAddress_s143;
[L5517]              havoc spender_s298;
[L5518]              havoc addedValue_s298;
[L5519]              havoc __ret_0_increaseAllowance;
[L5520]              havoc spender_s326;
[L5521]              havoc subtractedValue_s326;
[L5522]              havoc __ret_0_decreaseAllowance;
[L5523]              havoc name_s544;
[L5524]              havoc symbol_s544;
[L5525]              havoc decimals_s544;
[L5526]              havoc __ret_0_name;
[L5527]              havoc __ret_0_symbol;
[L5528]              havoc __ret_0_decimals;
[L5529]              havoc __ret_0_governance;
[L5530]              havoc arg812_s0;
[L5531]              havoc __ret_0_minters;
[L5532]              havoc name_s730;
[L5533]              havoc ticker_s730;
[L5534]              havoc amount_s730;
[L5535]              havoc account_s751;
[L5536]              havoc amount_s751;
[L5537]              havoc _governance_s769;
[L5538]              havoc _minter_s789;
[L5539]              havoc _minter_s809;
[L5540]              havoc tmpNow;
[L5541]              havoc gas;
[L5542]              assume gas > 4000000 && gas <= 8000000;
[L5543]              tmpNow := now;
[L5544]              havoc now;
[L5545]              assume now > tmpNow;
[L5546]              assume msgsender_MSG != null;
[L5547]              assume DType[msgsender_MSG] != IERC20;
[L5548]              assume DType[msgsender_MSG] != Context;
[L5549]              assume DType[msgsender_MSG] != ERC20;
[L5550]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5551]              assume DType[msgsender_MSG] != SafeMath;
[L5552]              assume DType[msgsender_MSG] != Token;
[L5553]              Alloc[msgsender_MSG] := true;
[L5554]  COND TRUE   choice == 20
[L5555]              gas := gas - 21000;
[L5556]  COND FALSE  !(gas >= 0)
[L5701]  RET         call CorralChoice_Token(this);

[2020-11-25 05:57:45,726 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:57:45,726 INFO  L82        PathProgramCache]: Analyzing trace with hash 1558463337, now seen corresponding path program 1 times
[2020-11-25 05:57:45,730 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:57:45,750 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:57:45,783 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 05:57:45,784 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 05:57:45,785 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 05:57:46,090 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:57:46,099 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 05:57:46,099 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 05:57:46,101 INFO  L87              Difference]: Start difference. First operand 5134 states. Second operand 3 states.
[2020-11-25 05:57:46,347 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:57:46,347 INFO  L93              Difference]: Finished difference Result 3491 states and 4068 transitions.
[2020-11-25 05:57:46,347 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 05:57:46,348 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3491 states and 4068 transitions.
[2020-11-25 05:57:46,366 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:57:46,394 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3491 states to 3491 states and 4068 transitions.
[2020-11-25 05:57:46,395 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 05:57:46,397 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 915
[2020-11-25 05:57:46,397 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3491 states and 4068 transitions.
[2020-11-25 05:57:46,405 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:57:46,405 INFO  L728         BuchiCegarLoop]: Abstraction has 3491 states and 4068 transitions.
[2020-11-25 05:57:46,419 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3491 states and 4068 transitions.
[2020-11-25 05:57:46,472 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3491 to 3491.
[2020-11-25 05:57:46,472 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3491 states.
[2020-11-25 05:57:46,479 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3491 states to 3491 states and 4068 transitions.
[2020-11-25 05:57:46,479 INFO  L751         BuchiCegarLoop]: Abstraction has 3491 states and 4068 transitions.
[2020-11-25 05:57:46,479 INFO  L631         BuchiCegarLoop]: Abstraction has 3491 states and 4068 transitions.
[2020-11-25 05:57:46,480 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 05:57:46,480 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3491 states and 4068 transitions.
[2020-11-25 05:57:46,488 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:57:46,488 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:57:46,488 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:57:46,490 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:57:46,490 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5691]              assume null == 0;
[L5692]  CALL        call this := FreshRefGenerator__success();
[L2547]              havoc newRef;
[L2548]              assume Alloc[newRef] == false;
[L2549]              Alloc[newRef] := true;
[L2550]              assume newRef != null;
[L5692]  RET         call this := FreshRefGenerator__success();
[L5693]              assume now >= 0;
[L5694]              assume DType[this] == Token;
[L5695]              assume msgvalue_MSG == 0;
[L5696]              gas := gas - 53000;
[L5697]  CALL        call Token_Token(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L1447]              havoc __exception;
[L1448]              revert := false;
[L1449]  COND FALSE  !(__exception)
[L1478]  CALL        call Token_Token__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L3817]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2611]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2596]              assume msgsender_MSG != null;
[L2597]              Balance[this] := 0;
[L2611]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2612]  COND FALSE  !(revert)
[L3817]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3818]  COND TRUE   revert
[L1478]  RET         call Token_Token__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L1479]              assume !revert && gas >= 0;
[L5697]  RET         call Token_Token(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L5698]              assume !revert && gas >= 0;
[L5701]  CALL        call CorralChoice_Token(this);
[L5496]              havoc msgsender_MSG;
[L5497]              havoc msgvalue_MSG;
[L5498]              havoc choice;
[L5499]              havoc __ret_0_totalSupply;
[L5500]              havoc account_s181;
[L5501]              havoc __ret_0_balanceOf;
[L5502]              havoc recipient_s200;
[L5503]              havoc amount_s200;
[L5504]              havoc __ret_0_transfer;
[L5505]              havoc owner_s216;
[L5506]              havoc spender_s216;
[L5507]              havoc __ret_0_allowance;
[L5508]              havoc spender_s235;
[L5509]              havoc amount_s235;
[L5510]              havoc __ret_0_approve;
[L5511]              havoc sender_s271;
[L5512]              havoc recipient_s271;
[L5513]              havoc amount_s271;
[L5514]              havoc __ret_0_transferFrom;
[L5515]              havoc owner_s119;
[L5516]              havoc someAddress_s143;
[L5517]              havoc spender_s298;
[L5518]              havoc addedValue_s298;
[L5519]              havoc __ret_0_increaseAllowance;
[L5520]              havoc spender_s326;
[L5521]              havoc subtractedValue_s326;
[L5522]              havoc __ret_0_decreaseAllowance;
[L5523]              havoc name_s544;
[L5524]              havoc symbol_s544;
[L5525]              havoc decimals_s544;
[L5526]              havoc __ret_0_name;
[L5527]              havoc __ret_0_symbol;
[L5528]              havoc __ret_0_decimals;
[L5529]              havoc __ret_0_governance;
[L5530]              havoc arg812_s0;
[L5531]              havoc __ret_0_minters;
[L5532]              havoc name_s730;
[L5533]              havoc ticker_s730;
[L5534]              havoc amount_s730;
[L5535]              havoc account_s751;
[L5536]              havoc amount_s751;
[L5537]              havoc _governance_s769;
[L5538]              havoc _minter_s789;
[L5539]              havoc _minter_s809;
[L5540]              havoc tmpNow;
[L5541]              havoc gas;
[L5542]              assume gas > 4000000 && gas <= 8000000;
[L5543]              tmpNow := now;
[L5544]              havoc now;
[L5545]              assume now > tmpNow;
[L5546]              assume msgsender_MSG != null;
[L5547]              assume DType[msgsender_MSG] != IERC20;
[L5548]              assume DType[msgsender_MSG] != Context;
[L5549]              assume DType[msgsender_MSG] != ERC20;
[L5550]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5551]              assume DType[msgsender_MSG] != SafeMath;
[L5552]              assume DType[msgsender_MSG] != Token;
[L5553]              Alloc[msgsender_MSG] := true;
[L5554]  COND FALSE  !(choice == 20)
[L5560]  COND FALSE  !(choice == 19)
[L5566]  COND TRUE   choice == 18
[L5567]              gas := gas - 21000;
[L5568]  COND TRUE   gas >= 0
[L5569]              assume amount_s200 >= 0 && amount_s200 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5570]              assume msgvalue_MSG == 0;
[L5571]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s200, amount_s200);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s200 && amount_s200 <= _balances_ERC20[this][msgsender_MSG]) && amount_s200 >= 0) && amount_s200 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s200] >= 0) && _balances_ERC20[this][recipient_s200] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L646]               havoc __exception;
[L647]               revert := false;
[L648]   COND FALSE  !(__exception)
[L677]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s200, amount_s200);
[L2859]  COND TRUE   DType[this] == Token
[L2860]  CALL        call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2625]              __ret_0_ := msgsender_MSG;
[L2860]  RET         call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2861]  COND TRUE   revert
[L677]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s200, amount_s200);
[L678]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_Token[this] == old(governance_Token[this])) && minters_Token[this] == old(minters_Token[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && exceptions_ERC20[this] == old(exceptions_ERC20[this])) && uniswap_ERC20[this] == old(uniswap_ERC20[this])) && _owner_ERC20[this] == old(_owner_ERC20[this]));
[L2]                 revert := revert_hold;
[L5571]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s200, amount_s200);
[L5701]  RET         call CorralChoice_Token(this);

Loop:
[L5701]  CALL        call CorralChoice_Token(this);
[L5496]              havoc msgsender_MSG;
[L5497]              havoc msgvalue_MSG;
[L5498]              havoc choice;
[L5499]              havoc __ret_0_totalSupply;
[L5500]              havoc account_s181;
[L5501]              havoc __ret_0_balanceOf;
[L5502]              havoc recipient_s200;
[L5503]              havoc amount_s200;
[L5504]              havoc __ret_0_transfer;
[L5505]              havoc owner_s216;
[L5506]              havoc spender_s216;
[L5507]              havoc __ret_0_allowance;
[L5508]              havoc spender_s235;
[L5509]              havoc amount_s235;
[L5510]              havoc __ret_0_approve;
[L5511]              havoc sender_s271;
[L5512]              havoc recipient_s271;
[L5513]              havoc amount_s271;
[L5514]              havoc __ret_0_transferFrom;
[L5515]              havoc owner_s119;
[L5516]              havoc someAddress_s143;
[L5517]              havoc spender_s298;
[L5518]              havoc addedValue_s298;
[L5519]              havoc __ret_0_increaseAllowance;
[L5520]              havoc spender_s326;
[L5521]              havoc subtractedValue_s326;
[L5522]              havoc __ret_0_decreaseAllowance;
[L5523]              havoc name_s544;
[L5524]              havoc symbol_s544;
[L5525]              havoc decimals_s544;
[L5526]              havoc __ret_0_name;
[L5527]              havoc __ret_0_symbol;
[L5528]              havoc __ret_0_decimals;
[L5529]              havoc __ret_0_governance;
[L5530]              havoc arg812_s0;
[L5531]              havoc __ret_0_minters;
[L5532]              havoc name_s730;
[L5533]              havoc ticker_s730;
[L5534]              havoc amount_s730;
[L5535]              havoc account_s751;
[L5536]              havoc amount_s751;
[L5537]              havoc _governance_s769;
[L5538]              havoc _minter_s789;
[L5539]              havoc _minter_s809;
[L5540]              havoc tmpNow;
[L5541]              havoc gas;
[L5542]              assume gas > 4000000 && gas <= 8000000;
[L5543]              tmpNow := now;
[L5544]              havoc now;
[L5545]              assume now > tmpNow;
[L5546]              assume msgsender_MSG != null;
[L5547]              assume DType[msgsender_MSG] != IERC20;
[L5548]              assume DType[msgsender_MSG] != Context;
[L5549]              assume DType[msgsender_MSG] != ERC20;
[L5550]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5551]              assume DType[msgsender_MSG] != SafeMath;
[L5552]              assume DType[msgsender_MSG] != Token;
[L5553]              Alloc[msgsender_MSG] := true;
[L5554]  COND FALSE  !(choice == 20)
[L5560]  COND FALSE  !(choice == 19)
[L5566]  COND TRUE   choice == 18
[L5567]              gas := gas - 21000;
[L5568]  COND TRUE   gas >= 0
[L5569]              assume amount_s200 >= 0 && amount_s200 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5570]              assume msgvalue_MSG == 0;
[L5571]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s200, amount_s200);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s200 && amount_s200 <= _balances_ERC20[this][msgsender_MSG]) && amount_s200 >= 0) && amount_s200 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s200] >= 0) && _balances_ERC20[this][recipient_s200] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L646]               havoc __exception;
[L647]               revert := false;
[L648]   COND FALSE  !(__exception)
[L677]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s200, amount_s200);
[L2859]  COND TRUE   DType[this] == Token
[L2860]  CALL        call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2625]              __ret_0_ := msgsender_MSG;
[L2860]  RET         call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2861]  COND TRUE   revert
[L677]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s200, amount_s200);
[L678]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_Token[this] == old(governance_Token[this])) && minters_Token[this] == old(minters_Token[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && exceptions_ERC20[this] == old(exceptions_ERC20[this])) && uniswap_ERC20[this] == old(uniswap_ERC20[this])) && _owner_ERC20[this] == old(_owner_ERC20[this]));
[L2]                 revert := revert_hold;
[L5571]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s200, amount_s200);
[L5701]  RET         call CorralChoice_Token(this);

[2020-11-25 05:57:46,493 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:57:46,494 INFO  L82        PathProgramCache]: Analyzing trace with hash 715240840, now seen corresponding path program 1 times
[2020-11-25 05:57:46,494 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:57:46,505 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:57:46,525 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 05:57:46,525 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 05:57:46,525 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 05:57:46,526 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:57:46,527 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 05:57:46,527 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 05:57:46,527 INFO  L87              Difference]: Start difference. First operand 3491 states and 4068 transitions. cyclomatic complexity: 579 Second operand 3 states.
[2020-11-25 05:57:46,608 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:57:46,608 INFO  L93              Difference]: Finished difference Result 4419 states and 5110 transitions.
[2020-11-25 05:57:46,608 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 05:57:46,609 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4419 states and 5110 transitions.
[2020-11-25 05:57:46,626 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 05:57:46,642 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4419 states to 4419 states and 5110 transitions.
[2020-11-25 05:57:46,643 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1203
[2020-11-25 05:57:46,644 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1203
[2020-11-25 05:57:46,644 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4419 states and 5110 transitions.
[2020-11-25 05:57:46,650 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:57:46,650 INFO  L728         BuchiCegarLoop]: Abstraction has 4419 states and 5110 transitions.
[2020-11-25 05:57:46,654 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4419 states and 5110 transitions.
[2020-11-25 05:57:46,689 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4419 to 3715.
[2020-11-25 05:57:46,689 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3715 states.
[2020-11-25 05:57:46,693 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3715 states to 3715 states and 4254 transitions.
[2020-11-25 05:57:46,693 INFO  L751         BuchiCegarLoop]: Abstraction has 3715 states and 4254 transitions.
[2020-11-25 05:57:46,693 INFO  L631         BuchiCegarLoop]: Abstraction has 3715 states and 4254 transitions.
[2020-11-25 05:57:46,693 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 05:57:46,693 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3715 states and 4254 transitions.
[2020-11-25 05:57:46,702 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:57:46,703 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:57:46,703 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:57:46,707 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:57:46,707 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5691]              assume null == 0;
[L5692]  CALL        call this := FreshRefGenerator__success();
[L2547]              havoc newRef;
[L2548]              assume Alloc[newRef] == false;
[L2549]              Alloc[newRef] := true;
[L2550]              assume newRef != null;
[L5692]  RET         call this := FreshRefGenerator__success();
[L5693]              assume now >= 0;
[L5694]              assume DType[this] == Token;
[L5695]              assume msgvalue_MSG == 0;
[L5696]              gas := gas - 53000;
[L5697]  CALL        call Token_Token(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L1447]              havoc __exception;
[L1448]              revert := false;
[L1449]  COND FALSE  !(__exception)
[L1478]  CALL        call Token_Token__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L3817]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2611]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2596]              assume msgsender_MSG != null;
[L2597]              Balance[this] := 0;
[L2611]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2612]  COND FALSE  !(revert)
[L3817]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3818]  COND FALSE  !(revert)
[L3821]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3821]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3822]  COND FALSE  !(revert)
[L3826]              havoc __var_29;
[L3827]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_29);
[L2681]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2611]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2596]              assume msgsender_MSG != null;
[L2597]              Balance[this] := 0;
[L2611]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2612]  COND FALSE  !(revert)
[L2681]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2682]  COND FALSE  !(revert)
[L2685]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2685]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2686]  COND FALSE  !(revert)
[L2689]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, owner_s119);
[L2649]              assume msgsender_MSG != null;
[L2650]              Balance[this] := 0;
[L2651]              _balances_ERC20[this] := zeroRefintArr();
[L2652]              sum__balances0[this] := 0;
[L2653]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2654]              sum__allowances1[this] := 0;
[L2655]              exceptions_ERC20[this] := zeroRefboolArr();
[L2656]              uniswap_ERC20[this] := null;
[L2657]              _owner_ERC20[this] := null;
[L2658]              _totalSupply_ERC20[this] := 0;
[L2660]              _owner_ERC20[this] := owner_s119;
[L2689]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, owner_s119);
[L2690]  COND FALSE  !(revert)
[L3827]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_29);
[L3828]  COND FALSE  !(revert)
[L3831]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, 18);
[L3549]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3549]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3550]  COND FALSE  !(revert)
[L3553]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s544, symbol_s544, decimals_s544);
[L3524]              assume msgsender_MSG != null;
[L3525]              Balance[this] := 0;
[L3526]              _name_ERC20Detailed[this] := -1081022691;
[L3527]              _symbol_ERC20Detailed[this] := -1081022691;
[L3528]              _decimals_ERC20Detailed[this] := 0;
[L3530]              _name_ERC20Detailed[this] := name_s544;
[L3531]              _symbol_ERC20Detailed[this] := symbol_s544;
[L3532]              _decimals_ERC20Detailed[this] := decimals_s544;
[L3553]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s544, symbol_s544, decimals_s544);
[L3554]  COND FALSE  !(revert)
[L3831]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, 18);
[L3832]  COND FALSE  !(revert)
[L3835]  CALL        call Token_Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L3763]              assume msgsender_MSG != null;
[L3764]              Balance[this] := 0;
[L3765]              governance_Token[this] := null;
[L3766]              minters_Token[this] := zeroRefboolArr();
[L3769]              havoc __var_27;
[L3770]              governance_Token[this] := __var_27;
[L3772]              havoc __var_28;
[L3773]  CALL        call addMinter~address_Token__success(this, msgsender_MSG, msgvalue_MSG, __var_28);
[L3902]  COND TRUE   !(msgsender_MSG == governance_Token[this])
[L3903]              revert := true;
[L3773]  RET         call addMinter~address_Token__success(this, msgsender_MSG, msgvalue_MSG, __var_28);
[L3774]  COND TRUE   revert
[L3835]  RET         call Token_Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L3836]  COND FALSE  !(revert)
[L1478]  RET         call Token_Token__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L1479]              assume !revert && gas >= 0;
[L5697]  RET         call Token_Token(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L5698]              assume !revert && gas >= 0;
[L5701]  CALL        call CorralChoice_Token(this);
[L5496]              havoc msgsender_MSG;
[L5497]              havoc msgvalue_MSG;
[L5498]              havoc choice;
[L5499]              havoc __ret_0_totalSupply;
[L5500]              havoc account_s181;
[L5501]              havoc __ret_0_balanceOf;
[L5502]              havoc recipient_s200;
[L5503]              havoc amount_s200;
[L5504]              havoc __ret_0_transfer;
[L5505]              havoc owner_s216;
[L5506]              havoc spender_s216;
[L5507]              havoc __ret_0_allowance;
[L5508]              havoc spender_s235;
[L5509]              havoc amount_s235;
[L5510]              havoc __ret_0_approve;
[L5511]              havoc sender_s271;
[L5512]              havoc recipient_s271;
[L5513]              havoc amount_s271;
[L5514]              havoc __ret_0_transferFrom;
[L5515]              havoc owner_s119;
[L5516]              havoc someAddress_s143;
[L5517]              havoc spender_s298;
[L5518]              havoc addedValue_s298;
[L5519]              havoc __ret_0_increaseAllowance;
[L5520]              havoc spender_s326;
[L5521]              havoc subtractedValue_s326;
[L5522]              havoc __ret_0_decreaseAllowance;
[L5523]              havoc name_s544;
[L5524]              havoc symbol_s544;
[L5525]              havoc decimals_s544;
[L5526]              havoc __ret_0_name;
[L5527]              havoc __ret_0_symbol;
[L5528]              havoc __ret_0_decimals;
[L5529]              havoc __ret_0_governance;
[L5530]              havoc arg812_s0;
[L5531]              havoc __ret_0_minters;
[L5532]              havoc name_s730;
[L5533]              havoc ticker_s730;
[L5534]              havoc amount_s730;
[L5535]              havoc account_s751;
[L5536]              havoc amount_s751;
[L5537]              havoc _governance_s769;
[L5538]              havoc _minter_s789;
[L5539]              havoc _minter_s809;
[L5540]              havoc tmpNow;
[L5541]              havoc gas;
[L5542]              assume gas > 4000000 && gas <= 8000000;
[L5543]              tmpNow := now;
[L5544]              havoc now;
[L5545]              assume now > tmpNow;
[L5546]              assume msgsender_MSG != null;
[L5547]              assume DType[msgsender_MSG] != IERC20;
[L5548]              assume DType[msgsender_MSG] != Context;
[L5549]              assume DType[msgsender_MSG] != ERC20;
[L5550]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5551]              assume DType[msgsender_MSG] != SafeMath;
[L5552]              assume DType[msgsender_MSG] != Token;
[L5553]              Alloc[msgsender_MSG] := true;
[L5554]  COND FALSE  !(choice == 20)
[L5560]  COND FALSE  !(choice == 19)
[L5566]  COND TRUE   choice == 18
[L5567]              gas := gas - 21000;
[L5568]  COND TRUE   gas >= 0
[L5569]              assume amount_s200 >= 0 && amount_s200 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5570]              assume msgvalue_MSG == 0;
[L5571]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s200, amount_s200);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s200 && amount_s200 <= _balances_ERC20[this][msgsender_MSG]) && amount_s200 >= 0) && amount_s200 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s200] >= 0) && _balances_ERC20[this][recipient_s200] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L646]               havoc __exception;
[L647]               revert := false;
[L648]   COND FALSE  !(__exception)
[L677]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s200, amount_s200);
[L2859]  COND TRUE   DType[this] == Token
[L2860]  CALL        call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2625]              __ret_0_ := msgsender_MSG;
[L2860]  RET         call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2861]  COND FALSE  !(revert)
[L2872]  COND TRUE   DType[this] == Token
[L2873]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, recipient_s200, amount_s200);
[L3343]              __var_15 := null;
[L3344]  COND TRUE   !(sender_s383 != null)
[L3345]              revert := true;
[L2873]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, recipient_s200, amount_s200);
[L2874]  COND TRUE   revert
[L677]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s200, amount_s200);
[L678]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_Token[this] == old(governance_Token[this])) && minters_Token[this] == old(minters_Token[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && exceptions_ERC20[this] == old(exceptions_ERC20[this])) && uniswap_ERC20[this] == old(uniswap_ERC20[this])) && _owner_ERC20[this] == old(_owner_ERC20[this]));
[L2]                 revert := revert_hold;
[L5571]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s200, amount_s200);
[L5701]  RET         call CorralChoice_Token(this);

Loop:
[L5701]  CALL        call CorralChoice_Token(this);
[L5496]              havoc msgsender_MSG;
[L5497]              havoc msgvalue_MSG;
[L5498]              havoc choice;
[L5499]              havoc __ret_0_totalSupply;
[L5500]              havoc account_s181;
[L5501]              havoc __ret_0_balanceOf;
[L5502]              havoc recipient_s200;
[L5503]              havoc amount_s200;
[L5504]              havoc __ret_0_transfer;
[L5505]              havoc owner_s216;
[L5506]              havoc spender_s216;
[L5507]              havoc __ret_0_allowance;
[L5508]              havoc spender_s235;
[L5509]              havoc amount_s235;
[L5510]              havoc __ret_0_approve;
[L5511]              havoc sender_s271;
[L5512]              havoc recipient_s271;
[L5513]              havoc amount_s271;
[L5514]              havoc __ret_0_transferFrom;
[L5515]              havoc owner_s119;
[L5516]              havoc someAddress_s143;
[L5517]              havoc spender_s298;
[L5518]              havoc addedValue_s298;
[L5519]              havoc __ret_0_increaseAllowance;
[L5520]              havoc spender_s326;
[L5521]              havoc subtractedValue_s326;
[L5522]              havoc __ret_0_decreaseAllowance;
[L5523]              havoc name_s544;
[L5524]              havoc symbol_s544;
[L5525]              havoc decimals_s544;
[L5526]              havoc __ret_0_name;
[L5527]              havoc __ret_0_symbol;
[L5528]              havoc __ret_0_decimals;
[L5529]              havoc __ret_0_governance;
[L5530]              havoc arg812_s0;
[L5531]              havoc __ret_0_minters;
[L5532]              havoc name_s730;
[L5533]              havoc ticker_s730;
[L5534]              havoc amount_s730;
[L5535]              havoc account_s751;
[L5536]              havoc amount_s751;
[L5537]              havoc _governance_s769;
[L5538]              havoc _minter_s789;
[L5539]              havoc _minter_s809;
[L5540]              havoc tmpNow;
[L5541]              havoc gas;
[L5542]              assume gas > 4000000 && gas <= 8000000;
[L5543]              tmpNow := now;
[L5544]              havoc now;
[L5545]              assume now > tmpNow;
[L5546]              assume msgsender_MSG != null;
[L5547]              assume DType[msgsender_MSG] != IERC20;
[L5548]              assume DType[msgsender_MSG] != Context;
[L5549]              assume DType[msgsender_MSG] != ERC20;
[L5550]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5551]              assume DType[msgsender_MSG] != SafeMath;
[L5552]              assume DType[msgsender_MSG] != Token;
[L5553]              Alloc[msgsender_MSG] := true;
[L5554]  COND FALSE  !(choice == 20)
[L5560]  COND FALSE  !(choice == 19)
[L5566]  COND TRUE   choice == 18
[L5567]              gas := gas - 21000;
[L5568]  COND TRUE   gas >= 0
[L5569]              assume amount_s200 >= 0 && amount_s200 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5570]              assume msgvalue_MSG == 0;
[L5571]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s200, amount_s200);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s200 && amount_s200 <= _balances_ERC20[this][msgsender_MSG]) && amount_s200 >= 0) && amount_s200 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s200] >= 0) && _balances_ERC20[this][recipient_s200] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L646]               havoc __exception;
[L647]               revert := false;
[L648]   COND FALSE  !(__exception)
[L677]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s200, amount_s200);
[L2859]  COND TRUE   DType[this] == Token
[L2860]  CALL        call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2625]              __ret_0_ := msgsender_MSG;
[L2860]  RET         call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2861]  COND FALSE  !(revert)
[L2872]  COND TRUE   DType[this] == Token
[L2873]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, recipient_s200, amount_s200);
[L3343]              __var_15 := null;
[L3344]  COND TRUE   !(sender_s383 != null)
[L3345]              revert := true;
[L2873]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, recipient_s200, amount_s200);
[L2874]  COND TRUE   revert
[L677]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s200, amount_s200);
[L678]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_Token[this] == old(governance_Token[this])) && minters_Token[this] == old(minters_Token[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && exceptions_ERC20[this] == old(exceptions_ERC20[this])) && uniswap_ERC20[this] == old(uniswap_ERC20[this])) && _owner_ERC20[this] == old(_owner_ERC20[this]));
[L2]                 revert := revert_hold;
[L5571]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s200, amount_s200);
[L5701]  RET         call CorralChoice_Token(this);

[2020-11-25 05:57:46,714 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:57:46,714 INFO  L82        PathProgramCache]: Analyzing trace with hash 1550798567, now seen corresponding path program 1 times
[2020-11-25 05:57:46,715 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:57:46,731 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:57:46,781 INFO  L134       CoverageAnalysis]: Checked inductivity of 40 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 40 trivial. 0 not checked.
[2020-11-25 05:57:46,781 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 05:57:46,781 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 05:57:46,782 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:57:46,782 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 05:57:46,782 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 05:57:46,782 INFO  L87              Difference]: Start difference. First operand 3715 states and 4254 transitions. cyclomatic complexity: 541 Second operand 3 states.
[2020-11-25 05:57:46,860 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:57:46,860 INFO  L93              Difference]: Finished difference Result 4419 states and 5000 transitions.
[2020-11-25 05:57:46,860 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 05:57:46,860 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4419 states and 5000 transitions.
[2020-11-25 05:57:46,874 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 05:57:46,895 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4419 states to 4177 states and 4722 transitions.
[2020-11-25 05:57:46,896 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1116
[2020-11-25 05:57:46,897 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1136
[2020-11-25 05:57:46,897 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4177 states and 4722 transitions.
[2020-11-25 05:57:46,903 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:57:46,903 INFO  L728         BuchiCegarLoop]: Abstraction has 4177 states and 4722 transitions.
[2020-11-25 05:57:46,908 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4177 states and 4722 transitions.
[2020-11-25 05:57:46,948 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4177 to 3569.
[2020-11-25 05:57:46,948 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3569 states.
[2020-11-25 05:57:46,955 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3569 states to 3569 states and 3962 transitions.
[2020-11-25 05:57:46,955 INFO  L751         BuchiCegarLoop]: Abstraction has 3569 states and 3962 transitions.
[2020-11-25 05:57:46,955 INFO  L631         BuchiCegarLoop]: Abstraction has 3569 states and 3962 transitions.
[2020-11-25 05:57:46,955 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 05:57:46,955 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3569 states and 3962 transitions.
[2020-11-25 05:57:46,961 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:57:46,962 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:57:46,962 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:57:46,965 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:57:46,965 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5691]              assume null == 0;
[L5692]  CALL        call this := FreshRefGenerator__success();
[L2547]              havoc newRef;
[L2548]              assume Alloc[newRef] == false;
[L2549]              Alloc[newRef] := true;
[L2550]              assume newRef != null;
[L5692]  RET         call this := FreshRefGenerator__success();
[L5693]              assume now >= 0;
[L5694]              assume DType[this] == Token;
[L5695]              assume msgvalue_MSG == 0;
[L5696]              gas := gas - 53000;
[L5697]  CALL        call Token_Token(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L1447]              havoc __exception;
[L1448]              revert := false;
[L1449]  COND FALSE  !(__exception)
[L1478]  CALL        call Token_Token__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L3817]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2611]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2596]              assume msgsender_MSG != null;
[L2597]              Balance[this] := 0;
[L2611]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2612]  COND FALSE  !(revert)
[L3817]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3818]  COND FALSE  !(revert)
[L3821]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3821]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3822]  COND FALSE  !(revert)
[L3826]              havoc __var_29;
[L3827]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_29);
[L2681]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2611]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2596]              assume msgsender_MSG != null;
[L2597]              Balance[this] := 0;
[L2611]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2612]  COND FALSE  !(revert)
[L2681]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2682]  COND FALSE  !(revert)
[L2685]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2685]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2686]  COND FALSE  !(revert)
[L2689]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, owner_s119);
[L2649]              assume msgsender_MSG != null;
[L2650]              Balance[this] := 0;
[L2651]              _balances_ERC20[this] := zeroRefintArr();
[L2652]              sum__balances0[this] := 0;
[L2653]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2654]              sum__allowances1[this] := 0;
[L2655]              exceptions_ERC20[this] := zeroRefboolArr();
[L2656]              uniswap_ERC20[this] := null;
[L2657]              _owner_ERC20[this] := null;
[L2658]              _totalSupply_ERC20[this] := 0;
[L2660]              _owner_ERC20[this] := owner_s119;
[L2689]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, owner_s119);
[L2690]  COND FALSE  !(revert)
[L3827]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_29);
[L3828]  COND FALSE  !(revert)
[L3831]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, 18);
[L3549]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3549]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3550]  COND FALSE  !(revert)
[L3553]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s544, symbol_s544, decimals_s544);
[L3524]              assume msgsender_MSG != null;
[L3525]              Balance[this] := 0;
[L3526]              _name_ERC20Detailed[this] := -1081022691;
[L3527]              _symbol_ERC20Detailed[this] := -1081022691;
[L3528]              _decimals_ERC20Detailed[this] := 0;
[L3530]              _name_ERC20Detailed[this] := name_s544;
[L3531]              _symbol_ERC20Detailed[this] := symbol_s544;
[L3532]              _decimals_ERC20Detailed[this] := decimals_s544;
[L3553]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s544, symbol_s544, decimals_s544);
[L3554]  COND FALSE  !(revert)
[L3831]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, 18);
[L3832]  COND FALSE  !(revert)
[L3835]  CALL        call Token_Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L3763]              assume msgsender_MSG != null;
[L3764]              Balance[this] := 0;
[L3765]              governance_Token[this] := null;
[L3766]              minters_Token[this] := zeroRefboolArr();
[L3769]              havoc __var_27;
[L3770]              governance_Token[this] := __var_27;
[L3772]              havoc __var_28;
[L3773]  CALL        call addMinter~address_Token__success(this, msgsender_MSG, msgvalue_MSG, __var_28);
[L3902]  COND FALSE  !(!(msgsender_MSG == governance_Token[this]))
[L3906]              minters_Token[this][_minter_s789] := true;
[L3773]  RET         call addMinter~address_Token__success(this, msgsender_MSG, msgvalue_MSG, __var_28);
[L3774]  COND FALSE  !(revert)
[L3777]  CALL        call mint~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, governance_Token[this], amount_s730);
[L3859]  COND FALSE  !(!minters_Token[this][msgsender_MSG])
[L3863]  COND TRUE   DType[this] == Token
[L3864]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s751, amount_s751);
[L3399]              __var_19 := null;
[L3400]  COND FALSE  !(!(account_s426 != null))
[L3404]  CALL        call __var_20 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s426);
[L3642]              c_s594 := (a_s594 + b_s594) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3643]  COND FALSE  !(!(c_s594 >= a_s594))
[L3647]              __ret_0_ := c_s594;
[L3404]  RET         call __var_20 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s426);
[L3405]  COND FALSE  !(revert)
[L3408]              _totalSupply_ERC20[this] := __var_20;
[L3409]  CALL        call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s426], amount_s426);
[L3642]              c_s594 := (a_s594 + b_s594) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3643]  COND FALSE  !(!(c_s594 >= a_s594))
[L3647]              __ret_0_ := c_s594;
[L3409]  RET         call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s426], amount_s426);
[L3410]  COND FALSE  !(revert)
[L3413]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s426];
[L3414]              _balances_ERC20[this][account_s426] := __var_21;
[L3415]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s426];
[L3416]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3864]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s751, amount_s751);
[L3865]  COND FALSE  !(revert)
[L3777]  RET         call mint~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, governance_Token[this], amount_s730);
[L3778]  COND FALSE  !(revert)
[L3835]  RET         call Token_Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L3836]  COND FALSE  !(revert)
[L1478]  RET         call Token_Token__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L1479]              assume !revert && gas >= 0;
[L5697]  RET         call Token_Token(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L5698]              assume !revert && gas >= 0;
[L5701]  CALL        call CorralChoice_Token(this);
[L5496]              havoc msgsender_MSG;
[L5497]              havoc msgvalue_MSG;
[L5498]              havoc choice;
[L5499]              havoc __ret_0_totalSupply;
[L5500]              havoc account_s181;
[L5501]              havoc __ret_0_balanceOf;
[L5502]              havoc recipient_s200;
[L5503]              havoc amount_s200;
[L5504]              havoc __ret_0_transfer;
[L5505]              havoc owner_s216;
[L5506]              havoc spender_s216;
[L5507]              havoc __ret_0_allowance;
[L5508]              havoc spender_s235;
[L5509]              havoc amount_s235;
[L5510]              havoc __ret_0_approve;
[L5511]              havoc sender_s271;
[L5512]              havoc recipient_s271;
[L5513]              havoc amount_s271;
[L5514]              havoc __ret_0_transferFrom;
[L5515]              havoc owner_s119;
[L5516]              havoc someAddress_s143;
[L5517]              havoc spender_s298;
[L5518]              havoc addedValue_s298;
[L5519]              havoc __ret_0_increaseAllowance;
[L5520]              havoc spender_s326;
[L5521]              havoc subtractedValue_s326;
[L5522]              havoc __ret_0_decreaseAllowance;
[L5523]              havoc name_s544;
[L5524]              havoc symbol_s544;
[L5525]              havoc decimals_s544;
[L5526]              havoc __ret_0_name;
[L5527]              havoc __ret_0_symbol;
[L5528]              havoc __ret_0_decimals;
[L5529]              havoc __ret_0_governance;
[L5530]              havoc arg812_s0;
[L5531]              havoc __ret_0_minters;
[L5532]              havoc name_s730;
[L5533]              havoc ticker_s730;
[L5534]              havoc amount_s730;
[L5535]              havoc account_s751;
[L5536]              havoc amount_s751;
[L5537]              havoc _governance_s769;
[L5538]              havoc _minter_s789;
[L5539]              havoc _minter_s809;
[L5540]              havoc tmpNow;
[L5541]              havoc gas;
[L5542]              assume gas > 4000000 && gas <= 8000000;
[L5543]              tmpNow := now;
[L5544]              havoc now;
[L5545]              assume now > tmpNow;
[L5546]              assume msgsender_MSG != null;
[L5547]              assume DType[msgsender_MSG] != IERC20;
[L5548]              assume DType[msgsender_MSG] != Context;
[L5549]              assume DType[msgsender_MSG] != ERC20;
[L5550]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5551]              assume DType[msgsender_MSG] != SafeMath;
[L5552]              assume DType[msgsender_MSG] != Token;
[L5553]              Alloc[msgsender_MSG] := true;
[L5554]  COND FALSE  !(choice == 20)
[L5560]  COND FALSE  !(choice == 19)
[L5566]  COND TRUE   choice == 18
[L5567]              gas := gas - 21000;
[L5568]  COND TRUE   gas >= 0
[L5569]              assume amount_s200 >= 0 && amount_s200 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5570]              assume msgvalue_MSG == 0;
[L5571]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s200, amount_s200);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s200 && amount_s200 <= _balances_ERC20[this][msgsender_MSG]) && amount_s200 >= 0) && amount_s200 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s200] >= 0) && _balances_ERC20[this][recipient_s200] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L646]               havoc __exception;
[L647]               revert := false;
[L648]   COND TRUE   __exception
[L649]               __tmp__Balance := Balance;
[L650]               __tmp__DType := DType;
[L651]               __tmp__Alloc := Alloc;
[L652]               __tmp__balance_ADDR := balance_ADDR;
[L653]               __tmp__M_Ref_int := M_Ref_int;
[L654]               __tmp__sum__balances0 := sum__balances0;
[L655]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L656]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L657]               __tmp__sum__allowances1 := sum__allowances1;
[L658]               __tmp__M_Ref_bool := M_Ref_bool;
[L659]               __tmp__sum_exceptions2 := sum_exceptions2;
[L660]               __tmp__sum_minters3 := sum_minters3;
[L661]               __tmp__Length := Length;
[L662]               __tmp__now := now;
[L663]               __tmp___balances_ERC20 := _balances_ERC20;
[L664]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L665]               __tmp__exceptions_ERC20 := exceptions_ERC20;
[L666]               __tmp__uniswap_ERC20 := uniswap_ERC20;
[L667]               __tmp___owner_ERC20 := _owner_ERC20;
[L668]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L669]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L670]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L671]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L672]               __tmp__governance_Token := governance_Token;
[L673]               __tmp__minters_Token := minters_Token;
[L674]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s200, amount_s200);
[L2826]  COND TRUE   __tmp__DType[this] == Token
[L2827]  CALL        call __var_4 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2619]              __ret_0_ := msgsender_MSG;
[L2827]  RET         call __var_4 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2828]  COND FALSE  !(revert)
[L2839]  COND TRUE   __tmp__DType[this] == Token
[L2840]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_4, recipient_s200, amount_s200);
[L3311]              __var_15 := null;
[L3312]  COND TRUE   !(sender_s383 != null)
[L3313]              revert := true;
[L2840]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_4, recipient_s200, amount_s200);
[L2841]  COND TRUE   revert
[L674]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s200, amount_s200);
[L675]               assume revert || gas < 0;
[L5571]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s200, amount_s200);
[L5701]  RET         call CorralChoice_Token(this);

Loop:
[L5701]  CALL        call CorralChoice_Token(this);
[L5496]              havoc msgsender_MSG;
[L5497]              havoc msgvalue_MSG;
[L5498]              havoc choice;
[L5499]              havoc __ret_0_totalSupply;
[L5500]              havoc account_s181;
[L5501]              havoc __ret_0_balanceOf;
[L5502]              havoc recipient_s200;
[L5503]              havoc amount_s200;
[L5504]              havoc __ret_0_transfer;
[L5505]              havoc owner_s216;
[L5506]              havoc spender_s216;
[L5507]              havoc __ret_0_allowance;
[L5508]              havoc spender_s235;
[L5509]              havoc amount_s235;
[L5510]              havoc __ret_0_approve;
[L5511]              havoc sender_s271;
[L5512]              havoc recipient_s271;
[L5513]              havoc amount_s271;
[L5514]              havoc __ret_0_transferFrom;
[L5515]              havoc owner_s119;
[L5516]              havoc someAddress_s143;
[L5517]              havoc spender_s298;
[L5518]              havoc addedValue_s298;
[L5519]              havoc __ret_0_increaseAllowance;
[L5520]              havoc spender_s326;
[L5521]              havoc subtractedValue_s326;
[L5522]              havoc __ret_0_decreaseAllowance;
[L5523]              havoc name_s544;
[L5524]              havoc symbol_s544;
[L5525]              havoc decimals_s544;
[L5526]              havoc __ret_0_name;
[L5527]              havoc __ret_0_symbol;
[L5528]              havoc __ret_0_decimals;
[L5529]              havoc __ret_0_governance;
[L5530]              havoc arg812_s0;
[L5531]              havoc __ret_0_minters;
[L5532]              havoc name_s730;
[L5533]              havoc ticker_s730;
[L5534]              havoc amount_s730;
[L5535]              havoc account_s751;
[L5536]              havoc amount_s751;
[L5537]              havoc _governance_s769;
[L5538]              havoc _minter_s789;
[L5539]              havoc _minter_s809;
[L5540]              havoc tmpNow;
[L5541]              havoc gas;
[L5542]              assume gas > 4000000 && gas <= 8000000;
[L5543]              tmpNow := now;
[L5544]              havoc now;
[L5545]              assume now > tmpNow;
[L5546]              assume msgsender_MSG != null;
[L5547]              assume DType[msgsender_MSG] != IERC20;
[L5548]              assume DType[msgsender_MSG] != Context;
[L5549]              assume DType[msgsender_MSG] != ERC20;
[L5550]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5551]              assume DType[msgsender_MSG] != SafeMath;
[L5552]              assume DType[msgsender_MSG] != Token;
[L5553]              Alloc[msgsender_MSG] := true;
[L5554]  COND FALSE  !(choice == 20)
[L5560]  COND FALSE  !(choice == 19)
[L5566]  COND TRUE   choice == 18
[L5567]              gas := gas - 21000;
[L5568]  COND TRUE   gas >= 0
[L5569]              assume amount_s200 >= 0 && amount_s200 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5570]              assume msgvalue_MSG == 0;
[L5571]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s200, amount_s200);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s200 && amount_s200 <= _balances_ERC20[this][msgsender_MSG]) && amount_s200 >= 0) && amount_s200 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s200] >= 0) && _balances_ERC20[this][recipient_s200] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L646]               havoc __exception;
[L647]               revert := false;
[L648]   COND TRUE   __exception
[L649]               __tmp__Balance := Balance;
[L650]               __tmp__DType := DType;
[L651]               __tmp__Alloc := Alloc;
[L652]               __tmp__balance_ADDR := balance_ADDR;
[L653]               __tmp__M_Ref_int := M_Ref_int;
[L654]               __tmp__sum__balances0 := sum__balances0;
[L655]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L656]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L657]               __tmp__sum__allowances1 := sum__allowances1;
[L658]               __tmp__M_Ref_bool := M_Ref_bool;
[L659]               __tmp__sum_exceptions2 := sum_exceptions2;
[L660]               __tmp__sum_minters3 := sum_minters3;
[L661]               __tmp__Length := Length;
[L662]               __tmp__now := now;
[L663]               __tmp___balances_ERC20 := _balances_ERC20;
[L664]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L665]               __tmp__exceptions_ERC20 := exceptions_ERC20;
[L666]               __tmp__uniswap_ERC20 := uniswap_ERC20;
[L667]               __tmp___owner_ERC20 := _owner_ERC20;
[L668]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L669]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L670]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L671]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L672]               __tmp__governance_Token := governance_Token;
[L673]               __tmp__minters_Token := minters_Token;
[L674]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s200, amount_s200);
[L2826]  COND TRUE   __tmp__DType[this] == Token
[L2827]  CALL        call __var_4 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2619]              __ret_0_ := msgsender_MSG;
[L2827]  RET         call __var_4 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2828]  COND FALSE  !(revert)
[L2839]  COND TRUE   __tmp__DType[this] == Token
[L2840]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_4, recipient_s200, amount_s200);
[L3311]              __var_15 := null;
[L3312]  COND TRUE   !(sender_s383 != null)
[L3313]              revert := true;
[L2840]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_4, recipient_s200, amount_s200);
[L2841]  COND TRUE   revert
[L674]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s200, amount_s200);
[L675]               assume revert || gas < 0;
[L5571]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s200, amount_s200);
[L5701]  RET         call CorralChoice_Token(this);

[2020-11-25 05:57:46,970 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:57:46,970 INFO  L82        PathProgramCache]: Analyzing trace with hash -653134293, now seen corresponding path program 1 times
[2020-11-25 05:57:46,971 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:57:46,992 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:57:47,084 INFO  L134       CoverageAnalysis]: Checked inductivity of 45 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 45 trivial. 0 not checked.
[2020-11-25 05:57:47,084 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 05:57:47,084 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 05:57:47,085 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:57:47,085 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 05:57:47,085 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 05:57:47,085 INFO  L87              Difference]: Start difference. First operand 3569 states and 3962 transitions. cyclomatic complexity: 395 Second operand 8 states.
[2020-11-25 05:57:47,217 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:57:47,217 INFO  L93              Difference]: Finished difference Result 3593 states and 3990 transitions.
[2020-11-25 05:57:47,217 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 05:57:47,217 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3593 states and 3990 transitions.
[2020-11-25 05:57:47,228 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:57:47,240 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3593 states to 3573 states and 3968 transitions.
[2020-11-25 05:57:47,240 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 962
[2020-11-25 05:57:47,241 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 962
[2020-11-25 05:57:47,241 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3573 states and 3968 transitions.
[2020-11-25 05:57:47,245 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:57:47,245 INFO  L728         BuchiCegarLoop]: Abstraction has 3573 states and 3968 transitions.
[2020-11-25 05:57:47,249 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3573 states and 3968 transitions.
[2020-11-25 05:57:47,277 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3573 to 3573.
[2020-11-25 05:57:47,277 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3573 states.
[2020-11-25 05:57:47,282 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3573 states to 3573 states and 3968 transitions.
[2020-11-25 05:57:47,283 INFO  L751         BuchiCegarLoop]: Abstraction has 3573 states and 3968 transitions.
[2020-11-25 05:57:47,283 INFO  L631         BuchiCegarLoop]: Abstraction has 3573 states and 3968 transitions.
[2020-11-25 05:57:47,283 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 05:57:47,283 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3573 states and 3968 transitions.
[2020-11-25 05:57:47,288 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:57:47,289 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:57:47,289 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:57:47,292 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:57:47,292 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5691]              assume null == 0;
[L5692]  CALL        call this := FreshRefGenerator__success();
[L2547]              havoc newRef;
[L2548]              assume Alloc[newRef] == false;
[L2549]              Alloc[newRef] := true;
[L2550]              assume newRef != null;
[L5692]  RET         call this := FreshRefGenerator__success();
[L5693]              assume now >= 0;
[L5694]              assume DType[this] == Token;
[L5695]              assume msgvalue_MSG == 0;
[L5696]              gas := gas - 53000;
[L5697]  CALL        call Token_Token(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L1447]              havoc __exception;
[L1448]              revert := false;
[L1449]  COND FALSE  !(__exception)
[L1478]  CALL        call Token_Token__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L3817]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2611]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2596]              assume msgsender_MSG != null;
[L2597]              Balance[this] := 0;
[L2611]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2612]  COND FALSE  !(revert)
[L3817]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3818]  COND FALSE  !(revert)
[L3821]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3821]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3822]  COND FALSE  !(revert)
[L3826]              havoc __var_29;
[L3827]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_29);
[L2681]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2611]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2596]              assume msgsender_MSG != null;
[L2597]              Balance[this] := 0;
[L2611]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2612]  COND FALSE  !(revert)
[L2681]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2682]  COND FALSE  !(revert)
[L2685]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2685]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2686]  COND FALSE  !(revert)
[L2689]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, owner_s119);
[L2649]              assume msgsender_MSG != null;
[L2650]              Balance[this] := 0;
[L2651]              _balances_ERC20[this] := zeroRefintArr();
[L2652]              sum__balances0[this] := 0;
[L2653]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2654]              sum__allowances1[this] := 0;
[L2655]              exceptions_ERC20[this] := zeroRefboolArr();
[L2656]              uniswap_ERC20[this] := null;
[L2657]              _owner_ERC20[this] := null;
[L2658]              _totalSupply_ERC20[this] := 0;
[L2660]              _owner_ERC20[this] := owner_s119;
[L2689]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, owner_s119);
[L2690]  COND FALSE  !(revert)
[L3827]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_29);
[L3828]  COND FALSE  !(revert)
[L3831]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, 18);
[L3549]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3549]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3550]  COND FALSE  !(revert)
[L3553]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s544, symbol_s544, decimals_s544);
[L3524]              assume msgsender_MSG != null;
[L3525]              Balance[this] := 0;
[L3526]              _name_ERC20Detailed[this] := -1081022691;
[L3527]              _symbol_ERC20Detailed[this] := -1081022691;
[L3528]              _decimals_ERC20Detailed[this] := 0;
[L3530]              _name_ERC20Detailed[this] := name_s544;
[L3531]              _symbol_ERC20Detailed[this] := symbol_s544;
[L3532]              _decimals_ERC20Detailed[this] := decimals_s544;
[L3553]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s544, symbol_s544, decimals_s544);
[L3554]  COND FALSE  !(revert)
[L3831]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, 18);
[L3832]  COND FALSE  !(revert)
[L3835]  CALL        call Token_Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L3763]              assume msgsender_MSG != null;
[L3764]              Balance[this] := 0;
[L3765]              governance_Token[this] := null;
[L3766]              minters_Token[this] := zeroRefboolArr();
[L3769]              havoc __var_27;
[L3770]              governance_Token[this] := __var_27;
[L3772]              havoc __var_28;
[L3773]  CALL        call addMinter~address_Token__success(this, msgsender_MSG, msgvalue_MSG, __var_28);
[L3902]  COND FALSE  !(!(msgsender_MSG == governance_Token[this]))
[L3906]              minters_Token[this][_minter_s789] := true;
[L3773]  RET         call addMinter~address_Token__success(this, msgsender_MSG, msgvalue_MSG, __var_28);
[L3774]  COND FALSE  !(revert)
[L3777]  CALL        call mint~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, governance_Token[this], amount_s730);
[L3859]  COND FALSE  !(!minters_Token[this][msgsender_MSG])
[L3863]  COND TRUE   DType[this] == Token
[L3864]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s751, amount_s751);
[L3399]              __var_19 := null;
[L3400]  COND FALSE  !(!(account_s426 != null))
[L3404]  CALL        call __var_20 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s426);
[L3642]              c_s594 := (a_s594 + b_s594) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3643]  COND FALSE  !(!(c_s594 >= a_s594))
[L3647]              __ret_0_ := c_s594;
[L3404]  RET         call __var_20 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s426);
[L3405]  COND FALSE  !(revert)
[L3408]              _totalSupply_ERC20[this] := __var_20;
[L3409]  CALL        call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s426], amount_s426);
[L3642]              c_s594 := (a_s594 + b_s594) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3643]  COND FALSE  !(!(c_s594 >= a_s594))
[L3647]              __ret_0_ := c_s594;
[L3409]  RET         call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s426], amount_s426);
[L3410]  COND FALSE  !(revert)
[L3413]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s426];
[L3414]              _balances_ERC20[this][account_s426] := __var_21;
[L3415]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s426];
[L3416]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3864]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s751, amount_s751);
[L3865]  COND FALSE  !(revert)
[L3777]  RET         call mint~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, governance_Token[this], amount_s730);
[L3778]  COND FALSE  !(revert)
[L3835]  RET         call Token_Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L3836]  COND FALSE  !(revert)
[L1478]  RET         call Token_Token__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L1479]              assume !revert && gas >= 0;
[L5697]  RET         call Token_Token(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L5698]              assume !revert && gas >= 0;
[L5701]  CALL        call CorralChoice_Token(this);
[L5496]              havoc msgsender_MSG;
[L5497]              havoc msgvalue_MSG;
[L5498]              havoc choice;
[L5499]              havoc __ret_0_totalSupply;
[L5500]              havoc account_s181;
[L5501]              havoc __ret_0_balanceOf;
[L5502]              havoc recipient_s200;
[L5503]              havoc amount_s200;
[L5504]              havoc __ret_0_transfer;
[L5505]              havoc owner_s216;
[L5506]              havoc spender_s216;
[L5507]              havoc __ret_0_allowance;
[L5508]              havoc spender_s235;
[L5509]              havoc amount_s235;
[L5510]              havoc __ret_0_approve;
[L5511]              havoc sender_s271;
[L5512]              havoc recipient_s271;
[L5513]              havoc amount_s271;
[L5514]              havoc __ret_0_transferFrom;
[L5515]              havoc owner_s119;
[L5516]              havoc someAddress_s143;
[L5517]              havoc spender_s298;
[L5518]              havoc addedValue_s298;
[L5519]              havoc __ret_0_increaseAllowance;
[L5520]              havoc spender_s326;
[L5521]              havoc subtractedValue_s326;
[L5522]              havoc __ret_0_decreaseAllowance;
[L5523]              havoc name_s544;
[L5524]              havoc symbol_s544;
[L5525]              havoc decimals_s544;
[L5526]              havoc __ret_0_name;
[L5527]              havoc __ret_0_symbol;
[L5528]              havoc __ret_0_decimals;
[L5529]              havoc __ret_0_governance;
[L5530]              havoc arg812_s0;
[L5531]              havoc __ret_0_minters;
[L5532]              havoc name_s730;
[L5533]              havoc ticker_s730;
[L5534]              havoc amount_s730;
[L5535]              havoc account_s751;
[L5536]              havoc amount_s751;
[L5537]              havoc _governance_s769;
[L5538]              havoc _minter_s789;
[L5539]              havoc _minter_s809;
[L5540]              havoc tmpNow;
[L5541]              havoc gas;
[L5542]              assume gas > 4000000 && gas <= 8000000;
[L5543]              tmpNow := now;
[L5544]              havoc now;
[L5545]              assume now > tmpNow;
[L5546]              assume msgsender_MSG != null;
[L5547]              assume DType[msgsender_MSG] != IERC20;
[L5548]              assume DType[msgsender_MSG] != Context;
[L5549]              assume DType[msgsender_MSG] != ERC20;
[L5550]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5551]              assume DType[msgsender_MSG] != SafeMath;
[L5552]              assume DType[msgsender_MSG] != Token;
[L5553]              Alloc[msgsender_MSG] := true;
[L5554]  COND FALSE  !(choice == 20)
[L5560]  COND FALSE  !(choice == 19)
[L5566]  COND TRUE   choice == 18
[L5567]              gas := gas - 21000;
[L5568]  COND TRUE   gas >= 0
[L5569]              assume amount_s200 >= 0 && amount_s200 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5570]              assume msgvalue_MSG == 0;
[L5571]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s200, amount_s200);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s200 && amount_s200 <= _balances_ERC20[this][msgsender_MSG]) && amount_s200 >= 0) && amount_s200 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s200] >= 0) && _balances_ERC20[this][recipient_s200] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L646]               havoc __exception;
[L647]               revert := false;
[L648]   COND TRUE   __exception
[L649]               __tmp__Balance := Balance;
[L650]               __tmp__DType := DType;
[L651]               __tmp__Alloc := Alloc;
[L652]               __tmp__balance_ADDR := balance_ADDR;
[L653]               __tmp__M_Ref_int := M_Ref_int;
[L654]               __tmp__sum__balances0 := sum__balances0;
[L655]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L656]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L657]               __tmp__sum__allowances1 := sum__allowances1;
[L658]               __tmp__M_Ref_bool := M_Ref_bool;
[L659]               __tmp__sum_exceptions2 := sum_exceptions2;
[L660]               __tmp__sum_minters3 := sum_minters3;
[L661]               __tmp__Length := Length;
[L662]               __tmp__now := now;
[L663]               __tmp___balances_ERC20 := _balances_ERC20;
[L664]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L665]               __tmp__exceptions_ERC20 := exceptions_ERC20;
[L666]               __tmp__uniswap_ERC20 := uniswap_ERC20;
[L667]               __tmp___owner_ERC20 := _owner_ERC20;
[L668]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L669]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L670]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L671]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L672]               __tmp__governance_Token := governance_Token;
[L673]               __tmp__minters_Token := minters_Token;
[L674]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s200, amount_s200);
[L2826]  COND TRUE   __tmp__DType[this] == Token
[L2827]  CALL        call __var_4 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2619]              __ret_0_ := msgsender_MSG;
[L2827]  RET         call __var_4 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2828]  COND FALSE  !(revert)
[L2839]  COND TRUE   __tmp__DType[this] == Token
[L2840]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_4, recipient_s200, amount_s200);
[L3311]              __var_15 := null;
[L3312]  COND FALSE  !(!(sender_s383 != null))
[L3316]              __var_16 := null;
[L3317]  COND TRUE   !(recipient_s383 != null)
[L3318]              revert := true;
[L2840]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_4, recipient_s200, amount_s200);
[L2841]  COND TRUE   revert
[L674]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s200, amount_s200);
[L675]               assume revert || gas < 0;
[L5571]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s200, amount_s200);
[L5701]  RET         call CorralChoice_Token(this);

Loop:
[L5701]  CALL        call CorralChoice_Token(this);
[L5496]              havoc msgsender_MSG;
[L5497]              havoc msgvalue_MSG;
[L5498]              havoc choice;
[L5499]              havoc __ret_0_totalSupply;
[L5500]              havoc account_s181;
[L5501]              havoc __ret_0_balanceOf;
[L5502]              havoc recipient_s200;
[L5503]              havoc amount_s200;
[L5504]              havoc __ret_0_transfer;
[L5505]              havoc owner_s216;
[L5506]              havoc spender_s216;
[L5507]              havoc __ret_0_allowance;
[L5508]              havoc spender_s235;
[L5509]              havoc amount_s235;
[L5510]              havoc __ret_0_approve;
[L5511]              havoc sender_s271;
[L5512]              havoc recipient_s271;
[L5513]              havoc amount_s271;
[L5514]              havoc __ret_0_transferFrom;
[L5515]              havoc owner_s119;
[L5516]              havoc someAddress_s143;
[L5517]              havoc spender_s298;
[L5518]              havoc addedValue_s298;
[L5519]              havoc __ret_0_increaseAllowance;
[L5520]              havoc spender_s326;
[L5521]              havoc subtractedValue_s326;
[L5522]              havoc __ret_0_decreaseAllowance;
[L5523]              havoc name_s544;
[L5524]              havoc symbol_s544;
[L5525]              havoc decimals_s544;
[L5526]              havoc __ret_0_name;
[L5527]              havoc __ret_0_symbol;
[L5528]              havoc __ret_0_decimals;
[L5529]              havoc __ret_0_governance;
[L5530]              havoc arg812_s0;
[L5531]              havoc __ret_0_minters;
[L5532]              havoc name_s730;
[L5533]              havoc ticker_s730;
[L5534]              havoc amount_s730;
[L5535]              havoc account_s751;
[L5536]              havoc amount_s751;
[L5537]              havoc _governance_s769;
[L5538]              havoc _minter_s789;
[L5539]              havoc _minter_s809;
[L5540]              havoc tmpNow;
[L5541]              havoc gas;
[L5542]              assume gas > 4000000 && gas <= 8000000;
[L5543]              tmpNow := now;
[L5544]              havoc now;
[L5545]              assume now > tmpNow;
[L5546]              assume msgsender_MSG != null;
[L5547]              assume DType[msgsender_MSG] != IERC20;
[L5548]              assume DType[msgsender_MSG] != Context;
[L5549]              assume DType[msgsender_MSG] != ERC20;
[L5550]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5551]              assume DType[msgsender_MSG] != SafeMath;
[L5552]              assume DType[msgsender_MSG] != Token;
[L5553]              Alloc[msgsender_MSG] := true;
[L5554]  COND FALSE  !(choice == 20)
[L5560]  COND FALSE  !(choice == 19)
[L5566]  COND TRUE   choice == 18
[L5567]              gas := gas - 21000;
[L5568]  COND TRUE   gas >= 0
[L5569]              assume amount_s200 >= 0 && amount_s200 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5570]              assume msgvalue_MSG == 0;
[L5571]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s200, amount_s200);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s200 && amount_s200 <= _balances_ERC20[this][msgsender_MSG]) && amount_s200 >= 0) && amount_s200 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s200] >= 0) && _balances_ERC20[this][recipient_s200] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L646]               havoc __exception;
[L647]               revert := false;
[L648]   COND TRUE   __exception
[L649]               __tmp__Balance := Balance;
[L650]               __tmp__DType := DType;
[L651]               __tmp__Alloc := Alloc;
[L652]               __tmp__balance_ADDR := balance_ADDR;
[L653]               __tmp__M_Ref_int := M_Ref_int;
[L654]               __tmp__sum__balances0 := sum__balances0;
[L655]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L656]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L657]               __tmp__sum__allowances1 := sum__allowances1;
[L658]               __tmp__M_Ref_bool := M_Ref_bool;
[L659]               __tmp__sum_exceptions2 := sum_exceptions2;
[L660]               __tmp__sum_minters3 := sum_minters3;
[L661]               __tmp__Length := Length;
[L662]               __tmp__now := now;
[L663]               __tmp___balances_ERC20 := _balances_ERC20;
[L664]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L665]               __tmp__exceptions_ERC20 := exceptions_ERC20;
[L666]               __tmp__uniswap_ERC20 := uniswap_ERC20;
[L667]               __tmp___owner_ERC20 := _owner_ERC20;
[L668]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L669]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L670]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L671]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L672]               __tmp__governance_Token := governance_Token;
[L673]               __tmp__minters_Token := minters_Token;
[L674]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s200, amount_s200);
[L2826]  COND TRUE   __tmp__DType[this] == Token
[L2827]  CALL        call __var_4 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2619]              __ret_0_ := msgsender_MSG;
[L2827]  RET         call __var_4 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2828]  COND FALSE  !(revert)
[L2839]  COND TRUE   __tmp__DType[this] == Token
[L2840]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_4, recipient_s200, amount_s200);
[L3311]              __var_15 := null;
[L3312]  COND FALSE  !(!(sender_s383 != null))
[L3316]              __var_16 := null;
[L3317]  COND TRUE   !(recipient_s383 != null)
[L3318]              revert := true;
[L2840]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_4, recipient_s200, amount_s200);
[L2841]  COND TRUE   revert
[L674]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s200, amount_s200);
[L675]               assume revert || gas < 0;
[L5571]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s200, amount_s200);
[L5701]  RET         call CorralChoice_Token(this);

[2020-11-25 05:57:47,297 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:57:47,297 INFO  L82        PathProgramCache]: Analyzing trace with hash 426519071, now seen corresponding path program 1 times
[2020-11-25 05:57:47,298 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:57:47,314 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:57:47,380 INFO  L134       CoverageAnalysis]: Checked inductivity of 45 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 45 trivial. 0 not checked.
[2020-11-25 05:57:47,380 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 05:57:47,380 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 05:57:47,381 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:57:47,381 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 05:57:47,381 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 05:57:47,381 INFO  L87              Difference]: Start difference. First operand 3573 states and 3968 transitions. cyclomatic complexity: 397 Second operand 7 states.
[2020-11-25 05:57:47,476 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:57:47,476 INFO  L93              Difference]: Finished difference Result 3681 states and 4089 transitions.
[2020-11-25 05:57:47,476 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 05:57:47,476 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3681 states and 4089 transitions.
[2020-11-25 05:57:47,486 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:57:47,499 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3681 states to 3673 states and 4081 transitions.
[2020-11-25 05:57:47,499 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 981
[2020-11-25 05:57:47,500 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 981
[2020-11-25 05:57:47,500 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3673 states and 4081 transitions.
[2020-11-25 05:57:47,503 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:57:47,503 INFO  L728         BuchiCegarLoop]: Abstraction has 3673 states and 4081 transitions.
[2020-11-25 05:57:47,507 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3673 states and 4081 transitions.
[2020-11-25 05:57:47,535 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3673 to 3660.
[2020-11-25 05:57:47,535 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3660 states.
[2020-11-25 05:57:47,539 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3660 states to 3660 states and 4066 transitions.
[2020-11-25 05:57:47,539 INFO  L751         BuchiCegarLoop]: Abstraction has 3660 states and 4066 transitions.
[2020-11-25 05:57:47,539 INFO  L631         BuchiCegarLoop]: Abstraction has 3660 states and 4066 transitions.
[2020-11-25 05:57:47,539 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 05:57:47,539 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3660 states and 4066 transitions.
[2020-11-25 05:57:47,544 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:57:47,544 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:57:47,544 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:57:47,547 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:57:47,547 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5691]              assume null == 0;
[L5692]  CALL        call this := FreshRefGenerator__success();
[L2547]              havoc newRef;
[L2548]              assume Alloc[newRef] == false;
[L2549]              Alloc[newRef] := true;
[L2550]              assume newRef != null;
[L5692]  RET         call this := FreshRefGenerator__success();
[L5693]              assume now >= 0;
[L5694]              assume DType[this] == Token;
[L5695]              assume msgvalue_MSG == 0;
[L5696]              gas := gas - 53000;
[L5697]  CALL        call Token_Token(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L1447]              havoc __exception;
[L1448]              revert := false;
[L1449]  COND FALSE  !(__exception)
[L1478]  CALL        call Token_Token__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L3817]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2611]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2596]              assume msgsender_MSG != null;
[L2597]              Balance[this] := 0;
[L2611]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2612]  COND FALSE  !(revert)
[L3817]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3818]  COND FALSE  !(revert)
[L3821]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3821]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3822]  COND FALSE  !(revert)
[L3826]              havoc __var_29;
[L3827]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_29);
[L2681]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2611]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2596]              assume msgsender_MSG != null;
[L2597]              Balance[this] := 0;
[L2611]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2612]  COND FALSE  !(revert)
[L2681]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2682]  COND FALSE  !(revert)
[L2685]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2685]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2686]  COND FALSE  !(revert)
[L2689]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, owner_s119);
[L2649]              assume msgsender_MSG != null;
[L2650]              Balance[this] := 0;
[L2651]              _balances_ERC20[this] := zeroRefintArr();
[L2652]              sum__balances0[this] := 0;
[L2653]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2654]              sum__allowances1[this] := 0;
[L2655]              exceptions_ERC20[this] := zeroRefboolArr();
[L2656]              uniswap_ERC20[this] := null;
[L2657]              _owner_ERC20[this] := null;
[L2658]              _totalSupply_ERC20[this] := 0;
[L2660]              _owner_ERC20[this] := owner_s119;
[L2689]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, owner_s119);
[L2690]  COND FALSE  !(revert)
[L3827]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_29);
[L3828]  COND FALSE  !(revert)
[L3831]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, 18);
[L3549]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3549]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3550]  COND FALSE  !(revert)
[L3553]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s544, symbol_s544, decimals_s544);
[L3524]              assume msgsender_MSG != null;
[L3525]              Balance[this] := 0;
[L3526]              _name_ERC20Detailed[this] := -1081022691;
[L3527]              _symbol_ERC20Detailed[this] := -1081022691;
[L3528]              _decimals_ERC20Detailed[this] := 0;
[L3530]              _name_ERC20Detailed[this] := name_s544;
[L3531]              _symbol_ERC20Detailed[this] := symbol_s544;
[L3532]              _decimals_ERC20Detailed[this] := decimals_s544;
[L3553]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s544, symbol_s544, decimals_s544);
[L3554]  COND FALSE  !(revert)
[L3831]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, 18);
[L3832]  COND FALSE  !(revert)
[L3835]  CALL        call Token_Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L3763]              assume msgsender_MSG != null;
[L3764]              Balance[this] := 0;
[L3765]              governance_Token[this] := null;
[L3766]              minters_Token[this] := zeroRefboolArr();
[L3769]              havoc __var_27;
[L3770]              governance_Token[this] := __var_27;
[L3772]              havoc __var_28;
[L3773]  CALL        call addMinter~address_Token__success(this, msgsender_MSG, msgvalue_MSG, __var_28);
[L3902]  COND FALSE  !(!(msgsender_MSG == governance_Token[this]))
[L3906]              minters_Token[this][_minter_s789] := true;
[L3773]  RET         call addMinter~address_Token__success(this, msgsender_MSG, msgvalue_MSG, __var_28);
[L3774]  COND FALSE  !(revert)
[L3777]  CALL        call mint~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, governance_Token[this], amount_s730);
[L3859]  COND FALSE  !(!minters_Token[this][msgsender_MSG])
[L3863]  COND TRUE   DType[this] == Token
[L3864]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s751, amount_s751);
[L3399]              __var_19 := null;
[L3400]  COND FALSE  !(!(account_s426 != null))
[L3404]  CALL        call __var_20 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s426);
[L3642]              c_s594 := (a_s594 + b_s594) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3643]  COND FALSE  !(!(c_s594 >= a_s594))
[L3647]              __ret_0_ := c_s594;
[L3404]  RET         call __var_20 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s426);
[L3405]  COND FALSE  !(revert)
[L3408]              _totalSupply_ERC20[this] := __var_20;
[L3409]  CALL        call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s426], amount_s426);
[L3642]              c_s594 := (a_s594 + b_s594) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3643]  COND FALSE  !(!(c_s594 >= a_s594))
[L3647]              __ret_0_ := c_s594;
[L3409]  RET         call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s426], amount_s426);
[L3410]  COND FALSE  !(revert)
[L3413]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s426];
[L3414]              _balances_ERC20[this][account_s426] := __var_21;
[L3415]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s426];
[L3416]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3864]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s751, amount_s751);
[L3865]  COND FALSE  !(revert)
[L3777]  RET         call mint~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, governance_Token[this], amount_s730);
[L3778]  COND FALSE  !(revert)
[L3835]  RET         call Token_Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L3836]  COND FALSE  !(revert)
[L1478]  RET         call Token_Token__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L1479]              assume !revert && gas >= 0;
[L5697]  RET         call Token_Token(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L5698]              assume !revert && gas >= 0;
[L5701]  CALL        call CorralChoice_Token(this);
[L5496]              havoc msgsender_MSG;
[L5497]              havoc msgvalue_MSG;
[L5498]              havoc choice;
[L5499]              havoc __ret_0_totalSupply;
[L5500]              havoc account_s181;
[L5501]              havoc __ret_0_balanceOf;
[L5502]              havoc recipient_s200;
[L5503]              havoc amount_s200;
[L5504]              havoc __ret_0_transfer;
[L5505]              havoc owner_s216;
[L5506]              havoc spender_s216;
[L5507]              havoc __ret_0_allowance;
[L5508]              havoc spender_s235;
[L5509]              havoc amount_s235;
[L5510]              havoc __ret_0_approve;
[L5511]              havoc sender_s271;
[L5512]              havoc recipient_s271;
[L5513]              havoc amount_s271;
[L5514]              havoc __ret_0_transferFrom;
[L5515]              havoc owner_s119;
[L5516]              havoc someAddress_s143;
[L5517]              havoc spender_s298;
[L5518]              havoc addedValue_s298;
[L5519]              havoc __ret_0_increaseAllowance;
[L5520]              havoc spender_s326;
[L5521]              havoc subtractedValue_s326;
[L5522]              havoc __ret_0_decreaseAllowance;
[L5523]              havoc name_s544;
[L5524]              havoc symbol_s544;
[L5525]              havoc decimals_s544;
[L5526]              havoc __ret_0_name;
[L5527]              havoc __ret_0_symbol;
[L5528]              havoc __ret_0_decimals;
[L5529]              havoc __ret_0_governance;
[L5530]              havoc arg812_s0;
[L5531]              havoc __ret_0_minters;
[L5532]              havoc name_s730;
[L5533]              havoc ticker_s730;
[L5534]              havoc amount_s730;
[L5535]              havoc account_s751;
[L5536]              havoc amount_s751;
[L5537]              havoc _governance_s769;
[L5538]              havoc _minter_s789;
[L5539]              havoc _minter_s809;
[L5540]              havoc tmpNow;
[L5541]              havoc gas;
[L5542]              assume gas > 4000000 && gas <= 8000000;
[L5543]              tmpNow := now;
[L5544]              havoc now;
[L5545]              assume now > tmpNow;
[L5546]              assume msgsender_MSG != null;
[L5547]              assume DType[msgsender_MSG] != IERC20;
[L5548]              assume DType[msgsender_MSG] != Context;
[L5549]              assume DType[msgsender_MSG] != ERC20;
[L5550]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5551]              assume DType[msgsender_MSG] != SafeMath;
[L5552]              assume DType[msgsender_MSG] != Token;
[L5553]              Alloc[msgsender_MSG] := true;
[L5554]  COND FALSE  !(choice == 20)
[L5560]  COND FALSE  !(choice == 19)
[L5566]  COND TRUE   choice == 18
[L5567]              gas := gas - 21000;
[L5568]  COND TRUE   gas >= 0
[L5569]              assume amount_s200 >= 0 && amount_s200 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5570]              assume msgvalue_MSG == 0;
[L5571]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s200, amount_s200);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s200 && amount_s200 <= _balances_ERC20[this][msgsender_MSG]) && amount_s200 >= 0) && amount_s200 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s200] >= 0) && _balances_ERC20[this][recipient_s200] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L646]               havoc __exception;
[L647]               revert := false;
[L648]   COND FALSE  !(__exception)
[L677]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s200, amount_s200);
[L2859]  COND TRUE   DType[this] == Token
[L2860]  CALL        call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2625]              __ret_0_ := msgsender_MSG;
[L2860]  RET         call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2861]  COND FALSE  !(revert)
[L2872]  COND TRUE   DType[this] == Token
[L2873]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, recipient_s200, amount_s200);
[L3343]              __var_15 := null;
[L3344]  COND FALSE  !(!(sender_s383 != null))
[L3348]              __var_16 := null;
[L3349]  COND FALSE  !(!(recipient_s383 != null))
[L3353]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s383], amount_s383, 47124453);
[L3666]  COND FALSE  !(!(b_s621 <= a_s621))
[L3670]              c_s621 := (a_s621 - b_s621) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3671]              __ret_0_ := c_s621;
[L3353]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s383], amount_s383, 47124453);
[L3354]  COND FALSE  !(revert)
[L3357]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s383];
[L3358]              _balances_ERC20[this][sender_s383] := __var_17;
[L3359]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s383];
[L3360]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s383], amount_s383);
[L3642]              c_s594 := (a_s594 + b_s594) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3643]  COND FALSE  !(!(c_s594 >= a_s594))
[L3647]              __ret_0_ := c_s594;
[L3360]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s383], amount_s383);
[L3361]  COND FALSE  !(revert)
[L3364]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s383];
[L3365]              _balances_ERC20[this][recipient_s383] := __var_18;
[L3366]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s383];
[L3367]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2873]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, recipient_s200, amount_s200);
[L2874]  COND FALSE  !(revert)
[L2885]              __ret_0_ := true;
[L677]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s200, amount_s200);
[L678]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_Token[this] == old(governance_Token[this])) && minters_Token[this] == old(minters_Token[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && exceptions_ERC20[this] == old(exceptions_ERC20[this])) && uniswap_ERC20[this] == old(uniswap_ERC20[this])) && _owner_ERC20[this] == old(_owner_ERC20[this]));
[L2]                 revert := revert_hold;
[L5571]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s200, amount_s200);
[L5701]  RET         call CorralChoice_Token(this);

Loop:
[L5701]  CALL        call CorralChoice_Token(this);
[L5496]              havoc msgsender_MSG;
[L5497]              havoc msgvalue_MSG;
[L5498]              havoc choice;
[L5499]              havoc __ret_0_totalSupply;
[L5500]              havoc account_s181;
[L5501]              havoc __ret_0_balanceOf;
[L5502]              havoc recipient_s200;
[L5503]              havoc amount_s200;
[L5504]              havoc __ret_0_transfer;
[L5505]              havoc owner_s216;
[L5506]              havoc spender_s216;
[L5507]              havoc __ret_0_allowance;
[L5508]              havoc spender_s235;
[L5509]              havoc amount_s235;
[L5510]              havoc __ret_0_approve;
[L5511]              havoc sender_s271;
[L5512]              havoc recipient_s271;
[L5513]              havoc amount_s271;
[L5514]              havoc __ret_0_transferFrom;
[L5515]              havoc owner_s119;
[L5516]              havoc someAddress_s143;
[L5517]              havoc spender_s298;
[L5518]              havoc addedValue_s298;
[L5519]              havoc __ret_0_increaseAllowance;
[L5520]              havoc spender_s326;
[L5521]              havoc subtractedValue_s326;
[L5522]              havoc __ret_0_decreaseAllowance;
[L5523]              havoc name_s544;
[L5524]              havoc symbol_s544;
[L5525]              havoc decimals_s544;
[L5526]              havoc __ret_0_name;
[L5527]              havoc __ret_0_symbol;
[L5528]              havoc __ret_0_decimals;
[L5529]              havoc __ret_0_governance;
[L5530]              havoc arg812_s0;
[L5531]              havoc __ret_0_minters;
[L5532]              havoc name_s730;
[L5533]              havoc ticker_s730;
[L5534]              havoc amount_s730;
[L5535]              havoc account_s751;
[L5536]              havoc amount_s751;
[L5537]              havoc _governance_s769;
[L5538]              havoc _minter_s789;
[L5539]              havoc _minter_s809;
[L5540]              havoc tmpNow;
[L5541]              havoc gas;
[L5542]              assume gas > 4000000 && gas <= 8000000;
[L5543]              tmpNow := now;
[L5544]              havoc now;
[L5545]              assume now > tmpNow;
[L5546]              assume msgsender_MSG != null;
[L5547]              assume DType[msgsender_MSG] != IERC20;
[L5548]              assume DType[msgsender_MSG] != Context;
[L5549]              assume DType[msgsender_MSG] != ERC20;
[L5550]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5551]              assume DType[msgsender_MSG] != SafeMath;
[L5552]              assume DType[msgsender_MSG] != Token;
[L5553]              Alloc[msgsender_MSG] := true;
[L5554]  COND FALSE  !(choice == 20)
[L5560]  COND FALSE  !(choice == 19)
[L5566]  COND TRUE   choice == 18
[L5567]              gas := gas - 21000;
[L5568]  COND TRUE   gas >= 0
[L5569]              assume amount_s200 >= 0 && amount_s200 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5570]              assume msgvalue_MSG == 0;
[L5571]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s200, amount_s200);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s200 && amount_s200 <= _balances_ERC20[this][msgsender_MSG]) && amount_s200 >= 0) && amount_s200 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s200] >= 0) && _balances_ERC20[this][recipient_s200] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L646]               havoc __exception;
[L647]               revert := false;
[L648]   COND FALSE  !(__exception)
[L677]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s200, amount_s200);
[L2859]  COND TRUE   DType[this] == Token
[L2860]  CALL        call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2625]              __ret_0_ := msgsender_MSG;
[L2860]  RET         call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2861]  COND FALSE  !(revert)
[L2872]  COND TRUE   DType[this] == Token
[L2873]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, recipient_s200, amount_s200);
[L3343]              __var_15 := null;
[L3344]  COND FALSE  !(!(sender_s383 != null))
[L3348]              __var_16 := null;
[L3349]  COND FALSE  !(!(recipient_s383 != null))
[L3353]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s383], amount_s383, 47124453);
[L3666]  COND FALSE  !(!(b_s621 <= a_s621))
[L3670]              c_s621 := (a_s621 - b_s621) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3671]              __ret_0_ := c_s621;
[L3353]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s383], amount_s383, 47124453);
[L3354]  COND FALSE  !(revert)
[L3357]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s383];
[L3358]              _balances_ERC20[this][sender_s383] := __var_17;
[L3359]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s383];
[L3360]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s383], amount_s383);
[L3642]              c_s594 := (a_s594 + b_s594) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3643]  COND FALSE  !(!(c_s594 >= a_s594))
[L3647]              __ret_0_ := c_s594;
[L3360]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s383], amount_s383);
[L3361]  COND FALSE  !(revert)
[L3364]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s383];
[L3365]              _balances_ERC20[this][recipient_s383] := __var_18;
[L3366]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s383];
[L3367]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2873]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, recipient_s200, amount_s200);
[L2874]  COND FALSE  !(revert)
[L2885]              __ret_0_ := true;
[L677]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s200, amount_s200);
[L678]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_Token[this] == old(governance_Token[this])) && minters_Token[this] == old(minters_Token[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && exceptions_ERC20[this] == old(exceptions_ERC20[this])) && uniswap_ERC20[this] == old(uniswap_ERC20[this])) && _owner_ERC20[this] == old(_owner_ERC20[this]));
[L2]                 revert := revert_hold;
[L5571]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s200, amount_s200);
[L5701]  RET         call CorralChoice_Token(this);

[2020-11-25 05:57:47,550 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:57:47,550 INFO  L82        PathProgramCache]: Analyzing trace with hash 665377419, now seen corresponding path program 1 times
[2020-11-25 05:57:47,551 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:57:47,595 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:57:48,035 INFO  L134       CoverageAnalysis]: Checked inductivity of 45 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 45 trivial. 0 not checked.
[2020-11-25 05:57:48,035 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 05:57:48,035 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [24] imperfect sequences [] total 24
[2020-11-25 05:57:48,035 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:57:48,036 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 24 interpolants.
[2020-11-25 05:57:48,036 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=66, Invalid=486, Unknown=0, NotChecked=0, Total=552
[2020-11-25 05:57:48,036 INFO  L87              Difference]: Start difference. First operand 3660 states and 4066 transitions. cyclomatic complexity: 408 Second operand 24 states.
[2020-11-25 05:57:54,753 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:57:54,753 INFO  L93              Difference]: Finished difference Result 3702 states and 4113 transitions.
[2020-11-25 05:57:54,753 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 23 states. 
[2020-11-25 05:57:54,753 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3702 states and 4113 transitions.
[2020-11-25 05:57:54,760 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 05:57:54,769 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3702 states to 3696 states and 4106 transitions.
[2020-11-25 05:57:54,769 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 988
[2020-11-25 05:57:54,769 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 988
[2020-11-25 05:57:54,769 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3696 states and 4106 transitions.
[2020-11-25 05:57:54,772 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:57:54,772 INFO  L728         BuchiCegarLoop]: Abstraction has 3696 states and 4106 transitions.
[2020-11-25 05:57:54,775 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3696 states and 4106 transitions.
[2020-11-25 05:57:54,798 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3696 to 3670.
[2020-11-25 05:57:54,798 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3670 states.
[2020-11-25 05:57:54,801 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3670 states to 3670 states and 4075 transitions.
[2020-11-25 05:57:54,801 INFO  L751         BuchiCegarLoop]: Abstraction has 3670 states and 4075 transitions.
[2020-11-25 05:57:54,801 INFO  L631         BuchiCegarLoop]: Abstraction has 3670 states and 4075 transitions.
[2020-11-25 05:57:54,801 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 05:57:54,801 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3670 states and 4075 transitions.
[2020-11-25 05:57:54,805 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:57:54,806 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:57:54,806 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:57:54,807 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:57:54,807 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5691]              assume null == 0;
[L5692]  CALL        call this := FreshRefGenerator__success();
[L2547]              havoc newRef;
[L2548]              assume Alloc[newRef] == false;
[L2549]              Alloc[newRef] := true;
[L2550]              assume newRef != null;
[L5692]  RET         call this := FreshRefGenerator__success();
[L5693]              assume now >= 0;
[L5694]              assume DType[this] == Token;
[L5695]              assume msgvalue_MSG == 0;
[L5696]              gas := gas - 53000;
[L5697]  CALL        call Token_Token(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L1447]              havoc __exception;
[L1448]              revert := false;
[L1449]  COND FALSE  !(__exception)
[L1478]  CALL        call Token_Token__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L3817]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2611]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2596]              assume msgsender_MSG != null;
[L2597]              Balance[this] := 0;
[L2611]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2612]  COND FALSE  !(revert)
[L3817]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3818]  COND FALSE  !(revert)
[L3821]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3821]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3822]  COND FALSE  !(revert)
[L3826]              havoc __var_29;
[L3827]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_29);
[L2681]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2611]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2596]              assume msgsender_MSG != null;
[L2597]              Balance[this] := 0;
[L2611]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2612]  COND FALSE  !(revert)
[L2681]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2682]  COND FALSE  !(revert)
[L2685]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2685]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2686]  COND FALSE  !(revert)
[L2689]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, owner_s119);
[L2649]              assume msgsender_MSG != null;
[L2650]              Balance[this] := 0;
[L2651]              _balances_ERC20[this] := zeroRefintArr();
[L2652]              sum__balances0[this] := 0;
[L2653]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2654]              sum__allowances1[this] := 0;
[L2655]              exceptions_ERC20[this] := zeroRefboolArr();
[L2656]              uniswap_ERC20[this] := null;
[L2657]              _owner_ERC20[this] := null;
[L2658]              _totalSupply_ERC20[this] := 0;
[L2660]              _owner_ERC20[this] := owner_s119;
[L2689]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, owner_s119);
[L2690]  COND FALSE  !(revert)
[L3827]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_29);
[L3828]  COND FALSE  !(revert)
[L3831]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, 18);
[L3549]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3549]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3550]  COND FALSE  !(revert)
[L3553]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s544, symbol_s544, decimals_s544);
[L3524]              assume msgsender_MSG != null;
[L3525]              Balance[this] := 0;
[L3526]              _name_ERC20Detailed[this] := -1081022691;
[L3527]              _symbol_ERC20Detailed[this] := -1081022691;
[L3528]              _decimals_ERC20Detailed[this] := 0;
[L3530]              _name_ERC20Detailed[this] := name_s544;
[L3531]              _symbol_ERC20Detailed[this] := symbol_s544;
[L3532]              _decimals_ERC20Detailed[this] := decimals_s544;
[L3553]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s544, symbol_s544, decimals_s544);
[L3554]  COND FALSE  !(revert)
[L3831]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, 18);
[L3832]  COND FALSE  !(revert)
[L3835]  CALL        call Token_Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L3763]              assume msgsender_MSG != null;
[L3764]              Balance[this] := 0;
[L3765]              governance_Token[this] := null;
[L3766]              minters_Token[this] := zeroRefboolArr();
[L3769]              havoc __var_27;
[L3770]              governance_Token[this] := __var_27;
[L3772]              havoc __var_28;
[L3773]  CALL        call addMinter~address_Token__success(this, msgsender_MSG, msgvalue_MSG, __var_28);
[L3902]  COND FALSE  !(!(msgsender_MSG == governance_Token[this]))
[L3906]              minters_Token[this][_minter_s789] := true;
[L3773]  RET         call addMinter~address_Token__success(this, msgsender_MSG, msgvalue_MSG, __var_28);
[L3774]  COND FALSE  !(revert)
[L3777]  CALL        call mint~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, governance_Token[this], amount_s730);
[L3859]  COND FALSE  !(!minters_Token[this][msgsender_MSG])
[L3863]  COND TRUE   DType[this] == Token
[L3864]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s751, amount_s751);
[L3399]              __var_19 := null;
[L3400]  COND FALSE  !(!(account_s426 != null))
[L3404]  CALL        call __var_20 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s426);
[L3642]              c_s594 := (a_s594 + b_s594) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3643]  COND FALSE  !(!(c_s594 >= a_s594))
[L3647]              __ret_0_ := c_s594;
[L3404]  RET         call __var_20 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s426);
[L3405]  COND FALSE  !(revert)
[L3408]              _totalSupply_ERC20[this] := __var_20;
[L3409]  CALL        call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s426], amount_s426);
[L3642]              c_s594 := (a_s594 + b_s594) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3643]  COND FALSE  !(!(c_s594 >= a_s594))
[L3647]              __ret_0_ := c_s594;
[L3409]  RET         call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s426], amount_s426);
[L3410]  COND FALSE  !(revert)
[L3413]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s426];
[L3414]              _balances_ERC20[this][account_s426] := __var_21;
[L3415]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s426];
[L3416]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3864]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s751, amount_s751);
[L3865]  COND FALSE  !(revert)
[L3777]  RET         call mint~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, governance_Token[this], amount_s730);
[L3778]  COND FALSE  !(revert)
[L3835]  RET         call Token_Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L3836]  COND FALSE  !(revert)
[L1478]  RET         call Token_Token__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L1479]              assume !revert && gas >= 0;
[L5697]  RET         call Token_Token(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L5698]              assume !revert && gas >= 0;
[L5701]  CALL        call CorralChoice_Token(this);
[L5496]              havoc msgsender_MSG;
[L5497]              havoc msgvalue_MSG;
[L5498]              havoc choice;
[L5499]              havoc __ret_0_totalSupply;
[L5500]              havoc account_s181;
[L5501]              havoc __ret_0_balanceOf;
[L5502]              havoc recipient_s200;
[L5503]              havoc amount_s200;
[L5504]              havoc __ret_0_transfer;
[L5505]              havoc owner_s216;
[L5506]              havoc spender_s216;
[L5507]              havoc __ret_0_allowance;
[L5508]              havoc spender_s235;
[L5509]              havoc amount_s235;
[L5510]              havoc __ret_0_approve;
[L5511]              havoc sender_s271;
[L5512]              havoc recipient_s271;
[L5513]              havoc amount_s271;
[L5514]              havoc __ret_0_transferFrom;
[L5515]              havoc owner_s119;
[L5516]              havoc someAddress_s143;
[L5517]              havoc spender_s298;
[L5518]              havoc addedValue_s298;
[L5519]              havoc __ret_0_increaseAllowance;
[L5520]              havoc spender_s326;
[L5521]              havoc subtractedValue_s326;
[L5522]              havoc __ret_0_decreaseAllowance;
[L5523]              havoc name_s544;
[L5524]              havoc symbol_s544;
[L5525]              havoc decimals_s544;
[L5526]              havoc __ret_0_name;
[L5527]              havoc __ret_0_symbol;
[L5528]              havoc __ret_0_decimals;
[L5529]              havoc __ret_0_governance;
[L5530]              havoc arg812_s0;
[L5531]              havoc __ret_0_minters;
[L5532]              havoc name_s730;
[L5533]              havoc ticker_s730;
[L5534]              havoc amount_s730;
[L5535]              havoc account_s751;
[L5536]              havoc amount_s751;
[L5537]              havoc _governance_s769;
[L5538]              havoc _minter_s789;
[L5539]              havoc _minter_s809;
[L5540]              havoc tmpNow;
[L5541]              havoc gas;
[L5542]              assume gas > 4000000 && gas <= 8000000;
[L5543]              tmpNow := now;
[L5544]              havoc now;
[L5545]              assume now > tmpNow;
[L5546]              assume msgsender_MSG != null;
[L5547]              assume DType[msgsender_MSG] != IERC20;
[L5548]              assume DType[msgsender_MSG] != Context;
[L5549]              assume DType[msgsender_MSG] != ERC20;
[L5550]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5551]              assume DType[msgsender_MSG] != SafeMath;
[L5552]              assume DType[msgsender_MSG] != Token;
[L5553]              Alloc[msgsender_MSG] := true;
[L5554]  COND FALSE  !(choice == 20)
[L5560]  COND FALSE  !(choice == 19)
[L5566]  COND TRUE   choice == 18
[L5567]              gas := gas - 21000;
[L5568]  COND TRUE   gas >= 0
[L5569]              assume amount_s200 >= 0 && amount_s200 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5570]              assume msgvalue_MSG == 0;
[L5571]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s200, amount_s200);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s200 && amount_s200 <= _balances_ERC20[this][msgsender_MSG]) && amount_s200 >= 0) && amount_s200 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s200] >= 0) && _balances_ERC20[this][recipient_s200] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L646]               havoc __exception;
[L647]               revert := false;
[L648]   COND TRUE   __exception
[L649]               __tmp__Balance := Balance;
[L650]               __tmp__DType := DType;
[L651]               __tmp__Alloc := Alloc;
[L652]               __tmp__balance_ADDR := balance_ADDR;
[L653]               __tmp__M_Ref_int := M_Ref_int;
[L654]               __tmp__sum__balances0 := sum__balances0;
[L655]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L656]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L657]               __tmp__sum__allowances1 := sum__allowances1;
[L658]               __tmp__M_Ref_bool := M_Ref_bool;
[L659]               __tmp__sum_exceptions2 := sum_exceptions2;
[L660]               __tmp__sum_minters3 := sum_minters3;
[L661]               __tmp__Length := Length;
[L662]               __tmp__now := now;
[L663]               __tmp___balances_ERC20 := _balances_ERC20;
[L664]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L665]               __tmp__exceptions_ERC20 := exceptions_ERC20;
[L666]               __tmp__uniswap_ERC20 := uniswap_ERC20;
[L667]               __tmp___owner_ERC20 := _owner_ERC20;
[L668]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L669]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L670]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L671]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L672]               __tmp__governance_Token := governance_Token;
[L673]               __tmp__minters_Token := minters_Token;
[L674]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s200, amount_s200);
[L2826]  COND TRUE   __tmp__DType[this] == Token
[L2827]  CALL        call __var_4 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2619]              __ret_0_ := msgsender_MSG;
[L2827]  RET         call __var_4 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2828]  COND FALSE  !(revert)
[L2839]  COND TRUE   __tmp__DType[this] == Token
[L2840]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_4, recipient_s200, amount_s200);
[L3311]              __var_15 := null;
[L3312]  COND FALSE  !(!(sender_s383 != null))
[L3316]              __var_16 := null;
[L3317]  COND FALSE  !(!(recipient_s383 != null))
[L3321]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s383], amount_s383, 47124453);
[L3654]  COND TRUE   !(b_s621 <= a_s621)
[L3655]              revert := true;
[L3321]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s383], amount_s383, 47124453);
[L3322]  COND TRUE   revert
[L2840]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_4, recipient_s200, amount_s200);
[L2841]  COND TRUE   revert
[L674]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s200, amount_s200);
[L675]               assume revert || gas < 0;
[L5571]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s200, amount_s200);
[L5701]  RET         call CorralChoice_Token(this);

Loop:
[L5701]  CALL        call CorralChoice_Token(this);
[L5496]              havoc msgsender_MSG;
[L5497]              havoc msgvalue_MSG;
[L5498]              havoc choice;
[L5499]              havoc __ret_0_totalSupply;
[L5500]              havoc account_s181;
[L5501]              havoc __ret_0_balanceOf;
[L5502]              havoc recipient_s200;
[L5503]              havoc amount_s200;
[L5504]              havoc __ret_0_transfer;
[L5505]              havoc owner_s216;
[L5506]              havoc spender_s216;
[L5507]              havoc __ret_0_allowance;
[L5508]              havoc spender_s235;
[L5509]              havoc amount_s235;
[L5510]              havoc __ret_0_approve;
[L5511]              havoc sender_s271;
[L5512]              havoc recipient_s271;
[L5513]              havoc amount_s271;
[L5514]              havoc __ret_0_transferFrom;
[L5515]              havoc owner_s119;
[L5516]              havoc someAddress_s143;
[L5517]              havoc spender_s298;
[L5518]              havoc addedValue_s298;
[L5519]              havoc __ret_0_increaseAllowance;
[L5520]              havoc spender_s326;
[L5521]              havoc subtractedValue_s326;
[L5522]              havoc __ret_0_decreaseAllowance;
[L5523]              havoc name_s544;
[L5524]              havoc symbol_s544;
[L5525]              havoc decimals_s544;
[L5526]              havoc __ret_0_name;
[L5527]              havoc __ret_0_symbol;
[L5528]              havoc __ret_0_decimals;
[L5529]              havoc __ret_0_governance;
[L5530]              havoc arg812_s0;
[L5531]              havoc __ret_0_minters;
[L5532]              havoc name_s730;
[L5533]              havoc ticker_s730;
[L5534]              havoc amount_s730;
[L5535]              havoc account_s751;
[L5536]              havoc amount_s751;
[L5537]              havoc _governance_s769;
[L5538]              havoc _minter_s789;
[L5539]              havoc _minter_s809;
[L5540]              havoc tmpNow;
[L5541]              havoc gas;
[L5542]              assume gas > 4000000 && gas <= 8000000;
[L5543]              tmpNow := now;
[L5544]              havoc now;
[L5545]              assume now > tmpNow;
[L5546]              assume msgsender_MSG != null;
[L5547]              assume DType[msgsender_MSG] != IERC20;
[L5548]              assume DType[msgsender_MSG] != Context;
[L5549]              assume DType[msgsender_MSG] != ERC20;
[L5550]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5551]              assume DType[msgsender_MSG] != SafeMath;
[L5552]              assume DType[msgsender_MSG] != Token;
[L5553]              Alloc[msgsender_MSG] := true;
[L5554]  COND FALSE  !(choice == 20)
[L5560]  COND FALSE  !(choice == 19)
[L5566]  COND FALSE  !(choice == 18)
[L5573]  COND FALSE  !(choice == 17)
[L5579]  COND FALSE  !(choice == 16)
[L5586]  COND FALSE  !(choice == 15)
[L5593]  COND FALSE  !(choice == 14)
[L5599]  COND FALSE  !(choice == 13)
[L5605]  COND FALSE  !(choice == 12)
[L5611]  COND FALSE  !(choice == 11)
[L5618]  COND FALSE  !(choice == 10)
[L5625]  COND FALSE  !(choice == 9)
[L5631]  COND FALSE  !(choice == 8)
[L5637]  COND FALSE  !(choice == 7)
[L5643]  COND FALSE  !(choice == 6)
[L5649]  COND FALSE  !(choice == 5)
[L5655]  COND TRUE   choice == 4
[L5656]              gas := gas - 21000;
[L5657]  COND TRUE   gas >= 0
[L5658]              assume amount_s751 >= 0 && amount_s751 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5659]              assume msgvalue_MSG == 0;
[L5660]  CALL        call mint~address~uint256_Token(this, msgsender_MSG, msgvalue_MSG, account_s751, amount_s751);
[L1516]              havoc __exception;
[L1517]              revert := false;
[L1518]  COND FALSE  !(__exception)
[L1547]  CALL        call mint~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, account_s751, amount_s751);
[L3859]  COND FALSE  !(!minters_Token[this][msgsender_MSG])
[L3863]  COND TRUE   DType[this] == Token
[L3864]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s751, amount_s751);
[L3399]              __var_19 := null;
[L3400]  COND FALSE  !(!(account_s426 != null))
[L3404]  CALL        call __var_20 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s426);
[L3642]              c_s594 := (a_s594 + b_s594) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3643]  COND FALSE  !(!(c_s594 >= a_s594))
[L3647]              __ret_0_ := c_s594;
[L3404]  RET         call __var_20 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s426);
[L3405]  COND FALSE  !(revert)
[L3408]              _totalSupply_ERC20[this] := __var_20;
[L3409]  CALL        call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s426], amount_s426);
[L3642]              c_s594 := (a_s594 + b_s594) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3643]  COND FALSE  !(!(c_s594 >= a_s594))
[L3647]              __ret_0_ := c_s594;
[L3409]  RET         call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s426], amount_s426);
[L3410]  COND FALSE  !(revert)
[L3413]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s426];
[L3414]              _balances_ERC20[this][account_s426] := __var_21;
[L3415]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s426];
[L3416]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3864]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s751, amount_s751);
[L3865]  COND FALSE  !(revert)
[L1547]  RET         call mint~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, account_s751, amount_s751);
[L1548]              assume !revert && gas >= 0;
[L5660]  RET         call mint~address~uint256_Token(this, msgsender_MSG, msgvalue_MSG, account_s751, amount_s751);
[L5701]  RET         call CorralChoice_Token(this);

[2020-11-25 05:57:54,811 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:57:54,811 INFO  L82        PathProgramCache]: Analyzing trace with hash -1284568706, now seen corresponding path program 1 times
[2020-11-25 05:57:54,811 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:57:54,821 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:57:54,877 INFO  L134       CoverageAnalysis]: Checked inductivity of 45 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 45 trivial. 0 not checked.
[2020-11-25 05:57:54,877 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 05:57:54,877 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [10] imperfect sequences [] total 10
[2020-11-25 05:57:54,877 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:57:54,878 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-25 05:57:54,878 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=18, Invalid=72, Unknown=0, NotChecked=0, Total=90
[2020-11-25 05:57:54,878 INFO  L87              Difference]: Start difference. First operand 3670 states and 4075 transitions. cyclomatic complexity: 407 Second operand 10 states.
[2020-11-25 05:57:55,761 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:57:55,762 INFO  L93              Difference]: Finished difference Result 3825 states and 4239 transitions.
[2020-11-25 05:57:55,762 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-11-25 05:57:55,762 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3825 states and 4239 transitions.
[2020-11-25 05:57:55,769 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:57:55,777 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3825 states to 3825 states and 4239 transitions.
[2020-11-25 05:57:55,777 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1055
[2020-11-25 05:57:55,777 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1055
[2020-11-25 05:57:55,777 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3825 states and 4239 transitions.
[2020-11-25 05:57:55,780 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:57:55,780 INFO  L728         BuchiCegarLoop]: Abstraction has 3825 states and 4239 transitions.
[2020-11-25 05:57:55,783 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3825 states and 4239 transitions.
[2020-11-25 05:57:55,801 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3825 to 3721.
[2020-11-25 05:57:55,801 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3721 states.
[2020-11-25 05:57:55,805 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3721 states to 3721 states and 4126 transitions.
[2020-11-25 05:57:55,805 INFO  L751         BuchiCegarLoop]: Abstraction has 3721 states and 4126 transitions.
[2020-11-25 05:57:55,805 INFO  L631         BuchiCegarLoop]: Abstraction has 3721 states and 4126 transitions.
[2020-11-25 05:57:55,805 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 05:57:55,805 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3721 states and 4126 transitions.
[2020-11-25 05:57:55,809 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:57:55,809 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:57:55,809 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:57:55,810 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:57:55,810 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5691]              assume null == 0;
[L5692]  CALL        call this := FreshRefGenerator__success();
[L2547]              havoc newRef;
[L2548]              assume Alloc[newRef] == false;
[L2549]              Alloc[newRef] := true;
[L2550]              assume newRef != null;
[L5692]  RET         call this := FreshRefGenerator__success();
[L5693]              assume now >= 0;
[L5694]              assume DType[this] == Token;
[L5695]              assume msgvalue_MSG == 0;
[L5696]              gas := gas - 53000;
[L5697]  CALL        call Token_Token(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L1447]              havoc __exception;
[L1448]              revert := false;
[L1449]  COND FALSE  !(__exception)
[L1478]  CALL        call Token_Token__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L3817]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2611]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2596]              assume msgsender_MSG != null;
[L2597]              Balance[this] := 0;
[L2611]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2612]  COND FALSE  !(revert)
[L3817]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3818]  COND FALSE  !(revert)
[L3821]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3821]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3822]  COND FALSE  !(revert)
[L3826]              havoc __var_29;
[L3827]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_29);
[L2681]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2611]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2596]              assume msgsender_MSG != null;
[L2597]              Balance[this] := 0;
[L2611]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2612]  COND FALSE  !(revert)
[L2681]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2682]  COND FALSE  !(revert)
[L2685]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2685]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2686]  COND FALSE  !(revert)
[L2689]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, owner_s119);
[L2649]              assume msgsender_MSG != null;
[L2650]              Balance[this] := 0;
[L2651]              _balances_ERC20[this] := zeroRefintArr();
[L2652]              sum__balances0[this] := 0;
[L2653]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2654]              sum__allowances1[this] := 0;
[L2655]              exceptions_ERC20[this] := zeroRefboolArr();
[L2656]              uniswap_ERC20[this] := null;
[L2657]              _owner_ERC20[this] := null;
[L2658]              _totalSupply_ERC20[this] := 0;
[L2660]              _owner_ERC20[this] := owner_s119;
[L2689]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, owner_s119);
[L2690]  COND FALSE  !(revert)
[L3827]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_29);
[L3828]  COND FALSE  !(revert)
[L3831]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, 18);
[L3549]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3549]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3550]  COND FALSE  !(revert)
[L3553]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s544, symbol_s544, decimals_s544);
[L3524]              assume msgsender_MSG != null;
[L3525]              Balance[this] := 0;
[L3526]              _name_ERC20Detailed[this] := -1081022691;
[L3527]              _symbol_ERC20Detailed[this] := -1081022691;
[L3528]              _decimals_ERC20Detailed[this] := 0;
[L3530]              _name_ERC20Detailed[this] := name_s544;
[L3531]              _symbol_ERC20Detailed[this] := symbol_s544;
[L3532]              _decimals_ERC20Detailed[this] := decimals_s544;
[L3553]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s544, symbol_s544, decimals_s544);
[L3554]  COND FALSE  !(revert)
[L3831]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, 18);
[L3832]  COND FALSE  !(revert)
[L3835]  CALL        call Token_Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L3763]              assume msgsender_MSG != null;
[L3764]              Balance[this] := 0;
[L3765]              governance_Token[this] := null;
[L3766]              minters_Token[this] := zeroRefboolArr();
[L3769]              havoc __var_27;
[L3770]              governance_Token[this] := __var_27;
[L3772]              havoc __var_28;
[L3773]  CALL        call addMinter~address_Token__success(this, msgsender_MSG, msgvalue_MSG, __var_28);
[L3902]  COND FALSE  !(!(msgsender_MSG == governance_Token[this]))
[L3906]              minters_Token[this][_minter_s789] := true;
[L3773]  RET         call addMinter~address_Token__success(this, msgsender_MSG, msgvalue_MSG, __var_28);
[L3774]  COND FALSE  !(revert)
[L3777]  CALL        call mint~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, governance_Token[this], amount_s730);
[L3859]  COND FALSE  !(!minters_Token[this][msgsender_MSG])
[L3863]  COND TRUE   DType[this] == Token
[L3864]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s751, amount_s751);
[L3399]              __var_19 := null;
[L3400]  COND FALSE  !(!(account_s426 != null))
[L3404]  CALL        call __var_20 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s426);
[L3642]              c_s594 := (a_s594 + b_s594) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3643]  COND FALSE  !(!(c_s594 >= a_s594))
[L3647]              __ret_0_ := c_s594;
[L3404]  RET         call __var_20 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s426);
[L3405]  COND FALSE  !(revert)
[L3408]              _totalSupply_ERC20[this] := __var_20;
[L3409]  CALL        call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s426], amount_s426);
[L3642]              c_s594 := (a_s594 + b_s594) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3643]  COND FALSE  !(!(c_s594 >= a_s594))
[L3647]              __ret_0_ := c_s594;
[L3409]  RET         call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s426], amount_s426);
[L3410]  COND FALSE  !(revert)
[L3413]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s426];
[L3414]              _balances_ERC20[this][account_s426] := __var_21;
[L3415]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s426];
[L3416]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3864]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s751, amount_s751);
[L3865]  COND FALSE  !(revert)
[L3777]  RET         call mint~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, governance_Token[this], amount_s730);
[L3778]  COND FALSE  !(revert)
[L3835]  RET         call Token_Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L3836]  COND FALSE  !(revert)
[L1478]  RET         call Token_Token__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L1479]              assume !revert && gas >= 0;
[L5697]  RET         call Token_Token(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L5698]              assume !revert && gas >= 0;
[L5701]  CALL        call CorralChoice_Token(this);
[L5496]              havoc msgsender_MSG;
[L5497]              havoc msgvalue_MSG;
[L5498]              havoc choice;
[L5499]              havoc __ret_0_totalSupply;
[L5500]              havoc account_s181;
[L5501]              havoc __ret_0_balanceOf;
[L5502]              havoc recipient_s200;
[L5503]              havoc amount_s200;
[L5504]              havoc __ret_0_transfer;
[L5505]              havoc owner_s216;
[L5506]              havoc spender_s216;
[L5507]              havoc __ret_0_allowance;
[L5508]              havoc spender_s235;
[L5509]              havoc amount_s235;
[L5510]              havoc __ret_0_approve;
[L5511]              havoc sender_s271;
[L5512]              havoc recipient_s271;
[L5513]              havoc amount_s271;
[L5514]              havoc __ret_0_transferFrom;
[L5515]              havoc owner_s119;
[L5516]              havoc someAddress_s143;
[L5517]              havoc spender_s298;
[L5518]              havoc addedValue_s298;
[L5519]              havoc __ret_0_increaseAllowance;
[L5520]              havoc spender_s326;
[L5521]              havoc subtractedValue_s326;
[L5522]              havoc __ret_0_decreaseAllowance;
[L5523]              havoc name_s544;
[L5524]              havoc symbol_s544;
[L5525]              havoc decimals_s544;
[L5526]              havoc __ret_0_name;
[L5527]              havoc __ret_0_symbol;
[L5528]              havoc __ret_0_decimals;
[L5529]              havoc __ret_0_governance;
[L5530]              havoc arg812_s0;
[L5531]              havoc __ret_0_minters;
[L5532]              havoc name_s730;
[L5533]              havoc ticker_s730;
[L5534]              havoc amount_s730;
[L5535]              havoc account_s751;
[L5536]              havoc amount_s751;
[L5537]              havoc _governance_s769;
[L5538]              havoc _minter_s789;
[L5539]              havoc _minter_s809;
[L5540]              havoc tmpNow;
[L5541]              havoc gas;
[L5542]              assume gas > 4000000 && gas <= 8000000;
[L5543]              tmpNow := now;
[L5544]              havoc now;
[L5545]              assume now > tmpNow;
[L5546]              assume msgsender_MSG != null;
[L5547]              assume DType[msgsender_MSG] != IERC20;
[L5548]              assume DType[msgsender_MSG] != Context;
[L5549]              assume DType[msgsender_MSG] != ERC20;
[L5550]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5551]              assume DType[msgsender_MSG] != SafeMath;
[L5552]              assume DType[msgsender_MSG] != Token;
[L5553]              Alloc[msgsender_MSG] := true;
[L5554]  COND FALSE  !(choice == 20)
[L5560]  COND FALSE  !(choice == 19)
[L5566]  COND TRUE   choice == 18
[L5567]              gas := gas - 21000;
[L5568]  COND TRUE   gas >= 0
[L5569]              assume amount_s200 >= 0 && amount_s200 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5570]              assume msgvalue_MSG == 0;
[L5571]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s200, amount_s200);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s200 && amount_s200 <= _balances_ERC20[this][msgsender_MSG]) && amount_s200 >= 0) && amount_s200 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s200] >= 0) && _balances_ERC20[this][recipient_s200] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L646]               havoc __exception;
[L647]               revert := false;
[L648]   COND TRUE   __exception
[L649]               __tmp__Balance := Balance;
[L650]               __tmp__DType := DType;
[L651]               __tmp__Alloc := Alloc;
[L652]               __tmp__balance_ADDR := balance_ADDR;
[L653]               __tmp__M_Ref_int := M_Ref_int;
[L654]               __tmp__sum__balances0 := sum__balances0;
[L655]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L656]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L657]               __tmp__sum__allowances1 := sum__allowances1;
[L658]               __tmp__M_Ref_bool := M_Ref_bool;
[L659]               __tmp__sum_exceptions2 := sum_exceptions2;
[L660]               __tmp__sum_minters3 := sum_minters3;
[L661]               __tmp__Length := Length;
[L662]               __tmp__now := now;
[L663]               __tmp___balances_ERC20 := _balances_ERC20;
[L664]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L665]               __tmp__exceptions_ERC20 := exceptions_ERC20;
[L666]               __tmp__uniswap_ERC20 := uniswap_ERC20;
[L667]               __tmp___owner_ERC20 := _owner_ERC20;
[L668]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L669]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L670]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L671]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L672]               __tmp__governance_Token := governance_Token;
[L673]               __tmp__minters_Token := minters_Token;
[L674]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s200, amount_s200);
[L2826]  COND TRUE   __tmp__DType[this] == Token
[L2827]  CALL        call __var_4 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2619]              __ret_0_ := msgsender_MSG;
[L2827]  RET         call __var_4 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2828]  COND FALSE  !(revert)
[L2839]  COND TRUE   __tmp__DType[this] == Token
[L2840]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_4, recipient_s200, amount_s200);
[L3311]              __var_15 := null;
[L3312]  COND FALSE  !(!(sender_s383 != null))
[L3316]              __var_16 := null;
[L3317]  COND FALSE  !(!(recipient_s383 != null))
[L3321]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s383], amount_s383, 47124453);
[L3654]  COND FALSE  !(!(b_s621 <= a_s621))
[L3658]              c_s621 := (a_s621 - b_s621) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3659]              __ret_0_ := c_s621;
[L3321]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s383], amount_s383, 47124453);
[L3322]  COND FALSE  !(revert)
[L3325]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][sender_s383];
[L3326]              __tmp___balances_ERC20[this][sender_s383] := __var_17;
[L3327]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][sender_s383];
[L3328]  CALL        call __var_18 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s383], amount_s383);
[L3630]              c_s594 := (a_s594 + b_s594) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3631]  COND TRUE   !(c_s594 >= a_s594)
[L3632]              revert := true;
[L3328]  RET         call __var_18 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s383], amount_s383);
[L3329]  COND TRUE   revert
[L2840]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_4, recipient_s200, amount_s200);
[L2841]  COND TRUE   revert
[L674]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s200, amount_s200);
[L675]               assume revert || gas < 0;
[L5571]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s200, amount_s200);
[L5701]  RET         call CorralChoice_Token(this);

Loop:
[L5701]  CALL        call CorralChoice_Token(this);
[L5496]              havoc msgsender_MSG;
[L5497]              havoc msgvalue_MSG;
[L5498]              havoc choice;
[L5499]              havoc __ret_0_totalSupply;
[L5500]              havoc account_s181;
[L5501]              havoc __ret_0_balanceOf;
[L5502]              havoc recipient_s200;
[L5503]              havoc amount_s200;
[L5504]              havoc __ret_0_transfer;
[L5505]              havoc owner_s216;
[L5506]              havoc spender_s216;
[L5507]              havoc __ret_0_allowance;
[L5508]              havoc spender_s235;
[L5509]              havoc amount_s235;
[L5510]              havoc __ret_0_approve;
[L5511]              havoc sender_s271;
[L5512]              havoc recipient_s271;
[L5513]              havoc amount_s271;
[L5514]              havoc __ret_0_transferFrom;
[L5515]              havoc owner_s119;
[L5516]              havoc someAddress_s143;
[L5517]              havoc spender_s298;
[L5518]              havoc addedValue_s298;
[L5519]              havoc __ret_0_increaseAllowance;
[L5520]              havoc spender_s326;
[L5521]              havoc subtractedValue_s326;
[L5522]              havoc __ret_0_decreaseAllowance;
[L5523]              havoc name_s544;
[L5524]              havoc symbol_s544;
[L5525]              havoc decimals_s544;
[L5526]              havoc __ret_0_name;
[L5527]              havoc __ret_0_symbol;
[L5528]              havoc __ret_0_decimals;
[L5529]              havoc __ret_0_governance;
[L5530]              havoc arg812_s0;
[L5531]              havoc __ret_0_minters;
[L5532]              havoc name_s730;
[L5533]              havoc ticker_s730;
[L5534]              havoc amount_s730;
[L5535]              havoc account_s751;
[L5536]              havoc amount_s751;
[L5537]              havoc _governance_s769;
[L5538]              havoc _minter_s789;
[L5539]              havoc _minter_s809;
[L5540]              havoc tmpNow;
[L5541]              havoc gas;
[L5542]              assume gas > 4000000 && gas <= 8000000;
[L5543]              tmpNow := now;
[L5544]              havoc now;
[L5545]              assume now > tmpNow;
[L5546]              assume msgsender_MSG != null;
[L5547]              assume DType[msgsender_MSG] != IERC20;
[L5548]              assume DType[msgsender_MSG] != Context;
[L5549]              assume DType[msgsender_MSG] != ERC20;
[L5550]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5551]              assume DType[msgsender_MSG] != SafeMath;
[L5552]              assume DType[msgsender_MSG] != Token;
[L5553]              Alloc[msgsender_MSG] := true;
[L5554]  COND TRUE   choice == 20
[L5555]              gas := gas - 21000;
[L5556]  COND FALSE  !(gas >= 0)
[L5701]  RET         call CorralChoice_Token(this);

[2020-11-25 05:57:55,813 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:57:55,813 INFO  L82        PathProgramCache]: Analyzing trace with hash -511988257, now seen corresponding path program 1 times
[2020-11-25 05:57:55,814 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:57:55,826 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:57:55,926 INFO  L134       CoverageAnalysis]: Checked inductivity of 45 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 45 trivial. 0 not checked.
[2020-11-25 05:57:55,926 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 05:57:55,926 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [16] imperfect sequences [] total 16
[2020-11-25 05:57:55,927 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:57:55,927 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-11-25 05:57:55,927 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=34, Invalid=206, Unknown=0, NotChecked=0, Total=240
[2020-11-25 05:57:55,927 INFO  L87              Difference]: Start difference. First operand 3721 states and 4126 transitions. cyclomatic complexity: 407 Second operand 16 states.
[2020-11-25 05:57:57,645 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:57:57,645 INFO  L93              Difference]: Finished difference Result 3811 states and 4219 transitions.
[2020-11-25 05:57:57,645 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 05:57:57,645 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3811 states and 4219 transitions.
[2020-11-25 05:57:57,652 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:57:57,659 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3811 states to 3811 states and 4219 transitions.
[2020-11-25 05:57:57,660 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1047
[2020-11-25 05:57:57,660 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1047
[2020-11-25 05:57:57,660 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3811 states and 4219 transitions.
[2020-11-25 05:57:57,662 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:57:57,662 INFO  L728         BuchiCegarLoop]: Abstraction has 3811 states and 4219 transitions.
[2020-11-25 05:57:57,665 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3811 states and 4219 transitions.
[2020-11-25 05:57:57,682 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3811 to 3709.
[2020-11-25 05:57:57,682 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3709 states.
[2020-11-25 05:57:57,685 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3709 states to 3709 states and 4108 transitions.
[2020-11-25 05:57:57,685 INFO  L751         BuchiCegarLoop]: Abstraction has 3709 states and 4108 transitions.
[2020-11-25 05:57:57,685 INFO  L631         BuchiCegarLoop]: Abstraction has 3709 states and 4108 transitions.
[2020-11-25 05:57:57,685 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 05:57:57,685 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3709 states and 4108 transitions.
[2020-11-25 05:57:57,689 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:57:57,689 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:57:57,689 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:57:57,690 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:57:57,690 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5691]              assume null == 0;
[L5692]  CALL        call this := FreshRefGenerator__success();
[L2547]              havoc newRef;
[L2548]              assume Alloc[newRef] == false;
[L2549]              Alloc[newRef] := true;
[L2550]              assume newRef != null;
[L5692]  RET         call this := FreshRefGenerator__success();
[L5693]              assume now >= 0;
[L5694]              assume DType[this] == Token;
[L5695]              assume msgvalue_MSG == 0;
[L5696]              gas := gas - 53000;
[L5697]  CALL        call Token_Token(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L1447]              havoc __exception;
[L1448]              revert := false;
[L1449]  COND FALSE  !(__exception)
[L1478]  CALL        call Token_Token__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L3817]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2611]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2596]              assume msgsender_MSG != null;
[L2597]              Balance[this] := 0;
[L2611]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2612]  COND FALSE  !(revert)
[L3817]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3818]  COND FALSE  !(revert)
[L3821]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3821]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3822]  COND FALSE  !(revert)
[L3826]              havoc __var_29;
[L3827]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_29);
[L2681]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2611]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2596]              assume msgsender_MSG != null;
[L2597]              Balance[this] := 0;
[L2611]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2612]  COND FALSE  !(revert)
[L2681]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2682]  COND FALSE  !(revert)
[L2685]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2685]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2686]  COND FALSE  !(revert)
[L2689]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, owner_s119);
[L2649]              assume msgsender_MSG != null;
[L2650]              Balance[this] := 0;
[L2651]              _balances_ERC20[this] := zeroRefintArr();
[L2652]              sum__balances0[this] := 0;
[L2653]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2654]              sum__allowances1[this] := 0;
[L2655]              exceptions_ERC20[this] := zeroRefboolArr();
[L2656]              uniswap_ERC20[this] := null;
[L2657]              _owner_ERC20[this] := null;
[L2658]              _totalSupply_ERC20[this] := 0;
[L2660]              _owner_ERC20[this] := owner_s119;
[L2689]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, owner_s119);
[L2690]  COND FALSE  !(revert)
[L3827]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_29);
[L3828]  COND FALSE  !(revert)
[L3831]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, 18);
[L3549]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3549]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3550]  COND FALSE  !(revert)
[L3553]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s544, symbol_s544, decimals_s544);
[L3524]              assume msgsender_MSG != null;
[L3525]              Balance[this] := 0;
[L3526]              _name_ERC20Detailed[this] := -1081022691;
[L3527]              _symbol_ERC20Detailed[this] := -1081022691;
[L3528]              _decimals_ERC20Detailed[this] := 0;
[L3530]              _name_ERC20Detailed[this] := name_s544;
[L3531]              _symbol_ERC20Detailed[this] := symbol_s544;
[L3532]              _decimals_ERC20Detailed[this] := decimals_s544;
[L3553]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s544, symbol_s544, decimals_s544);
[L3554]  COND FALSE  !(revert)
[L3831]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, 18);
[L3832]  COND FALSE  !(revert)
[L3835]  CALL        call Token_Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L3763]              assume msgsender_MSG != null;
[L3764]              Balance[this] := 0;
[L3765]              governance_Token[this] := null;
[L3766]              minters_Token[this] := zeroRefboolArr();
[L3769]              havoc __var_27;
[L3770]              governance_Token[this] := __var_27;
[L3772]              havoc __var_28;
[L3773]  CALL        call addMinter~address_Token__success(this, msgsender_MSG, msgvalue_MSG, __var_28);
[L3902]  COND FALSE  !(!(msgsender_MSG == governance_Token[this]))
[L3906]              minters_Token[this][_minter_s789] := true;
[L3773]  RET         call addMinter~address_Token__success(this, msgsender_MSG, msgvalue_MSG, __var_28);
[L3774]  COND FALSE  !(revert)
[L3777]  CALL        call mint~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, governance_Token[this], amount_s730);
[L3859]  COND FALSE  !(!minters_Token[this][msgsender_MSG])
[L3863]  COND TRUE   DType[this] == Token
[L3864]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s751, amount_s751);
[L3399]              __var_19 := null;
[L3400]  COND FALSE  !(!(account_s426 != null))
[L3404]  CALL        call __var_20 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s426);
[L3642]              c_s594 := (a_s594 + b_s594) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3643]  COND FALSE  !(!(c_s594 >= a_s594))
[L3647]              __ret_0_ := c_s594;
[L3404]  RET         call __var_20 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s426);
[L3405]  COND FALSE  !(revert)
[L3408]              _totalSupply_ERC20[this] := __var_20;
[L3409]  CALL        call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s426], amount_s426);
[L3642]              c_s594 := (a_s594 + b_s594) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3643]  COND FALSE  !(!(c_s594 >= a_s594))
[L3647]              __ret_0_ := c_s594;
[L3409]  RET         call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s426], amount_s426);
[L3410]  COND FALSE  !(revert)
[L3413]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s426];
[L3414]              _balances_ERC20[this][account_s426] := __var_21;
[L3415]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s426];
[L3416]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3864]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s751, amount_s751);
[L3865]  COND FALSE  !(revert)
[L3777]  RET         call mint~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, governance_Token[this], amount_s730);
[L3778]  COND FALSE  !(revert)
[L3835]  RET         call Token_Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L3836]  COND FALSE  !(revert)
[L1478]  RET         call Token_Token__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L1479]              assume !revert && gas >= 0;
[L5697]  RET         call Token_Token(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L5698]              assume !revert && gas >= 0;
[L5701]  CALL        call CorralChoice_Token(this);
[L5496]              havoc msgsender_MSG;
[L5497]              havoc msgvalue_MSG;
[L5498]              havoc choice;
[L5499]              havoc __ret_0_totalSupply;
[L5500]              havoc account_s181;
[L5501]              havoc __ret_0_balanceOf;
[L5502]              havoc recipient_s200;
[L5503]              havoc amount_s200;
[L5504]              havoc __ret_0_transfer;
[L5505]              havoc owner_s216;
[L5506]              havoc spender_s216;
[L5507]              havoc __ret_0_allowance;
[L5508]              havoc spender_s235;
[L5509]              havoc amount_s235;
[L5510]              havoc __ret_0_approve;
[L5511]              havoc sender_s271;
[L5512]              havoc recipient_s271;
[L5513]              havoc amount_s271;
[L5514]              havoc __ret_0_transferFrom;
[L5515]              havoc owner_s119;
[L5516]              havoc someAddress_s143;
[L5517]              havoc spender_s298;
[L5518]              havoc addedValue_s298;
[L5519]              havoc __ret_0_increaseAllowance;
[L5520]              havoc spender_s326;
[L5521]              havoc subtractedValue_s326;
[L5522]              havoc __ret_0_decreaseAllowance;
[L5523]              havoc name_s544;
[L5524]              havoc symbol_s544;
[L5525]              havoc decimals_s544;
[L5526]              havoc __ret_0_name;
[L5527]              havoc __ret_0_symbol;
[L5528]              havoc __ret_0_decimals;
[L5529]              havoc __ret_0_governance;
[L5530]              havoc arg812_s0;
[L5531]              havoc __ret_0_minters;
[L5532]              havoc name_s730;
[L5533]              havoc ticker_s730;
[L5534]              havoc amount_s730;
[L5535]              havoc account_s751;
[L5536]              havoc amount_s751;
[L5537]              havoc _governance_s769;
[L5538]              havoc _minter_s789;
[L5539]              havoc _minter_s809;
[L5540]              havoc tmpNow;
[L5541]              havoc gas;
[L5542]              assume gas > 4000000 && gas <= 8000000;
[L5543]              tmpNow := now;
[L5544]              havoc now;
[L5545]              assume now > tmpNow;
[L5546]              assume msgsender_MSG != null;
[L5547]              assume DType[msgsender_MSG] != IERC20;
[L5548]              assume DType[msgsender_MSG] != Context;
[L5549]              assume DType[msgsender_MSG] != ERC20;
[L5550]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5551]              assume DType[msgsender_MSG] != SafeMath;
[L5552]              assume DType[msgsender_MSG] != Token;
[L5553]              Alloc[msgsender_MSG] := true;
[L5554]  COND FALSE  !(choice == 20)
[L5560]  COND FALSE  !(choice == 19)
[L5566]  COND TRUE   choice == 18
[L5567]              gas := gas - 21000;
[L5568]  COND TRUE   gas >= 0
[L5569]              assume amount_s200 >= 0 && amount_s200 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5570]              assume msgvalue_MSG == 0;
[L5571]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s200, amount_s200);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s200 && amount_s200 <= _balances_ERC20[this][msgsender_MSG]) && amount_s200 >= 0) && amount_s200 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s200] >= 0) && _balances_ERC20[this][recipient_s200] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L646]               havoc __exception;
[L647]               revert := false;
[L648]   COND TRUE   __exception
[L649]               __tmp__Balance := Balance;
[L650]               __tmp__DType := DType;
[L651]               __tmp__Alloc := Alloc;
[L652]               __tmp__balance_ADDR := balance_ADDR;
[L653]               __tmp__M_Ref_int := M_Ref_int;
[L654]               __tmp__sum__balances0 := sum__balances0;
[L655]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L656]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L657]               __tmp__sum__allowances1 := sum__allowances1;
[L658]               __tmp__M_Ref_bool := M_Ref_bool;
[L659]               __tmp__sum_exceptions2 := sum_exceptions2;
[L660]               __tmp__sum_minters3 := sum_minters3;
[L661]               __tmp__Length := Length;
[L662]               __tmp__now := now;
[L663]               __tmp___balances_ERC20 := _balances_ERC20;
[L664]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L665]               __tmp__exceptions_ERC20 := exceptions_ERC20;
[L666]               __tmp__uniswap_ERC20 := uniswap_ERC20;
[L667]               __tmp___owner_ERC20 := _owner_ERC20;
[L668]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L669]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L670]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L671]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L672]               __tmp__governance_Token := governance_Token;
[L673]               __tmp__minters_Token := minters_Token;
[L674]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s200, amount_s200);
[L2826]  COND TRUE   __tmp__DType[this] == Token
[L2827]  CALL        call __var_4 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2619]              __ret_0_ := msgsender_MSG;
[L2827]  RET         call __var_4 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2828]  COND FALSE  !(revert)
[L2839]  COND TRUE   __tmp__DType[this] == Token
[L2840]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_4, recipient_s200, amount_s200);
[L3311]              __var_15 := null;
[L3312]  COND FALSE  !(!(sender_s383 != null))
[L3316]              __var_16 := null;
[L3317]  COND FALSE  !(!(recipient_s383 != null))
[L3321]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s383], amount_s383, 47124453);
[L3654]  COND FALSE  !(!(b_s621 <= a_s621))
[L3658]              c_s621 := (a_s621 - b_s621) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3659]              __ret_0_ := c_s621;
[L3321]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s383], amount_s383, 47124453);
[L3322]  COND FALSE  !(revert)
[L3325]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][sender_s383];
[L3326]              __tmp___balances_ERC20[this][sender_s383] := __var_17;
[L3327]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][sender_s383];
[L3328]  CALL        call __var_18 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s383], amount_s383);
[L3630]              c_s594 := (a_s594 + b_s594) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3631]  COND FALSE  !(!(c_s594 >= a_s594))
[L3635]              __ret_0_ := c_s594;
[L3328]  RET         call __var_18 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s383], amount_s383);
[L3329]  COND FALSE  !(revert)
[L3332]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][recipient_s383];
[L3333]              __tmp___balances_ERC20[this][recipient_s383] := __var_18;
[L3334]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][recipient_s383];
[L2840]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_4, recipient_s200, amount_s200);
[L2841]  COND FALSE  !(revert)
[L2852]              __ret_0_ := true;
[L674]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s200, amount_s200);
[L675]               assume revert || gas < 0;
[L5571]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s200, amount_s200);
[L5701]  RET         call CorralChoice_Token(this);

Loop:
[L5701]  CALL        call CorralChoice_Token(this);
[L5496]              havoc msgsender_MSG;
[L5497]              havoc msgvalue_MSG;
[L5498]              havoc choice;
[L5499]              havoc __ret_0_totalSupply;
[L5500]              havoc account_s181;
[L5501]              havoc __ret_0_balanceOf;
[L5502]              havoc recipient_s200;
[L5503]              havoc amount_s200;
[L5504]              havoc __ret_0_transfer;
[L5505]              havoc owner_s216;
[L5506]              havoc spender_s216;
[L5507]              havoc __ret_0_allowance;
[L5508]              havoc spender_s235;
[L5509]              havoc amount_s235;
[L5510]              havoc __ret_0_approve;
[L5511]              havoc sender_s271;
[L5512]              havoc recipient_s271;
[L5513]              havoc amount_s271;
[L5514]              havoc __ret_0_transferFrom;
[L5515]              havoc owner_s119;
[L5516]              havoc someAddress_s143;
[L5517]              havoc spender_s298;
[L5518]              havoc addedValue_s298;
[L5519]              havoc __ret_0_increaseAllowance;
[L5520]              havoc spender_s326;
[L5521]              havoc subtractedValue_s326;
[L5522]              havoc __ret_0_decreaseAllowance;
[L5523]              havoc name_s544;
[L5524]              havoc symbol_s544;
[L5525]              havoc decimals_s544;
[L5526]              havoc __ret_0_name;
[L5527]              havoc __ret_0_symbol;
[L5528]              havoc __ret_0_decimals;
[L5529]              havoc __ret_0_governance;
[L5530]              havoc arg812_s0;
[L5531]              havoc __ret_0_minters;
[L5532]              havoc name_s730;
[L5533]              havoc ticker_s730;
[L5534]              havoc amount_s730;
[L5535]              havoc account_s751;
[L5536]              havoc amount_s751;
[L5537]              havoc _governance_s769;
[L5538]              havoc _minter_s789;
[L5539]              havoc _minter_s809;
[L5540]              havoc tmpNow;
[L5541]              havoc gas;
[L5542]              assume gas > 4000000 && gas <= 8000000;
[L5543]              tmpNow := now;
[L5544]              havoc now;
[L5545]              assume now > tmpNow;
[L5546]              assume msgsender_MSG != null;
[L5547]              assume DType[msgsender_MSG] != IERC20;
[L5548]              assume DType[msgsender_MSG] != Context;
[L5549]              assume DType[msgsender_MSG] != ERC20;
[L5550]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5551]              assume DType[msgsender_MSG] != SafeMath;
[L5552]              assume DType[msgsender_MSG] != Token;
[L5553]              Alloc[msgsender_MSG] := true;
[L5554]  COND TRUE   choice == 20
[L5555]              gas := gas - 21000;
[L5556]  COND FALSE  !(gas >= 0)
[L5701]  RET         call CorralChoice_Token(this);

[2020-11-25 05:57:57,693 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:57:57,693 INFO  L82        PathProgramCache]: Analyzing trace with hash -665646285, now seen corresponding path program 1 times
[2020-11-25 05:57:57,693 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:57:57,703 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:57:57,742 INFO  L134       CoverageAnalysis]: Checked inductivity of 45 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 45 trivial. 0 not checked.
[2020-11-25 05:57:57,742 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 05:57:57,742 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 05:57:57,742 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:57:57,742 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 05:57:57,742 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 05:57:57,742 INFO  L87              Difference]: Start difference. First operand 3709 states and 4108 transitions. cyclomatic complexity: 401 Second operand 5 states.
[2020-11-25 05:57:58,000 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:57:58,000 INFO  L93              Difference]: Finished difference Result 2564 states and 2834 transitions.
[2020-11-25 05:57:58,000 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 05:57:58,000 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2564 states and 2834 transitions.
[2020-11-25 05:57:58,004 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 05:57:58,004 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2564 states to 0 states and 0 transitions.
[2020-11-25 05:57:58,005 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 05:57:58,005 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 05:57:58,005 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 05:57:58,005 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:57:58,005 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 05:57:58,005 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 05:57:58,005 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 05:57:58,005 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 05:57:58,005 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 05:57:58,005 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 05:57:58,005 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 05:57:58,008 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 05:57:58 BasicIcfg
[2020-11-25 05:57:58,008 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 05:57:58,008 INFO  L168              Benchmark]: Toolchain (without parser) took 15383.59 ms. Allocated memory was 1.0 GB in the beginning and 2.1 GB in the end (delta: 1.0 GB). Free memory was 935.2 MB in the beginning and 1.9 GB in the end (delta: -917.8 MB). Peak memory consumption was 127.6 MB. Max. memory is 15.3 GB.
[2020-11-25 05:57:58,009 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.26 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 05:57:58,009 INFO  L168              Benchmark]: Boogie Preprocessor took 128.21 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 05:57:58,010 INFO  L168              Benchmark]: UtopiaSpecLang took 67.32 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 913.7 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 05:57:58,010 INFO  L168              Benchmark]: Boogie Printer took 18.21 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 908.3 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 05:57:58,011 INFO  L168              Benchmark]: RCFGBuilder took 862.92 ms. Allocated memory is still 1.0 GB. Free memory was 908.3 MB in the beginning and 763.3 MB in the end (delta: 145.0 MB). Peak memory consumption was 145.0 MB. Max. memory is 15.3 GB.
[2020-11-25 05:57:58,011 INFO  L168              Benchmark]: UtopiaLTL2Aut took 46.76 ms. Allocated memory is still 1.0 GB. Free memory was 763.3 MB in the beginning and 759.8 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-25 05:57:58,011 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1564.11 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 213.9 MB). Free memory was 759.8 MB in the beginning and 822.4 MB in the end (delta: -62.6 MB). Peak memory consumption was 159.9 MB. Max. memory is 15.3 GB.
[2020-11-25 05:57:58,012 INFO  L168              Benchmark]: BlockEncodingV2 took 214.13 ms. Allocated memory is still 1.2 GB. Free memory was 822.4 MB in the beginning and 738.2 MB in the end (delta: 84.2 MB). Peak memory consumption was 84.2 MB. Max. memory is 15.3 GB.
[2020-11-25 05:57:58,012 INFO  L168              Benchmark]: BuchiAutomizer took 12478.73 ms. Allocated memory was 1.2 GB in the beginning and 2.1 GB in the end (delta: 831.5 MB). Free memory was 738.2 MB in the beginning and 1.9 GB in the end (delta: -1.1 GB). There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 05:57:58,016 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    5238 locations, 9364 edges
  - StatisticsResult: Encoded RCFG
    5134 locations, 9075 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.26 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 128.21 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 67.32 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 913.7 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 18.21 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 908.3 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 862.92 ms. Allocated memory is still 1.0 GB. Free memory was 908.3 MB in the beginning and 763.3 MB in the end (delta: 145.0 MB). Peak memory consumption was 145.0 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 46.76 ms. Allocated memory is still 1.0 GB. Free memory was 763.3 MB in the beginning and 759.8 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1564.11 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 213.9 MB). Free memory was 759.8 MB in the beginning and 822.4 MB in the end (delta: -62.6 MB). Peak memory consumption was 159.9 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 214.13 ms. Allocated memory is still 1.2 GB. Free memory was 822.4 MB in the beginning and 738.2 MB in the end (delta: 84.2 MB). Peak memory consumption was 84.2 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 12478.73 ms. Allocated memory was 1.2 GB in the beginning and 2.1 GB in the end (delta: 831.5 MB). Free memory was 738.2 MB in the beginning and 1.9 GB in the end (delta: -1.1 GB). There was no memory consumed. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    2126 locations, 2889 edges
  - StatisticsResult: BuchiProgram size
    5238 locations, 9364 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 9 terminating modules (9 trivial, 0 deterministic, 0 nondeterministic). 9 modules have a trivial ranking function, the largest among these consists of 24 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 12.4s and 10 iterations.  TraceHistogramMax:3. Analysis of lassos took 1.4s. Construction of modules took 7.9s. BÃ¼chi inclusion checks took 2.2s. Highest rank in rank-based complementation 0. Minimization of det autom 9. Minimization of nondet autom 0. Automata minimization 0.3s AutomataMinimizationTime, 8 MinimizatonAttempts, 1557 StatesRemovedByMinimization, 6 NontrivialMinimizations. Non-live state removal took 0.2s Buchi closure took 0.0s. Biggest automaton had 3721 states and ocurred in iteration 7.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 33527 SDtfs, 21919 SDslu, 100853 SDs, 0 SdLazy, 80681 SolverSat, 4101 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 7.9s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU9 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transfer_ERC200) ==> ( <>(success_transfer_ERC200) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
