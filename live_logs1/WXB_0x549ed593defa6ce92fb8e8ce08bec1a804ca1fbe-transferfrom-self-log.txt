This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 08:51:31,236 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 08:51:31,238 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 08:51:31,249 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 08:51:31,249 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 08:51:31,250 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 08:51:31,251 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 08:51:31,253 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 08:51:31,255 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 08:51:31,255 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 08:51:31,257 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 08:51:31,257 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 08:51:31,258 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 08:51:31,259 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 08:51:31,260 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 08:51:31,260 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 08:51:31,261 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 08:51:31,262 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 08:51:31,263 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 08:51:31,265 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 08:51:31,265 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 08:51:31,266 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 08:51:31,268 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 08:51:31,268 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 08:51:31,268 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 08:51:31,269 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 08:51:31,269 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 08:51:31,270 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 08:51:31,270 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 08:51:31,270 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 08:51:31,271 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 08:51:31,271 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 08:51:31,272 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 08:51:31,273 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 08:51:31,273 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 08:51:31,273 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 08:51:31,274 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 08:51:31,274 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 08:51:31,274 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 08:51:31,275 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 08:51:31,276 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 08:51:31,276 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 08:51:31,284 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 08:51:31,284 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 08:51:31,285 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 08:51:31,285 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 08:51:31,285 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 08:51:31,285 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 08:51:31,285 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 08:51:31,285 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 08:51:31,286 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 08:51:31,286 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 08:51:31,286 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 08:51:31,286 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 08:51:31,286 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 08:51:31,286 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 08:51:31,286 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 08:51:31,286 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 08:51:31,286 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 08:51:31,287 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 08:51:31,287 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 08:51:31,287 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 08:51:31,287 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 08:51:31,287 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 08:51:31,287 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 08:51:31,287 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 08:51:31,287 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 08:51:31,287 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 08:51:31,318 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 08:51:31,334 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 08:51:31,337 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 08:51:31,338 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 08:51:31,339 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 08:51:31,339 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/WXB_0x549ed593defa6ce92fb8e8ce08bec1a804ca1fbe_transferfrom-self.bpl
[2020-11-25 08:51:31,340 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/WXB_0x549ed593defa6ce92fb8e8ce08bec1a804ca1fbe_transferfrom-self.bpl'
[2020-11-25 08:51:31,418 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 08:51:31,419 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 08:51:31,419 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 08:51:31,419 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 08:51:31,419 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 08:51:31,436 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "WXB_0x549ed593defa6ce92fb8e8ce08bec1a804ca1fbe_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:51:31" (1/1) ...
[2020-11-25 08:51:31,437 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "WXB_0x549ed593defa6ce92fb8e8ce08bec1a804ca1fbe_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:51:31" (1/1) ...
[2020-11-25 08:51:31,470 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "WXB_0x549ed593defa6ce92fb8e8ce08bec1a804ca1fbe_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:51:31" (1/1) ...
[2020-11-25 08:51:31,471 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "WXB_0x549ed593defa6ce92fb8e8ce08bec1a804ca1fbe_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:51:31" (1/1) ...
[2020-11-25 08:51:31,487 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "WXB_0x549ed593defa6ce92fb8e8ce08bec1a804ca1fbe_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:51:31" (1/1) ...
[2020-11-25 08:51:31,494 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "WXB_0x549ed593defa6ce92fb8e8ce08bec1a804ca1fbe_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:51:31" (1/1) ...
[2020-11-25 08:51:31,498 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "WXB_0x549ed593defa6ce92fb8e8ce08bec1a804ca1fbe_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:51:31" (1/1) ...
[2020-11-25 08:51:31,504 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 08:51:31,505 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 08:51:31,505 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 08:51:31,508 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 08:51:31,512 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "WXB_0x549ed593defa6ce92fb8e8ce08bec1a804ca1fbe_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:51:31" (1/1) ...
[2020-11-25 08:51:31,525 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(WXB.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= holders_WXB[this][from] && value <= approach_WXB[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && holders_WXB[this][to] >= 0 && holders_WXB[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && holders_WXB[this][from] >= 0 &&  holders_WXB[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && approach_WXB[this][from][msg.sender] >= 0 && approach_WXB[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(WXB.transferFrom(from, to, value), return == true && approach_WXB[this][from][msg.sender] == old(approach_WXB[this][from][msg.sender]) - value && totalSupply_WXB[this] == old(totalSupply_WXB[this]) && holders_WXB[this] == old(holders_WXB[this]) && approach_WXB[this][p1][p2] == old(approach_WXB[this][p1][p2]) && decimals_WXB[this] == old(decimals_WXB[this]) && symbol_WXB[this] == old(symbol_WXB[this]) && name_WXB[this] == old(name_WXB[this]))))
[2020-11-25 08:51:31,531 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(WXB.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= holders_WXB[this][from] && value <= approach_WXB[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && holders_WXB[this][to] >= 0 && holders_WXB[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && holders_WXB[this][from] >= 0 &&  holders_WXB[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && approach_WXB[this][from][msg.sender] >= 0 && approach_WXB[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(WXB.transferFrom(from, to, value), return == true && approach_WXB[this][from][msg.sender] == old(approach_WXB[this][from][msg.sender]) - value && totalSupply_WXB[this] == old(totalSupply_WXB[this]) && holders_WXB[this] == old(holders_WXB[this]) && approach_WXB[this][p1][p2] == old(approach_WXB[this][p1][p2]) && decimals_WXB[this] == old(decimals_WXB[this]) && symbol_WXB[this] == old(symbol_WXB[this]) && name_WXB[this] == old(name_WXB[this]))))
[2020-11-25 08:51:31,538 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(WXB.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= holders_WXB[this][from] && value <= approach_WXB[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && holders_WXB[this][to] >= 0 && holders_WXB[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && holders_WXB[this][from] >= 0 &&  holders_WXB[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && approach_WXB[this][from][msg.sender] >= 0 && approach_WXB[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(WXB.transferFrom(from, to, value), return == true && approach_WXB[this][from][msg.sender] == old(approach_WXB[this][from][msg.sender]) - value && totalSupply_WXB[this] == old(totalSupply_WXB[this]) && holders_WXB[this] == old(holders_WXB[this]) && approach_WXB[this][p1][p2] == old(approach_WXB[this][p1][p2]) && decimals_WXB[this] == old(decimals_WXB[this]) && symbol_WXB[this] == old(symbol_WXB[this]) && name_WXB[this] == old(name_WXB[this]))))
[2020-11-25 08:51:31,545 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( p1!=_from_s315 || p2!=msg.sender ) && _from_s315==_to_s315 ) && _val_s315<=holders_WXB[this][_from_s315] ) && _val_s315<=approach_WXB[this][_from_s315][msg.sender] ) && _val_s315>=0 ) && _val_s315<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && holders_WXB[this][_to_s315]>=0 ) && holders_WXB[this][_to_s315]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && holders_WXB[this][_from_s315]>=0 ) && holders_WXB[this][_from_s315]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && approach_WXB[this][_from_s315][msg.sender]>=0 ) && approach_WXB[this][_from_s315][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[_from_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]],BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],BinaryExpression[COMPEQ,IdentifierExpression[_from_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>],IdentifierExpression[_to_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],BinaryExpression[COMPLEQ,IdentifierExpression[_val_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[holders_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],[IdentifierExpression[_from_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]]]],BinaryExpression[COMPLEQ,IdentifierExpression[_val_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[approach_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],[IdentifierExpression[_from_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[_val_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[_val_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[holders_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],[IdentifierExpression[_to_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[holders_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],[IdentifierExpression[_to_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[holders_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],[IdentifierExpression[_from_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[holders_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],[IdentifierExpression[_from_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[approach_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],[IdentifierExpression[_from_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[approach_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],[IdentifierExpression[_from_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 08:51:31,548 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( __ret_0_==true && approach_WXB[this][_from_s315][msg.sender]==( ( old(approach_WXB[this][_from_s315][msg.sender]) ) - _val_s315 ) ) && totalSupply_WXB[this]==( old(totalSupply_WXB[this]) ) ) && holders_WXB[this]==( old(holders_WXB[this]) ) ) && approach_WXB[this][p1][p2]==( old(approach_WXB[this][p1][p2]) ) ) && decimals_WXB[this]==( old(decimals_WXB[this]) ) ) && symbol_WXB[this]==( old(symbol_WXB[this]) ) ) && name_WXB[this]==( old(name_WXB[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transferFrom~address~address~uint256_WXB>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[approach_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],[IdentifierExpression[_from_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[approach_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],[IdentifierExpression[_from_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]]],IdentifierExpression[_val_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[totalSupply_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[totalSupply_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[holders_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[holders_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[approach_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[approach_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]]]]]
[2020-11-25 08:51:31,551 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(WXB.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= holders_WXB[this][from] && value <= approach_WXB[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && holders_WXB[this][to] >= 0 && holders_WXB[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && holders_WXB[this][from] >= 0 &&  holders_WXB[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && approach_WXB[this][from][msg.sender] >= 0 && approach_WXB[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(WXB.transferFrom(from, to, value), return == true && approach_WXB[this][from][msg.sender] == old(approach_WXB[this][from][msg.sender]) - value && totalSupply_WXB[this] == old(totalSupply_WXB[this]) && holders_WXB[this] == old(holders_WXB[this]) && approach_WXB[this][p1][p2] == old(approach_WXB[this][p1][p2]) && decimals_WXB[this] == old(decimals_WXB[this]) && symbol_WXB[this] == old(symbol_WXB[this]) && name_WXB[this] == old(name_WXB[this]))))
[2020-11-25 08:51:31,551 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_WXB0) ==> ( <>AP(success_transferFrom_WXB0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 08:51:31,558 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:51:31 PropertyContainer
[2020-11-25 08:51:31,558 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 08:51:31,559 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 08:51:31,559 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 08:51:31,559 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 08:51:31,560 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "WXB_0x549ed593defa6ce92fb8e8ce08bec1a804ca1fbe_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:51:31" (1/2) ...
[2020-11-25 08:51:31,560 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 08:51:31,560 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 08:51:31,569 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:51:31" (2/2) ...
[2020-11-25 08:51:31,569 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 08:51:31,569 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 08:51:31,570 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 08:51:31,570 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 08:51:31,570 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "WXB_0x549ed593defa6ce92fb8e8ce08bec1a804ca1fbe_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:51:31" (1/2) ...
[2020-11-25 08:51:31,624 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 08:51:31,625 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 08:51:31,625 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 08:51:31,625 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 08:51:31,625 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 08:51:31,625 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 08:51:31,625 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 08:51:31,625 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 08:51:31,625 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 08:51:31,625 INFO  L130     BoogieDeclarations]: Found specification of procedure WXB_WXB_NoBaseCtor__success
[2020-11-25 08:51:31,625 INFO  L130     BoogieDeclarations]: Found specification of procedure WXB_WXB
[2020-11-25 08:51:31,625 INFO  L138     BoogieDeclarations]: Found implementation of procedure WXB_WXB
[2020-11-25 08:51:31,626 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_WXB__success
[2020-11-25 08:51:31,626 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_WXB
[2020-11-25 08:51:31,626 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_WXB
[2020-11-25 08:51:31,626 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_WXB
[2020-11-25 08:51:31,626 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_WXB
[2020-11-25 08:51:31,626 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_WXB
[2020-11-25 08:51:31,626 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_WXB
[2020-11-25 08:51:31,626 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_WXB
[2020-11-25 08:51:31,626 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_WXB
[2020-11-25 08:51:31,626 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_WXB
[2020-11-25 08:51:31,626 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_WXB
[2020-11-25 08:51:31,627 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_WXB
[2020-11-25 08:51:31,627 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_WXB
[2020-11-25 08:51:31,627 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_WXB
[2020-11-25 08:51:31,627 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_WXB
[2020-11-25 08:51:31,627 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_WXB
[2020-11-25 08:51:31,627 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_WXB
[2020-11-25 08:51:31,627 INFO  L130     BoogieDeclarations]: Found specification of procedure name_WXB
[2020-11-25 08:51:31,627 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_WXB
[2020-11-25 08:51:31,627 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 08:51:31,628 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 08:51:31,628 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 08:51:31,628 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 08:51:31,628 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 08:51:31,628 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_WXB
[2020-11-25 08:51:31,628 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 08:51:31,628 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 08:51:31,628 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 08:51:31,628 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 08:51:31,628 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 08:51:31,628 INFO  L130     BoogieDeclarations]: Found specification of procedure WXB_WXB_NoBaseCtor__fail
[2020-11-25 08:51:31,628 INFO  L130     BoogieDeclarations]: Found specification of procedure WXB_WXB__success
[2020-11-25 08:51:31,628 INFO  L130     BoogieDeclarations]: Found specification of procedure WXB_WXB__fail
[2020-11-25 08:51:31,628 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_WXB__fail
[2020-11-25 08:51:31,629 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_WXB__success
[2020-11-25 08:51:31,629 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_WXB__fail
[2020-11-25 08:51:31,629 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_WXB__success
[2020-11-25 08:51:31,629 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_WXB__fail
[2020-11-25 08:51:31,629 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_WXB__success
[2020-11-25 08:51:31,629 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_WXB__fail
[2020-11-25 08:51:31,629 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_WXB__success
[2020-11-25 08:51:31,629 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_WXB__fail
[2020-11-25 08:51:31,629 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_WXB__success
[2020-11-25 08:51:31,629 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_WXB__fail
[2020-11-25 08:51:31,629 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_WXB__success
[2020-11-25 08:51:31,629 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_WXB__fail
[2020-11-25 08:51:31,630 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_WXB__success
[2020-11-25 08:51:31,630 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_WXB__fail
[2020-11-25 08:51:31,630 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_WXB__success
[2020-11-25 08:51:31,630 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_WXB__fail
[2020-11-25 08:51:31,630 INFO  L130     BoogieDeclarations]: Found specification of procedure name_WXB__success
[2020-11-25 08:51:31,630 INFO  L130     BoogieDeclarations]: Found specification of procedure name_WXB__fail
[2020-11-25 08:51:31,630 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 08:51:31,630 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 08:51:31,630 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 08:51:31,630 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 08:51:31,630 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 08:51:31,630 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 08:51:31,630 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 08:51:31,630 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 08:51:31,631 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 08:51:31,631 INFO  L138     BoogieDeclarations]: Found implementation of procedure WXB_WXB_NoBaseCtor__fail
[2020-11-25 08:51:31,631 INFO  L138     BoogieDeclarations]: Found implementation of procedure WXB_WXB_NoBaseCtor__success
[2020-11-25 08:51:31,631 INFO  L138     BoogieDeclarations]: Found implementation of procedure WXB_WXB__fail
[2020-11-25 08:51:31,631 INFO  L138     BoogieDeclarations]: Found implementation of procedure WXB_WXB__success
[2020-11-25 08:51:31,631 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_WXB__fail
[2020-11-25 08:51:31,631 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_WXB__success
[2020-11-25 08:51:31,631 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_WXB__fail
[2020-11-25 08:51:31,631 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_WXB__success
[2020-11-25 08:51:31,631 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_WXB__fail
[2020-11-25 08:51:31,631 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_WXB__success
[2020-11-25 08:51:31,631 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_WXB__fail
[2020-11-25 08:51:31,632 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_WXB__success
[2020-11-25 08:51:31,632 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_WXB__fail
[2020-11-25 08:51:31,632 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_WXB__success
[2020-11-25 08:51:31,632 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_WXB__fail
[2020-11-25 08:51:31,632 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_WXB__success
[2020-11-25 08:51:31,632 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_WXB__fail
[2020-11-25 08:51:31,632 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_WXB__success
[2020-11-25 08:51:31,632 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_WXB__fail
[2020-11-25 08:51:31,632 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_WXB__success
[2020-11-25 08:51:31,632 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_WXB__fail
[2020-11-25 08:51:31,632 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_WXB__success
[2020-11-25 08:51:31,632 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_WXB__fail
[2020-11-25 08:51:31,633 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_WXB__success
[2020-11-25 08:51:31,633 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 08:51:31,633 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 08:51:31,633 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 08:51:31,633 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 08:51:31,633 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 08:51:31,633 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 08:51:31,633 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 08:51:31,633 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 08:51:31,633 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_WXB
[2020-11-25 08:51:31,633 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 08:51:31,633 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 08:51:31,634 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 08:51:31,787 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 08:51:31,973 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 08:51:31,974 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 08:51:31,974 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 08:51:32,100 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 08:51:32,100 INFO  L286             CfgBuilder]: Removed 2 assue(true) statements.
[2020-11-25 08:51:32,102 INFO  L202        PluginConnector]: Adding new model WXB_0x549ed593defa6ce92fb8e8ce08bec1a804ca1fbe_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:51:32 BoogieIcfgContainer
[2020-11-25 08:51:32,102 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:51:31" (2/2) ...
[2020-11-25 08:51:32,102 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 08:51:32,102 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@4d3bf8ae and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:51:32, skipping insertion in model container
[2020-11-25 08:51:32,102 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 08:51:32,103 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 08:51:32,103 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 08:51:32,104 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 08:51:32,104 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "WXB_0x549ed593defa6ce92fb8e8ce08bec1a804ca1fbe_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:51:31" (1/3) ...
[2020-11-25 08:51:32,105 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@599869c6 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:51:32, skipping insertion in model container
[2020-11-25 08:51:32,105 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:51:31" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 08:51:32,140 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:51:32 NWAContainer
[2020-11-25 08:51:32,140 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 08:51:32,141 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 08:51:32,141 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 08:51:32,141 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 08:51:32,142 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "WXB_0x549ed593defa6ce92fb8e8ce08bec1a804ca1fbe_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:51:32" (3/4) ...
[2020-11-25 08:51:32,143 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@19f4e2bb and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:51:32, skipping insertion in model container
[2020-11-25 08:51:32,143 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:51:32" (4/4) ...
[2020-11-25 08:51:32,147 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 08:51:32,149 INFO  L110   BuchiProductObserver]: Initial RCFG 659 locations, 787 edges
[2020-11-25 08:51:32,149 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 08:51:32,160 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 08:51:33,077 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 08:51:33,079 INFO  L110   BuchiProductObserver]: BuchiProgram size 1526 locations, 2546 edges
[2020-11-25 08:51:33,080 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:51:33 BoogieIcfgContainer
[2020-11-25 08:51:33,080 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 08:51:33,080 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 08:51:33,080 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 08:51:33,083 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 08:51:33,084 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:51:33" (1/1) ...
[2020-11-25 08:51:33,135 INFO  L313           BlockEncoder]: Initial Icfg 1526 locations, 2546 edges
[2020-11-25 08:51:33,136 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 08:51:33,136 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 08:51:33,136 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 08:51:33,137 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 08:51:33,145 INFO  L70    emoveInfeasibleEdges]: Removed 27 edges and 7 locations because of local infeasibility
[2020-11-25 08:51:33,149 INFO  L70        RemoveSinkStates]: Removed 2 edges and 1 locations by removing sink states
[2020-11-25 08:51:33,155 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 08:51:33,156 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 08:51:33,158 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 08:51:33,158 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 08:51:33,161 INFO  L313           BlockEncoder]: Encoded RCFG 1508 locations, 2503 edges
[2020-11-25 08:51:33,161 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 08:51:33 BasicIcfg
[2020-11-25 08:51:33,161 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 08:51:33,162 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 08:51:33,162 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 08:51:33,164 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 08:51:33,164 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:51:33,164 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "WXB_0x549ed593defa6ce92fb8e8ce08bec1a804ca1fbe_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:51:31" (1/6) ...
[2020-11-25 08:51:33,166 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@9d8a8b2 and model type WXB_0x549ed593defa6ce92fb8e8ce08bec1a804ca1fbe_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 08:51:33, skipping insertion in model container
[2020-11-25 08:51:33,166 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:51:33,166 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:51:31" (2/6) ...
[2020-11-25 08:51:33,167 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@9d8a8b2 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 08:51:33, skipping insertion in model container
[2020-11-25 08:51:33,167 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:51:33,167 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "WXB_0x549ed593defa6ce92fb8e8ce08bec1a804ca1fbe_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:51:32" (3/6) ...
[2020-11-25 08:51:33,167 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@9d8a8b2 and model type WXB_0x549ed593defa6ce92fb8e8ce08bec1a804ca1fbe_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 08:51:33, skipping insertion in model container
[2020-11-25 08:51:33,167 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:51:33,167 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:51:32" (4/6) ...
[2020-11-25 08:51:33,168 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@9d8a8b2 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 08:51:33, skipping insertion in model container
[2020-11-25 08:51:33,168 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:51:33,168 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:51:33" (5/6) ...
[2020-11-25 08:51:33,168 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@9d8a8b2 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 08:51:33, skipping insertion in model container
[2020-11-25 08:51:33,168 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:51:33,168 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 08:51:33" (6/6) ...
[2020-11-25 08:51:33,169 INFO  L404   chiAutomizerObserver]: Analyzing ICFG WXB_0x549ed593defa6ce92fb8e8ce08bec1a804ca1fbe_transferfrom-self.bpl_BEv2
[2020-11-25 08:51:33,208 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 08:51:33,208 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 08:51:33,208 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 08:51:33,208 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 08:51:33,208 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 08:51:33,209 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 08:51:33,209 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 08:51:33,209 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 08:51:33,209 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 08:51:33,229 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1508 states.
[2020-11-25 08:51:33,268 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:51:33,268 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:51:33,268 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:51:33,277 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:51:33,277 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:51:33,277 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 08:51:33,277 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1508 states.
[2020-11-25 08:51:33,287 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:51:33,288 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:51:33,288 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:51:33,289 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:51:33,289 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_WXB0 := false;
[L3]                 call_transferFrom_WXB0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L1760]              assume null == 0;
[L1761]  CALL        call this := FreshRefGenerator__success();
[L882]               havoc newRef;
[L883]               assume Alloc[newRef] == false;
[L884]               Alloc[newRef] := true;
[L885]               assume newRef != null;
[L1761]  RET         call this := FreshRefGenerator__success();
[L1762]              assume now >= 0;
[L1763]              assume DType[this] == WXB;
[L1764]              assume msgvalue_MSG == 0;
[L1765]              gas := gas - 53000;
[L1766]  CALL        call WXB_WXB(this, msgsender_MSG, msgvalue_MSG);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call WXB_WXB__success(this, msgsender_MSG, msgvalue_MSG);
[L986]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L914]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L899]               assume msgsender_MSG != null;
[L900]               Balance[this] := 0;
[L914]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L915]   COND FALSE  !(revert)
[L986]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L987]   COND TRUE   revert
[L167]   RET         call WXB_WXB__success(this, msgsender_MSG, msgvalue_MSG);
[L168]               assume !revert && gas >= 0;
[L1766]  RET         call WXB_WXB(this, msgsender_MSG, msgvalue_MSG);
[L1767]              assume !revert && gas >= 0;

Loop:
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND FALSE  !(gas >= 0)
[L1770]  RET         call CorralChoice_WXB(this);

[2020-11-25 08:51:33,306 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:51:33,306 INFO  L82        PathProgramCache]: Analyzing trace with hash -1858444897, now seen corresponding path program 1 times
[2020-11-25 08:51:33,311 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:51:33,334 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:51:33,382 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 08:51:33,384 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:51:33,384 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 08:51:33,388 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:51:33,480 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 08:51:33,481 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 08:51:33,483 INFO  L87              Difference]: Start difference. First operand 1508 states. Second operand 4 states.
[2020-11-25 08:51:33,832 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:51:33,832 INFO  L93              Difference]: Finished difference Result 1796 states and 2912 transitions.
[2020-11-25 08:51:33,832 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 08:51:33,834 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1796 states and 2912 transitions.
[2020-11-25 08:51:33,849 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 08:51:33,871 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1796 states to 1752 states and 2828 transitions.
[2020-11-25 08:51:33,872 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 15
[2020-11-25 08:51:33,876 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 873
[2020-11-25 08:51:33,877 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1752 states and 2828 transitions.
[2020-11-25 08:51:33,887 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:51:33,887 INFO  L728         BuchiCegarLoop]: Abstraction has 1752 states and 2828 transitions.
[2020-11-25 08:51:33,904 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1752 states and 2828 transitions.
[2020-11-25 08:51:33,946 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1752 to 1256.
[2020-11-25 08:51:33,947 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1256 states.
[2020-11-25 08:51:33,952 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1256 states to 1256 states and 1909 transitions.
[2020-11-25 08:51:33,953 INFO  L751         BuchiCegarLoop]: Abstraction has 1256 states and 1909 transitions.
[2020-11-25 08:51:33,953 INFO  L631         BuchiCegarLoop]: Abstraction has 1256 states and 1909 transitions.
[2020-11-25 08:51:33,953 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 08:51:33,953 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1256 states and 1909 transitions.
[2020-11-25 08:51:33,959 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:51:33,959 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:51:33,959 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:51:33,961 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:51:33,961 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_WXB0 := false;
[L3]                 call_transferFrom_WXB0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L1760]              assume null == 0;
[L1761]  CALL        call this := FreshRefGenerator__success();
[L882]               havoc newRef;
[L883]               assume Alloc[newRef] == false;
[L884]               Alloc[newRef] := true;
[L885]               assume newRef != null;
[L1761]  RET         call this := FreshRefGenerator__success();
[L1762]              assume now >= 0;
[L1763]              assume DType[this] == WXB;
[L1764]              assume msgvalue_MSG == 0;
[L1765]              gas := gas - 53000;
[L1766]  CALL        call WXB_WXB(this, msgsender_MSG, msgvalue_MSG);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call WXB_WXB__success(this, msgsender_MSG, msgvalue_MSG);
[L986]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L914]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L899]               assume msgsender_MSG != null;
[L900]               Balance[this] := 0;
[L914]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L915]   COND FALSE  !(revert)
[L986]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L987]   COND FALSE  !(revert)
[L990]   CALL        call WXB_WXB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L949]               assume msgsender_MSG != null;
[L950]               Balance[this] := 0;
[L951]               totalSupply_WXB[this] := 0;
[L952]               decimals_WXB[this] := 0;
[L953]               symbol_WXB[this] := 1199276259;
[L954]               name_WXB[this] := 1199276259;
[L955]               approach_WXB[this] := zeroRefRefintArr();
[L956]               sum_approach0[this] := 0;
[L957]               holders_WXB[this] := zeroRefintArr();
[L958]               sum_holders1[this] := 0;
[L960]               name_WXB[this] := -1225396598;
[L961]               symbol_WXB[this] := 397088534;
[L962]               decimals_WXB[this] := 18;
[L963]               __var_1 := decimals_WXB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L964]               totalSupply_WXB[this] := nonlinearMul(100000 * 10000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936 * 100, nonlinearPow(10, decimals_WXB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L965]               sum_holders1[this] := sum_holders1[this] - holders_WXB[this][msgsender_MSG];
[L966]               holders_WXB[this][msgsender_MSG] := totalSupply_WXB[this];
[L967]               sum_holders1[this] := sum_holders1[this] + holders_WXB[this][msgsender_MSG];
[L990]   RET         call WXB_WXB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L991]   COND FALSE  !(revert)
[L167]   RET         call WXB_WXB__success(this, msgsender_MSG, msgvalue_MSG);
[L168]               assume !revert && gas >= 0;
[L1766]  RET         call WXB_WXB(this, msgsender_MSG, msgvalue_MSG);
[L1767]              assume !revert && gas >= 0;

Loop:
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND FALSE  !(gas >= 0)
[L1770]  RET         call CorralChoice_WXB(this);

[2020-11-25 08:51:33,964 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:51:33,964 INFO  L82        PathProgramCache]: Analyzing trace with hash -1009865331, now seen corresponding path program 1 times
[2020-11-25 08:51:33,965 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:51:33,974 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:51:33,990 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 08:51:33,990 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:51:33,990 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 08:51:33,991 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:51:33,992 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 08:51:33,992 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 08:51:33,992 INFO  L87              Difference]: Start difference. First operand 1256 states and 1909 transitions. cyclomatic complexity: 655 Second operand 4 states.
[2020-11-25 08:51:34,169 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:51:34,169 INFO  L93              Difference]: Finished difference Result 1127 states and 1198 transitions.
[2020-11-25 08:51:34,169 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 08:51:34,170 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1127 states and 1198 transitions.
[2020-11-25 08:51:34,175 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:51:34,180 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1127 states to 1127 states and 1198 transitions.
[2020-11-25 08:51:34,180 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 496
[2020-11-25 08:51:34,181 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 496
[2020-11-25 08:51:34,181 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1127 states and 1198 transitions.
[2020-11-25 08:51:34,182 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:51:34,182 INFO  L728         BuchiCegarLoop]: Abstraction has 1127 states and 1198 transitions.
[2020-11-25 08:51:34,183 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1127 states and 1198 transitions.
[2020-11-25 08:51:34,193 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1127 to 1127.
[2020-11-25 08:51:34,193 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1127 states.
[2020-11-25 08:51:34,196 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1127 states to 1127 states and 1198 transitions.
[2020-11-25 08:51:34,196 INFO  L751         BuchiCegarLoop]: Abstraction has 1127 states and 1198 transitions.
[2020-11-25 08:51:34,196 INFO  L631         BuchiCegarLoop]: Abstraction has 1127 states and 1198 transitions.
[2020-11-25 08:51:34,196 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 08:51:34,196 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1127 states and 1198 transitions.
[2020-11-25 08:51:34,200 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:51:34,200 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:51:34,200 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:51:34,202 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:51:34,202 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_WXB0 := false;
[L3]                 call_transferFrom_WXB0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L1760]              assume null == 0;
[L1761]  CALL        call this := FreshRefGenerator__success();
[L882]               havoc newRef;
[L883]               assume Alloc[newRef] == false;
[L884]               Alloc[newRef] := true;
[L885]               assume newRef != null;
[L1761]  RET         call this := FreshRefGenerator__success();
[L1762]              assume now >= 0;
[L1763]              assume DType[this] == WXB;
[L1764]              assume msgvalue_MSG == 0;
[L1765]              gas := gas - 53000;
[L1766]  CALL        call WXB_WXB(this, msgsender_MSG, msgvalue_MSG);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call WXB_WXB__success(this, msgsender_MSG, msgvalue_MSG);
[L986]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L914]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L899]               assume msgsender_MSG != null;
[L900]               Balance[this] := 0;
[L914]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L915]   COND FALSE  !(revert)
[L986]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L987]   COND FALSE  !(revert)
[L990]   CALL        call WXB_WXB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L949]               assume msgsender_MSG != null;
[L950]               Balance[this] := 0;
[L951]               totalSupply_WXB[this] := 0;
[L952]               decimals_WXB[this] := 0;
[L953]               symbol_WXB[this] := 1199276259;
[L954]               name_WXB[this] := 1199276259;
[L955]               approach_WXB[this] := zeroRefRefintArr();
[L956]               sum_approach0[this] := 0;
[L957]               holders_WXB[this] := zeroRefintArr();
[L958]               sum_holders1[this] := 0;
[L960]               name_WXB[this] := -1225396598;
[L961]               symbol_WXB[this] := 397088534;
[L962]               decimals_WXB[this] := 18;
[L963]               __var_1 := decimals_WXB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L964]               totalSupply_WXB[this] := nonlinearMul(100000 * 10000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936 * 100, nonlinearPow(10, decimals_WXB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L965]               sum_holders1[this] := sum_holders1[this] - holders_WXB[this][msgsender_MSG];
[L966]               holders_WXB[this][msgsender_MSG] := totalSupply_WXB[this];
[L967]               sum_holders1[this] := sum_holders1[this] + holders_WXB[this][msgsender_MSG];
[L990]   RET         call WXB_WXB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L991]   COND FALSE  !(revert)
[L167]   RET         call WXB_WXB__success(this, msgsender_MSG, msgvalue_MSG);
[L168]               assume !revert && gas >= 0;
[L1766]  RET         call WXB_WXB(this, msgsender_MSG, msgvalue_MSG);
[L1767]              assume !revert && gas >= 0;
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != _from_s315 || p2 != msgsender_MSG) && _from_s315 == _to_s315) && _val_s315 <= holders_WXB[this][_from_s315]) && _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG]) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_to_s315] >= 0) && holders_WXB[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_from_s315] >= 0) && holders_WXB[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_WXB[this][_from_s315][msgsender_MSG] >= 0) && approach_WXB[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_WXB0 := true;
[L3]                 call_transferFrom_WXB0 := false;
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND TRUE   __exception
[L305]               __tmp__Balance := Balance;
[L306]               __tmp__DType := DType;
[L307]               __tmp__Alloc := Alloc;
[L308]               __tmp__balance_ADDR := balance_ADDR;
[L309]               __tmp__M_Ref_int := M_Ref_int;
[L310]               __tmp__alloc_approach_WXB_lvl0 := alloc_approach_WXB_lvl0;
[L311]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L312]               __tmp__sum_approach0 := sum_approach0;
[L313]               __tmp__sum_holders1 := sum_holders1;
[L314]               __tmp__Length := Length;
[L315]               __tmp__now := now;
[L316]               __tmp__totalSupply_WXB := totalSupply_WXB;
[L317]               __tmp__decimals_WXB := decimals_WXB;
[L318]               __tmp__symbol_WXB := symbol_WXB;
[L319]               __tmp__name_WXB := name_WXB;
[L320]               __tmp__approach_WXB := approach_WXB;
[L321]               __tmp__holders_WXB := holders_WXB;
[L322]   CALL        call __ret_0_ := transferFrom~address~address~uint256_WXB__fail(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1065]  COND TRUE   !(__tmp__holders_WXB[this][_from_s315] >= _val_s315)
[L1066]              revert := true;
[L322]   RET         call __ret_0_ := transferFrom~address~address~uint256_WXB__fail(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L323]               assume revert || gas < 0;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_WXB(this);

Loop:
[L1770]  CALL       call CorralChoice_WXB(this);
[L1663]             havoc msgsender_MSG;
[L1664]             havoc msgvalue_MSG;
[L1665]             havoc choice;
[L1666]             havoc _from_s315;
[L1667]             havoc _to_s315;
[L1668]             havoc _val_s315;
[L1669]             havoc __ret_0_transferFrom;
[L1670]             havoc _to_s213;
[L1671]             havoc _val_s213;
[L1672]             havoc __ret_0_transfer;
[L1673]             havoc _own_s139;
[L1674]             havoc __ret_0_balanceOf;
[L1675]             havoc _owner_s368;
[L1676]             havoc _spender_s368;
[L1677]             havoc __ret_0_allowance;
[L1678]             havoc _spender_s352;
[L1679]             havoc _val_s352;
[L1680]             havoc __ret_0_approve;
[L1681]             havoc __ret_0_totalSupply;
[L1682]             havoc __ret_0_decimals;
[L1683]             havoc __ret_0_symbol;
[L1684]             havoc __ret_0_name;
[L1685]             havoc tmpNow;
[L1686]             havoc gas;
[L1687]             assume gas > 4000000 && gas <= 8000000;
[L1688]             tmpNow := now;
[L1689]             havoc now;
[L1690]             assume now > tmpNow;
[L1691]             assume msgsender_MSG != null;
[L1692]             assume DType[msgsender_MSG] != ERC20;
[L1693]             assume DType[msgsender_MSG] != WXB;
[L1694]             Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE  choice == 9
[L1696]             gas := gas - 21000;
[L1697]  COND TRUE  gas >= 0
[L1698]             assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]             assume msgvalue_MSG == 0;
[L1700]  CALL       call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                revert_hold := revert;
[L3]                revert := false;
[L3]                assume (((((((((((p1 != _from_s315 || p2 != msgsender_MSG) && _from_s315 == _to_s315) && _val_s315 <= holders_WXB[this][_from_s315]) && _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG]) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_to_s315] >= 0) && holders_WXB[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_from_s315] >= 0) && holders_WXB[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_WXB[this][_from_s315][msgsender_MSG] >= 0) && approach_WXB[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                call_transferFrom_WXB0 := true;
[L3]                call_transferFrom_WXB0 := false;
[L3]                revert := revert_hold;
[L302]              havoc __exception;
[L303]              revert := false;
[L304]   COND TRUE  __exception
[L305]              __tmp__Balance := Balance;
[L306]              __tmp__DType := DType;
[L307]              __tmp__Alloc := Alloc;
[L308]              __tmp__balance_ADDR := balance_ADDR;
[L309]              __tmp__M_Ref_int := M_Ref_int;
[L310]              __tmp__alloc_approach_WXB_lvl0 := alloc_approach_WXB_lvl0;
[L311]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L312]              __tmp__sum_approach0 := sum_approach0;
[L313]              __tmp__sum_holders1 := sum_holders1;
[L314]              __tmp__Length := Length;
[L315]              __tmp__now := now;
[L316]              __tmp__totalSupply_WXB := totalSupply_WXB;
[L317]              __tmp__decimals_WXB := decimals_WXB;
[L318]              __tmp__symbol_WXB := symbol_WXB;
[L319]              __tmp__name_WXB := name_WXB;
[L320]              __tmp__approach_WXB := approach_WXB;
[L321]              __tmp__holders_WXB := holders_WXB;
[L322]   CALL       call __ret_0_ := transferFrom~address~address~uint256_WXB__fail(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1065]  COND TRUE  !(__tmp__holders_WXB[this][_from_s315] >= _val_s315)
[L1066]             revert := true;
[L322]   RET        call __ret_0_ := transferFrom~address~address~uint256_WXB__fail(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L323]              assume revert || gas < 0;
[L1700]  RET        call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET        call CorralChoice_WXB(this);

[2020-11-25 08:51:34,207 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:51:34,207 INFO  L82        PathProgramCache]: Analyzing trace with hash 424875818, now seen corresponding path program 1 times
[2020-11-25 08:51:34,208 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:51:34,224 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:51:34,293 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 08:51:34,294 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:51:34,294 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 08:51:34,294 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:51:34,294 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 08:51:34,295 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 08:51:34,295 INFO  L87              Difference]: Start difference. First operand 1127 states and 1198 transitions. cyclomatic complexity: 73 Second operand 6 states.
[2020-11-25 08:51:34,769 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:51:34,769 INFO  L93              Difference]: Finished difference Result 1267 states and 1355 transitions.
[2020-11-25 08:51:34,769 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 08:51:34,770 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1267 states and 1355 transitions.
[2020-11-25 08:51:34,775 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 08:51:34,780 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1267 states to 1267 states and 1355 transitions.
[2020-11-25 08:51:34,780 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 564
[2020-11-25 08:51:34,781 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 564
[2020-11-25 08:51:34,781 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1267 states and 1355 transitions.
[2020-11-25 08:51:34,782 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:51:34,783 INFO  L728         BuchiCegarLoop]: Abstraction has 1267 states and 1355 transitions.
[2020-11-25 08:51:34,784 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1267 states and 1355 transitions.
[2020-11-25 08:51:34,796 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1267 to 1179.
[2020-11-25 08:51:34,796 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1179 states.
[2020-11-25 08:51:34,798 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1179 states to 1179 states and 1254 transitions.
[2020-11-25 08:51:34,798 INFO  L751         BuchiCegarLoop]: Abstraction has 1179 states and 1254 transitions.
[2020-11-25 08:51:34,798 INFO  L631         BuchiCegarLoop]: Abstraction has 1179 states and 1254 transitions.
[2020-11-25 08:51:34,799 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 08:51:34,799 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1179 states and 1254 transitions.
[2020-11-25 08:51:34,801 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:51:34,801 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:51:34,801 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:51:34,803 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:51:34,803 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_WXB0 := false;
[L3]                 call_transferFrom_WXB0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L1760]              assume null == 0;
[L1761]  CALL        call this := FreshRefGenerator__success();
[L882]               havoc newRef;
[L883]               assume Alloc[newRef] == false;
[L884]               Alloc[newRef] := true;
[L885]               assume newRef != null;
[L1761]  RET         call this := FreshRefGenerator__success();
[L1762]              assume now >= 0;
[L1763]              assume DType[this] == WXB;
[L1764]              assume msgvalue_MSG == 0;
[L1765]              gas := gas - 53000;
[L1766]  CALL        call WXB_WXB(this, msgsender_MSG, msgvalue_MSG);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call WXB_WXB__success(this, msgsender_MSG, msgvalue_MSG);
[L986]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L914]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L899]               assume msgsender_MSG != null;
[L900]               Balance[this] := 0;
[L914]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L915]   COND FALSE  !(revert)
[L986]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L987]   COND FALSE  !(revert)
[L990]   CALL        call WXB_WXB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L949]               assume msgsender_MSG != null;
[L950]               Balance[this] := 0;
[L951]               totalSupply_WXB[this] := 0;
[L952]               decimals_WXB[this] := 0;
[L953]               symbol_WXB[this] := 1199276259;
[L954]               name_WXB[this] := 1199276259;
[L955]               approach_WXB[this] := zeroRefRefintArr();
[L956]               sum_approach0[this] := 0;
[L957]               holders_WXB[this] := zeroRefintArr();
[L958]               sum_holders1[this] := 0;
[L960]               name_WXB[this] := -1225396598;
[L961]               symbol_WXB[this] := 397088534;
[L962]               decimals_WXB[this] := 18;
[L963]               __var_1 := decimals_WXB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L964]               totalSupply_WXB[this] := nonlinearMul(100000 * 10000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936 * 100, nonlinearPow(10, decimals_WXB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L965]               sum_holders1[this] := sum_holders1[this] - holders_WXB[this][msgsender_MSG];
[L966]               holders_WXB[this][msgsender_MSG] := totalSupply_WXB[this];
[L967]               sum_holders1[this] := sum_holders1[this] + holders_WXB[this][msgsender_MSG];
[L990]   RET         call WXB_WXB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L991]   COND FALSE  !(revert)
[L167]   RET         call WXB_WXB__success(this, msgsender_MSG, msgvalue_MSG);
[L168]               assume !revert && gas >= 0;
[L1766]  RET         call WXB_WXB(this, msgsender_MSG, msgvalue_MSG);
[L1767]              assume !revert && gas >= 0;
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != _from_s315 || p2 != msgsender_MSG) && _from_s315 == _to_s315) && _val_s315 <= holders_WXB[this][_from_s315]) && _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG]) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_to_s315] >= 0) && holders_WXB[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_from_s315] >= 0) && holders_WXB[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_WXB[this][_from_s315][msgsender_MSG] >= 0) && approach_WXB[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_WXB0 := true;
[L3]                 call_transferFrom_WXB0 := false;
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L325]   CALL        call __ret_0_ := transferFrom~address~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1088]  COND FALSE  !(!(holders_WXB[this][_from_s315] >= _val_s315))
[L1092]  COND FALSE  !(!(approach_WXB[this][_from_s315][msgsender_MSG] >= _val_s315))
[L1096]              assert _val_s315 <= holders_WXB[this][_from_s315];
[L1097]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][_from_s315];
[L1098]              holders_WXB[this][_from_s315] := (holders_WXB[this][_from_s315] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1099]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][_from_s315];
[L1100]              assert _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG];
[L1101]              sum_approach0[_from_s315] := sum_approach0[_from_s315] - approach_WXB[this][_from_s315][msgsender_MSG];
[L1102]              approach_WXB[this][_from_s315][msgsender_MSG] := (approach_WXB[this][_from_s315][msgsender_MSG] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1103]              sum_approach0[_from_s315] := sum_approach0[_from_s315] + approach_WXB[this][_from_s315][msgsender_MSG];
[L1104]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][_to_s315];
[L1105]              holders_WXB[this][_to_s315] := (holders_WXB[this][_to_s315] + _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1106]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][_to_s315];
[L1107]              assert holders_WXB[this][_to_s315] >= _val_s315;
[L1108]              assert { :EventEmitted "Transfer_WXB" } true;
[L1109]              __ret_0_ := true;
[L325]   RET         call __ret_0_ := transferFrom~address~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L326]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((__ret_0_ == true && approach_WXB[this][_from_s315][msgsender_MSG] == old(approach_WXB[this][_from_s315][msgsender_MSG]) - _val_s315) && totalSupply_WXB[this] == old(totalSupply_WXB[this])) && holders_WXB[this] == old(holders_WXB[this])) && approach_WXB[this][p1][p2] == old(approach_WXB[this][p1][p2])) && decimals_WXB[this] == old(decimals_WXB[this])) && symbol_WXB[this] == old(symbol_WXB[this])) && name_WXB[this] == old(name_WXB[this]));
[L3]                 revert := revert_hold;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_WXB(this);

Loop:
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != _from_s315 || p2 != msgsender_MSG) && _from_s315 == _to_s315) && _val_s315 <= holders_WXB[this][_from_s315]) && _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG]) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_to_s315] >= 0) && holders_WXB[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_from_s315] >= 0) && holders_WXB[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_WXB[this][_from_s315][msgsender_MSG] >= 0) && approach_WXB[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_WXB0 := true;
[L3]                 call_transferFrom_WXB0 := false;
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L325]   CALL        call __ret_0_ := transferFrom~address~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1088]  COND FALSE  !(!(holders_WXB[this][_from_s315] >= _val_s315))
[L1092]  COND FALSE  !(!(approach_WXB[this][_from_s315][msgsender_MSG] >= _val_s315))
[L1096]              assert _val_s315 <= holders_WXB[this][_from_s315];
[L1097]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][_from_s315];
[L1098]              holders_WXB[this][_from_s315] := (holders_WXB[this][_from_s315] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1099]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][_from_s315];
[L1100]              assert _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG];
[L1101]              sum_approach0[_from_s315] := sum_approach0[_from_s315] - approach_WXB[this][_from_s315][msgsender_MSG];
[L1102]              approach_WXB[this][_from_s315][msgsender_MSG] := (approach_WXB[this][_from_s315][msgsender_MSG] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1103]              sum_approach0[_from_s315] := sum_approach0[_from_s315] + approach_WXB[this][_from_s315][msgsender_MSG];
[L1104]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][_to_s315];
[L1105]              holders_WXB[this][_to_s315] := (holders_WXB[this][_to_s315] + _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1106]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][_to_s315];
[L1107]              assert holders_WXB[this][_to_s315] >= _val_s315;
[L1108]              assert { :EventEmitted "Transfer_WXB" } true;
[L1109]              __ret_0_ := true;
[L325]   RET         call __ret_0_ := transferFrom~address~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L326]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((__ret_0_ == true && approach_WXB[this][_from_s315][msgsender_MSG] == old(approach_WXB[this][_from_s315][msgsender_MSG]) - _val_s315) && totalSupply_WXB[this] == old(totalSupply_WXB[this])) && holders_WXB[this] == old(holders_WXB[this])) && approach_WXB[this][p1][p2] == old(approach_WXB[this][p1][p2])) && decimals_WXB[this] == old(decimals_WXB[this])) && symbol_WXB[this] == old(symbol_WXB[this])) && name_WXB[this] == old(name_WXB[this]));
[L3]                 revert := revert_hold;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_WXB(this);

[2020-11-25 08:51:34,806 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:51:34,806 INFO  L82        PathProgramCache]: Analyzing trace with hash 732126652, now seen corresponding path program 1 times
[2020-11-25 08:51:34,807 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:51:34,872 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:51:35,835 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 08:51:35,835 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:51:35,836 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [21] imperfect sequences [] total 21
[2020-11-25 08:51:35,837 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:51:35,837 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 22 interpolants.
[2020-11-25 08:51:35,838 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=74, Invalid=388, Unknown=0, NotChecked=0, Total=462
[2020-11-25 08:51:35,838 INFO  L87              Difference]: Start difference. First operand 1179 states and 1254 transitions. cyclomatic complexity: 77 Second operand 22 states.
[2020-11-25 08:51:38,091 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:51:38,091 INFO  L93              Difference]: Finished difference Result 1260 states and 1367 transitions.
[2020-11-25 08:51:38,091 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 22 states. 
[2020-11-25 08:51:38,091 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1260 states and 1367 transitions.
[2020-11-25 08:51:38,094 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 08:51:38,098 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1260 states to 1260 states and 1367 transitions.
[2020-11-25 08:51:38,098 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 558
[2020-11-25 08:51:38,099 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 558
[2020-11-25 08:51:38,099 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1260 states and 1367 transitions.
[2020-11-25 08:51:38,100 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:51:38,100 INFO  L728         BuchiCegarLoop]: Abstraction has 1260 states and 1367 transitions.
[2020-11-25 08:51:38,101 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1260 states and 1367 transitions.
[2020-11-25 08:51:38,110 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1260 to 1235.
[2020-11-25 08:51:38,111 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1235 states.
[2020-11-25 08:51:38,112 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1235 states to 1235 states and 1321 transitions.
[2020-11-25 08:51:38,112 INFO  L751         BuchiCegarLoop]: Abstraction has 1235 states and 1321 transitions.
[2020-11-25 08:51:38,112 INFO  L631         BuchiCegarLoop]: Abstraction has 1235 states and 1321 transitions.
[2020-11-25 08:51:38,112 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 08:51:38,112 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1235 states and 1321 transitions.
[2020-11-25 08:51:38,115 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 08:51:38,115 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:51:38,115 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:51:38,116 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:51:38,116 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_WXB0 := false;
[L3]                 call_transferFrom_WXB0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L1760]              assume null == 0;
[L1761]  CALL        call this := FreshRefGenerator__success();
[L882]               havoc newRef;
[L883]               assume Alloc[newRef] == false;
[L884]               Alloc[newRef] := true;
[L885]               assume newRef != null;
[L1761]  RET         call this := FreshRefGenerator__success();
[L1762]              assume now >= 0;
[L1763]              assume DType[this] == WXB;
[L1764]              assume msgvalue_MSG == 0;
[L1765]              gas := gas - 53000;
[L1766]  CALL        call WXB_WXB(this, msgsender_MSG, msgvalue_MSG);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call WXB_WXB__success(this, msgsender_MSG, msgvalue_MSG);
[L986]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L914]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L899]               assume msgsender_MSG != null;
[L900]               Balance[this] := 0;
[L914]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L915]   COND FALSE  !(revert)
[L986]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L987]   COND FALSE  !(revert)
[L990]   CALL        call WXB_WXB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L949]               assume msgsender_MSG != null;
[L950]               Balance[this] := 0;
[L951]               totalSupply_WXB[this] := 0;
[L952]               decimals_WXB[this] := 0;
[L953]               symbol_WXB[this] := 1199276259;
[L954]               name_WXB[this] := 1199276259;
[L955]               approach_WXB[this] := zeroRefRefintArr();
[L956]               sum_approach0[this] := 0;
[L957]               holders_WXB[this] := zeroRefintArr();
[L958]               sum_holders1[this] := 0;
[L960]               name_WXB[this] := -1225396598;
[L961]               symbol_WXB[this] := 397088534;
[L962]               decimals_WXB[this] := 18;
[L963]               __var_1 := decimals_WXB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L964]               totalSupply_WXB[this] := nonlinearMul(100000 * 10000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936 * 100, nonlinearPow(10, decimals_WXB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L965]               sum_holders1[this] := sum_holders1[this] - holders_WXB[this][msgsender_MSG];
[L966]               holders_WXB[this][msgsender_MSG] := totalSupply_WXB[this];
[L967]               sum_holders1[this] := sum_holders1[this] + holders_WXB[this][msgsender_MSG];
[L990]   RET         call WXB_WXB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L991]   COND FALSE  !(revert)
[L167]   RET         call WXB_WXB__success(this, msgsender_MSG, msgvalue_MSG);
[L168]               assume !revert && gas >= 0;
[L1766]  RET         call WXB_WXB(this, msgsender_MSG, msgvalue_MSG);
[L1767]              assume !revert && gas >= 0;
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != _from_s315 || p2 != msgsender_MSG) && _from_s315 == _to_s315) && _val_s315 <= holders_WXB[this][_from_s315]) && _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG]) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_to_s315] >= 0) && holders_WXB[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_from_s315] >= 0) && holders_WXB[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_WXB[this][_from_s315][msgsender_MSG] >= 0) && approach_WXB[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_WXB0 := true;
[L3]                 call_transferFrom_WXB0 := false;
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND TRUE   __exception
[L305]               __tmp__Balance := Balance;
[L306]               __tmp__DType := DType;
[L307]               __tmp__Alloc := Alloc;
[L308]               __tmp__balance_ADDR := balance_ADDR;
[L309]               __tmp__M_Ref_int := M_Ref_int;
[L310]               __tmp__alloc_approach_WXB_lvl0 := alloc_approach_WXB_lvl0;
[L311]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L312]               __tmp__sum_approach0 := sum_approach0;
[L313]               __tmp__sum_holders1 := sum_holders1;
[L314]               __tmp__Length := Length;
[L315]               __tmp__now := now;
[L316]               __tmp__totalSupply_WXB := totalSupply_WXB;
[L317]               __tmp__decimals_WXB := decimals_WXB;
[L318]               __tmp__symbol_WXB := symbol_WXB;
[L319]               __tmp__name_WXB := name_WXB;
[L320]               __tmp__approach_WXB := approach_WXB;
[L321]               __tmp__holders_WXB := holders_WXB;
[L322]   CALL        call __ret_0_ := transferFrom~address~address~uint256_WXB__fail(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1065]  COND FALSE  !(!(__tmp__holders_WXB[this][_from_s315] >= _val_s315))
[L1069]  COND TRUE   !(__tmp__approach_WXB[this][_from_s315][msgsender_MSG] >= _val_s315)
[L1070]              revert := true;
[L322]   RET         call __ret_0_ := transferFrom~address~address~uint256_WXB__fail(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L323]               assume revert || gas < 0;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_WXB(this);

Loop:
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != _from_s315 || p2 != msgsender_MSG) && _from_s315 == _to_s315) && _val_s315 <= holders_WXB[this][_from_s315]) && _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG]) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_to_s315] >= 0) && holders_WXB[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_from_s315] >= 0) && holders_WXB[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_WXB[this][_from_s315][msgsender_MSG] >= 0) && approach_WXB[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_WXB0 := true;
[L3]                 call_transferFrom_WXB0 := false;
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND TRUE   __exception
[L305]               __tmp__Balance := Balance;
[L306]               __tmp__DType := DType;
[L307]               __tmp__Alloc := Alloc;
[L308]               __tmp__balance_ADDR := balance_ADDR;
[L309]               __tmp__M_Ref_int := M_Ref_int;
[L310]               __tmp__alloc_approach_WXB_lvl0 := alloc_approach_WXB_lvl0;
[L311]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L312]               __tmp__sum_approach0 := sum_approach0;
[L313]               __tmp__sum_holders1 := sum_holders1;
[L314]               __tmp__Length := Length;
[L315]               __tmp__now := now;
[L316]               __tmp__totalSupply_WXB := totalSupply_WXB;
[L317]               __tmp__decimals_WXB := decimals_WXB;
[L318]               __tmp__symbol_WXB := symbol_WXB;
[L319]               __tmp__name_WXB := name_WXB;
[L320]               __tmp__approach_WXB := approach_WXB;
[L321]               __tmp__holders_WXB := holders_WXB;
[L322]   CALL        call __ret_0_ := transferFrom~address~address~uint256_WXB__fail(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1065]  COND FALSE  !(!(__tmp__holders_WXB[this][_from_s315] >= _val_s315))
[L1069]  COND TRUE   !(__tmp__approach_WXB[this][_from_s315][msgsender_MSG] >= _val_s315)
[L1070]              revert := true;
[L322]   RET         call __ret_0_ := transferFrom~address~address~uint256_WXB__fail(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L323]               assume revert || gas < 0;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_WXB(this);

[2020-11-25 08:51:38,118 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:51:38,118 INFO  L82        PathProgramCache]: Analyzing trace with hash -52738846, now seen corresponding path program 1 times
[2020-11-25 08:51:38,119 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:51:38,124 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:51:38,144 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 08:51:38,144 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:51:38,144 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 08:51:38,144 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:51:38,144 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 08:51:38,144 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 08:51:38,145 INFO  L87              Difference]: Start difference. First operand 1235 states and 1321 transitions. cyclomatic complexity: 90 Second operand 6 states.
[2020-11-25 08:51:38,300 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:51:38,300 INFO  L93              Difference]: Finished difference Result 1293 states and 1396 transitions.
[2020-11-25 08:51:38,300 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 08:51:38,300 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1293 states and 1396 transitions.
[2020-11-25 08:51:38,304 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 08:51:38,308 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1293 states to 1293 states and 1396 transitions.
[2020-11-25 08:51:38,308 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 577
[2020-11-25 08:51:38,308 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 577
[2020-11-25 08:51:38,308 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1293 states and 1396 transitions.
[2020-11-25 08:51:38,309 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:51:38,309 INFO  L728         BuchiCegarLoop]: Abstraction has 1293 states and 1396 transitions.
[2020-11-25 08:51:38,310 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1293 states and 1396 transitions.
[2020-11-25 08:51:38,320 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1293 to 1235.
[2020-11-25 08:51:38,320 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1235 states.
[2020-11-25 08:51:38,322 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1235 states to 1235 states and 1321 transitions.
[2020-11-25 08:51:38,322 INFO  L751         BuchiCegarLoop]: Abstraction has 1235 states and 1321 transitions.
[2020-11-25 08:51:38,322 INFO  L631         BuchiCegarLoop]: Abstraction has 1235 states and 1321 transitions.
[2020-11-25 08:51:38,322 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 08:51:38,322 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1235 states and 1321 transitions.
[2020-11-25 08:51:38,325 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 08:51:38,325 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:51:38,325 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:51:38,326 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:51:38,327 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_WXB0 := false;
[L3]                 call_transferFrom_WXB0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L1760]              assume null == 0;
[L1761]  CALL        call this := FreshRefGenerator__success();
[L882]               havoc newRef;
[L883]               assume Alloc[newRef] == false;
[L884]               Alloc[newRef] := true;
[L885]               assume newRef != null;
[L1761]  RET         call this := FreshRefGenerator__success();
[L1762]              assume now >= 0;
[L1763]              assume DType[this] == WXB;
[L1764]              assume msgvalue_MSG == 0;
[L1765]              gas := gas - 53000;
[L1766]  CALL        call WXB_WXB(this, msgsender_MSG, msgvalue_MSG);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call WXB_WXB__success(this, msgsender_MSG, msgvalue_MSG);
[L986]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L914]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L899]               assume msgsender_MSG != null;
[L900]               Balance[this] := 0;
[L914]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L915]   COND FALSE  !(revert)
[L986]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L987]   COND FALSE  !(revert)
[L990]   CALL        call WXB_WXB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L949]               assume msgsender_MSG != null;
[L950]               Balance[this] := 0;
[L951]               totalSupply_WXB[this] := 0;
[L952]               decimals_WXB[this] := 0;
[L953]               symbol_WXB[this] := 1199276259;
[L954]               name_WXB[this] := 1199276259;
[L955]               approach_WXB[this] := zeroRefRefintArr();
[L956]               sum_approach0[this] := 0;
[L957]               holders_WXB[this] := zeroRefintArr();
[L958]               sum_holders1[this] := 0;
[L960]               name_WXB[this] := -1225396598;
[L961]               symbol_WXB[this] := 397088534;
[L962]               decimals_WXB[this] := 18;
[L963]               __var_1 := decimals_WXB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L964]               totalSupply_WXB[this] := nonlinearMul(100000 * 10000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936 * 100, nonlinearPow(10, decimals_WXB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L965]               sum_holders1[this] := sum_holders1[this] - holders_WXB[this][msgsender_MSG];
[L966]               holders_WXB[this][msgsender_MSG] := totalSupply_WXB[this];
[L967]               sum_holders1[this] := sum_holders1[this] + holders_WXB[this][msgsender_MSG];
[L990]   RET         call WXB_WXB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L991]   COND FALSE  !(revert)
[L167]   RET         call WXB_WXB__success(this, msgsender_MSG, msgvalue_MSG);
[L168]               assume !revert && gas >= 0;
[L1766]  RET         call WXB_WXB(this, msgsender_MSG, msgvalue_MSG);
[L1767]              assume !revert && gas >= 0;
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != _from_s315 || p2 != msgsender_MSG) && _from_s315 == _to_s315) && _val_s315 <= holders_WXB[this][_from_s315]) && _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG]) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_to_s315] >= 0) && holders_WXB[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_from_s315] >= 0) && holders_WXB[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_WXB[this][_from_s315][msgsender_MSG] >= 0) && approach_WXB[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_WXB0 := true;
[L3]                 call_transferFrom_WXB0 := false;
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND TRUE   __exception
[L305]               __tmp__Balance := Balance;
[L306]               __tmp__DType := DType;
[L307]               __tmp__Alloc := Alloc;
[L308]               __tmp__balance_ADDR := balance_ADDR;
[L309]               __tmp__M_Ref_int := M_Ref_int;
[L310]               __tmp__alloc_approach_WXB_lvl0 := alloc_approach_WXB_lvl0;
[L311]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L312]               __tmp__sum_approach0 := sum_approach0;
[L313]               __tmp__sum_holders1 := sum_holders1;
[L314]               __tmp__Length := Length;
[L315]               __tmp__now := now;
[L316]               __tmp__totalSupply_WXB := totalSupply_WXB;
[L317]               __tmp__decimals_WXB := decimals_WXB;
[L318]               __tmp__symbol_WXB := symbol_WXB;
[L319]               __tmp__name_WXB := name_WXB;
[L320]               __tmp__approach_WXB := approach_WXB;
[L321]               __tmp__holders_WXB := holders_WXB;
[L322]   CALL        call __ret_0_ := transferFrom~address~address~uint256_WXB__fail(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1065]  COND FALSE  !(!(__tmp__holders_WXB[this][_from_s315] >= _val_s315))
[L1069]  COND FALSE  !(!(__tmp__approach_WXB[this][_from_s315][msgsender_MSG] >= _val_s315))
[L1073]              __tmp__sum_holders1[this] := __tmp__sum_holders1[this] - __tmp__holders_WXB[this][_from_s315];
[L1074]              __tmp__holders_WXB[this][_from_s315] := (__tmp__holders_WXB[this][_from_s315] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1075]              __tmp__sum_holders1[this] := __tmp__sum_holders1[this] + __tmp__holders_WXB[this][_from_s315];
[L1076]              __tmp__sum_approach0[_from_s315] := __tmp__sum_approach0[_from_s315] - __tmp__approach_WXB[this][_from_s315][msgsender_MSG];
[L1077]              __tmp__approach_WXB[this][_from_s315][msgsender_MSG] := (__tmp__approach_WXB[this][_from_s315][msgsender_MSG] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1078]              __tmp__sum_approach0[_from_s315] := __tmp__sum_approach0[_from_s315] + __tmp__approach_WXB[this][_from_s315][msgsender_MSG];
[L1079]              __tmp__sum_holders1[this] := __tmp__sum_holders1[this] - __tmp__holders_WXB[this][_to_s315];
[L1080]              __tmp__holders_WXB[this][_to_s315] := (__tmp__holders_WXB[this][_to_s315] + _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1081]              __tmp__sum_holders1[this] := __tmp__sum_holders1[this] + __tmp__holders_WXB[this][_to_s315];
[L1082]              __ret_0_ := true;
[L322]   RET         call __ret_0_ := transferFrom~address~address~uint256_WXB__fail(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L323]               assume revert || gas < 0;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_WXB(this);

Loop:
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != _from_s315 || p2 != msgsender_MSG) && _from_s315 == _to_s315) && _val_s315 <= holders_WXB[this][_from_s315]) && _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG]) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_to_s315] >= 0) && holders_WXB[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_from_s315] >= 0) && holders_WXB[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_WXB[this][_from_s315][msgsender_MSG] >= 0) && approach_WXB[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_WXB0 := true;
[L3]                 call_transferFrom_WXB0 := false;
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND TRUE   __exception
[L305]               __tmp__Balance := Balance;
[L306]               __tmp__DType := DType;
[L307]               __tmp__Alloc := Alloc;
[L308]               __tmp__balance_ADDR := balance_ADDR;
[L309]               __tmp__M_Ref_int := M_Ref_int;
[L310]               __tmp__alloc_approach_WXB_lvl0 := alloc_approach_WXB_lvl0;
[L311]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L312]               __tmp__sum_approach0 := sum_approach0;
[L313]               __tmp__sum_holders1 := sum_holders1;
[L314]               __tmp__Length := Length;
[L315]               __tmp__now := now;
[L316]               __tmp__totalSupply_WXB := totalSupply_WXB;
[L317]               __tmp__decimals_WXB := decimals_WXB;
[L318]               __tmp__symbol_WXB := symbol_WXB;
[L319]               __tmp__name_WXB := name_WXB;
[L320]               __tmp__approach_WXB := approach_WXB;
[L321]               __tmp__holders_WXB := holders_WXB;
[L322]   CALL        call __ret_0_ := transferFrom~address~address~uint256_WXB__fail(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1065]  COND FALSE  !(!(__tmp__holders_WXB[this][_from_s315] >= _val_s315))
[L1069]  COND FALSE  !(!(__tmp__approach_WXB[this][_from_s315][msgsender_MSG] >= _val_s315))
[L1073]              __tmp__sum_holders1[this] := __tmp__sum_holders1[this] - __tmp__holders_WXB[this][_from_s315];
[L1074]              __tmp__holders_WXB[this][_from_s315] := (__tmp__holders_WXB[this][_from_s315] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1075]              __tmp__sum_holders1[this] := __tmp__sum_holders1[this] + __tmp__holders_WXB[this][_from_s315];
[L1076]              __tmp__sum_approach0[_from_s315] := __tmp__sum_approach0[_from_s315] - __tmp__approach_WXB[this][_from_s315][msgsender_MSG];
[L1077]              __tmp__approach_WXB[this][_from_s315][msgsender_MSG] := (__tmp__approach_WXB[this][_from_s315][msgsender_MSG] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1078]              __tmp__sum_approach0[_from_s315] := __tmp__sum_approach0[_from_s315] + __tmp__approach_WXB[this][_from_s315][msgsender_MSG];
[L1079]              __tmp__sum_holders1[this] := __tmp__sum_holders1[this] - __tmp__holders_WXB[this][_to_s315];
[L1080]              __tmp__holders_WXB[this][_to_s315] := (__tmp__holders_WXB[this][_to_s315] + _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1081]              __tmp__sum_holders1[this] := __tmp__sum_holders1[this] + __tmp__holders_WXB[this][_to_s315];
[L1082]              __ret_0_ := true;
[L322]   RET         call __ret_0_ := transferFrom~address~address~uint256_WXB__fail(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L323]               assume revert || gas < 0;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_WXB(this);

[2020-11-25 08:51:38,329 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:51:38,329 INFO  L82        PathProgramCache]: Analyzing trace with hash -878820308, now seen corresponding path program 1 times
[2020-11-25 08:51:38,330 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:51:38,335 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:51:38,352 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 08:51:38,353 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:51:38,353 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 08:51:38,353 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:51:38,353 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 08:51:38,353 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=10, Invalid=20, Unknown=0, NotChecked=0, Total=30
[2020-11-25 08:51:38,353 INFO  L87              Difference]: Start difference. First operand 1235 states and 1321 transitions. cyclomatic complexity: 90 Second operand 6 states.
[2020-11-25 08:51:38,495 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:51:38,495 INFO  L93              Difference]: Finished difference Result 1605 states and 1790 transitions.
[2020-11-25 08:51:38,495 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 08:51:38,495 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1605 states and 1790 transitions.
[2020-11-25 08:51:38,500 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 08:51:38,502 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1605 states to 1148 states and 1330 transitions.
[2020-11-25 08:51:38,503 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 534
[2020-11-25 08:51:38,503 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 534
[2020-11-25 08:51:38,503 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1148 states and 1330 transitions.
[2020-11-25 08:51:38,504 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:51:38,504 INFO  L728         BuchiCegarLoop]: Abstraction has 1148 states and 1330 transitions.
[2020-11-25 08:51:38,505 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1148 states and 1330 transitions.
[2020-11-25 08:51:38,511 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1148 to 781.
[2020-11-25 08:51:38,511 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 781 states.
[2020-11-25 08:51:38,512 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 781 states to 781 states and 838 transitions.
[2020-11-25 08:51:38,512 INFO  L751         BuchiCegarLoop]: Abstraction has 781 states and 838 transitions.
[2020-11-25 08:51:38,512 INFO  L631         BuchiCegarLoop]: Abstraction has 781 states and 838 transitions.
[2020-11-25 08:51:38,512 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 08:51:38,512 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 781 states and 838 transitions.
[2020-11-25 08:51:38,513 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:51:38,513 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:51:38,513 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:51:38,514 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:51:38,514 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_WXB0 := false;
[L3]                 call_transferFrom_WXB0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L1760]              assume null == 0;
[L1761]  CALL        call this := FreshRefGenerator__success();
[L882]               havoc newRef;
[L883]               assume Alloc[newRef] == false;
[L884]               Alloc[newRef] := true;
[L885]               assume newRef != null;
[L1761]  RET         call this := FreshRefGenerator__success();
[L1762]              assume now >= 0;
[L1763]              assume DType[this] == WXB;
[L1764]              assume msgvalue_MSG == 0;
[L1765]              gas := gas - 53000;
[L1766]  CALL        call WXB_WXB(this, msgsender_MSG, msgvalue_MSG);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call WXB_WXB__success(this, msgsender_MSG, msgvalue_MSG);
[L986]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L914]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L899]               assume msgsender_MSG != null;
[L900]               Balance[this] := 0;
[L914]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L915]   COND FALSE  !(revert)
[L986]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L987]   COND FALSE  !(revert)
[L990]   CALL        call WXB_WXB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L949]               assume msgsender_MSG != null;
[L950]               Balance[this] := 0;
[L951]               totalSupply_WXB[this] := 0;
[L952]               decimals_WXB[this] := 0;
[L953]               symbol_WXB[this] := 1199276259;
[L954]               name_WXB[this] := 1199276259;
[L955]               approach_WXB[this] := zeroRefRefintArr();
[L956]               sum_approach0[this] := 0;
[L957]               holders_WXB[this] := zeroRefintArr();
[L958]               sum_holders1[this] := 0;
[L960]               name_WXB[this] := -1225396598;
[L961]               symbol_WXB[this] := 397088534;
[L962]               decimals_WXB[this] := 18;
[L963]               __var_1 := decimals_WXB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L964]               totalSupply_WXB[this] := nonlinearMul(100000 * 10000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936 * 100, nonlinearPow(10, decimals_WXB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L965]               sum_holders1[this] := sum_holders1[this] - holders_WXB[this][msgsender_MSG];
[L966]               holders_WXB[this][msgsender_MSG] := totalSupply_WXB[this];
[L967]               sum_holders1[this] := sum_holders1[this] + holders_WXB[this][msgsender_MSG];
[L990]   RET         call WXB_WXB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L991]   COND FALSE  !(revert)
[L167]   RET         call WXB_WXB__success(this, msgsender_MSG, msgvalue_MSG);
[L168]               assume !revert && gas >= 0;
[L1766]  RET         call WXB_WXB(this, msgsender_MSG, msgvalue_MSG);
[L1767]              assume !revert && gas >= 0;
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND FALSE  !(choice == 9)
[L1702]  COND FALSE  !(choice == 8)
[L1709]  COND FALSE  !(choice == 7)
[L1715]  COND FALSE  !(choice == 6)
[L1721]  COND TRUE   choice == 5
[L1722]              gas := gas - 21000;
[L1723]  COND TRUE   gas >= 0
[L1724]              assume _val_s352 >= 0 && _val_s352 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1725]              assume msgvalue_MSG == 0;
[L1726]  CALL        call __ret_0_approve := approve~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _spender_s352, _val_s352);
[L354]               havoc __exception;
[L355]               revert := false;
[L356]   COND FALSE  !(__exception)
[L377]   CALL        call __ret_0_ := approve~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _spender_s352, _val_s352);
[L1128]  COND FALSE  !(!(holders_WXB[this][msgsender_MSG] >= _val_s352))
[L1132]              sum_approach0[msgsender_MSG] := sum_approach0[msgsender_MSG] - approach_WXB[this][msgsender_MSG][_spender_s352];
[L1133]              approach_WXB[this][msgsender_MSG][_spender_s352] := _val_s352;
[L1134]              sum_approach0[msgsender_MSG] := sum_approach0[msgsender_MSG] + approach_WXB[this][msgsender_MSG][_spender_s352];
[L1135]              assert { :EventEmitted "Approval_WXB" } true;
[L1136]              __ret_0_ := true;
[L377]   RET         call __ret_0_ := approve~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _spender_s352, _val_s352);
[L378]               assume !revert && gas >= 0;
[L1726]  RET         call __ret_0_approve := approve~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _spender_s352, _val_s352);
[L1770]  RET         call CorralChoice_WXB(this);
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != _from_s315 || p2 != msgsender_MSG) && _from_s315 == _to_s315) && _val_s315 <= holders_WXB[this][_from_s315]) && _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG]) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_to_s315] >= 0) && holders_WXB[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_from_s315] >= 0) && holders_WXB[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_WXB[this][_from_s315][msgsender_MSG] >= 0) && approach_WXB[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_WXB0 := true;
[L3]                 call_transferFrom_WXB0 := false;
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L325]   CALL        call __ret_0_ := transferFrom~address~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1088]  COND FALSE  !(!(holders_WXB[this][_from_s315] >= _val_s315))
[L1092]  COND FALSE  !(!(approach_WXB[this][_from_s315][msgsender_MSG] >= _val_s315))
[L1096]              assert _val_s315 <= holders_WXB[this][_from_s315];
[L1097]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][_from_s315];
[L1098]              holders_WXB[this][_from_s315] := (holders_WXB[this][_from_s315] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1099]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][_from_s315];
[L1100]              assert _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG];
[L1101]              sum_approach0[_from_s315] := sum_approach0[_from_s315] - approach_WXB[this][_from_s315][msgsender_MSG];
[L1102]              approach_WXB[this][_from_s315][msgsender_MSG] := (approach_WXB[this][_from_s315][msgsender_MSG] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1103]              sum_approach0[_from_s315] := sum_approach0[_from_s315] + approach_WXB[this][_from_s315][msgsender_MSG];
[L1104]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][_to_s315];
[L1105]              holders_WXB[this][_to_s315] := (holders_WXB[this][_to_s315] + _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1106]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][_to_s315];
[L1107]              assert holders_WXB[this][_to_s315] >= _val_s315;
[L1108]              assert { :EventEmitted "Transfer_WXB" } true;
[L1109]              __ret_0_ := true;
[L325]   RET         call __ret_0_ := transferFrom~address~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L326]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((__ret_0_ == true && approach_WXB[this][_from_s315][msgsender_MSG] == old(approach_WXB[this][_from_s315][msgsender_MSG]) - _val_s315) && totalSupply_WXB[this] == old(totalSupply_WXB[this])) && holders_WXB[this] == old(holders_WXB[this])) && approach_WXB[this][p1][p2] == old(approach_WXB[this][p1][p2])) && decimals_WXB[this] == old(decimals_WXB[this])) && symbol_WXB[this] == old(symbol_WXB[this])) && name_WXB[this] == old(name_WXB[this]));
[L3]                 revert := revert_hold;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_WXB(this);

Loop:
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND FALSE  !(gas >= 0)
[L1770]  RET         call CorralChoice_WXB(this);

[2020-11-25 08:51:38,516 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:51:38,516 INFO  L82        PathProgramCache]: Analyzing trace with hash 1137226823, now seen corresponding path program 1 times
[2020-11-25 08:51:38,517 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:51:38,569 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:51:39,721 INFO  L134       CoverageAnalysis]: Checked inductivity of 35 backedges. 0 proven. 1 refuted. 0 times theorem prover too weak. 34 trivial. 0 not checked.
[2020-11-25 08:51:39,721 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:51:39,721 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [30] total 30
[2020-11-25 08:51:39,721 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:51:39,721 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 31 interpolants.
[2020-11-25 08:51:39,722 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=96, Invalid=834, Unknown=0, NotChecked=0, Total=930
[2020-11-25 08:51:39,722 INFO  L87              Difference]: Start difference. First operand 781 states and 838 transitions. cyclomatic complexity: 60 Second operand 31 states.
[2020-11-25 08:51:42,705 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:51:42,706 INFO  L93              Difference]: Finished difference Result 924 states and 1031 transitions.
[2020-11-25 08:51:42,706 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 35 states. 
[2020-11-25 08:51:42,706 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 924 states and 1031 transitions.
[2020-11-25 08:51:42,709 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 08:51:42,712 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 924 states to 924 states and 1031 transitions.
[2020-11-25 08:51:42,712 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 473
[2020-11-25 08:51:42,713 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 473
[2020-11-25 08:51:42,713 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 924 states and 1031 transitions.
[2020-11-25 08:51:42,714 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:51:42,714 INFO  L728         BuchiCegarLoop]: Abstraction has 924 states and 1031 transitions.
[2020-11-25 08:51:42,714 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 924 states and 1031 transitions.
[2020-11-25 08:51:42,719 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 924 to 888.
[2020-11-25 08:51:42,719 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 888 states.
[2020-11-25 08:51:42,720 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 888 states to 888 states and 987 transitions.
[2020-11-25 08:51:42,720 INFO  L751         BuchiCegarLoop]: Abstraction has 888 states and 987 transitions.
[2020-11-25 08:51:42,720 INFO  L631         BuchiCegarLoop]: Abstraction has 888 states and 987 transitions.
[2020-11-25 08:51:42,721 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 08:51:42,721 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 888 states and 987 transitions.
[2020-11-25 08:51:42,722 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 08:51:42,722 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:51:42,722 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:51:42,724 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:51:42,724 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_WXB0 := false;
[L3]                 call_transferFrom_WXB0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L1760]              assume null == 0;
[L1761]  CALL        call this := FreshRefGenerator__success();
[L882]               havoc newRef;
[L883]               assume Alloc[newRef] == false;
[L884]               Alloc[newRef] := true;
[L885]               assume newRef != null;
[L1761]  RET         call this := FreshRefGenerator__success();
[L1762]              assume now >= 0;
[L1763]              assume DType[this] == WXB;
[L1764]              assume msgvalue_MSG == 0;
[L1765]              gas := gas - 53000;
[L1766]  CALL        call WXB_WXB(this, msgsender_MSG, msgvalue_MSG);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call WXB_WXB__success(this, msgsender_MSG, msgvalue_MSG);
[L986]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L914]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L899]               assume msgsender_MSG != null;
[L900]               Balance[this] := 0;
[L914]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L915]   COND FALSE  !(revert)
[L986]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L987]   COND FALSE  !(revert)
[L990]   CALL        call WXB_WXB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L949]               assume msgsender_MSG != null;
[L950]               Balance[this] := 0;
[L951]               totalSupply_WXB[this] := 0;
[L952]               decimals_WXB[this] := 0;
[L953]               symbol_WXB[this] := 1199276259;
[L954]               name_WXB[this] := 1199276259;
[L955]               approach_WXB[this] := zeroRefRefintArr();
[L956]               sum_approach0[this] := 0;
[L957]               holders_WXB[this] := zeroRefintArr();
[L958]               sum_holders1[this] := 0;
[L960]               name_WXB[this] := -1225396598;
[L961]               symbol_WXB[this] := 397088534;
[L962]               decimals_WXB[this] := 18;
[L963]               __var_1 := decimals_WXB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L964]               totalSupply_WXB[this] := nonlinearMul(100000 * 10000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936 * 100, nonlinearPow(10, decimals_WXB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L965]               sum_holders1[this] := sum_holders1[this] - holders_WXB[this][msgsender_MSG];
[L966]               holders_WXB[this][msgsender_MSG] := totalSupply_WXB[this];
[L967]               sum_holders1[this] := sum_holders1[this] + holders_WXB[this][msgsender_MSG];
[L990]   RET         call WXB_WXB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L991]   COND FALSE  !(revert)
[L167]   RET         call WXB_WXB__success(this, msgsender_MSG, msgvalue_MSG);
[L168]               assume !revert && gas >= 0;
[L1766]  RET         call WXB_WXB(this, msgsender_MSG, msgvalue_MSG);
[L1767]              assume !revert && gas >= 0;
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND FALSE  !(choice == 9)
[L1702]  COND TRUE   choice == 8
[L1703]              gas := gas - 21000;
[L1704]  COND TRUE   gas >= 0
[L1705]              assume _val_s213 >= 0 && _val_s213 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1706]              assume msgvalue_MSG == 0;
[L1707]  CALL        call __ret_0_transfer := transfer~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _to_s213, _val_s213);
[L248]               havoc __exception;
[L249]               revert := false;
[L250]   COND FALSE  !(__exception)
[L271]   CALL        call __ret_0_ := transfer~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _to_s213, _val_s213);
[L1042]  COND FALSE  !(!(holders_WXB[this][msgsender_MSG] >= _val_s213))
[L1046]  COND FALSE  !(!(msgsender_MSG != _to_s213))
[L1050]              assert _val_s213 <= holders_WXB[this][msgsender_MSG];
[L1051]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][msgsender_MSG];
[L1052]              holders_WXB[this][msgsender_MSG] := (holders_WXB[this][msgsender_MSG] - _val_s213) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1053]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][msgsender_MSG];
[L1054]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][_to_s213];
[L1055]              holders_WXB[this][_to_s213] := (holders_WXB[this][_to_s213] + _val_s213) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1056]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][_to_s213];
[L1057]              assert holders_WXB[this][_to_s213] >= _val_s213;
[L1058]              assert { :EventEmitted "Transfer_WXB" } true;
[L1059]              __ret_0_ := true;
[L271]   RET         call __ret_0_ := transfer~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _to_s213, _val_s213);
[L272]               assume !revert && gas >= 0;
[L1707]  RET         call __ret_0_transfer := transfer~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _to_s213, _val_s213);
[L1770]  RET         call CorralChoice_WXB(this);
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != _from_s315 || p2 != msgsender_MSG) && _from_s315 == _to_s315) && _val_s315 <= holders_WXB[this][_from_s315]) && _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG]) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_to_s315] >= 0) && holders_WXB[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_from_s315] >= 0) && holders_WXB[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_WXB[this][_from_s315][msgsender_MSG] >= 0) && approach_WXB[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_WXB0 := true;
[L3]                 call_transferFrom_WXB0 := false;
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L325]   CALL        call __ret_0_ := transferFrom~address~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1088]  COND FALSE  !(!(holders_WXB[this][_from_s315] >= _val_s315))
[L1092]  COND FALSE  !(!(approach_WXB[this][_from_s315][msgsender_MSG] >= _val_s315))
[L1096]              assert _val_s315 <= holders_WXB[this][_from_s315];
[L1097]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][_from_s315];
[L1098]              holders_WXB[this][_from_s315] := (holders_WXB[this][_from_s315] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1099]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][_from_s315];
[L1100]              assert _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG];
[L1101]              sum_approach0[_from_s315] := sum_approach0[_from_s315] - approach_WXB[this][_from_s315][msgsender_MSG];
[L1102]              approach_WXB[this][_from_s315][msgsender_MSG] := (approach_WXB[this][_from_s315][msgsender_MSG] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1103]              sum_approach0[_from_s315] := sum_approach0[_from_s315] + approach_WXB[this][_from_s315][msgsender_MSG];
[L1104]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][_to_s315];
[L1105]              holders_WXB[this][_to_s315] := (holders_WXB[this][_to_s315] + _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1106]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][_to_s315];
[L1107]              assert holders_WXB[this][_to_s315] >= _val_s315;
[L1108]              assert { :EventEmitted "Transfer_WXB" } true;
[L1109]              __ret_0_ := true;
[L325]   RET         call __ret_0_ := transferFrom~address~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L326]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((__ret_0_ == true && approach_WXB[this][_from_s315][msgsender_MSG] == old(approach_WXB[this][_from_s315][msgsender_MSG]) - _val_s315) && totalSupply_WXB[this] == old(totalSupply_WXB[this])) && holders_WXB[this] == old(holders_WXB[this])) && approach_WXB[this][p1][p2] == old(approach_WXB[this][p1][p2])) && decimals_WXB[this] == old(decimals_WXB[this])) && symbol_WXB[this] == old(symbol_WXB[this])) && name_WXB[this] == old(name_WXB[this]));
[L3]                 revert := revert_hold;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_WXB(this);

Loop:
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND FALSE  !(gas >= 0)
[L1770]  RET         call CorralChoice_WXB(this);

[2020-11-25 08:51:42,726 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:51:42,726 INFO  L82        PathProgramCache]: Analyzing trace with hash 1730163110, now seen corresponding path program 1 times
[2020-11-25 08:51:42,727 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:51:42,780 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:51:43,527 WARN  L188               SmtUtils]: Spent 134.00 ms on a formula simplification. DAG size of input: 181 DAG size of output: 30
[2020-11-25 08:51:43,770 WARN  L188               SmtUtils]: Spent 126.00 ms on a formula simplification. DAG size of input: 206 DAG size of output: 30
[2020-11-25 08:51:44,760 INFO  L134       CoverageAnalysis]: Checked inductivity of 35 backedges. 0 proven. 35 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 08:51:44,760 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:51:44,760 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [37] total 37
[2020-11-25 08:51:44,761 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:51:44,761 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 38 interpolants.
[2020-11-25 08:51:44,761 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=124, Invalid=1282, Unknown=0, NotChecked=0, Total=1406
[2020-11-25 08:51:44,761 INFO  L87              Difference]: Start difference. First operand 888 states and 987 transitions. cyclomatic complexity: 105 Second operand 38 states.
[2020-11-25 08:51:48,366 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:51:48,366 INFO  L93              Difference]: Finished difference Result 1138 states and 1325 transitions.
[2020-11-25 08:51:48,366 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 41 states. 
[2020-11-25 08:51:48,367 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1138 states and 1325 transitions.
[2020-11-25 08:51:48,371 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 08:51:48,374 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1138 states to 1138 states and 1325 transitions.
[2020-11-25 08:51:48,374 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 681
[2020-11-25 08:51:48,375 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 681
[2020-11-25 08:51:48,375 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1138 states and 1325 transitions.
[2020-11-25 08:51:48,376 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:51:48,376 INFO  L728         BuchiCegarLoop]: Abstraction has 1138 states and 1325 transitions.
[2020-11-25 08:51:48,376 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1138 states and 1325 transitions.
[2020-11-25 08:51:48,382 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1138 to 886.
[2020-11-25 08:51:48,382 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 886 states.
[2020-11-25 08:51:48,383 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 886 states to 886 states and 982 transitions.
[2020-11-25 08:51:48,384 INFO  L751         BuchiCegarLoop]: Abstraction has 886 states and 982 transitions.
[2020-11-25 08:51:48,384 INFO  L631         BuchiCegarLoop]: Abstraction has 886 states and 982 transitions.
[2020-11-25 08:51:48,384 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 08:51:48,384 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 886 states and 982 transitions.
[2020-11-25 08:51:48,385 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 08:51:48,385 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:51:48,386 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:51:48,387 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:51:48,387 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_WXB0 := false;
[L3]                 call_transferFrom_WXB0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L1760]              assume null == 0;
[L1761]  CALL        call this := FreshRefGenerator__success();
[L882]               havoc newRef;
[L883]               assume Alloc[newRef] == false;
[L884]               Alloc[newRef] := true;
[L885]               assume newRef != null;
[L1761]  RET         call this := FreshRefGenerator__success();
[L1762]              assume now >= 0;
[L1763]              assume DType[this] == WXB;
[L1764]              assume msgvalue_MSG == 0;
[L1765]              gas := gas - 53000;
[L1766]  CALL        call WXB_WXB(this, msgsender_MSG, msgvalue_MSG);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call WXB_WXB__success(this, msgsender_MSG, msgvalue_MSG);
[L986]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L914]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L899]               assume msgsender_MSG != null;
[L900]               Balance[this] := 0;
[L914]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L915]   COND FALSE  !(revert)
[L986]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L987]   COND FALSE  !(revert)
[L990]   CALL        call WXB_WXB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L949]               assume msgsender_MSG != null;
[L950]               Balance[this] := 0;
[L951]               totalSupply_WXB[this] := 0;
[L952]               decimals_WXB[this] := 0;
[L953]               symbol_WXB[this] := 1199276259;
[L954]               name_WXB[this] := 1199276259;
[L955]               approach_WXB[this] := zeroRefRefintArr();
[L956]               sum_approach0[this] := 0;
[L957]               holders_WXB[this] := zeroRefintArr();
[L958]               sum_holders1[this] := 0;
[L960]               name_WXB[this] := -1225396598;
[L961]               symbol_WXB[this] := 397088534;
[L962]               decimals_WXB[this] := 18;
[L963]               __var_1 := decimals_WXB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L964]               totalSupply_WXB[this] := nonlinearMul(100000 * 10000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936 * 100, nonlinearPow(10, decimals_WXB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L965]               sum_holders1[this] := sum_holders1[this] - holders_WXB[this][msgsender_MSG];
[L966]               holders_WXB[this][msgsender_MSG] := totalSupply_WXB[this];
[L967]               sum_holders1[this] := sum_holders1[this] + holders_WXB[this][msgsender_MSG];
[L990]   RET         call WXB_WXB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L991]   COND FALSE  !(revert)
[L167]   RET         call WXB_WXB__success(this, msgsender_MSG, msgvalue_MSG);
[L168]               assume !revert && gas >= 0;
[L1766]  RET         call WXB_WXB(this, msgsender_MSG, msgvalue_MSG);
[L1767]              assume !revert && gas >= 0;
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((p1 != _from_s315 || p2 != msgsender_MSG) && _from_s315 == _to_s315) && _val_s315 <= holders_WXB[this][_from_s315]) && _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG]) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_to_s315] >= 0) && holders_WXB[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_from_s315] >= 0) && holders_WXB[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_WXB[this][_from_s315][msgsender_MSG] >= 0) && approach_WXB[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L325]   CALL        call __ret_0_ := transferFrom~address~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1088]  COND FALSE  !(!(holders_WXB[this][_from_s315] >= _val_s315))
[L1092]  COND FALSE  !(!(approach_WXB[this][_from_s315][msgsender_MSG] >= _val_s315))
[L1096]              assert _val_s315 <= holders_WXB[this][_from_s315];
[L1097]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][_from_s315];
[L1098]              holders_WXB[this][_from_s315] := (holders_WXB[this][_from_s315] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1099]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][_from_s315];
[L1100]              assert _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG];
[L1101]              sum_approach0[_from_s315] := sum_approach0[_from_s315] - approach_WXB[this][_from_s315][msgsender_MSG];
[L1102]              approach_WXB[this][_from_s315][msgsender_MSG] := (approach_WXB[this][_from_s315][msgsender_MSG] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1103]              sum_approach0[_from_s315] := sum_approach0[_from_s315] + approach_WXB[this][_from_s315][msgsender_MSG];
[L1104]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][_to_s315];
[L1105]              holders_WXB[this][_to_s315] := (holders_WXB[this][_to_s315] + _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1106]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][_to_s315];
[L1107]              assert holders_WXB[this][_to_s315] >= _val_s315;
[L1108]              assert { :EventEmitted "Transfer_WXB" } true;
[L1109]              __ret_0_ := true;
[L325]   RET         call __ret_0_ := transferFrom~address~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L326]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((__ret_0_ == true && approach_WXB[this][_from_s315][msgsender_MSG] == old(approach_WXB[this][_from_s315][msgsender_MSG]) - _val_s315) && totalSupply_WXB[this] == old(totalSupply_WXB[this])) && holders_WXB[this] == old(holders_WXB[this])) && approach_WXB[this][p1][p2] == old(approach_WXB[this][p1][p2])) && decimals_WXB[this] == old(decimals_WXB[this])) && symbol_WXB[this] == old(symbol_WXB[this])) && name_WXB[this] == old(name_WXB[this]));
[L3]                 revert := revert_hold;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_WXB(this);
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != _from_s315 || p2 != msgsender_MSG) && _from_s315 == _to_s315) && _val_s315 <= holders_WXB[this][_from_s315]) && _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG]) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_to_s315] >= 0) && holders_WXB[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_from_s315] >= 0) && holders_WXB[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_WXB[this][_from_s315][msgsender_MSG] >= 0) && approach_WXB[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_WXB0 := true;
[L3]                 call_transferFrom_WXB0 := false;
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L325]   CALL        call __ret_0_ := transferFrom~address~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1088]  COND FALSE  !(!(holders_WXB[this][_from_s315] >= _val_s315))
[L1092]  COND FALSE  !(!(approach_WXB[this][_from_s315][msgsender_MSG] >= _val_s315))
[L1096]              assert _val_s315 <= holders_WXB[this][_from_s315];
[L1097]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][_from_s315];
[L1098]              holders_WXB[this][_from_s315] := (holders_WXB[this][_from_s315] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1099]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][_from_s315];
[L1100]              assert _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG];
[L1101]              sum_approach0[_from_s315] := sum_approach0[_from_s315] - approach_WXB[this][_from_s315][msgsender_MSG];
[L1102]              approach_WXB[this][_from_s315][msgsender_MSG] := (approach_WXB[this][_from_s315][msgsender_MSG] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1103]              sum_approach0[_from_s315] := sum_approach0[_from_s315] + approach_WXB[this][_from_s315][msgsender_MSG];
[L1104]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][_to_s315];
[L1105]              holders_WXB[this][_to_s315] := (holders_WXB[this][_to_s315] + _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1106]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][_to_s315];
[L1107]              assert holders_WXB[this][_to_s315] >= _val_s315;
[L1108]              assert { :EventEmitted "Transfer_WXB" } true;
[L1109]              __ret_0_ := true;
[L325]   RET         call __ret_0_ := transferFrom~address~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L326]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((__ret_0_ == true && approach_WXB[this][_from_s315][msgsender_MSG] == old(approach_WXB[this][_from_s315][msgsender_MSG]) - _val_s315) && totalSupply_WXB[this] == old(totalSupply_WXB[this])) && holders_WXB[this] == old(holders_WXB[this])) && approach_WXB[this][p1][p2] == old(approach_WXB[this][p1][p2])) && decimals_WXB[this] == old(decimals_WXB[this])) && symbol_WXB[this] == old(symbol_WXB[this])) && name_WXB[this] == old(name_WXB[this]));
[L3]                 revert := revert_hold;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_WXB(this);

Loop:
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != _from_s315 || p2 != msgsender_MSG) && _from_s315 == _to_s315) && _val_s315 <= holders_WXB[this][_from_s315]) && _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG]) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_to_s315] >= 0) && holders_WXB[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_from_s315] >= 0) && holders_WXB[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_WXB[this][_from_s315][msgsender_MSG] >= 0) && approach_WXB[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_WXB0 := true;
[L3]                 call_transferFrom_WXB0 := false;
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L325]   CALL        call __ret_0_ := transferFrom~address~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1088]  COND FALSE  !(!(holders_WXB[this][_from_s315] >= _val_s315))
[L1092]  COND FALSE  !(!(approach_WXB[this][_from_s315][msgsender_MSG] >= _val_s315))
[L1096]              assert _val_s315 <= holders_WXB[this][_from_s315];
[L1097]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][_from_s315];
[L1098]              holders_WXB[this][_from_s315] := (holders_WXB[this][_from_s315] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1099]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][_from_s315];
[L1100]              assert _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG];
[L1101]              sum_approach0[_from_s315] := sum_approach0[_from_s315] - approach_WXB[this][_from_s315][msgsender_MSG];
[L1102]              approach_WXB[this][_from_s315][msgsender_MSG] := (approach_WXB[this][_from_s315][msgsender_MSG] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1103]              sum_approach0[_from_s315] := sum_approach0[_from_s315] + approach_WXB[this][_from_s315][msgsender_MSG];
[L1104]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][_to_s315];
[L1105]              holders_WXB[this][_to_s315] := (holders_WXB[this][_to_s315] + _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1106]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][_to_s315];
[L1107]              assert holders_WXB[this][_to_s315] >= _val_s315;
[L1108]              assert { :EventEmitted "Transfer_WXB" } true;
[L1109]              __ret_0_ := true;
[L325]   RET         call __ret_0_ := transferFrom~address~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L326]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((__ret_0_ == true && approach_WXB[this][_from_s315][msgsender_MSG] == old(approach_WXB[this][_from_s315][msgsender_MSG]) - _val_s315) && totalSupply_WXB[this] == old(totalSupply_WXB[this])) && holders_WXB[this] == old(holders_WXB[this])) && approach_WXB[this][p1][p2] == old(approach_WXB[this][p1][p2])) && decimals_WXB[this] == old(decimals_WXB[this])) && symbol_WXB[this] == old(symbol_WXB[this])) && name_WXB[this] == old(name_WXB[this]));
[L3]                 revert := revert_hold;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_WXB(this);

[2020-11-25 08:51:48,390 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:51:48,390 INFO  L82        PathProgramCache]: Analyzing trace with hash 2044779038, now seen corresponding path program 1 times
[2020-11-25 08:51:48,390 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:51:48,494 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:51:49,789 WARN  L188               SmtUtils]: Spent 254.00 ms on a formula simplification. DAG size of input: 180 DAG size of output: 68
[2020-11-25 08:51:50,356 WARN  L188               SmtUtils]: Spent 135.00 ms on a formula simplification. DAG size of input: 172 DAG size of output: 61
[2020-11-25 08:51:50,683 WARN  L188               SmtUtils]: Spent 230.00 ms on a formula simplification. DAG size of input: 257 DAG size of output: 88
[2020-11-25 08:51:50,921 WARN  L188               SmtUtils]: Spent 187.00 ms on a formula simplification. DAG size of input: 201 DAG size of output: 93
[2020-11-25 08:51:51,136 WARN  L188               SmtUtils]: Spent 167.00 ms on a formula simplification. DAG size of input: 191 DAG size of output: 89
[2020-11-25 08:51:51,364 WARN  L188               SmtUtils]: Spent 173.00 ms on a formula simplification. DAG size of input: 189 DAG size of output: 88
[2020-11-25 08:51:51,694 WARN  L188               SmtUtils]: Spent 274.00 ms on a formula simplification. DAG size of input: 190 DAG size of output: 89
[2020-11-25 08:51:52,255 WARN  L188               SmtUtils]: Spent 387.00 ms on a formula simplification. DAG size of input: 408 DAG size of output: 80
[2020-11-25 08:51:53,356 WARN  L188               SmtUtils]: Spent 433.00 ms on a formula simplification. DAG size of input: 409 DAG size of output: 71
[2020-11-25 08:51:54,130 WARN  L188               SmtUtils]: Spent 224.00 ms on a formula simplification. DAG size of input: 375 DAG size of output: 47
[2020-11-25 08:51:54,990 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 08:51:54,994 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 08:51:55,071 WARN  L188               SmtUtils]: Spent 142.00 ms on a formula simplification. DAG size of input: 157 DAG size of output: 80
[2020-11-25 08:51:55,640 WARN  L188               SmtUtils]: Spent 167.00 ms on a formula simplification. DAG size of input: 315 DAG size of output: 47
[2020-11-25 08:51:56,745 INFO  L134       CoverageAnalysis]: Checked inductivity of 44 backedges. 0 proven. 10 refuted. 0 times theorem prover too weak. 34 trivial. 0 not checked.
[2020-11-25 08:51:56,745 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:51:56,745 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [43] total 43
[2020-11-25 08:51:56,747 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:51:56,747 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 44 interpolants.
[2020-11-25 08:51:56,747 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=126, Invalid=1766, Unknown=0, NotChecked=0, Total=1892
[2020-11-25 08:51:56,747 INFO  L87              Difference]: Start difference. First operand 886 states and 982 transitions. cyclomatic complexity: 102 Second operand 44 states.
[2020-11-25 08:51:58,180 WARN  L188               SmtUtils]: Spent 129.00 ms on a formula simplification. DAG size of input: 175 DAG size of output: 48
[2020-11-25 08:51:58,745 WARN  L188               SmtUtils]: Spent 141.00 ms on a formula simplification. DAG size of input: 178 DAG size of output: 53
[2020-11-25 08:51:59,199 WARN  L188               SmtUtils]: Spent 197.00 ms on a formula simplification. DAG size of input: 184 DAG size of output: 53
[2020-11-25 08:52:00,037 WARN  L188               SmtUtils]: Spent 157.00 ms on a formula simplification. DAG size of input: 173 DAG size of output: 62
[2020-11-25 08:52:00,594 WARN  L188               SmtUtils]: Spent 270.00 ms on a formula simplification. DAG size of input: 184 DAG size of output: 87
[2020-11-25 08:52:01,572 WARN  L188               SmtUtils]: Spent 125.00 ms on a formula simplification. DAG size of input: 168 DAG size of output: 88
[2020-11-25 08:52:01,817 WARN  L188               SmtUtils]: Spent 107.00 ms on a formula simplification. DAG size of input: 123 DAG size of output: 97
[2020-11-25 08:52:02,114 WARN  L188               SmtUtils]: Spent 128.00 ms on a formula simplification. DAG size of input: 136 DAG size of output: 114
[2020-11-25 08:52:02,480 WARN  L188               SmtUtils]: Spent 176.00 ms on a formula simplification. DAG size of input: 188 DAG size of output: 97
[2020-11-25 08:52:03,084 WARN  L188               SmtUtils]: Spent 119.00 ms on a formula simplification. DAG size of input: 139 DAG size of output: 116
[2020-11-25 08:52:06,791 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:52:06,791 INFO  L93              Difference]: Finished difference Result 1044 states and 1187 transitions.
[2020-11-25 08:52:06,791 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 41 states. 
[2020-11-25 08:52:06,791 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1044 states and 1187 transitions.
[2020-11-25 08:52:06,793 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 08:52:06,796 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1044 states to 1044 states and 1187 transitions.
[2020-11-25 08:52:06,796 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 580
[2020-11-25 08:52:06,796 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 580
[2020-11-25 08:52:06,796 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1044 states and 1187 transitions.
[2020-11-25 08:52:06,797 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:52:06,797 INFO  L728         BuchiCegarLoop]: Abstraction has 1044 states and 1187 transitions.
[2020-11-25 08:52:06,798 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1044 states and 1187 transitions.
[2020-11-25 08:52:06,803 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1044 to 992.
[2020-11-25 08:52:06,803 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 992 states.
[2020-11-25 08:52:06,804 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 992 states to 992 states and 1130 transitions.
[2020-11-25 08:52:06,804 INFO  L751         BuchiCegarLoop]: Abstraction has 992 states and 1130 transitions.
[2020-11-25 08:52:06,804 INFO  L631         BuchiCegarLoop]: Abstraction has 992 states and 1130 transitions.
[2020-11-25 08:52:06,804 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 08:52:06,804 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 992 states and 1130 transitions.
[2020-11-25 08:52:06,805 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 08:52:06,805 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:52:06,805 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:52:06,806 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:52:06,806 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_WXB0 := false;
[L3]                 call_transferFrom_WXB0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L1760]              assume null == 0;
[L1761]  CALL        call this := FreshRefGenerator__success();
[L882]               havoc newRef;
[L883]               assume Alloc[newRef] == false;
[L884]               Alloc[newRef] := true;
[L885]               assume newRef != null;
[L1761]  RET         call this := FreshRefGenerator__success();
[L1762]              assume now >= 0;
[L1763]              assume DType[this] == WXB;
[L1764]              assume msgvalue_MSG == 0;
[L1765]              gas := gas - 53000;
[L1766]  CALL        call WXB_WXB(this, msgsender_MSG, msgvalue_MSG);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call WXB_WXB__success(this, msgsender_MSG, msgvalue_MSG);
[L986]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L914]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L899]               assume msgsender_MSG != null;
[L900]               Balance[this] := 0;
[L914]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L915]   COND FALSE  !(revert)
[L986]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L987]   COND FALSE  !(revert)
[L990]   CALL        call WXB_WXB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L949]               assume msgsender_MSG != null;
[L950]               Balance[this] := 0;
[L951]               totalSupply_WXB[this] := 0;
[L952]               decimals_WXB[this] := 0;
[L953]               symbol_WXB[this] := 1199276259;
[L954]               name_WXB[this] := 1199276259;
[L955]               approach_WXB[this] := zeroRefRefintArr();
[L956]               sum_approach0[this] := 0;
[L957]               holders_WXB[this] := zeroRefintArr();
[L958]               sum_holders1[this] := 0;
[L960]               name_WXB[this] := -1225396598;
[L961]               symbol_WXB[this] := 397088534;
[L962]               decimals_WXB[this] := 18;
[L963]               __var_1 := decimals_WXB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L964]               totalSupply_WXB[this] := nonlinearMul(100000 * 10000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936 * 100, nonlinearPow(10, decimals_WXB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L965]               sum_holders1[this] := sum_holders1[this] - holders_WXB[this][msgsender_MSG];
[L966]               holders_WXB[this][msgsender_MSG] := totalSupply_WXB[this];
[L967]               sum_holders1[this] := sum_holders1[this] + holders_WXB[this][msgsender_MSG];
[L990]   RET         call WXB_WXB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L991]   COND FALSE  !(revert)
[L167]   RET         call WXB_WXB__success(this, msgsender_MSG, msgvalue_MSG);
[L168]               assume !revert && gas >= 0;
[L1766]  RET         call WXB_WXB(this, msgsender_MSG, msgvalue_MSG);
[L1767]              assume !revert && gas >= 0;
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND FALSE  !(choice == 9)
[L1702]  COND FALSE  !(choice == 8)
[L1709]  COND FALSE  !(choice == 7)
[L1715]  COND FALSE  !(choice == 6)
[L1721]  COND TRUE   choice == 5
[L1722]              gas := gas - 21000;
[L1723]  COND TRUE   gas >= 0
[L1724]              assume _val_s352 >= 0 && _val_s352 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1725]              assume msgvalue_MSG == 0;
[L1726]  CALL        call __ret_0_approve := approve~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _spender_s352, _val_s352);
[L354]               havoc __exception;
[L355]               revert := false;
[L356]   COND FALSE  !(__exception)
[L377]   CALL        call __ret_0_ := approve~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _spender_s352, _val_s352);
[L1128]  COND FALSE  !(!(holders_WXB[this][msgsender_MSG] >= _val_s352))
[L1132]              sum_approach0[msgsender_MSG] := sum_approach0[msgsender_MSG] - approach_WXB[this][msgsender_MSG][_spender_s352];
[L1133]              approach_WXB[this][msgsender_MSG][_spender_s352] := _val_s352;
[L1134]              sum_approach0[msgsender_MSG] := sum_approach0[msgsender_MSG] + approach_WXB[this][msgsender_MSG][_spender_s352];
[L1135]              assert { :EventEmitted "Approval_WXB" } true;
[L1136]              __ret_0_ := true;
[L377]   RET         call __ret_0_ := approve~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _spender_s352, _val_s352);
[L378]               assume !revert && gas >= 0;
[L1726]  RET         call __ret_0_approve := approve~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _spender_s352, _val_s352);
[L1770]  RET         call CorralChoice_WXB(this);
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND FALSE  !(choice == 9)
[L1702]  COND FALSE  !(choice == 8)
[L1709]  COND FALSE  !(choice == 7)
[L1715]  COND FALSE  !(choice == 6)
[L1721]  COND TRUE   choice == 5
[L1722]              gas := gas - 21000;
[L1723]  COND TRUE   gas >= 0
[L1724]              assume _val_s352 >= 0 && _val_s352 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1725]              assume msgvalue_MSG == 0;
[L1726]  CALL        call __ret_0_approve := approve~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _spender_s352, _val_s352);
[L354]               havoc __exception;
[L355]               revert := false;
[L356]   COND FALSE  !(__exception)
[L377]   CALL        call __ret_0_ := approve~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _spender_s352, _val_s352);
[L1128]  COND FALSE  !(!(holders_WXB[this][msgsender_MSG] >= _val_s352))
[L1132]              sum_approach0[msgsender_MSG] := sum_approach0[msgsender_MSG] - approach_WXB[this][msgsender_MSG][_spender_s352];
[L1133]              approach_WXB[this][msgsender_MSG][_spender_s352] := _val_s352;
[L1134]              sum_approach0[msgsender_MSG] := sum_approach0[msgsender_MSG] + approach_WXB[this][msgsender_MSG][_spender_s352];
[L1135]              assert { :EventEmitted "Approval_WXB" } true;
[L1136]              __ret_0_ := true;
[L377]   RET         call __ret_0_ := approve~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _spender_s352, _val_s352);
[L378]               assume !revert && gas >= 0;
[L1726]  RET         call __ret_0_approve := approve~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _spender_s352, _val_s352);
[L1770]  RET         call CorralChoice_WXB(this);
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != _from_s315 || p2 != msgsender_MSG) && _from_s315 == _to_s315) && _val_s315 <= holders_WXB[this][_from_s315]) && _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG]) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_to_s315] >= 0) && holders_WXB[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_from_s315] >= 0) && holders_WXB[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_WXB[this][_from_s315][msgsender_MSG] >= 0) && approach_WXB[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_WXB0 := true;
[L3]                 call_transferFrom_WXB0 := false;
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L325]   CALL        call __ret_0_ := transferFrom~address~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1088]  COND FALSE  !(!(holders_WXB[this][_from_s315] >= _val_s315))
[L1092]  COND FALSE  !(!(approach_WXB[this][_from_s315][msgsender_MSG] >= _val_s315))
[L1096]              assert _val_s315 <= holders_WXB[this][_from_s315];
[L1097]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][_from_s315];
[L1098]              holders_WXB[this][_from_s315] := (holders_WXB[this][_from_s315] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1099]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][_from_s315];
[L1100]              assert _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG];
[L1101]              sum_approach0[_from_s315] := sum_approach0[_from_s315] - approach_WXB[this][_from_s315][msgsender_MSG];
[L1102]              approach_WXB[this][_from_s315][msgsender_MSG] := (approach_WXB[this][_from_s315][msgsender_MSG] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1103]              sum_approach0[_from_s315] := sum_approach0[_from_s315] + approach_WXB[this][_from_s315][msgsender_MSG];
[L1104]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][_to_s315];
[L1105]              holders_WXB[this][_to_s315] := (holders_WXB[this][_to_s315] + _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1106]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][_to_s315];
[L1107]              assert holders_WXB[this][_to_s315] >= _val_s315;
[L1108]              assert { :EventEmitted "Transfer_WXB" } true;
[L1109]              __ret_0_ := true;
[L325]   RET         call __ret_0_ := transferFrom~address~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L326]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((__ret_0_ == true && approach_WXB[this][_from_s315][msgsender_MSG] == old(approach_WXB[this][_from_s315][msgsender_MSG]) - _val_s315) && totalSupply_WXB[this] == old(totalSupply_WXB[this])) && holders_WXB[this] == old(holders_WXB[this])) && approach_WXB[this][p1][p2] == old(approach_WXB[this][p1][p2])) && decimals_WXB[this] == old(decimals_WXB[this])) && symbol_WXB[this] == old(symbol_WXB[this])) && name_WXB[this] == old(name_WXB[this]));
[L3]                 revert := revert_hold;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_WXB(this);

Loop:
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((p1 != _from_s315 || p2 != msgsender_MSG) && _from_s315 == _to_s315) && _val_s315 <= holders_WXB[this][_from_s315]) && _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG]) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_to_s315] >= 0) && holders_WXB[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_from_s315] >= 0) && holders_WXB[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_WXB[this][_from_s315][msgsender_MSG] >= 0) && approach_WXB[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L325]   CALL        call __ret_0_ := transferFrom~address~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1088]  COND FALSE  !(!(holders_WXB[this][_from_s315] >= _val_s315))
[L1092]  COND FALSE  !(!(approach_WXB[this][_from_s315][msgsender_MSG] >= _val_s315))
[L1096]              assert _val_s315 <= holders_WXB[this][_from_s315];
[L1097]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][_from_s315];
[L1098]              holders_WXB[this][_from_s315] := (holders_WXB[this][_from_s315] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1099]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][_from_s315];
[L1100]              assert _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG];
[L1101]              sum_approach0[_from_s315] := sum_approach0[_from_s315] - approach_WXB[this][_from_s315][msgsender_MSG];
[L1102]              approach_WXB[this][_from_s315][msgsender_MSG] := (approach_WXB[this][_from_s315][msgsender_MSG] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1103]              sum_approach0[_from_s315] := sum_approach0[_from_s315] + approach_WXB[this][_from_s315][msgsender_MSG];
[L1104]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][_to_s315];
[L1105]              holders_WXB[this][_to_s315] := (holders_WXB[this][_to_s315] + _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1106]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][_to_s315];
[L1107]              assert holders_WXB[this][_to_s315] >= _val_s315;
[L1108]              assert { :EventEmitted "Transfer_WXB" } true;
[L1109]              __ret_0_ := true;
[L325]   RET         call __ret_0_ := transferFrom~address~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L326]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((__ret_0_ == true && approach_WXB[this][_from_s315][msgsender_MSG] == old(approach_WXB[this][_from_s315][msgsender_MSG]) - _val_s315) && totalSupply_WXB[this] == old(totalSupply_WXB[this])) && holders_WXB[this] == old(holders_WXB[this])) && approach_WXB[this][p1][p2] == old(approach_WXB[this][p1][p2])) && decimals_WXB[this] == old(decimals_WXB[this])) && symbol_WXB[this] == old(symbol_WXB[this])) && name_WXB[this] == old(name_WXB[this]));
[L3]                 revert := revert_hold;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_WXB(this);

[2020-11-25 08:52:06,809 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:52:06,809 INFO  L82        PathProgramCache]: Analyzing trace with hash -1873888238, now seen corresponding path program 2 times
[2020-11-25 08:52:06,809 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:52:06,870 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:52:07,298 INFO  L134       CoverageAnalysis]: Checked inductivity of 136 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 136 trivial. 0 not checked.
[2020-11-25 08:52:07,298 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:52:07,298 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [21] imperfect sequences [] total 21
[2020-11-25 08:52:07,298 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:52:07,298 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 22 interpolants.
[2020-11-25 08:52:07,298 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=55, Invalid=407, Unknown=0, NotChecked=0, Total=462
[2020-11-25 08:52:07,298 INFO  L87              Difference]: Start difference. First operand 992 states and 1130 transitions. cyclomatic complexity: 147 Second operand 22 states.
[2020-11-25 08:52:08,943 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:52:08,943 INFO  L93              Difference]: Finished difference Result 1018 states and 1170 transitions.
[2020-11-25 08:52:08,943 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 20 states. 
[2020-11-25 08:52:08,943 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1018 states and 1170 transitions.
[2020-11-25 08:52:08,945 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 08:52:08,947 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1018 states to 1018 states and 1170 transitions.
[2020-11-25 08:52:08,948 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 565
[2020-11-25 08:52:08,948 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 565
[2020-11-25 08:52:08,948 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1018 states and 1170 transitions.
[2020-11-25 08:52:08,949 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:52:08,949 INFO  L728         BuchiCegarLoop]: Abstraction has 1018 states and 1170 transitions.
[2020-11-25 08:52:08,949 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1018 states and 1170 transitions.
[2020-11-25 08:52:08,954 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1018 to 996.
[2020-11-25 08:52:08,954 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 996 states.
[2020-11-25 08:52:08,955 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 996 states to 996 states and 1143 transitions.
[2020-11-25 08:52:08,955 INFO  L751         BuchiCegarLoop]: Abstraction has 996 states and 1143 transitions.
[2020-11-25 08:52:08,955 INFO  L631         BuchiCegarLoop]: Abstraction has 996 states and 1143 transitions.
[2020-11-25 08:52:08,955 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 08:52:08,955 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 996 states and 1143 transitions.
[2020-11-25 08:52:08,956 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 08:52:08,956 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:52:08,956 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:52:08,958 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:52:08,958 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_WXB0 := false;
[L3]                 call_transferFrom_WXB0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L1760]              assume null == 0;
[L1761]  CALL        call this := FreshRefGenerator__success();
[L882]               havoc newRef;
[L883]               assume Alloc[newRef] == false;
[L884]               Alloc[newRef] := true;
[L885]               assume newRef != null;
[L1761]  RET         call this := FreshRefGenerator__success();
[L1762]              assume now >= 0;
[L1763]              assume DType[this] == WXB;
[L1764]              assume msgvalue_MSG == 0;
[L1765]              gas := gas - 53000;
[L1766]  CALL        call WXB_WXB(this, msgsender_MSG, msgvalue_MSG);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call WXB_WXB__success(this, msgsender_MSG, msgvalue_MSG);
[L986]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L914]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L899]               assume msgsender_MSG != null;
[L900]               Balance[this] := 0;
[L914]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L915]   COND FALSE  !(revert)
[L986]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L987]   COND FALSE  !(revert)
[L990]   CALL        call WXB_WXB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L949]               assume msgsender_MSG != null;
[L950]               Balance[this] := 0;
[L951]               totalSupply_WXB[this] := 0;
[L952]               decimals_WXB[this] := 0;
[L953]               symbol_WXB[this] := 1199276259;
[L954]               name_WXB[this] := 1199276259;
[L955]               approach_WXB[this] := zeroRefRefintArr();
[L956]               sum_approach0[this] := 0;
[L957]               holders_WXB[this] := zeroRefintArr();
[L958]               sum_holders1[this] := 0;
[L960]               name_WXB[this] := -1225396598;
[L961]               symbol_WXB[this] := 397088534;
[L962]               decimals_WXB[this] := 18;
[L963]               __var_1 := decimals_WXB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L964]               totalSupply_WXB[this] := nonlinearMul(100000 * 10000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936 * 100, nonlinearPow(10, decimals_WXB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L965]               sum_holders1[this] := sum_holders1[this] - holders_WXB[this][msgsender_MSG];
[L966]               holders_WXB[this][msgsender_MSG] := totalSupply_WXB[this];
[L967]               sum_holders1[this] := sum_holders1[this] + holders_WXB[this][msgsender_MSG];
[L990]   RET         call WXB_WXB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L991]   COND FALSE  !(revert)
[L167]   RET         call WXB_WXB__success(this, msgsender_MSG, msgvalue_MSG);
[L168]               assume !revert && gas >= 0;
[L1766]  RET         call WXB_WXB(this, msgsender_MSG, msgvalue_MSG);
[L1767]              assume !revert && gas >= 0;
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND FALSE  !(choice == 9)
[L1702]  COND FALSE  !(choice == 8)
[L1709]  COND FALSE  !(choice == 7)
[L1715]  COND FALSE  !(choice == 6)
[L1721]  COND TRUE   choice == 5
[L1722]              gas := gas - 21000;
[L1723]  COND TRUE   gas >= 0
[L1724]              assume _val_s352 >= 0 && _val_s352 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1725]              assume msgvalue_MSG == 0;
[L1726]  CALL        call __ret_0_approve := approve~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _spender_s352, _val_s352);
[L354]               havoc __exception;
[L355]               revert := false;
[L356]   COND FALSE  !(__exception)
[L377]   CALL        call __ret_0_ := approve~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _spender_s352, _val_s352);
[L1128]  COND FALSE  !(!(holders_WXB[this][msgsender_MSG] >= _val_s352))
[L1132]              sum_approach0[msgsender_MSG] := sum_approach0[msgsender_MSG] - approach_WXB[this][msgsender_MSG][_spender_s352];
[L1133]              approach_WXB[this][msgsender_MSG][_spender_s352] := _val_s352;
[L1134]              sum_approach0[msgsender_MSG] := sum_approach0[msgsender_MSG] + approach_WXB[this][msgsender_MSG][_spender_s352];
[L1135]              assert { :EventEmitted "Approval_WXB" } true;
[L1136]              __ret_0_ := true;
[L377]   RET         call __ret_0_ := approve~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _spender_s352, _val_s352);
[L378]               assume !revert && gas >= 0;
[L1726]  RET         call __ret_0_approve := approve~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _spender_s352, _val_s352);
[L1770]  RET         call CorralChoice_WXB(this);
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND FALSE  !(choice == 9)
[L1702]  COND TRUE   choice == 8
[L1703]              gas := gas - 21000;
[L1704]  COND TRUE   gas >= 0
[L1705]              assume _val_s213 >= 0 && _val_s213 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1706]              assume msgvalue_MSG == 0;
[L1707]  CALL        call __ret_0_transfer := transfer~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _to_s213, _val_s213);
[L248]               havoc __exception;
[L249]               revert := false;
[L250]   COND FALSE  !(__exception)
[L271]   CALL        call __ret_0_ := transfer~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _to_s213, _val_s213);
[L1042]  COND FALSE  !(!(holders_WXB[this][msgsender_MSG] >= _val_s213))
[L1046]  COND FALSE  !(!(msgsender_MSG != _to_s213))
[L1050]              assert _val_s213 <= holders_WXB[this][msgsender_MSG];
[L1051]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][msgsender_MSG];
[L1052]              holders_WXB[this][msgsender_MSG] := (holders_WXB[this][msgsender_MSG] - _val_s213) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1053]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][msgsender_MSG];
[L1054]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][_to_s213];
[L1055]              holders_WXB[this][_to_s213] := (holders_WXB[this][_to_s213] + _val_s213) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1056]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][_to_s213];
[L1057]              assert holders_WXB[this][_to_s213] >= _val_s213;
[L1058]              assert { :EventEmitted "Transfer_WXB" } true;
[L1059]              __ret_0_ := true;
[L271]   RET         call __ret_0_ := transfer~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _to_s213, _val_s213);
[L272]               assume !revert && gas >= 0;
[L1707]  RET         call __ret_0_transfer := transfer~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _to_s213, _val_s213);
[L1770]  RET         call CorralChoice_WXB(this);
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != _from_s315 || p2 != msgsender_MSG) && _from_s315 == _to_s315) && _val_s315 <= holders_WXB[this][_from_s315]) && _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG]) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_to_s315] >= 0) && holders_WXB[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_from_s315] >= 0) && holders_WXB[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_WXB[this][_from_s315][msgsender_MSG] >= 0) && approach_WXB[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_WXB0 := true;
[L3]                 call_transferFrom_WXB0 := false;
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L325]   CALL        call __ret_0_ := transferFrom~address~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1088]  COND FALSE  !(!(holders_WXB[this][_from_s315] >= _val_s315))
[L1092]  COND FALSE  !(!(approach_WXB[this][_from_s315][msgsender_MSG] >= _val_s315))
[L1096]              assert _val_s315 <= holders_WXB[this][_from_s315];
[L1097]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][_from_s315];
[L1098]              holders_WXB[this][_from_s315] := (holders_WXB[this][_from_s315] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1099]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][_from_s315];
[L1100]              assert _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG];
[L1101]              sum_approach0[_from_s315] := sum_approach0[_from_s315] - approach_WXB[this][_from_s315][msgsender_MSG];
[L1102]              approach_WXB[this][_from_s315][msgsender_MSG] := (approach_WXB[this][_from_s315][msgsender_MSG] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1103]              sum_approach0[_from_s315] := sum_approach0[_from_s315] + approach_WXB[this][_from_s315][msgsender_MSG];
[L1104]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][_to_s315];
[L1105]              holders_WXB[this][_to_s315] := (holders_WXB[this][_to_s315] + _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1106]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][_to_s315];
[L1107]              assert holders_WXB[this][_to_s315] >= _val_s315;
[L1108]              assert { :EventEmitted "Transfer_WXB" } true;
[L1109]              __ret_0_ := true;
[L325]   RET         call __ret_0_ := transferFrom~address~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L326]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((__ret_0_ == true && approach_WXB[this][_from_s315][msgsender_MSG] == old(approach_WXB[this][_from_s315][msgsender_MSG]) - _val_s315) && totalSupply_WXB[this] == old(totalSupply_WXB[this])) && holders_WXB[this] == old(holders_WXB[this])) && approach_WXB[this][p1][p2] == old(approach_WXB[this][p1][p2])) && decimals_WXB[this] == old(decimals_WXB[this])) && symbol_WXB[this] == old(symbol_WXB[this])) && name_WXB[this] == old(name_WXB[this]));
[L3]                 revert := revert_hold;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_WXB(this);

Loop:
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((p1 != _from_s315 || p2 != msgsender_MSG) && _from_s315 == _to_s315) && _val_s315 <= holders_WXB[this][_from_s315]) && _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG]) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_to_s315] >= 0) && holders_WXB[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_from_s315] >= 0) && holders_WXB[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_WXB[this][_from_s315][msgsender_MSG] >= 0) && approach_WXB[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L325]   CALL        call __ret_0_ := transferFrom~address~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1088]  COND FALSE  !(!(holders_WXB[this][_from_s315] >= _val_s315))
[L1092]  COND FALSE  !(!(approach_WXB[this][_from_s315][msgsender_MSG] >= _val_s315))
[L1096]              assert _val_s315 <= holders_WXB[this][_from_s315];
[L1097]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][_from_s315];
[L1098]              holders_WXB[this][_from_s315] := (holders_WXB[this][_from_s315] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1099]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][_from_s315];
[L1100]              assert _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG];
[L1101]              sum_approach0[_from_s315] := sum_approach0[_from_s315] - approach_WXB[this][_from_s315][msgsender_MSG];
[L1102]              approach_WXB[this][_from_s315][msgsender_MSG] := (approach_WXB[this][_from_s315][msgsender_MSG] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1103]              sum_approach0[_from_s315] := sum_approach0[_from_s315] + approach_WXB[this][_from_s315][msgsender_MSG];
[L1104]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][_to_s315];
[L1105]              holders_WXB[this][_to_s315] := (holders_WXB[this][_to_s315] + _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1106]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][_to_s315];
[L1107]              assert holders_WXB[this][_to_s315] >= _val_s315;
[L1108]              assert { :EventEmitted "Transfer_WXB" } true;
[L1109]              __ret_0_ := true;
[L325]   RET         call __ret_0_ := transferFrom~address~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L326]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((__ret_0_ == true && approach_WXB[this][_from_s315][msgsender_MSG] == old(approach_WXB[this][_from_s315][msgsender_MSG]) - _val_s315) && totalSupply_WXB[this] == old(totalSupply_WXB[this])) && holders_WXB[this] == old(holders_WXB[this])) && approach_WXB[this][p1][p2] == old(approach_WXB[this][p1][p2])) && decimals_WXB[this] == old(decimals_WXB[this])) && symbol_WXB[this] == old(symbol_WXB[this])) && name_WXB[this] == old(name_WXB[this]));
[L3]                 revert := revert_hold;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_WXB(this);

[2020-11-25 08:52:08,961 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:52:08,961 INFO  L82        PathProgramCache]: Analyzing trace with hash -2006642181, now seen corresponding path program 1 times
[2020-11-25 08:52:08,961 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:52:09,070 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:52:09,388 INFO  L134       CoverageAnalysis]: Checked inductivity of 109 backedges. 70 proven. 2 refuted. 0 times theorem prover too weak. 37 trivial. 0 not checked.
[2020-11-25 08:52:09,388 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:52:09,388 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [25] total 25
[2020-11-25 08:52:09,388 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:52:09,388 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 26 interpolants.
[2020-11-25 08:52:09,389 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=89, Invalid=561, Unknown=0, NotChecked=0, Total=650
[2020-11-25 08:52:09,389 INFO  L87              Difference]: Start difference. First operand 996 states and 1143 transitions. cyclomatic complexity: 157 Second operand 26 states.
[2020-11-25 08:52:10,877 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:52:10,877 INFO  L93              Difference]: Finished difference Result 1139 states and 1347 transitions.
[2020-11-25 08:52:10,877 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 28 states. 
[2020-11-25 08:52:10,877 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1139 states and 1347 transitions.
[2020-11-25 08:52:10,880 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 08:52:10,882 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1139 states to 1139 states and 1347 transitions.
[2020-11-25 08:52:10,882 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 676
[2020-11-25 08:52:10,883 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 676
[2020-11-25 08:52:10,883 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1139 states and 1347 transitions.
[2020-11-25 08:52:10,884 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:52:10,884 INFO  L728         BuchiCegarLoop]: Abstraction has 1139 states and 1347 transitions.
[2020-11-25 08:52:10,884 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1139 states and 1347 transitions.
[2020-11-25 08:52:10,890 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1139 to 1000.
[2020-11-25 08:52:10,890 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1000 states.
[2020-11-25 08:52:10,891 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1000 states to 1000 states and 1155 transitions.
[2020-11-25 08:52:10,891 INFO  L751         BuchiCegarLoop]: Abstraction has 1000 states and 1155 transitions.
[2020-11-25 08:52:10,891 INFO  L631         BuchiCegarLoop]: Abstraction has 1000 states and 1155 transitions.
[2020-11-25 08:52:10,891 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 08:52:10,891 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1000 states and 1155 transitions.
[2020-11-25 08:52:10,892 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 08:52:10,892 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:52:10,892 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:52:10,893 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:52:10,893 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_WXB0 := false;
[L3]                 call_transferFrom_WXB0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L1760]              assume null == 0;
[L1761]  CALL        call this := FreshRefGenerator__success();
[L882]               havoc newRef;
[L883]               assume Alloc[newRef] == false;
[L884]               Alloc[newRef] := true;
[L885]               assume newRef != null;
[L1761]  RET         call this := FreshRefGenerator__success();
[L1762]              assume now >= 0;
[L1763]              assume DType[this] == WXB;
[L1764]              assume msgvalue_MSG == 0;
[L1765]              gas := gas - 53000;
[L1766]  CALL        call WXB_WXB(this, msgsender_MSG, msgvalue_MSG);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call WXB_WXB__success(this, msgsender_MSG, msgvalue_MSG);
[L986]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L914]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L899]               assume msgsender_MSG != null;
[L900]               Balance[this] := 0;
[L914]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L915]   COND FALSE  !(revert)
[L986]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L987]   COND FALSE  !(revert)
[L990]   CALL        call WXB_WXB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L949]               assume msgsender_MSG != null;
[L950]               Balance[this] := 0;
[L951]               totalSupply_WXB[this] := 0;
[L952]               decimals_WXB[this] := 0;
[L953]               symbol_WXB[this] := 1199276259;
[L954]               name_WXB[this] := 1199276259;
[L955]               approach_WXB[this] := zeroRefRefintArr();
[L956]               sum_approach0[this] := 0;
[L957]               holders_WXB[this] := zeroRefintArr();
[L958]               sum_holders1[this] := 0;
[L960]               name_WXB[this] := -1225396598;
[L961]               symbol_WXB[this] := 397088534;
[L962]               decimals_WXB[this] := 18;
[L963]               __var_1 := decimals_WXB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L964]               totalSupply_WXB[this] := nonlinearMul(100000 * 10000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936 * 100, nonlinearPow(10, decimals_WXB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L965]               sum_holders1[this] := sum_holders1[this] - holders_WXB[this][msgsender_MSG];
[L966]               holders_WXB[this][msgsender_MSG] := totalSupply_WXB[this];
[L967]               sum_holders1[this] := sum_holders1[this] + holders_WXB[this][msgsender_MSG];
[L990]   RET         call WXB_WXB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L991]   COND FALSE  !(revert)
[L167]   RET         call WXB_WXB__success(this, msgsender_MSG, msgvalue_MSG);
[L168]               assume !revert && gas >= 0;
[L1766]  RET         call WXB_WXB(this, msgsender_MSG, msgvalue_MSG);
[L1767]              assume !revert && gas >= 0;
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((p1 != _from_s315 || p2 != msgsender_MSG) && _from_s315 == _to_s315) && _val_s315 <= holders_WXB[this][_from_s315]) && _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG]) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_to_s315] >= 0) && holders_WXB[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_from_s315] >= 0) && holders_WXB[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_WXB[this][_from_s315][msgsender_MSG] >= 0) && approach_WXB[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L325]   CALL        call __ret_0_ := transferFrom~address~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1088]  COND FALSE  !(!(holders_WXB[this][_from_s315] >= _val_s315))
[L1092]  COND FALSE  !(!(approach_WXB[this][_from_s315][msgsender_MSG] >= _val_s315))
[L1096]              assert _val_s315 <= holders_WXB[this][_from_s315];
[L1097]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][_from_s315];
[L1098]              holders_WXB[this][_from_s315] := (holders_WXB[this][_from_s315] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1099]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][_from_s315];
[L1100]              assert _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG];
[L1101]              sum_approach0[_from_s315] := sum_approach0[_from_s315] - approach_WXB[this][_from_s315][msgsender_MSG];
[L1102]              approach_WXB[this][_from_s315][msgsender_MSG] := (approach_WXB[this][_from_s315][msgsender_MSG] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1103]              sum_approach0[_from_s315] := sum_approach0[_from_s315] + approach_WXB[this][_from_s315][msgsender_MSG];
[L1104]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][_to_s315];
[L1105]              holders_WXB[this][_to_s315] := (holders_WXB[this][_to_s315] + _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1106]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][_to_s315];
[L1107]              assert holders_WXB[this][_to_s315] >= _val_s315;
[L1108]              assert { :EventEmitted "Transfer_WXB" } true;
[L1109]              __ret_0_ := true;
[L325]   RET         call __ret_0_ := transferFrom~address~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L326]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((__ret_0_ == true && approach_WXB[this][_from_s315][msgsender_MSG] == old(approach_WXB[this][_from_s315][msgsender_MSG]) - _val_s315) && totalSupply_WXB[this] == old(totalSupply_WXB[this])) && holders_WXB[this] == old(holders_WXB[this])) && approach_WXB[this][p1][p2] == old(approach_WXB[this][p1][p2])) && decimals_WXB[this] == old(decimals_WXB[this])) && symbol_WXB[this] == old(symbol_WXB[this])) && name_WXB[this] == old(name_WXB[this]));
[L3]                 revert := revert_hold;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_WXB(this);
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((p1 != _from_s315 || p2 != msgsender_MSG) && _from_s315 == _to_s315) && _val_s315 <= holders_WXB[this][_from_s315]) && _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG]) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_to_s315] >= 0) && holders_WXB[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_from_s315] >= 0) && holders_WXB[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_WXB[this][_from_s315][msgsender_MSG] >= 0) && approach_WXB[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L325]   CALL        call __ret_0_ := transferFrom~address~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1088]  COND FALSE  !(!(holders_WXB[this][_from_s315] >= _val_s315))
[L1092]  COND FALSE  !(!(approach_WXB[this][_from_s315][msgsender_MSG] >= _val_s315))
[L1096]              assert _val_s315 <= holders_WXB[this][_from_s315];
[L1097]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][_from_s315];
[L1098]              holders_WXB[this][_from_s315] := (holders_WXB[this][_from_s315] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1099]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][_from_s315];
[L1100]              assert _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG];
[L1101]              sum_approach0[_from_s315] := sum_approach0[_from_s315] - approach_WXB[this][_from_s315][msgsender_MSG];
[L1102]              approach_WXB[this][_from_s315][msgsender_MSG] := (approach_WXB[this][_from_s315][msgsender_MSG] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1103]              sum_approach0[_from_s315] := sum_approach0[_from_s315] + approach_WXB[this][_from_s315][msgsender_MSG];
[L1104]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][_to_s315];
[L1105]              holders_WXB[this][_to_s315] := (holders_WXB[this][_to_s315] + _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1106]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][_to_s315];
[L1107]              assert holders_WXB[this][_to_s315] >= _val_s315;
[L1108]              assert { :EventEmitted "Transfer_WXB" } true;
[L1109]              __ret_0_ := true;
[L325]   RET         call __ret_0_ := transferFrom~address~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L326]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((__ret_0_ == true && approach_WXB[this][_from_s315][msgsender_MSG] == old(approach_WXB[this][_from_s315][msgsender_MSG]) - _val_s315) && totalSupply_WXB[this] == old(totalSupply_WXB[this])) && holders_WXB[this] == old(holders_WXB[this])) && approach_WXB[this][p1][p2] == old(approach_WXB[this][p1][p2])) && decimals_WXB[this] == old(decimals_WXB[this])) && symbol_WXB[this] == old(symbol_WXB[this])) && name_WXB[this] == old(name_WXB[this]));
[L3]                 revert := revert_hold;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_WXB(this);
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != _from_s315 || p2 != msgsender_MSG) && _from_s315 == _to_s315) && _val_s315 <= holders_WXB[this][_from_s315]) && _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG]) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_to_s315] >= 0) && holders_WXB[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_from_s315] >= 0) && holders_WXB[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_WXB[this][_from_s315][msgsender_MSG] >= 0) && approach_WXB[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_WXB0 := true;
[L3]                 call_transferFrom_WXB0 := false;
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L325]   CALL        call __ret_0_ := transferFrom~address~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1088]  COND FALSE  !(!(holders_WXB[this][_from_s315] >= _val_s315))
[L1092]  COND FALSE  !(!(approach_WXB[this][_from_s315][msgsender_MSG] >= _val_s315))
[L1096]              assert _val_s315 <= holders_WXB[this][_from_s315];
[L1097]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][_from_s315];
[L1098]              holders_WXB[this][_from_s315] := (holders_WXB[this][_from_s315] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1099]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][_from_s315];
[L1100]              assert _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG];
[L1101]              sum_approach0[_from_s315] := sum_approach0[_from_s315] - approach_WXB[this][_from_s315][msgsender_MSG];
[L1102]              approach_WXB[this][_from_s315][msgsender_MSG] := (approach_WXB[this][_from_s315][msgsender_MSG] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1103]              sum_approach0[_from_s315] := sum_approach0[_from_s315] + approach_WXB[this][_from_s315][msgsender_MSG];
[L1104]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][_to_s315];
[L1105]              holders_WXB[this][_to_s315] := (holders_WXB[this][_to_s315] + _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1106]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][_to_s315];
[L1107]              assert holders_WXB[this][_to_s315] >= _val_s315;
[L1108]              assert { :EventEmitted "Transfer_WXB" } true;
[L1109]              __ret_0_ := true;
[L325]   RET         call __ret_0_ := transferFrom~address~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L326]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((__ret_0_ == true && approach_WXB[this][_from_s315][msgsender_MSG] == old(approach_WXB[this][_from_s315][msgsender_MSG]) - _val_s315) && totalSupply_WXB[this] == old(totalSupply_WXB[this])) && holders_WXB[this] == old(holders_WXB[this])) && approach_WXB[this][p1][p2] == old(approach_WXB[this][p1][p2])) && decimals_WXB[this] == old(decimals_WXB[this])) && symbol_WXB[this] == old(symbol_WXB[this])) && name_WXB[this] == old(name_WXB[this]));
[L3]                 revert := revert_hold;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_WXB(this);

Loop:
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND FALSE  !(gas >= 0)
[L1770]  RET         call CorralChoice_WXB(this);

[2020-11-25 08:52:10,896 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:52:10,896 INFO  L82        PathProgramCache]: Analyzing trace with hash -96910720, now seen corresponding path program 2 times
[2020-11-25 08:52:10,896 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:52:11,191 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:52:12,789 WARN  L188               SmtUtils]: Spent 146.00 ms on a formula simplification. DAG size of input: 199 DAG size of output: 67
[2020-11-25 08:52:12,980 WARN  L188               SmtUtils]: Spent 149.00 ms on a formula simplification. DAG size of input: 150 DAG size of output: 81
[2020-11-25 08:52:13,171 WARN  L188               SmtUtils]: Spent 151.00 ms on a formula simplification. DAG size of input: 153 DAG size of output: 82
[2020-11-25 08:52:13,786 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 08:52:14,649 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 08:52:14,972 WARN  L188               SmtUtils]: Spent 1.52 s on a formula simplification. DAG size of input: 636 DAG size of output: 60
[2020-11-25 08:52:17,660 WARN  L188               SmtUtils]: Spent 1.43 s on a formula simplification. DAG size of input: 642 DAG size of output: 54
[2020-11-25 08:52:18,980 WARN  L188               SmtUtils]: Spent 533.00 ms on a formula simplification. DAG size of input: 476 DAG size of output: 51
[2020-11-25 08:52:20,303 WARN  L188               SmtUtils]: Spent 395.00 ms on a formula simplification. DAG size of input: 519 DAG size of output: 36
[2020-11-25 08:52:21,030 WARN  L188               SmtUtils]: Spent 127.00 ms on a formula simplification. DAG size of input: 151 DAG size of output: 75
[2020-11-25 08:52:21,208 WARN  L188               SmtUtils]: Spent 130.00 ms on a formula simplification. DAG size of input: 152 DAG size of output: 76
[2020-11-25 08:52:22,959 WARN  L188               SmtUtils]: Spent 1.19 s on a formula simplification. DAG size of input: 473 DAG size of output: 105
[2020-11-25 08:52:26,112 WARN  L188               SmtUtils]: Spent 1.33 s on a formula simplification. DAG size of input: 459 DAG size of output: 97
[2020-11-25 08:52:28,414 WARN  L188               SmtUtils]: Spent 405.00 ms on a formula simplification. DAG size of input: 622 DAG size of output: 26
[2020-11-25 08:52:30,062 INFO  L134       CoverageAnalysis]: Checked inductivity of 168 backedges. 10 proven. 117 refuted. 0 times theorem prover too weak. 41 trivial. 0 not checked.
[2020-11-25 08:52:30,062 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:52:30,063 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [46] total 46
[2020-11-25 08:52:30,063 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:52:30,063 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 46 interpolants.
[2020-11-25 08:52:30,063 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=177, Invalid=1893, Unknown=0, NotChecked=0, Total=2070
[2020-11-25 08:52:30,063 INFO  L87              Difference]: Start difference. First operand 1000 states and 1155 transitions. cyclomatic complexity: 167 Second operand 46 states.
[2020-11-25 08:52:32,097 WARN  L188               SmtUtils]: Spent 156.00 ms on a formula simplification. DAG size of input: 117 DAG size of output: 90
[2020-11-25 08:52:32,504 WARN  L188               SmtUtils]: Spent 128.00 ms on a formula simplification. DAG size of input: 116 DAG size of output: 91
[2020-11-25 08:52:33,160 WARN  L188               SmtUtils]: Spent 532.00 ms on a formula simplification. DAG size of input: 129 DAG size of output: 121
[2020-11-25 08:52:33,582 WARN  L188               SmtUtils]: Spent 285.00 ms on a formula simplification. DAG size of input: 135 DAG size of output: 120
[2020-11-25 08:52:34,348 WARN  L188               SmtUtils]: Spent 550.00 ms on a formula simplification. DAG size of input: 171 DAG size of output: 120
[2020-11-25 08:52:35,114 WARN  L188               SmtUtils]: Spent 613.00 ms on a formula simplification. DAG size of input: 177 DAG size of output: 122
[2020-11-25 08:52:37,949 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:52:37,950 INFO  L93              Difference]: Finished difference Result 1146 states and 1363 transitions.
[2020-11-25 08:52:37,950 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 36 states. 
[2020-11-25 08:52:37,951 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1146 states and 1363 transitions.
[2020-11-25 08:52:37,953 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 08:52:37,956 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1146 states to 1146 states and 1363 transitions.
[2020-11-25 08:52:37,956 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 675
[2020-11-25 08:52:37,956 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 675
[2020-11-25 08:52:37,956 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1146 states and 1363 transitions.
[2020-11-25 08:52:37,957 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:52:37,957 INFO  L728         BuchiCegarLoop]: Abstraction has 1146 states and 1363 transitions.
[2020-11-25 08:52:37,958 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1146 states and 1363 transitions.
[2020-11-25 08:52:37,964 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1146 to 1107.
[2020-11-25 08:52:37,964 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1107 states.
[2020-11-25 08:52:37,966 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1107 states to 1107 states and 1313 transitions.
[2020-11-25 08:52:37,966 INFO  L751         BuchiCegarLoop]: Abstraction has 1107 states and 1313 transitions.
[2020-11-25 08:52:37,967 INFO  L631         BuchiCegarLoop]: Abstraction has 1107 states and 1313 transitions.
[2020-11-25 08:52:37,967 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 08:52:37,967 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1107 states and 1313 transitions.
[2020-11-25 08:52:37,969 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 08:52:37,969 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:52:37,970 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:52:37,971 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:52:37,971 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_WXB0 := false;
[L3]                 call_transferFrom_WXB0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L1760]              assume null == 0;
[L1761]  CALL        call this := FreshRefGenerator__success();
[L882]               havoc newRef;
[L883]               assume Alloc[newRef] == false;
[L884]               Alloc[newRef] := true;
[L885]               assume newRef != null;
[L1761]  RET         call this := FreshRefGenerator__success();
[L1762]              assume now >= 0;
[L1763]              assume DType[this] == WXB;
[L1764]              assume msgvalue_MSG == 0;
[L1765]              gas := gas - 53000;
[L1766]  CALL        call WXB_WXB(this, msgsender_MSG, msgvalue_MSG);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call WXB_WXB__success(this, msgsender_MSG, msgvalue_MSG);
[L986]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L914]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L899]               assume msgsender_MSG != null;
[L900]               Balance[this] := 0;
[L914]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L915]   COND FALSE  !(revert)
[L986]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L987]   COND FALSE  !(revert)
[L990]   CALL        call WXB_WXB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L949]               assume msgsender_MSG != null;
[L950]               Balance[this] := 0;
[L951]               totalSupply_WXB[this] := 0;
[L952]               decimals_WXB[this] := 0;
[L953]               symbol_WXB[this] := 1199276259;
[L954]               name_WXB[this] := 1199276259;
[L955]               approach_WXB[this] := zeroRefRefintArr();
[L956]               sum_approach0[this] := 0;
[L957]               holders_WXB[this] := zeroRefintArr();
[L958]               sum_holders1[this] := 0;
[L960]               name_WXB[this] := -1225396598;
[L961]               symbol_WXB[this] := 397088534;
[L962]               decimals_WXB[this] := 18;
[L963]               __var_1 := decimals_WXB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L964]               totalSupply_WXB[this] := nonlinearMul(100000 * 10000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936 * 100, nonlinearPow(10, decimals_WXB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L965]               sum_holders1[this] := sum_holders1[this] - holders_WXB[this][msgsender_MSG];
[L966]               holders_WXB[this][msgsender_MSG] := totalSupply_WXB[this];
[L967]               sum_holders1[this] := sum_holders1[this] + holders_WXB[this][msgsender_MSG];
[L990]   RET         call WXB_WXB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L991]   COND FALSE  !(revert)
[L167]   RET         call WXB_WXB__success(this, msgsender_MSG, msgvalue_MSG);
[L168]               assume !revert && gas >= 0;
[L1766]  RET         call WXB_WXB(this, msgsender_MSG, msgvalue_MSG);
[L1767]              assume !revert && gas >= 0;
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND FALSE  !(choice == 9)
[L1702]  COND TRUE   choice == 8
[L1703]              gas := gas - 21000;
[L1704]  COND TRUE   gas >= 0
[L1705]              assume _val_s213 >= 0 && _val_s213 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1706]              assume msgvalue_MSG == 0;
[L1707]  CALL        call __ret_0_transfer := transfer~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _to_s213, _val_s213);
[L248]               havoc __exception;
[L249]               revert := false;
[L250]   COND FALSE  !(__exception)
[L271]   CALL        call __ret_0_ := transfer~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _to_s213, _val_s213);
[L1042]  COND FALSE  !(!(holders_WXB[this][msgsender_MSG] >= _val_s213))
[L1046]  COND FALSE  !(!(msgsender_MSG != _to_s213))
[L1050]              assert _val_s213 <= holders_WXB[this][msgsender_MSG];
[L1051]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][msgsender_MSG];
[L1052]              holders_WXB[this][msgsender_MSG] := (holders_WXB[this][msgsender_MSG] - _val_s213) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1053]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][msgsender_MSG];
[L1054]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][_to_s213];
[L1055]              holders_WXB[this][_to_s213] := (holders_WXB[this][_to_s213] + _val_s213) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1056]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][_to_s213];
[L1057]              assert holders_WXB[this][_to_s213] >= _val_s213;
[L1058]              assert { :EventEmitted "Transfer_WXB" } true;
[L1059]              __ret_0_ := true;
[L271]   RET         call __ret_0_ := transfer~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _to_s213, _val_s213);
[L272]               assume !revert && gas >= 0;
[L1707]  RET         call __ret_0_transfer := transfer~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _to_s213, _val_s213);
[L1770]  RET         call CorralChoice_WXB(this);
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((p1 != _from_s315 || p2 != msgsender_MSG) && _from_s315 == _to_s315) && _val_s315 <= holders_WXB[this][_from_s315]) && _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG]) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_to_s315] >= 0) && holders_WXB[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_from_s315] >= 0) && holders_WXB[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_WXB[this][_from_s315][msgsender_MSG] >= 0) && approach_WXB[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L325]   CALL        call __ret_0_ := transferFrom~address~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1088]  COND FALSE  !(!(holders_WXB[this][_from_s315] >= _val_s315))
[L1092]  COND FALSE  !(!(approach_WXB[this][_from_s315][msgsender_MSG] >= _val_s315))
[L1096]              assert _val_s315 <= holders_WXB[this][_from_s315];
[L1097]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][_from_s315];
[L1098]              holders_WXB[this][_from_s315] := (holders_WXB[this][_from_s315] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1099]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][_from_s315];
[L1100]              assert _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG];
[L1101]              sum_approach0[_from_s315] := sum_approach0[_from_s315] - approach_WXB[this][_from_s315][msgsender_MSG];
[L1102]              approach_WXB[this][_from_s315][msgsender_MSG] := (approach_WXB[this][_from_s315][msgsender_MSG] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1103]              sum_approach0[_from_s315] := sum_approach0[_from_s315] + approach_WXB[this][_from_s315][msgsender_MSG];
[L1104]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][_to_s315];
[L1105]              holders_WXB[this][_to_s315] := (holders_WXB[this][_to_s315] + _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1106]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][_to_s315];
[L1107]              assert holders_WXB[this][_to_s315] >= _val_s315;
[L1108]              assert { :EventEmitted "Transfer_WXB" } true;
[L1109]              __ret_0_ := true;
[L325]   RET         call __ret_0_ := transferFrom~address~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L326]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((__ret_0_ == true && approach_WXB[this][_from_s315][msgsender_MSG] == old(approach_WXB[this][_from_s315][msgsender_MSG]) - _val_s315) && totalSupply_WXB[this] == old(totalSupply_WXB[this])) && holders_WXB[this] == old(holders_WXB[this])) && approach_WXB[this][p1][p2] == old(approach_WXB[this][p1][p2])) && decimals_WXB[this] == old(decimals_WXB[this])) && symbol_WXB[this] == old(symbol_WXB[this])) && name_WXB[this] == old(name_WXB[this]));
[L3]                 revert := revert_hold;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_WXB(this);
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != _from_s315 || p2 != msgsender_MSG) && _from_s315 == _to_s315) && _val_s315 <= holders_WXB[this][_from_s315]) && _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG]) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_to_s315] >= 0) && holders_WXB[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_from_s315] >= 0) && holders_WXB[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_WXB[this][_from_s315][msgsender_MSG] >= 0) && approach_WXB[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_WXB0 := true;
[L3]                 call_transferFrom_WXB0 := false;
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L325]   CALL        call __ret_0_ := transferFrom~address~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1088]  COND FALSE  !(!(holders_WXB[this][_from_s315] >= _val_s315))
[L1092]  COND FALSE  !(!(approach_WXB[this][_from_s315][msgsender_MSG] >= _val_s315))
[L1096]              assert _val_s315 <= holders_WXB[this][_from_s315];
[L1097]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][_from_s315];
[L1098]              holders_WXB[this][_from_s315] := (holders_WXB[this][_from_s315] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1099]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][_from_s315];
[L1100]              assert _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG];
[L1101]              sum_approach0[_from_s315] := sum_approach0[_from_s315] - approach_WXB[this][_from_s315][msgsender_MSG];
[L1102]              approach_WXB[this][_from_s315][msgsender_MSG] := (approach_WXB[this][_from_s315][msgsender_MSG] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1103]              sum_approach0[_from_s315] := sum_approach0[_from_s315] + approach_WXB[this][_from_s315][msgsender_MSG];
[L1104]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][_to_s315];
[L1105]              holders_WXB[this][_to_s315] := (holders_WXB[this][_to_s315] + _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1106]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][_to_s315];
[L1107]              assert holders_WXB[this][_to_s315] >= _val_s315;
[L1108]              assert { :EventEmitted "Transfer_WXB" } true;
[L1109]              __ret_0_ := true;
[L325]   RET         call __ret_0_ := transferFrom~address~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L326]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((__ret_0_ == true && approach_WXB[this][_from_s315][msgsender_MSG] == old(approach_WXB[this][_from_s315][msgsender_MSG]) - _val_s315) && totalSupply_WXB[this] == old(totalSupply_WXB[this])) && holders_WXB[this] == old(holders_WXB[this])) && approach_WXB[this][p1][p2] == old(approach_WXB[this][p1][p2])) && decimals_WXB[this] == old(decimals_WXB[this])) && symbol_WXB[this] == old(symbol_WXB[this])) && name_WXB[this] == old(name_WXB[this]));
[L3]                 revert := revert_hold;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_WXB(this);

Loop:
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND FALSE  !(choice == 9)
[L1702]  COND FALSE  !(choice == 8)
[L1709]  COND FALSE  !(choice == 7)
[L1715]  COND FALSE  !(choice == 6)
[L1721]  COND TRUE   choice == 5
[L1722]              gas := gas - 21000;
[L1723]  COND TRUE   gas >= 0
[L1724]              assume _val_s352 >= 0 && _val_s352 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1725]              assume msgvalue_MSG == 0;
[L1726]  CALL        call __ret_0_approve := approve~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _spender_s352, _val_s352);
[L354]               havoc __exception;
[L355]               revert := false;
[L356]   COND FALSE  !(__exception)
[L377]   CALL        call __ret_0_ := approve~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _spender_s352, _val_s352);
[L1128]  COND FALSE  !(!(holders_WXB[this][msgsender_MSG] >= _val_s352))
[L1132]              sum_approach0[msgsender_MSG] := sum_approach0[msgsender_MSG] - approach_WXB[this][msgsender_MSG][_spender_s352];
[L1133]              approach_WXB[this][msgsender_MSG][_spender_s352] := _val_s352;
[L1134]              sum_approach0[msgsender_MSG] := sum_approach0[msgsender_MSG] + approach_WXB[this][msgsender_MSG][_spender_s352];
[L1135]              assert { :EventEmitted "Approval_WXB" } true;
[L1136]              __ret_0_ := true;
[L377]   RET         call __ret_0_ := approve~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _spender_s352, _val_s352);
[L378]               assume !revert && gas >= 0;
[L1726]  RET         call __ret_0_approve := approve~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _spender_s352, _val_s352);
[L1770]  RET         call CorralChoice_WXB(this);

[2020-11-25 08:52:37,976 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:52:37,976 INFO  L82        PathProgramCache]: Analyzing trace with hash -1909962232, now seen corresponding path program 1 times
[2020-11-25 08:52:37,976 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:52:38,177 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:56:54,126 WARN  L188               SmtUtils]: Spent 833.00 ms on a formula simplification. DAG size of input: 391 DAG size of output: 103
[2020-11-25 08:56:54,604 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 08:56:55,368 WARN  L188               SmtUtils]: Spent 951.00 ms on a formula simplification. DAG size of input: 394 DAG size of output: 102
[2020-11-25 08:56:56,542 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 08:56:56,542 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 08:56:56,542 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 08:56:56,542 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 08:56:56,783 WARN  L188               SmtUtils]: Spent 861.00 ms on a formula simplification. DAG size of input: 409 DAG size of output: 89
[2020-11-25 08:56:57,591 WARN  L188               SmtUtils]: Spent 648.00 ms on a formula simplification. DAG size of input: 389 DAG size of output: 90
[2020-11-25 08:56:58,436 WARN  L188               SmtUtils]: Spent 667.00 ms on a formula simplification. DAG size of input: 394 DAG size of output: 92
[2020-11-25 08:57:25,258 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 08:57:25,548 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 08:57:25,612 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 08:58:21,784 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 08:58:22,281 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 08:58:22,479 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 08:58:22,484 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 08:58:22,772 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 08:58:22,775 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 08:58:23,558 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 09:00:34,393 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 09:00:46,941 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 09:00:55,785 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 09:01:24,159 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 09:01:24,507 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 09:01:24,611 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 09:01:44,390 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 09:01:52,065 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 09:01:52,925 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 09:01:53,415 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 09:01:53,664 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 09:01:54,310 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 09:04:43,869 WARN  L188               SmtUtils]: Spent 7.46 m on a formula simplification. DAG size of input: 5007 DAG size of output: 85
Received shutdown request...
[2020-11-25 09:06:30,324 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 09:06:30 BasicIcfg
[2020-11-25 09:06:30,325 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 09:06:30,325 INFO  L168              Benchmark]: Toolchain (without parser) took 898906.89 ms. Allocated memory was 1.0 GB in the beginning and 7.4 GB in the end (delta: 6.4 GB). Free memory was 940.6 MB in the beginning and 5.4 GB in the end (delta: -4.4 GB). Peak memory consumption was 6.7 GB. Max. memory is 15.3 GB.
[2020-11-25 09:06:30,325 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.18 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 09:06:30,326 INFO  L168              Benchmark]: Boogie Preprocessor took 85.49 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 935.2 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 09:06:30,326 INFO  L168              Benchmark]: UtopiaSpecLang took 53.61 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 929.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 09:06:30,326 INFO  L168              Benchmark]: Boogie Printer took 10.52 ms. Allocated memory is still 1.0 GB. Free memory is still 929.8 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 09:06:30,326 INFO  L168              Benchmark]: RCFGBuilder took 532.98 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 881.5 MB in the end (delta: 48.3 MB). Peak memory consumption was 48.3 MB. Max. memory is 15.3 GB.
[2020-11-25 09:06:30,327 INFO  L168              Benchmark]: UtopiaLTL2Aut took 37.86 ms. Allocated memory is still 1.0 GB. Free memory was 881.5 MB in the beginning and 872.6 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
[2020-11-25 09:06:30,327 INFO  L168              Benchmark]: BÃ¼chi Program Product took 939.30 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 62.4 MB). Free memory was 872.6 MB in the beginning and 951.0 MB in the end (delta: -78.5 MB). Peak memory consumption was 155.8 MB. Max. memory is 15.3 GB.
[2020-11-25 09:06:30,327 INFO  L168              Benchmark]: BlockEncodingV2 took 81.26 ms. Allocated memory is still 1.1 GB. Free memory was 951.0 MB in the beginning and 918.5 MB in the end (delta: 32.6 MB). Peak memory consumption was 32.6 MB. Max. memory is 15.3 GB.
[2020-11-25 09:06:30,327 INFO  L168              Benchmark]: BuchiAutomizer took 897162.91 ms. Allocated memory was 1.1 GB in the beginning and 7.4 GB in the end (delta: 6.3 GB). Free memory was 918.5 MB in the beginning and 5.4 GB in the end (delta: -4.4 GB). Peak memory consumption was 6.6 GB. Max. memory is 15.3 GB.
[2020-11-25 09:06:30,330 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    1526 locations, 2546 edges
  - StatisticsResult: Encoded RCFG
    1508 locations, 2503 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.18 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 85.49 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 935.2 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 53.61 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 929.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 10.52 ms. Allocated memory is still 1.0 GB. Free memory is still 929.8 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 532.98 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 881.5 MB in the end (delta: 48.3 MB). Peak memory consumption was 48.3 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 37.86 ms. Allocated memory is still 1.0 GB. Free memory was 881.5 MB in the beginning and 872.6 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 939.30 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 62.4 MB). Free memory was 872.6 MB in the beginning and 951.0 MB in the end (delta: -78.5 MB). Peak memory consumption was 155.8 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 81.26 ms. Allocated memory is still 1.1 GB. Free memory was 951.0 MB in the beginning and 918.5 MB in the end (delta: 32.6 MB). Peak memory consumption was 32.6 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 897162.91 ms. Allocated memory was 1.1 GB in the beginning and 7.4 GB in the end (delta: 6.3 GB). Free memory was 918.5 MB in the beginning and 5.4 GB in the end (delta: -4.4 GB). Peak memory consumption was 6.6 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    659 locations, 787 edges
  - StatisticsResult: BuchiProgram size
    1526 locations, 2546 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Decomposition not yet finished
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 897.1s and 13 iterations.  TraceHistogramMax:3. Analysis of lassos took 865.3s. Construction of modules took 21.3s. BÃ¼chi inclusion checks took 9.9s. Highest rank in rank-based complementation 0. Minimization of det autom 12. Minimization of nondet autom 0. Automata minimization 0.1s AutomataMinimizationTime, 12 MinimizatonAttempts, 1574 StatesRemovedByMinimization, 11 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 1256 states and ocurred in iteration 1.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 13068 SDtfs, 16815 SDslu, 65599 SDs, 0 SdLazy, 78238 SolverSat, 2795 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 21.3s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU12 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TimeoutResultAtElement [Line: 351]: Timeout (de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction)
    Timeout while trying to prove ! ( ( []( (call_transferFrom_WX(success_transferFrom_WXB0)0) ==> ( <>(success_transferFrom_WXB0) ) ) )). while BuchiCegarLoop was analyzing lasso (stem: length 303 TraceHistMax 3 loop: length 67 TraceHistMax 1),while LassoCheckResult was analyzing trace of length 303 with TraceHistMax 3,while InterpolatingTraceCheckCraig was constructing Craig interpolants,while PredicateComparison was comparing new predicate (quantifier-free) to 24 known predicates.
RESULT: Ultimate could not prove your program: Timeout
Completed graceful shutdown
