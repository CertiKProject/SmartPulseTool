This is Ultimate 0.1.24-f1553f5-m
[2020-11-24 21:33:40,487 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-24 21:33:40,488 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-24 21:33:40,499 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-24 21:33:40,499 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-24 21:33:40,500 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-24 21:33:40,501 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-24 21:33:40,503 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-24 21:33:40,504 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-24 21:33:40,505 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-24 21:33:40,505 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-24 21:33:40,506 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-24 21:33:40,506 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-24 21:33:40,507 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-24 21:33:40,508 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-24 21:33:40,509 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-24 21:33:40,509 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-24 21:33:40,510 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-24 21:33:40,512 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-24 21:33:40,513 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-24 21:33:40,514 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-24 21:33:40,515 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-24 21:33:40,516 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-24 21:33:40,517 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-24 21:33:40,517 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-24 21:33:40,517 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-24 21:33:40,518 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-24 21:33:40,518 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-24 21:33:40,519 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-24 21:33:40,519 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-24 21:33:40,519 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-24 21:33:40,520 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-24 21:33:40,520 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-24 21:33:40,521 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-24 21:33:40,521 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-24 21:33:40,522 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-24 21:33:40,522 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-24 21:33:40,522 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-24 21:33:40,522 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-24 21:33:40,523 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-24 21:33:40,524 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-24 21:33:40,524 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-24 21:33:40,532 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-24 21:33:40,532 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-24 21:33:40,533 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-24 21:33:40,533 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-24 21:33:40,533 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-24 21:33:40,533 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-24 21:33:40,533 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-24 21:33:40,533 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-24 21:33:40,533 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-24 21:33:40,533 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-24 21:33:40,533 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-24 21:33:40,534 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-24 21:33:40,534 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-24 21:33:40,534 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-24 21:33:40,534 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-24 21:33:40,534 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-24 21:33:40,534 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-24 21:33:40,534 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-24 21:33:40,534 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-24 21:33:40,534 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-24 21:33:40,534 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-24 21:33:40,535 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-24 21:33:40,535 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-24 21:33:40,535 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-24 21:33:40,535 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-24 21:33:40,535 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-24 21:33:40,558 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-24 21:33:40,571 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-24 21:33:40,574 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-24 21:33:40,576 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-24 21:33:40,577 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-24 21:33:40,578 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transferfrom-self-fail.bpl
[2020-11-24 21:33:40,578 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transferfrom-self-fail.bpl'
[2020-11-24 21:33:40,722 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-24 21:33:40,724 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-24 21:33:40,724 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-24 21:33:40,724 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-24 21:33:40,724 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-24 21:33:40,741 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:33:40" (1/1) ...
[2020-11-24 21:33:40,743 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:33:40" (1/1) ...
[2020-11-24 21:33:40,792 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:33:40" (1/1) ...
[2020-11-24 21:33:40,793 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:33:40" (1/1) ...
[2020-11-24 21:33:40,837 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:33:40" (1/1) ...
[2020-11-24 21:33:40,868 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:33:40" (1/1) ...
[2020-11-24 21:33:40,889 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:33:40" (1/1) ...
[2020-11-24 21:33:40,916 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-24 21:33:40,917 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-24 21:33:40,917 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-24 21:33:40,919 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-24 21:33:40,923 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:33:40" (1/1) ...
[2020-11-24 21:33:40,954 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(MainToken.transferFrom(from, to, value), from == to && (value > balances_BasicToken[this][from] || value > allowed_StandardToken[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][from] >= 0 &&  balances_BasicToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_StandardToken[this][from][msg.sender] >= 0 && allowed_StandardToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(MainToken.transferFrom)))
[2020-11-24 21:33:40,960 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(MainToken.transferFrom(from, to, value), from == to && (value > balances_BasicToken[this][from] || value > allowed_StandardToken[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][from] >= 0 &&  balances_BasicToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_StandardToken[this][from][msg.sender] >= 0 && allowed_StandardToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(MainToken.transferFrom)))
[2020-11-24 21:33:40,968 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(MainToken.transferFrom(from, to, value), from == to && (value > balances_BasicToken[this][from] || value > allowed_StandardToken[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][from] >= 0 &&  balances_BasicToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_StandardToken[this][from][msg.sender] >= 0 && allowed_StandardToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(MainToken.transferFrom)))
[2020-11-24 21:33:40,979 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( _from_s1551==_to_s1551 && ( _value_s1551>balances_BasicToken[this][_from_s1551] || _value_s1551>allowed_StandardToken[this][_from_s1551][msg.sender] ) ) && _value_s1551>=0 ) && _value_s1551<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_BasicToken[this][_to_s1551]>=0 ) && balances_BasicToken[this][_to_s1551]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_BasicToken[this][_from_s1551]>=0 ) && balances_BasicToken[this][_from_s1551]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && allowed_StandardToken[this][_from_s1551][msg.sender]>=0 ) && allowed_StandardToken[this][_from_s1551][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[_from_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>],IdentifierExpression[_to_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]],BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[_value_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[_from_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]]],BinaryExpression[COMPGT,IdentifierExpression[_value_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[_from_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[_value_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[_value_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[_to_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[_to_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[_from_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[_from_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[_from_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[_from_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-24 21:33:40,987 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(MainToken.transferFrom(from, to, value), from == to && (value > balances_BasicToken[this][from] || value > allowed_StandardToken[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][from] >= 0 &&  balances_BasicToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_StandardToken[this][from][msg.sender] >= 0 && allowed_StandardToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(MainToken.transferFrom)))
[2020-11-24 21:33:40,988 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_MainToken0) ==> ( <>AP(fail_transferFrom_MainToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-24 21:33:41,014 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:33:41 PropertyContainer
[2020-11-24 21:33:41,014 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-24 21:33:41,014 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-24 21:33:41,014 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-24 21:33:41,014 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-24 21:33:41,015 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:33:40" (1/2) ...
[2020-11-24 21:33:41,016 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-24 21:33:41,016 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-24 21:33:41,048 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:33:41" (2/2) ...
[2020-11-24 21:33:41,048 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-24 21:33:41,048 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-24 21:33:41,049 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-24 21:33:41,049 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-24 21:33:41,049 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:33:40" (1/2) ...
[2020-11-24 21:33:41,106 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-24 21:33:41,107 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-24 21:33:41,107 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic
[2020-11-24 21:33:41,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic
[2020-11-24 21:33:41,107 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Basic
[2020-11-24 21:33:41,107 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Basic
[2020-11-24 21:33:41,107 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Basic
[2020-11-24 21:33:41,107 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 21:33:41,108 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-24 21:33:41,108 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-24 21:33:41,108 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 21:33:41,108 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 21:33:41,108 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 21:33:41,108 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 21:33:41,108 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-24 21:33:41,109 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken
[2020-11-24 21:33:41,109 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken
[2020-11-24 21:33:41,109 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken
[2020-11-24 21:33:41,109 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken
[2020-11-24 21:33:41,109 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken
[2020-11-24 21:33:41,109 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken
[2020-11-24 21:33:41,110 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken
[2020-11-24 21:33:41,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken
[2020-11-24 21:33:41,110 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-24 21:33:41,110 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-24 21:33:41,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-24 21:33:41,110 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-24 21:33:41,110 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-24 21:33:41,110 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-24 21:33:41,110 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-24 21:33:41,110 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken
[2020-11-24 21:33:41,111 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken
[2020-11-24 21:33:41,111 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-24 21:33:41,111 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-24 21:33:41,111 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken
[2020-11-24 21:33:41,111 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken
[2020-11-24 21:33:41,111 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken
[2020-11-24 21:33:41,111 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken
[2020-11-24 21:33:41,111 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken
[2020-11-24 21:33:41,111 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken
[2020-11-24 21:33:41,111 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-24 21:33:41,112 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-24 21:33:41,112 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-24 21:33:41,112 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-24 21:33:41,112 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-24 21:33:41,112 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable
[2020-11-24 21:33:41,112 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable
[2020-11-24 21:33:41,112 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-24 21:33:41,112 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-24 21:33:41,112 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__success
[2020-11-24 21:33:41,112 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-24 21:33:41,113 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-24 21:33:41,113 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-24 21:33:41,113 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken
[2020-11-24 21:33:41,113 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken
[2020-11-24 21:33:41,113 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken
[2020-11-24 21:33:41,113 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken
[2020-11-24 21:33:41,113 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken
[2020-11-24 21:33:41,113 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken
[2020-11-24 21:33:41,113 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken
[2020-11-24 21:33:41,113 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken
[2020-11-24 21:33:41,114 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken_NoBaseCtor__success
[2020-11-24 21:33:41,114 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken
[2020-11-24 21:33:41,114 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken
[2020-11-24 21:33:41,114 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FreezableToken
[2020-11-24 21:33:41,114 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FreezableToken
[2020-11-24 21:33:41,114 INFO  L130     BoogieDeclarations]: Found specification of procedure actualBalanceOf~address_FreezableToken
[2020-11-24 21:33:41,114 INFO  L138     BoogieDeclarations]: Found implementation of procedure actualBalanceOf~address_FreezableToken
[2020-11-24 21:33:41,114 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingBalanceOf~address_FreezableToken
[2020-11-24 21:33:41,114 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingBalanceOf~address_FreezableToken
[2020-11-24 21:33:41,114 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingCount~address_FreezableToken
[2020-11-24 21:33:41,114 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingCount~address_FreezableToken
[2020-11-24 21:33:41,115 INFO  L130     BoogieDeclarations]: Found specification of procedure getFreezing~address~uint256_FreezableToken
[2020-11-24 21:33:41,115 INFO  L138     BoogieDeclarations]: Found implementation of procedure getFreezing~address~uint256_FreezableToken
[2020-11-24 21:33:41,115 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeTo~address~uint256~uint64_FreezableToken
[2020-11-24 21:33:41,115 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeTo~address~uint256~uint64_FreezableToken
[2020-11-24 21:33:41,115 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseOnce_FreezableToken
[2020-11-24 21:33:41,115 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseOnce_FreezableToken
[2020-11-24 21:33:41,115 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseAll_FreezableToken
[2020-11-24 21:33:41,115 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseAll_FreezableToken
[2020-11-24 21:33:41,115 INFO  L130     BoogieDeclarations]: Found specification of procedure toKey~address~uint256_FreezableToken__success
[2020-11-24 21:33:41,115 INFO  L130     BoogieDeclarations]: Found specification of procedure freeze~address~uint64_FreezableToken__success
[2020-11-24 21:33:41,116 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken_NoBaseCtor__success
[2020-11-24 21:33:41,116 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken
[2020-11-24 21:33:41,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken
[2020-11-24 21:33:41,116 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken
[2020-11-24 21:33:41,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken
[2020-11-24 21:33:41,116 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_BurnableToken__success
[2020-11-24 21:33:41,116 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-24 21:33:41,116 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable
[2020-11-24 21:33:41,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable
[2020-11-24 21:33:41,117 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable
[2020-11-24 21:33:41,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable
[2020-11-24 21:33:41,117 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable
[2020-11-24 21:33:41,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable
[2020-11-24 21:33:41,117 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable
[2020-11-24 21:33:41,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable
[2020-11-24 21:33:41,117 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success
[2020-11-24 21:33:41,117 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken
[2020-11-24 21:33:41,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken
[2020-11-24 21:33:41,117 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken
[2020-11-24 21:33:41,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken
[2020-11-24 21:33:41,118 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts_NoBaseCtor__success
[2020-11-24 21:33:41,118 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts
[2020-11-24 21:33:41,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts
[2020-11-24 21:33:41,118 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_Consts
[2020-11-24 21:33:41,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_Consts
[2020-11-24 21:33:41,118 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_UINT8_Consts
[2020-11-24 21:33:41,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_UINT8_Consts
[2020-11-24 21:33:41,118 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMAL_MULTIPLIER_Consts
[2020-11-24 21:33:41,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMAL_MULTIPLIER_Consts
[2020-11-24 21:33:41,119 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_NAME_Consts
[2020-11-24 21:33:41,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_NAME_Consts
[2020-11-24 21:33:41,119 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_SYMBOL_Consts
[2020-11-24 21:33:41,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_SYMBOL_Consts
[2020-11-24 21:33:41,119 INFO  L130     BoogieDeclarations]: Found specification of procedure PAUSED_Consts
[2020-11-24 21:33:41,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure PAUSED_Consts
[2020-11-24 21:33:41,119 INFO  L130     BoogieDeclarations]: Found specification of procedure TARGET_USER_Consts
[2020-11-24 21:33:41,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure TARGET_USER_Consts
[2020-11-24 21:33:41,119 INFO  L130     BoogieDeclarations]: Found specification of procedure CONTINUE_MINTING_Consts
[2020-11-24 21:33:41,120 INFO  L138     BoogieDeclarations]: Found implementation of procedure CONTINUE_MINTING_Consts
[2020-11-24 21:33:41,120 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken_NoBaseCtor__success
[2020-11-24 21:33:41,120 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken
[2020-11-24 21:33:41,120 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken
[2020-11-24 21:33:41,120 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MainToken
[2020-11-24 21:33:41,120 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MainToken
[2020-11-24 21:33:41,120 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MainToken
[2020-11-24 21:33:41,120 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MainToken
[2020-11-24 21:33:41,120 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MainToken
[2020-11-24 21:33:41,121 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MainToken
[2020-11-24 21:33:41,121 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MainToken
[2020-11-24 21:33:41,121 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MainToken
[2020-11-24 21:33:41,121 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MainToken
[2020-11-24 21:33:41,121 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MainToken
[2020-11-24 21:33:41,121 INFO  L130     BoogieDeclarations]: Found specification of procedure init_MainToken__success
[2020-11-24 21:33:41,121 INFO  L130     BoogieDeclarations]: Found specification of procedure initialized_MainToken
[2020-11-24 21:33:41,121 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialized_MainToken
[2020-11-24 21:33:41,121 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-24 21:33:41,121 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-24 21:33:41,122 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-24 21:33:41,122 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-24 21:33:41,122 INFO  L130     BoogieDeclarations]: Found specification of procedure canMint_pre__success
[2020-11-24 21:33:41,122 INFO  L130     BoogieDeclarations]: Found specification of procedure hasMintPermission_pre__success
[2020-11-24 21:33:41,122 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__success
[2020-11-24 21:33:41,122 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__success
[2020-11-24 21:33:41,122 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Basic
[2020-11-24 21:33:41,122 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Basic
[2020-11-24 21:33:41,122 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-24 21:33:41,123 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-24 21:33:41,123 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BasicToken
[2020-11-24 21:33:41,123 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BasicToken
[2020-11-24 21:33:41,123 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-24 21:33:41,123 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-24 21:33:41,123 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_StandardToken
[2020-11-24 21:33:41,123 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_StandardToken
[2020-11-24 21:33:41,123 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-24 21:33:41,123 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-24 21:33:41,123 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MintableToken
[2020-11-24 21:33:41,124 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MintableToken
[2020-11-24 21:33:41,124 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_FreezableToken
[2020-11-24 21:33:41,124 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_FreezableToken
[2020-11-24 21:33:41,124 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BurnableToken
[2020-11-24 21:33:41,124 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BurnableToken
[2020-11-24 21:33:41,124 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Pausable
[2020-11-24 21:33:41,124 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Pausable
[2020-11-24 21:33:41,124 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_FreezableMintableToken
[2020-11-24 21:33:41,124 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_FreezableMintableToken
[2020-11-24 21:33:41,124 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Consts
[2020-11-24 21:33:41,125 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Consts
[2020-11-24 21:33:41,125 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MainToken
[2020-11-24 21:33:41,125 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-24 21:33:41,125 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-24 21:33:41,125 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-24 21:33:41,125 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__success
[2020-11-24 21:33:41,125 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__fail
[2020-11-24 21:33:41,125 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 21:33:41,125 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-24 21:33:41,125 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-24 21:33:41,125 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 21:33:41,126 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 21:33:41,126 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 21:33:41,126 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 21:33:41,126 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-24 21:33:41,126 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__success
[2020-11-24 21:33:41,126 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__fail
[2020-11-24 21:33:41,126 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__success
[2020-11-24 21:33:41,126 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__fail
[2020-11-24 21:33:41,126 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__success
[2020-11-24 21:33:41,126 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__fail
[2020-11-24 21:33:41,126 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__success
[2020-11-24 21:33:41,127 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__fail
[2020-11-24 21:33:41,127 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-24 21:33:41,127 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-24 21:33:41,127 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-24 21:33:41,127 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-24 21:33:41,127 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__success
[2020-11-24 21:33:41,127 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__fail
[2020-11-24 21:33:41,127 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-24 21:33:41,127 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-24 21:33:41,127 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__success
[2020-11-24 21:33:41,127 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__fail
[2020-11-24 21:33:41,127 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__success
[2020-11-24 21:33:41,128 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__fail
[2020-11-24 21:33:41,128 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-24 21:33:41,128 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-24 21:33:41,128 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-24 21:33:41,128 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-24 21:33:41,128 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-24 21:33:41,128 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-24 21:33:41,128 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-24 21:33:41,128 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__success
[2020-11-24 21:33:41,128 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__fail
[2020-11-24 21:33:41,128 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-24 21:33:41,129 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-24 21:33:41,129 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__fail
[2020-11-24 21:33:41,129 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-24 21:33:41,129 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-24 21:33:41,129 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-24 21:33:41,129 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__success
[2020-11-24 21:33:41,129 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__fail
[2020-11-24 21:33:41,129 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__success
[2020-11-24 21:33:41,129 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__fail
[2020-11-24 21:33:41,129 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken__success
[2020-11-24 21:33:41,129 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken__fail
[2020-11-24 21:33:41,130 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken__success
[2020-11-24 21:33:41,130 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken__fail
[2020-11-24 21:33:41,130 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken_NoBaseCtor__fail
[2020-11-24 21:33:41,130 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken__success
[2020-11-24 21:33:41,130 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken__fail
[2020-11-24 21:33:41,130 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FreezableToken__success
[2020-11-24 21:33:41,130 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FreezableToken__fail
[2020-11-24 21:33:41,130 INFO  L130     BoogieDeclarations]: Found specification of procedure actualBalanceOf~address_FreezableToken__success
[2020-11-24 21:33:41,130 INFO  L130     BoogieDeclarations]: Found specification of procedure actualBalanceOf~address_FreezableToken__fail
[2020-11-24 21:33:41,130 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingBalanceOf~address_FreezableToken__success
[2020-11-24 21:33:41,130 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingBalanceOf~address_FreezableToken__fail
[2020-11-24 21:33:41,131 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingCount~address_FreezableToken__success
[2020-11-24 21:33:41,131 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingCount~address_FreezableToken__fail
[2020-11-24 21:33:41,131 INFO  L130     BoogieDeclarations]: Found specification of procedure getFreezing~address~uint256_FreezableToken__success
[2020-11-24 21:33:41,131 INFO  L130     BoogieDeclarations]: Found specification of procedure getFreezing~address~uint256_FreezableToken__fail
[2020-11-24 21:33:41,131 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeTo~address~uint256~uint64_FreezableToken__success
[2020-11-24 21:33:41,131 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeTo~address~uint256~uint64_FreezableToken__fail
[2020-11-24 21:33:41,131 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseOnce_FreezableToken__success
[2020-11-24 21:33:41,131 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseOnce_FreezableToken__fail
[2020-11-24 21:33:41,131 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseAll_FreezableToken__success
[2020-11-24 21:33:41,131 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseAll_FreezableToken__fail
[2020-11-24 21:33:41,131 INFO  L130     BoogieDeclarations]: Found specification of procedure toKey~address~uint256_FreezableToken__fail
[2020-11-24 21:33:41,132 INFO  L130     BoogieDeclarations]: Found specification of procedure freeze~address~uint64_FreezableToken__fail
[2020-11-24 21:33:41,132 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken_NoBaseCtor__fail
[2020-11-24 21:33:41,132 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken__success
[2020-11-24 21:33:41,132 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken__fail
[2020-11-24 21:33:41,132 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken__success
[2020-11-24 21:33:41,132 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken__fail
[2020-11-24 21:33:41,132 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_BurnableToken__fail
[2020-11-24 21:33:41,132 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-24 21:33:41,132 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__success
[2020-11-24 21:33:41,132 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__fail
[2020-11-24 21:33:41,132 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__success
[2020-11-24 21:33:41,132 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__fail
[2020-11-24 21:33:41,133 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__success
[2020-11-24 21:33:41,133 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__fail
[2020-11-24 21:33:41,133 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__success
[2020-11-24 21:33:41,133 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__fail
[2020-11-24 21:33:41,133 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__fail
[2020-11-24 21:33:41,133 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken__success
[2020-11-24 21:33:41,133 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken__fail
[2020-11-24 21:33:41,133 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success
[2020-11-24 21:33:41,133 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__fail
[2020-11-24 21:33:41,133 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts_NoBaseCtor__fail
[2020-11-24 21:33:41,133 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts__success
[2020-11-24 21:33:41,134 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts__fail
[2020-11-24 21:33:41,134 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_Consts__success
[2020-11-24 21:33:41,134 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_Consts__fail
[2020-11-24 21:33:41,134 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_UINT8_Consts__success
[2020-11-24 21:33:41,134 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_UINT8_Consts__fail
[2020-11-24 21:33:41,134 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__success
[2020-11-24 21:33:41,134 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__fail
[2020-11-24 21:33:41,135 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_NAME_Consts__success
[2020-11-24 21:33:41,135 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_NAME_Consts__fail
[2020-11-24 21:33:41,135 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_SYMBOL_Consts__success
[2020-11-24 21:33:41,135 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_SYMBOL_Consts__fail
[2020-11-24 21:33:41,135 INFO  L130     BoogieDeclarations]: Found specification of procedure PAUSED_Consts__success
[2020-11-24 21:33:41,135 INFO  L130     BoogieDeclarations]: Found specification of procedure PAUSED_Consts__fail
[2020-11-24 21:33:41,135 INFO  L130     BoogieDeclarations]: Found specification of procedure TARGET_USER_Consts__success
[2020-11-24 21:33:41,135 INFO  L130     BoogieDeclarations]: Found specification of procedure TARGET_USER_Consts__fail
[2020-11-24 21:33:41,135 INFO  L130     BoogieDeclarations]: Found specification of procedure CONTINUE_MINTING_Consts__success
[2020-11-24 21:33:41,135 INFO  L130     BoogieDeclarations]: Found specification of procedure CONTINUE_MINTING_Consts__fail
[2020-11-24 21:33:41,136 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken_NoBaseCtor__fail
[2020-11-24 21:33:41,136 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken__success
[2020-11-24 21:33:41,136 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken__fail
[2020-11-24 21:33:41,136 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MainToken__success
[2020-11-24 21:33:41,136 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MainToken__fail
[2020-11-24 21:33:41,136 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MainToken__success
[2020-11-24 21:33:41,136 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MainToken__fail
[2020-11-24 21:33:41,136 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MainToken__success
[2020-11-24 21:33:41,136 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MainToken__fail
[2020-11-24 21:33:41,136 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MainToken__success
[2020-11-24 21:33:41,136 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MainToken__fail
[2020-11-24 21:33:41,137 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MainToken__success
[2020-11-24 21:33:41,137 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MainToken__fail
[2020-11-24 21:33:41,137 INFO  L130     BoogieDeclarations]: Found specification of procedure init_MainToken__fail
[2020-11-24 21:33:41,137 INFO  L130     BoogieDeclarations]: Found specification of procedure initialized_MainToken__success
[2020-11-24 21:33:41,137 INFO  L130     BoogieDeclarations]: Found specification of procedure initialized_MainToken__fail
[2020-11-24 21:33:41,137 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-24 21:33:41,137 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-24 21:33:41,137 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-24 21:33:41,137 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-24 21:33:41,137 INFO  L130     BoogieDeclarations]: Found specification of procedure canMint_pre__fail
[2020-11-24 21:33:41,137 INFO  L130     BoogieDeclarations]: Found specification of procedure hasMintPermission_pre__fail
[2020-11-24 21:33:41,138 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__fail
[2020-11-24 21:33:41,138 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__fail
[2020-11-24 21:33:41,138 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-24 21:33:41,138 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-24 21:33:41,138 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-24 21:33:41,138 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-24 21:33:41,138 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__fail
[2020-11-24 21:33:41,138 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__success
[2020-11-24 21:33:41,138 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 21:33:41,138 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 21:33:41,138 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-24 21:33:41,138 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-24 21:33:41,138 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 21:33:41,139 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 21:33:41,139 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 21:33:41,139 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 21:33:41,139 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 21:33:41,139 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 21:33:41,139 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 21:33:41,139 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 21:33:41,139 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-24 21:33:41,139 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-24 21:33:41,139 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__fail
[2020-11-24 21:33:41,139 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__success
[2020-11-24 21:33:41,139 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__fail
[2020-11-24 21:33:41,140 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__success
[2020-11-24 21:33:41,140 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__fail
[2020-11-24 21:33:41,140 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__success
[2020-11-24 21:33:41,140 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__fail
[2020-11-24 21:33:41,140 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__success
[2020-11-24 21:33:41,140 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-24 21:33:41,140 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-24 21:33:41,140 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-24 21:33:41,140 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-24 21:33:41,140 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-24 21:33:41,140 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-24 21:33:41,140 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__fail
[2020-11-24 21:33:41,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__success
[2020-11-24 21:33:41,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-24 21:33:41,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-24 21:33:41,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__fail
[2020-11-24 21:33:41,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__success
[2020-11-24 21:33:41,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__fail
[2020-11-24 21:33:41,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__success
[2020-11-24 21:33:41,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-24 21:33:41,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-24 21:33:41,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-24 21:33:41,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-24 21:33:41,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-24 21:33:41,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-24 21:33:41,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-24 21:33:41,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-24 21:33:41,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__fail
[2020-11-24 21:33:41,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__success
[2020-11-24 21:33:41,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-24 21:33:41,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-24 21:33:41,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__fail
[2020-11-24 21:33:41,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__success
[2020-11-24 21:33:41,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-24 21:33:41,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-24 21:33:41,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-24 21:33:41,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-24 21:33:41,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__fail
[2020-11-24 21:33:41,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__success
[2020-11-24 21:33:41,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__fail
[2020-11-24 21:33:41,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__success
[2020-11-24 21:33:41,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken__fail
[2020-11-24 21:33:41,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken__success
[2020-11-24 21:33:41,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken__fail
[2020-11-24 21:33:41,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken__success
[2020-11-24 21:33:41,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken_NoBaseCtor__fail
[2020-11-24 21:33:41,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken_NoBaseCtor__success
[2020-11-24 21:33:41,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken__fail
[2020-11-24 21:33:41,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken__success
[2020-11-24 21:33:41,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FreezableToken__fail
[2020-11-24 21:33:41,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FreezableToken__success
[2020-11-24 21:33:41,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure actualBalanceOf~address_FreezableToken__fail
[2020-11-24 21:33:41,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure actualBalanceOf~address_FreezableToken__success
[2020-11-24 21:33:41,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingBalanceOf~address_FreezableToken__fail
[2020-11-24 21:33:41,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingBalanceOf~address_FreezableToken__success
[2020-11-24 21:33:41,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingCount~address_FreezableToken__fail
[2020-11-24 21:33:41,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingCount~address_FreezableToken__success
[2020-11-24 21:33:41,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure getFreezing~address~uint256_FreezableToken__fail
[2020-11-24 21:33:41,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure getFreezing~address~uint256_FreezableToken__success
[2020-11-24 21:33:41,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeTo~address~uint256~uint64_FreezableToken__fail
[2020-11-24 21:33:41,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeTo~address~uint256~uint64_FreezableToken__success
[2020-11-24 21:33:41,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseOnce_FreezableToken__fail
[2020-11-24 21:33:41,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseOnce_FreezableToken__success
[2020-11-24 21:33:41,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseAll_FreezableToken__fail
[2020-11-24 21:33:41,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseAll_FreezableToken__success
[2020-11-24 21:33:41,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure toKey~address~uint256_FreezableToken__fail
[2020-11-24 21:33:41,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure toKey~address~uint256_FreezableToken__success
[2020-11-24 21:33:41,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure freeze~address~uint64_FreezableToken__fail
[2020-11-24 21:33:41,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure freeze~address~uint64_FreezableToken__success
[2020-11-24 21:33:41,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken_NoBaseCtor__fail
[2020-11-24 21:33:41,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken_NoBaseCtor__success
[2020-11-24 21:33:41,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken__fail
[2020-11-24 21:33:41,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken__success
[2020-11-24 21:33:41,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken__fail
[2020-11-24 21:33:41,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken__success
[2020-11-24 21:33:41,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_BurnableToken__fail
[2020-11-24 21:33:41,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_BurnableToken__success
[2020-11-24 21:33:41,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-24 21:33:41,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-24 21:33:41,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__fail
[2020-11-24 21:33:41,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__success
[2020-11-24 21:33:41,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__fail
[2020-11-24 21:33:41,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__success
[2020-11-24 21:33:41,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__fail
[2020-11-24 21:33:41,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__success
[2020-11-24 21:33:41,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__fail
[2020-11-24 21:33:41,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__success
[2020-11-24 21:33:41,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__fail
[2020-11-24 21:33:41,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success
[2020-11-24 21:33:41,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken__fail
[2020-11-24 21:33:41,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken__success
[2020-11-24 21:33:41,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__fail
[2020-11-24 21:33:41,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success
[2020-11-24 21:33:41,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts_NoBaseCtor__fail
[2020-11-24 21:33:41,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts_NoBaseCtor__success
[2020-11-24 21:33:41,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts__fail
[2020-11-24 21:33:41,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts__success
[2020-11-24 21:33:41,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_Consts__fail
[2020-11-24 21:33:41,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_Consts__success
[2020-11-24 21:33:41,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_UINT8_Consts__fail
[2020-11-24 21:33:41,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_UINT8_Consts__success
[2020-11-24 21:33:41,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__fail
[2020-11-24 21:33:41,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__success
[2020-11-24 21:33:41,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_NAME_Consts__fail
[2020-11-24 21:33:41,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_NAME_Consts__success
[2020-11-24 21:33:41,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_SYMBOL_Consts__fail
[2020-11-24 21:33:41,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_SYMBOL_Consts__success
[2020-11-24 21:33:41,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure PAUSED_Consts__fail
[2020-11-24 21:33:41,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure PAUSED_Consts__success
[2020-11-24 21:33:41,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure TARGET_USER_Consts__fail
[2020-11-24 21:33:41,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure TARGET_USER_Consts__success
[2020-11-24 21:33:41,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure CONTINUE_MINTING_Consts__fail
[2020-11-24 21:33:41,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure CONTINUE_MINTING_Consts__success
[2020-11-24 21:33:41,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken_NoBaseCtor__fail
[2020-11-24 21:33:41,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken_NoBaseCtor__success
[2020-11-24 21:33:41,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken__fail
[2020-11-24 21:33:41,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken__success
[2020-11-24 21:33:41,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MainToken__fail
[2020-11-24 21:33:41,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MainToken__success
[2020-11-24 21:33:41,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MainToken__fail
[2020-11-24 21:33:41,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MainToken__success
[2020-11-24 21:33:41,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MainToken__fail
[2020-11-24 21:33:41,150 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MainToken__success
[2020-11-24 21:33:41,150 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MainToken__fail
[2020-11-24 21:33:41,150 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MainToken__success
[2020-11-24 21:33:41,150 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MainToken__fail
[2020-11-24 21:33:41,150 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MainToken__success
[2020-11-24 21:33:41,150 INFO  L138     BoogieDeclarations]: Found implementation of procedure init_MainToken__fail
[2020-11-24 21:33:41,150 INFO  L138     BoogieDeclarations]: Found implementation of procedure init_MainToken__success
[2020-11-24 21:33:41,150 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialized_MainToken__fail
[2020-11-24 21:33:41,150 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialized_MainToken__success
[2020-11-24 21:33:41,150 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-24 21:33:41,150 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-24 21:33:41,150 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-24 21:33:41,151 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-24 21:33:41,151 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-24 21:33:41,151 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-24 21:33:41,151 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-24 21:33:41,151 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-24 21:33:41,151 INFO  L138     BoogieDeclarations]: Found implementation of procedure canMint_pre__fail
[2020-11-24 21:33:41,151 INFO  L138     BoogieDeclarations]: Found implementation of procedure canMint_pre__success
[2020-11-24 21:33:41,151 INFO  L138     BoogieDeclarations]: Found implementation of procedure hasMintPermission_pre__fail
[2020-11-24 21:33:41,151 INFO  L138     BoogieDeclarations]: Found implementation of procedure hasMintPermission_pre__success
[2020-11-24 21:33:41,151 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__fail
[2020-11-24 21:33:41,151 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__success
[2020-11-24 21:33:41,151 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__fail
[2020-11-24 21:33:41,152 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__success
[2020-11-24 21:33:41,152 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Basic
[2020-11-24 21:33:41,152 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Basic
[2020-11-24 21:33:41,152 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-24 21:33:41,152 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-24 21:33:41,152 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BasicToken
[2020-11-24 21:33:41,152 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BasicToken
[2020-11-24 21:33:41,152 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-24 21:33:41,152 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-24 21:33:41,152 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_StandardToken
[2020-11-24 21:33:41,152 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_StandardToken
[2020-11-24 21:33:41,152 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-24 21:33:41,152 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-24 21:33:41,153 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MintableToken
[2020-11-24 21:33:41,153 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MintableToken
[2020-11-24 21:33:41,153 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_FreezableToken
[2020-11-24 21:33:41,153 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_FreezableToken
[2020-11-24 21:33:41,153 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BurnableToken
[2020-11-24 21:33:41,153 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BurnableToken
[2020-11-24 21:33:41,153 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Pausable
[2020-11-24 21:33:41,153 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Pausable
[2020-11-24 21:33:41,153 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_FreezableMintableToken
[2020-11-24 21:33:41,153 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_FreezableMintableToken
[2020-11-24 21:33:41,153 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Consts
[2020-11-24 21:33:41,153 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Consts
[2020-11-24 21:33:41,154 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MainToken
[2020-11-24 21:33:41,154 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-24 21:33:41,154 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-24 21:33:41,154 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-24 21:33:42,236 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 21:33:42,236 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 21:33:42,758 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-24 21:33:42,758 INFO  L286             CfgBuilder]: Removed 13 assue(true) statements.
[2020-11-24 21:33:42,762 INFO  L202        PluginConnector]: Adding new model MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 09:33:42 BoogieIcfgContainer
[2020-11-24 21:33:42,762 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:33:41" (2/2) ...
[2020-11-24 21:33:42,762 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-24 21:33:42,762 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@46e1f387 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 09:33:42, skipping insertion in model container
[2020-11-24 21:33:42,762 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-24 21:33:42,762 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-24 21:33:42,763 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-24 21:33:42,764 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-24 21:33:42,764 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:33:40" (1/3) ...
[2020-11-24 21:33:42,764 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@c1e64de and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 09:33:42, skipping insertion in model container
[2020-11-24 21:33:42,764 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:33:41" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-24 21:33:42,800 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 09:33:42 NWAContainer
[2020-11-24 21:33:42,800 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-24 21:33:42,800 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-24 21:33:42,800 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-24 21:33:42,801 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-24 21:33:42,802 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 09:33:42" (3/4) ...
[2020-11-24 21:33:42,802 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@39826fc9 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 09:33:42, skipping insertion in model container
[2020-11-24 21:33:42,802 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 09:33:42" (4/4) ...
[2020-11-24 21:33:42,805 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-24 21:33:42,814 INFO  L110   BuchiProductObserver]: Initial RCFG 5257 locations, 7410 edges
[2020-11-24 21:33:42,814 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-24 21:33:42,829 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-24 21:33:46,804 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-24 21:33:46,819 INFO  L110   BuchiProductObserver]: BuchiProgram size 13178 locations, 24259 edges
[2020-11-24 21:33:46,820 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 09:33:46 BoogieIcfgContainer
[2020-11-24 21:33:46,820 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-24 21:33:46,820 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-24 21:33:46,820 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-24 21:33:46,821 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-24 21:33:46,822 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 09:33:46" (1/1) ...
[2020-11-24 21:33:47,039 INFO  L313           BlockEncoder]: Initial Icfg 13178 locations, 24259 edges
[2020-11-24 21:33:47,039 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-24 21:33:47,039 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-24 21:33:47,039 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-24 21:33:47,040 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-24 21:33:47,063 INFO  L70    emoveInfeasibleEdges]: Removed 303 edges and 29 locations because of local infeasibility
[2020-11-24 21:33:47,088 INFO  L70        RemoveSinkStates]: Removed 228 edges and 140 locations by removing sink states
[2020-11-24 21:33:47,110 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-24 21:33:47,117 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-24 21:33:47,124 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-24 21:33:47,125 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-24 21:33:47,131 INFO  L313           BlockEncoder]: Encoded RCFG 12941 locations, 23627 edges
[2020-11-24 21:33:47,131 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 09:33:47 BasicIcfg
[2020-11-24 21:33:47,131 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-24 21:33:47,131 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-24 21:33:47,132 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-24 21:33:47,133 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-24 21:33:47,133 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:33:47,133 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:33:40" (1/6) ...
[2020-11-24 21:33:47,135 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@698e30da and model type MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 09:33:47, skipping insertion in model container
[2020-11-24 21:33:47,135 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:33:47,135 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:33:41" (2/6) ...
[2020-11-24 21:33:47,135 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@698e30da and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 09:33:47, skipping insertion in model container
[2020-11-24 21:33:47,135 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:33:47,135 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 09:33:42" (3/6) ...
[2020-11-24 21:33:47,135 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@698e30da and model type MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 09:33:47, skipping insertion in model container
[2020-11-24 21:33:47,135 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:33:47,135 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 09:33:42" (4/6) ...
[2020-11-24 21:33:47,136 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@698e30da and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 09:33:47, skipping insertion in model container
[2020-11-24 21:33:47,136 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:33:47,136 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 09:33:46" (5/6) ...
[2020-11-24 21:33:47,136 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@698e30da and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 24.11 09:33:47, skipping insertion in model container
[2020-11-24 21:33:47,136 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:33:47,136 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 09:33:47" (6/6) ...
[2020-11-24 21:33:47,137 INFO  L404   chiAutomizerObserver]: Analyzing ICFG MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transferfrom-self-fail.bpl_BEv2
[2020-11-24 21:33:47,168 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-24 21:33:47,168 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-24 21:33:47,168 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-24 21:33:47,168 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-24 21:33:47,168 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-24 21:33:47,168 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-24 21:33:47,168 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-24 21:33:47,168 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-24 21:33:47,168 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-24 21:33:47,248 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 12941 states.
[2020-11-24 21:33:47,334 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:33:47,334 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:33:47,334 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:33:47,342 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:33:47,342 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:33:47,342 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-24 21:33:47,343 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 12941 states.
[2020-11-24 21:33:47,391 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:33:47,392 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:33:47,392 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:33:47,393 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:33:47,394 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_MainToken0 := false;
[L2]                  call_transferFrom_MainToken0 := false;
[L2]      CALL        call main();
[L14378]              assume null == 0;
[L14379]  CALL        call this := FreshRefGenerator__success();
[L6396]               havoc newRef;
[L6397]               assume Alloc[newRef] == false;
[L6398]               Alloc[newRef] := true;
[L6399]               assume newRef != null;
[L14379]  RET         call this := FreshRefGenerator__success();
[L14380]              assume now >= 0;
[L14381]              assume DType[this] == MainToken;
[L14382]              assume msgvalue_MSG == 0;
[L14383]              gas := gas - 53000;
[L14384]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4183]               havoc __exception;
[L4184]               revert := false;
[L4185]   COND FALSE  !(__exception)
[L4222]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9205]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9007]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8983]               assume msgsender_MSG != null;
[L8984]               Balance[this] := 0;
[L8985]               TOKEN_DECIMALS_Consts[this] := 18;
[L8986]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L8987]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8988]               TOKEN_NAME_Consts[this] := -1051245219;
[L8989]               TOKEN_SYMBOL_Consts[this] := -1804535220;
[L8990]               PAUSED_Consts[this] := false;
[L8991]               __var_52 := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8992]               TARGET_USER_Consts[this] := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8993]               CONTINUE_MINTING_Consts[this] := true;
[L9007]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9008]   COND TRUE   revert
[L9205]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9206]   COND TRUE   revert
[L4222]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4223]               assume !revert && gas >= 0;
[L14384]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14385]              assume !revert && gas >= 0;

Loop:
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND TRUE   choice == 38
[L14131]              gas := gas - 21000;
[L14132]  COND FALSE  !(gas >= 0)
[L14388]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:33:47,412 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:33:47,412 INFO  L82        PathProgramCache]: Analyzing trace with hash 1260038748, now seen corresponding path program 1 times
[2020-11-24 21:33:47,421 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:33:47,457 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:33:47,504 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 21:33:47,506 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:33:47,506 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 21:33:47,914 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:33:47,927 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 21:33:47,927 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 21:33:47,929 INFO  L87              Difference]: Start difference. First operand 12941 states. Second operand 3 states.
[2020-11-24 21:33:48,467 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:33:48,468 INFO  L93              Difference]: Finished difference Result 7997 states and 9385 transitions.
[2020-11-24 21:33:48,468 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 21:33:48,469 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7997 states and 9385 transitions.
[2020-11-24 21:33:48,503 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:33:48,554 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7997 states to 7993 states and 9377 transitions.
[2020-11-24 21:33:48,555 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-24 21:33:48,559 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1798
[2020-11-24 21:33:48,559 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7993 states and 9377 transitions.
[2020-11-24 21:33:48,577 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:33:48,577 INFO  L728         BuchiCegarLoop]: Abstraction has 7993 states and 9377 transitions.
[2020-11-24 21:33:48,600 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7993 states and 9377 transitions.
[2020-11-24 21:33:48,696 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7993 to 7993.
[2020-11-24 21:33:48,697 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7993 states.
[2020-11-24 21:33:48,710 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7993 states to 7993 states and 9377 transitions.
[2020-11-24 21:33:48,710 INFO  L751         BuchiCegarLoop]: Abstraction has 7993 states and 9377 transitions.
[2020-11-24 21:33:48,710 INFO  L631         BuchiCegarLoop]: Abstraction has 7993 states and 9377 transitions.
[2020-11-24 21:33:48,711 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-24 21:33:48,711 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7993 states and 9377 transitions.
[2020-11-24 21:33:48,724 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:33:48,724 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:33:48,724 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:33:48,726 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:33:48,726 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_MainToken0 := false;
[L2]                  call_transferFrom_MainToken0 := false;
[L2]      CALL        call main();
[L14378]              assume null == 0;
[L14379]  CALL        call this := FreshRefGenerator__success();
[L6396]               havoc newRef;
[L6397]               assume Alloc[newRef] == false;
[L6398]               Alloc[newRef] := true;
[L6399]               assume newRef != null;
[L14379]  RET         call this := FreshRefGenerator__success();
[L14380]              assume now >= 0;
[L14381]              assume DType[this] == MainToken;
[L14382]              assume msgvalue_MSG == 0;
[L14383]              gas := gas - 53000;
[L14384]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4183]               havoc __exception;
[L4184]               revert := false;
[L4185]   COND FALSE  !(__exception)
[L4222]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9205]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9007]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8983]               assume msgsender_MSG != null;
[L8984]               Balance[this] := 0;
[L8985]               TOKEN_DECIMALS_Consts[this] := 18;
[L8986]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L8987]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8988]               TOKEN_NAME_Consts[this] := -1051245219;
[L8989]               TOKEN_SYMBOL_Consts[this] := -1804535220;
[L8990]               PAUSED_Consts[this] := false;
[L8991]               __var_52 := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8992]               TARGET_USER_Consts[this] := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8993]               CONTINUE_MINTING_Consts[this] := true;
[L9007]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9008]   COND FALSE  !(revert)
[L9205]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9206]   COND TRUE   revert
[L4222]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4223]               assume !revert && gas >= 0;
[L14384]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14385]              assume !revert && gas >= 0;
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND FALSE  !(choice == 36)
[L14149]  COND FALSE  !(choice == 35)
[L14155]  COND TRUE   choice == 34
[L14156]              gas := gas - 21000;
[L14157]  COND TRUE   gas >= 0
[L14158]              assume _value_s1551 >= 0 && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14159]              assume msgvalue_MSG == 0;
[L14160]  CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((_from_s1551 == _to_s1551 && (_value_s1551 > balances_BasicToken[this][_from_s1551] || _value_s1551 > allowed_StandardToken[this][_from_s1551][msgsender_MSG])) && _value_s1551 >= 0) && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1551] >= 0) && balances_BasicToken[this][_to_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s1551] >= 0) && balances_BasicToken[this][_from_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_MainToken0 := true;
[L2]                  call_transferFrom_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4515]               havoc __exception;
[L4516]               revert := false;
[L4517]   COND FALSE  !(__exception)
[L4554]   CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9315]   COND TRUE   !!paused_Pausable[this]
[L9316]               revert := true;
[L4554]   RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L4555]               assume !revert && gas >= 0;
[L14160]  RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L14388]  RET         call CorralChoice_MainToken(this);

Loop:
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND FALSE  !(choice == 36)
[L14149]  COND FALSE  !(choice == 35)
[L14155]  COND TRUE   choice == 34
[L14156]              gas := gas - 21000;
[L14157]  COND TRUE   gas >= 0
[L14158]              assume _value_s1551 >= 0 && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14159]              assume msgvalue_MSG == 0;
[L14160]  CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((_from_s1551 == _to_s1551 && (_value_s1551 > balances_BasicToken[this][_from_s1551] || _value_s1551 > allowed_StandardToken[this][_from_s1551][msgsender_MSG])) && _value_s1551 >= 0) && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1551] >= 0) && balances_BasicToken[this][_to_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s1551] >= 0) && balances_BasicToken[this][_from_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_MainToken0 := true;
[L2]                  call_transferFrom_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4515]               havoc __exception;
[L4516]               revert := false;
[L4517]   COND FALSE  !(__exception)
[L4554]   CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9315]   COND TRUE   !!paused_Pausable[this]
[L9316]               revert := true;
[L4554]   RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L4555]               assume !revert && gas >= 0;
[L14160]  RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L14388]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:33:48,730 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:33:48,730 INFO  L82        PathProgramCache]: Analyzing trace with hash 1033952504, now seen corresponding path program 1 times
[2020-11-24 21:33:48,731 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:33:48,742 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:33:48,766 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 21:33:48,767 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:33:48,767 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 21:33:48,768 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:33:48,768 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 21:33:48,768 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 21:33:48,768 INFO  L87              Difference]: Start difference. First operand 7993 states and 9377 transitions. cyclomatic complexity: 1402 Second operand 3 states.
[2020-11-24 21:33:48,965 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:33:48,965 INFO  L93              Difference]: Finished difference Result 9435 states and 10807 transitions.
[2020-11-24 21:33:48,965 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 21:33:48,965 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9435 states and 10807 transitions.
[2020-11-24 21:33:48,992 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 21:33:49,035 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9435 states to 9435 states and 10807 transitions.
[2020-11-24 21:33:49,035 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2210
[2020-11-24 21:33:49,037 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2210
[2020-11-24 21:33:49,037 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9435 states and 10807 transitions.
[2020-11-24 21:33:49,049 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:33:49,049 INFO  L728         BuchiCegarLoop]: Abstraction has 9435 states and 10807 transitions.
[2020-11-24 21:33:49,058 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9435 states and 10807 transitions.
[2020-11-24 21:33:49,150 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9435 to 8638.
[2020-11-24 21:33:49,150 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8638 states.
[2020-11-24 21:33:49,162 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8638 states to 8638 states and 9829 transitions.
[2020-11-24 21:33:49,162 INFO  L751         BuchiCegarLoop]: Abstraction has 8638 states and 9829 transitions.
[2020-11-24 21:33:49,162 INFO  L631         BuchiCegarLoop]: Abstraction has 8638 states and 9829 transitions.
[2020-11-24 21:33:49,162 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-24 21:33:49,163 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8638 states and 9829 transitions.
[2020-11-24 21:33:49,175 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 21:33:49,176 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:33:49,176 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:33:49,182 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:33:49,182 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_MainToken0 := false;
[L2]                  call_transferFrom_MainToken0 := false;
[L2]      CALL        call main();
[L14378]              assume null == 0;
[L14379]  CALL        call this := FreshRefGenerator__success();
[L6396]               havoc newRef;
[L6397]               assume Alloc[newRef] == false;
[L6398]               Alloc[newRef] := true;
[L6399]               assume newRef != null;
[L14379]  RET         call this := FreshRefGenerator__success();
[L14380]              assume now >= 0;
[L14381]              assume DType[this] == MainToken;
[L14382]              assume msgvalue_MSG == 0;
[L14383]              gas := gas - 53000;
[L14384]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4183]               havoc __exception;
[L4184]               revert := false;
[L4185]   COND FALSE  !(__exception)
[L4222]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9205]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9007]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8983]               assume msgsender_MSG != null;
[L8984]               Balance[this] := 0;
[L8985]               TOKEN_DECIMALS_Consts[this] := 18;
[L8986]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L8987]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8988]               TOKEN_NAME_Consts[this] := -1051245219;
[L8989]               TOKEN_SYMBOL_Consts[this] := -1804535220;
[L8990]               PAUSED_Consts[this] := false;
[L8991]               __var_52 := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8992]               TARGET_USER_Consts[this] := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8993]               CONTINUE_MINTING_Consts[this] := true;
[L9007]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9008]   COND FALSE  !(revert)
[L9205]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9206]   COND FALSE  !(revert)
[L9209]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L9209]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9210]   COND FALSE  !(revert)
[L9213]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L9213]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9214]   COND FALSE  !(revert)
[L9217]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L9217]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9218]   COND FALSE  !(revert)
[L9221]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L9221]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9222]   COND FALSE  !(revert)
[L9225]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L9225]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9226]   COND FALSE  !(revert)
[L9229]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L9229]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9230]   COND FALSE  !(revert)
[L9233]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L9233]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9234]   COND FALSE  !(revert)
[L9237]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8792]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8792]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8793]   COND FALSE  !(revert)
[L8796]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L8796]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L8797]   COND FALSE  !(revert)
[L8800]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8800]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8801]   COND FALSE  !(revert)
[L8804]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L8804]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8805]   COND FALSE  !(revert)
[L8808]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L8808]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8809]   COND FALSE  !(revert)
[L8812]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8812]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8813]   COND FALSE  !(revert)
[L8816]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L8816]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8817]   COND FALSE  !(revert)
[L8820]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8749]               assume msgsender_MSG != null;
[L8750]               Balance[this] := 0;
[L8820]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8821]   COND FALSE  !(revert)
[L9237]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9238]   COND FALSE  !(revert)
[L9241]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8536]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8536]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8537]   COND FALSE  !(revert)
[L8540]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8540]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8541]   COND FALSE  !(revert)
[L8544]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8513]               assume msgsender_MSG != null;
[L8514]               Balance[this] := 0;
[L8544]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8545]   COND FALSE  !(revert)
[L9241]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9242]   COND FALSE  !(revert)
[L9245]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8662]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8662]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8663]   COND FALSE  !(revert)
[L8666]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8642]               assume msgsender_MSG != null;
[L8643]               Balance[this] := 0;
[L8644]               paused_Pausable[this] := false;
[L8666]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8667]   COND FALSE  !(revert)
[L9245]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9249]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9133]               assume msgsender_MSG != null;
[L9134]               Balance[this] := 0;
[L9135]               initialized_MainToken[this] := false;
[L9137]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9404]   COND TRUE   !!initialized_MainToken[this]
[L9405]               revert := true;
[L9137]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND TRUE   revert
[L9249]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9250]   COND FALSE  !(revert)
[L4222]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4223]               assume !revert && gas >= 0;
[L14384]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14385]              assume !revert && gas >= 0;
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND FALSE  !(choice == 36)
[L14149]  COND FALSE  !(choice == 35)
[L14155]  COND TRUE   choice == 34
[L14156]              gas := gas - 21000;
[L14157]  COND TRUE   gas >= 0
[L14158]              assume _value_s1551 >= 0 && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14159]              assume msgvalue_MSG == 0;
[L14160]  CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((_from_s1551 == _to_s1551 && (_value_s1551 > balances_BasicToken[this][_from_s1551] || _value_s1551 > allowed_StandardToken[this][_from_s1551][msgsender_MSG])) && _value_s1551 >= 0) && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1551] >= 0) && balances_BasicToken[this][_to_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s1551] >= 0) && balances_BasicToken[this][_from_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_MainToken0 := true;
[L2]                  call_transferFrom_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4515]               havoc __exception;
[L4516]               revert := false;
[L4517]   COND FALSE  !(__exception)
[L4554]   CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9315]   COND TRUE   !!paused_Pausable[this]
[L9316]               revert := true;
[L4554]   RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L4555]               assume !revert && gas >= 0;
[L14160]  RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L14388]  RET         call CorralChoice_MainToken(this);

Loop:
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND FALSE  !(choice == 36)
[L14149]  COND FALSE  !(choice == 35)
[L14155]  COND TRUE   choice == 34
[L14156]              gas := gas - 21000;
[L14157]  COND TRUE   gas >= 0
[L14158]              assume _value_s1551 >= 0 && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14159]              assume msgvalue_MSG == 0;
[L14160]  CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((_from_s1551 == _to_s1551 && (_value_s1551 > balances_BasicToken[this][_from_s1551] || _value_s1551 > allowed_StandardToken[this][_from_s1551][msgsender_MSG])) && _value_s1551 >= 0) && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1551] >= 0) && balances_BasicToken[this][_to_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s1551] >= 0) && balances_BasicToken[this][_from_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_MainToken0 := true;
[L2]                  call_transferFrom_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4515]               havoc __exception;
[L4516]               revert := false;
[L4517]   COND FALSE  !(__exception)
[L4554]   CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9315]   COND TRUE   !!paused_Pausable[this]
[L9316]               revert := true;
[L4554]   RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L4555]               assume !revert && gas >= 0;
[L14160]  RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L14388]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:33:49,192 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:33:49,193 INFO  L82        PathProgramCache]: Analyzing trace with hash 862155579, now seen corresponding path program 1 times
[2020-11-24 21:33:49,194 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:33:49,235 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:33:49,782 INFO  L134       CoverageAnalysis]: Checked inductivity of 9823 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9823 trivial. 0 not checked.
[2020-11-24 21:33:49,782 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:33:49,782 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 21:33:49,783 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:33:49,783 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 21:33:49,783 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 21:33:49,783 INFO  L87              Difference]: Start difference. First operand 8638 states and 9829 transitions. cyclomatic complexity: 1209 Second operand 3 states.
[2020-11-24 21:33:49,920 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:33:49,920 INFO  L93              Difference]: Finished difference Result 9435 states and 10654 transitions.
[2020-11-24 21:33:49,921 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 21:33:49,921 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9435 states and 10654 transitions.
[2020-11-24 21:33:49,942 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 21:33:49,971 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9435 states to 9095 states and 10258 transitions.
[2020-11-24 21:33:49,971 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2090
[2020-11-24 21:33:49,972 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2119
[2020-11-24 21:33:49,972 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9095 states and 10258 transitions.
[2020-11-24 21:33:49,981 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:33:49,981 INFO  L728         BuchiCegarLoop]: Abstraction has 9095 states and 10258 transitions.
[2020-11-24 21:33:49,990 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9095 states and 10258 transitions.
[2020-11-24 21:33:50,059 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9095 to 8404.
[2020-11-24 21:33:50,059 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8404 states.
[2020-11-24 21:33:50,070 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8404 states to 8404 states and 9386 transitions.
[2020-11-24 21:33:50,070 INFO  L751         BuchiCegarLoop]: Abstraction has 8404 states and 9386 transitions.
[2020-11-24 21:33:50,070 INFO  L631         BuchiCegarLoop]: Abstraction has 8404 states and 9386 transitions.
[2020-11-24 21:33:50,070 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-24 21:33:50,070 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8404 states and 9386 transitions.
[2020-11-24 21:33:50,081 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 21:33:50,081 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:33:50,081 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:33:50,088 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:33:50,088 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_MainToken0 := false;
[L2]                  call_transferFrom_MainToken0 := false;
[L2]      CALL        call main();
[L14378]              assume null == 0;
[L14379]  CALL        call this := FreshRefGenerator__success();
[L6396]               havoc newRef;
[L6397]               assume Alloc[newRef] == false;
[L6398]               Alloc[newRef] := true;
[L6399]               assume newRef != null;
[L14379]  RET         call this := FreshRefGenerator__success();
[L14380]              assume now >= 0;
[L14381]              assume DType[this] == MainToken;
[L14382]              assume msgvalue_MSG == 0;
[L14383]              gas := gas - 53000;
[L14384]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4183]               havoc __exception;
[L4184]               revert := false;
[L4185]   COND FALSE  !(__exception)
[L4222]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9205]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9007]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8983]               assume msgsender_MSG != null;
[L8984]               Balance[this] := 0;
[L8985]               TOKEN_DECIMALS_Consts[this] := 18;
[L8986]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L8987]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8988]               TOKEN_NAME_Consts[this] := -1051245219;
[L8989]               TOKEN_SYMBOL_Consts[this] := -1804535220;
[L8990]               PAUSED_Consts[this] := false;
[L8991]               __var_52 := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8992]               TARGET_USER_Consts[this] := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8993]               CONTINUE_MINTING_Consts[this] := true;
[L9007]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9008]   COND FALSE  !(revert)
[L9205]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9206]   COND FALSE  !(revert)
[L9209]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L9209]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9210]   COND FALSE  !(revert)
[L9213]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L9213]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9214]   COND FALSE  !(revert)
[L9217]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L9217]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9218]   COND FALSE  !(revert)
[L9221]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L9221]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9222]   COND FALSE  !(revert)
[L9225]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L9225]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9226]   COND FALSE  !(revert)
[L9229]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L9229]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9230]   COND FALSE  !(revert)
[L9233]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L9233]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9234]   COND FALSE  !(revert)
[L9237]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8792]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8792]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8793]   COND FALSE  !(revert)
[L8796]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L8796]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L8797]   COND FALSE  !(revert)
[L8800]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8800]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8801]   COND FALSE  !(revert)
[L8804]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L8804]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8805]   COND FALSE  !(revert)
[L8808]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L8808]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8809]   COND FALSE  !(revert)
[L8812]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8812]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8813]   COND FALSE  !(revert)
[L8816]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L8816]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8817]   COND FALSE  !(revert)
[L8820]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8749]               assume msgsender_MSG != null;
[L8750]               Balance[this] := 0;
[L8820]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8821]   COND FALSE  !(revert)
[L9237]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9238]   COND FALSE  !(revert)
[L9241]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8536]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8536]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8537]   COND FALSE  !(revert)
[L8540]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8540]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8541]   COND FALSE  !(revert)
[L8544]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8513]               assume msgsender_MSG != null;
[L8514]               Balance[this] := 0;
[L8544]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8545]   COND FALSE  !(revert)
[L9241]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9242]   COND FALSE  !(revert)
[L9245]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8662]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8662]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8663]   COND FALSE  !(revert)
[L8666]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8642]               assume msgsender_MSG != null;
[L8643]               Balance[this] := 0;
[L8644]               paused_Pausable[this] := false;
[L8666]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8667]   COND FALSE  !(revert)
[L9245]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9249]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9133]               assume msgsender_MSG != null;
[L9134]               Balance[this] := 0;
[L9135]               initialized_MainToken[this] := false;
[L9137]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9404]   COND FALSE  !(!!initialized_MainToken[this])
[L9408]               initialized_MainToken[this] := true;
[L9409]   COND FALSE  !(PAUSED_Consts[this])
[L9419]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9429]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9137]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   COND TRUE   DType[this] == MainToken
[L9142]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7055]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12332]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7055]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   COND TRUE   DType[this] == MainToken
[L7060]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7103]               __var_11 := null;
[L7104]   COND FALSE  !(!(_newOwner_s581 != null))
[L7108]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7109]               owner_Ownable[this] := _newOwner_s581;
[L7060]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7061]   COND FALSE  !(revert)
[L9142]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9143]   COND FALSE  !(revert)
[L9249]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9250]   COND FALSE  !(revert)
[L4222]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4223]               assume !revert && gas >= 0;
[L14384]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14385]              assume !revert && gas >= 0;
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND FALSE  !(choice == 36)
[L14149]  COND FALSE  !(choice == 35)
[L14155]  COND TRUE   choice == 34
[L14156]              gas := gas - 21000;
[L14157]  COND TRUE   gas >= 0
[L14158]              assume _value_s1551 >= 0 && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14159]              assume msgvalue_MSG == 0;
[L14160]  CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((_from_s1551 == _to_s1551 && (_value_s1551 > balances_BasicToken[this][_from_s1551] || _value_s1551 > allowed_StandardToken[this][_from_s1551][msgsender_MSG])) && _value_s1551 >= 0) && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1551] >= 0) && balances_BasicToken[this][_to_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s1551] >= 0) && balances_BasicToken[this][_from_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_MainToken0 := true;
[L2]                  call_transferFrom_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4515]               havoc __exception;
[L4516]               revert := false;
[L4517]   COND FALSE  !(__exception)
[L4554]   CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9315]   COND FALSE  !(!!paused_Pausable[this])
[L9319]   COND TRUE   DType[this] == MainToken
[L9320]   CALL        call __var_53 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L6814]               __var_4 := null;
[L6815]   COND FALSE  !(!(_to_s351 != null))
[L6819]   COND FALSE  !(!(_value_s351 <= balances_BasicToken[this][_from_s351]))
[L6823]   COND FALSE  !(!(_value_s351 <= allowed_StandardToken[this][_from_s351][msgsender_MSG]))
[L6827]   CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s351], _value_s351);
[L6509]               assert b_s98 <= a_s98;
[L6510]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6827]   RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s351], _value_s351);
[L6828]   COND FALSE  !(revert)
[L6831]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s351];
[L6832]               balances_BasicToken[this][_from_s351] := __var_5;
[L6833]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s351];
[L6834]   CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s351], _value_s351);
[L6523]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6524]               assert c_s122 >= a_s122;
[L6525]               c_s122 := c_s122;
[L6834]   RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s351], _value_s351);
[L6835]   COND FALSE  !(revert)
[L6838]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s351];
[L6839]               balances_BasicToken[this][_to_s351] := __var_6;
[L6840]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s351];
[L6841]   CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s351][msgsender_MSG], _value_s351);
[L6509]               assert b_s98 <= a_s98;
[L6510]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6841]   RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s351][msgsender_MSG], _value_s351);
[L6842]   COND FALSE  !(revert)
[L6845]               sum_allowed1[_from_s351] := sum_allowed1[_from_s351] - allowed_StandardToken[this][_from_s351][msgsender_MSG];
[L6846]               allowed_StandardToken[this][_from_s351][msgsender_MSG] := __var_7;
[L6847]               sum_allowed1[_from_s351] := sum_allowed1[_from_s351] + allowed_StandardToken[this][_from_s351][msgsender_MSG];
[L6848]               assert { :EventEmitted "Transfer_StandardToken" } true;
[L6849]               __ret_0_ := true;
[L9320]   RET         call __var_53 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9321]   COND FALSE  !(revert)
[L9327]               _success_s1551 := __var_53;
[L4554]   RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L4555]               assume !revert && gas >= 0;
[L14160]  RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L14388]  RET         call CorralChoice_MainToken(this);

Loop:
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND FALSE  !(choice == 36)
[L14149]  COND FALSE  !(choice == 35)
[L14155]  COND TRUE   choice == 34
[L14156]              gas := gas - 21000;
[L14157]  COND TRUE   gas >= 0
[L14158]              assume _value_s1551 >= 0 && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14159]              assume msgvalue_MSG == 0;
[L14160]  CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((_from_s1551 == _to_s1551 && (_value_s1551 > balances_BasicToken[this][_from_s1551] || _value_s1551 > allowed_StandardToken[this][_from_s1551][msgsender_MSG])) && _value_s1551 >= 0) && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1551] >= 0) && balances_BasicToken[this][_to_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s1551] >= 0) && balances_BasicToken[this][_from_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_MainToken0 := true;
[L2]                  call_transferFrom_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4515]               havoc __exception;
[L4516]               revert := false;
[L4517]   COND FALSE  !(__exception)
[L4554]   CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9315]   COND FALSE  !(!!paused_Pausable[this])
[L9319]   COND TRUE   DType[this] == MainToken
[L9320]   CALL        call __var_53 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L6814]               __var_4 := null;
[L6815]   COND FALSE  !(!(_to_s351 != null))
[L6819]   COND FALSE  !(!(_value_s351 <= balances_BasicToken[this][_from_s351]))
[L6823]   COND FALSE  !(!(_value_s351 <= allowed_StandardToken[this][_from_s351][msgsender_MSG]))
[L6827]   CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s351], _value_s351);
[L6509]               assert b_s98 <= a_s98;
[L6510]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6827]   RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s351], _value_s351);
[L6828]   COND FALSE  !(revert)
[L6831]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s351];
[L6832]               balances_BasicToken[this][_from_s351] := __var_5;
[L6833]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s351];
[L6834]   CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s351], _value_s351);
[L6523]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6524]               assert c_s122 >= a_s122;
[L6525]               c_s122 := c_s122;
[L6834]   RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s351], _value_s351);
[L6835]   COND FALSE  !(revert)
[L6838]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s351];
[L6839]               balances_BasicToken[this][_to_s351] := __var_6;
[L6840]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s351];
[L6841]   CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s351][msgsender_MSG], _value_s351);
[L6509]               assert b_s98 <= a_s98;
[L6510]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6841]   RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s351][msgsender_MSG], _value_s351);
[L6842]   COND FALSE  !(revert)
[L6845]               sum_allowed1[_from_s351] := sum_allowed1[_from_s351] - allowed_StandardToken[this][_from_s351][msgsender_MSG];
[L6846]               allowed_StandardToken[this][_from_s351][msgsender_MSG] := __var_7;
[L6847]               sum_allowed1[_from_s351] := sum_allowed1[_from_s351] + allowed_StandardToken[this][_from_s351][msgsender_MSG];
[L6848]               assert { :EventEmitted "Transfer_StandardToken" } true;
[L6849]               __ret_0_ := true;
[L9320]   RET         call __var_53 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9321]   COND FALSE  !(revert)
[L9327]               _success_s1551 := __var_53;
[L4554]   RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L4555]               assume !revert && gas >= 0;
[L14160]  RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L14388]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:33:50,098 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:33:50,098 INFO  L82        PathProgramCache]: Analyzing trace with hash 69053234, now seen corresponding path program 1 times
[2020-11-24 21:33:50,099 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:33:50,140 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:33:50,948 INFO  L134       CoverageAnalysis]: Checked inductivity of 9827 backedges. 48 proven. 0 refuted. 0 times theorem prover too weak. 9779 trivial. 0 not checked.
[2020-11-24 21:33:50,948 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:33:50,949 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [16] imperfect sequences [] total 16
[2020-11-24 21:33:50,950 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:33:50,950 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 17 interpolants.
[2020-11-24 21:33:50,950 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=32, Invalid=240, Unknown=0, NotChecked=0, Total=272
[2020-11-24 21:33:50,951 INFO  L87              Difference]: Start difference. First operand 8404 states and 9386 transitions. cyclomatic complexity: 1000 Second operand 17 states.
[2020-11-24 21:33:59,245 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:33:59,245 INFO  L93              Difference]: Finished difference Result 8527 states and 9523 transitions.
[2020-11-24 21:33:59,245 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 20 states. 
[2020-11-24 21:33:59,245 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8527 states and 9523 transitions.
[2020-11-24 21:33:59,262 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 21:33:59,287 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8527 states to 8527 states and 9523 transitions.
[2020-11-24 21:33:59,287 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2026
[2020-11-24 21:33:59,288 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2026
[2020-11-24 21:33:59,288 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8527 states and 9523 transitions.
[2020-11-24 21:33:59,294 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:33:59,294 INFO  L728         BuchiCegarLoop]: Abstraction has 8527 states and 9523 transitions.
[2020-11-24 21:33:59,301 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8527 states and 9523 transitions.
[2020-11-24 21:33:59,361 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8527 to 8183.
[2020-11-24 21:33:59,362 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8183 states.
[2020-11-24 21:33:59,371 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8183 states to 8183 states and 9094 transitions.
[2020-11-24 21:33:59,371 INFO  L751         BuchiCegarLoop]: Abstraction has 8183 states and 9094 transitions.
[2020-11-24 21:33:59,371 INFO  L631         BuchiCegarLoop]: Abstraction has 8183 states and 9094 transitions.
[2020-11-24 21:33:59,371 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-24 21:33:59,371 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8183 states and 9094 transitions.
[2020-11-24 21:33:59,381 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:33:59,381 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:33:59,381 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:33:59,385 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:33:59,385 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_MainToken0 := false;
[L2]                  call_transferFrom_MainToken0 := false;
[L2]      CALL        call main();
[L14378]              assume null == 0;
[L14379]  CALL        call this := FreshRefGenerator__success();
[L6396]               havoc newRef;
[L6397]               assume Alloc[newRef] == false;
[L6398]               Alloc[newRef] := true;
[L6399]               assume newRef != null;
[L14379]  RET         call this := FreshRefGenerator__success();
[L14380]              assume now >= 0;
[L14381]              assume DType[this] == MainToken;
[L14382]              assume msgvalue_MSG == 0;
[L14383]              gas := gas - 53000;
[L14384]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4183]               havoc __exception;
[L4184]               revert := false;
[L4185]   COND TRUE   __exception
[L4186]               __tmp__Balance := Balance;
[L4187]               __tmp__DType := DType;
[L4188]               __tmp__Alloc := Alloc;
[L4189]               __tmp__balance_ADDR := balance_ADDR;
[L4190]               __tmp__M_Ref_int := M_Ref_int;
[L4191]               __tmp__sum_balances0 := sum_balances0;
[L4192]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4193]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4194]               __tmp__sum_allowed1 := sum_allowed1;
[L4195]               __tmp__M_int_int := M_int_int;
[L4196]               __tmp__sum_chains2 := sum_chains2;
[L4197]               __tmp__sum_freezings3 := sum_freezings3;
[L4198]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4199]               __tmp__Length := Length;
[L4200]               __tmp__now := now;
[L4201]               __tmp__balances_BasicToken := balances_BasicToken;
[L4202]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4203]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4204]               __tmp__owner_Ownable := owner_Ownable;
[L4205]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4206]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4207]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4208]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4209]               __tmp__paused_Pausable := paused_Pausable;
[L4210]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4211]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4212]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4213]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4214]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4215]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4216]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4217]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4218]               __tmp__initialized_MainToken := initialized_MainToken;
[L4219]   CALL        call MainToken_MainToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9153]   CALL        call Consts_Consts__fail(this, msgsender_MSG, msgvalue_MSG);
[L8999]   CALL        call Consts_Consts_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L8965]               assume msgsender_MSG != null;
[L8966]               __tmp__Balance[this] := 0;
[L8967]               __tmp__TOKEN_DECIMALS_Consts[this] := 18;
[L8968]               __tmp__TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L8969]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, __tmp__TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8970]               __tmp__TOKEN_NAME_Consts[this] := -1051245219;
[L8971]               __tmp__TOKEN_SYMBOL_Consts[this] := -1804535220;
[L8972]               __tmp__PAUSED_Consts[this] := false;
[L8973]               __var_52 := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8974]               __tmp__TARGET_USER_Consts[this] := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8975]               __tmp__CONTINUE_MINTING_Consts[this] := true;
[L8999]   RET         call Consts_Consts_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L9000]   COND FALSE  !(revert)
[L9153]   RET         call Consts_Consts__fail(this, msgsender_MSG, msgvalue_MSG);
[L9154]   COND FALSE  !(revert)
[L9157]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L9157]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L9158]   COND FALSE  !(revert)
[L9161]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6682]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L6682]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6683]   COND FALSE  !(revert)
[L6686]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6667]               assume msgsender_MSG != null;
[L6668]               __tmp__Balance[this] := 0;
[L6686]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6687]   COND FALSE  !(revert)
[L9161]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L9162]   COND FALSE  !(revert)
[L9165]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6553]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L6553]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6554]   COND FALSE  !(revert)
[L6557]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6532]               assume msgsender_MSG != null;
[L6533]               __tmp__Balance[this] := 0;
[L6534]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6535]               __tmp__sum_balances0[this] := 0;
[L6536]               __tmp__totalSupply__BasicToken[this] := 0;
[L6557]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6558]   COND FALSE  !(revert)
[L9165]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9166]   COND FALSE  !(revert)
[L9169]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6726]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L6726]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6727]   COND FALSE  !(revert)
[L6730]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6682]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L6682]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6683]   COND FALSE  !(revert)
[L6686]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6667]               assume msgsender_MSG != null;
[L6668]               __tmp__Balance[this] := 0;
[L6686]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6687]   COND FALSE  !(revert)
[L6730]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6734]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6553]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L6553]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6554]   COND FALSE  !(revert)
[L6557]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6532]               assume msgsender_MSG != null;
[L6533]               __tmp__Balance[this] := 0;
[L6534]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6535]               __tmp__sum_balances0[this] := 0;
[L6536]               __tmp__totalSupply__BasicToken[this] := 0;
[L6557]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6558]   COND FALSE  !(revert)
[L6734]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6735]   COND FALSE  !(revert)
[L6738]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6709]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L6710]               __tmp__sum_allowed1[this] := 0;
[L6738]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6739]   COND FALSE  !(revert)
[L9169]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9170]   COND FALSE  !(revert)
[L9173]   CALL        call FreezableToken_FreezableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7329]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L7329]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7330]   COND FALSE  !(revert)
[L7333]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6682]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L6682]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6683]   COND FALSE  !(revert)
[L6686]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6667]               assume msgsender_MSG != null;
[L6668]               __tmp__Balance[this] := 0;
[L6686]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6687]   COND FALSE  !(revert)
[L7333]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7334]   COND FALSE  !(revert)
[L7337]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6553]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L6553]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6554]   COND FALSE  !(revert)
[L6557]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6532]               assume msgsender_MSG != null;
[L6533]               __tmp__Balance[this] := 0;
[L6534]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6535]               __tmp__sum_balances0[this] := 0;
[L6536]               __tmp__totalSupply__BasicToken[this] := 0;
[L6557]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6558]   COND FALSE  !(revert)
[L7337]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7338]   COND FALSE  !(revert)
[L7341]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6726]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L6726]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6727]   COND FALSE  !(revert)
[L6730]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6682]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L6682]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6683]   COND FALSE  !(revert)
[L6686]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6667]               assume msgsender_MSG != null;
[L6668]               __tmp__Balance[this] := 0;
[L6686]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6687]   COND FALSE  !(revert)
[L6730]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6734]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6553]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L6553]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6554]   COND FALSE  !(revert)
[L6557]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6532]               assume msgsender_MSG != null;
[L6533]               __tmp__Balance[this] := 0;
[L6534]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6535]               __tmp__sum_balances0[this] := 0;
[L6536]               __tmp__totalSupply__BasicToken[this] := 0;
[L6557]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6558]   COND FALSE  !(revert)
[L6734]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6735]   COND FALSE  !(revert)
[L6738]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6709]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L6710]               __tmp__sum_allowed1[this] := 0;
[L6738]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6739]   COND FALSE  !(revert)
[L7341]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7342]   COND FALSE  !(revert)
[L7345]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7302]               assume msgsender_MSG != null;
[L7303]               __tmp__Balance[this] := 0;
[L7304]               __tmp__chains_FreezableToken[this] := zerointintArr();
[L7305]               __tmp__sum_chains2[this] := 0;
[L7306]               __tmp__freezings_FreezableToken[this] := zerointintArr();
[L7307]               __tmp__sum_freezings3[this] := 0;
[L7308]               __tmp__freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7309]               __tmp__sum_freezingBalance4[this] := 0;
[L7345]   RET         call FreezableToken_FreezableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND FALSE  !(revert)
[L9173]   RET         call FreezableToken_FreezableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9174]   COND FALSE  !(revert)
[L9177]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6980]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6961]               assume msgsender_MSG != null;
[L6962]               __tmp__Balance[this] := 0;
[L6963]               __tmp__owner_Ownable[this] := null;
[L6965]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L6980]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6981]   COND FALSE  !(revert)
[L9177]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L9178]   COND FALSE  !(revert)
[L9181]   CALL        call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7144]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L7144]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7145]   COND FALSE  !(revert)
[L7148]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6682]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L6682]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6683]   COND FALSE  !(revert)
[L6686]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6667]               assume msgsender_MSG != null;
[L6668]               __tmp__Balance[this] := 0;
[L6686]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6687]   COND FALSE  !(revert)
[L7148]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7149]   COND FALSE  !(revert)
[L7152]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6553]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L6553]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6554]   COND FALSE  !(revert)
[L6557]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6532]               assume msgsender_MSG != null;
[L6533]               __tmp__Balance[this] := 0;
[L6534]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6535]               __tmp__sum_balances0[this] := 0;
[L6536]               __tmp__totalSupply__BasicToken[this] := 0;
[L6557]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6558]   COND FALSE  !(revert)
[L7152]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7153]   COND FALSE  !(revert)
[L7156]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6726]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L6726]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6727]   COND FALSE  !(revert)
[L6730]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6682]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L6682]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6683]   COND FALSE  !(revert)
[L6686]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6667]               assume msgsender_MSG != null;
[L6668]               __tmp__Balance[this] := 0;
[L6686]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6687]   COND FALSE  !(revert)
[L6730]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6734]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6553]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L6553]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6554]   COND FALSE  !(revert)
[L6557]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6532]               assume msgsender_MSG != null;
[L6533]               __tmp__Balance[this] := 0;
[L6534]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6535]               __tmp__sum_balances0[this] := 0;
[L6536]               __tmp__totalSupply__BasicToken[this] := 0;
[L6557]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6558]   COND FALSE  !(revert)
[L6734]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6735]   COND FALSE  !(revert)
[L6738]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6709]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L6710]               __tmp__sum_allowed1[this] := 0;
[L6738]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6739]   COND FALSE  !(revert)
[L7156]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7157]   COND FALSE  !(revert)
[L7160]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6980]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6961]               assume msgsender_MSG != null;
[L6962]               __tmp__Balance[this] := 0;
[L6963]               __tmp__owner_Ownable[this] := null;
[L6965]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L6980]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6981]   COND FALSE  !(revert)
[L7160]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7161]   COND FALSE  !(revert)
[L7164]   CALL        call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7127]               assume msgsender_MSG != null;
[L7128]               __tmp__Balance[this] := 0;
[L7129]               __tmp__mintingFinished_MintableToken[this] := false;
[L7164]   RET         call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7165]   COND FALSE  !(revert)
[L9181]   RET         call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9182]   COND FALSE  !(revert)
[L9185]   CALL        call FreezableMintableToken_FreezableMintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L8756]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L8756]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L8757]   COND FALSE  !(revert)
[L8760]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6682]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L6682]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6683]   COND FALSE  !(revert)
[L6686]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6667]               assume msgsender_MSG != null;
[L6668]               __tmp__Balance[this] := 0;
[L6686]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6687]   COND FALSE  !(revert)
[L8760]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L8761]   COND FALSE  !(revert)
[L8764]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6553]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L6553]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6554]   COND FALSE  !(revert)
[L6557]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6532]               assume msgsender_MSG != null;
[L6533]               __tmp__Balance[this] := 0;
[L6534]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6535]               __tmp__sum_balances0[this] := 0;
[L6536]               __tmp__totalSupply__BasicToken[this] := 0;
[L6557]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6558]   COND FALSE  !(revert)
[L8764]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L8765]   COND FALSE  !(revert)
[L8768]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6726]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L6726]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6727]   COND FALSE  !(revert)
[L6730]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6682]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L6682]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6683]   COND FALSE  !(revert)
[L6686]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6667]               assume msgsender_MSG != null;
[L6668]               __tmp__Balance[this] := 0;
[L6686]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6687]   COND FALSE  !(revert)
[L6730]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6734]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6553]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L6553]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6554]   COND FALSE  !(revert)
[L6557]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6532]               assume msgsender_MSG != null;
[L6533]               __tmp__Balance[this] := 0;
[L6534]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6535]               __tmp__sum_balances0[this] := 0;
[L6536]               __tmp__totalSupply__BasicToken[this] := 0;
[L6557]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6558]   COND FALSE  !(revert)
[L6734]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6735]   COND FALSE  !(revert)
[L6738]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6709]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L6710]               __tmp__sum_allowed1[this] := 0;
[L6738]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6739]   COND FALSE  !(revert)
[L8768]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L8769]   COND FALSE  !(revert)
[L8772]   CALL        call FreezableToken_FreezableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7329]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L7329]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7330]   COND FALSE  !(revert)
[L7333]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6682]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L6682]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6683]   COND FALSE  !(revert)
[L6686]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6667]               assume msgsender_MSG != null;
[L6668]               __tmp__Balance[this] := 0;
[L6686]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6687]   COND FALSE  !(revert)
[L7333]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7334]   COND FALSE  !(revert)
[L7337]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6553]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L6553]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6554]   COND FALSE  !(revert)
[L6557]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6532]               assume msgsender_MSG != null;
[L6533]               __tmp__Balance[this] := 0;
[L6534]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6535]               __tmp__sum_balances0[this] := 0;
[L6536]               __tmp__totalSupply__BasicToken[this] := 0;
[L6557]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6558]   COND FALSE  !(revert)
[L7337]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7338]   COND FALSE  !(revert)
[L7341]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6726]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L6726]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6727]   COND FALSE  !(revert)
[L6730]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6682]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L6682]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6683]   COND FALSE  !(revert)
[L6686]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6667]               assume msgsender_MSG != null;
[L6668]               __tmp__Balance[this] := 0;
[L6686]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6687]   COND FALSE  !(revert)
[L6730]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6734]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6553]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L6553]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6554]   COND FALSE  !(revert)
[L6557]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6532]               assume msgsender_MSG != null;
[L6533]               __tmp__Balance[this] := 0;
[L6534]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6535]               __tmp__sum_balances0[this] := 0;
[L6536]               __tmp__totalSupply__BasicToken[this] := 0;
[L6557]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6558]   COND FALSE  !(revert)
[L6734]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6735]   COND FALSE  !(revert)
[L6738]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6709]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L6710]               __tmp__sum_allowed1[this] := 0;
[L6738]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6739]   COND FALSE  !(revert)
[L7341]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7342]   COND FALSE  !(revert)
[L7345]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7302]               assume msgsender_MSG != null;
[L7303]               __tmp__Balance[this] := 0;
[L7304]               __tmp__chains_FreezableToken[this] := zerointintArr();
[L7305]               __tmp__sum_chains2[this] := 0;
[L7306]               __tmp__freezings_FreezableToken[this] := zerointintArr();
[L7307]               __tmp__sum_freezings3[this] := 0;
[L7308]               __tmp__freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7309]               __tmp__sum_freezingBalance4[this] := 0;
[L7345]   RET         call FreezableToken_FreezableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND FALSE  !(revert)
[L8772]   RET         call FreezableToken_FreezableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L8773]   COND FALSE  !(revert)
[L8776]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6980]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6961]               assume msgsender_MSG != null;
[L6962]               __tmp__Balance[this] := 0;
[L6963]               __tmp__owner_Ownable[this] := null;
[L6965]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L6980]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6981]   COND FALSE  !(revert)
[L8776]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L8777]   COND FALSE  !(revert)
[L8780]   CALL        call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7144]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L7144]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7145]   COND FALSE  !(revert)
[L7148]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6682]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L6682]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6683]   COND FALSE  !(revert)
[L6686]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6667]               assume msgsender_MSG != null;
[L6668]               __tmp__Balance[this] := 0;
[L6686]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6687]   COND FALSE  !(revert)
[L7148]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7149]   COND FALSE  !(revert)
[L7152]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6553]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L6553]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6554]   COND FALSE  !(revert)
[L6557]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6532]               assume msgsender_MSG != null;
[L6533]               __tmp__Balance[this] := 0;
[L6534]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6535]               __tmp__sum_balances0[this] := 0;
[L6536]               __tmp__totalSupply__BasicToken[this] := 0;
[L6557]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6558]   COND FALSE  !(revert)
[L7152]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7153]   COND FALSE  !(revert)
[L7156]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6726]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L6726]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6727]   COND FALSE  !(revert)
[L6730]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6682]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L6682]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6683]   COND FALSE  !(revert)
[L6686]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6667]               assume msgsender_MSG != null;
[L6668]               __tmp__Balance[this] := 0;
[L6686]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6687]   COND FALSE  !(revert)
[L6730]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6734]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6553]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L6553]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6554]   COND FALSE  !(revert)
[L6557]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6532]               assume msgsender_MSG != null;
[L6533]               __tmp__Balance[this] := 0;
[L6534]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6535]               __tmp__sum_balances0[this] := 0;
[L6536]               __tmp__totalSupply__BasicToken[this] := 0;
[L6557]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6558]   COND FALSE  !(revert)
[L6734]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6735]   COND FALSE  !(revert)
[L6738]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6709]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L6710]               __tmp__sum_allowed1[this] := 0;
[L6738]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6739]   COND FALSE  !(revert)
[L7156]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7157]   COND FALSE  !(revert)
[L7160]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6980]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6961]               assume msgsender_MSG != null;
[L6962]               __tmp__Balance[this] := 0;
[L6963]               __tmp__owner_Ownable[this] := null;
[L6965]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L6980]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6981]   COND FALSE  !(revert)
[L7160]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7161]   COND FALSE  !(revert)
[L7164]   CALL        call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7127]               assume msgsender_MSG != null;
[L7128]               __tmp__Balance[this] := 0;
[L7129]               __tmp__mintingFinished_MintableToken[this] := false;
[L7164]   RET         call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7165]   COND FALSE  !(revert)
[L8780]   RET         call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L8781]   COND FALSE  !(revert)
[L8784]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L8741]               assume msgsender_MSG != null;
[L8742]               __tmp__Balance[this] := 0;
[L8784]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L8785]   COND FALSE  !(revert)
[L9185]   RET         call FreezableMintableToken_FreezableMintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9186]   COND FALSE  !(revert)
[L9189]   CALL        call BurnableToken_BurnableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L8520]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L8520]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L8521]   COND FALSE  !(revert)
[L8524]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6553]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L6553]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6554]   COND FALSE  !(revert)
[L6557]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6532]               assume msgsender_MSG != null;
[L6533]               __tmp__Balance[this] := 0;
[L6534]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6535]               __tmp__sum_balances0[this] := 0;
[L6536]               __tmp__totalSupply__BasicToken[this] := 0;
[L6557]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6558]   COND FALSE  !(revert)
[L8524]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L8525]   COND FALSE  !(revert)
[L8528]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L8505]               assume msgsender_MSG != null;
[L8506]               __tmp__Balance[this] := 0;
[L8528]   RET         call BurnableToken_BurnableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L8529]   COND FALSE  !(revert)
[L9189]   RET         call BurnableToken_BurnableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9190]   COND FALSE  !(revert)
[L9193]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L8650]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6980]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6961]               assume msgsender_MSG != null;
[L6962]               __tmp__Balance[this] := 0;
[L6963]               __tmp__owner_Ownable[this] := null;
[L6965]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L6980]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6981]   COND FALSE  !(revert)
[L8650]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L8651]   COND FALSE  !(revert)
[L8654]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L8633]               assume msgsender_MSG != null;
[L8634]               __tmp__Balance[this] := 0;
[L8635]               __tmp__paused_Pausable[this] := false;
[L8654]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L8655]   COND FALSE  !(revert)
[L9193]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L9194]   COND FALSE  !(revert)
[L9197]   CALL        call MainToken_MainToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L9112]               assume msgsender_MSG != null;
[L9113]               __tmp__Balance[this] := 0;
[L9114]               __tmp__initialized_MainToken[this] := false;
[L9116]   CALL        call init_MainToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9374]   COND FALSE  !(!!__tmp__initialized_MainToken[this])
[L9378]               __tmp__initialized_MainToken[this] := true;
[L9379]   COND FALSE  !(__tmp__PAUSED_Consts[this])
[L9389]   COND FALSE  !(!__tmp__CONTINUE_MINTING_Consts[this])
[L9116]   RET         call init_MainToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9117]   COND FALSE  !(revert)
[L9120]   COND TRUE   __tmp__DType[this] == MainToken
[L9121]   CALL        call transferOwnership~address_Ownable__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__TARGET_USER_Consts[this]);
[L7019]   CALL        call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L12324]  COND FALSE  !(!(msgsender_MSG == __tmp__owner_Ownable[this]))
[L7019]   RET         call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   COND TRUE   __tmp__DType[this] == MainToken
[L7024]   CALL        call _transferOwnership~address_Ownable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7092]               __var_11 := null;
[L7093]   COND FALSE  !(!(_newOwner_s581 != null))
[L7097]               __tmp__owner_Ownable[this] := _newOwner_s581;
[L7024]   RET         call _transferOwnership~address_Ownable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7025]   COND FALSE  !(revert)
[L9121]   RET         call transferOwnership~address_Ownable__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__TARGET_USER_Consts[this]);
[L9122]   COND FALSE  !(revert)
[L9197]   RET         call MainToken_MainToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L9198]   COND FALSE  !(revert)
[L4219]   RET         call MainToken_MainToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4220]               assume revert || gas < 0;
[L14384]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14385]              assume !revert && gas >= 0;
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND FALSE  !(choice == 36)
[L14149]  COND FALSE  !(choice == 35)
[L14155]  COND TRUE   choice == 34
[L14156]              gas := gas - 21000;
[L14157]  COND TRUE   gas >= 0
[L14158]              assume _value_s1551 >= 0 && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14159]              assume msgvalue_MSG == 0;
[L14160]  CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((_from_s1551 == _to_s1551 && (_value_s1551 > balances_BasicToken[this][_from_s1551] || _value_s1551 > allowed_StandardToken[this][_from_s1551][msgsender_MSG])) && _value_s1551 >= 0) && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1551] >= 0) && balances_BasicToken[this][_to_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s1551] >= 0) && balances_BasicToken[this][_from_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_MainToken0 := true;
[L2]                  call_transferFrom_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4515]               havoc __exception;
[L4516]               revert := false;
[L4517]   COND FALSE  !(__exception)
[L4554]   CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9315]   COND FALSE  !(!!paused_Pausable[this])
[L9319]   COND TRUE   DType[this] == MainToken
[L9320]   CALL        call __var_53 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L6814]               __var_4 := null;
[L6815]   COND FALSE  !(!(_to_s351 != null))
[L6819]   COND FALSE  !(!(_value_s351 <= balances_BasicToken[this][_from_s351]))
[L6823]   COND FALSE  !(!(_value_s351 <= allowed_StandardToken[this][_from_s351][msgsender_MSG]))
[L6827]   CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s351], _value_s351);
[L6509]               assert b_s98 <= a_s98;
[L6510]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6827]   RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s351], _value_s351);
[L6828]   COND FALSE  !(revert)
[L6831]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s351];
[L6832]               balances_BasicToken[this][_from_s351] := __var_5;
[L6833]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s351];
[L6834]   CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s351], _value_s351);
[L6523]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6524]               assert c_s122 >= a_s122;
[L6525]               c_s122 := c_s122;
[L6834]   RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s351], _value_s351);
[L6835]   COND FALSE  !(revert)
[L6838]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s351];
[L6839]               balances_BasicToken[this][_to_s351] := __var_6;
[L6840]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s351];
[L6841]   CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s351][msgsender_MSG], _value_s351);
[L6509]               assert b_s98 <= a_s98;
[L6510]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6841]   RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s351][msgsender_MSG], _value_s351);
[L6842]   COND FALSE  !(revert)
[L6845]               sum_allowed1[_from_s351] := sum_allowed1[_from_s351] - allowed_StandardToken[this][_from_s351][msgsender_MSG];
[L6846]               allowed_StandardToken[this][_from_s351][msgsender_MSG] := __var_7;
[L6847]               sum_allowed1[_from_s351] := sum_allowed1[_from_s351] + allowed_StandardToken[this][_from_s351][msgsender_MSG];
[L6848]               assert { :EventEmitted "Transfer_StandardToken" } true;
[L6849]               __ret_0_ := true;
[L9320]   RET         call __var_53 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9321]   COND FALSE  !(revert)
[L9327]               _success_s1551 := __var_53;
[L4554]   RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L4555]               assume !revert && gas >= 0;
[L14160]  RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L14388]  RET         call CorralChoice_MainToken(this);

Loop:
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND FALSE  !(choice == 36)
[L14149]  COND FALSE  !(choice == 35)
[L14155]  COND TRUE   choice == 34
[L14156]              gas := gas - 21000;
[L14157]  COND TRUE   gas >= 0
[L14158]              assume _value_s1551 >= 0 && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14159]              assume msgvalue_MSG == 0;
[L14160]  CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((_from_s1551 == _to_s1551 && (_value_s1551 > balances_BasicToken[this][_from_s1551] || _value_s1551 > allowed_StandardToken[this][_from_s1551][msgsender_MSG])) && _value_s1551 >= 0) && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1551] >= 0) && balances_BasicToken[this][_to_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s1551] >= 0) && balances_BasicToken[this][_from_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_MainToken0 := true;
[L2]                  call_transferFrom_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4515]               havoc __exception;
[L4516]               revert := false;
[L4517]   COND FALSE  !(__exception)
[L4554]   CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9315]   COND FALSE  !(!!paused_Pausable[this])
[L9319]   COND TRUE   DType[this] == MainToken
[L9320]   CALL        call __var_53 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L6814]               __var_4 := null;
[L6815]   COND FALSE  !(!(_to_s351 != null))
[L6819]   COND FALSE  !(!(_value_s351 <= balances_BasicToken[this][_from_s351]))
[L6823]   COND FALSE  !(!(_value_s351 <= allowed_StandardToken[this][_from_s351][msgsender_MSG]))
[L6827]   CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s351], _value_s351);
[L6509]               assert b_s98 <= a_s98;
[L6510]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6827]   RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s351], _value_s351);
[L6828]   COND FALSE  !(revert)
[L6831]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s351];
[L6832]               balances_BasicToken[this][_from_s351] := __var_5;
[L6833]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s351];
[L6834]   CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s351], _value_s351);
[L6523]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6524]               assert c_s122 >= a_s122;
[L6525]               c_s122 := c_s122;
[L6834]   RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s351], _value_s351);
[L6835]   COND FALSE  !(revert)
[L6838]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s351];
[L6839]               balances_BasicToken[this][_to_s351] := __var_6;
[L6840]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s351];
[L6841]   CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s351][msgsender_MSG], _value_s351);
[L6509]               assert b_s98 <= a_s98;
[L6510]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6841]   RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s351][msgsender_MSG], _value_s351);
[L6842]   COND FALSE  !(revert)
[L6845]               sum_allowed1[_from_s351] := sum_allowed1[_from_s351] - allowed_StandardToken[this][_from_s351][msgsender_MSG];
[L6846]               allowed_StandardToken[this][_from_s351][msgsender_MSG] := __var_7;
[L6847]               sum_allowed1[_from_s351] := sum_allowed1[_from_s351] + allowed_StandardToken[this][_from_s351][msgsender_MSG];
[L6848]               assert { :EventEmitted "Transfer_StandardToken" } true;
[L6849]               __ret_0_ := true;
[L9320]   RET         call __var_53 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9321]   COND FALSE  !(revert)
[L9327]               _success_s1551 := __var_53;
[L4554]   RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L4555]               assume !revert && gas >= 0;
[L14160]  RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L14388]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:33:59,395 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:33:59,396 INFO  L82        PathProgramCache]: Analyzing trace with hash -1030525784, now seen corresponding path program 1 times
[2020-11-24 21:33:59,397 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:33:59,432 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:34:00,011 INFO  L134       CoverageAnalysis]: Checked inductivity of 9827 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9827 trivial. 0 not checked.
[2020-11-24 21:34:00,011 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:34:00,011 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 21:34:00,012 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:34:00,012 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 21:34:00,012 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-24 21:34:00,012 INFO  L87              Difference]: Start difference. First operand 8183 states and 9094 transitions. cyclomatic complexity: 930 Second operand 4 states.
[2020-11-24 21:34:00,825 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:34:00,825 INFO  L93              Difference]: Finished difference Result 10331 states and 11770 transitions.
[2020-11-24 21:34:00,825 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 21:34:00,825 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10331 states and 11770 transitions.
[2020-11-24 21:34:00,846 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-24 21:34:00,870 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10331 states to 9568 states and 10896 transitions.
[2020-11-24 21:34:00,870 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2275
[2020-11-24 21:34:00,872 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2284
[2020-11-24 21:34:00,872 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9568 states and 10896 transitions.
[2020-11-24 21:34:00,877 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:34:00,878 INFO  L728         BuchiCegarLoop]: Abstraction has 9568 states and 10896 transitions.
[2020-11-24 21:34:00,884 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9568 states and 10896 transitions.
[2020-11-24 21:34:00,930 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9568 to 8160.
[2020-11-24 21:34:00,930 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8160 states.
[2020-11-24 21:34:00,939 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8160 states to 8160 states and 9119 transitions.
[2020-11-24 21:34:00,939 INFO  L751         BuchiCegarLoop]: Abstraction has 8160 states and 9119 transitions.
[2020-11-24 21:34:00,939 INFO  L631         BuchiCegarLoop]: Abstraction has 8160 states and 9119 transitions.
[2020-11-24 21:34:00,939 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-24 21:34:00,939 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8160 states and 9119 transitions.
[2020-11-24 21:34:00,948 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:34:00,948 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:34:00,948 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:34:00,951 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:34:00,951 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_MainToken0 := false;
[L2]                  call_transferFrom_MainToken0 := false;
[L2]      CALL        call main();
[L14378]              assume null == 0;
[L14379]  CALL        call this := FreshRefGenerator__success();
[L6396]               havoc newRef;
[L6397]               assume Alloc[newRef] == false;
[L6398]               Alloc[newRef] := true;
[L6399]               assume newRef != null;
[L14379]  RET         call this := FreshRefGenerator__success();
[L14380]              assume now >= 0;
[L14381]              assume DType[this] == MainToken;
[L14382]              assume msgvalue_MSG == 0;
[L14383]              gas := gas - 53000;
[L14384]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4183]               havoc __exception;
[L4184]               revert := false;
[L4185]   COND FALSE  !(__exception)
[L4222]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9205]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9007]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8983]               assume msgsender_MSG != null;
[L8984]               Balance[this] := 0;
[L8985]               TOKEN_DECIMALS_Consts[this] := 18;
[L8986]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L8987]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8988]               TOKEN_NAME_Consts[this] := -1051245219;
[L8989]               TOKEN_SYMBOL_Consts[this] := -1804535220;
[L8990]               PAUSED_Consts[this] := false;
[L8991]               __var_52 := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8992]               TARGET_USER_Consts[this] := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8993]               CONTINUE_MINTING_Consts[this] := true;
[L9007]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9008]   COND FALSE  !(revert)
[L9205]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9206]   COND FALSE  !(revert)
[L9209]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L9209]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9210]   COND FALSE  !(revert)
[L9213]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L9213]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9214]   COND FALSE  !(revert)
[L9217]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L9217]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9218]   COND FALSE  !(revert)
[L9221]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L9221]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9222]   COND FALSE  !(revert)
[L9225]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L9225]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9226]   COND FALSE  !(revert)
[L9229]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L9229]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9230]   COND FALSE  !(revert)
[L9233]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L9233]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9234]   COND FALSE  !(revert)
[L9237]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8792]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8792]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8793]   COND FALSE  !(revert)
[L8796]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L8796]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L8797]   COND FALSE  !(revert)
[L8800]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8800]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8801]   COND FALSE  !(revert)
[L8804]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L8804]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8805]   COND FALSE  !(revert)
[L8808]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L8808]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8809]   COND FALSE  !(revert)
[L8812]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8812]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8813]   COND FALSE  !(revert)
[L8816]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L8816]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8817]   COND FALSE  !(revert)
[L8820]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8749]               assume msgsender_MSG != null;
[L8750]               Balance[this] := 0;
[L8820]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8821]   COND FALSE  !(revert)
[L9237]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9238]   COND FALSE  !(revert)
[L9241]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8536]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8536]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8537]   COND FALSE  !(revert)
[L8540]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8540]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8541]   COND FALSE  !(revert)
[L8544]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8513]               assume msgsender_MSG != null;
[L8514]               Balance[this] := 0;
[L8544]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8545]   COND FALSE  !(revert)
[L9241]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9242]   COND FALSE  !(revert)
[L9245]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8662]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8662]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8663]   COND FALSE  !(revert)
[L8666]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8642]               assume msgsender_MSG != null;
[L8643]               Balance[this] := 0;
[L8644]               paused_Pausable[this] := false;
[L8666]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8667]   COND FALSE  !(revert)
[L9245]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9249]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9133]               assume msgsender_MSG != null;
[L9134]               Balance[this] := 0;
[L9135]               initialized_MainToken[this] := false;
[L9137]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9404]   COND FALSE  !(!!initialized_MainToken[this])
[L9408]               initialized_MainToken[this] := true;
[L9409]   COND FALSE  !(PAUSED_Consts[this])
[L9419]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9429]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9137]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   COND TRUE   DType[this] == MainToken
[L9142]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7055]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12332]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7055]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   COND TRUE   DType[this] == MainToken
[L7060]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7103]               __var_11 := null;
[L7104]   COND FALSE  !(!(_newOwner_s581 != null))
[L7108]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7109]               owner_Ownable[this] := _newOwner_s581;
[L7060]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7061]   COND FALSE  !(revert)
[L9142]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9143]   COND FALSE  !(revert)
[L9249]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9250]   COND FALSE  !(revert)
[L4222]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4223]               assume !revert && gas >= 0;
[L14384]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14385]              assume !revert && gas >= 0;
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND FALSE  !(choice == 36)
[L14149]  COND FALSE  !(choice == 35)
[L14155]  COND FALSE  !(choice == 34)
[L14162]  COND TRUE   choice == 33
[L14163]              gas := gas - 21000;
[L14164]  COND TRUE   gas >= 0
[L14165]              assume _value_s379 >= 0 && _value_s379 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14166]              assume msgvalue_MSG == 0;
[L14167]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L879]                havoc __exception;
[L880]                revert := false;
[L881]    COND FALSE  !(__exception)
[L918]    CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L6864]               sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L6865]               allowed_StandardToken[this][msgsender_MSG][_spender_s379] := _value_s379;
[L6866]               sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L6867]               assert { :EventEmitted "Approval_StandardToken" } true;
[L6868]               __ret_0_ := true;
[L918]    RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L919]                assume !revert && gas >= 0;
[L14167]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L14388]  RET         call CorralChoice_MainToken(this);
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND FALSE  !(choice == 36)
[L14149]  COND FALSE  !(choice == 35)
[L14155]  COND TRUE   choice == 34
[L14156]              gas := gas - 21000;
[L14157]  COND TRUE   gas >= 0
[L14158]              assume _value_s1551 >= 0 && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14159]              assume msgvalue_MSG == 0;
[L14160]  CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((_from_s1551 == _to_s1551 && (_value_s1551 > balances_BasicToken[this][_from_s1551] || _value_s1551 > allowed_StandardToken[this][_from_s1551][msgsender_MSG])) && _value_s1551 >= 0) && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1551] >= 0) && balances_BasicToken[this][_to_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s1551] >= 0) && balances_BasicToken[this][_from_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_MainToken0 := true;
[L2]                  call_transferFrom_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4515]               havoc __exception;
[L4516]               revert := false;
[L4517]   COND FALSE  !(__exception)
[L4554]   CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9315]   COND FALSE  !(!!paused_Pausable[this])
[L9319]   COND TRUE   DType[this] == MainToken
[L9320]   CALL        call __var_53 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L6814]               __var_4 := null;
[L6815]   COND FALSE  !(!(_to_s351 != null))
[L6819]   COND FALSE  !(!(_value_s351 <= balances_BasicToken[this][_from_s351]))
[L6823]   COND FALSE  !(!(_value_s351 <= allowed_StandardToken[this][_from_s351][msgsender_MSG]))
[L6827]   CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s351], _value_s351);
[L6509]               assert b_s98 <= a_s98;
[L6510]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6827]   RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s351], _value_s351);
[L6828]   COND FALSE  !(revert)
[L6831]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s351];
[L6832]               balances_BasicToken[this][_from_s351] := __var_5;
[L6833]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s351];
[L6834]   CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s351], _value_s351);
[L6523]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6524]               assert c_s122 >= a_s122;
[L6525]               c_s122 := c_s122;
[L6834]   RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s351], _value_s351);
[L6835]   COND FALSE  !(revert)
[L6838]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s351];
[L6839]               balances_BasicToken[this][_to_s351] := __var_6;
[L6840]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s351];
[L6841]   CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s351][msgsender_MSG], _value_s351);
[L6509]               assert b_s98 <= a_s98;
[L6510]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6841]   RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s351][msgsender_MSG], _value_s351);
[L6842]   COND FALSE  !(revert)
[L6845]               sum_allowed1[_from_s351] := sum_allowed1[_from_s351] - allowed_StandardToken[this][_from_s351][msgsender_MSG];
[L6846]               allowed_StandardToken[this][_from_s351][msgsender_MSG] := __var_7;
[L6847]               sum_allowed1[_from_s351] := sum_allowed1[_from_s351] + allowed_StandardToken[this][_from_s351][msgsender_MSG];
[L6848]               assert { :EventEmitted "Transfer_StandardToken" } true;
[L6849]               __ret_0_ := true;
[L9320]   RET         call __var_53 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9321]   COND FALSE  !(revert)
[L9327]               _success_s1551 := __var_53;
[L4554]   RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L4555]               assume !revert && gas >= 0;
[L14160]  RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L14388]  RET         call CorralChoice_MainToken(this);

Loop:
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND FALSE  !(choice == 36)
[L14149]  COND FALSE  !(choice == 35)
[L14155]  COND TRUE   choice == 34
[L14156]              gas := gas - 21000;
[L14157]  COND TRUE   gas >= 0
[L14158]              assume _value_s1551 >= 0 && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14159]              assume msgvalue_MSG == 0;
[L14160]  CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((_from_s1551 == _to_s1551 && (_value_s1551 > balances_BasicToken[this][_from_s1551] || _value_s1551 > allowed_StandardToken[this][_from_s1551][msgsender_MSG])) && _value_s1551 >= 0) && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1551] >= 0) && balances_BasicToken[this][_to_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s1551] >= 0) && balances_BasicToken[this][_from_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_MainToken0 := true;
[L2]                  call_transferFrom_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4515]               havoc __exception;
[L4516]               revert := false;
[L4517]   COND FALSE  !(__exception)
[L4554]   CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9315]   COND FALSE  !(!!paused_Pausable[this])
[L9319]   COND TRUE   DType[this] == MainToken
[L9320]   CALL        call __var_53 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L6814]               __var_4 := null;
[L6815]   COND FALSE  !(!(_to_s351 != null))
[L6819]   COND FALSE  !(!(_value_s351 <= balances_BasicToken[this][_from_s351]))
[L6823]   COND FALSE  !(!(_value_s351 <= allowed_StandardToken[this][_from_s351][msgsender_MSG]))
[L6827]   CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s351], _value_s351);
[L6509]               assert b_s98 <= a_s98;
[L6510]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6827]   RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s351], _value_s351);
[L6828]   COND FALSE  !(revert)
[L6831]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s351];
[L6832]               balances_BasicToken[this][_from_s351] := __var_5;
[L6833]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s351];
[L6834]   CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s351], _value_s351);
[L6523]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6524]               assert c_s122 >= a_s122;
[L6525]               c_s122 := c_s122;
[L6834]   RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s351], _value_s351);
[L6835]   COND FALSE  !(revert)
[L6838]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s351];
[L6839]               balances_BasicToken[this][_to_s351] := __var_6;
[L6840]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s351];
[L6841]   CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s351][msgsender_MSG], _value_s351);
[L6509]               assert b_s98 <= a_s98;
[L6510]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6841]   RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s351][msgsender_MSG], _value_s351);
[L6842]   COND FALSE  !(revert)
[L6845]               sum_allowed1[_from_s351] := sum_allowed1[_from_s351] - allowed_StandardToken[this][_from_s351][msgsender_MSG];
[L6846]               allowed_StandardToken[this][_from_s351][msgsender_MSG] := __var_7;
[L6847]               sum_allowed1[_from_s351] := sum_allowed1[_from_s351] + allowed_StandardToken[this][_from_s351][msgsender_MSG];
[L6848]               assert { :EventEmitted "Transfer_StandardToken" } true;
[L6849]               __ret_0_ := true;
[L9320]   RET         call __var_53 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9321]   COND FALSE  !(revert)
[L9327]               _success_s1551 := __var_53;
[L4554]   RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L4555]               assume !revert && gas >= 0;
[L14160]  RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L14388]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:34:00,960 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:34:00,960 INFO  L82        PathProgramCache]: Analyzing trace with hash -1113078917, now seen corresponding path program 1 times
[2020-11-24 21:34:00,961 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:34:01,004 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:34:01,821 INFO  L134       CoverageAnalysis]: Checked inductivity of 9919 backedges. 96 proven. 3 refuted. 0 times theorem prover too weak. 9820 trivial. 0 not checked.
[2020-11-24 21:34:01,822 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-24 21:34:01,822 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [15] total 15
[2020-11-24 21:34:01,822 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:34:01,823 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-11-24 21:34:01,823 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=31, Invalid=209, Unknown=0, NotChecked=0, Total=240
[2020-11-24 21:34:01,823 INFO  L87              Difference]: Start difference. First operand 8160 states and 9119 transitions. cyclomatic complexity: 978 Second operand 16 states.
[2020-11-24 21:34:07,896 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:34:07,897 INFO  L93              Difference]: Finished difference Result 8273 states and 9255 transitions.
[2020-11-24 21:34:07,897 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-11-24 21:34:07,897 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8273 states and 9255 transitions.
[2020-11-24 21:34:07,912 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:34:07,929 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8273 states to 8273 states and 9255 transitions.
[2020-11-24 21:34:07,929 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1906
[2020-11-24 21:34:07,930 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1906
[2020-11-24 21:34:07,930 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8273 states and 9255 transitions.
[2020-11-24 21:34:07,934 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:34:07,935 INFO  L728         BuchiCegarLoop]: Abstraction has 8273 states and 9255 transitions.
[2020-11-24 21:34:07,941 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8273 states and 9255 transitions.
[2020-11-24 21:34:07,983 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8273 to 8191.
[2020-11-24 21:34:07,983 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8191 states.
[2020-11-24 21:34:07,991 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8191 states to 8191 states and 9161 transitions.
[2020-11-24 21:34:07,991 INFO  L751         BuchiCegarLoop]: Abstraction has 8191 states and 9161 transitions.
[2020-11-24 21:34:07,991 INFO  L631         BuchiCegarLoop]: Abstraction has 8191 states and 9161 transitions.
[2020-11-24 21:34:07,991 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-24 21:34:07,991 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8191 states and 9161 transitions.
[2020-11-24 21:34:07,999 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:34:07,999 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:34:07,999 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:34:08,002 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:34:08,002 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_MainToken0 := false;
[L2]                  call_transferFrom_MainToken0 := false;
[L2]      CALL        call main();
[L14378]              assume null == 0;
[L14379]  CALL        call this := FreshRefGenerator__success();
[L6396]               havoc newRef;
[L6397]               assume Alloc[newRef] == false;
[L6398]               Alloc[newRef] := true;
[L6399]               assume newRef != null;
[L14379]  RET         call this := FreshRefGenerator__success();
[L14380]              assume now >= 0;
[L14381]              assume DType[this] == MainToken;
[L14382]              assume msgvalue_MSG == 0;
[L14383]              gas := gas - 53000;
[L14384]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4183]               havoc __exception;
[L4184]               revert := false;
[L4185]   COND FALSE  !(__exception)
[L4222]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9205]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9007]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8983]               assume msgsender_MSG != null;
[L8984]               Balance[this] := 0;
[L8985]               TOKEN_DECIMALS_Consts[this] := 18;
[L8986]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L8987]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8988]               TOKEN_NAME_Consts[this] := -1051245219;
[L8989]               TOKEN_SYMBOL_Consts[this] := -1804535220;
[L8990]               PAUSED_Consts[this] := false;
[L8991]               __var_52 := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8992]               TARGET_USER_Consts[this] := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8993]               CONTINUE_MINTING_Consts[this] := true;
[L9007]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9008]   COND FALSE  !(revert)
[L9205]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9206]   COND FALSE  !(revert)
[L9209]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L9209]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9210]   COND FALSE  !(revert)
[L9213]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L9213]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9214]   COND FALSE  !(revert)
[L9217]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L9217]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9218]   COND FALSE  !(revert)
[L9221]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L9221]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9222]   COND FALSE  !(revert)
[L9225]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L9225]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9226]   COND FALSE  !(revert)
[L9229]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L9229]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9230]   COND FALSE  !(revert)
[L9233]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L9233]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9234]   COND FALSE  !(revert)
[L9237]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8792]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8792]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8793]   COND FALSE  !(revert)
[L8796]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L8796]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L8797]   COND FALSE  !(revert)
[L8800]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8800]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8801]   COND FALSE  !(revert)
[L8804]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L8804]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8805]   COND FALSE  !(revert)
[L8808]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L8808]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8809]   COND FALSE  !(revert)
[L8812]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8812]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8813]   COND FALSE  !(revert)
[L8816]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L8816]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8817]   COND FALSE  !(revert)
[L8820]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8749]               assume msgsender_MSG != null;
[L8750]               Balance[this] := 0;
[L8820]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8821]   COND FALSE  !(revert)
[L9237]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9238]   COND FALSE  !(revert)
[L9241]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8536]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8536]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8537]   COND FALSE  !(revert)
[L8540]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8540]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8541]   COND FALSE  !(revert)
[L8544]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8513]               assume msgsender_MSG != null;
[L8514]               Balance[this] := 0;
[L8544]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8545]   COND FALSE  !(revert)
[L9241]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9242]   COND FALSE  !(revert)
[L9245]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8662]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8662]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8663]   COND FALSE  !(revert)
[L8666]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8642]               assume msgsender_MSG != null;
[L8643]               Balance[this] := 0;
[L8644]               paused_Pausable[this] := false;
[L8666]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8667]   COND FALSE  !(revert)
[L9245]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9249]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9133]               assume msgsender_MSG != null;
[L9134]               Balance[this] := 0;
[L9135]               initialized_MainToken[this] := false;
[L9137]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9404]   COND FALSE  !(!!initialized_MainToken[this])
[L9408]               initialized_MainToken[this] := true;
[L9409]   COND FALSE  !(PAUSED_Consts[this])
[L9419]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9429]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9137]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   COND TRUE   DType[this] == MainToken
[L9142]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7055]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12332]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7055]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   COND TRUE   DType[this] == MainToken
[L7060]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7103]               __var_11 := null;
[L7104]   COND FALSE  !(!(_newOwner_s581 != null))
[L7108]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7109]               owner_Ownable[this] := _newOwner_s581;
[L7060]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7061]   COND FALSE  !(revert)
[L9142]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9143]   COND FALSE  !(revert)
[L9249]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9250]   COND FALSE  !(revert)
[L4222]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4223]               assume !revert && gas >= 0;
[L14384]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14385]              assume !revert && gas >= 0;
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND FALSE  !(choice == 36)
[L14149]  COND FALSE  !(choice == 35)
[L14155]  COND TRUE   choice == 34
[L14156]              gas := gas - 21000;
[L14157]  COND TRUE   gas >= 0
[L14158]              assume _value_s1551 >= 0 && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14159]              assume msgvalue_MSG == 0;
[L14160]  CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((_from_s1551 == _to_s1551 && (_value_s1551 > balances_BasicToken[this][_from_s1551] || _value_s1551 > allowed_StandardToken[this][_from_s1551][msgsender_MSG])) && _value_s1551 >= 0) && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1551] >= 0) && balances_BasicToken[this][_to_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s1551] >= 0) && balances_BasicToken[this][_from_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                  revert := revert_hold;
[L4515]               havoc __exception;
[L4516]               revert := false;
[L4517]   COND FALSE  !(__exception)
[L4554]   CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9315]   COND FALSE  !(!!paused_Pausable[this])
[L9319]   COND TRUE   DType[this] == MainToken
[L9320]   CALL        call __var_53 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L6814]               __var_4 := null;
[L6815]   COND FALSE  !(!(_to_s351 != null))
[L6819]   COND FALSE  !(!(_value_s351 <= balances_BasicToken[this][_from_s351]))
[L6823]   COND FALSE  !(!(_value_s351 <= allowed_StandardToken[this][_from_s351][msgsender_MSG]))
[L6827]   CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s351], _value_s351);
[L6509]               assert b_s98 <= a_s98;
[L6510]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6827]   RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s351], _value_s351);
[L6828]   COND FALSE  !(revert)
[L6831]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s351];
[L6832]               balances_BasicToken[this][_from_s351] := __var_5;
[L6833]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s351];
[L6834]   CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s351], _value_s351);
[L6523]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6524]               assert c_s122 >= a_s122;
[L6525]               c_s122 := c_s122;
[L6834]   RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s351], _value_s351);
[L6835]   COND FALSE  !(revert)
[L6838]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s351];
[L6839]               balances_BasicToken[this][_to_s351] := __var_6;
[L6840]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s351];
[L6841]   CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s351][msgsender_MSG], _value_s351);
[L6509]               assert b_s98 <= a_s98;
[L6510]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6841]   RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s351][msgsender_MSG], _value_s351);
[L6842]   COND FALSE  !(revert)
[L6845]               sum_allowed1[_from_s351] := sum_allowed1[_from_s351] - allowed_StandardToken[this][_from_s351][msgsender_MSG];
[L6846]               allowed_StandardToken[this][_from_s351][msgsender_MSG] := __var_7;
[L6847]               sum_allowed1[_from_s351] := sum_allowed1[_from_s351] + allowed_StandardToken[this][_from_s351][msgsender_MSG];
[L6848]               assert { :EventEmitted "Transfer_StandardToken" } true;
[L6849]               __ret_0_ := true;
[L9320]   RET         call __var_53 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9321]   COND FALSE  !(revert)
[L9327]               _success_s1551 := __var_53;
[L4554]   RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L4555]               assume !revert && gas >= 0;
[L14160]  RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L14388]  RET         call CorralChoice_MainToken(this);
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND FALSE  !(choice == 36)
[L14149]  COND FALSE  !(choice == 35)
[L14155]  COND TRUE   choice == 34
[L14156]              gas := gas - 21000;
[L14157]  COND TRUE   gas >= 0
[L14158]              assume _value_s1551 >= 0 && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14159]              assume msgvalue_MSG == 0;
[L14160]  CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((_from_s1551 == _to_s1551 && (_value_s1551 > balances_BasicToken[this][_from_s1551] || _value_s1551 > allowed_StandardToken[this][_from_s1551][msgsender_MSG])) && _value_s1551 >= 0) && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1551] >= 0) && balances_BasicToken[this][_to_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s1551] >= 0) && balances_BasicToken[this][_from_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_MainToken0 := true;
[L2]                  call_transferFrom_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4515]               havoc __exception;
[L4516]               revert := false;
[L4517]   COND FALSE  !(__exception)
[L4554]   CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9315]   COND FALSE  !(!!paused_Pausable[this])
[L9319]   COND TRUE   DType[this] == MainToken
[L9320]   CALL        call __var_53 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L6814]               __var_4 := null;
[L6815]   COND FALSE  !(!(_to_s351 != null))
[L6819]   COND FALSE  !(!(_value_s351 <= balances_BasicToken[this][_from_s351]))
[L6823]   COND FALSE  !(!(_value_s351 <= allowed_StandardToken[this][_from_s351][msgsender_MSG]))
[L6827]   CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s351], _value_s351);
[L6509]               assert b_s98 <= a_s98;
[L6510]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6827]   RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s351], _value_s351);
[L6828]   COND FALSE  !(revert)
[L6831]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s351];
[L6832]               balances_BasicToken[this][_from_s351] := __var_5;
[L6833]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s351];
[L6834]   CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s351], _value_s351);
[L6523]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6524]               assert c_s122 >= a_s122;
[L6525]               c_s122 := c_s122;
[L6834]   RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s351], _value_s351);
[L6835]   COND FALSE  !(revert)
[L6838]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s351];
[L6839]               balances_BasicToken[this][_to_s351] := __var_6;
[L6840]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s351];
[L6841]   CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s351][msgsender_MSG], _value_s351);
[L6509]               assert b_s98 <= a_s98;
[L6510]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6841]   RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s351][msgsender_MSG], _value_s351);
[L6842]   COND FALSE  !(revert)
[L6845]               sum_allowed1[_from_s351] := sum_allowed1[_from_s351] - allowed_StandardToken[this][_from_s351][msgsender_MSG];
[L6846]               allowed_StandardToken[this][_from_s351][msgsender_MSG] := __var_7;
[L6847]               sum_allowed1[_from_s351] := sum_allowed1[_from_s351] + allowed_StandardToken[this][_from_s351][msgsender_MSG];
[L6848]               assert { :EventEmitted "Transfer_StandardToken" } true;
[L6849]               __ret_0_ := true;
[L9320]   RET         call __var_53 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9321]   COND FALSE  !(revert)
[L9327]               _success_s1551 := __var_53;
[L4554]   RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L4555]               assume !revert && gas >= 0;
[L14160]  RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L14388]  RET         call CorralChoice_MainToken(this);

Loop:
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND TRUE   choice == 38
[L14131]              gas := gas - 21000;
[L14132]  COND FALSE  !(gas >= 0)
[L14388]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:34:08,010 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:34:08,010 INFO  L82        PathProgramCache]: Analyzing trace with hash -438441174, now seen corresponding path program 1 times
[2020-11-24 21:34:08,011 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:34:08,053 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:34:08,789 INFO  L134       CoverageAnalysis]: Checked inductivity of 9932 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9932 trivial. 0 not checked.
[2020-11-24 21:34:08,790 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:34:08,790 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [10] imperfect sequences [] total 10
[2020-11-24 21:34:08,790 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:34:08,791 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-24 21:34:08,791 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=69, Unknown=0, NotChecked=0, Total=90
[2020-11-24 21:34:08,791 INFO  L87              Difference]: Start difference. First operand 8191 states and 9161 transitions. cyclomatic complexity: 991 Second operand 10 states.
[2020-11-24 21:34:11,719 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:34:11,720 INFO  L93              Difference]: Finished difference Result 4442 states and 4958 transitions.
[2020-11-24 21:34:11,720 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-24 21:34:11,720 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4442 states and 4958 transitions.
[2020-11-24 21:34:11,727 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-24 21:34:11,727 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4442 states to 0 states and 0 transitions.
[2020-11-24 21:34:11,727 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-24 21:34:11,727 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-24 21:34:11,728 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-24 21:34:11,728 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:34:11,728 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 21:34:11,728 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 21:34:11,728 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 21:34:11,728 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-24 21:34:11,728 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-24 21:34:11,728 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-24 21:34:11,728 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-24 21:34:11,731 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 09:34:11 BasicIcfg
[2020-11-24 21:34:11,731 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-24 21:34:11,731 INFO  L168              Benchmark]: Toolchain (without parser) took 31008.83 ms. Allocated memory was 1.0 GB in the beginning and 4.4 GB in the end (delta: 3.3 GB). Free memory was 913.7 MB in the beginning and 2.4 GB in the end (delta: -1.5 GB). Peak memory consumption was 1.9 GB. Max. memory is 15.3 GB.
[2020-11-24 21:34:11,733 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.28 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-24 21:34:11,733 INFO  L168              Benchmark]: Boogie Preprocessor took 192.34 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 886.9 MB in the end (delta: 26.8 MB). Peak memory consumption was 26.8 MB. Max. memory is 15.3 GB.
[2020-11-24 21:34:11,733 INFO  L168              Benchmark]: UtopiaSpecLang took 97.30 ms. Allocated memory is still 1.0 GB. Free memory was 886.9 MB in the beginning and 870.8 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-24 21:34:11,734 INFO  L168              Benchmark]: Boogie Printer took 33.92 ms. Allocated memory is still 1.0 GB. Free memory was 870.8 MB in the beginning and 865.4 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-24 21:34:11,734 INFO  L168              Benchmark]: RCFGBuilder took 1713.83 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 199.8 MB). Free memory was 865.4 MB in the beginning and 1.1 GB in the end (delta: -271.8 MB). Peak memory consumption was 265.5 MB. Max. memory is 15.3 GB.
[2020-11-24 21:34:11,734 INFO  L168              Benchmark]: UtopiaLTL2Aut took 37.30 ms. Allocated memory is still 1.2 GB. Free memory was 1.1 GB in the beginning and 1.1 GB in the end (delta: 8.4 MB). Peak memory consumption was 8.4 MB. Max. memory is 15.3 GB.
[2020-11-24 21:34:11,735 INFO  L168              Benchmark]: BÃ¼chi Program Product took 4019.88 ms. Allocated memory was 1.2 GB in the beginning and 1.6 GB in the end (delta: 331.4 MB). Free memory was 1.1 GB in the beginning and 1.0 GB in the end (delta: 100.0 MB). Peak memory consumption was 842.5 MB. Max. memory is 15.3 GB.
[2020-11-24 21:34:11,735 INFO  L168              Benchmark]: BlockEncodingV2 took 311.24 ms. Allocated memory is still 1.6 GB. Free memory was 1.0 GB in the beginning and 862.0 MB in the end (delta: 166.7 MB). Peak memory consumption was 166.7 MB. Max. memory is 15.3 GB.
[2020-11-24 21:34:11,735 INFO  L168              Benchmark]: BuchiAutomizer took 24599.64 ms. Allocated memory was 1.6 GB in the beginning and 4.4 GB in the end (delta: 2.8 GB). Free memory was 862.0 MB in the beginning and 2.4 GB in the end (delta: -1.5 GB). Peak memory consumption was 1.3 GB. Max. memory is 15.3 GB.
[2020-11-24 21:34:11,738 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    13178 locations, 24259 edges
  - StatisticsResult: Encoded RCFG
    12941 locations, 23627 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.28 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 192.34 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 886.9 MB in the end (delta: 26.8 MB). Peak memory consumption was 26.8 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 97.30 ms. Allocated memory is still 1.0 GB. Free memory was 886.9 MB in the beginning and 870.8 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 33.92 ms. Allocated memory is still 1.0 GB. Free memory was 870.8 MB in the beginning and 865.4 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1713.83 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 199.8 MB). Free memory was 865.4 MB in the beginning and 1.1 GB in the end (delta: -271.8 MB). Peak memory consumption was 265.5 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 37.30 ms. Allocated memory is still 1.2 GB. Free memory was 1.1 GB in the beginning and 1.1 GB in the end (delta: 8.4 MB). Peak memory consumption was 8.4 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 4019.88 ms. Allocated memory was 1.2 GB in the beginning and 1.6 GB in the end (delta: 331.4 MB). Free memory was 1.1 GB in the beginning and 1.0 GB in the end (delta: 100.0 MB). Peak memory consumption was 842.5 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 311.24 ms. Allocated memory is still 1.6 GB. Free memory was 1.0 GB in the beginning and 862.0 MB in the end (delta: 166.7 MB). Peak memory consumption was 166.7 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 24599.64 ms. Allocated memory was 1.6 GB in the beginning and 4.4 GB in the end (delta: 2.8 GB). Free memory was 862.0 MB in the beginning and 2.4 GB in the end (delta: -1.5 GB). Peak memory consumption was 1.3 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    5257 locations, 7410 edges
  - StatisticsResult: BuchiProgram size
    13178 locations, 24259 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 7 terminating modules (7 trivial, 0 deterministic, 0 nondeterministic). 7 modules have a trivial ranking function, the largest among these consists of 17 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 24.5s and 8 iterations.  TraceHistogramMax:38. Analysis of lassos took 4.3s. Construction of modules took 13.8s. BÃ¼chi inclusion checks took 5.1s. Highest rank in rank-based complementation 0. Minimization of det autom 7. Minimization of nondet autom 0. Automata minimization 0.5s AutomataMinimizationTime, 6 MinimizatonAttempts, 3322 StatesRemovedByMinimization, 5 NontrivialMinimizations. Non-live state removal took 0.3s Buchi closure took 0.0s. Biggest automaton had 8638 states and ocurred in iteration 2.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 58135 SDtfs, 47360 SDslu, 68428 SDs, 0 SdLazy, 225207 SolverSat, 7108 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 13.8s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU7 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transferFrom_MainToken0) ==> ( <>(fail_transferFrom_MainToken0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
