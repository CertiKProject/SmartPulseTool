This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 00:28:48,058 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 00:28:48,059 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 00:28:48,067 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 00:28:48,067 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 00:28:48,067 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 00:28:48,068 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 00:28:48,069 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 00:28:48,070 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 00:28:48,071 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 00:28:48,071 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 00:28:48,072 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 00:28:48,072 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 00:28:48,073 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 00:28:48,074 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 00:28:48,074 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 00:28:48,075 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 00:28:48,076 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 00:28:48,078 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 00:28:48,079 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 00:28:48,079 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 00:28:48,080 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 00:28:48,082 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 00:28:48,082 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 00:28:48,082 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 00:28:48,083 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 00:28:48,083 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 00:28:48,083 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 00:28:48,083 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 00:28:48,084 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 00:28:48,084 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 00:28:48,084 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 00:28:48,085 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 00:28:48,085 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 00:28:48,085 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 00:28:48,086 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 00:28:48,086 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 00:28:48,086 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 00:28:48,086 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 00:28:48,087 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 00:28:48,087 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 00:28:48,087 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 00:28:48,093 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 00:28:48,093 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 00:28:48,093 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 00:28:48,094 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 00:28:48,094 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 00:28:48,094 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 00:28:48,094 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 00:28:48,094 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 00:28:48,094 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 00:28:48,094 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 00:28:48,094 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 00:28:48,094 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 00:28:48,094 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 00:28:48,094 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 00:28:48,094 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 00:28:48,095 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 00:28:48,095 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 00:28:48,095 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 00:28:48,095 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 00:28:48,095 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 00:28:48,095 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 00:28:48,095 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 00:28:48,095 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 00:28:48,095 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 00:28:48,095 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 00:28:48,095 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 00:28:48,112 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 00:28:48,121 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 00:28:48,124 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 00:28:48,126 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 00:28:48,126 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 00:28:48,127 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/BazToken_0xb020ed54651831878e5c967e0953a900786178f9_transferfrom-fail.bpl
[2020-11-25 00:28:48,127 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/BazToken_0xb020ed54651831878e5c967e0953a900786178f9_transferfrom-fail.bpl'
[2020-11-25 00:28:48,203 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 00:28:48,204 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 00:28:48,205 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 00:28:48,205 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 00:28:48,205 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 00:28:48,221 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "BazToken_0xb020ed54651831878e5c967e0953a900786178f9_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:28:48" (1/1) ...
[2020-11-25 00:28:48,223 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "BazToken_0xb020ed54651831878e5c967e0953a900786178f9_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:28:48" (1/1) ...
[2020-11-25 00:28:48,250 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "BazToken_0xb020ed54651831878e5c967e0953a900786178f9_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:28:48" (1/1) ...
[2020-11-25 00:28:48,251 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "BazToken_0xb020ed54651831878e5c967e0953a900786178f9_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:28:48" (1/1) ...
[2020-11-25 00:28:48,268 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "BazToken_0xb020ed54651831878e5c967e0953a900786178f9_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:28:48" (1/1) ...
[2020-11-25 00:28:48,277 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "BazToken_0xb020ed54651831878e5c967e0953a900786178f9_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:28:48" (1/1) ...
[2020-11-25 00:28:48,283 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "BazToken_0xb020ed54651831878e5c967e0953a900786178f9_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:28:48" (1/1) ...
[2020-11-25 00:28:48,292 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 00:28:48,293 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 00:28:48,293 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 00:28:48,295 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 00:28:48,298 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "BazToken_0xb020ed54651831878e5c967e0953a900786178f9_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:28:48" (1/1) ...
[2020-11-25 00:28:48,317 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(BazToken.transferFrom(from, to, value), from != to && (value > balances_BazToken[this][from] || value > allowed_BazToken[this][from][msg.sender] || balances_BazToken[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BazToken[this][to] >= 0 && balances_BazToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BazToken[this][from] >= 0 &&  balances_BazToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_BazToken[this][from][msg.sender] >= 0 && allowed_BazToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(BazToken.transferFrom)))
[2020-11-25 00:28:48,322 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(BazToken.transferFrom(from, to, value), from != to && (value > balances_BazToken[this][from] || value > allowed_BazToken[this][from][msg.sender] || balances_BazToken[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BazToken[this][to] >= 0 && balances_BazToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BazToken[this][from] >= 0 &&  balances_BazToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_BazToken[this][from][msg.sender] >= 0 && allowed_BazToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(BazToken.transferFrom)))
[2020-11-25 00:28:48,329 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(BazToken.transferFrom(from, to, value), from != to && (value > balances_BazToken[this][from] || value > allowed_BazToken[this][from][msg.sender] || balances_BazToken[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BazToken[this][to] >= 0 && balances_BazToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BazToken[this][from] >= 0 &&  balances_BazToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_BazToken[this][from][msg.sender] >= 0 && allowed_BazToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(BazToken.transferFrom)))
[2020-11-25 00:28:48,337 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( from_s458!=to_s458 && ( ( tokens_s458>balances_BazToken[this][from_s458] || tokens_s458>allowed_BazToken[this][from_s458][msg.sender] ) || ( balances_BazToken[this][to_s458] + tokens_s458 )>=115792089237316195423570985008687907853269984665640564039457584007913129639936 ) ) && tokens_s458>=0 ) && tokens_s458<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_BazToken[this][to_s458]>=0 ) && balances_BazToken[this][to_s458]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_BazToken[this][from_s458]>=0 ) && balances_BazToken[this][from_s458]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && allowed_BazToken[this][from_s458][msg.sender]>=0 ) && allowed_BazToken[this][from_s458][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[from_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>],IdentifierExpression[to_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>]],BinaryExpression[LOGICOR,BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[tokens_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BazToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>]]],[IdentifierExpression[from_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>]]]],BinaryExpression[COMPGT,IdentifierExpression[tokens_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_BazToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>]]],[IdentifierExpression[from_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>]]]]],BinaryExpression[COMPGEQ,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BazToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>]]],[IdentifierExpression[to_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>]]],IdentifierExpression[tokens_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]],BinaryExpression[COMPGEQ,IdentifierExpression[tokens_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[tokens_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BazToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>]]],[IdentifierExpression[to_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BazToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>]]],[IdentifierExpression[to_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BazToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>]]],[IdentifierExpression[from_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BazToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>]]],[IdentifierExpression[from_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_BazToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>]]],[IdentifierExpression[from_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_BazToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>]]],[IdentifierExpression[from_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 00:28:48,342 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(BazToken.transferFrom(from, to, value), from != to && (value > balances_BazToken[this][from] || value > allowed_BazToken[this][from][msg.sender] || balances_BazToken[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BazToken[this][to] >= 0 && balances_BazToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BazToken[this][from] >= 0 &&  balances_BazToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_BazToken[this][from][msg.sender] >= 0 && allowed_BazToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(BazToken.transferFrom)))
[2020-11-25 00:28:48,342 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_BazToken0) ==> ( <>AP(fail_transferFrom_BazToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 00:28:48,350 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:28:48 PropertyContainer
[2020-11-25 00:28:48,350 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 00:28:48,351 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 00:28:48,351 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 00:28:48,351 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 00:28:48,352 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "BazToken_0xb020ed54651831878e5c967e0953a900786178f9_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:28:48" (1/2) ...
[2020-11-25 00:28:48,352 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 00:28:48,352 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 00:28:48,366 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:28:48" (2/2) ...
[2020-11-25 00:28:48,366 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 00:28:48,366 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 00:28:48,366 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 00:28:48,367 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 00:28:48,367 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "BazToken_0xb020ed54651831878e5c967e0953a900786178f9_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:28:48" (1/2) ...
[2020-11-25 00:28:48,419 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 00:28:48,419 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 00:28:48,419 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 00:28:48,419 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 00:28:48,419 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath
[2020-11-25 00:28:48,419 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath
[2020-11-25 00:28:48,420 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath
[2020-11-25 00:28:48,420 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath
[2020-11-25 00:28:48,420 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath
[2020-11-25 00:28:48,420 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath
[2020-11-25 00:28:48,420 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath
[2020-11-25 00:28:48,420 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath
[2020-11-25 00:28:48,420 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 00:28:48,420 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface
[2020-11-25 00:28:48,420 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface
[2020-11-25 00:28:48,420 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Interface
[2020-11-25 00:28:48,420 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Interface
[2020-11-25 00:28:48,421 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20Interface
[2020-11-25 00:28:48,421 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Interface
[2020-11-25 00:28:48,421 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Interface
[2020-11-25 00:28:48,421 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Interface
[2020-11-25 00:28:48,421 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__success
[2020-11-25 00:28:48,421 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack
[2020-11-25 00:28:48,421 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack
[2020-11-25 00:28:48,422 INFO  L130     BoogieDeclarations]: Found specification of procedure receiveApproval~address~uint256~address~bytes_ApproveAndCallFallBack
[2020-11-25 00:28:48,422 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 00:28:48,422 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned
[2020-11-25 00:28:48,422 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned
[2020-11-25 00:28:48,422 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned
[2020-11-25 00:28:48,422 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned
[2020-11-25 00:28:48,422 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned
[2020-11-25 00:28:48,422 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned
[2020-11-25 00:28:48,422 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned
[2020-11-25 00:28:48,422 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned
[2020-11-25 00:28:48,422 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned
[2020-11-25 00:28:48,422 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned
[2020-11-25 00:28:48,422 INFO  L130     BoogieDeclarations]: Found specification of procedure BazToken_BazToken_NoBaseCtor__success
[2020-11-25 00:28:48,423 INFO  L130     BoogieDeclarations]: Found specification of procedure BazToken_BazToken
[2020-11-25 00:28:48,423 INFO  L138     BoogieDeclarations]: Found implementation of procedure BazToken_BazToken
[2020-11-25 00:28:48,423 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BazToken
[2020-11-25 00:28:48,423 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BazToken
[2020-11-25 00:28:48,423 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BazToken
[2020-11-25 00:28:48,423 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BazToken
[2020-11-25 00:28:48,423 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BazToken
[2020-11-25 00:28:48,423 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BazToken
[2020-11-25 00:28:48,423 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_BazToken
[2020-11-25 00:28:48,423 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_BazToken
[2020-11-25 00:28:48,423 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_BazToken
[2020-11-25 00:28:48,423 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_BazToken
[2020-11-25 00:28:48,423 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_BazToken
[2020-11-25 00:28:48,424 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_BazToken
[2020-11-25 00:28:48,424 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_BazToken
[2020-11-25 00:28:48,424 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_BazToken
[2020-11-25 00:28:48,424 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_BazToken__success
[2020-11-25 00:28:48,424 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~uint256_BazToken
[2020-11-25 00:28:48,424 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~uint256_BazToken
[2020-11-25 00:28:48,424 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_BazToken
[2020-11-25 00:28:48,424 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_BazToken
[2020-11-25 00:28:48,424 INFO  L130     BoogieDeclarations]: Found specification of procedure name_BazToken
[2020-11-25 00:28:48,424 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_BazToken
[2020-11-25 00:28:48,424 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_BazToken
[2020-11-25 00:28:48,424 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_BazToken
[2020-11-25 00:28:48,424 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_BazToken
[2020-11-25 00:28:48,425 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_BazToken
[2020-11-25 00:28:48,425 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 00:28:48,425 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 00:28:48,425 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 00:28:48,425 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 00:28:48,425 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 00:28:48,425 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 00:28:48,425 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Interface
[2020-11-25 00:28:48,425 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Interface
[2020-11-25 00:28:48,425 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-25 00:28:48,426 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-25 00:28:48,426 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Owned
[2020-11-25 00:28:48,426 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Owned
[2020-11-25 00:28:48,426 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BazToken
[2020-11-25 00:28:48,426 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 00:28:48,426 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 00:28:48,426 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 00:28:48,426 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 00:28:48,426 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 00:28:48,427 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath__success
[2020-11-25 00:28:48,427 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath__fail
[2020-11-25 00:28:48,427 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath__success
[2020-11-25 00:28:48,427 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath__fail
[2020-11-25 00:28:48,427 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath__success
[2020-11-25 00:28:48,427 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath__fail
[2020-11-25 00:28:48,427 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath__success
[2020-11-25 00:28:48,427 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath__fail
[2020-11-25 00:28:48,427 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 00:28:48,427 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 00:28:48,428 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 00:28:48,428 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__fail
[2020-11-25 00:28:48,428 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__success
[2020-11-25 00:28:48,428 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__fail
[2020-11-25 00:28:48,428 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 00:28:48,428 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__success
[2020-11-25 00:28:48,428 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__fail
[2020-11-25 00:28:48,428 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__success
[2020-11-25 00:28:48,428 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__fail
[2020-11-25 00:28:48,428 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__success
[2020-11-25 00:28:48,429 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__fail
[2020-11-25 00:28:48,429 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__success
[2020-11-25 00:28:48,429 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__fail
[2020-11-25 00:28:48,429 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__success
[2020-11-25 00:28:48,429 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__fail
[2020-11-25 00:28:48,429 INFO  L130     BoogieDeclarations]: Found specification of procedure BazToken_BazToken_NoBaseCtor__fail
[2020-11-25 00:28:48,429 INFO  L130     BoogieDeclarations]: Found specification of procedure BazToken_BazToken__success
[2020-11-25 00:28:48,429 INFO  L130     BoogieDeclarations]: Found specification of procedure BazToken_BazToken__fail
[2020-11-25 00:28:48,429 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BazToken__success
[2020-11-25 00:28:48,430 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BazToken__fail
[2020-11-25 00:28:48,430 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BazToken__success
[2020-11-25 00:28:48,430 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BazToken__fail
[2020-11-25 00:28:48,430 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BazToken__success
[2020-11-25 00:28:48,430 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BazToken__fail
[2020-11-25 00:28:48,430 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_BazToken__success
[2020-11-25 00:28:48,430 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_BazToken__fail
[2020-11-25 00:28:48,430 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_BazToken__success
[2020-11-25 00:28:48,430 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_BazToken__fail
[2020-11-25 00:28:48,430 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_BazToken__success
[2020-11-25 00:28:48,431 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_BazToken__fail
[2020-11-25 00:28:48,431 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_BazToken__success
[2020-11-25 00:28:48,431 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_BazToken__fail
[2020-11-25 00:28:48,431 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_BazToken__fail
[2020-11-25 00:28:48,431 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~uint256_BazToken__success
[2020-11-25 00:28:48,431 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~uint256_BazToken__fail
[2020-11-25 00:28:48,431 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_BazToken__success
[2020-11-25 00:28:48,431 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_BazToken__fail
[2020-11-25 00:28:48,431 INFO  L130     BoogieDeclarations]: Found specification of procedure name_BazToken__success
[2020-11-25 00:28:48,431 INFO  L130     BoogieDeclarations]: Found specification of procedure name_BazToken__fail
[2020-11-25 00:28:48,432 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_BazToken__success
[2020-11-25 00:28:48,432 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_BazToken__fail
[2020-11-25 00:28:48,432 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_BazToken__success
[2020-11-25 00:28:48,432 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_BazToken__fail
[2020-11-25 00:28:48,432 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 00:28:48,432 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 00:28:48,432 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 00:28:48,432 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 00:28:48,432 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 00:28:48,432 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 00:28:48,433 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 00:28:48,433 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 00:28:48,433 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 00:28:48,433 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 00:28:48,433 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath__fail
[2020-11-25 00:28:48,433 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath__success
[2020-11-25 00:28:48,433 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath__fail
[2020-11-25 00:28:48,433 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath__success
[2020-11-25 00:28:48,433 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath__fail
[2020-11-25 00:28:48,434 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath__success
[2020-11-25 00:28:48,434 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath__fail
[2020-11-25 00:28:48,434 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath__success
[2020-11-25 00:28:48,434 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 00:28:48,434 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 00:28:48,434 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 00:28:48,434 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 00:28:48,435 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__fail
[2020-11-25 00:28:48,435 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__success
[2020-11-25 00:28:48,435 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__fail
[2020-11-25 00:28:48,435 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__success
[2020-11-25 00:28:48,435 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 00:28:48,435 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 00:28:48,435 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__fail
[2020-11-25 00:28:48,435 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__success
[2020-11-25 00:28:48,435 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__fail
[2020-11-25 00:28:48,435 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__success
[2020-11-25 00:28:48,436 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__fail
[2020-11-25 00:28:48,436 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__success
[2020-11-25 00:28:48,436 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__fail
[2020-11-25 00:28:48,436 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__success
[2020-11-25 00:28:48,436 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__fail
[2020-11-25 00:28:48,436 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__success
[2020-11-25 00:28:48,436 INFO  L138     BoogieDeclarations]: Found implementation of procedure BazToken_BazToken_NoBaseCtor__fail
[2020-11-25 00:28:48,436 INFO  L138     BoogieDeclarations]: Found implementation of procedure BazToken_BazToken_NoBaseCtor__success
[2020-11-25 00:28:48,436 INFO  L138     BoogieDeclarations]: Found implementation of procedure BazToken_BazToken__fail
[2020-11-25 00:28:48,436 INFO  L138     BoogieDeclarations]: Found implementation of procedure BazToken_BazToken__success
[2020-11-25 00:28:48,437 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BazToken__fail
[2020-11-25 00:28:48,437 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BazToken__success
[2020-11-25 00:28:48,437 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BazToken__fail
[2020-11-25 00:28:48,437 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BazToken__success
[2020-11-25 00:28:48,437 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BazToken__fail
[2020-11-25 00:28:48,437 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BazToken__success
[2020-11-25 00:28:48,437 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_BazToken__fail
[2020-11-25 00:28:48,437 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_BazToken__success
[2020-11-25 00:28:48,437 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_BazToken__fail
[2020-11-25 00:28:48,437 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_BazToken__success
[2020-11-25 00:28:48,437 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_BazToken__fail
[2020-11-25 00:28:48,437 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_BazToken__success
[2020-11-25 00:28:48,438 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_BazToken__fail
[2020-11-25 00:28:48,438 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_BazToken__success
[2020-11-25 00:28:48,438 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_BazToken__fail
[2020-11-25 00:28:48,438 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_BazToken__success
[2020-11-25 00:28:48,438 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~uint256_BazToken__fail
[2020-11-25 00:28:48,438 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~uint256_BazToken__success
[2020-11-25 00:28:48,438 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_BazToken__fail
[2020-11-25 00:28:48,438 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_BazToken__success
[2020-11-25 00:28:48,438 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_BazToken__fail
[2020-11-25 00:28:48,438 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_BazToken__success
[2020-11-25 00:28:48,438 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_BazToken__fail
[2020-11-25 00:28:48,438 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_BazToken__success
[2020-11-25 00:28:48,439 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_BazToken__fail
[2020-11-25 00:28:48,439 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_BazToken__success
[2020-11-25 00:28:48,439 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 00:28:48,439 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 00:28:48,439 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 00:28:48,439 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 00:28:48,439 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 00:28:48,439 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 00:28:48,439 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 00:28:48,439 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 00:28:48,439 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 00:28:48,439 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 00:28:48,440 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Interface
[2020-11-25 00:28:48,440 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Interface
[2020-11-25 00:28:48,440 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-25 00:28:48,440 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-25 00:28:48,440 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Owned
[2020-11-25 00:28:48,440 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Owned
[2020-11-25 00:28:48,440 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BazToken
[2020-11-25 00:28:48,440 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 00:28:48,440 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 00:28:48,440 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 00:28:48,834 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 00:28:48,834 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 00:28:49,098 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 00:28:49,099 INFO  L286             CfgBuilder]: Removed 5 assue(true) statements.
[2020-11-25 00:28:49,100 INFO  L202        PluginConnector]: Adding new model BazToken_0xb020ed54651831878e5c967e0953a900786178f9_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:28:49 BoogieIcfgContainer
[2020-11-25 00:28:49,100 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:28:48" (2/2) ...
[2020-11-25 00:28:49,101 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 00:28:49,101 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@bd9e8db and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:28:49, skipping insertion in model container
[2020-11-25 00:28:49,101 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 00:28:49,101 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 00:28:49,101 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 00:28:49,103 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 00:28:49,103 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "BazToken_0xb020ed54651831878e5c967e0953a900786178f9_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:28:48" (1/3) ...
[2020-11-25 00:28:49,103 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@368feef5 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:28:49, skipping insertion in model container
[2020-11-25 00:28:49,103 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:28:48" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 00:28:49,138 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:28:49 NWAContainer
[2020-11-25 00:28:49,138 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 00:28:49,138 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 00:28:49,139 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 00:28:49,139 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 00:28:49,140 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "BazToken_0xb020ed54651831878e5c967e0953a900786178f9_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:28:49" (3/4) ...
[2020-11-25 00:28:49,141 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@436f770 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:28:49, skipping insertion in model container
[2020-11-25 00:28:49,141 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:28:49" (4/4) ...
[2020-11-25 00:28:49,144 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 00:28:49,147 INFO  L110   BuchiProductObserver]: Initial RCFG 1562 locations, 1973 edges
[2020-11-25 00:28:49,147 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 00:28:49,158 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 00:28:50,392 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 00:28:50,396 INFO  L110   BuchiProductObserver]: BuchiProgram size 3716 locations, 6393 edges
[2020-11-25 00:28:50,397 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:28:50 BoogieIcfgContainer
[2020-11-25 00:28:50,397 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 00:28:50,397 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 00:28:50,397 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 00:28:50,399 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 00:28:50,399 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:28:50" (1/1) ...
[2020-11-25 00:28:50,476 INFO  L313           BlockEncoder]: Initial Icfg 3716 locations, 6393 edges
[2020-11-25 00:28:50,476 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 00:28:50,477 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 00:28:50,477 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 00:28:50,477 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 00:28:50,489 INFO  L70    emoveInfeasibleEdges]: Removed 90 edges and 13 locations because of local infeasibility
[2020-11-25 00:28:50,503 INFO  L70        RemoveSinkStates]: Removed 80 edges and 46 locations by removing sink states
[2020-11-25 00:28:50,517 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 00:28:50,523 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 00:28:50,527 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 00:28:50,527 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 00:28:50,532 INFO  L313           BlockEncoder]: Encoded RCFG 3635 locations, 6191 edges
[2020-11-25 00:28:50,533 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 12:28:50 BasicIcfg
[2020-11-25 00:28:50,533 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 00:28:50,533 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 00:28:50,533 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 00:28:50,535 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 00:28:50,536 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 00:28:50,536 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "BazToken_0xb020ed54651831878e5c967e0953a900786178f9_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:28:48" (1/6) ...
[2020-11-25 00:28:50,538 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3404c20e and model type BazToken_0xb020ed54651831878e5c967e0953a900786178f9_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 12:28:50, skipping insertion in model container
[2020-11-25 00:28:50,538 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 00:28:50,538 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:28:48" (2/6) ...
[2020-11-25 00:28:50,538 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3404c20e and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 12:28:50, skipping insertion in model container
[2020-11-25 00:28:50,538 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 00:28:50,538 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "BazToken_0xb020ed54651831878e5c967e0953a900786178f9_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:28:49" (3/6) ...
[2020-11-25 00:28:50,538 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3404c20e and model type BazToken_0xb020ed54651831878e5c967e0953a900786178f9_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 12:28:50, skipping insertion in model container
[2020-11-25 00:28:50,538 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 00:28:50,538 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:28:49" (4/6) ...
[2020-11-25 00:28:50,539 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3404c20e and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 12:28:50, skipping insertion in model container
[2020-11-25 00:28:50,539 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 00:28:50,539 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:28:50" (5/6) ...
[2020-11-25 00:28:50,539 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3404c20e and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 12:28:50, skipping insertion in model container
[2020-11-25 00:28:50,539 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 00:28:50,539 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 12:28:50" (6/6) ...
[2020-11-25 00:28:50,540 INFO  L404   chiAutomizerObserver]: Analyzing ICFG BazToken_0xb020ed54651831878e5c967e0953a900786178f9_transferfrom-fail.bpl_BEv2
[2020-11-25 00:28:50,578 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 00:28:50,579 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 00:28:50,579 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 00:28:50,579 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 00:28:50,579 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 00:28:50,579 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 00:28:50,579 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 00:28:50,579 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 00:28:50,579 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 00:28:50,611 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3635 states.
[2020-11-25 00:28:50,661 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:28:50,661 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:28:50,661 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:28:50,670 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:28:50,670 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:28:50,670 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 00:28:50,670 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3635 states.
[2020-11-25 00:28:50,691 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:28:50,692 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:28:50,692 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:28:50,694 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:28:50,694 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_BazToken0 := false;
[L2]                 call_transferFrom_BazToken0 := false;
[L2]     CALL        call main();
[L4250]              assume null == 0;
[L4251]  CALL        call this := FreshRefGenerator__success();
[L1927]              havoc newRef;
[L1928]              assume Alloc[newRef] == false;
[L1929]              Alloc[newRef] := true;
[L1930]              assume newRef != null;
[L4251]  RET         call this := FreshRefGenerator__success();
[L4252]              assume now >= 0;
[L4253]              assume DType[this] == BazToken;
[L4254]              assume msgvalue_MSG == 0;
[L4255]              gas := gas - 53000;
[L4256]  CALL        call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L768]               havoc __exception;
[L769]               revert := false;
[L770]   COND FALSE  !(__exception)
[L793]   CALL        call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2275]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2063]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2048]              assume msgsender_MSG != null;
[L2049]              Balance[this] := 0;
[L2063]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  COND FALSE  !(revert)
[L2275]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  COND TRUE   revert
[L793]   RET         call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L794]               assume !revert && gas >= 0;
[L4256]  RET         call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L4257]              assume !revert && gas >= 0;

Loop:
[L4260]  CALL        call CorralChoice_BazToken(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != BazToken;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND TRUE   choice == 20
[L4110]              gas := gas - 21000;
[L4111]  COND FALSE  !(gas >= 0)
[L4260]  RET         call CorralChoice_BazToken(this);

[2020-11-25 00:28:50,710 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:28:50,710 INFO  L82        PathProgramCache]: Analyzing trace with hash 1995526642, now seen corresponding path program 1 times
[2020-11-25 00:28:50,714 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:28:50,735 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:28:50,772 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 00:28:50,774 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:28:50,774 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 00:28:50,777 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:28:50,963 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 00:28:50,963 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 00:28:50,964 INFO  L87              Difference]: Start difference. First operand 3635 states. Second operand 3 states.
[2020-11-25 00:28:51,126 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:28:51,126 INFO  L93              Difference]: Finished difference Result 2459 states and 2680 transitions.
[2020-11-25 00:28:51,126 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 00:28:51,127 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2459 states and 2680 transitions.
[2020-11-25 00:28:51,140 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:28:51,157 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2459 states to 2459 states and 2680 transitions.
[2020-11-25 00:28:51,157 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-25 00:28:51,160 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 943
[2020-11-25 00:28:51,160 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2459 states and 2680 transitions.
[2020-11-25 00:28:51,166 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:28:51,166 INFO  L728         BuchiCegarLoop]: Abstraction has 2459 states and 2680 transitions.
[2020-11-25 00:28:51,180 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2459 states and 2680 transitions.
[2020-11-25 00:28:51,220 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2459 to 2459.
[2020-11-25 00:28:51,220 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2459 states.
[2020-11-25 00:28:51,225 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2459 states to 2459 states and 2680 transitions.
[2020-11-25 00:28:51,226 INFO  L751         BuchiCegarLoop]: Abstraction has 2459 states and 2680 transitions.
[2020-11-25 00:28:51,226 INFO  L631         BuchiCegarLoop]: Abstraction has 2459 states and 2680 transitions.
[2020-11-25 00:28:51,226 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 00:28:51,226 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2459 states and 2680 transitions.
[2020-11-25 00:28:51,233 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:28:51,233 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:28:51,233 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:28:51,235 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:28:51,235 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_BazToken0 := false;
[L2]                 call_transferFrom_BazToken0 := false;
[L2]     CALL        call main();
[L4250]              assume null == 0;
[L4251]  CALL        call this := FreshRefGenerator__success();
[L1927]              havoc newRef;
[L1928]              assume Alloc[newRef] == false;
[L1929]              Alloc[newRef] := true;
[L1930]              assume newRef != null;
[L4251]  RET         call this := FreshRefGenerator__success();
[L4252]              assume now >= 0;
[L4253]              assume DType[this] == BazToken;
[L4254]              assume msgvalue_MSG == 0;
[L4255]              gas := gas - 53000;
[L4256]  CALL        call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L768]               havoc __exception;
[L769]               revert := false;
[L770]   COND FALSE  !(__exception)
[L793]   CALL        call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2275]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2063]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2048]              assume msgsender_MSG != null;
[L2049]              Balance[this] := 0;
[L2063]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  COND FALSE  !(revert)
[L2275]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  COND TRUE   revert
[L793]   RET         call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L794]               assume !revert && gas >= 0;
[L4256]  RET         call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L4257]              assume !revert && gas >= 0;
[L4260]  CALL        call CorralChoice_BazToken(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != BazToken;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND FALSE  !(choice == 20)
[L4117]  COND FALSE  !(choice == 19)
[L4125]  COND FALSE  !(choice == 18)
[L4133]  COND FALSE  !(choice == 17)
[L4141]  COND FALSE  !(choice == 16)
[L4147]  COND FALSE  !(choice == 15)
[L4153]  COND FALSE  !(choice == 14)
[L4159]  COND FALSE  !(choice == 13)
[L4166]  COND FALSE  !(choice == 12)
[L4173]  COND TRUE   choice == 11
[L4174]              gas := gas - 21000;
[L4175]  COND TRUE   gas >= 0
[L4176]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4177]              assume msgvalue_MSG == 0;
[L4178]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s458 != to_s458 && ((tokens_s458 > balances_BazToken[this][from_s458] || tokens_s458 > allowed_BazToken[this][from_s458][msgsender_MSG]) || balances_BazToken[this][to_s458] + tokens_s458 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][to_s458] >= 0) && balances_BazToken[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][from_s458] >= 0) && balances_BazToken[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_BazToken[this][from_s458][msgsender_MSG] >= 0) && allowed_BazToken[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_BazToken0 := true;
[L2]                 call_transferFrom_BazToken0 := false;
[L2]                 revert := revert_hold;
[L1046]              havoc __exception;
[L1047]              revert := false;
[L1048]  COND FALSE  !(__exception)
[L1071]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2448]  COND TRUE   DType[this] == BazToken
[L2449]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][from_s458], tokens_s458);
[L1994]  COND TRUE   !(b_s45 <= a_s45)
[L1995]              revert := true;
[L2449]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][from_s458], tokens_s458);
[L2450]  COND TRUE   revert
[L1071]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1072]              assume !revert && gas >= 0;
[L4178]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4260]  RET         call CorralChoice_BazToken(this);

Loop:
[L4260]  CALL        call CorralChoice_BazToken(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != BazToken;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND FALSE  !(choice == 20)
[L4117]  COND FALSE  !(choice == 19)
[L4125]  COND FALSE  !(choice == 18)
[L4133]  COND FALSE  !(choice == 17)
[L4141]  COND FALSE  !(choice == 16)
[L4147]  COND FALSE  !(choice == 15)
[L4153]  COND FALSE  !(choice == 14)
[L4159]  COND FALSE  !(choice == 13)
[L4166]  COND FALSE  !(choice == 12)
[L4173]  COND TRUE   choice == 11
[L4174]              gas := gas - 21000;
[L4175]  COND TRUE   gas >= 0
[L4176]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4177]              assume msgvalue_MSG == 0;
[L4178]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s458 != to_s458 && ((tokens_s458 > balances_BazToken[this][from_s458] || tokens_s458 > allowed_BazToken[this][from_s458][msgsender_MSG]) || balances_BazToken[this][to_s458] + tokens_s458 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][to_s458] >= 0) && balances_BazToken[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][from_s458] >= 0) && balances_BazToken[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_BazToken[this][from_s458][msgsender_MSG] >= 0) && allowed_BazToken[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_BazToken0 := true;
[L2]                 call_transferFrom_BazToken0 := false;
[L2]                 revert := revert_hold;
[L1046]              havoc __exception;
[L1047]              revert := false;
[L1048]  COND FALSE  !(__exception)
[L1071]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2448]  COND TRUE   DType[this] == BazToken
[L2449]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][from_s458], tokens_s458);
[L1994]  COND TRUE   !(b_s45 <= a_s45)
[L1995]              revert := true;
[L2449]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][from_s458], tokens_s458);
[L2450]  COND TRUE   revert
[L1071]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1072]              assume !revert && gas >= 0;
[L4178]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4260]  RET         call CorralChoice_BazToken(this);

[2020-11-25 00:28:51,240 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:28:51,240 INFO  L82        PathProgramCache]: Analyzing trace with hash 813115597, now seen corresponding path program 1 times
[2020-11-25 00:28:51,241 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:28:51,255 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:28:51,278 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 00:28:51,279 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:28:51,279 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 00:28:51,280 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:28:51,280 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 00:28:51,280 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 00:28:51,280 INFO  L87              Difference]: Start difference. First operand 2459 states and 2680 transitions. cyclomatic complexity: 223 Second operand 4 states.
[2020-11-25 00:28:51,660 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:28:51,661 INFO  L93              Difference]: Finished difference Result 3193 states and 3522 transitions.
[2020-11-25 00:28:51,661 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 00:28:51,661 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3193 states and 3522 transitions.
[2020-11-25 00:28:51,678 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 00:28:51,693 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3193 states to 3073 states and 3394 transitions.
[2020-11-25 00:28:51,693 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1132
[2020-11-25 00:28:51,694 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1132
[2020-11-25 00:28:51,695 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3073 states and 3394 transitions.
[2020-11-25 00:28:51,699 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:28:51,699 INFO  L728         BuchiCegarLoop]: Abstraction has 3073 states and 3394 transitions.
[2020-11-25 00:28:51,702 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3073 states and 3394 transitions.
[2020-11-25 00:28:51,732 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3073 to 2666.
[2020-11-25 00:28:51,732 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2666 states.
[2020-11-25 00:28:51,736 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2666 states to 2666 states and 2886 transitions.
[2020-11-25 00:28:51,736 INFO  L751         BuchiCegarLoop]: Abstraction has 2666 states and 2886 transitions.
[2020-11-25 00:28:51,736 INFO  L631         BuchiCegarLoop]: Abstraction has 2666 states and 2886 transitions.
[2020-11-25 00:28:51,736 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 00:28:51,736 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2666 states and 2886 transitions.
[2020-11-25 00:28:51,743 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 00:28:51,744 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:28:51,744 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:28:51,746 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:28:51,746 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_BazToken0 := false;
[L2]                 call_transferFrom_BazToken0 := false;
[L2]     CALL        call main();
[L4250]              assume null == 0;
[L4251]  CALL        call this := FreshRefGenerator__success();
[L1927]              havoc newRef;
[L1928]              assume Alloc[newRef] == false;
[L1929]              Alloc[newRef] := true;
[L1930]              assume newRef != null;
[L4251]  RET         call this := FreshRefGenerator__success();
[L4252]              assume now >= 0;
[L4253]              assume DType[this] == BazToken;
[L4254]              assume msgvalue_MSG == 0;
[L4255]              gas := gas - 53000;
[L4256]  CALL        call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L768]               havoc __exception;
[L769]               revert := false;
[L770]   COND FALSE  !(__exception)
[L793]   CALL        call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2275]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2063]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2048]              assume msgsender_MSG != null;
[L2049]              Balance[this] := 0;
[L2063]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  COND FALSE  !(revert)
[L2275]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  COND FALSE  !(revert)
[L2279]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2133]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]              assume msgsender_MSG != null;
[L2116]              Balance[this] := 0;
[L2117]              owner_Owned[this] := null;
[L2118]              newOwner_Owned[this] := null;
[L2120]              owner_Owned[this] := msgsender_MSG;
[L2133]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  COND FALSE  !(revert)
[L2279]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2280]  COND FALSE  !(revert)
[L2283]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1959]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1944]              assume msgsender_MSG != null;
[L1945]              Balance[this] := 0;
[L1959]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  COND FALSE  !(revert)
[L2283]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2284]  COND FALSE  !(revert)
[L2287]  CALL        call BazToken_BazToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2232]              assume msgsender_MSG != null;
[L2233]              Balance[this] := 0;
[L2234]              symbol_BazToken[this] := -428571439;
[L2235]              name_BazToken[this] := -428571439;
[L2236]              decimals_BazToken[this] := 0;
[L2237]              _totalSupply_BazToken[this] := 0;
[L2238]              balances_BazToken[this] := zeroRefintArr();
[L2239]              sum_balances0[this] := 0;
[L2240]              allowed_BazToken[this] := zeroRefRefintArr();
[L2241]              sum_allowed1[this] := 0;
[L2243]              symbol_BazToken[this] := 1231671027;
[L2244]              name_BazToken[this] := 1319453082;
[L2245]              decimals_BazToken[this] := 18;
[L2246]              _totalSupply_BazToken[this] := 2500000000000000000000000;
[L2247]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][-213091748074002454629334339881517515996861043291];
[L2248]              balances_BazToken[this][-213091748074002454629334339881517515996861043291] := _totalSupply_BazToken[this];
[L2249]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][-213091748074002454629334339881517515996861043291];
[L2250]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2287]  RET         call BazToken_BazToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2288]  COND FALSE  !(revert)
[L793]   RET         call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L794]               assume !revert && gas >= 0;
[L4256]  RET         call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L4257]              assume !revert && gas >= 0;
[L4260]  CALL        call CorralChoice_BazToken(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != BazToken;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND FALSE  !(choice == 20)
[L4117]  COND FALSE  !(choice == 19)
[L4125]  COND FALSE  !(choice == 18)
[L4133]  COND FALSE  !(choice == 17)
[L4141]  COND FALSE  !(choice == 16)
[L4147]  COND FALSE  !(choice == 15)
[L4153]  COND FALSE  !(choice == 14)
[L4159]  COND FALSE  !(choice == 13)
[L4166]  COND FALSE  !(choice == 12)
[L4173]  COND TRUE   choice == 11
[L4174]              gas := gas - 21000;
[L4175]  COND TRUE   gas >= 0
[L4176]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4177]              assume msgvalue_MSG == 0;
[L4178]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s458 != to_s458 && ((tokens_s458 > balances_BazToken[this][from_s458] || tokens_s458 > allowed_BazToken[this][from_s458][msgsender_MSG]) || balances_BazToken[this][to_s458] + tokens_s458 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][to_s458] >= 0) && balances_BazToken[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][from_s458] >= 0) && balances_BazToken[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_BazToken[this][from_s458][msgsender_MSG] >= 0) && allowed_BazToken[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_BazToken0 := true;
[L2]                 call_transferFrom_BazToken0 := false;
[L2]                 revert := revert_hold;
[L1046]              havoc __exception;
[L1047]              revert := false;
[L1048]  COND FALSE  !(__exception)
[L1071]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2448]  COND TRUE   DType[this] == BazToken
[L2449]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][from_s458], tokens_s458);
[L1994]  COND FALSE  !(!(b_s45 <= a_s45))
[L1998]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2449]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][from_s458], tokens_s458);
[L2450]  COND FALSE  !(revert)
[L2456]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][from_s458];
[L2457]              balances_BazToken[this][from_s458] := __var_5;
[L2458]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][from_s458];
[L2459]  COND TRUE   DType[this] == BazToken
[L2460]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L1994]  COND FALSE  !(!(b_s45 <= a_s45))
[L1998]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2460]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L2461]  COND FALSE  !(revert)
[L2467]              sum_allowed1[from_s458] := sum_allowed1[from_s458] - allowed_BazToken[this][from_s458][msgsender_MSG];
[L2468]              allowed_BazToken[this][from_s458][msgsender_MSG] := __var_6;
[L2469]              sum_allowed1[from_s458] := sum_allowed1[from_s458] + allowed_BazToken[this][from_s458][msgsender_MSG];
[L2470]  COND TRUE   DType[this] == BazToken
[L2471]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s458], tokens_s458);
[L1976]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1977]  COND FALSE  !(!(c_s23 >= a_s23))
[L2471]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s458], tokens_s458);
[L2472]  COND FALSE  !(revert)
[L2478]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][to_s458];
[L2479]              balances_BazToken[this][to_s458] := __var_7;
[L2480]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][to_s458];
[L2481]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2482]              success_s458 := true;
[L1071]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1072]              assume !revert && gas >= 0;
[L4178]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4260]  RET         call CorralChoice_BazToken(this);

Loop:
[L4260]  CALL        call CorralChoice_BazToken(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != BazToken;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND FALSE  !(choice == 20)
[L4117]  COND FALSE  !(choice == 19)
[L4125]  COND FALSE  !(choice == 18)
[L4133]  COND FALSE  !(choice == 17)
[L4141]  COND FALSE  !(choice == 16)
[L4147]  COND FALSE  !(choice == 15)
[L4153]  COND FALSE  !(choice == 14)
[L4159]  COND FALSE  !(choice == 13)
[L4166]  COND FALSE  !(choice == 12)
[L4173]  COND TRUE   choice == 11
[L4174]              gas := gas - 21000;
[L4175]  COND TRUE   gas >= 0
[L4176]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4177]              assume msgvalue_MSG == 0;
[L4178]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s458 != to_s458 && ((tokens_s458 > balances_BazToken[this][from_s458] || tokens_s458 > allowed_BazToken[this][from_s458][msgsender_MSG]) || balances_BazToken[this][to_s458] + tokens_s458 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][to_s458] >= 0) && balances_BazToken[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][from_s458] >= 0) && balances_BazToken[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_BazToken[this][from_s458][msgsender_MSG] >= 0) && allowed_BazToken[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_BazToken0 := true;
[L2]                 call_transferFrom_BazToken0 := false;
[L2]                 revert := revert_hold;
[L1046]              havoc __exception;
[L1047]              revert := false;
[L1048]  COND FALSE  !(__exception)
[L1071]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2448]  COND TRUE   DType[this] == BazToken
[L2449]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][from_s458], tokens_s458);
[L1994]  COND FALSE  !(!(b_s45 <= a_s45))
[L1998]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2449]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][from_s458], tokens_s458);
[L2450]  COND FALSE  !(revert)
[L2456]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][from_s458];
[L2457]              balances_BazToken[this][from_s458] := __var_5;
[L2458]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][from_s458];
[L2459]  COND TRUE   DType[this] == BazToken
[L2460]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L1994]  COND FALSE  !(!(b_s45 <= a_s45))
[L1998]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2460]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L2461]  COND FALSE  !(revert)
[L2467]              sum_allowed1[from_s458] := sum_allowed1[from_s458] - allowed_BazToken[this][from_s458][msgsender_MSG];
[L2468]              allowed_BazToken[this][from_s458][msgsender_MSG] := __var_6;
[L2469]              sum_allowed1[from_s458] := sum_allowed1[from_s458] + allowed_BazToken[this][from_s458][msgsender_MSG];
[L2470]  COND TRUE   DType[this] == BazToken
[L2471]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s458], tokens_s458);
[L1976]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1977]  COND FALSE  !(!(c_s23 >= a_s23))
[L2471]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s458], tokens_s458);
[L2472]  COND FALSE  !(revert)
[L2478]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][to_s458];
[L2479]              balances_BazToken[this][to_s458] := __var_7;
[L2480]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][to_s458];
[L2481]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2482]              success_s458 := true;
[L1071]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1072]              assume !revert && gas >= 0;
[L4178]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4260]  RET         call CorralChoice_BazToken(this);

[2020-11-25 00:28:51,750 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:28:51,750 INFO  L82        PathProgramCache]: Analyzing trace with hash 1300532086, now seen corresponding path program 1 times
[2020-11-25 00:28:51,751 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:28:51,770 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:28:52,108 INFO  L134       CoverageAnalysis]: Checked inductivity of 4 backedges. 0 proven. 3 refuted. 0 times theorem prover too weak. 1 trivial. 0 not checked.
[2020-11-25 00:28:52,109 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:28:52,110 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [18] total 18
[2020-11-25 00:28:52,111 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:28:52,111 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 19 interpolants.
[2020-11-25 00:28:52,111 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=42, Invalid=300, Unknown=0, NotChecked=0, Total=342
[2020-11-25 00:28:52,111 INFO  L87              Difference]: Start difference. First operand 2666 states and 2886 transitions. cyclomatic complexity: 222 Second operand 19 states.
[2020-11-25 00:28:54,803 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:28:54,803 INFO  L93              Difference]: Finished difference Result 2768 states and 3000 transitions.
[2020-11-25 00:28:54,803 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 18 states. 
[2020-11-25 00:28:54,803 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2768 states and 3000 transitions.
[2020-11-25 00:28:54,810 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 00:28:54,817 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2768 states to 2768 states and 3000 transitions.
[2020-11-25 00:28:54,817 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1070
[2020-11-25 00:28:54,818 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1070
[2020-11-25 00:28:54,818 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2768 states and 3000 transitions.
[2020-11-25 00:28:54,820 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:28:54,820 INFO  L728         BuchiCegarLoop]: Abstraction has 2768 states and 3000 transitions.
[2020-11-25 00:28:54,822 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2768 states and 3000 transitions.
[2020-11-25 00:28:54,839 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2768 to 2545.
[2020-11-25 00:28:54,839 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2545 states.
[2020-11-25 00:28:54,842 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2545 states to 2545 states and 2728 transitions.
[2020-11-25 00:28:54,842 INFO  L751         BuchiCegarLoop]: Abstraction has 2545 states and 2728 transitions.
[2020-11-25 00:28:54,842 INFO  L631         BuchiCegarLoop]: Abstraction has 2545 states and 2728 transitions.
[2020-11-25 00:28:54,842 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 00:28:54,842 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2545 states and 2728 transitions.
[2020-11-25 00:28:54,846 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:28:54,847 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:28:54,847 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:28:54,849 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:28:54,849 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_BazToken0 := false;
[L2]                 call_transferFrom_BazToken0 := false;
[L2]     CALL        call main();
[L4250]              assume null == 0;
[L4251]  CALL        call this := FreshRefGenerator__success();
[L1927]              havoc newRef;
[L1928]              assume Alloc[newRef] == false;
[L1929]              Alloc[newRef] := true;
[L1930]              assume newRef != null;
[L4251]  RET         call this := FreshRefGenerator__success();
[L4252]              assume now >= 0;
[L4253]              assume DType[this] == BazToken;
[L4254]              assume msgvalue_MSG == 0;
[L4255]              gas := gas - 53000;
[L4256]  CALL        call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L768]               havoc __exception;
[L769]               revert := false;
[L770]   COND TRUE   __exception
[L771]               __tmp__Balance := Balance;
[L772]               __tmp__DType := DType;
[L773]               __tmp__Alloc := Alloc;
[L774]               __tmp__balance_ADDR := balance_ADDR;
[L775]               __tmp__M_Ref_int := M_Ref_int;
[L776]               __tmp__sum_balances0 := sum_balances0;
[L777]               __tmp__alloc_allowed_BazToken_lvl0 := alloc_allowed_BazToken_lvl0;
[L778]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L779]               __tmp__sum_allowed1 := sum_allowed1;
[L780]               __tmp__Length := Length;
[L781]               __tmp__now := now;
[L782]               __tmp__owner_Owned := owner_Owned;
[L783]               __tmp__newOwner_Owned := newOwner_Owned;
[L784]               __tmp__symbol_BazToken := symbol_BazToken;
[L785]               __tmp__name_BazToken := name_BazToken;
[L786]               __tmp__decimals_BazToken := decimals_BazToken;
[L787]               __tmp___totalSupply_BazToken := _totalSupply_BazToken;
[L788]               __tmp__balances_BazToken := balances_BazToken;
[L789]               __tmp__allowed_BazToken := allowed_BazToken;
[L790]   CALL        call BazToken_BazToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L2255]  CALL        call ERC20Interface_ERC20Interface__fail(this, msgsender_MSG, msgvalue_MSG);
[L2055]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2040]              assume msgsender_MSG != null;
[L2041]              __tmp__Balance[this] := 0;
[L2055]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2056]  COND FALSE  !(revert)
[L2255]  RET         call ERC20Interface_ERC20Interface__fail(this, msgsender_MSG, msgvalue_MSG);
[L2256]  COND FALSE  !(revert)
[L2259]  CALL        call Owned_Owned__fail(this, msgsender_MSG, msgvalue_MSG);
[L2125]  CALL        call Owned_Owned_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2104]              assume msgsender_MSG != null;
[L2105]              __tmp__Balance[this] := 0;
[L2106]              __tmp__owner_Owned[this] := null;
[L2107]              __tmp__newOwner_Owned[this] := null;
[L2109]              __tmp__owner_Owned[this] := msgsender_MSG;
[L2125]  RET         call Owned_Owned_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2126]  COND FALSE  !(revert)
[L2259]  RET         call Owned_Owned__fail(this, msgsender_MSG, msgvalue_MSG);
[L2260]  COND FALSE  !(revert)
[L2263]  CALL        call SafeMath_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG);
[L1951]  CALL        call SafeMath_SafeMath_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1936]              assume msgsender_MSG != null;
[L1937]              __tmp__Balance[this] := 0;
[L1951]  RET         call SafeMath_SafeMath_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1952]  COND FALSE  !(revert)
[L2263]  RET         call SafeMath_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG);
[L2264]  COND FALSE  !(revert)
[L2267]  CALL        call BazToken_BazToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2209]              assume msgsender_MSG != null;
[L2210]              __tmp__Balance[this] := 0;
[L2211]              __tmp__symbol_BazToken[this] := -428571439;
[L2212]              __tmp__name_BazToken[this] := -428571439;
[L2213]              __tmp__decimals_BazToken[this] := 0;
[L2214]              __tmp___totalSupply_BazToken[this] := 0;
[L2215]              __tmp__balances_BazToken[this] := zeroRefintArr();
[L2216]              __tmp__sum_balances0[this] := 0;
[L2217]              __tmp__allowed_BazToken[this] := zeroRefRefintArr();
[L2218]              __tmp__sum_allowed1[this] := 0;
[L2220]              __tmp__symbol_BazToken[this] := 1231671027;
[L2221]              __tmp__name_BazToken[this] := 1319453082;
[L2222]              __tmp__decimals_BazToken[this] := 18;
[L2223]              __tmp___totalSupply_BazToken[this] := 2500000000000000000000000;
[L2224]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_BazToken[this][-213091748074002454629334339881517515996861043291];
[L2225]              __tmp__balances_BazToken[this][-213091748074002454629334339881517515996861043291] := __tmp___totalSupply_BazToken[this];
[L2226]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_BazToken[this][-213091748074002454629334339881517515996861043291];
[L2267]  RET         call BazToken_BazToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2268]  COND FALSE  !(revert)
[L790]   RET         call BazToken_BazToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L791]               assume revert || gas < 0;
[L4256]  RET         call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L4257]              assume !revert && gas >= 0;
[L4260]  CALL        call CorralChoice_BazToken(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != BazToken;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND FALSE  !(choice == 20)
[L4117]  COND FALSE  !(choice == 19)
[L4125]  COND FALSE  !(choice == 18)
[L4133]  COND FALSE  !(choice == 17)
[L4141]  COND FALSE  !(choice == 16)
[L4147]  COND FALSE  !(choice == 15)
[L4153]  COND FALSE  !(choice == 14)
[L4159]  COND FALSE  !(choice == 13)
[L4166]  COND FALSE  !(choice == 12)
[L4173]  COND TRUE   choice == 11
[L4174]              gas := gas - 21000;
[L4175]  COND TRUE   gas >= 0
[L4176]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4177]              assume msgvalue_MSG == 0;
[L4178]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s458 != to_s458 && ((tokens_s458 > balances_BazToken[this][from_s458] || tokens_s458 > allowed_BazToken[this][from_s458][msgsender_MSG]) || balances_BazToken[this][to_s458] + tokens_s458 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][to_s458] >= 0) && balances_BazToken[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][from_s458] >= 0) && balances_BazToken[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_BazToken[this][from_s458][msgsender_MSG] >= 0) && allowed_BazToken[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_BazToken0 := true;
[L2]                 call_transferFrom_BazToken0 := false;
[L2]                 revert := revert_hold;
[L1046]              havoc __exception;
[L1047]              revert := false;
[L1048]  COND FALSE  !(__exception)
[L1071]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2448]  COND TRUE   DType[this] == BazToken
[L2449]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][from_s458], tokens_s458);
[L1994]  COND FALSE  !(!(b_s45 <= a_s45))
[L1998]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2449]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][from_s458], tokens_s458);
[L2450]  COND FALSE  !(revert)
[L2456]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][from_s458];
[L2457]              balances_BazToken[this][from_s458] := __var_5;
[L2458]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][from_s458];
[L2459]  COND TRUE   DType[this] == BazToken
[L2460]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L1994]  COND FALSE  !(!(b_s45 <= a_s45))
[L1998]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2460]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L2461]  COND FALSE  !(revert)
[L2467]              sum_allowed1[from_s458] := sum_allowed1[from_s458] - allowed_BazToken[this][from_s458][msgsender_MSG];
[L2468]              allowed_BazToken[this][from_s458][msgsender_MSG] := __var_6;
[L2469]              sum_allowed1[from_s458] := sum_allowed1[from_s458] + allowed_BazToken[this][from_s458][msgsender_MSG];
[L2470]  COND TRUE   DType[this] == BazToken
[L2471]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s458], tokens_s458);
[L1976]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1977]  COND FALSE  !(!(c_s23 >= a_s23))
[L2471]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s458], tokens_s458);
[L2472]  COND FALSE  !(revert)
[L2478]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][to_s458];
[L2479]              balances_BazToken[this][to_s458] := __var_7;
[L2480]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][to_s458];
[L2481]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2482]              success_s458 := true;
[L1071]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1072]              assume !revert && gas >= 0;
[L4178]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4260]  RET         call CorralChoice_BazToken(this);

Loop:
[L4260]  CALL        call CorralChoice_BazToken(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != BazToken;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND TRUE   choice == 20
[L4110]              gas := gas - 21000;
[L4111]  COND FALSE  !(gas >= 0)
[L4260]  RET         call CorralChoice_BazToken(this);

[2020-11-25 00:28:54,851 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:28:54,851 INFO  L82        PathProgramCache]: Analyzing trace with hash -250049372, now seen corresponding path program 1 times
[2020-11-25 00:28:54,852 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:28:54,859 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:28:54,884 INFO  L134       CoverageAnalysis]: Checked inductivity of 4 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 4 trivial. 0 not checked.
[2020-11-25 00:28:54,885 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:28:54,885 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 00:28:54,885 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:28:54,885 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 00:28:54,885 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 00:28:54,885 INFO  L87              Difference]: Start difference. First operand 2545 states and 2728 transitions. cyclomatic complexity: 186 Second operand 4 states.
[2020-11-25 00:28:55,069 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:28:55,069 INFO  L93              Difference]: Finished difference Result 3338 states and 3730 transitions.
[2020-11-25 00:28:55,069 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 00:28:55,069 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3338 states and 3730 transitions.
[2020-11-25 00:28:55,078 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 00:28:55,087 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3338 states to 3241 states and 3633 transitions.
[2020-11-25 00:28:55,087 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1201
[2020-11-25 00:28:55,088 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1201
[2020-11-25 00:28:55,088 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3241 states and 3633 transitions.
[2020-11-25 00:28:55,090 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:28:55,090 INFO  L728         BuchiCegarLoop]: Abstraction has 3241 states and 3633 transitions.
[2020-11-25 00:28:55,092 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3241 states and 3633 transitions.
[2020-11-25 00:28:55,109 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3241 to 2448.
[2020-11-25 00:28:55,109 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2448 states.
[2020-11-25 00:28:55,111 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2448 states to 2448 states and 2630 transitions.
[2020-11-25 00:28:55,111 INFO  L751         BuchiCegarLoop]: Abstraction has 2448 states and 2630 transitions.
[2020-11-25 00:28:55,111 INFO  L631         BuchiCegarLoop]: Abstraction has 2448 states and 2630 transitions.
[2020-11-25 00:28:55,111 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 00:28:55,111 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2448 states and 2630 transitions.
[2020-11-25 00:28:55,115 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:28:55,115 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:28:55,115 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:28:55,116 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:28:55,116 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_BazToken0 := false;
[L2]                 call_transferFrom_BazToken0 := false;
[L2]     CALL        call main();
[L4250]              assume null == 0;
[L4251]  CALL        call this := FreshRefGenerator__success();
[L1927]              havoc newRef;
[L1928]              assume Alloc[newRef] == false;
[L1929]              Alloc[newRef] := true;
[L1930]              assume newRef != null;
[L4251]  RET         call this := FreshRefGenerator__success();
[L4252]              assume now >= 0;
[L4253]              assume DType[this] == BazToken;
[L4254]              assume msgvalue_MSG == 0;
[L4255]              gas := gas - 53000;
[L4256]  CALL        call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L768]               havoc __exception;
[L769]               revert := false;
[L770]   COND FALSE  !(__exception)
[L793]   CALL        call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2275]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2063]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2048]              assume msgsender_MSG != null;
[L2049]              Balance[this] := 0;
[L2063]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  COND FALSE  !(revert)
[L2275]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  COND FALSE  !(revert)
[L2279]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2133]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]              assume msgsender_MSG != null;
[L2116]              Balance[this] := 0;
[L2117]              owner_Owned[this] := null;
[L2118]              newOwner_Owned[this] := null;
[L2120]              owner_Owned[this] := msgsender_MSG;
[L2133]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  COND FALSE  !(revert)
[L2279]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2280]  COND FALSE  !(revert)
[L2283]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1959]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1944]              assume msgsender_MSG != null;
[L1945]              Balance[this] := 0;
[L1959]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  COND FALSE  !(revert)
[L2283]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2284]  COND FALSE  !(revert)
[L2287]  CALL        call BazToken_BazToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2232]              assume msgsender_MSG != null;
[L2233]              Balance[this] := 0;
[L2234]              symbol_BazToken[this] := -428571439;
[L2235]              name_BazToken[this] := -428571439;
[L2236]              decimals_BazToken[this] := 0;
[L2237]              _totalSupply_BazToken[this] := 0;
[L2238]              balances_BazToken[this] := zeroRefintArr();
[L2239]              sum_balances0[this] := 0;
[L2240]              allowed_BazToken[this] := zeroRefRefintArr();
[L2241]              sum_allowed1[this] := 0;
[L2243]              symbol_BazToken[this] := 1231671027;
[L2244]              name_BazToken[this] := 1319453082;
[L2245]              decimals_BazToken[this] := 18;
[L2246]              _totalSupply_BazToken[this] := 2500000000000000000000000;
[L2247]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][-213091748074002454629334339881517515996861043291];
[L2248]              balances_BazToken[this][-213091748074002454629334339881517515996861043291] := _totalSupply_BazToken[this];
[L2249]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][-213091748074002454629334339881517515996861043291];
[L2250]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2287]  RET         call BazToken_BazToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2288]  COND FALSE  !(revert)
[L793]   RET         call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L794]               assume !revert && gas >= 0;
[L4256]  RET         call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L4257]              assume !revert && gas >= 0;
[L4260]  CALL        call CorralChoice_BazToken(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != BazToken;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND FALSE  !(choice == 20)
[L4117]  COND FALSE  !(choice == 19)
[L4125]  COND FALSE  !(choice == 18)
[L4133]  COND FALSE  !(choice == 17)
[L4141]  COND FALSE  !(choice == 16)
[L4147]  COND FALSE  !(choice == 15)
[L4153]  COND FALSE  !(choice == 14)
[L4159]  COND FALSE  !(choice == 13)
[L4166]  COND TRUE   choice == 12
[L4167]              gas := gas - 21000;
[L4168]  COND TRUE   gas >= 0
[L4169]              assume tokens_s399 >= 0 && tokens_s399 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4170]              assume msgvalue_MSG == 0;
[L4171]  CALL        call success_s399 := approve~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L988]               havoc __exception;
[L989]               revert := false;
[L990]   COND FALSE  !(__exception)
[L1013]  CALL        call success_s399 := approve~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L2393]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_BazToken[this][msgsender_MSG][spender_s399];
[L2394]              allowed_BazToken[this][msgsender_MSG][spender_s399] := tokens_s399;
[L2395]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_BazToken[this][msgsender_MSG][spender_s399];
[L2396]              assert { :EventEmitted "Approval_BazToken" } true;
[L2397]              success_s399 := true;
[L1013]  RET         call success_s399 := approve~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L1014]              assume !revert && gas >= 0;
[L4171]  RET         call success_s399 := approve~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L4260]  RET         call CorralChoice_BazToken(this);
[L4260]  CALL        call CorralChoice_BazToken(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != BazToken;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND FALSE  !(choice == 20)
[L4117]  COND FALSE  !(choice == 19)
[L4125]  COND FALSE  !(choice == 18)
[L4133]  COND FALSE  !(choice == 17)
[L4141]  COND FALSE  !(choice == 16)
[L4147]  COND FALSE  !(choice == 15)
[L4153]  COND FALSE  !(choice == 14)
[L4159]  COND FALSE  !(choice == 13)
[L4166]  COND FALSE  !(choice == 12)
[L4173]  COND TRUE   choice == 11
[L4174]              gas := gas - 21000;
[L4175]  COND TRUE   gas >= 0
[L4176]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4177]              assume msgvalue_MSG == 0;
[L4178]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s458 != to_s458 && ((tokens_s458 > balances_BazToken[this][from_s458] || tokens_s458 > allowed_BazToken[this][from_s458][msgsender_MSG]) || balances_BazToken[this][to_s458] + tokens_s458 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][to_s458] >= 0) && balances_BazToken[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][from_s458] >= 0) && balances_BazToken[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_BazToken[this][from_s458][msgsender_MSG] >= 0) && allowed_BazToken[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_BazToken0 := true;
[L2]                 call_transferFrom_BazToken0 := false;
[L2]                 revert := revert_hold;
[L1046]              havoc __exception;
[L1047]              revert := false;
[L1048]  COND FALSE  !(__exception)
[L1071]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2448]  COND TRUE   DType[this] == BazToken
[L2449]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][from_s458], tokens_s458);
[L1994]  COND FALSE  !(!(b_s45 <= a_s45))
[L1998]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2449]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][from_s458], tokens_s458);
[L2450]  COND FALSE  !(revert)
[L2456]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][from_s458];
[L2457]              balances_BazToken[this][from_s458] := __var_5;
[L2458]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][from_s458];
[L2459]  COND TRUE   DType[this] == BazToken
[L2460]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L1994]  COND FALSE  !(!(b_s45 <= a_s45))
[L1998]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2460]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L2461]  COND FALSE  !(revert)
[L2467]              sum_allowed1[from_s458] := sum_allowed1[from_s458] - allowed_BazToken[this][from_s458][msgsender_MSG];
[L2468]              allowed_BazToken[this][from_s458][msgsender_MSG] := __var_6;
[L2469]              sum_allowed1[from_s458] := sum_allowed1[from_s458] + allowed_BazToken[this][from_s458][msgsender_MSG];
[L2470]  COND TRUE   DType[this] == BazToken
[L2471]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s458], tokens_s458);
[L1976]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1977]  COND FALSE  !(!(c_s23 >= a_s23))
[L2471]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s458], tokens_s458);
[L2472]  COND FALSE  !(revert)
[L2478]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][to_s458];
[L2479]              balances_BazToken[this][to_s458] := __var_7;
[L2480]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][to_s458];
[L2481]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2482]              success_s458 := true;
[L1071]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1072]              assume !revert && gas >= 0;
[L4178]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4260]  RET         call CorralChoice_BazToken(this);

Loop:
[L4260]  CALL        call CorralChoice_BazToken(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != BazToken;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND TRUE   choice == 20
[L4110]              gas := gas - 21000;
[L4111]  COND FALSE  !(gas >= 0)
[L4260]  RET         call CorralChoice_BazToken(this);

[2020-11-25 00:28:55,119 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:28:55,119 INFO  L82        PathProgramCache]: Analyzing trace with hash -1868673568, now seen corresponding path program 1 times
[2020-11-25 00:28:55,119 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:28:55,131 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:28:55,346 INFO  L134       CoverageAnalysis]: Checked inductivity of 73 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 73 trivial. 0 not checked.
[2020-11-25 00:28:55,346 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:28:55,346 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [17] imperfect sequences [] total 17
[2020-11-25 00:28:55,347 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:28:55,347 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 18 interpolants.
[2020-11-25 00:28:55,347 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=40, Invalid=266, Unknown=0, NotChecked=0, Total=306
[2020-11-25 00:28:55,347 INFO  L87              Difference]: Start difference. First operand 2448 states and 2630 transitions. cyclomatic complexity: 185 Second operand 18 states.
[2020-11-25 00:28:57,077 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:28:57,078 INFO  L93              Difference]: Finished difference Result 2502 states and 2689 transitions.
[2020-11-25 00:28:57,078 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 18 states. 
[2020-11-25 00:28:57,078 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2502 states and 2689 transitions.
[2020-11-25 00:28:57,082 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:28:57,087 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2502 states to 2502 states and 2689 transitions.
[2020-11-25 00:28:57,087 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 986
[2020-11-25 00:28:57,088 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 986
[2020-11-25 00:28:57,088 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2502 states and 2689 transitions.
[2020-11-25 00:28:57,090 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:28:57,090 INFO  L728         BuchiCegarLoop]: Abstraction has 2502 states and 2689 transitions.
[2020-11-25 00:28:57,092 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2502 states and 2689 transitions.
[2020-11-25 00:28:57,103 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2502 to 2442.
[2020-11-25 00:28:57,103 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2442 states.
[2020-11-25 00:28:57,104 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2442 states to 2442 states and 2624 transitions.
[2020-11-25 00:28:57,105 INFO  L751         BuchiCegarLoop]: Abstraction has 2442 states and 2624 transitions.
[2020-11-25 00:28:57,105 INFO  L631         BuchiCegarLoop]: Abstraction has 2442 states and 2624 transitions.
[2020-11-25 00:28:57,105 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 00:28:57,105 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2442 states and 2624 transitions.
[2020-11-25 00:28:57,108 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:28:57,108 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:28:57,108 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:28:57,110 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:28:57,111 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_BazToken0 := false;
[L2]                 call_transferFrom_BazToken0 := false;
[L2]     CALL        call main();
[L4250]              assume null == 0;
[L4251]  CALL        call this := FreshRefGenerator__success();
[L1927]              havoc newRef;
[L1928]              assume Alloc[newRef] == false;
[L1929]              Alloc[newRef] := true;
[L1930]              assume newRef != null;
[L4251]  RET         call this := FreshRefGenerator__success();
[L4252]              assume now >= 0;
[L4253]              assume DType[this] == BazToken;
[L4254]              assume msgvalue_MSG == 0;
[L4255]              gas := gas - 53000;
[L4256]  CALL        call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L768]               havoc __exception;
[L769]               revert := false;
[L770]   COND FALSE  !(__exception)
[L793]   CALL        call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2275]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2063]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2048]              assume msgsender_MSG != null;
[L2049]              Balance[this] := 0;
[L2063]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  COND FALSE  !(revert)
[L2275]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  COND FALSE  !(revert)
[L2279]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2133]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]              assume msgsender_MSG != null;
[L2116]              Balance[this] := 0;
[L2117]              owner_Owned[this] := null;
[L2118]              newOwner_Owned[this] := null;
[L2120]              owner_Owned[this] := msgsender_MSG;
[L2133]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  COND FALSE  !(revert)
[L2279]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2280]  COND FALSE  !(revert)
[L2283]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1959]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1944]              assume msgsender_MSG != null;
[L1945]              Balance[this] := 0;
[L1959]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  COND FALSE  !(revert)
[L2283]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2284]  COND FALSE  !(revert)
[L2287]  CALL        call BazToken_BazToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2232]              assume msgsender_MSG != null;
[L2233]              Balance[this] := 0;
[L2234]              symbol_BazToken[this] := -428571439;
[L2235]              name_BazToken[this] := -428571439;
[L2236]              decimals_BazToken[this] := 0;
[L2237]              _totalSupply_BazToken[this] := 0;
[L2238]              balances_BazToken[this] := zeroRefintArr();
[L2239]              sum_balances0[this] := 0;
[L2240]              allowed_BazToken[this] := zeroRefRefintArr();
[L2241]              sum_allowed1[this] := 0;
[L2243]              symbol_BazToken[this] := 1231671027;
[L2244]              name_BazToken[this] := 1319453082;
[L2245]              decimals_BazToken[this] := 18;
[L2246]              _totalSupply_BazToken[this] := 2500000000000000000000000;
[L2247]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][-213091748074002454629334339881517515996861043291];
[L2248]              balances_BazToken[this][-213091748074002454629334339881517515996861043291] := _totalSupply_BazToken[this];
[L2249]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][-213091748074002454629334339881517515996861043291];
[L2250]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2287]  RET         call BazToken_BazToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2288]  COND FALSE  !(revert)
[L793]   RET         call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L794]               assume !revert && gas >= 0;
[L4256]  RET         call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L4257]              assume !revert && gas >= 0;
[L4260]  CALL        call CorralChoice_BazToken(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != BazToken;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND FALSE  !(choice == 20)
[L4117]  COND FALSE  !(choice == 19)
[L4125]  COND FALSE  !(choice == 18)
[L4133]  COND FALSE  !(choice == 17)
[L4141]  COND FALSE  !(choice == 16)
[L4147]  COND FALSE  !(choice == 15)
[L4153]  COND FALSE  !(choice == 14)
[L4159]  COND TRUE   choice == 13
[L4160]              gas := gas - 21000;
[L4161]  COND TRUE   gas >= 0
[L4162]              assume tokens_s371 >= 0 && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4163]              assume msgvalue_MSG == 0;
[L4164]  CALL        call success_s371 := transfer~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L932]               havoc __exception;
[L933]               revert := false;
[L934]   COND FALSE  !(__exception)
[L957]   CALL        call success_s371 := transfer~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2355]  COND TRUE   DType[this] == BazToken
[L2356]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][msgsender_MSG], tokens_s371);
[L1994]  COND FALSE  !(!(b_s45 <= a_s45))
[L1998]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2356]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][msgsender_MSG], tokens_s371);
[L2357]  COND FALSE  !(revert)
[L2363]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][msgsender_MSG];
[L2364]              balances_BazToken[this][msgsender_MSG] := __var_3;
[L2365]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][msgsender_MSG];
[L2366]  COND TRUE   DType[this] == BazToken
[L2367]  CALL        call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s371], tokens_s371);
[L1976]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1977]  COND FALSE  !(!(c_s23 >= a_s23))
[L2367]  RET         call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s371], tokens_s371);
[L2368]  COND FALSE  !(revert)
[L2374]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][to_s371];
[L2375]              balances_BazToken[this][to_s371] := __var_4;
[L2376]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][to_s371];
[L2377]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2378]              success_s371 := true;
[L957]   RET         call success_s371 := transfer~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L958]               assume !revert && gas >= 0;
[L4164]  RET         call success_s371 := transfer~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L4260]  RET         call CorralChoice_BazToken(this);
[L4260]  CALL        call CorralChoice_BazToken(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != BazToken;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND FALSE  !(choice == 20)
[L4117]  COND FALSE  !(choice == 19)
[L4125]  COND FALSE  !(choice == 18)
[L4133]  COND FALSE  !(choice == 17)
[L4141]  COND FALSE  !(choice == 16)
[L4147]  COND FALSE  !(choice == 15)
[L4153]  COND FALSE  !(choice == 14)
[L4159]  COND FALSE  !(choice == 13)
[L4166]  COND FALSE  !(choice == 12)
[L4173]  COND TRUE   choice == 11
[L4174]              gas := gas - 21000;
[L4175]  COND TRUE   gas >= 0
[L4176]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4177]              assume msgvalue_MSG == 0;
[L4178]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s458 != to_s458 && ((tokens_s458 > balances_BazToken[this][from_s458] || tokens_s458 > allowed_BazToken[this][from_s458][msgsender_MSG]) || balances_BazToken[this][to_s458] + tokens_s458 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][to_s458] >= 0) && balances_BazToken[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][from_s458] >= 0) && balances_BazToken[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_BazToken[this][from_s458][msgsender_MSG] >= 0) && allowed_BazToken[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_BazToken0 := true;
[L2]                 call_transferFrom_BazToken0 := false;
[L2]                 revert := revert_hold;
[L1046]              havoc __exception;
[L1047]              revert := false;
[L1048]  COND FALSE  !(__exception)
[L1071]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2448]  COND TRUE   DType[this] == BazToken
[L2449]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][from_s458], tokens_s458);
[L1994]  COND FALSE  !(!(b_s45 <= a_s45))
[L1998]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2449]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][from_s458], tokens_s458);
[L2450]  COND FALSE  !(revert)
[L2456]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][from_s458];
[L2457]              balances_BazToken[this][from_s458] := __var_5;
[L2458]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][from_s458];
[L2459]  COND TRUE   DType[this] == BazToken
[L2460]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L1994]  COND FALSE  !(!(b_s45 <= a_s45))
[L1998]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2460]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L2461]  COND FALSE  !(revert)
[L2467]              sum_allowed1[from_s458] := sum_allowed1[from_s458] - allowed_BazToken[this][from_s458][msgsender_MSG];
[L2468]              allowed_BazToken[this][from_s458][msgsender_MSG] := __var_6;
[L2469]              sum_allowed1[from_s458] := sum_allowed1[from_s458] + allowed_BazToken[this][from_s458][msgsender_MSG];
[L2470]  COND TRUE   DType[this] == BazToken
[L2471]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s458], tokens_s458);
[L1976]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1977]  COND FALSE  !(!(c_s23 >= a_s23))
[L2471]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s458], tokens_s458);
[L2472]  COND FALSE  !(revert)
[L2478]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][to_s458];
[L2479]              balances_BazToken[this][to_s458] := __var_7;
[L2480]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][to_s458];
[L2481]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2482]              success_s458 := true;
[L1071]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1072]              assume !revert && gas >= 0;
[L4178]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4260]  RET         call CorralChoice_BazToken(this);

Loop:
[L4260]  CALL        call CorralChoice_BazToken(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != BazToken;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND FALSE  !(choice == 20)
[L4117]  COND FALSE  !(choice == 19)
[L4125]  COND FALSE  !(choice == 18)
[L4133]  COND FALSE  !(choice == 17)
[L4141]  COND FALSE  !(choice == 16)
[L4147]  COND FALSE  !(choice == 15)
[L4153]  COND FALSE  !(choice == 14)
[L4159]  COND FALSE  !(choice == 13)
[L4166]  COND FALSE  !(choice == 12)
[L4173]  COND TRUE   choice == 11
[L4174]              gas := gas - 21000;
[L4175]  COND TRUE   gas >= 0
[L4176]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4177]              assume msgvalue_MSG == 0;
[L4178]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s458 != to_s458 && ((tokens_s458 > balances_BazToken[this][from_s458] || tokens_s458 > allowed_BazToken[this][from_s458][msgsender_MSG]) || balances_BazToken[this][to_s458] + tokens_s458 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][to_s458] >= 0) && balances_BazToken[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][from_s458] >= 0) && balances_BazToken[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_BazToken[this][from_s458][msgsender_MSG] >= 0) && allowed_BazToken[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_BazToken0 := true;
[L2]                 call_transferFrom_BazToken0 := false;
[L2]                 revert := revert_hold;
[L1046]              havoc __exception;
[L1047]              revert := false;
[L1048]  COND FALSE  !(__exception)
[L1071]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2448]  COND TRUE   DType[this] == BazToken
[L2449]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][from_s458], tokens_s458);
[L1994]  COND FALSE  !(!(b_s45 <= a_s45))
[L1998]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2449]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][from_s458], tokens_s458);
[L2450]  COND FALSE  !(revert)
[L2456]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][from_s458];
[L2457]              balances_BazToken[this][from_s458] := __var_5;
[L2458]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][from_s458];
[L2459]  COND TRUE   DType[this] == BazToken
[L2460]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L1994]  COND FALSE  !(!(b_s45 <= a_s45))
[L1998]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2460]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L2461]  COND FALSE  !(revert)
[L2467]              sum_allowed1[from_s458] := sum_allowed1[from_s458] - allowed_BazToken[this][from_s458][msgsender_MSG];
[L2468]              allowed_BazToken[this][from_s458][msgsender_MSG] := __var_6;
[L2469]              sum_allowed1[from_s458] := sum_allowed1[from_s458] + allowed_BazToken[this][from_s458][msgsender_MSG];
[L2470]  COND TRUE   DType[this] == BazToken
[L2471]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s458], tokens_s458);
[L1976]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1977]  COND FALSE  !(!(c_s23 >= a_s23))
[L2471]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s458], tokens_s458);
[L2472]  COND FALSE  !(revert)
[L2478]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][to_s458];
[L2479]              balances_BazToken[this][to_s458] := __var_7;
[L2480]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][to_s458];
[L2481]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2482]              success_s458 := true;
[L1071]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1072]              assume !revert && gas >= 0;
[L4178]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4260]  RET         call CorralChoice_BazToken(this);

[2020-11-25 00:28:57,121 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:28:57,122 INFO  L82        PathProgramCache]: Analyzing trace with hash -894236502, now seen corresponding path program 1 times
[2020-11-25 00:28:57,123 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:28:57,143 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:28:57,268 INFO  L134       CoverageAnalysis]: Checked inductivity of 72 backedges. 3 proven. 0 refuted. 0 times theorem prover too weak. 69 trivial. 0 not checked.
[2020-11-25 00:28:57,269 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:28:57,269 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [12] imperfect sequences [] total 12
[2020-11-25 00:28:57,284 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:28:57,285 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-11-25 00:28:57,285 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=24, Invalid=132, Unknown=0, NotChecked=0, Total=156
[2020-11-25 00:28:57,285 INFO  L87              Difference]: Start difference. First operand 2442 states and 2624 transitions. cyclomatic complexity: 185 Second operand 13 states.
[2020-11-25 00:28:58,244 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:28:58,244 INFO  L93              Difference]: Finished difference Result 2493 states and 2686 transitions.
[2020-11-25 00:28:58,244 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-11-25 00:28:58,244 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2493 states and 2686 transitions.
[2020-11-25 00:28:58,249 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:28:58,254 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2493 states to 2493 states and 2686 transitions.
[2020-11-25 00:28:58,254 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 973
[2020-11-25 00:28:58,255 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 973
[2020-11-25 00:28:58,255 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2493 states and 2686 transitions.
[2020-11-25 00:28:58,257 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:28:58,257 INFO  L728         BuchiCegarLoop]: Abstraction has 2493 states and 2686 transitions.
[2020-11-25 00:28:58,259 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2493 states and 2686 transitions.
[2020-11-25 00:28:58,271 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2493 to 2456.
[2020-11-25 00:28:58,271 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2456 states.
[2020-11-25 00:28:58,273 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2456 states to 2456 states and 2648 transitions.
[2020-11-25 00:28:58,273 INFO  L751         BuchiCegarLoop]: Abstraction has 2456 states and 2648 transitions.
[2020-11-25 00:28:58,273 INFO  L631         BuchiCegarLoop]: Abstraction has 2456 states and 2648 transitions.
[2020-11-25 00:28:58,273 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 00:28:58,273 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2456 states and 2648 transitions.
[2020-11-25 00:28:58,276 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:28:58,276 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:28:58,276 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:28:58,278 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:28:58,278 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_BazToken0 := false;
[L2]                 call_transferFrom_BazToken0 := false;
[L2]     CALL        call main();
[L4250]              assume null == 0;
[L4251]  CALL        call this := FreshRefGenerator__success();
[L1927]              havoc newRef;
[L1928]              assume Alloc[newRef] == false;
[L1929]              Alloc[newRef] := true;
[L1930]              assume newRef != null;
[L4251]  RET         call this := FreshRefGenerator__success();
[L4252]              assume now >= 0;
[L4253]              assume DType[this] == BazToken;
[L4254]              assume msgvalue_MSG == 0;
[L4255]              gas := gas - 53000;
[L4256]  CALL        call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L768]               havoc __exception;
[L769]               revert := false;
[L770]   COND FALSE  !(__exception)
[L793]   CALL        call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2275]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2063]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2048]              assume msgsender_MSG != null;
[L2049]              Balance[this] := 0;
[L2063]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  COND FALSE  !(revert)
[L2275]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  COND FALSE  !(revert)
[L2279]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2133]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]              assume msgsender_MSG != null;
[L2116]              Balance[this] := 0;
[L2117]              owner_Owned[this] := null;
[L2118]              newOwner_Owned[this] := null;
[L2120]              owner_Owned[this] := msgsender_MSG;
[L2133]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  COND FALSE  !(revert)
[L2279]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2280]  COND FALSE  !(revert)
[L2283]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1959]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1944]              assume msgsender_MSG != null;
[L1945]              Balance[this] := 0;
[L1959]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  COND FALSE  !(revert)
[L2283]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2284]  COND FALSE  !(revert)
[L2287]  CALL        call BazToken_BazToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2232]              assume msgsender_MSG != null;
[L2233]              Balance[this] := 0;
[L2234]              symbol_BazToken[this] := -428571439;
[L2235]              name_BazToken[this] := -428571439;
[L2236]              decimals_BazToken[this] := 0;
[L2237]              _totalSupply_BazToken[this] := 0;
[L2238]              balances_BazToken[this] := zeroRefintArr();
[L2239]              sum_balances0[this] := 0;
[L2240]              allowed_BazToken[this] := zeroRefRefintArr();
[L2241]              sum_allowed1[this] := 0;
[L2243]              symbol_BazToken[this] := 1231671027;
[L2244]              name_BazToken[this] := 1319453082;
[L2245]              decimals_BazToken[this] := 18;
[L2246]              _totalSupply_BazToken[this] := 2500000000000000000000000;
[L2247]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][-213091748074002454629334339881517515996861043291];
[L2248]              balances_BazToken[this][-213091748074002454629334339881517515996861043291] := _totalSupply_BazToken[this];
[L2249]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][-213091748074002454629334339881517515996861043291];
[L2250]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2287]  RET         call BazToken_BazToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2288]  COND FALSE  !(revert)
[L793]   RET         call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L794]               assume !revert && gas >= 0;
[L4256]  RET         call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L4257]              assume !revert && gas >= 0;
[L4260]  CALL        call CorralChoice_BazToken(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != BazToken;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND FALSE  !(choice == 20)
[L4117]  COND FALSE  !(choice == 19)
[L4125]  COND FALSE  !(choice == 18)
[L4133]  COND FALSE  !(choice == 17)
[L4141]  COND FALSE  !(choice == 16)
[L4147]  COND FALSE  !(choice == 15)
[L4153]  COND FALSE  !(choice == 14)
[L4159]  COND FALSE  !(choice == 13)
[L4166]  COND FALSE  !(choice == 12)
[L4173]  COND TRUE   choice == 11
[L4174]              gas := gas - 21000;
[L4175]  COND TRUE   gas >= 0
[L4176]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4177]              assume msgvalue_MSG == 0;
[L4178]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((from_s458 != to_s458 && ((tokens_s458 > balances_BazToken[this][from_s458] || tokens_s458 > allowed_BazToken[this][from_s458][msgsender_MSG]) || balances_BazToken[this][to_s458] + tokens_s458 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][to_s458] >= 0) && balances_BazToken[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][from_s458] >= 0) && balances_BazToken[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_BazToken[this][from_s458][msgsender_MSG] >= 0) && allowed_BazToken[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L1046]              havoc __exception;
[L1047]              revert := false;
[L1048]  COND FALSE  !(__exception)
[L1071]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2448]  COND TRUE   DType[this] == BazToken
[L2449]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][from_s458], tokens_s458);
[L1994]  COND FALSE  !(!(b_s45 <= a_s45))
[L1998]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2449]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][from_s458], tokens_s458);
[L2450]  COND FALSE  !(revert)
[L2456]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][from_s458];
[L2457]              balances_BazToken[this][from_s458] := __var_5;
[L2458]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][from_s458];
[L2459]  COND TRUE   DType[this] == BazToken
[L2460]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L1994]  COND FALSE  !(!(b_s45 <= a_s45))
[L1998]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2460]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L2461]  COND FALSE  !(revert)
[L2467]              sum_allowed1[from_s458] := sum_allowed1[from_s458] - allowed_BazToken[this][from_s458][msgsender_MSG];
[L2468]              allowed_BazToken[this][from_s458][msgsender_MSG] := __var_6;
[L2469]              sum_allowed1[from_s458] := sum_allowed1[from_s458] + allowed_BazToken[this][from_s458][msgsender_MSG];
[L2470]  COND TRUE   DType[this] == BazToken
[L2471]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s458], tokens_s458);
[L1976]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1977]  COND FALSE  !(!(c_s23 >= a_s23))
[L2471]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s458], tokens_s458);
[L2472]  COND FALSE  !(revert)
[L2478]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][to_s458];
[L2479]              balances_BazToken[this][to_s458] := __var_7;
[L2480]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][to_s458];
[L2481]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2482]              success_s458 := true;
[L1071]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1072]              assume !revert && gas >= 0;
[L4178]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4260]  RET         call CorralChoice_BazToken(this);
[L4260]  CALL        call CorralChoice_BazToken(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != BazToken;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND FALSE  !(choice == 20)
[L4117]  COND FALSE  !(choice == 19)
[L4125]  COND FALSE  !(choice == 18)
[L4133]  COND FALSE  !(choice == 17)
[L4141]  COND FALSE  !(choice == 16)
[L4147]  COND FALSE  !(choice == 15)
[L4153]  COND FALSE  !(choice == 14)
[L4159]  COND FALSE  !(choice == 13)
[L4166]  COND FALSE  !(choice == 12)
[L4173]  COND TRUE   choice == 11
[L4174]              gas := gas - 21000;
[L4175]  COND TRUE   gas >= 0
[L4176]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4177]              assume msgvalue_MSG == 0;
[L4178]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s458 != to_s458 && ((tokens_s458 > balances_BazToken[this][from_s458] || tokens_s458 > allowed_BazToken[this][from_s458][msgsender_MSG]) || balances_BazToken[this][to_s458] + tokens_s458 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][to_s458] >= 0) && balances_BazToken[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][from_s458] >= 0) && balances_BazToken[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_BazToken[this][from_s458][msgsender_MSG] >= 0) && allowed_BazToken[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_BazToken0 := true;
[L2]                 call_transferFrom_BazToken0 := false;
[L2]                 revert := revert_hold;
[L1046]              havoc __exception;
[L1047]              revert := false;
[L1048]  COND FALSE  !(__exception)
[L1071]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2448]  COND TRUE   DType[this] == BazToken
[L2449]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][from_s458], tokens_s458);
[L1994]  COND FALSE  !(!(b_s45 <= a_s45))
[L1998]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2449]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][from_s458], tokens_s458);
[L2450]  COND FALSE  !(revert)
[L2456]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][from_s458];
[L2457]              balances_BazToken[this][from_s458] := __var_5;
[L2458]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][from_s458];
[L2459]  COND TRUE   DType[this] == BazToken
[L2460]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L1994]  COND FALSE  !(!(b_s45 <= a_s45))
[L1998]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2460]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L2461]  COND FALSE  !(revert)
[L2467]              sum_allowed1[from_s458] := sum_allowed1[from_s458] - allowed_BazToken[this][from_s458][msgsender_MSG];
[L2468]              allowed_BazToken[this][from_s458][msgsender_MSG] := __var_6;
[L2469]              sum_allowed1[from_s458] := sum_allowed1[from_s458] + allowed_BazToken[this][from_s458][msgsender_MSG];
[L2470]  COND TRUE   DType[this] == BazToken
[L2471]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s458], tokens_s458);
[L1976]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1977]  COND FALSE  !(!(c_s23 >= a_s23))
[L2471]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s458], tokens_s458);
[L2472]  COND FALSE  !(revert)
[L2478]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][to_s458];
[L2479]              balances_BazToken[this][to_s458] := __var_7;
[L2480]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][to_s458];
[L2481]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2482]              success_s458 := true;
[L1071]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1072]              assume !revert && gas >= 0;
[L4178]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4260]  RET         call CorralChoice_BazToken(this);

Loop:
[L4260]  CALL        call CorralChoice_BazToken(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != BazToken;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND TRUE   choice == 20
[L4110]              gas := gas - 21000;
[L4111]  COND FALSE  !(gas >= 0)
[L4260]  RET         call CorralChoice_BazToken(this);

[2020-11-25 00:28:58,281 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:28:58,281 INFO  L82        PathProgramCache]: Analyzing trace with hash -1299828116, now seen corresponding path program 1 times
[2020-11-25 00:28:58,282 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:28:58,320 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:28:59,715 INFO  L134       CoverageAnalysis]: Checked inductivity of 87 backedges. 0 proven. 6 refuted. 0 times theorem prover too weak. 81 trivial. 0 not checked.
[2020-11-25 00:28:59,715 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:28:59,715 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [31] total 31
[2020-11-25 00:28:59,715 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:28:59,716 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 32 interpolants.
[2020-11-25 00:28:59,716 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=103, Invalid=889, Unknown=0, NotChecked=0, Total=992
[2020-11-25 00:28:59,716 INFO  L87              Difference]: Start difference. First operand 2456 states and 2648 transitions. cyclomatic complexity: 197 Second operand 32 states.
[2020-11-25 00:29:01,299 WARN  L188               SmtUtils]: Spent 136.00 ms on a formula simplification that was a NOOP. DAG size: 111
[2020-11-25 00:29:09,511 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:29:09,512 INFO  L93              Difference]: Finished difference Result 2514 states and 2720 transitions.
[2020-11-25 00:29:09,512 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 28 states. 
[2020-11-25 00:29:09,512 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2514 states and 2720 transitions.
[2020-11-25 00:29:09,516 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:29:09,521 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2514 states to 2514 states and 2720 transitions.
[2020-11-25 00:29:09,521 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 988
[2020-11-25 00:29:09,521 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 988
[2020-11-25 00:29:09,521 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2514 states and 2720 transitions.
[2020-11-25 00:29:09,523 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:29:09,523 INFO  L728         BuchiCegarLoop]: Abstraction has 2514 states and 2720 transitions.
[2020-11-25 00:29:09,525 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2514 states and 2720 transitions.
[2020-11-25 00:29:09,537 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2514 to 2458.
[2020-11-25 00:29:09,537 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2458 states.
[2020-11-25 00:29:09,539 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2458 states to 2458 states and 2654 transitions.
[2020-11-25 00:29:09,539 INFO  L751         BuchiCegarLoop]: Abstraction has 2458 states and 2654 transitions.
[2020-11-25 00:29:09,539 INFO  L631         BuchiCegarLoop]: Abstraction has 2458 states and 2654 transitions.
[2020-11-25 00:29:09,539 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 00:29:09,539 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2458 states and 2654 transitions.
[2020-11-25 00:29:09,542 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:29:09,542 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:29:09,542 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:29:09,543 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:29:09,543 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_BazToken0 := false;
[L2]                 call_transferFrom_BazToken0 := false;
[L2]     CALL        call main();
[L4250]              assume null == 0;
[L4251]  CALL        call this := FreshRefGenerator__success();
[L1927]              havoc newRef;
[L1928]              assume Alloc[newRef] == false;
[L1929]              Alloc[newRef] := true;
[L1930]              assume newRef != null;
[L4251]  RET         call this := FreshRefGenerator__success();
[L4252]              assume now >= 0;
[L4253]              assume DType[this] == BazToken;
[L4254]              assume msgvalue_MSG == 0;
[L4255]              gas := gas - 53000;
[L4256]  CALL        call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L768]               havoc __exception;
[L769]               revert := false;
[L770]   COND FALSE  !(__exception)
[L793]   CALL        call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2275]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2063]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2048]              assume msgsender_MSG != null;
[L2049]              Balance[this] := 0;
[L2063]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  COND FALSE  !(revert)
[L2275]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  COND FALSE  !(revert)
[L2279]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2133]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]              assume msgsender_MSG != null;
[L2116]              Balance[this] := 0;
[L2117]              owner_Owned[this] := null;
[L2118]              newOwner_Owned[this] := null;
[L2120]              owner_Owned[this] := msgsender_MSG;
[L2133]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  COND FALSE  !(revert)
[L2279]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2280]  COND FALSE  !(revert)
[L2283]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1959]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1944]              assume msgsender_MSG != null;
[L1945]              Balance[this] := 0;
[L1959]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  COND FALSE  !(revert)
[L2283]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2284]  COND FALSE  !(revert)
[L2287]  CALL        call BazToken_BazToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2232]              assume msgsender_MSG != null;
[L2233]              Balance[this] := 0;
[L2234]              symbol_BazToken[this] := -428571439;
[L2235]              name_BazToken[this] := -428571439;
[L2236]              decimals_BazToken[this] := 0;
[L2237]              _totalSupply_BazToken[this] := 0;
[L2238]              balances_BazToken[this] := zeroRefintArr();
[L2239]              sum_balances0[this] := 0;
[L2240]              allowed_BazToken[this] := zeroRefRefintArr();
[L2241]              sum_allowed1[this] := 0;
[L2243]              symbol_BazToken[this] := 1231671027;
[L2244]              name_BazToken[this] := 1319453082;
[L2245]              decimals_BazToken[this] := 18;
[L2246]              _totalSupply_BazToken[this] := 2500000000000000000000000;
[L2247]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][-213091748074002454629334339881517515996861043291];
[L2248]              balances_BazToken[this][-213091748074002454629334339881517515996861043291] := _totalSupply_BazToken[this];
[L2249]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][-213091748074002454629334339881517515996861043291];
[L2250]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2287]  RET         call BazToken_BazToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2288]  COND FALSE  !(revert)
[L793]   RET         call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L794]               assume !revert && gas >= 0;
[L4256]  RET         call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L4257]              assume !revert && gas >= 0;
[L4260]  CALL        call CorralChoice_BazToken(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != BazToken;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND FALSE  !(choice == 20)
[L4117]  COND FALSE  !(choice == 19)
[L4125]  COND FALSE  !(choice == 18)
[L4133]  COND FALSE  !(choice == 17)
[L4141]  COND FALSE  !(choice == 16)
[L4147]  COND FALSE  !(choice == 15)
[L4153]  COND FALSE  !(choice == 14)
[L4159]  COND FALSE  !(choice == 13)
[L4166]  COND TRUE   choice == 12
[L4167]              gas := gas - 21000;
[L4168]  COND TRUE   gas >= 0
[L4169]              assume tokens_s399 >= 0 && tokens_s399 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4170]              assume msgvalue_MSG == 0;
[L4171]  CALL        call success_s399 := approve~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L988]               havoc __exception;
[L989]               revert := false;
[L990]   COND FALSE  !(__exception)
[L1013]  CALL        call success_s399 := approve~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L2393]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_BazToken[this][msgsender_MSG][spender_s399];
[L2394]              allowed_BazToken[this][msgsender_MSG][spender_s399] := tokens_s399;
[L2395]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_BazToken[this][msgsender_MSG][spender_s399];
[L2396]              assert { :EventEmitted "Approval_BazToken" } true;
[L2397]              success_s399 := true;
[L1013]  RET         call success_s399 := approve~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L1014]              assume !revert && gas >= 0;
[L4171]  RET         call success_s399 := approve~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L4260]  RET         call CorralChoice_BazToken(this);
[L4260]  CALL        call CorralChoice_BazToken(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != BazToken;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND FALSE  !(choice == 20)
[L4117]  COND FALSE  !(choice == 19)
[L4125]  COND FALSE  !(choice == 18)
[L4133]  COND FALSE  !(choice == 17)
[L4141]  COND FALSE  !(choice == 16)
[L4147]  COND FALSE  !(choice == 15)
[L4153]  COND FALSE  !(choice == 14)
[L4159]  COND TRUE   choice == 13
[L4160]              gas := gas - 21000;
[L4161]  COND TRUE   gas >= 0
[L4162]              assume tokens_s371 >= 0 && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4163]              assume msgvalue_MSG == 0;
[L4164]  CALL        call success_s371 := transfer~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L932]               havoc __exception;
[L933]               revert := false;
[L934]   COND FALSE  !(__exception)
[L957]   CALL        call success_s371 := transfer~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2355]  COND TRUE   DType[this] == BazToken
[L2356]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][msgsender_MSG], tokens_s371);
[L1994]  COND FALSE  !(!(b_s45 <= a_s45))
[L1998]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2356]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][msgsender_MSG], tokens_s371);
[L2357]  COND FALSE  !(revert)
[L2363]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][msgsender_MSG];
[L2364]              balances_BazToken[this][msgsender_MSG] := __var_3;
[L2365]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][msgsender_MSG];
[L2366]  COND TRUE   DType[this] == BazToken
[L2367]  CALL        call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s371], tokens_s371);
[L1976]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1977]  COND FALSE  !(!(c_s23 >= a_s23))
[L2367]  RET         call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s371], tokens_s371);
[L2368]  COND FALSE  !(revert)
[L2374]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][to_s371];
[L2375]              balances_BazToken[this][to_s371] := __var_4;
[L2376]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][to_s371];
[L2377]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2378]              success_s371 := true;
[L957]   RET         call success_s371 := transfer~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L958]               assume !revert && gas >= 0;
[L4164]  RET         call success_s371 := transfer~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L4260]  RET         call CorralChoice_BazToken(this);
[L4260]  CALL        call CorralChoice_BazToken(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != BazToken;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND FALSE  !(choice == 20)
[L4117]  COND FALSE  !(choice == 19)
[L4125]  COND FALSE  !(choice == 18)
[L4133]  COND FALSE  !(choice == 17)
[L4141]  COND FALSE  !(choice == 16)
[L4147]  COND FALSE  !(choice == 15)
[L4153]  COND FALSE  !(choice == 14)
[L4159]  COND FALSE  !(choice == 13)
[L4166]  COND FALSE  !(choice == 12)
[L4173]  COND TRUE   choice == 11
[L4174]              gas := gas - 21000;
[L4175]  COND TRUE   gas >= 0
[L4176]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4177]              assume msgvalue_MSG == 0;
[L4178]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s458 != to_s458 && ((tokens_s458 > balances_BazToken[this][from_s458] || tokens_s458 > allowed_BazToken[this][from_s458][msgsender_MSG]) || balances_BazToken[this][to_s458] + tokens_s458 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][to_s458] >= 0) && balances_BazToken[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][from_s458] >= 0) && balances_BazToken[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_BazToken[this][from_s458][msgsender_MSG] >= 0) && allowed_BazToken[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_BazToken0 := true;
[L2]                 call_transferFrom_BazToken0 := false;
[L2]                 revert := revert_hold;
[L1046]              havoc __exception;
[L1047]              revert := false;
[L1048]  COND FALSE  !(__exception)
[L1071]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2448]  COND TRUE   DType[this] == BazToken
[L2449]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][from_s458], tokens_s458);
[L1994]  COND FALSE  !(!(b_s45 <= a_s45))
[L1998]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2449]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][from_s458], tokens_s458);
[L2450]  COND FALSE  !(revert)
[L2456]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][from_s458];
[L2457]              balances_BazToken[this][from_s458] := __var_5;
[L2458]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][from_s458];
[L2459]  COND TRUE   DType[this] == BazToken
[L2460]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L1994]  COND FALSE  !(!(b_s45 <= a_s45))
[L1998]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2460]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L2461]  COND FALSE  !(revert)
[L2467]              sum_allowed1[from_s458] := sum_allowed1[from_s458] - allowed_BazToken[this][from_s458][msgsender_MSG];
[L2468]              allowed_BazToken[this][from_s458][msgsender_MSG] := __var_6;
[L2469]              sum_allowed1[from_s458] := sum_allowed1[from_s458] + allowed_BazToken[this][from_s458][msgsender_MSG];
[L2470]  COND TRUE   DType[this] == BazToken
[L2471]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s458], tokens_s458);
[L1976]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1977]  COND FALSE  !(!(c_s23 >= a_s23))
[L2471]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s458], tokens_s458);
[L2472]  COND FALSE  !(revert)
[L2478]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][to_s458];
[L2479]              balances_BazToken[this][to_s458] := __var_7;
[L2480]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][to_s458];
[L2481]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2482]              success_s458 := true;
[L1071]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1072]              assume !revert && gas >= 0;
[L4178]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4260]  RET         call CorralChoice_BazToken(this);

Loop:
[L4260]  CALL        call CorralChoice_BazToken(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != BazToken;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND FALSE  !(choice == 20)
[L4117]  COND FALSE  !(choice == 19)
[L4125]  COND FALSE  !(choice == 18)
[L4133]  COND FALSE  !(choice == 17)
[L4141]  COND FALSE  !(choice == 16)
[L4147]  COND FALSE  !(choice == 15)
[L4153]  COND FALSE  !(choice == 14)
[L4159]  COND FALSE  !(choice == 13)
[L4166]  COND FALSE  !(choice == 12)
[L4173]  COND TRUE   choice == 11
[L4174]              gas := gas - 21000;
[L4175]  COND TRUE   gas >= 0
[L4176]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4177]              assume msgvalue_MSG == 0;
[L4178]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s458 != to_s458 && ((tokens_s458 > balances_BazToken[this][from_s458] || tokens_s458 > allowed_BazToken[this][from_s458][msgsender_MSG]) || balances_BazToken[this][to_s458] + tokens_s458 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][to_s458] >= 0) && balances_BazToken[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][from_s458] >= 0) && balances_BazToken[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_BazToken[this][from_s458][msgsender_MSG] >= 0) && allowed_BazToken[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_BazToken0 := true;
[L2]                 call_transferFrom_BazToken0 := false;
[L2]                 revert := revert_hold;
[L1046]              havoc __exception;
[L1047]              revert := false;
[L1048]  COND FALSE  !(__exception)
[L1071]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2448]  COND TRUE   DType[this] == BazToken
[L2449]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][from_s458], tokens_s458);
[L1994]  COND FALSE  !(!(b_s45 <= a_s45))
[L1998]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2449]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][from_s458], tokens_s458);
[L2450]  COND FALSE  !(revert)
[L2456]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][from_s458];
[L2457]              balances_BazToken[this][from_s458] := __var_5;
[L2458]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][from_s458];
[L2459]  COND TRUE   DType[this] == BazToken
[L2460]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L1994]  COND FALSE  !(!(b_s45 <= a_s45))
[L1998]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2460]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L2461]  COND FALSE  !(revert)
[L2467]              sum_allowed1[from_s458] := sum_allowed1[from_s458] - allowed_BazToken[this][from_s458][msgsender_MSG];
[L2468]              allowed_BazToken[this][from_s458][msgsender_MSG] := __var_6;
[L2469]              sum_allowed1[from_s458] := sum_allowed1[from_s458] + allowed_BazToken[this][from_s458][msgsender_MSG];
[L2470]  COND TRUE   DType[this] == BazToken
[L2471]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s458], tokens_s458);
[L1976]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1977]  COND FALSE  !(!(c_s23 >= a_s23))
[L2471]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s458], tokens_s458);
[L2472]  COND FALSE  !(revert)
[L2478]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][to_s458];
[L2479]              balances_BazToken[this][to_s458] := __var_7;
[L2480]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][to_s458];
[L2481]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2482]              success_s458 := true;
[L1071]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1072]              assume !revert && gas >= 0;
[L4178]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4260]  RET         call CorralChoice_BazToken(this);

[2020-11-25 00:29:09,548 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:29:09,548 INFO  L82        PathProgramCache]: Analyzing trace with hash -1372569088, now seen corresponding path program 1 times
[2020-11-25 00:29:09,549 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:29:09,589 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:29:10,991 INFO  L134       CoverageAnalysis]: Checked inductivity of 212 backedges. 0 proven. 5 refuted. 0 times theorem prover too weak. 207 trivial. 0 not checked.
[2020-11-25 00:29:10,991 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:29:10,991 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [28] total 28
[2020-11-25 00:29:10,992 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:29:10,992 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 29 interpolants.
[2020-11-25 00:29:10,992 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=81, Invalid=731, Unknown=0, NotChecked=0, Total=812
[2020-11-25 00:29:10,992 INFO  L87              Difference]: Start difference. First operand 2458 states and 2654 transitions. cyclomatic complexity: 202 Second operand 29 states.
[2020-11-25 00:29:17,164 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:29:17,165 INFO  L93              Difference]: Finished difference Result 2520 states and 2737 transitions.
[2020-11-25 00:29:17,165 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 28 states. 
[2020-11-25 00:29:17,165 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2520 states and 2737 transitions.
[2020-11-25 00:29:17,169 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:29:17,174 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2520 states to 2520 states and 2737 transitions.
[2020-11-25 00:29:17,174 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 990
[2020-11-25 00:29:17,174 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 990
[2020-11-25 00:29:17,174 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2520 states and 2737 transitions.
[2020-11-25 00:29:17,176 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:29:17,176 INFO  L728         BuchiCegarLoop]: Abstraction has 2520 states and 2737 transitions.
[2020-11-25 00:29:17,178 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2520 states and 2737 transitions.
[2020-11-25 00:29:17,188 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2520 to 2464.
[2020-11-25 00:29:17,188 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2464 states.
[2020-11-25 00:29:17,191 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2464 states to 2464 states and 2674 transitions.
[2020-11-25 00:29:17,191 INFO  L751         BuchiCegarLoop]: Abstraction has 2464 states and 2674 transitions.
[2020-11-25 00:29:17,191 INFO  L631         BuchiCegarLoop]: Abstraction has 2464 states and 2674 transitions.
[2020-11-25 00:29:17,191 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 00:29:17,191 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2464 states and 2674 transitions.
[2020-11-25 00:29:17,193 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:29:17,193 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:29:17,193 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:29:17,195 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:29:17,195 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_BazToken0 := false;
[L2]                 call_transferFrom_BazToken0 := false;
[L2]     CALL        call main();
[L4250]              assume null == 0;
[L4251]  CALL        call this := FreshRefGenerator__success();
[L1927]              havoc newRef;
[L1928]              assume Alloc[newRef] == false;
[L1929]              Alloc[newRef] := true;
[L1930]              assume newRef != null;
[L4251]  RET         call this := FreshRefGenerator__success();
[L4252]              assume now >= 0;
[L4253]              assume DType[this] == BazToken;
[L4254]              assume msgvalue_MSG == 0;
[L4255]              gas := gas - 53000;
[L4256]  CALL        call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L768]               havoc __exception;
[L769]               revert := false;
[L770]   COND FALSE  !(__exception)
[L793]   CALL        call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2275]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2063]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2048]              assume msgsender_MSG != null;
[L2049]              Balance[this] := 0;
[L2063]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  COND FALSE  !(revert)
[L2275]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  COND FALSE  !(revert)
[L2279]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2133]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]              assume msgsender_MSG != null;
[L2116]              Balance[this] := 0;
[L2117]              owner_Owned[this] := null;
[L2118]              newOwner_Owned[this] := null;
[L2120]              owner_Owned[this] := msgsender_MSG;
[L2133]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  COND FALSE  !(revert)
[L2279]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2280]  COND FALSE  !(revert)
[L2283]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1959]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1944]              assume msgsender_MSG != null;
[L1945]              Balance[this] := 0;
[L1959]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  COND FALSE  !(revert)
[L2283]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2284]  COND FALSE  !(revert)
[L2287]  CALL        call BazToken_BazToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2232]              assume msgsender_MSG != null;
[L2233]              Balance[this] := 0;
[L2234]              symbol_BazToken[this] := -428571439;
[L2235]              name_BazToken[this] := -428571439;
[L2236]              decimals_BazToken[this] := 0;
[L2237]              _totalSupply_BazToken[this] := 0;
[L2238]              balances_BazToken[this] := zeroRefintArr();
[L2239]              sum_balances0[this] := 0;
[L2240]              allowed_BazToken[this] := zeroRefRefintArr();
[L2241]              sum_allowed1[this] := 0;
[L2243]              symbol_BazToken[this] := 1231671027;
[L2244]              name_BazToken[this] := 1319453082;
[L2245]              decimals_BazToken[this] := 18;
[L2246]              _totalSupply_BazToken[this] := 2500000000000000000000000;
[L2247]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][-213091748074002454629334339881517515996861043291];
[L2248]              balances_BazToken[this][-213091748074002454629334339881517515996861043291] := _totalSupply_BazToken[this];
[L2249]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][-213091748074002454629334339881517515996861043291];
[L2250]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2287]  RET         call BazToken_BazToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2288]  COND FALSE  !(revert)
[L793]   RET         call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L794]               assume !revert && gas >= 0;
[L4256]  RET         call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L4257]              assume !revert && gas >= 0;
[L4260]  CALL        call CorralChoice_BazToken(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != BazToken;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND FALSE  !(choice == 20)
[L4117]  COND FALSE  !(choice == 19)
[L4125]  COND FALSE  !(choice == 18)
[L4133]  COND FALSE  !(choice == 17)
[L4141]  COND FALSE  !(choice == 16)
[L4147]  COND FALSE  !(choice == 15)
[L4153]  COND FALSE  !(choice == 14)
[L4159]  COND FALSE  !(choice == 13)
[L4166]  COND TRUE   choice == 12
[L4167]              gas := gas - 21000;
[L4168]  COND TRUE   gas >= 0
[L4169]              assume tokens_s399 >= 0 && tokens_s399 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4170]              assume msgvalue_MSG == 0;
[L4171]  CALL        call success_s399 := approve~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L988]               havoc __exception;
[L989]               revert := false;
[L990]   COND FALSE  !(__exception)
[L1013]  CALL        call success_s399 := approve~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L2393]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_BazToken[this][msgsender_MSG][spender_s399];
[L2394]              allowed_BazToken[this][msgsender_MSG][spender_s399] := tokens_s399;
[L2395]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_BazToken[this][msgsender_MSG][spender_s399];
[L2396]              assert { :EventEmitted "Approval_BazToken" } true;
[L2397]              success_s399 := true;
[L1013]  RET         call success_s399 := approve~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L1014]              assume !revert && gas >= 0;
[L4171]  RET         call success_s399 := approve~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L4260]  RET         call CorralChoice_BazToken(this);
[L4260]  CALL        call CorralChoice_BazToken(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != BazToken;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND FALSE  !(choice == 20)
[L4117]  COND FALSE  !(choice == 19)
[L4125]  COND FALSE  !(choice == 18)
[L4133]  COND FALSE  !(choice == 17)
[L4141]  COND FALSE  !(choice == 16)
[L4147]  COND FALSE  !(choice == 15)
[L4153]  COND FALSE  !(choice == 14)
[L4159]  COND FALSE  !(choice == 13)
[L4166]  COND FALSE  !(choice == 12)
[L4173]  COND TRUE   choice == 11
[L4174]              gas := gas - 21000;
[L4175]  COND TRUE   gas >= 0
[L4176]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4177]              assume msgvalue_MSG == 0;
[L4178]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((from_s458 != to_s458 && ((tokens_s458 > balances_BazToken[this][from_s458] || tokens_s458 > allowed_BazToken[this][from_s458][msgsender_MSG]) || balances_BazToken[this][to_s458] + tokens_s458 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][to_s458] >= 0) && balances_BazToken[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][from_s458] >= 0) && balances_BazToken[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_BazToken[this][from_s458][msgsender_MSG] >= 0) && allowed_BazToken[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L1046]              havoc __exception;
[L1047]              revert := false;
[L1048]  COND FALSE  !(__exception)
[L1071]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2448]  COND TRUE   DType[this] == BazToken
[L2449]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][from_s458], tokens_s458);
[L1994]  COND FALSE  !(!(b_s45 <= a_s45))
[L1998]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2449]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][from_s458], tokens_s458);
[L2450]  COND FALSE  !(revert)
[L2456]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][from_s458];
[L2457]              balances_BazToken[this][from_s458] := __var_5;
[L2458]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][from_s458];
[L2459]  COND TRUE   DType[this] == BazToken
[L2460]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L1994]  COND FALSE  !(!(b_s45 <= a_s45))
[L1998]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2460]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L2461]  COND FALSE  !(revert)
[L2467]              sum_allowed1[from_s458] := sum_allowed1[from_s458] - allowed_BazToken[this][from_s458][msgsender_MSG];
[L2468]              allowed_BazToken[this][from_s458][msgsender_MSG] := __var_6;
[L2469]              sum_allowed1[from_s458] := sum_allowed1[from_s458] + allowed_BazToken[this][from_s458][msgsender_MSG];
[L2470]  COND TRUE   DType[this] == BazToken
[L2471]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s458], tokens_s458);
[L1976]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1977]  COND FALSE  !(!(c_s23 >= a_s23))
[L2471]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s458], tokens_s458);
[L2472]  COND FALSE  !(revert)
[L2478]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][to_s458];
[L2479]              balances_BazToken[this][to_s458] := __var_7;
[L2480]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][to_s458];
[L2481]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2482]              success_s458 := true;
[L1071]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1072]              assume !revert && gas >= 0;
[L4178]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4260]  RET         call CorralChoice_BazToken(this);
[L4260]  CALL        call CorralChoice_BazToken(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != BazToken;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND FALSE  !(choice == 20)
[L4117]  COND FALSE  !(choice == 19)
[L4125]  COND FALSE  !(choice == 18)
[L4133]  COND FALSE  !(choice == 17)
[L4141]  COND FALSE  !(choice == 16)
[L4147]  COND FALSE  !(choice == 15)
[L4153]  COND FALSE  !(choice == 14)
[L4159]  COND FALSE  !(choice == 13)
[L4166]  COND FALSE  !(choice == 12)
[L4173]  COND TRUE   choice == 11
[L4174]              gas := gas - 21000;
[L4175]  COND TRUE   gas >= 0
[L4176]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4177]              assume msgvalue_MSG == 0;
[L4178]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s458 != to_s458 && ((tokens_s458 > balances_BazToken[this][from_s458] || tokens_s458 > allowed_BazToken[this][from_s458][msgsender_MSG]) || balances_BazToken[this][to_s458] + tokens_s458 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][to_s458] >= 0) && balances_BazToken[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][from_s458] >= 0) && balances_BazToken[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_BazToken[this][from_s458][msgsender_MSG] >= 0) && allowed_BazToken[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_BazToken0 := true;
[L2]                 call_transferFrom_BazToken0 := false;
[L2]                 revert := revert_hold;
[L1046]              havoc __exception;
[L1047]              revert := false;
[L1048]  COND FALSE  !(__exception)
[L1071]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2448]  COND TRUE   DType[this] == BazToken
[L2449]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][from_s458], tokens_s458);
[L1994]  COND FALSE  !(!(b_s45 <= a_s45))
[L1998]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2449]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][from_s458], tokens_s458);
[L2450]  COND FALSE  !(revert)
[L2456]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][from_s458];
[L2457]              balances_BazToken[this][from_s458] := __var_5;
[L2458]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][from_s458];
[L2459]  COND TRUE   DType[this] == BazToken
[L2460]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L1994]  COND FALSE  !(!(b_s45 <= a_s45))
[L1998]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2460]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L2461]  COND FALSE  !(revert)
[L2467]              sum_allowed1[from_s458] := sum_allowed1[from_s458] - allowed_BazToken[this][from_s458][msgsender_MSG];
[L2468]              allowed_BazToken[this][from_s458][msgsender_MSG] := __var_6;
[L2469]              sum_allowed1[from_s458] := sum_allowed1[from_s458] + allowed_BazToken[this][from_s458][msgsender_MSG];
[L2470]  COND TRUE   DType[this] == BazToken
[L2471]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s458], tokens_s458);
[L1976]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1977]  COND FALSE  !(!(c_s23 >= a_s23))
[L2471]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s458], tokens_s458);
[L2472]  COND FALSE  !(revert)
[L2478]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][to_s458];
[L2479]              balances_BazToken[this][to_s458] := __var_7;
[L2480]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][to_s458];
[L2481]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2482]              success_s458 := true;
[L1071]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1072]              assume !revert && gas >= 0;
[L4178]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4260]  RET         call CorralChoice_BazToken(this);

Loop:
[L4260]  CALL        call CorralChoice_BazToken(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != BazToken;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND FALSE  !(choice == 20)
[L4117]  COND FALSE  !(choice == 19)
[L4125]  COND FALSE  !(choice == 18)
[L4133]  COND FALSE  !(choice == 17)
[L4141]  COND FALSE  !(choice == 16)
[L4147]  COND FALSE  !(choice == 15)
[L4153]  COND FALSE  !(choice == 14)
[L4159]  COND FALSE  !(choice == 13)
[L4166]  COND FALSE  !(choice == 12)
[L4173]  COND TRUE   choice == 11
[L4174]              gas := gas - 21000;
[L4175]  COND TRUE   gas >= 0
[L4176]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4177]              assume msgvalue_MSG == 0;
[L4178]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s458 != to_s458 && ((tokens_s458 > balances_BazToken[this][from_s458] || tokens_s458 > allowed_BazToken[this][from_s458][msgsender_MSG]) || balances_BazToken[this][to_s458] + tokens_s458 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][to_s458] >= 0) && balances_BazToken[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][from_s458] >= 0) && balances_BazToken[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_BazToken[this][from_s458][msgsender_MSG] >= 0) && allowed_BazToken[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_BazToken0 := true;
[L2]                 call_transferFrom_BazToken0 := false;
[L2]                 revert := revert_hold;
[L1046]              havoc __exception;
[L1047]              revert := false;
[L1048]  COND FALSE  !(__exception)
[L1071]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2448]  COND TRUE   DType[this] == BazToken
[L2449]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][from_s458], tokens_s458);
[L1994]  COND FALSE  !(!(b_s45 <= a_s45))
[L1998]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2449]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][from_s458], tokens_s458);
[L2450]  COND FALSE  !(revert)
[L2456]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][from_s458];
[L2457]              balances_BazToken[this][from_s458] := __var_5;
[L2458]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][from_s458];
[L2459]  COND TRUE   DType[this] == BazToken
[L2460]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L1994]  COND FALSE  !(!(b_s45 <= a_s45))
[L1998]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2460]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L2461]  COND FALSE  !(revert)
[L2467]              sum_allowed1[from_s458] := sum_allowed1[from_s458] - allowed_BazToken[this][from_s458][msgsender_MSG];
[L2468]              allowed_BazToken[this][from_s458][msgsender_MSG] := __var_6;
[L2469]              sum_allowed1[from_s458] := sum_allowed1[from_s458] + allowed_BazToken[this][from_s458][msgsender_MSG];
[L2470]  COND TRUE   DType[this] == BazToken
[L2471]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s458], tokens_s458);
[L1976]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1977]  COND FALSE  !(!(c_s23 >= a_s23))
[L2471]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s458], tokens_s458);
[L2472]  COND FALSE  !(revert)
[L2478]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][to_s458];
[L2479]              balances_BazToken[this][to_s458] := __var_7;
[L2480]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][to_s458];
[L2481]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2482]              success_s458 := true;
[L1071]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1072]              assume !revert && gas >= 0;
[L4178]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4260]  RET         call CorralChoice_BazToken(this);

[2020-11-25 00:29:17,199 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:29:17,199 INFO  L82        PathProgramCache]: Analyzing trace with hash -1748762046, now seen corresponding path program 1 times
[2020-11-25 00:29:17,199 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:29:17,220 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:29:17,339 INFO  L134       CoverageAnalysis]: Checked inductivity of 228 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 228 trivial. 0 not checked.
[2020-11-25 00:29:17,339 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:29:17,339 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-11-25 00:29:17,339 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:29:17,340 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-11-25 00:29:17,340 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=28, Invalid=128, Unknown=0, NotChecked=0, Total=156
[2020-11-25 00:29:17,340 INFO  L87              Difference]: Start difference. First operand 2464 states and 2674 transitions. cyclomatic complexity: 218 Second operand 13 states.
[2020-11-25 00:29:18,252 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:29:18,252 INFO  L93              Difference]: Finished difference Result 1400 states and 1524 transitions.
[2020-11-25 00:29:18,252 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-11-25 00:29:18,252 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1400 states and 1524 transitions.
[2020-11-25 00:29:18,255 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 00:29:18,255 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1400 states to 0 states and 0 transitions.
[2020-11-25 00:29:18,255 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 00:29:18,255 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 00:29:18,255 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 00:29:18,255 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:29:18,255 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 00:29:18,255 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 00:29:18,256 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 00:29:18,256 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 00:29:18,256 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 00:29:18,256 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 00:29:18,256 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 00:29:18,258 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 12:29:18 BasicIcfg
[2020-11-25 00:29:18,259 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 00:29:18,259 INFO  L168              Benchmark]: Toolchain (without parser) took 30055.04 ms. Allocated memory was 1.0 GB in the beginning and 2.8 GB in the end (delta: 1.7 GB). Free memory was 935.2 MB in the beginning and 1.2 GB in the end (delta: -232.7 MB). Peak memory consumption was 1.5 GB. Max. memory is 15.3 GB.
[2020-11-25 00:29:18,259 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.18 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 00:29:18,259 INFO  L168              Benchmark]: Boogie Preprocessor took 87.74 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 00:29:18,260 INFO  L168              Benchmark]: UtopiaSpecLang took 57.78 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 00:29:18,260 INFO  L168              Benchmark]: Boogie Printer took 15.38 ms. Allocated memory is still 1.0 GB. Free memory is still 919.1 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 00:29:18,260 INFO  L168              Benchmark]: RCFGBuilder took 734.63 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 795.6 MB in the end (delta: 123.5 MB). Peak memory consumption was 123.5 MB. Max. memory is 15.3 GB.
[2020-11-25 00:29:18,261 INFO  L168              Benchmark]: UtopiaLTL2Aut took 37.12 ms. Allocated memory is still 1.0 GB. Free memory was 795.6 MB in the beginning and 792.0 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-25 00:29:18,261 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1258.52 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 212.9 MB). Free memory was 792.0 MB in the beginning and 1.0 GB in the end (delta: -223.6 MB). Peak memory consumption was 170.3 MB. Max. memory is 15.3 GB.
[2020-11-25 00:29:18,261 INFO  L168              Benchmark]: BlockEncodingV2 took 135.44 ms. Allocated memory is still 1.2 GB. Free memory was 1.0 GB in the beginning and 949.8 MB in the end (delta: 65.8 MB). Peak memory consumption was 65.8 MB. Max. memory is 15.3 GB.
[2020-11-25 00:29:18,262 INFO  L168              Benchmark]: BuchiAutomizer took 27725.61 ms. Allocated memory was 1.2 GB in the beginning and 2.8 GB in the end (delta: 1.5 GB). Free memory was 949.8 MB in the beginning and 1.2 GB in the end (delta: -218.0 MB). Peak memory consumption was 1.3 GB. Max. memory is 15.3 GB.
[2020-11-25 00:29:18,266 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    3716 locations, 6393 edges
  - StatisticsResult: Encoded RCFG
    3635 locations, 6191 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.18 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 87.74 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 57.78 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 15.38 ms. Allocated memory is still 1.0 GB. Free memory is still 919.1 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 734.63 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 795.6 MB in the end (delta: 123.5 MB). Peak memory consumption was 123.5 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 37.12 ms. Allocated memory is still 1.0 GB. Free memory was 795.6 MB in the beginning and 792.0 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1258.52 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 212.9 MB). Free memory was 792.0 MB in the beginning and 1.0 GB in the end (delta: -223.6 MB). Peak memory consumption was 170.3 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 135.44 ms. Allocated memory is still 1.2 GB. Free memory was 1.0 GB in the beginning and 949.8 MB in the end (delta: 65.8 MB). Peak memory consumption was 65.8 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 27725.61 ms. Allocated memory was 1.2 GB in the beginning and 2.8 GB in the end (delta: 1.5 GB). Free memory was 949.8 MB in the beginning and 1.2 GB in the end (delta: -218.0 MB). Peak memory consumption was 1.3 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1562 locations, 1973 edges
  - StatisticsResult: BuchiProgram size
    3716 locations, 6393 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 9 terminating modules (9 trivial, 0 deterministic, 0 nondeterministic). 9 modules have a trivial ranking function, the largest among these consists of 32 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 27.6s and 10 iterations.  TraceHistogramMax:3. Analysis of lassos took 3.9s. Construction of modules took 18.0s. BÃ¼chi inclusion checks took 5.0s. Highest rank in rank-based complementation 0. Minimization of det autom 9. Minimization of nondet autom 0. Automata minimization 0.1s AutomataMinimizationTime, 8 MinimizatonAttempts, 1632 StatesRemovedByMinimization, 7 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 2666 states and ocurred in iteration 2.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 21727 SDtfs, 25529 SDslu, 55952 SDs, 0 SdLazy, 158753 SolverSat, 3321 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 18.0s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU9 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transferFrom_(fail_transferFrom_BazToken0)azToken0) ==> ( <>(fail_transferFrom_BazToken0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
