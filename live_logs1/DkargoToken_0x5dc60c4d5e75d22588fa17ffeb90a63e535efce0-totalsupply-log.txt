This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 13:59:17,086 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 13:59:17,087 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 13:59:17,098 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 13:59:17,098 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 13:59:17,099 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 13:59:17,099 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 13:59:17,101 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 13:59:17,102 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 13:59:17,103 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 13:59:17,104 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 13:59:17,104 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 13:59:17,104 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 13:59:17,105 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 13:59:17,106 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 13:59:17,106 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 13:59:17,107 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 13:59:17,108 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 13:59:17,109 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 13:59:17,110 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 13:59:17,111 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 13:59:17,112 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 13:59:17,114 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 13:59:17,114 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 13:59:17,114 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 13:59:17,114 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 13:59:17,115 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 13:59:17,115 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 13:59:17,115 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 13:59:17,116 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 13:59:17,116 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 13:59:17,117 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 13:59:17,117 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 13:59:17,118 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 13:59:17,118 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 13:59:17,118 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 13:59:17,119 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 13:59:17,119 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 13:59:17,119 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 13:59:17,120 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 13:59:17,120 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 13:59:17,120 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 13:59:17,128 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 13:59:17,128 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 13:59:17,129 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 13:59:17,129 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 13:59:17,129 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 13:59:17,129 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 13:59:17,129 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 13:59:17,130 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 13:59:17,130 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 13:59:17,130 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 13:59:17,130 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 13:59:17,130 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 13:59:17,130 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 13:59:17,130 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 13:59:17,130 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 13:59:17,131 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 13:59:17,131 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 13:59:17,131 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 13:59:17,131 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 13:59:17,131 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 13:59:17,131 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 13:59:17,131 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 13:59:17,131 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 13:59:17,131 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 13:59:17,132 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 13:59:17,132 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 13:59:17,156 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 13:59:17,170 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 13:59:17,173 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 13:59:17,174 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 13:59:17,175 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 13:59:17,175 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_totalsupply.bpl
[2020-11-25 13:59:17,175 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_totalsupply.bpl'
[2020-11-25 13:59:17,279 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 13:59:17,280 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 13:59:17,281 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 13:59:17,281 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 13:59:17,281 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 13:59:17,297 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:59:17" (1/1) ...
[2020-11-25 13:59:17,299 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:59:17" (1/1) ...
[2020-11-25 13:59:17,336 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:59:17" (1/1) ...
[2020-11-25 13:59:17,337 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:59:17" (1/1) ...
[2020-11-25 13:59:17,363 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:59:17" (1/1) ...
[2020-11-25 13:59:17,377 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:59:17" (1/1) ...
[2020-11-25 13:59:17,388 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:59:17" (1/1) ...
[2020-11-25 13:59:17,403 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 13:59:17,404 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 13:59:17,404 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 13:59:17,406 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 13:59:17,410 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:59:17" (1/1) ...
[2020-11-25 13:59:17,431 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20.totalSupply, _supply_ERC20[this] >= 0 && _supply_ERC20[this] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.totalSupply, return == _supply_ERC20[this] && _supply_ERC20[this] == old(_supply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _name_DkargoToken[this] == old(_name_DkargoToken[this]) && _symbol_DkargoToken[this] == old(_symbol_DkargoToken[this]) && _dkargoPrefix_DkargoPrefix[this] == old(_dkargoPrefix_DkargoPrefix[this]) && _infcs_ERC165[this] == old(_infcs_ERC165[this]) && _slist_AddressChain[this] == old(_slist_AddressChain[this]) && _owner_Ownership[this] == old(_owner_Ownership[this]))))
[2020-11-25 13:59:17,437 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20.totalSupply, _supply_ERC20[this] >= 0 && _supply_ERC20[this] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.totalSupply, return == _supply_ERC20[this] && _supply_ERC20[this] == old(_supply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _name_DkargoToken[this] == old(_name_DkargoToken[this]) && _symbol_DkargoToken[this] == old(_symbol_DkargoToken[this]) && _dkargoPrefix_DkargoPrefix[this] == old(_dkargoPrefix_DkargoPrefix[this]) && _infcs_ERC165[this] == old(_infcs_ERC165[this]) && _slist_AddressChain[this] == old(_slist_AddressChain[this]) && _owner_Ownership[this] == old(_owner_Ownership[this]))))
[2020-11-25 13:59:17,444 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20.totalSupply, _supply_ERC20[this] >= 0 && _supply_ERC20[this] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.totalSupply, return == _supply_ERC20[this] && _supply_ERC20[this] == old(_supply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _name_DkargoToken[this] == old(_name_DkargoToken[this]) && _symbol_DkargoToken[this] == old(_symbol_DkargoToken[this]) && _dkargoPrefix_DkargoPrefix[this] == old(_dkargoPrefix_DkargoPrefix[this]) && _infcs_ERC165[this] == old(_infcs_ERC165[this]) && _slist_AddressChain[this] == old(_slist_AddressChain[this]) && _owner_Ownership[this] == old(_owner_Ownership[this]))))
[2020-11-25 13:59:17,451 INFO  L636   opiaSpecLangObserver]: Parsed ( _supply_ERC20[this]>=0 && _supply_ERC20[this]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[COMPGEQ,ArrayAccessExpression[IdentifierExpression[_supply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]],IntegerLiteral[0]],BinaryExpression[COMPLT,ArrayAccessExpression[IdentifierExpression[_supply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 13:59:17,454 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( __ret_0_==_supply_ERC20[this] && _supply_ERC20[this]==( old(_supply_ERC20[this]) ) ) && _balances_ERC20[this]==( old(_balances_ERC20[this]) ) ) && _allowances_ERC20[this]==( old(_allowances_ERC20[this]) ) ) && _name_DkargoToken[this]==( old(_name_DkargoToken[this]) ) ) && _symbol_DkargoToken[this]==( old(_symbol_DkargoToken[this]) ) ) && _dkargoPrefix_DkargoPrefix[this]==( old(_dkargoPrefix_DkargoPrefix[this]) ) ) && _infcs_ERC165[this]==( old(_infcs_ERC165[this]) ) ) && _slist_AddressChain[this]==( old(_slist_AddressChain[this]) ) ) && _owner_Ownership[this]==( old(_owner_Ownership[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,totalSupply_ERC20>],ArrayAccessExpression[IdentifierExpression[_supply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_supply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_supply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_name_DkargoToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_name_DkargoToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_symbol_DkargoToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_symbol_DkargoToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_dkargoPrefix_DkargoPrefix,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_dkargoPrefix_DkargoPrefix,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_infcs_ERC165,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_infcs_ERC165,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_slist_AddressChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_slist_AddressChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_owner_Ownership,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_owner_Ownership,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]]]]]
[2020-11-25 13:59:17,462 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20.totalSupply, _supply_ERC20[this] >= 0 && _supply_ERC20[this] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.totalSupply, return == _supply_ERC20[this] && _supply_ERC20[this] == old(_supply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _name_DkargoToken[this] == old(_name_DkargoToken[this]) && _symbol_DkargoToken[this] == old(_symbol_DkargoToken[this]) && _dkargoPrefix_DkargoPrefix[this] == old(_dkargoPrefix_DkargoPrefix[this]) && _infcs_ERC165[this] == old(_infcs_ERC165[this]) && _slist_AddressChain[this] == old(_slist_AddressChain[this]) && _owner_Ownership[this] == old(_owner_Ownership[this]))))
[2020-11-25 13:59:17,462 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_totalSupply_ERC200) ==> ( <>AP(success_totalSupply_ERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 13:59:17,481 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:59:17 PropertyContainer
[2020-11-25 13:59:17,482 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 13:59:17,482 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 13:59:17,482 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 13:59:17,482 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 13:59:17,483 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:59:17" (1/2) ...
[2020-11-25 13:59:17,484 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 13:59:17,484 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 13:59:17,503 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:59:17" (2/2) ...
[2020-11-25 13:59:17,504 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 13:59:17,504 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 13:59:17,504 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 13:59:17,504 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 13:59:17,505 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:59:17" (1/2) ...
[2020-11-25 13:59:17,558 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 13:59:17,558 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain.NodeInfo_ctor__success
[2020-11-25 13:59:17,558 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain.NodeList_ctor__success
[2020-11-25 13:59:17,558 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoPrefix_DkargoPrefix_NoBaseCtor__success
[2020-11-25 13:59:17,558 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoPrefix_DkargoPrefix
[2020-11-25 13:59:17,559 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoPrefix_DkargoPrefix
[2020-11-25 13:59:17,559 INFO  L130     BoogieDeclarations]: Found specification of procedure getDkargoPrefix_DkargoPrefix
[2020-11-25 13:59:17,559 INFO  L138     BoogieDeclarations]: Found implementation of procedure getDkargoPrefix_DkargoPrefix
[2020-11-25 13:59:17,559 INFO  L130     BoogieDeclarations]: Found specification of procedure _setDkargoPrefix~string_DkargoPrefix__success
[2020-11-25 13:59:17,559 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownership_Ownership_NoBaseCtor__success
[2020-11-25 13:59:17,559 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownership_Ownership
[2020-11-25 13:59:17,559 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownership_Ownership
[2020-11-25 13:59:17,559 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownership
[2020-11-25 13:59:17,559 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownership
[2020-11-25 13:59:17,560 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownership
[2020-11-25 13:59:17,560 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownership
[2020-11-25 13:59:17,560 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownership
[2020-11-25 13:59:17,561 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownership
[2020-11-25 13:59:17,561 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 13:59:17,561 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 13:59:17,561 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 13:59:17,561 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 13:59:17,561 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 13:59:17,561 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 13:59:17,561 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 13:59:17,561 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 13:59:17,561 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain_AddressChain_NoBaseCtor__success
[2020-11-25 13:59:17,562 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain_AddressChain
[2020-11-25 13:59:17,562 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain_AddressChain
[2020-11-25 13:59:17,562 INFO  L130     BoogieDeclarations]: Found specification of procedure count_AddressChain
[2020-11-25 13:59:17,562 INFO  L138     BoogieDeclarations]: Found implementation of procedure count_AddressChain
[2020-11-25 13:59:17,562 INFO  L130     BoogieDeclarations]: Found specification of procedure head_AddressChain
[2020-11-25 13:59:17,562 INFO  L138     BoogieDeclarations]: Found implementation of procedure head_AddressChain
[2020-11-25 13:59:17,562 INFO  L130     BoogieDeclarations]: Found specification of procedure tail_AddressChain
[2020-11-25 13:59:17,562 INFO  L138     BoogieDeclarations]: Found implementation of procedure tail_AddressChain
[2020-11-25 13:59:17,562 INFO  L130     BoogieDeclarations]: Found specification of procedure nextOf~address_AddressChain
[2020-11-25 13:59:17,562 INFO  L138     BoogieDeclarations]: Found implementation of procedure nextOf~address_AddressChain
[2020-11-25 13:59:17,562 INFO  L130     BoogieDeclarations]: Found specification of procedure prevOf~address_AddressChain
[2020-11-25 13:59:17,563 INFO  L138     BoogieDeclarations]: Found implementation of procedure prevOf~address_AddressChain
[2020-11-25 13:59:17,563 INFO  L130     BoogieDeclarations]: Found specification of procedure isLinked~address_AddressChain
[2020-11-25 13:59:17,563 INFO  L138     BoogieDeclarations]: Found implementation of procedure isLinked~address_AddressChain
[2020-11-25 13:59:17,563 INFO  L130     BoogieDeclarations]: Found specification of procedure _linkChain~address_AddressChain__success
[2020-11-25 13:59:17,563 INFO  L130     BoogieDeclarations]: Found specification of procedure _unlinkChain~address_AddressChain__success
[2020-11-25 13:59:17,563 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC165_IERC165_NoBaseCtor__success
[2020-11-25 13:59:17,563 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC165_IERC165
[2020-11-25 13:59:17,563 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC165_IERC165
[2020-11-25 13:59:17,563 INFO  L130     BoogieDeclarations]: Found specification of procedure supportsInterface~bytes4_IERC165
[2020-11-25 13:59:17,563 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC165_ERC165_NoBaseCtor__success
[2020-11-25 13:59:17,564 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC165_ERC165
[2020-11-25 13:59:17,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC165_ERC165
[2020-11-25 13:59:17,564 INFO  L130     BoogieDeclarations]: Found specification of procedure supportsInterface~bytes4_ERC165
[2020-11-25 13:59:17,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure supportsInterface~bytes4_ERC165
[2020-11-25 13:59:17,564 INFO  L130     BoogieDeclarations]: Found specification of procedure _registerInterface~bytes4_ERC165__success
[2020-11-25 13:59:17,564 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 13:59:17,564 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 13:59:17,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 13:59:17,564 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 13:59:17,564 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 13:59:17,565 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 13:59:17,565 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 13:59:17,565 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 13:59:17,565 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 13:59:17,565 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 13:59:17,565 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 13:59:17,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 13:59:17,565 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 13:59:17,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 13:59:17,565 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 13:59:17,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 13:59:17,566 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 13:59:17,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 13:59:17,566 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 13:59:17,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 13:59:17,566 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 13:59:17,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 13:59:17,566 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 13:59:17,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 13:59:17,566 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 13:59:17,566 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 13:59:17,566 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 13:59:17,567 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 13:59:17,567 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Safe_ERC20Safe_NoBaseCtor__success
[2020-11-25 13:59:17,567 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Safe_ERC20Safe
[2020-11-25 13:59:17,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Safe_ERC20Safe
[2020-11-25 13:59:17,567 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Safe
[2020-11-25 13:59:17,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Safe
[2020-11-25 13:59:17,567 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Safe
[2020-11-25 13:59:17,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Safe
[2020-11-25 13:59:17,567 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Safe
[2020-11-25 13:59:17,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Safe
[2020-11-25 13:59:17,568 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoToken_DkargoToken_NoBaseCtor__success
[2020-11-25 13:59:17,568 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoToken_DkargoToken
[2020-11-25 13:59:17,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoToken_DkargoToken
[2020-11-25 13:59:17,568 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_DkargoToken
[2020-11-25 13:59:17,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_DkargoToken
[2020-11-25 13:59:17,568 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_DkargoToken
[2020-11-25 13:59:17,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_DkargoToken
[2020-11-25 13:59:17,568 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_DkargoToken
[2020-11-25 13:59:17,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_DkargoToken
[2020-11-25 13:59:17,568 INFO  L130     BoogieDeclarations]: Found specification of procedure name_DkargoToken
[2020-11-25 13:59:17,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_DkargoToken
[2020-11-25 13:59:17,569 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_DkargoToken
[2020-11-25 13:59:17,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_DkargoToken
[2020-11-25 13:59:17,569 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_DkargoToken
[2020-11-25 13:59:17,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_DkargoToken
[2020-11-25 13:59:17,569 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 13:59:17,569 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 13:59:17,569 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 13:59:17,569 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 13:59:17,569 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_DkargoPrefix
[2020-11-25 13:59:17,569 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_DkargoPrefix
[2020-11-25 13:59:17,570 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownership
[2020-11-25 13:59:17,570 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownership
[2020-11-25 13:59:17,570 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 13:59:17,570 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 13:59:17,570 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_AddressChain
[2020-11-25 13:59:17,570 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_AddressChain
[2020-11-25 13:59:17,570 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC165
[2020-11-25 13:59:17,570 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC165
[2020-11-25 13:59:17,570 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC165
[2020-11-25 13:59:17,570 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC165
[2020-11-25 13:59:17,571 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 13:59:17,571 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 13:59:17,571 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 13:59:17,571 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 13:59:17,571 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Safe
[2020-11-25 13:59:17,571 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Safe
[2020-11-25 13:59:17,571 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_DkargoToken
[2020-11-25 13:59:17,571 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 13:59:17,571 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 13:59:17,571 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain.NodeInfo_ctor__fail
[2020-11-25 13:59:17,572 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain.NodeList_ctor__fail
[2020-11-25 13:59:17,572 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoPrefix_DkargoPrefix_NoBaseCtor__fail
[2020-11-25 13:59:17,572 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoPrefix_DkargoPrefix__success
[2020-11-25 13:59:17,572 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoPrefix_DkargoPrefix__fail
[2020-11-25 13:59:17,572 INFO  L130     BoogieDeclarations]: Found specification of procedure getDkargoPrefix_DkargoPrefix__success
[2020-11-25 13:59:17,572 INFO  L130     BoogieDeclarations]: Found specification of procedure getDkargoPrefix_DkargoPrefix__fail
[2020-11-25 13:59:17,572 INFO  L130     BoogieDeclarations]: Found specification of procedure _setDkargoPrefix~string_DkargoPrefix__fail
[2020-11-25 13:59:17,572 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownership_Ownership_NoBaseCtor__fail
[2020-11-25 13:59:17,572 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownership_Ownership__success
[2020-11-25 13:59:17,572 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownership_Ownership__fail
[2020-11-25 13:59:17,573 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownership__success
[2020-11-25 13:59:17,573 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownership__fail
[2020-11-25 13:59:17,573 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownership__success
[2020-11-25 13:59:17,573 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownership__fail
[2020-11-25 13:59:17,573 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownership__success
[2020-11-25 13:59:17,573 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownership__fail
[2020-11-25 13:59:17,573 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 13:59:17,573 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 13:59:17,573 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 13:59:17,573 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 13:59:17,574 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 13:59:17,574 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 13:59:17,574 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 13:59:17,574 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 13:59:17,574 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain_AddressChain_NoBaseCtor__fail
[2020-11-25 13:59:17,574 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain_AddressChain__success
[2020-11-25 13:59:17,574 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain_AddressChain__fail
[2020-11-25 13:59:17,574 INFO  L130     BoogieDeclarations]: Found specification of procedure count_AddressChain__success
[2020-11-25 13:59:17,574 INFO  L130     BoogieDeclarations]: Found specification of procedure count_AddressChain__fail
[2020-11-25 13:59:17,574 INFO  L130     BoogieDeclarations]: Found specification of procedure head_AddressChain__success
[2020-11-25 13:59:17,575 INFO  L130     BoogieDeclarations]: Found specification of procedure head_AddressChain__fail
[2020-11-25 13:59:17,575 INFO  L130     BoogieDeclarations]: Found specification of procedure tail_AddressChain__success
[2020-11-25 13:59:17,575 INFO  L130     BoogieDeclarations]: Found specification of procedure tail_AddressChain__fail
[2020-11-25 13:59:17,575 INFO  L130     BoogieDeclarations]: Found specification of procedure nextOf~address_AddressChain__success
[2020-11-25 13:59:17,575 INFO  L130     BoogieDeclarations]: Found specification of procedure nextOf~address_AddressChain__fail
[2020-11-25 13:59:17,575 INFO  L130     BoogieDeclarations]: Found specification of procedure prevOf~address_AddressChain__success
[2020-11-25 13:59:17,575 INFO  L130     BoogieDeclarations]: Found specification of procedure prevOf~address_AddressChain__fail
[2020-11-25 13:59:17,575 INFO  L130     BoogieDeclarations]: Found specification of procedure isLinked~address_AddressChain__success
[2020-11-25 13:59:17,575 INFO  L130     BoogieDeclarations]: Found specification of procedure isLinked~address_AddressChain__fail
[2020-11-25 13:59:17,575 INFO  L130     BoogieDeclarations]: Found specification of procedure _linkChain~address_AddressChain__fail
[2020-11-25 13:59:17,575 INFO  L130     BoogieDeclarations]: Found specification of procedure _unlinkChain~address_AddressChain__fail
[2020-11-25 13:59:17,576 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC165_IERC165_NoBaseCtor__fail
[2020-11-25 13:59:17,576 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC165_IERC165__success
[2020-11-25 13:59:17,576 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC165_IERC165__fail
[2020-11-25 13:59:17,576 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC165_ERC165_NoBaseCtor__fail
[2020-11-25 13:59:17,576 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC165_ERC165__success
[2020-11-25 13:59:17,576 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC165_ERC165__fail
[2020-11-25 13:59:17,576 INFO  L130     BoogieDeclarations]: Found specification of procedure supportsInterface~bytes4_ERC165__success
[2020-11-25 13:59:17,576 INFO  L130     BoogieDeclarations]: Found specification of procedure supportsInterface~bytes4_ERC165__fail
[2020-11-25 13:59:17,576 INFO  L130     BoogieDeclarations]: Found specification of procedure _registerInterface~bytes4_ERC165__fail
[2020-11-25 13:59:17,576 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 13:59:17,576 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 13:59:17,576 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 13:59:17,577 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 13:59:17,577 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 13:59:17,577 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 13:59:17,577 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 13:59:17,577 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 13:59:17,577 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 13:59:17,577 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 13:59:17,577 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 13:59:17,577 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 13:59:17,577 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 13:59:17,577 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 13:59:17,578 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 13:59:17,578 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 13:59:17,578 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 13:59:17,578 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 13:59:17,578 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 13:59:17,578 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 13:59:17,578 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 13:59:17,578 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 13:59:17,578 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Safe_ERC20Safe_NoBaseCtor__fail
[2020-11-25 13:59:17,578 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Safe_ERC20Safe__success
[2020-11-25 13:59:17,578 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Safe_ERC20Safe__fail
[2020-11-25 13:59:17,578 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Safe__success
[2020-11-25 13:59:17,579 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Safe__fail
[2020-11-25 13:59:17,579 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Safe__success
[2020-11-25 13:59:17,579 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Safe__fail
[2020-11-25 13:59:17,579 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Safe__success
[2020-11-25 13:59:17,579 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Safe__fail
[2020-11-25 13:59:17,579 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoToken_DkargoToken_NoBaseCtor__fail
[2020-11-25 13:59:17,579 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoToken_DkargoToken__success
[2020-11-25 13:59:17,579 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoToken_DkargoToken__fail
[2020-11-25 13:59:17,579 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_DkargoToken__success
[2020-11-25 13:59:17,579 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_DkargoToken__fail
[2020-11-25 13:59:17,579 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_DkargoToken__success
[2020-11-25 13:59:17,579 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_DkargoToken__fail
[2020-11-25 13:59:17,580 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_DkargoToken__success
[2020-11-25 13:59:17,580 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_DkargoToken__fail
[2020-11-25 13:59:17,580 INFO  L130     BoogieDeclarations]: Found specification of procedure name_DkargoToken__success
[2020-11-25 13:59:17,580 INFO  L130     BoogieDeclarations]: Found specification of procedure name_DkargoToken__fail
[2020-11-25 13:59:17,580 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_DkargoToken__success
[2020-11-25 13:59:17,580 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_DkargoToken__fail
[2020-11-25 13:59:17,580 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_DkargoToken__success
[2020-11-25 13:59:17,580 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_DkargoToken__fail
[2020-11-25 13:59:17,580 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 13:59:17,580 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 13:59:17,580 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 13:59:17,580 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 13:59:17,581 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 13:59:17,581 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 13:59:17,581 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain.NodeInfo_ctor__fail
[2020-11-25 13:59:17,581 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain.NodeInfo_ctor__success
[2020-11-25 13:59:17,581 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain.NodeList_ctor__fail
[2020-11-25 13:59:17,581 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain.NodeList_ctor__success
[2020-11-25 13:59:17,581 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoPrefix_DkargoPrefix_NoBaseCtor__fail
[2020-11-25 13:59:17,581 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoPrefix_DkargoPrefix_NoBaseCtor__success
[2020-11-25 13:59:17,581 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoPrefix_DkargoPrefix__fail
[2020-11-25 13:59:17,581 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoPrefix_DkargoPrefix__success
[2020-11-25 13:59:17,581 INFO  L138     BoogieDeclarations]: Found implementation of procedure getDkargoPrefix_DkargoPrefix__fail
[2020-11-25 13:59:17,581 INFO  L138     BoogieDeclarations]: Found implementation of procedure getDkargoPrefix_DkargoPrefix__success
[2020-11-25 13:59:17,582 INFO  L138     BoogieDeclarations]: Found implementation of procedure _setDkargoPrefix~string_DkargoPrefix__fail
[2020-11-25 13:59:17,582 INFO  L138     BoogieDeclarations]: Found implementation of procedure _setDkargoPrefix~string_DkargoPrefix__success
[2020-11-25 13:59:17,582 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownership_Ownership_NoBaseCtor__fail
[2020-11-25 13:59:17,582 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownership_Ownership_NoBaseCtor__success
[2020-11-25 13:59:17,582 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownership_Ownership__fail
[2020-11-25 13:59:17,582 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownership_Ownership__success
[2020-11-25 13:59:17,582 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownership__fail
[2020-11-25 13:59:17,582 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownership__success
[2020-11-25 13:59:17,582 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownership__fail
[2020-11-25 13:59:17,582 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownership__success
[2020-11-25 13:59:17,582 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownership__fail
[2020-11-25 13:59:17,582 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownership__success
[2020-11-25 13:59:17,583 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 13:59:17,583 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 13:59:17,583 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 13:59:17,583 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 13:59:17,583 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 13:59:17,583 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 13:59:17,583 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 13:59:17,583 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 13:59:17,583 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 13:59:17,583 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 13:59:17,583 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 13:59:17,583 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 13:59:17,584 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 13:59:17,584 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 13:59:17,584 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain_AddressChain_NoBaseCtor__fail
[2020-11-25 13:59:17,584 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain_AddressChain_NoBaseCtor__success
[2020-11-25 13:59:17,584 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain_AddressChain__fail
[2020-11-25 13:59:17,584 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain_AddressChain__success
[2020-11-25 13:59:17,584 INFO  L138     BoogieDeclarations]: Found implementation of procedure count_AddressChain__fail
[2020-11-25 13:59:17,584 INFO  L138     BoogieDeclarations]: Found implementation of procedure count_AddressChain__success
[2020-11-25 13:59:17,584 INFO  L138     BoogieDeclarations]: Found implementation of procedure head_AddressChain__fail
[2020-11-25 13:59:17,584 INFO  L138     BoogieDeclarations]: Found implementation of procedure head_AddressChain__success
[2020-11-25 13:59:17,584 INFO  L138     BoogieDeclarations]: Found implementation of procedure tail_AddressChain__fail
[2020-11-25 13:59:17,585 INFO  L138     BoogieDeclarations]: Found implementation of procedure tail_AddressChain__success
[2020-11-25 13:59:17,585 INFO  L138     BoogieDeclarations]: Found implementation of procedure nextOf~address_AddressChain__fail
[2020-11-25 13:59:17,585 INFO  L138     BoogieDeclarations]: Found implementation of procedure nextOf~address_AddressChain__success
[2020-11-25 13:59:17,585 INFO  L138     BoogieDeclarations]: Found implementation of procedure prevOf~address_AddressChain__fail
[2020-11-25 13:59:17,585 INFO  L138     BoogieDeclarations]: Found implementation of procedure prevOf~address_AddressChain__success
[2020-11-25 13:59:17,585 INFO  L138     BoogieDeclarations]: Found implementation of procedure isLinked~address_AddressChain__fail
[2020-11-25 13:59:17,585 INFO  L138     BoogieDeclarations]: Found implementation of procedure isLinked~address_AddressChain__success
[2020-11-25 13:59:17,585 INFO  L138     BoogieDeclarations]: Found implementation of procedure _linkChain~address_AddressChain__fail
[2020-11-25 13:59:17,585 INFO  L138     BoogieDeclarations]: Found implementation of procedure _linkChain~address_AddressChain__success
[2020-11-25 13:59:17,585 INFO  L138     BoogieDeclarations]: Found implementation of procedure _unlinkChain~address_AddressChain__fail
[2020-11-25 13:59:17,586 INFO  L138     BoogieDeclarations]: Found implementation of procedure _unlinkChain~address_AddressChain__success
[2020-11-25 13:59:17,586 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC165_IERC165_NoBaseCtor__fail
[2020-11-25 13:59:17,586 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC165_IERC165_NoBaseCtor__success
[2020-11-25 13:59:17,586 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC165_IERC165__fail
[2020-11-25 13:59:17,586 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC165_IERC165__success
[2020-11-25 13:59:17,586 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC165_ERC165_NoBaseCtor__fail
[2020-11-25 13:59:17,586 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC165_ERC165_NoBaseCtor__success
[2020-11-25 13:59:17,586 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC165_ERC165__fail
[2020-11-25 13:59:17,586 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC165_ERC165__success
[2020-11-25 13:59:17,586 INFO  L138     BoogieDeclarations]: Found implementation of procedure supportsInterface~bytes4_ERC165__fail
[2020-11-25 13:59:17,586 INFO  L138     BoogieDeclarations]: Found implementation of procedure supportsInterface~bytes4_ERC165__success
[2020-11-25 13:59:17,587 INFO  L138     BoogieDeclarations]: Found implementation of procedure _registerInterface~bytes4_ERC165__fail
[2020-11-25 13:59:17,587 INFO  L138     BoogieDeclarations]: Found implementation of procedure _registerInterface~bytes4_ERC165__success
[2020-11-25 13:59:17,587 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 13:59:17,587 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 13:59:17,587 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 13:59:17,587 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 13:59:17,587 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 13:59:17,587 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 13:59:17,587 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 13:59:17,587 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 13:59:17,587 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 13:59:17,587 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 13:59:17,587 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 13:59:17,588 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 13:59:17,588 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 13:59:17,588 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 13:59:17,588 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 13:59:17,588 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 13:59:17,588 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 13:59:17,588 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 13:59:17,588 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 13:59:17,588 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 13:59:17,588 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 13:59:17,588 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 13:59:17,588 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 13:59:17,589 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 13:59:17,589 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 13:59:17,589 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 13:59:17,589 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 13:59:17,589 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 13:59:17,589 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Safe_ERC20Safe_NoBaseCtor__fail
[2020-11-25 13:59:17,589 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Safe_ERC20Safe_NoBaseCtor__success
[2020-11-25 13:59:17,589 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Safe_ERC20Safe__fail
[2020-11-25 13:59:17,589 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Safe_ERC20Safe__success
[2020-11-25 13:59:17,589 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Safe__fail
[2020-11-25 13:59:17,589 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Safe__success
[2020-11-25 13:59:17,589 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Safe__fail
[2020-11-25 13:59:17,589 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Safe__success
[2020-11-25 13:59:17,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Safe__fail
[2020-11-25 13:59:17,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Safe__success
[2020-11-25 13:59:17,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoToken_DkargoToken_NoBaseCtor__fail
[2020-11-25 13:59:17,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoToken_DkargoToken_NoBaseCtor__success
[2020-11-25 13:59:17,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoToken_DkargoToken__fail
[2020-11-25 13:59:17,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoToken_DkargoToken__success
[2020-11-25 13:59:17,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_DkargoToken__fail
[2020-11-25 13:59:17,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_DkargoToken__success
[2020-11-25 13:59:17,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_DkargoToken__fail
[2020-11-25 13:59:17,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_DkargoToken__success
[2020-11-25 13:59:17,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_DkargoToken__fail
[2020-11-25 13:59:17,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_DkargoToken__success
[2020-11-25 13:59:17,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_DkargoToken__fail
[2020-11-25 13:59:17,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_DkargoToken__success
[2020-11-25 13:59:17,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_DkargoToken__fail
[2020-11-25 13:59:17,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_DkargoToken__success
[2020-11-25 13:59:17,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_DkargoToken__fail
[2020-11-25 13:59:17,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_DkargoToken__success
[2020-11-25 13:59:17,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 13:59:17,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 13:59:17,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 13:59:17,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 13:59:17,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 13:59:17,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 13:59:17,592 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 13:59:17,592 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 13:59:17,592 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_DkargoPrefix
[2020-11-25 13:59:17,592 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_DkargoPrefix
[2020-11-25 13:59:17,592 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownership
[2020-11-25 13:59:17,592 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownership
[2020-11-25 13:59:17,592 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 13:59:17,592 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 13:59:17,592 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_AddressChain
[2020-11-25 13:59:17,592 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_AddressChain
[2020-11-25 13:59:17,592 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC165
[2020-11-25 13:59:17,592 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC165
[2020-11-25 13:59:17,593 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC165
[2020-11-25 13:59:17,593 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC165
[2020-11-25 13:59:17,593 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 13:59:17,593 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 13:59:17,593 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 13:59:17,593 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 13:59:17,593 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Safe
[2020-11-25 13:59:17,593 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Safe
[2020-11-25 13:59:17,593 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_DkargoToken
[2020-11-25 13:59:17,593 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 13:59:17,593 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 13:59:17,593 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 13:59:17,826 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 13:59:17,826 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 13:59:17,826 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 13:59:18,624 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 13:59:18,624 INFO  L286             CfgBuilder]: Removed 10 assue(true) statements.
[2020-11-25 13:59:18,626 INFO  L202        PluginConnector]: Adding new model DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_totalsupply.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:59:18 BoogieIcfgContainer
[2020-11-25 13:59:18,626 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:59:17" (2/2) ...
[2020-11-25 13:59:18,626 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 13:59:18,626 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@6ed1fc1d and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:59:18, skipping insertion in model container
[2020-11-25 13:59:18,626 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 13:59:18,626 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 13:59:18,626 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 13:59:18,627 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 13:59:18,628 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:59:17" (1/3) ...
[2020-11-25 13:59:18,628 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@cc6e0e5 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:59:18, skipping insertion in model container
[2020-11-25 13:59:18,628 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:59:17" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 13:59:18,660 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:59:18 NWAContainer
[2020-11-25 13:59:18,660 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 13:59:18,660 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 13:59:18,660 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 13:59:18,661 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 13:59:18,662 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_totalsupply.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:59:18" (3/4) ...
[2020-11-25 13:59:18,662 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@153b742a and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:59:18, skipping insertion in model container
[2020-11-25 13:59:18,662 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:59:18" (4/4) ...
[2020-11-25 13:59:18,665 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 13:59:18,669 INFO  L110   BuchiProductObserver]: Initial RCFG 3094 locations, 4212 edges
[2020-11-25 13:59:18,669 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 13:59:18,679 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 13:59:21,082 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 13:59:21,096 INFO  L110   BuchiProductObserver]: BuchiProgram size 7634 locations, 13669 edges
[2020-11-25 13:59:21,096 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:59:21 BoogieIcfgContainer
[2020-11-25 13:59:21,096 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 13:59:21,097 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 13:59:21,097 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 13:59:21,098 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 13:59:21,099 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:59:21" (1/1) ...
[2020-11-25 13:59:21,252 INFO  L313           BlockEncoder]: Initial Icfg 7634 locations, 13669 edges
[2020-11-25 13:59:21,253 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 13:59:21,254 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 13:59:21,254 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 13:59:21,255 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 13:59:21,276 INFO  L70    emoveInfeasibleEdges]: Removed 288 edges and 23 locations because of local infeasibility
[2020-11-25 13:59:21,291 INFO  L70        RemoveSinkStates]: Removed 200 edges and 133 locations by removing sink states
[2020-11-25 13:59:21,309 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 13:59:21,315 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 13:59:21,320 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 13:59:21,320 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 13:59:21,324 INFO  L313           BlockEncoder]: Encoded RCFG 7442 locations, 13128 edges
[2020-11-25 13:59:21,325 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 01:59:21 BasicIcfg
[2020-11-25 13:59:21,325 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 13:59:21,325 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 13:59:21,325 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 13:59:21,327 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 13:59:21,327 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 13:59:21,327 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:59:17" (1/6) ...
[2020-11-25 13:59:21,329 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6710356e and model type DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_totalsupply.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:59:21, skipping insertion in model container
[2020-11-25 13:59:21,329 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 13:59:21,329 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:59:17" (2/6) ...
[2020-11-25 13:59:21,329 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6710356e and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:59:21, skipping insertion in model container
[2020-11-25 13:59:21,329 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 13:59:21,329 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_totalsupply.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:59:18" (3/6) ...
[2020-11-25 13:59:21,330 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6710356e and model type DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_totalsupply.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 01:59:21, skipping insertion in model container
[2020-11-25 13:59:21,330 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 13:59:21,330 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:59:18" (4/6) ...
[2020-11-25 13:59:21,330 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6710356e and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:59:21, skipping insertion in model container
[2020-11-25 13:59:21,330 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 13:59:21,330 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:59:21" (5/6) ...
[2020-11-25 13:59:21,330 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6710356e and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 01:59:21, skipping insertion in model container
[2020-11-25 13:59:21,330 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 13:59:21,331 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 01:59:21" (6/6) ...
[2020-11-25 13:59:21,331 INFO  L404   chiAutomizerObserver]: Analyzing ICFG DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_totalsupply.bpl_BEv2
[2020-11-25 13:59:21,362 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 13:59:21,363 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 13:59:21,363 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 13:59:21,363 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 13:59:21,363 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 13:59:21,363 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 13:59:21,363 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 13:59:21,363 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 13:59:21,363 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 13:59:21,420 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7442 states.
[2020-11-25 13:59:21,485 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:59:21,485 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:59:21,485 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:59:21,493 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:59:21,493 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:59:21,493 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 13:59:21,493 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7442 states.
[2020-11-25 13:59:21,521 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:59:21,521 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:59:21,521 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:59:21,522 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:59:21,522 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_totalSupply_ERC200 := false;
[L2]                 call_totalSupply_ERC200 := false;
[L2]     CALL        call main();
[L8440]              assume null == 0;
[L8441]  CALL        call this := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L8441]  RET         call this := FreshRefGenerator__success();
[L8442]              assume now >= 0;
[L8443]              assume DType[this] == DkargoToken;
[L8444]              assume msgvalue_MSG == 0;
[L8445]              gas := gas - 53000;
[L8446]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2403]              havoc __exception;
[L2404]              revert := false;
[L2405]  COND FALSE  !(__exception)
[L2438]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5753]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4104]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4086]              assume msgsender_MSG != null;
[L4087]              Balance[this] := 0;
[L4088]              _owner_Ownership[this] := null;
[L4090]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4091]              _owner_Ownership[this] := msgsender_MSG;
[L4104]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  COND FALSE  !(revert)
[L5753]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]  COND TRUE   revert
[L2438]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2439]              assume !revert && gas >= 0;
[L8446]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8447]              assume !revert && gas >= 0;

Loop:
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND TRUE   choice == 23
[L8286]              gas := gas - 21000;
[L8287]  COND FALSE  !(gas >= 0)
[L8450]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 13:59:21,536 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:59:21,536 INFO  L82        PathProgramCache]: Analyzing trace with hash -1465990038, now seen corresponding path program 1 times
[2020-11-25 13:59:21,540 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:59:21,564 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:59:21,605 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 13:59:21,607 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:59:21,607 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 13:59:21,994 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:59:22,006 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 13:59:22,007 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 13:59:22,008 INFO  L87              Difference]: Start difference. First operand 7442 states. Second operand 3 states.
[2020-11-25 13:59:22,381 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:59:22,381 INFO  L93              Difference]: Finished difference Result 6498 states and 10636 transitions.
[2020-11-25 13:59:22,381 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 13:59:22,383 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6498 states and 10636 transitions.
[2020-11-25 13:59:22,428 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 13:59:22,485 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6498 states to 6498 states and 10636 transitions.
[2020-11-25 13:59:22,486 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 13
[2020-11-25 13:59:22,490 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1320
[2020-11-25 13:59:22,490 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6498 states and 10636 transitions.
[2020-11-25 13:59:22,509 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:59:22,510 INFO  L728         BuchiCegarLoop]: Abstraction has 6498 states and 10636 transitions.
[2020-11-25 13:59:22,528 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6498 states and 10636 transitions.
[2020-11-25 13:59:22,627 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6498 to 5794.
[2020-11-25 13:59:22,628 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5794 states.
[2020-11-25 13:59:22,642 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5794 states to 5794 states and 9393 transitions.
[2020-11-25 13:59:22,643 INFO  L751         BuchiCegarLoop]: Abstraction has 5794 states and 9393 transitions.
[2020-11-25 13:59:22,644 INFO  L631         BuchiCegarLoop]: Abstraction has 5794 states and 9393 transitions.
[2020-11-25 13:59:22,644 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 13:59:22,644 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5794 states and 9393 transitions.
[2020-11-25 13:59:22,657 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:59:22,657 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:59:22,657 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:59:22,659 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:59:22,659 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_totalSupply_ERC200 := false;
[L2]                 call_totalSupply_ERC200 := false;
[L2]     CALL        call main();
[L8440]              assume null == 0;
[L8441]  CALL        call this := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L8441]  RET         call this := FreshRefGenerator__success();
[L8442]              assume now >= 0;
[L8443]              assume DType[this] == DkargoToken;
[L8444]              assume msgvalue_MSG == 0;
[L8445]              gas := gas - 53000;
[L8446]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2403]              havoc __exception;
[L2404]              revert := false;
[L2405]  COND FALSE  !(__exception)
[L2438]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5753]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4104]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4086]              assume msgsender_MSG != null;
[L4087]              Balance[this] := 0;
[L4088]              _owner_Ownership[this] := null;
[L4090]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4091]              _owner_Ownership[this] := msgsender_MSG;
[L4104]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  COND FALSE  !(revert)
[L5753]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]  COND FALSE  !(revert)
[L5757]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5757]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5758]  COND FALSE  !(revert)
[L5761]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4913]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L4913]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]  COND FALSE  !(revert)
[L4917]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4868]              assume msgsender_MSG != null;
[L4869]              Balance[this] := 0;
[L4870]              _supply_ERC20[this] := 0;
[L4871]              _balances_ERC20[this] := zeroRefintArr();
[L4872]              sum__balances1[this] := 0;
[L4873]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4874]              sum__allowances2[this] := 0;
[L4876]              pebs_s747 := supply_s747;
[L4877]  COND TRUE   DType[this] == DkargoToken
[L4878]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5282]              __var_24 := null;
[L5283]  COND TRUE   !(account_s999 != null)
[L5284]              revert := true;
[L4878]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4879]  COND TRUE   revert
[L4917]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4918]  COND TRUE   revert
[L5761]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5762]  COND TRUE   revert
[L2438]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2439]              assume !revert && gas >= 0;
[L8446]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8447]              assume !revert && gas >= 0;

Loop:
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND TRUE   choice == 23
[L8286]              gas := gas - 21000;
[L8287]  COND FALSE  !(gas >= 0)
[L8450]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 13:59:22,662 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:59:22,662 INFO  L82        PathProgramCache]: Analyzing trace with hash -724177320, now seen corresponding path program 1 times
[2020-11-25 13:59:22,663 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:59:22,674 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:59:22,693 INFO  L134       CoverageAnalysis]: Checked inductivity of 9 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9 trivial. 0 not checked.
[2020-11-25 13:59:22,693 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:59:22,693 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 13:59:22,694 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:59:22,694 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 13:59:22,695 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 13:59:22,695 INFO  L87              Difference]: Start difference. First operand 5794 states and 9393 transitions. cyclomatic complexity: 3601 Second operand 4 states.
[2020-11-25 13:59:23,273 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:59:23,273 INFO  L93              Difference]: Finished difference Result 5197 states and 5990 transitions.
[2020-11-25 13:59:23,273 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 13:59:23,274 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5197 states and 5990 transitions.
[2020-11-25 13:59:23,285 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:59:23,299 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5197 states to 5197 states and 5990 transitions.
[2020-11-25 13:59:23,299 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1073
[2020-11-25 13:59:23,300 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1073
[2020-11-25 13:59:23,300 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5197 states and 5990 transitions.
[2020-11-25 13:59:23,304 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:59:23,304 INFO  L728         BuchiCegarLoop]: Abstraction has 5197 states and 5990 transitions.
[2020-11-25 13:59:23,310 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5197 states and 5990 transitions.
[2020-11-25 13:59:23,347 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5197 to 5197.
[2020-11-25 13:59:23,347 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5197 states.
[2020-11-25 13:59:23,353 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5197 states to 5197 states and 5990 transitions.
[2020-11-25 13:59:23,353 INFO  L751         BuchiCegarLoop]: Abstraction has 5197 states and 5990 transitions.
[2020-11-25 13:59:23,353 INFO  L631         BuchiCegarLoop]: Abstraction has 5197 states and 5990 transitions.
[2020-11-25 13:59:23,353 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 13:59:23,353 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5197 states and 5990 transitions.
[2020-11-25 13:59:23,359 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:59:23,360 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:59:23,360 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:59:23,361 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:59:23,361 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_totalSupply_ERC200 := false;
[L2]                 call_totalSupply_ERC200 := false;
[L2]     CALL        call main();
[L8440]              assume null == 0;
[L8441]  CALL        call this := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L8441]  RET         call this := FreshRefGenerator__success();
[L8442]              assume now >= 0;
[L8443]              assume DType[this] == DkargoToken;
[L8444]              assume msgvalue_MSG == 0;
[L8445]              gas := gas - 53000;
[L8446]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2403]              havoc __exception;
[L2404]              revert := false;
[L2405]  COND FALSE  !(__exception)
[L2438]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5753]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4104]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4086]              assume msgsender_MSG != null;
[L4087]              Balance[this] := 0;
[L4088]              _owner_Ownership[this] := null;
[L4090]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4091]              _owner_Ownership[this] := msgsender_MSG;
[L4104]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  COND FALSE  !(revert)
[L5753]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]  COND FALSE  !(revert)
[L5757]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5757]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5758]  COND FALSE  !(revert)
[L5761]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4913]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L4913]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]  COND FALSE  !(revert)
[L4917]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4868]              assume msgsender_MSG != null;
[L4869]              Balance[this] := 0;
[L4870]              _supply_ERC20[this] := 0;
[L4871]              _balances_ERC20[this] := zeroRefintArr();
[L4872]              sum__balances1[this] := 0;
[L4873]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4874]              sum__allowances2[this] := 0;
[L4876]              pebs_s747 := supply_s747;
[L4877]  COND TRUE   DType[this] == DkargoToken
[L4878]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5282]              __var_24 := null;
[L5283]  COND TRUE   !(account_s999 != null)
[L5284]              revert := true;
[L4878]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4879]  COND TRUE   revert
[L4917]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4918]  COND TRUE   revert
[L5761]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5762]  COND TRUE   revert
[L2438]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2439]              assume !revert && gas >= 0;
[L8446]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8447]              assume !revert && gas >= 0;
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND FALSE  !(choice == 11)
[L8365]  COND FALSE  !(choice == 10)
[L8372]  COND TRUE   choice == 9
[L8373]              gas := gas - 21000;
[L8374]  COND TRUE   gas >= 0
[L8375]              assume msgvalue_MSG == 0;
[L8376]  CALL        call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _supply_ERC20[this] >= 0 && _supply_ERC20[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_ERC200 := true;
[L2]                 call_totalSupply_ERC200 := false;
[L2]                 revert := revert_hold;
[L1826]              havoc __exception;
[L1827]              revert := false;
[L1828]  COND FALSE  !(__exception)
[L1861]  CALL        call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5121]              __ret_0_ := _supply_ERC20[this];
[L1861]  RET         call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1862]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == _supply_ERC20[this] && _supply_ERC20[this] == old(_supply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _name_DkargoToken[this] == old(_name_DkargoToken[this])) && _symbol_DkargoToken[this] == old(_symbol_DkargoToken[this])) && _dkargoPrefix_DkargoPrefix[this] == old(_dkargoPrefix_DkargoPrefix[this])) && _infcs_ERC165[this] == old(_infcs_ERC165[this])) && _slist_AddressChain[this] == old(_slist_AddressChain[this])) && _owner_Ownership[this] == old(_owner_Ownership[this]));
[L2]                 revert := revert_hold;
[L8376]  RET         call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L8450]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND FALSE  !(choice == 11)
[L8365]  COND FALSE  !(choice == 10)
[L8372]  COND TRUE   choice == 9
[L8373]              gas := gas - 21000;
[L8374]  COND TRUE   gas >= 0
[L8375]              assume msgvalue_MSG == 0;
[L8376]  CALL        call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _supply_ERC20[this] >= 0 && _supply_ERC20[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_ERC200 := true;
[L2]                 call_totalSupply_ERC200 := false;
[L2]                 revert := revert_hold;
[L1826]              havoc __exception;
[L1827]              revert := false;
[L1828]  COND FALSE  !(__exception)
[L1861]  CALL        call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5121]              __ret_0_ := _supply_ERC20[this];
[L1861]  RET         call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1862]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == _supply_ERC20[this] && _supply_ERC20[this] == old(_supply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _name_DkargoToken[this] == old(_name_DkargoToken[this])) && _symbol_DkargoToken[this] == old(_symbol_DkargoToken[this])) && _dkargoPrefix_DkargoPrefix[this] == old(_dkargoPrefix_DkargoPrefix[this])) && _infcs_ERC165[this] == old(_infcs_ERC165[this])) && _slist_AddressChain[this] == old(_slist_AddressChain[this])) && _owner_Ownership[this] == old(_owner_Ownership[this]));
[L2]                 revert := revert_hold;
[L8376]  RET         call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L8450]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 13:59:23,365 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:59:23,365 INFO  L82        PathProgramCache]: Analyzing trace with hash -551166888, now seen corresponding path program 1 times
[2020-11-25 13:59:23,366 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:59:23,376 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:59:23,425 INFO  L134       CoverageAnalysis]: Checked inductivity of 10 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 10 trivial. 0 not checked.
[2020-11-25 13:59:23,425 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:59:23,425 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 13:59:23,425 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:59:23,426 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 13:59:23,426 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 13:59:23,426 INFO  L87              Difference]: Start difference. First operand 5197 states and 5990 transitions. cyclomatic complexity: 795 Second operand 8 states.
[2020-11-25 13:59:23,527 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:59:23,528 INFO  L93              Difference]: Finished difference Result 5217 states and 6014 transitions.
[2020-11-25 13:59:23,528 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 13:59:23,528 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5217 states and 6014 transitions.
[2020-11-25 13:59:23,541 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:59:23,556 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5217 states to 5196 states and 5988 transitions.
[2020-11-25 13:59:23,557 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1073
[2020-11-25 13:59:23,557 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1073
[2020-11-25 13:59:23,557 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5196 states and 5988 transitions.
[2020-11-25 13:59:23,562 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:59:23,562 INFO  L728         BuchiCegarLoop]: Abstraction has 5196 states and 5988 transitions.
[2020-11-25 13:59:23,566 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5196 states and 5988 transitions.
[2020-11-25 13:59:23,600 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5196 to 5196.
[2020-11-25 13:59:23,600 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5196 states.
[2020-11-25 13:59:23,606 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5196 states to 5196 states and 5988 transitions.
[2020-11-25 13:59:23,606 INFO  L751         BuchiCegarLoop]: Abstraction has 5196 states and 5988 transitions.
[2020-11-25 13:59:23,606 INFO  L631         BuchiCegarLoop]: Abstraction has 5196 states and 5988 transitions.
[2020-11-25 13:59:23,606 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 13:59:23,606 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5196 states and 5988 transitions.
[2020-11-25 13:59:23,614 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:59:23,614 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:59:23,614 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:59:23,615 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:59:23,615 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_totalSupply_ERC200 := false;
[L2]                 call_totalSupply_ERC200 := false;
[L2]     CALL        call main();
[L8440]              assume null == 0;
[L8441]  CALL        call this := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L8441]  RET         call this := FreshRefGenerator__success();
[L8442]              assume now >= 0;
[L8443]              assume DType[this] == DkargoToken;
[L8444]              assume msgvalue_MSG == 0;
[L8445]              gas := gas - 53000;
[L8446]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2403]              havoc __exception;
[L2404]              revert := false;
[L2405]  COND FALSE  !(__exception)
[L2438]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5753]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4104]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4086]              assume msgsender_MSG != null;
[L4087]              Balance[this] := 0;
[L4088]              _owner_Ownership[this] := null;
[L4090]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4091]              _owner_Ownership[this] := msgsender_MSG;
[L4104]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  COND FALSE  !(revert)
[L5753]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]  COND FALSE  !(revert)
[L5757]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5757]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5758]  COND FALSE  !(revert)
[L5761]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4913]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L4913]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]  COND FALSE  !(revert)
[L4917]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4868]              assume msgsender_MSG != null;
[L4869]              Balance[this] := 0;
[L4870]              _supply_ERC20[this] := 0;
[L4871]              _balances_ERC20[this] := zeroRefintArr();
[L4872]              sum__balances1[this] := 0;
[L4873]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4874]              sum__allowances2[this] := 0;
[L4876]              pebs_s747 := supply_s747;
[L4877]  COND TRUE   DType[this] == DkargoToken
[L4878]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5282]              __var_24 := null;
[L5283]  COND FALSE  !(!(account_s999 != null))
[L5287]  CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND TRUE   !(c_s130 >= a_s130)
[L4214]              revert := true;
[L5287]  RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L5288]  COND TRUE   revert
[L4878]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4879]  COND TRUE   revert
[L4917]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4918]  COND TRUE   revert
[L5761]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5762]  COND TRUE   revert
[L2438]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2439]              assume !revert && gas >= 0;
[L8446]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8447]              assume !revert && gas >= 0;
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND FALSE  !(choice == 11)
[L8365]  COND FALSE  !(choice == 10)
[L8372]  COND TRUE   choice == 9
[L8373]              gas := gas - 21000;
[L8374]  COND TRUE   gas >= 0
[L8375]              assume msgvalue_MSG == 0;
[L8376]  CALL        call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _supply_ERC20[this] >= 0 && _supply_ERC20[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_ERC200 := true;
[L2]                 call_totalSupply_ERC200 := false;
[L2]                 revert := revert_hold;
[L1826]              havoc __exception;
[L1827]              revert := false;
[L1828]  COND FALSE  !(__exception)
[L1861]  CALL        call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5121]              __ret_0_ := _supply_ERC20[this];
[L1861]  RET         call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1862]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == _supply_ERC20[this] && _supply_ERC20[this] == old(_supply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _name_DkargoToken[this] == old(_name_DkargoToken[this])) && _symbol_DkargoToken[this] == old(_symbol_DkargoToken[this])) && _dkargoPrefix_DkargoPrefix[this] == old(_dkargoPrefix_DkargoPrefix[this])) && _infcs_ERC165[this] == old(_infcs_ERC165[this])) && _slist_AddressChain[this] == old(_slist_AddressChain[this])) && _owner_Ownership[this] == old(_owner_Ownership[this]));
[L2]                 revert := revert_hold;
[L8376]  RET         call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L8450]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND FALSE  !(choice == 11)
[L8365]  COND FALSE  !(choice == 10)
[L8372]  COND TRUE   choice == 9
[L8373]              gas := gas - 21000;
[L8374]  COND TRUE   gas >= 0
[L8375]              assume msgvalue_MSG == 0;
[L8376]  CALL        call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _supply_ERC20[this] >= 0 && _supply_ERC20[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_ERC200 := true;
[L2]                 call_totalSupply_ERC200 := false;
[L2]                 revert := revert_hold;
[L1826]              havoc __exception;
[L1827]              revert := false;
[L1828]  COND FALSE  !(__exception)
[L1861]  CALL        call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5121]              __ret_0_ := _supply_ERC20[this];
[L1861]  RET         call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1862]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == _supply_ERC20[this] && _supply_ERC20[this] == old(_supply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _name_DkargoToken[this] == old(_name_DkargoToken[this])) && _symbol_DkargoToken[this] == old(_symbol_DkargoToken[this])) && _dkargoPrefix_DkargoPrefix[this] == old(_dkargoPrefix_DkargoPrefix[this])) && _infcs_ERC165[this] == old(_infcs_ERC165[this])) && _slist_AddressChain[this] == old(_slist_AddressChain[this])) && _owner_Ownership[this] == old(_owner_Ownership[this]));
[L2]                 revert := revert_hold;
[L8376]  RET         call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L8450]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 13:59:23,619 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:59:23,619 INFO  L82        PathProgramCache]: Analyzing trace with hash 393838591, now seen corresponding path program 1 times
[2020-11-25 13:59:23,620 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:59:23,630 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:59:23,680 INFO  L134       CoverageAnalysis]: Checked inductivity of 10 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 10 trivial. 0 not checked.
[2020-11-25 13:59:23,681 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:59:23,681 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 13:59:23,681 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:59:23,681 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 13:59:23,681 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 13:59:23,681 INFO  L87              Difference]: Start difference. First operand 5196 states and 5988 transitions. cyclomatic complexity: 794 Second operand 3 states.
[2020-11-25 13:59:23,773 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:59:23,773 INFO  L93              Difference]: Finished difference Result 5882 states and 6648 transitions.
[2020-11-25 13:59:23,773 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 13:59:23,773 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5882 states and 6648 transitions.
[2020-11-25 13:59:23,785 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 13:59:23,800 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5882 states to 5515 states and 6204 transitions.
[2020-11-25 13:59:23,800 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1183
[2020-11-25 13:59:23,800 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1245
[2020-11-25 13:59:23,800 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5515 states and 6204 transitions.
[2020-11-25 13:59:23,805 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:59:23,805 INFO  L728         BuchiCegarLoop]: Abstraction has 5515 states and 6204 transitions.
[2020-11-25 13:59:23,809 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5515 states and 6204 transitions.
[2020-11-25 13:59:23,838 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5515 to 5085.
[2020-11-25 13:59:23,838 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5085 states.
[2020-11-25 13:59:23,843 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5085 states to 5085 states and 5664 transitions.
[2020-11-25 13:59:23,843 INFO  L751         BuchiCegarLoop]: Abstraction has 5085 states and 5664 transitions.
[2020-11-25 13:59:23,843 INFO  L631         BuchiCegarLoop]: Abstraction has 5085 states and 5664 transitions.
[2020-11-25 13:59:23,843 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 13:59:23,843 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5085 states and 5664 transitions.
[2020-11-25 13:59:23,848 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 13:59:23,848 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:59:23,848 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:59:23,850 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:59:23,850 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_totalSupply_ERC200 := false;
[L2]                 call_totalSupply_ERC200 := false;
[L2]     CALL        call main();
[L8440]              assume null == 0;
[L8441]  CALL        call this := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L8441]  RET         call this := FreshRefGenerator__success();
[L8442]              assume now >= 0;
[L8443]              assume DType[this] == DkargoToken;
[L8444]              assume msgvalue_MSG == 0;
[L8445]              gas := gas - 53000;
[L8446]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2403]              havoc __exception;
[L2404]              revert := false;
[L2405]  COND FALSE  !(__exception)
[L2438]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5753]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4104]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4086]              assume msgsender_MSG != null;
[L4087]              Balance[this] := 0;
[L4088]              _owner_Ownership[this] := null;
[L4090]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4091]              _owner_Ownership[this] := msgsender_MSG;
[L4104]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  COND FALSE  !(revert)
[L5753]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]  COND FALSE  !(revert)
[L5757]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5757]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5758]  COND FALSE  !(revert)
[L5761]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4913]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L4913]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]  COND FALSE  !(revert)
[L4917]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4868]              assume msgsender_MSG != null;
[L4869]              Balance[this] := 0;
[L4870]              _supply_ERC20[this] := 0;
[L4871]              _balances_ERC20[this] := zeroRefintArr();
[L4872]              sum__balances1[this] := 0;
[L4873]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4874]              sum__allowances2[this] := 0;
[L4876]              pebs_s747 := supply_s747;
[L4877]  COND TRUE   DType[this] == DkargoToken
[L4878]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5282]              __var_24 := null;
[L5283]  COND FALSE  !(!(account_s999 != null))
[L5287]  CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5287]  RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L5288]  COND FALSE  !(revert)
[L5291]              _supply_ERC20[this] := __var_25;
[L5292]  CALL        call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5292]  RET         call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L5293]  COND FALSE  !(revert)
[L5296]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][account_s999];
[L5297]              _balances_ERC20[this][account_s999] := __var_26;
[L5298]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][account_s999];
[L5299]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4878]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4879]  COND FALSE  !(revert)
[L4917]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4918]  COND FALSE  !(revert)
[L5761]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5762]  COND FALSE  !(revert)
[L5765]  CALL        call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5381]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5381]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND FALSE  !(revert)
[L5385]  CALL        call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5362]              assume msgsender_MSG != null;
[L5363]              Balance[this] := 0;
[L5385]  RET         call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5386]  COND FALSE  !(revert)
[L5765]  RET         call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]  COND FALSE  !(revert)
[L5769]  CALL        call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L4361]  CALL        call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4340]              assume msgsender_MSG != null;
[L4341]              Balance[this] := 0;
[L4343]  CALL        call __var_3 := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L4343]  RET         call __var_3 := FreshRefGenerator__success();
[L4344]  COND FALSE  !(revert)
[L4347]              _slist_AddressChain[this] := __var_3;
[L4361]  RET         call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4362]  COND FALSE  !(revert)
[L5769]  RET         call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L5770]  COND FALSE  !(revert)
[L5773]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L5773]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5774]  COND FALSE  !(revert)
[L5777]  CALL        call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4759]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L4759]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  CALL        call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4723]              assume msgsender_MSG != null;
[L4724]              Balance[this] := 0;
[L4725]              _infcs_ERC165[this] := zerointboolArr();
[L4727]              __var_16 := 33540519;
[L4728]  COND TRUE   DType[this] == DkargoToken
[L4729]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L4729]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4730]  COND FALSE  !(revert)
[L4763]  RET         call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4764]  COND FALSE  !(revert)
[L5777]  RET         call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5778]  COND FALSE  !(revert)
[L5781]  CALL        call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  CALL        call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4029]              assume msgsender_MSG != null;
[L4030]              Balance[this] := 0;
[L4031]              _dkargoPrefix_DkargoPrefix[this] := -1676636045;
[L4045]  RET         call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4046]  COND FALSE  !(revert)
[L5781]  RET         call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]  COND FALSE  !(revert)
[L5785]  CALL        call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5675]              assume msgsender_MSG != null;
[L5676]              Balance[this] := 0;
[L5677]              _name_DkargoToken[this] := -1676636045;
[L5678]              _symbol_DkargoToken[this] := -1676636045;
[L5680]  COND TRUE   DType[this] == DkargoToken
[L5681]  CALL        call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L4070]              _dkargoPrefix_DkargoPrefix[this] := prefix_s21;
[L5681]  RET         call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L5682]  COND FALSE  !(revert)
[L5688]              __var_39 := -1804674067;
[L5689]  COND TRUE   DType[this] == DkargoToken
[L5690]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L5690]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L5691]  COND FALSE  !(revert)
[L5697]              _name_DkargoToken[this] := name_s1191;
[L5698]              _symbol_DkargoToken[this] := symbol_s1191;
[L5699]  COND TRUE   DType[this] == DkargoToken
[L5700]  CALL        call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4504]              __var_6 := null;
[L4505]  COND FALSE  !(!(node_s455 != null))
[L4509]  COND TRUE   DType[this] == DkargoToken
[L4510]  CALL        call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L4510]  RET         call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4511]  COND FALSE  !(revert)
[L4522]  COND FALSE  !(!!__var_7)
[L4526]  COND TRUE   count_AddressChain.NodeList[_slist_AddressChain[this]] == 0
[L4527]              tail_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4528]              head_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4534]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L4534]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4535]  COND FALSE  !(revert)
[L4538]              count_AddressChain.NodeList[_slist_AddressChain[this]] := __var_8;
[L4539]              assert { :EventEmitted "AddressChainLinked_AddressChain" } true;
[L5700]  RET         call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5701]  COND FALSE  !(revert)
[L5785]  RET         call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5786]  COND FALSE  !(revert)
[L2438]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2439]              assume !revert && gas >= 0;
[L8446]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8447]              assume !revert && gas >= 0;
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND FALSE  !(choice == 11)
[L8365]  COND FALSE  !(choice == 10)
[L8372]  COND TRUE   choice == 9
[L8373]              gas := gas - 21000;
[L8374]  COND TRUE   gas >= 0
[L8375]              assume msgvalue_MSG == 0;
[L8376]  CALL        call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _supply_ERC20[this] >= 0 && _supply_ERC20[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_ERC200 := true;
[L2]                 call_totalSupply_ERC200 := false;
[L2]                 revert := revert_hold;
[L1826]              havoc __exception;
[L1827]              revert := false;
[L1828]  COND FALSE  !(__exception)
[L1861]  CALL        call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5121]              __ret_0_ := _supply_ERC20[this];
[L1861]  RET         call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1862]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == _supply_ERC20[this] && _supply_ERC20[this] == old(_supply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _name_DkargoToken[this] == old(_name_DkargoToken[this])) && _symbol_DkargoToken[this] == old(_symbol_DkargoToken[this])) && _dkargoPrefix_DkargoPrefix[this] == old(_dkargoPrefix_DkargoPrefix[this])) && _infcs_ERC165[this] == old(_infcs_ERC165[this])) && _slist_AddressChain[this] == old(_slist_AddressChain[this])) && _owner_Ownership[this] == old(_owner_Ownership[this]));
[L2]                 revert := revert_hold;
[L8376]  RET         call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L8450]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND FALSE  !(choice == 11)
[L8365]  COND FALSE  !(choice == 10)
[L8372]  COND TRUE   choice == 9
[L8373]              gas := gas - 21000;
[L8374]  COND TRUE   gas >= 0
[L8375]              assume msgvalue_MSG == 0;
[L8376]  CALL        call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _supply_ERC20[this] >= 0 && _supply_ERC20[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_ERC200 := true;
[L2]                 call_totalSupply_ERC200 := false;
[L2]                 revert := revert_hold;
[L1826]              havoc __exception;
[L1827]              revert := false;
[L1828]  COND FALSE  !(__exception)
[L1861]  CALL        call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5121]              __ret_0_ := _supply_ERC20[this];
[L1861]  RET         call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1862]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == _supply_ERC20[this] && _supply_ERC20[this] == old(_supply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _name_DkargoToken[this] == old(_name_DkargoToken[this])) && _symbol_DkargoToken[this] == old(_symbol_DkargoToken[this])) && _dkargoPrefix_DkargoPrefix[this] == old(_dkargoPrefix_DkargoPrefix[this])) && _infcs_ERC165[this] == old(_infcs_ERC165[this])) && _slist_AddressChain[this] == old(_slist_AddressChain[this])) && _owner_Ownership[this] == old(_owner_Ownership[this]));
[L2]                 revert := revert_hold;
[L8376]  RET         call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L8450]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 13:59:23,855 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:59:23,855 INFO  L82        PathProgramCache]: Analyzing trace with hash 2113404729, now seen corresponding path program 1 times
[2020-11-25 13:59:23,856 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:59:23,872 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:59:23,930 INFO  L134       CoverageAnalysis]: Checked inductivity of 65 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 65 trivial. 0 not checked.
[2020-11-25 13:59:23,930 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:59:23,930 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 13:59:23,930 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:59:23,931 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 13:59:23,931 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 13:59:23,931 INFO  L87              Difference]: Start difference. First operand 5085 states and 5664 transitions. cyclomatic complexity: 581 Second operand 4 states.
[2020-11-25 13:59:23,962 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:59:23,962 INFO  L93              Difference]: Finished difference Result 5099 states and 5692 transitions.
[2020-11-25 13:59:23,962 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 13:59:23,962 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5099 states and 5692 transitions.
[2020-11-25 13:59:23,973 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 13:59:23,988 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5099 states to 5089 states and 5680 transitions.
[2020-11-25 13:59:23,988 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1175
[2020-11-25 13:59:23,989 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1175
[2020-11-25 13:59:23,989 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5089 states and 5680 transitions.
[2020-11-25 13:59:23,993 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:59:23,993 INFO  L728         BuchiCegarLoop]: Abstraction has 5089 states and 5680 transitions.
[2020-11-25 13:59:23,997 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5089 states and 5680 transitions.
[2020-11-25 13:59:24,030 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5089 to 5089.
[2020-11-25 13:59:24,030 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5089 states.
[2020-11-25 13:59:24,035 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5089 states to 5089 states and 5680 transitions.
[2020-11-25 13:59:24,035 INFO  L751         BuchiCegarLoop]: Abstraction has 5089 states and 5680 transitions.
[2020-11-25 13:59:24,035 INFO  L631         BuchiCegarLoop]: Abstraction has 5089 states and 5680 transitions.
[2020-11-25 13:59:24,035 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 13:59:24,036 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5089 states and 5680 transitions.
[2020-11-25 13:59:24,041 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 13:59:24,041 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:59:24,041 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:59:24,042 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:59:24,042 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_totalSupply_ERC200 := false;
[L2]                 call_totalSupply_ERC200 := false;
[L2]     CALL        call main();
[L8440]              assume null == 0;
[L8441]  CALL        call this := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L8441]  RET         call this := FreshRefGenerator__success();
[L8442]              assume now >= 0;
[L8443]              assume DType[this] == DkargoToken;
[L8444]              assume msgvalue_MSG == 0;
[L8445]              gas := gas - 53000;
[L8446]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2403]              havoc __exception;
[L2404]              revert := false;
[L2405]  COND FALSE  !(__exception)
[L2438]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5753]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4104]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4086]              assume msgsender_MSG != null;
[L4087]              Balance[this] := 0;
[L4088]              _owner_Ownership[this] := null;
[L4090]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4091]              _owner_Ownership[this] := msgsender_MSG;
[L4104]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  COND FALSE  !(revert)
[L5753]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]  COND FALSE  !(revert)
[L5757]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5757]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5758]  COND FALSE  !(revert)
[L5761]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4913]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L4913]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]  COND FALSE  !(revert)
[L4917]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4868]              assume msgsender_MSG != null;
[L4869]              Balance[this] := 0;
[L4870]              _supply_ERC20[this] := 0;
[L4871]              _balances_ERC20[this] := zeroRefintArr();
[L4872]              sum__balances1[this] := 0;
[L4873]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4874]              sum__allowances2[this] := 0;
[L4876]              pebs_s747 := supply_s747;
[L4877]  COND TRUE   DType[this] == DkargoToken
[L4878]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5282]              __var_24 := null;
[L5283]  COND FALSE  !(!(account_s999 != null))
[L5287]  CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5287]  RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L5288]  COND FALSE  !(revert)
[L5291]              _supply_ERC20[this] := __var_25;
[L5292]  CALL        call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5292]  RET         call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L5293]  COND FALSE  !(revert)
[L5296]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][account_s999];
[L5297]              _balances_ERC20[this][account_s999] := __var_26;
[L5298]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][account_s999];
[L5299]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4878]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4879]  COND FALSE  !(revert)
[L4917]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4918]  COND FALSE  !(revert)
[L5761]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5762]  COND FALSE  !(revert)
[L5765]  CALL        call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5381]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5381]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND FALSE  !(revert)
[L5385]  CALL        call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5362]              assume msgsender_MSG != null;
[L5363]              Balance[this] := 0;
[L5385]  RET         call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5386]  COND FALSE  !(revert)
[L5765]  RET         call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]  COND FALSE  !(revert)
[L5769]  CALL        call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L4361]  CALL        call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4340]              assume msgsender_MSG != null;
[L4341]              Balance[this] := 0;
[L4343]  CALL        call __var_3 := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L4343]  RET         call __var_3 := FreshRefGenerator__success();
[L4344]  COND FALSE  !(revert)
[L4347]              _slist_AddressChain[this] := __var_3;
[L4361]  RET         call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4362]  COND FALSE  !(revert)
[L5769]  RET         call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L5770]  COND FALSE  !(revert)
[L5773]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L5773]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5774]  COND FALSE  !(revert)
[L5777]  CALL        call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4759]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L4759]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  CALL        call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4723]              assume msgsender_MSG != null;
[L4724]              Balance[this] := 0;
[L4725]              _infcs_ERC165[this] := zerointboolArr();
[L4727]              __var_16 := 33540519;
[L4728]  COND TRUE   DType[this] == DkargoToken
[L4729]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L4729]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4730]  COND FALSE  !(revert)
[L4763]  RET         call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4764]  COND FALSE  !(revert)
[L5777]  RET         call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5778]  COND FALSE  !(revert)
[L5781]  CALL        call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  CALL        call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4029]              assume msgsender_MSG != null;
[L4030]              Balance[this] := 0;
[L4031]              _dkargoPrefix_DkargoPrefix[this] := -1676636045;
[L4045]  RET         call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4046]  COND FALSE  !(revert)
[L5781]  RET         call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]  COND FALSE  !(revert)
[L5785]  CALL        call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5675]              assume msgsender_MSG != null;
[L5676]              Balance[this] := 0;
[L5677]              _name_DkargoToken[this] := -1676636045;
[L5678]              _symbol_DkargoToken[this] := -1676636045;
[L5680]  COND TRUE   DType[this] == DkargoToken
[L5681]  CALL        call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L4070]              _dkargoPrefix_DkargoPrefix[this] := prefix_s21;
[L5681]  RET         call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L5682]  COND FALSE  !(revert)
[L5688]              __var_39 := -1804674067;
[L5689]  COND TRUE   DType[this] == DkargoToken
[L5690]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L5690]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L5691]  COND FALSE  !(revert)
[L5697]              _name_DkargoToken[this] := name_s1191;
[L5698]              _symbol_DkargoToken[this] := symbol_s1191;
[L5699]  COND TRUE   DType[this] == DkargoToken
[L5700]  CALL        call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4504]              __var_6 := null;
[L4505]  COND FALSE  !(!(node_s455 != null))
[L4509]  COND TRUE   DType[this] == DkargoToken
[L4510]  CALL        call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L4510]  RET         call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4511]  COND FALSE  !(revert)
[L4522]  COND FALSE  !(!!__var_7)
[L4526]  COND TRUE   count_AddressChain.NodeList[_slist_AddressChain[this]] == 0
[L4527]              tail_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4528]              head_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4534]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L4534]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4535]  COND FALSE  !(revert)
[L4538]              count_AddressChain.NodeList[_slist_AddressChain[this]] := __var_8;
[L4539]              assert { :EventEmitted "AddressChainLinked_AddressChain" } true;
[L5700]  RET         call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5701]  COND FALSE  !(revert)
[L5785]  RET         call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5786]  COND FALSE  !(revert)
[L2438]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2439]              assume !revert && gas >= 0;
[L8446]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8447]              assume !revert && gas >= 0;
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND FALSE  !(choice == 11)
[L8365]  COND FALSE  !(choice == 10)
[L8372]  COND TRUE   choice == 9
[L8373]              gas := gas - 21000;
[L8374]  COND TRUE   gas >= 0
[L8375]              assume msgvalue_MSG == 0;
[L8376]  CALL        call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _supply_ERC20[this] >= 0 && _supply_ERC20[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_ERC200 := true;
[L2]                 call_totalSupply_ERC200 := false;
[L2]                 revert := revert_hold;
[L1826]              havoc __exception;
[L1827]              revert := false;
[L1828]  COND FALSE  !(__exception)
[L1861]  CALL        call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5121]              __ret_0_ := _supply_ERC20[this];
[L1861]  RET         call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1862]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == _supply_ERC20[this] && _supply_ERC20[this] == old(_supply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _name_DkargoToken[this] == old(_name_DkargoToken[this])) && _symbol_DkargoToken[this] == old(_symbol_DkargoToken[this])) && _dkargoPrefix_DkargoPrefix[this] == old(_dkargoPrefix_DkargoPrefix[this])) && _infcs_ERC165[this] == old(_infcs_ERC165[this])) && _slist_AddressChain[this] == old(_slist_AddressChain[this])) && _owner_Ownership[this] == old(_owner_Ownership[this]));
[L2]                 revert := revert_hold;
[L8376]  RET         call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L8450]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND FALSE  !(choice == 11)
[L8365]  COND FALSE  !(choice == 10)
[L8372]  COND TRUE   choice == 9
[L8373]              gas := gas - 21000;
[L8374]  COND TRUE   gas >= 0
[L8375]              assume msgvalue_MSG == 0;
[L8376]  CALL        call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _supply_ERC20[this] >= 0 && _supply_ERC20[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_ERC200 := true;
[L2]                 call_totalSupply_ERC200 := false;
[L2]                 revert := revert_hold;
[L1826]              havoc __exception;
[L1827]              revert := false;
[L1828]  COND FALSE  !(__exception)
[L1861]  CALL        call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5121]              __ret_0_ := _supply_ERC20[this];
[L1861]  RET         call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1862]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == _supply_ERC20[this] && _supply_ERC20[this] == old(_supply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _name_DkargoToken[this] == old(_name_DkargoToken[this])) && _symbol_DkargoToken[this] == old(_symbol_DkargoToken[this])) && _dkargoPrefix_DkargoPrefix[this] == old(_dkargoPrefix_DkargoPrefix[this])) && _infcs_ERC165[this] == old(_infcs_ERC165[this])) && _slist_AddressChain[this] == old(_slist_AddressChain[this])) && _owner_Ownership[this] == old(_owner_Ownership[this]));
[L2]                 revert := revert_hold;
[L8376]  RET         call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L8450]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 13:59:24,047 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:59:24,047 INFO  L82        PathProgramCache]: Analyzing trace with hash 1944865929, now seen corresponding path program 1 times
[2020-11-25 13:59:24,048 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:59:24,061 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:59:24,121 INFO  L134       CoverageAnalysis]: Checked inductivity of 65 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 65 trivial. 0 not checked.
[2020-11-25 13:59:24,121 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:59:24,121 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 13:59:24,122 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:59:24,122 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 13:59:24,122 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 13:59:24,122 INFO  L87              Difference]: Start difference. First operand 5089 states and 5680 transitions. cyclomatic complexity: 593 Second operand 4 states.
[2020-11-25 13:59:24,161 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:59:24,161 INFO  L93              Difference]: Finished difference Result 5090 states and 5679 transitions.
[2020-11-25 13:59:24,161 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 13:59:24,162 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5090 states and 5679 transitions.
[2020-11-25 13:59:24,171 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 13:59:24,182 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5090 states to 5080 states and 5669 transitions.
[2020-11-25 13:59:24,182 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1164
[2020-11-25 13:59:24,183 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1164
[2020-11-25 13:59:24,183 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5080 states and 5669 transitions.
[2020-11-25 13:59:24,193 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:59:24,193 INFO  L728         BuchiCegarLoop]: Abstraction has 5080 states and 5669 transitions.
[2020-11-25 13:59:24,199 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5080 states and 5669 transitions.
[2020-11-25 13:59:24,227 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5080 to 5078.
[2020-11-25 13:59:24,227 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5078 states.
[2020-11-25 13:59:24,232 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5078 states to 5078 states and 5667 transitions.
[2020-11-25 13:59:24,232 INFO  L751         BuchiCegarLoop]: Abstraction has 5078 states and 5667 transitions.
[2020-11-25 13:59:24,232 INFO  L631         BuchiCegarLoop]: Abstraction has 5078 states and 5667 transitions.
[2020-11-25 13:59:24,232 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 13:59:24,232 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5078 states and 5667 transitions.
[2020-11-25 13:59:24,237 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 13:59:24,237 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:59:24,237 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:59:24,239 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:59:24,239 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_totalSupply_ERC200 := false;
[L2]                 call_totalSupply_ERC200 := false;
[L2]     CALL        call main();
[L8440]              assume null == 0;
[L8441]  CALL        call this := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L8441]  RET         call this := FreshRefGenerator__success();
[L8442]              assume now >= 0;
[L8443]              assume DType[this] == DkargoToken;
[L8444]              assume msgvalue_MSG == 0;
[L8445]              gas := gas - 53000;
[L8446]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2403]              havoc __exception;
[L2404]              revert := false;
[L2405]  COND FALSE  !(__exception)
[L2438]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5753]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4104]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4086]              assume msgsender_MSG != null;
[L4087]              Balance[this] := 0;
[L4088]              _owner_Ownership[this] := null;
[L4090]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4091]              _owner_Ownership[this] := msgsender_MSG;
[L4104]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  COND FALSE  !(revert)
[L5753]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]  COND FALSE  !(revert)
[L5757]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5757]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5758]  COND FALSE  !(revert)
[L5761]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4913]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L4913]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]  COND FALSE  !(revert)
[L4917]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4868]              assume msgsender_MSG != null;
[L4869]              Balance[this] := 0;
[L4870]              _supply_ERC20[this] := 0;
[L4871]              _balances_ERC20[this] := zeroRefintArr();
[L4872]              sum__balances1[this] := 0;
[L4873]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4874]              sum__allowances2[this] := 0;
[L4876]              pebs_s747 := supply_s747;
[L4877]  COND TRUE   DType[this] == DkargoToken
[L4878]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5282]              __var_24 := null;
[L5283]  COND FALSE  !(!(account_s999 != null))
[L5287]  CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5287]  RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L5288]  COND FALSE  !(revert)
[L5291]              _supply_ERC20[this] := __var_25;
[L5292]  CALL        call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5292]  RET         call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L5293]  COND FALSE  !(revert)
[L5296]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][account_s999];
[L5297]              _balances_ERC20[this][account_s999] := __var_26;
[L5298]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][account_s999];
[L5299]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4878]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4879]  COND FALSE  !(revert)
[L4917]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4918]  COND FALSE  !(revert)
[L5761]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5762]  COND FALSE  !(revert)
[L5765]  CALL        call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5381]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5381]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND FALSE  !(revert)
[L5385]  CALL        call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5362]              assume msgsender_MSG != null;
[L5363]              Balance[this] := 0;
[L5385]  RET         call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5386]  COND FALSE  !(revert)
[L5765]  RET         call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]  COND FALSE  !(revert)
[L5769]  CALL        call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L4361]  CALL        call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4340]              assume msgsender_MSG != null;
[L4341]              Balance[this] := 0;
[L4343]  CALL        call __var_3 := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L4343]  RET         call __var_3 := FreshRefGenerator__success();
[L4344]  COND FALSE  !(revert)
[L4347]              _slist_AddressChain[this] := __var_3;
[L4361]  RET         call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4362]  COND FALSE  !(revert)
[L5769]  RET         call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L5770]  COND FALSE  !(revert)
[L5773]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L5773]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5774]  COND FALSE  !(revert)
[L5777]  CALL        call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4759]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L4759]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  CALL        call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4723]              assume msgsender_MSG != null;
[L4724]              Balance[this] := 0;
[L4725]              _infcs_ERC165[this] := zerointboolArr();
[L4727]              __var_16 := 33540519;
[L4728]  COND TRUE   DType[this] == DkargoToken
[L4729]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L4729]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4730]  COND FALSE  !(revert)
[L4763]  RET         call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4764]  COND FALSE  !(revert)
[L5777]  RET         call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5778]  COND FALSE  !(revert)
[L5781]  CALL        call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  CALL        call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4029]              assume msgsender_MSG != null;
[L4030]              Balance[this] := 0;
[L4031]              _dkargoPrefix_DkargoPrefix[this] := -1676636045;
[L4045]  RET         call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4046]  COND FALSE  !(revert)
[L5781]  RET         call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]  COND FALSE  !(revert)
[L5785]  CALL        call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5675]              assume msgsender_MSG != null;
[L5676]              Balance[this] := 0;
[L5677]              _name_DkargoToken[this] := -1676636045;
[L5678]              _symbol_DkargoToken[this] := -1676636045;
[L5680]  COND TRUE   DType[this] == DkargoToken
[L5681]  CALL        call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L4070]              _dkargoPrefix_DkargoPrefix[this] := prefix_s21;
[L5681]  RET         call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L5682]  COND FALSE  !(revert)
[L5688]              __var_39 := -1804674067;
[L5689]  COND TRUE   DType[this] == DkargoToken
[L5690]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L5690]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L5691]  COND FALSE  !(revert)
[L5697]              _name_DkargoToken[this] := name_s1191;
[L5698]              _symbol_DkargoToken[this] := symbol_s1191;
[L5699]  COND TRUE   DType[this] == DkargoToken
[L5700]  CALL        call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4504]              __var_6 := null;
[L4505]  COND FALSE  !(!(node_s455 != null))
[L4509]  COND TRUE   DType[this] == DkargoToken
[L4510]  CALL        call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L4510]  RET         call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4511]  COND FALSE  !(revert)
[L4522]  COND FALSE  !(!!__var_7)
[L4526]  COND TRUE   count_AddressChain.NodeList[_slist_AddressChain[this]] == 0
[L4527]              tail_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4528]              head_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4534]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L4534]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4535]  COND FALSE  !(revert)
[L4538]              count_AddressChain.NodeList[_slist_AddressChain[this]] := __var_8;
[L4539]              assert { :EventEmitted "AddressChainLinked_AddressChain" } true;
[L5700]  RET         call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5701]  COND FALSE  !(revert)
[L5785]  RET         call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5786]  COND FALSE  !(revert)
[L2438]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2439]              assume !revert && gas >= 0;
[L8446]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8447]              assume !revert && gas >= 0;
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND FALSE  !(choice == 11)
[L8365]  COND FALSE  !(choice == 10)
[L8372]  COND TRUE   choice == 9
[L8373]              gas := gas - 21000;
[L8374]  COND TRUE   gas >= 0
[L8375]              assume msgvalue_MSG == 0;
[L8376]  CALL        call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _supply_ERC20[this] >= 0 && _supply_ERC20[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_ERC200 := true;
[L2]                 call_totalSupply_ERC200 := false;
[L2]                 revert := revert_hold;
[L1826]              havoc __exception;
[L1827]              revert := false;
[L1828]  COND TRUE   __exception
[L1829]              __tmp__Balance := Balance;
[L1830]              __tmp__DType := DType;
[L1831]              __tmp__Alloc := Alloc;
[L1832]              __tmp__balance_ADDR := balance_ADDR;
[L1833]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1834]              __tmp__sum := sum;
[L1835]              __tmp__M_int_bool := M_int_bool;
[L1836]              __tmp__sum__infcs0 := sum__infcs0;
[L1837]              __tmp__M_Ref_int := M_Ref_int;
[L1838]              __tmp__sum__balances1 := sum__balances1;
[L1839]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1840]              __tmp__sum__allowances2 := sum__allowances2;
[L1841]              __tmp__Length := Length;
[L1842]              __tmp__now := now;
[L1843]              __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L1844]              __tmp___owner_Ownership := _owner_Ownership;
[L1845]              __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L1846]              __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L1847]              __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L1848]              __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L1849]              __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L1850]              __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L1851]              __tmp___slist_AddressChain := _slist_AddressChain;
[L1852]              __tmp___infcs_ERC165 := _infcs_ERC165;
[L1853]              __tmp___supply_ERC20 := _supply_ERC20;
[L1854]              __tmp___balances_ERC20 := _balances_ERC20;
[L1855]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1856]              __tmp___name_DkargoToken := _name_DkargoToken;
[L1857]              __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L1858]  CALL        call __ret_0_ := totalSupply_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5115]              __ret_0_ := __tmp___supply_ERC20[this];
[L1858]  RET         call __ret_0_ := totalSupply_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L1859]              assume revert || gas < 0;
[L8376]  RET         call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L8450]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND FALSE  !(choice == 11)
[L8365]  COND FALSE  !(choice == 10)
[L8372]  COND TRUE   choice == 9
[L8373]              gas := gas - 21000;
[L8374]  COND TRUE   gas >= 0
[L8375]              assume msgvalue_MSG == 0;
[L8376]  CALL        call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _supply_ERC20[this] >= 0 && _supply_ERC20[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_ERC200 := true;
[L2]                 call_totalSupply_ERC200 := false;
[L2]                 revert := revert_hold;
[L1826]              havoc __exception;
[L1827]              revert := false;
[L1828]  COND TRUE   __exception
[L1829]              __tmp__Balance := Balance;
[L1830]              __tmp__DType := DType;
[L1831]              __tmp__Alloc := Alloc;
[L1832]              __tmp__balance_ADDR := balance_ADDR;
[L1833]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1834]              __tmp__sum := sum;
[L1835]              __tmp__M_int_bool := M_int_bool;
[L1836]              __tmp__sum__infcs0 := sum__infcs0;
[L1837]              __tmp__M_Ref_int := M_Ref_int;
[L1838]              __tmp__sum__balances1 := sum__balances1;
[L1839]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1840]              __tmp__sum__allowances2 := sum__allowances2;
[L1841]              __tmp__Length := Length;
[L1842]              __tmp__now := now;
[L1843]              __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L1844]              __tmp___owner_Ownership := _owner_Ownership;
[L1845]              __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L1846]              __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L1847]              __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L1848]              __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L1849]              __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L1850]              __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L1851]              __tmp___slist_AddressChain := _slist_AddressChain;
[L1852]              __tmp___infcs_ERC165 := _infcs_ERC165;
[L1853]              __tmp___supply_ERC20 := _supply_ERC20;
[L1854]              __tmp___balances_ERC20 := _balances_ERC20;
[L1855]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1856]              __tmp___name_DkargoToken := _name_DkargoToken;
[L1857]              __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L1858]  CALL        call __ret_0_ := totalSupply_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5115]              __ret_0_ := __tmp___supply_ERC20[this];
[L1858]  RET         call __ret_0_ := totalSupply_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L1859]              assume revert || gas < 0;
[L8376]  RET         call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L8450]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 13:59:24,243 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:59:24,243 INFO  L82        PathProgramCache]: Analyzing trace with hash 383711424, now seen corresponding path program 1 times
[2020-11-25 13:59:24,244 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:59:24,259 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:59:24,331 INFO  L134       CoverageAnalysis]: Checked inductivity of 65 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 65 trivial. 0 not checked.
[2020-11-25 13:59:24,331 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:59:24,331 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 13:59:24,331 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:59:24,331 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 13:59:24,332 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 13:59:24,332 INFO  L87              Difference]: Start difference. First operand 5078 states and 5667 transitions. cyclomatic complexity: 591 Second operand 5 states.
[2020-11-25 13:59:24,652 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:59:24,652 INFO  L93              Difference]: Finished difference Result 3258 states and 3608 transitions.
[2020-11-25 13:59:24,652 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 13:59:24,652 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3258 states and 3608 transitions.
[2020-11-25 13:59:24,659 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 13:59:24,659 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3258 states to 0 states and 0 transitions.
[2020-11-25 13:59:24,659 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 13:59:24,659 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 13:59:24,659 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 13:59:24,659 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:59:24,659 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 13:59:24,659 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 13:59:24,659 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 13:59:24,659 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 13:59:24,660 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 13:59:24,660 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 13:59:24,660 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 13:59:24,663 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 01:59:24 BasicIcfg
[2020-11-25 13:59:24,663 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 13:59:24,663 INFO  L168              Benchmark]: Toolchain (without parser) took 7383.44 ms. Allocated memory was 1.0 GB in the beginning and 2.0 GB in the end (delta: 923.3 MB). Free memory was 929.8 MB in the beginning and 1.3 GB in the end (delta: -390.6 MB). Peak memory consumption was 532.7 MB. Max. memory is 15.3 GB.
[2020-11-25 13:59:24,664 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 13:59:24,664 INFO  L168              Benchmark]: Boogie Preprocessor took 123.29 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 913.7 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-25 13:59:24,664 INFO  L168              Benchmark]: UtopiaSpecLang took 77.50 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 903.0 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 13:59:24,665 INFO  L168              Benchmark]: Boogie Printer took 21.83 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 897.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 13:59:24,665 INFO  L168              Benchmark]: RCFGBuilder took 1122.24 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 58.2 MB). Free memory was 897.6 MB in the beginning and 916.6 MB in the end (delta: -19.0 MB). Peak memory consumption was 184.2 MB. Max. memory is 15.3 GB.
[2020-11-25 13:59:24,665 INFO  L168              Benchmark]: UtopiaLTL2Aut took 33.47 ms. Allocated memory is still 1.1 GB. Free memory was 916.6 MB in the beginning and 907.3 MB in the end (delta: 9.4 MB). Peak memory consumption was 9.4 MB. Max. memory is 15.3 GB.
[2020-11-25 13:59:24,666 INFO  L168              Benchmark]: BÃ¼chi Program Product took 2436.39 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 194.5 MB). Free memory was 907.3 MB in the beginning and 981.2 MB in the end (delta: -73.9 MB). Peak memory consumption was 470.2 MB. Max. memory is 15.3 GB.
[2020-11-25 13:59:24,666 INFO  L168              Benchmark]: BlockEncodingV2 took 228.32 ms. Allocated memory is still 1.3 GB. Free memory was 981.2 MB in the beginning and 874.9 MB in the end (delta: 106.2 MB). Peak memory consumption was 106.2 MB. Max. memory is 15.3 GB.
[2020-11-25 13:59:24,666 INFO  L168              Benchmark]: BuchiAutomizer took 3337.42 ms. Allocated memory was 1.3 GB in the beginning and 2.0 GB in the end (delta: 670.6 MB). Free memory was 874.9 MB in the beginning and 1.3 GB in the end (delta: -445.5 MB). Peak memory consumption was 225.1 MB. Max. memory is 15.3 GB.
[2020-11-25 13:59:24,669 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    7634 locations, 13669 edges
  - StatisticsResult: Encoded RCFG
    7442 locations, 13128 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 123.29 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 913.7 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 77.50 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 903.0 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 21.83 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 897.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1122.24 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 58.2 MB). Free memory was 897.6 MB in the beginning and 916.6 MB in the end (delta: -19.0 MB). Peak memory consumption was 184.2 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 33.47 ms. Allocated memory is still 1.1 GB. Free memory was 916.6 MB in the beginning and 907.3 MB in the end (delta: 9.4 MB). Peak memory consumption was 9.4 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 2436.39 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 194.5 MB). Free memory was 907.3 MB in the beginning and 981.2 MB in the end (delta: -73.9 MB). Peak memory consumption was 470.2 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 228.32 ms. Allocated memory is still 1.3 GB. Free memory was 981.2 MB in the beginning and 874.9 MB in the end (delta: 106.2 MB). Peak memory consumption was 106.2 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 3337.42 ms. Allocated memory was 1.3 GB in the beginning and 2.0 GB in the end (delta: 670.6 MB). Free memory was 874.9 MB in the beginning and 1.3 GB in the end (delta: -445.5 MB). Peak memory consumption was 225.1 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    3094 locations, 4212 edges
  - StatisticsResult: BuchiProgram size
    7634 locations, 13669 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 7 terminating modules (7 trivial, 0 deterministic, 0 nondeterministic). 7 modules have a trivial ranking function, the largest among these consists of 8 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 3.3s and 8 iterations.  TraceHistogramMax:3. Analysis of lassos took 0.8s. Construction of modules took 0.8s. BÃ¼chi inclusion checks took 0.6s. Highest rank in rank-based complementation 0. Minimization of det autom 7. Minimization of nondet autom 0. Automata minimization 0.3s AutomataMinimizationTime, 6 MinimizatonAttempts, 1136 StatesRemovedByMinimization, 3 NontrivialMinimizations. Non-live state removal took 0.2s Buchi closure took 0.0s. Biggest automaton had 5794 states and ocurred in iteration 1.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 39136 SDtfs, 19312 SDslu, 67884 SDs, 0 SdLazy, 4054 SolverSat, 4388 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 0.8s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU7 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_totalSupply_ERC200) ==> ( <>(success_totalSupply_ERC200) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
